
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ff 7e 00 00       	call   c0007f1f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a5 c3 01 00       	call   c001c3ca <_init>
c0000025:	c3                   	ret    
c0000026:	bb 66 ce 01 c0       	mov    ebx,0xc001ce66
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 70 ce 01 c0    	cmp    ebx,0xc001ce70
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000049:	3d 18 f9 01 c0       	cmp    eax,0xc001f918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 f9 01 c0       	push   0xc001f918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000075:	2d 18 f9 01 c0       	sub    eax,0xc001f918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 f9 01 c0       	push   0xc001f918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fb40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 78 ce 01 c0       	mov    ebx,0xc001ce78
c00000bb:	81 eb 74 ce 01 c0    	sub    ebx,0xc001ce74
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 74 ce 01 c0       	mov    esi,0xc001ce74
c00000ca:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 fb 01 c0       	mov    ds:0xc001fb44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 f9 01 c0       	push   0xc001f918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fb40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 fb 01 c0       	push   0xc001fb48
c000012c:	68 18 f9 01 c0       	push   0xc001f918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 0c 30 01 00       	call   c00132dc <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 00 a7 00 00       	call   c000a9e8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 ea 2f 01 00       	call   c00132dc <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 bb 34 01 00       	call   c00137cc <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 0a 3b 01 00       	call   c0013e24 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 40 09 02 c0 	lgdtd  ds:0xc0020940
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 60 fb 01 c0       	mov    ds:0xc001fb60,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 60 fb 01 c0    	mov    DWORD PTR ds:0xc001fb60,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 60 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb60
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3180],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 80 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3180],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 80 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3180],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 80 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb80
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 84 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe047c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 84 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe047c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d bc fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fbbc
c0000d5d:	c7 42 0c b4 fb 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fbb4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 80 fb 01 c0 02 	test   BYTE PTR ds:0xc001fb80,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f2 6e 00 00       	call   c0007d30 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 34 6e 00 00       	call   c0007d30 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 1e 6e 00 00       	call   c0007d30 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fa 6d 00 00       	call   c0007d30 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 80 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb80
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 84 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe047c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 84 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe047c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 b4 fb 01 c0 	lea    edx,[eax*8-0x3ffe044c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d c0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbc0
c00010df:	81 fb b4 fb 01 c0    	cmp    ebx,0xc001fbb4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d b4 fb 01 c0       	cmp    eax,0xc001fbb4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d b0 fb 01 c0    	cmp    DWORD PTR ds:0xc001fbb0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 bc fb 01 c0       	mov    ds:0xc001fbbc,eax
c000111b:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c0001120:	a3 b0 fb 01 c0       	mov    ds:0xc001fbb0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c000112e:	c7 40 0c b4 fb 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fbb4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 78 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0488]
c000117f:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 80 fb 01 c0 	lea    ecx,[edx*4-0x3ffe0480]
c000119a:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd b4 fe 01 c0 	or     DWORD PTR [edi*4-0x3ffe014c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 b4 fb 01 c0 	lea    eax,[eax*8-0x3ffe044c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,ecx
c0001254:	89 0d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,ecx
c000125a:	c7 41 08 b4 fb 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fbb4
c0001261:	c7 41 0c b4 fb 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fbb4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd ac fb 01 c0 	lea    edx,[ecx*8-0x3ffe0454]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 ac fb 01 c0 	lea    edx,[eax*4-0x3ffe0454]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d b4 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe014c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edi
c0001327:	89 3d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,edi
c000132d:	c7 47 08 b4 fb 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fbb4
c0001334:	c7 47 0c b4 fb 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fbb4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d b0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbb0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 80 fb 01 c0       	mov    edx,0xc001fb80
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d d4 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fed4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d d4 fe 01 c0    	mov    DWORD PTR ds:0xc001fed4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 dc fe 01 c0    	push   DWORD PTR ds:0xc001fedc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 dc fe 01 c0       	mov    eax,ds:0xc001fedc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d ac fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbac,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 84 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe047c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 b4 fb 01 c0       	mov    eax,0xc001fbb4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d ac fe 01 c0       	cmp    eax,0xc001feac
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 e8 fe 01 c0       	mov    eax,ds:0xc001fee8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 d0 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fed0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 e4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fee4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 f4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fef4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 84 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe307c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 80 fb 01 c0       	mov    eax,ds:0xc001fb80
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 80 fb 01 c0       	mov    ds:0xc001fb80,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d c4 fe 01 c0    	mov    DWORD PTR ds:0xc001fec4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d c8 fe 01 c0    	mov    DWORD PTR ds:0xc001fec8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d cc fe 01 c0    	mov    DWORD PTR ds:0xc001fecc,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 42 53 01 00       	jmp    c001704c <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 70 53 01 00       	jmp    c0017090 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 95 53 01 00       	jmp    c00170d4 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 e0 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f20]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 e0 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f20]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba e8 ee 01 c0       	mov    edx,0xc001eee8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 9c cf 01 c0       	mov    edx,0xc001cf9c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 20 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe00e0]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 00 ff 01 c0    	mov    ax,ds:0xc001ff00
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 00 ff 01 c0    	mov    ds:0xc001ff00,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 a2 cf 01 c0       	mov    eax,0xc001cfa2
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 60 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2fa0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 ab cf 01 c0       	mov    eax,0xc001cfab
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 e0 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f20]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 20 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe00e0]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 20 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe00e0],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 30 d0 01 c0       	mov    eax,0xc001d030
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 20 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe00e0]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 20 d0 01 c0       	mov    ebx,0xc001d020
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 00 d0 01 c0       	mov    edx,0xc001d000
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 10 d0 01 c0       	mov    edx,0xc001d010
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba b2 cf 01 c0       	mov    edx,0xc001cfb2
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba be cf 01 c0       	mov    edx,0xc001cfbe
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba d2 cf 01 c0       	mov    edx,0xc001cfd2
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 be 23 00 00       	call   c0007e59 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 b6 23 00 00       	call   c0007e69 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 00 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d400
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 00 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d400
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 00 d2 01 c0       	mov    eax,0xc001d200
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 40 d1 01 c0       	mov    eax,0xc001d140
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 00 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f00]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 50 00 02 c0       	mov    eax,0xc0020050
c0005ed7:	ba 90 09 02 c0       	mov    edx,0xc0020990
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 e0 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fae0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 a8 18 01 00       	call   c0017928 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 00 fb 01 c0       	mov    eax,0xc001fb00
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 a0 fa 01 c0       	mov    eax,0xc001faa0
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 00 d5 01 c0       	push   0xc001d500
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 34 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020934
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 00 09 02 c0       	mov    ecx,0xc0020900
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d c0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffc0,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba 54 00 02 c0       	mov    edx,0xc0020054
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0040],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa c0 ff 01 c0    	lea    ebp,[edx-0x3ffe0040]
c000658e:	89 82 c0 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe0040],eax
c0006594:	89 ba c4 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe003c],edi
c000659a:	c7 82 c8 ff 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0038],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 c0 ff 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0040],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 50 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb0]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 cc ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0034]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d c0 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0040],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d 50 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffb0],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d c8 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0038],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c000686c:	39 0c 95 c8 ff 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0038],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 c8 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0038],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 c8 ff 01 c0 	add    DWORD PTR [edx*4-0x3ffe0038],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 c0 ff 01 c0 	lea    edx,[edx*4-0x3ffe0040]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 cc ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0034]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 c4 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe003c],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 50 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffb0],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 c8 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0038]
c0006a15:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 c0 ff 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0040]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 c8 ff 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0038]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 c8 ff 01 c0    	mov    DWORD PTR [edi-0x3ffe0038],eax
c0006a6f:	3b 87 cc ff 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0034]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd cc ff 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0034]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 d8 ff 01 c0 	lea    eax,[eax*4-0x3ffe0028]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 d0 ff 01 c0 	lea    eax,[esi*4-0x3ffe0030]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 d8 ff 01 c0 	lea    ebp,[eax*4-0x3ffe0028]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 d8 ff 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0028],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 00 d5 01 c0       	push   0xc001d500
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 d3 ff 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe002d],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 e0 fa 01 c0       	mov    ds:0xc001fae0,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 34 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020934,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 03 d5 01 c0       	push   0xc001d503
c0006cdc:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 00 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0500]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 34 09 02 c0       	mov    ds:0xc0020934,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 00 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0500]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf 00 09 02 c0       	mov    edi,0xc0020900
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 02 09 02 c0       	mov    eax,0xc0020902
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c0006d3e:	b8 0a 09 02 c0       	mov    eax,0xc002090a
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 24 09 02 c0       	mov    ds:0xc0020924,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 0a d5 01 c0       	push   0xc001d50a
c0006d75:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 c0 ff 01 c0       	push   0xc001ffc0
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 8c 10 00 00       	call   c0007e59 <malloc>
c0006dcd:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 7b 10 00 00       	call   c0007e59 <malloc>
c0006dde:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 61 10 00 00       	call   c0007e59 <malloc>
c0006df8:	89 04 9d 00 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0500],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 48 10 00 00       	call   c0007e59 <malloc>
c0006e11:	89 04 9d a0 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0560],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d 00 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0500]
c0006e44:	e8 20 10 00 00       	call   c0007e69 <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d a0 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0560]
c0006e53:	e8 11 10 00 00       	call   c0007e69 <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 f6 0f 00 00       	call   c0007e69 <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 a0 ff 01 c0       	mov    eax,ds:0xc001ffa0
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 e1 0f 00 00       	call   c0007e69 <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 a0 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ffa0,0x0
c0006e95:	c7 05 30 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020930,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 9f 0f 00 00       	jmp    c0007e59 <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 ba 0f 00 00       	jmp    c0007e79 <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006ee1:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0006f0b:	e8 2c cb 00 00       	call   c0013a3c <schedule()>
c0006f10:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006f15:	48                   	dec    eax
c0006f16:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 11 d5 01 c0       	push   0xc001d511
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 38 09 02 c0       	mov    eax,0xc0020938
c0006f65:	e9 ea 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 1a d5 01 c0       	push   0xc001d51a
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 b0 c1 01 c0       	mov    eax,0xc001c1b0
c0006f8e:	e9 c1 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 24 d5 01 c0       	push   0xc001d524
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 e4 be 01 c0       	mov    eax,0xc001bee4
c0006fb6:	e9 99 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 2d d5 01 c0       	push   0xc001d52d
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 07                	je     c0006fe0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd9:	b8 b0 c2 01 c0       	mov    eax,0xc001c2b0
c0006fde:	eb 74                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe0:	83 ec 08             	sub    esp,0x8
c0006fe3:	68 37 d5 01 c0       	push   0xc001d537
c0006fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fec:	e8 0f 97 ff ff       	call   c0000700 <strcmp>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	85 c0                	test   eax,eax
c0006ff6:	0f 94 c0             	sete   al
c0006ff9:	84 c0                	test   al,al
c0006ffb:	74 07                	je     c0007004 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ffd:	b8 30 c0 01 c0       	mov    eax,0xc001c030
c0007002:	eb 50                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007004:	83 ec 08             	sub    esp,0x8
c0007007:	68 40 d5 01 c0       	push   0xc001d540
c000700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007010:	e8 eb 96 ff ff       	call   c0000700 <strcmp>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	85 c0                	test   eax,eax
c000701a:	0f 94 c0             	sete   al
c000701d:	84 c0                	test   al,al
c000701f:	74 07                	je     c0007028 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007021:	b8 3c 09 02 c0       	mov    eax,0xc002093c
c0007026:	eb 2c                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007028:	83 ec 08             	sub    esp,0x8
c000702b:	68 4d d5 01 c0       	push   0xc001d54d
c0007030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007034:	e8 c7 96 ff ff       	call   c0000700 <strcmp>
c0007039:	83 c4 10             	add    esp,0x10
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 94 c0             	sete   al
c0007041:	84 c0                	test   al,al
c0007043:	74 07                	je     c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007045:	b8 3d 09 02 c0       	mov    eax,0xc002093d
c000704a:	eb 08                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000704c:	b8 00 00 00 00       	mov    eax,0x0
c0007051:	8d 76 00             	lea    esi,[esi+0x0]
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    

c0007058 <Computer::close(int, int, void*)>:
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	53                   	push   ebx
c000705b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000705f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007063:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007067:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000706d:	83 ec 0c             	sub    esp,0xc
c0007070:	50                   	push   eax
c0007071:	e8 d0 50 00 00       	call   c000c146 <Device::closeAll()>
c0007076:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000707c:	83 c4 10             	add    esp,0x10
c000707f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007081:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007085:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000708d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007095:	5b                   	pop    ebx
c0007096:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007099:	5e                   	pop    esi
c000709a:	5f                   	pop    edi
c000709b:	ff e0                	jmp    eax

c000709d <Krnl::firstTask()>:
c000709d:	53                   	push   ebx
c000709e:	83 ec 14             	sub    esp,0x14
c00070a1:	fb                   	sti    
c00070a2:	68 5a d5 01 c0       	push   0xc001d55a
c00070a7:	e8 07 0e 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00070ac:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b3:	e8 a1 0d 00 00       	call   c0007e59 <malloc>
c00070b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070bf:	89 c3                	mov    ebx,eax
c00070c1:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00070c6:	50                   	push   eax
c00070c7:	68 73 d5 01 c0       	push   0xc001d573
c00070cc:	6a 01                	push   0x1
c00070ce:	53                   	push   ebx
c00070cf:	e8 3c c5 00 00       	call   c0013610 <Process::Process(bool, char const*, Process*, char**)>
c00070d4:	83 c4 20             	add    esp,0x20
c00070d7:	68 ff 00 00 00       	push   0xff
c00070dc:	6a 00                	push   0x0
c00070de:	68 b3 78 00 c0       	push   0xc00078b3
c00070e3:	53                   	push   ebx
c00070e4:	e8 33 c7 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c00070e9:	8b 15 30 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e30
c00070ef:	6a 7a                	push   0x7a
c00070f1:	6a 00                	push   0x0
c00070f3:	68 70 42 01 c0       	push   0xc0014270
c00070f8:	52                   	push   edx
c00070f9:	e8 1e c7 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c00070fe:	83 c4 14             	add    esp,0x14
c0007101:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0007106:	68 70 d6 01 c0       	push   0xc001d670
c000710b:	c6 05 3d 09 02 c0 01 	mov    BYTE PTR ds:0xc002093d,0x1
c0007112:	e8 9c 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007117:	e8 33 d5 00 00       	call   c001464f <Vm::initialise8086()>
c000711c:	e8 69 3e 00 00       	call   c000af8a <Fs::initVFS()>
c0007121:	c7 04 24 80 d5 01 c0 	mov    DWORD PTR [esp],0xc001d580
c0007128:	e8 86 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000712d:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0007132:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007138:	8b 10                	mov    edx,DWORD PTR [eax]
c000713a:	6a 00                	push   0x0
c000713c:	6a 00                	push   0x0
c000713e:	6a 00                	push   0x0
c0007140:	50                   	push   eax
c0007141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007144:	83 c4 14             	add    esp,0x14
c0007147:	68 70 d6 01 c0       	push   0xc001d670
c000714c:	e8 62 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007151:	e8 4c ad 00 00       	call   c0011ea2 <Sys::loadSyscalls()>
c0007156:	e8 83 94 00 00       	call   c00105de <Krnl::loadSystemEnv()>
c000715b:	e8 48 97 00 00       	call   c00108a8 <Krnl::setupPowerManager()>
c0007160:	83 c4 0c             	add    esp,0xc
c0007163:	6a 3a                	push   0x3a
c0007165:	68 9a d5 01 c0       	push   0xc001d59a
c000716a:	68 a3 d5 01 c0       	push   0xc001d5a3
c000716f:	e8 5e 9c 00 00       	call   c0010dd2 <Reg::readIntWithDefault(char*, char*, int)>
c0007174:	89 04 24             	mov    DWORD PTR [esp],eax
c0007177:	e8 1c 49 00 00       	call   c000ba98 <User::loadClockSettings(int)>
c000717c:	c7 04 24 94 d6 01 c0 	mov    DWORD PTR [esp],0xc001d694
c0007183:	e8 2b 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007188:	59                   	pop    ecx
c0007189:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000718e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007194:	53                   	push   ebx
c0007195:	e8 aa 4f 00 00       	call   c000c144 <Device::loadDriversForAll()>
c000719a:	c7 04 24 ab d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ab
c00071a1:	e8 0d 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00071a6:	58                   	pop    eax
c00071a7:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c00071ad:	5a                   	pop    edx
c00071ae:	6a 01                	push   0x1
c00071b0:	68 bc d5 01 c0       	push   0xc001d5bc
c00071b5:	e8 90 be 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c00071ba:	59                   	pop    ecx
c00071bb:	5a                   	pop    edx
c00071bc:	53                   	push   ebx
c00071bd:	50                   	push   eax
c00071be:	e8 b8 c0 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c00071c3:	83 c4 10             	add    esp,0x10
c00071c6:	83 ec 0c             	sub    esp,0xc
c00071c9:	6a 02                	push   0x2
c00071cb:	e8 68 ca 00 00       	call   c0013c38 <blockTask(TaskState)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	eb f1                	jmp    c00071c6 <Krnl::firstTask()+0x129>
c00071d5:	90                   	nop

c00071d6 <Computer::Computer()>:
c00071d6:	83 ec 0c             	sub    esp,0xc
c00071d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	68 d8 d5 01 c0       	push   0xc001d5d8
c00071e5:	50                   	push   eax
c00071e6:	e8 d5 4f 00 00       	call   c000c1c0 <Device::Device(char const*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	89 10                	mov    DWORD PTR [eax],edx
c00071f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000721f:	83 ca 04             	or     edx,0x4
c0007222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007232:	31 d2                	xor    edx,edx
c0007234:	88 c2                	mov    dl,al
c0007236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724b:	31 d2                	xor    edx,edx
c000724d:	88 c2                	mov    dl,al
c000724f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007253:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007262:	8d 50 01             	lea    edx,[eax+0x1]
c0007265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007269:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000726f:	31 d2                	xor    edx,edx
c0007271:	88 c2                	mov    dl,al
c0007273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727b:	83 e1 3f             	and    ecx,0x3f
c000727e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007282:	90                   	nop
c0007283:	83 c4 0c             	add    esp,0xc
c0007286:	c3                   	ret    
c0007287:	90                   	nop

c0007288 <Computer::setBootMessage(char const*)>:
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::detectFeatures()>:
c000728a:	55                   	push   ebp
c000728b:	57                   	push   edi
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 1c             	sub    esp,0x1c
c0007291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007295:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000729f:	e8 75 8f ff ff       	call   c0000219 <detectCPUID>
c00072a4:	85 c0                	test   eax,eax
c00072a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072ac:	0f 95 c2             	setne  dl
c00072af:	83 e0 fd             	and    eax,0xfffffffd
c00072b2:	01 d2                	add    edx,edx
c00072b4:	09 d0                	or     eax,edx
c00072b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072bc:	a8 02                	test   al,0x2
c00072be:	75 46                	jne    c0007306 <Computer::detectFeatures()+0x7c>
c00072c0:	f6 05 51 09 02 c0 04 	test   BYTE PTR ds:0xc0020951,0x4
c00072c7:	74 07                	je     c00072d0 <Computer::detectFeatures()+0x46>
c00072c9:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d0:	e8 a1 4b 01 00       	call   c001be76 <x87Detect>
c00072d5:	83 e0 01             	and    eax,0x1
c00072d8:	c1 e0 04             	shl    eax,0x4
c00072db:	88 c2                	mov    dl,al
c00072dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e3:	83 e0 ef             	and    eax,0xffffffef
c00072e6:	09 d0                	or     eax,edx
c00072e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ee:	a8 10                	test   al,0x10
c00072f0:	0f 85 2a 01 00 00    	jne    c0007420 <Computer::detectFeatures()+0x196>
c00072f6:	84 c0                	test   al,al
c00072f8:	0f 88 45 01 00 00    	js     c0007443 <Computer::detectFeatures()+0x1b9>
c00072fe:	83 c4 1c             	add    esp,0x1c
c0007301:	5b                   	pop    ebx
c0007302:	5e                   	pop    esi
c0007303:	5f                   	pop    edi
c0007304:	5d                   	pop    ebp
c0007305:	c3                   	ret    
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	6a 20                	push   0x20
c000730b:	e8 f0 83 00 00       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c0007310:	83 e0 01             	and    eax,0x1
c0007313:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007320:	83 e0 f7             	and    eax,0xfffffff7
c0007323:	09 d0                	or     eax,edx
c0007325:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007332:	e8 c9 83 00 00       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c0007337:	83 e0 01             	and    eax,0x1
c000733a:	88 c2                	mov    dl,al
c000733c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007342:	83 e0 fe             	and    eax,0xfffffffe
c0007345:	09 d0                	or     eax,edx
c0007347:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000734d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007354:	e8 a7 83 00 00       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c0007359:	c1 e0 07             	shl    eax,0x7
c000735c:	88 c2                	mov    dl,al
c000735e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007364:	83 e0 7f             	and    eax,0x7f
c0007367:	09 d0                	or     eax,edx
c0007369:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000736f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007376:	e8 85 83 00 00       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000737b:	83 c4 10             	add    esp,0x10
c000737e:	83 e0 01             	and    eax,0x1
c0007381:	c1 e0 05             	shl    eax,0x5
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000738c:	83 e0 df             	and    eax,0xffffffdf
c000738f:	09 d0                	or     eax,edx
c0007391:	f7 05 50 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020950,0x401
c000739b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a1:	0f 84 c2 00 00 00    	je     c0007469 <Computer::detectFeatures()+0x1df>
c00073a7:	83 e0 fe             	and    eax,0xfffffffe
c00073aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b6:	88 c2                	mov    dl,al
c00073b8:	83 e2 09             	and    edx,0x9
c00073bb:	fe ca                	dec    dl
c00073bd:	75 09                	jne    c00073c8 <Computer::detectFeatures()+0x13e>
c00073bf:	83 e0 fe             	and    eax,0xfffffffe
c00073c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c8:	83 ec 0c             	sub    esp,0xc
c00073cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073cf:	50                   	push   eax
c00073d0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d4:	55                   	push   ebp
c00073d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d9:	57                   	push   edi
c00073da:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073de:	56                   	push   esi
c00073df:	68 00 00 00 80       	push   0x80000000
c00073e4:	e8 93 82 00 00       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e9:	83 c4 20             	add    esp,0x20
c00073ec:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073f7:	0f 86 c3 fe ff ff    	jbe    c00072c0 <Computer::detectFeatures()+0x36>
c00073fd:	83 ec 0c             	sub    esp,0xc
c0007400:	50                   	push   eax
c0007401:	55                   	push   ebp
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	68 01 00 00 80       	push   0x80000001
c0007409:	e8 6e 82 00 00       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000740e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	e9 a0 fe ff ff       	jmp    c00072c0 <Computer::detectFeatures()+0x36>
c0007420:	e8 0b 4a 01 00       	call   c001be30 <absolutelyNoChanceInHell>
c0007425:	88 c2                	mov    dl,al
c0007427:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000742d:	c1 e2 07             	shl    edx,0x7
c0007430:	83 e0 7f             	and    eax,0x7f
c0007433:	09 d0                	or     eax,edx
c0007435:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743b:	84 c0                	test   al,al
c000743d:	0f 89 bb fe ff ff    	jns    c00072fe <Computer::detectFeatures()+0x74>
c0007443:	e8 68 47 01 00       	call   c001bbb0 <avxDetect>
c0007448:	83 e0 01             	and    eax,0x1
c000744b:	c1 e0 05             	shl    eax,0x5
c000744e:	88 c2                	mov    dl,al
c0007450:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007456:	83 e0 df             	and    eax,0xffffffdf
c0007459:	09 d0                	or     eax,edx
c000745b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007461:	83 c4 1c             	add    esp,0x1c
c0007464:	5b                   	pop    ebx
c0007465:	5e                   	pop    esi
c0007466:	5f                   	pop    edi
c0007467:	5d                   	pop    ebp
c0007468:	c3                   	ret    
c0007469:	83 ec 0c             	sub    esp,0xc
c000746c:	68 00 02 00 00       	push   0x200
c0007471:	e8 8a 82 00 00       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	83 e0 01             	and    eax,0x1
c000747c:	88 c2                	mov    dl,al
c000747e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007484:	83 e0 fe             	and    eax,0xfffffffe
c0007487:	09 d0                	or     eax,edx
c0007489:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000748f:	e9 1c ff ff ff       	jmp    c00073b0 <Computer::detectFeatures()+0x126>

c0007494 <Computer::displayFeatures()>:
c0007494:	c3                   	ret    
c0007495:	90                   	nop

c0007496 <Computer::rdmsr(unsigned int)>:
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a4:	74 0a                	je     c00074b0 <Computer::rdmsr(unsigned int)+0x1a>
c00074a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074aa:	0f 32                	rdmsr  
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	c3                   	ret    
c00074b0:	83 ec 0c             	sub    esp,0xc
c00074b3:	68 e1 d5 01 c0       	push   0xc001d5e1
c00074b8:	e8 2a 92 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00074bd:	83 c4 10             	add    esp,0x10
c00074c0:	eb e4                	jmp    c00074a6 <Computer::rdmsr(unsigned int)+0x10>

c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	52                   	push   edx
c00074c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d8:	74 0e                	je     c00074e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074de:	89 f0                	mov    eax,esi
c00074e0:	89 fa                	mov    edx,edi
c00074e2:	0f 30                	wrmsr  
c00074e4:	58                   	pop    eax
c00074e5:	5e                   	pop    esi
c00074e6:	5f                   	pop    edi
c00074e7:	c3                   	ret    
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	68 e7 d5 01 c0       	push   0xc001d5e7
c00074f0:	e8 f2 91 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	eb e0                	jmp    c00074da <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fa <Computer::shutdown()>:
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007501:	8b 10                	mov    edx,DWORD PTR [eax]
c0007503:	6a 00                	push   0x0
c0007505:	6a 00                	push   0x0
c0007507:	6a 00                	push   0x0
c0007509:	50                   	push   eax
c000750a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000750d:	83 c4 1c             	add    esp,0x1c
c0007510:	c3                   	ret    
c0007511:	90                   	nop

c0007512 <Computer::restart()>:
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007519:	8b 10                	mov    edx,DWORD PTR [eax]
c000751b:	6a 00                	push   0x0
c000751d:	6a 00                	push   0x0
c000751f:	6a 01                	push   0x1
c0007521:	50                   	push   eax
c0007522:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007525:	83 c4 1c             	add    esp,0x1c
c0007528:	c3                   	ret    
c0007529:	90                   	nop

c000752a <Computer::sleep()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007538:	e9 3b 7c 00 00       	jmp    c000f178 <ACPI::sleep()>
c000753d:	90                   	nop

c000753e <Computer::nmiEnabled()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007548:	c3                   	ret    
c0007549:	90                   	nop

c000754a <Computer::readCMOS(unsigned char)>:
c000754a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007555:	19 c0                	sbb    eax,eax
c0007557:	83 e0 80             	and    eax,0xffffff80
c000755a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000755e:	e6 70                	out    0x70,al
c0007560:	e4 71                	in     al,0x71
c0007562:	c3                   	ret    
c0007563:	90                   	nop

c0007564 <Computer::enableNMI(bool)>:
c0007564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007572:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757a:	eb ce                	jmp    c000754a <Computer::readCMOS(unsigned char)>

c000757c <Computer::open(int, int, void*)>:
c000757c:	56                   	push   esi
c000757d:	53                   	push   ebx
c000757e:	83 ec 10             	sub    esp,0x10
c0007581:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007585:	f6 05 50 09 02 c0 04 	test   BYTE PTR ds:0xc0020950,0x4
c000758c:	68 ed d5 01 c0       	push   0xc001d5ed
c0007591:	0f 94 05 20 f8 01 c0 	sete   BYTE PTR ds:0xc001f820
c0007598:	e8 16 09 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000759d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a4:	e8 b0 08 00 00       	call   c0007e59 <malloc>
c00075a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ac:	89 c6                	mov    esi,eax
c00075ae:	e8 5d 77 00 00       	call   c000ed10 <ACPI::ACPI()>
c00075b3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b9:	58                   	pop    eax
c00075ba:	5a                   	pop    edx
c00075bb:	56                   	push   esi
c00075bc:	53                   	push   ebx
c00075bd:	e8 66 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c00075c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c5:	e8 c0 fc ff ff       	call   c000728a <Computer::detectFeatures()>
c00075ca:	59                   	pop    ecx
c00075cb:	5e                   	pop    esi
c00075cc:	6a 01                	push   0x1
c00075ce:	53                   	push   ebx
c00075cf:	e8 90 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c00075d4:	c7 04 24 05 d6 01 c0 	mov    DWORD PTR [esp],0xc001d605
c00075db:	e8 d3 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00075e0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075e7:	e8 6d 08 00 00       	call   c0007e59 <malloc>
c00075ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ef:	89 c6                	mov    esi,eax
c00075f1:	e8 c2 81 00 00       	call   c000f7b8 <CPU::CPU()>
c00075f6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075fc:	58                   	pop    eax
c00075fd:	5a                   	pop    edx
c00075fe:	56                   	push   esi
c00075ff:	53                   	push   ebx
c0007600:	e8 23 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c0007605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000760f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007611:	51                   	push   ecx
c0007612:	6a 00                	push   0x0
c0007614:	6a 00                	push   0x0
c0007616:	50                   	push   eax
c0007617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761a:	83 c4 14             	add    esp,0x14
c000761d:	68 b4 d6 01 c0       	push   0xc001d6b4
c0007622:	e8 8c 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007627:	e8 e4 e0 00 00       	call   c0015710 <HalInitialiseCoprocessor()>
c000762c:	c7 04 24 1f d6 01 c0 	mov    DWORD PTR [esp],0xc001d61f
c0007633:	e8 7b 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007638:	c7 04 24 9d 70 00 c0 	mov    DWORD PTR [esp],0xc000709d
c000763f:	e8 f0 c2 00 00       	call   c0013934 <setupMultitasking(void (*)())>
c0007644:	83 c4 14             	add    esp,0x14
c0007647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000764c:	5b                   	pop    ebx
c000764d:	5e                   	pop    esi
c000764e:	c3                   	ret    
c000764f:	90                   	nop

c0007650 <Computer::disableNMI()>:
c0007650:	6a 00                	push   0x0
c0007652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007656:	50                   	push   eax
c0007657:	e8 08 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c000765c:	5a                   	pop    edx
c000765d:	59                   	pop    ecx
c000765e:	c3                   	ret    
c000765f:	90                   	nop

c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007664:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766b:	19 c0                	sbb    eax,eax
c000766d:	83 e0 80             	and    eax,0xffffff80
c0007670:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007674:	e6 70                	out    0x70,al
c0007676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767a:	e6 71                	out    0x71,al
c000767c:	c3                   	ret    
c000767d:	90                   	nop

c000767e <Computer::handleNMI()>:
c000767e:	56                   	push   esi
c000767f:	53                   	push   ebx
c0007680:	83 ec 10             	sub    esp,0x10
c0007683:	e4 92                	in     al,0x92
c0007685:	89 c6                	mov    esi,eax
c0007687:	e4 61                	in     al,0x61
c0007689:	68 3a d6 01 c0       	push   0xc001d63a
c000768e:	88 c3                	mov    bl,al
c0007690:	e8 53 35 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	83 e6 10             	and    esi,0x10
c000769b:	75 0d                	jne    c00076aa <Computer::handleNMI()+0x2c>
c000769d:	f6 c3 40             	test   bl,0x40
c00076a0:	75 1d                	jne    c00076bf <Computer::handleNMI()+0x41>
c00076a2:	84 db                	test   bl,bl
c00076a4:	78 2d                	js     c00076d3 <Computer::handleNMI()+0x55>
c00076a6:	58                   	pop    eax
c00076a7:	5b                   	pop    ebx
c00076a8:	5e                   	pop    esi
c00076a9:	c3                   	ret    
c00076aa:	83 ec 0c             	sub    esp,0xc
c00076ad:	68 4b d6 01 c0       	push   0xc001d64b
c00076b2:	e8 30 90 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00076b7:	83 c4 10             	add    esp,0x10
c00076ba:	f6 c3 40             	test   bl,0x40
c00076bd:	74 e3                	je     c00076a2 <Computer::handleNMI()+0x24>
c00076bf:	83 ec 0c             	sub    esp,0xc
c00076c2:	68 58 d6 01 c0       	push   0xc001d658
c00076c7:	e8 1b 90 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	84 db                	test   bl,bl
c00076d1:	79 d3                	jns    c00076a6 <Computer::handleNMI()+0x28>
c00076d3:	c7 44 24 10 62 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d662
c00076db:	5a                   	pop    edx
c00076dc:	5b                   	pop    ebx
c00076dd:	5e                   	pop    esi
c00076de:	e9 04 90 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c00076e3:	90                   	nop

c00076e4 <GDTEntry::setBase(unsigned int)>:
c00076e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f2:	c1 e9 10             	shr    ecx,0x10
c00076f5:	c1 e8 18             	shr    eax,0x18
c00076f8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076fb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076fe:	c3                   	ret    
c00076ff:	90                   	nop

c0007700 <GDTEntry::setLimit(unsigned int)>:
c0007700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007708:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770b:	66 89 01             	mov    WORD PTR [ecx],ax
c000770e:	83 e2 f0             	and    edx,0xfffffff0
c0007711:	c1 e8 10             	shr    eax,0x10
c0007714:	83 e0 0f             	and    eax,0xf
c0007717:	09 d0                	or     eax,edx
c0007719:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::GDT()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007732:	90                   	nop
c0007733:	c3                   	ret    

c0007734 <GDT::addEntry(GDTEntry)>:
c0007734:	53                   	push   ebx
c0007735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000773d:	8b 02                	mov    eax,DWORD PTR [edx]
c000773f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007743:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007747:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774b:	8d 48 01             	lea    ecx,[eax+0x1]
c000774e:	c1 e0 03             	shl    eax,0x3
c0007751:	89 0a                	mov    DWORD PTR [edx],ecx
c0007753:	5b                   	pop    ebx
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::getNumberOfEntries()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 00                	mov    eax,DWORD PTR [eax]
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::flush()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 10                	mov    edx,DWORD PTR [eax]
c0007764:	83 c0 04             	add    eax,0x4
c0007767:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000776e:	a3 42 09 02 c0       	mov    ds:0xc0020942,eax
c0007773:	66 89 15 40 09 02 c0 	mov    WORD PTR ds:0xc0020940,dx
c000777a:	e9 fe 8b ff ff       	jmp    c000037d <loadGDT>
c000777f:	90                   	nop

c0007780 <GDT::setup()>:
c0007780:	57                   	push   edi
c0007781:	56                   	push   esi
c0007782:	53                   	push   ebx
c0007783:	83 ec 30             	sub    esp,0x30
c0007786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778a:	6a 00                	push   0x0
c000778c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007790:	56                   	push   esi
c0007791:	e8 4e ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007796:	6a 00                	push   0x0
c0007798:	56                   	push   esi
c0007799:	e8 62 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c000779e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077a6:	6a 00                	push   0x0
c00077a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077ac:	56                   	push   esi
c00077ad:	e8 32 ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c00077b2:	68 ff ff ff 00       	push   0xffffff
c00077b7:	56                   	push   esi
c00077b8:	e8 43 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c00077bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077df:	89 f8                	mov    eax,edi
c00077e1:	89 fa                	mov    edx,edi
c00077e3:	80 e4 f7             	and    ah,0xf7
c00077e6:	80 ce 60             	or     dh,0x60
c00077e9:	89 c7                	mov    edi,eax
c00077eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077ef:	80 cc 60             	or     ah,0x60
c00077f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007802:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000780f:	50                   	push   eax
c0007810:	e8 cf fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007815:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007819:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000781d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007822:	6a 00                	push   0x0
c0007824:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007828:	50                   	push   eax
c0007829:	e8 b6 fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000782e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007833:	83 c4 0c             	add    esp,0xc
c0007836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	53                   	push   ebx
c000783f:	e8 f0 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007844:	83 c4 0c             	add    esp,0xc
c0007847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	53                   	push   ebx
c0007850:	e8 df fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007855:	83 c4 0c             	add    esp,0xc
c0007858:	57                   	push   edi
c0007859:	56                   	push   esi
c000785a:	53                   	push   ebx
c000785b:	e8 d4 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007860:	83 c4 0c             	add    esp,0xc
c0007863:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	53                   	push   ebx
c000786c:	e8 c3 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007871:	83 c4 0c             	add    esp,0xc
c0007874:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	53                   	push   ebx
c000787d:	e8 b2 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007882:	83 c4 0c             	add    esp,0xc
c0007885:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	53                   	push   ebx
c000788e:	e8 a1 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007893:	83 c4 0c             	add    esp,0xc
c0007896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	53                   	push   ebx
c000789f:	e8 90 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c00078a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a7:	e8 b2 fe ff ff       	call   c000775e <GDT::flush()>
c00078ac:	83 c4 40             	add    esp,0x40
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	c3                   	ret    

c00078b3 <idleFunction(void*)>:
c00078b3:	83 ec 0c             	sub    esp,0xc
c00078b6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00078bb:	48                   	dec    eax
c00078bc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00078c1:	75 01                	jne    c00078c4 <idleFunction(void*)+0x11>
c00078c3:	fb                   	sti    
c00078c4:	f4                   	hlt    
c00078c5:	e8 68 4b 01 00       	call   c001c432 <idleCommon()>
c00078ca:	eb f8                	jmp    c00078c4 <idleFunction(void*)+0x11>

c00078cc <IDTEntry::IDTEntry(bool)>:
c00078cc:	83 ec 04             	sub    esp,0x4
c00078cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d3:	88 04 24             	mov    BYTE PTR [esp],al
c00078d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078da:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ef:	83 e2 f0             	and    edx,0xfffffff0
c00078f2:	83 ca 0e             	or     edx,0xe
c00078f5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078fc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ff:	83 e2 ef             	and    edx,0xffffffef
c0007902:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007905:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007909:	74 05                	je     c0007910 <IDTEntry::IDTEntry(bool)+0x44>
c000790b:	b2 03                	mov    dl,0x3
c000790d:	eb 05                	jmp    c0007914 <IDTEntry::IDTEntry(bool)+0x48>
c000790f:	90                   	nop
c0007910:	b2 00                	mov    dl,0x0
c0007912:	66 90                	xchg   ax,ax
c0007914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007918:	83 e2 03             	and    edx,0x3
c000791b:	88 d1                	mov    cl,dl
c000791d:	c1 e1 05             	shl    ecx,0x5
c0007920:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007923:	83 e2 9f             	and    edx,0xffffff9f
c0007926:	09 ca                	or     edx,ecx
c0007928:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007932:	83 ca 80             	or     edx,0xffffff80
c0007935:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007938:	90                   	nop
c0007939:	83 c4 04             	add    esp,0x4
c000793c:	c3                   	ret    
c000793d:	90                   	nop

c000793e <IDTEntry::setOffset(unsigned int)>:
c000793e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007946:	66 89 02             	mov    WORD PTR [edx],ax
c0007949:	c1 e8 10             	shr    eax,0x10
c000794c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007950:	c3                   	ret    
c0007951:	90                   	nop
c0007952:	66 90                	xchg   ax,ax

c0007954 <IDT::IDT()>:
c0007954:	90                   	nop
c0007955:	c3                   	ret    

c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795a:	83 c0 30             	add    eax,0x30
c000795d:	c3                   	ret    

c000795e <IDT::addEntry(IDTEntry, int)>:
c000795e:	53                   	push   ebx
c000795f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007967:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000796f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007972:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007976:	5b                   	pop    ebx
c0007977:	c3                   	ret    

c0007978 <IDT::addEntry(int, void (*)(), bool)>:
c0007978:	53                   	push   ebx
c0007979:	83 ec 10             	sub    esp,0x10
c000797c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007981:	50                   	push   eax
c0007982:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007986:	53                   	push   ebx
c0007987:	e8 40 ff ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c000798c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007990:	53                   	push   ebx
c0007991:	e8 a8 ff ff ff       	call   c000793e <IDTEntry::setOffset(unsigned int)>
c0007996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079a6:	e8 b3 ff ff ff       	call   c000795e <IDT::addEntry(IDTEntry, int)>
c00079ab:	83 c4 30             	add    esp,0x30
c00079ae:	5b                   	pop    ebx
c00079af:	c3                   	ret    

c00079b0 <IDT::flush()>:
c00079b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b4:	66 c7 05 48 09 02 c0 ff 07 	mov    WORD PTR ds:0xc0020948,0x7ff
c00079bd:	a3 4a 09 02 c0       	mov    ds:0xc002094a,eax
c00079c2:	0f 01 1d 48 09 02 c0 	lidtd  ds:0xc0020948
c00079c9:	c3                   	ret    

c00079ca <IDT::setup()>:
c00079ca:	57                   	push   edi
c00079cb:	56                   	push   esi
c00079cc:	53                   	push   ebx
c00079cd:	83 ec 10             	sub    esp,0x10
c00079d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d4:	6a 00                	push   0x0
c00079d6:	68 40 bc 01 c0       	push   0xc001bc40
c00079db:	6a 00                	push   0x0
c00079dd:	53                   	push   ebx
c00079de:	e8 95 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079e3:	6a 00                	push   0x0
c00079e5:	68 50 bc 01 c0       	push   0xc001bc50
c00079ea:	6a 01                	push   0x1
c00079ec:	53                   	push   ebx
c00079ed:	e8 86 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	6a 00                	push   0x0
c00079f7:	68 5a bc 01 c0       	push   0xc001bc5a
c00079fc:	6a 02                	push   0x2
c00079fe:	53                   	push   ebx
c00079ff:	e8 74 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a04:	6a 00                	push   0x0
c0007a06:	68 64 bc 01 c0       	push   0xc001bc64
c0007a0b:	6a 03                	push   0x3
c0007a0d:	53                   	push   ebx
c0007a0e:	e8 65 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a13:	83 c4 20             	add    esp,0x20
c0007a16:	6a 00                	push   0x0
c0007a18:	68 6e bc 01 c0       	push   0xc001bc6e
c0007a1d:	6a 04                	push   0x4
c0007a1f:	53                   	push   ebx
c0007a20:	e8 53 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a25:	6a 00                	push   0x0
c0007a27:	68 78 bc 01 c0       	push   0xc001bc78
c0007a2c:	6a 05                	push   0x5
c0007a2e:	53                   	push   ebx
c0007a2f:	e8 44 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	6a 00                	push   0x0
c0007a39:	68 82 bc 01 c0       	push   0xc001bc82
c0007a3e:	6a 06                	push   0x6
c0007a40:	53                   	push   ebx
c0007a41:	e8 32 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a46:	6a 00                	push   0x0
c0007a48:	68 8c bc 01 c0       	push   0xc001bc8c
c0007a4d:	6a 07                	push   0x7
c0007a4f:	53                   	push   ebx
c0007a50:	e8 23 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a55:	83 c4 20             	add    esp,0x20
c0007a58:	6a 00                	push   0x0
c0007a5a:	68 96 bc 01 c0       	push   0xc001bc96
c0007a5f:	6a 08                	push   0x8
c0007a61:	53                   	push   ebx
c0007a62:	e8 11 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a67:	6a 00                	push   0x0
c0007a69:	68 9e bc 01 c0       	push   0xc001bc9e
c0007a6e:	6a 09                	push   0x9
c0007a70:	53                   	push   ebx
c0007a71:	e8 02 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	6a 00                	push   0x0
c0007a7b:	68 a8 bc 01 c0       	push   0xc001bca8
c0007a80:	6a 0a                	push   0xa
c0007a82:	53                   	push   ebx
c0007a83:	e8 f0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a88:	6a 00                	push   0x0
c0007a8a:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007a8f:	6a 0b                	push   0xb
c0007a91:	53                   	push   ebx
c0007a92:	e8 e1 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a97:	83 c4 20             	add    esp,0x20
c0007a9a:	6a 00                	push   0x0
c0007a9c:	68 b8 bc 01 c0       	push   0xc001bcb8
c0007aa1:	6a 0c                	push   0xc
c0007aa3:	53                   	push   ebx
c0007aa4:	e8 cf fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aa9:	6a 00                	push   0x0
c0007aab:	68 c0 bc 01 c0       	push   0xc001bcc0
c0007ab0:	6a 0d                	push   0xd
c0007ab2:	53                   	push   ebx
c0007ab3:	e8 c0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ab8:	83 c4 20             	add    esp,0x20
c0007abb:	6a 00                	push   0x0
c0007abd:	68 c8 bc 01 c0       	push   0xc001bcc8
c0007ac2:	6a 0e                	push   0xe
c0007ac4:	53                   	push   ebx
c0007ac5:	e8 ae fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aca:	6a 00                	push   0x0
c0007acc:	68 d0 bc 01 c0       	push   0xc001bcd0
c0007ad1:	6a 0f                	push   0xf
c0007ad3:	53                   	push   ebx
c0007ad4:	e8 9f fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ad9:	83 c4 20             	add    esp,0x20
c0007adc:	6a 00                	push   0x0
c0007ade:	68 da bc 01 c0       	push   0xc001bcda
c0007ae3:	6a 10                	push   0x10
c0007ae5:	53                   	push   ebx
c0007ae6:	e8 8d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aeb:	6a 00                	push   0x0
c0007aed:	68 e4 bc 01 c0       	push   0xc001bce4
c0007af2:	6a 11                	push   0x11
c0007af4:	53                   	push   ebx
c0007af5:	e8 7e fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007afa:	83 c4 20             	add    esp,0x20
c0007afd:	6a 00                	push   0x0
c0007aff:	68 ee bc 01 c0       	push   0xc001bcee
c0007b04:	6a 12                	push   0x12
c0007b06:	53                   	push   ebx
c0007b07:	e8 6c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b0c:	6a 01                	push   0x1
c0007b0e:	68 88 bd 01 c0       	push   0xc001bd88
c0007b13:	6a 60                	push   0x60
c0007b15:	53                   	push   ebx
c0007b16:	e8 5d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b1b:	83 c4 20             	add    esp,0x20
c0007b1e:	6a 00                	push   0x0
c0007b20:	68 8f bd 01 c0       	push   0xc001bd8f
c0007b25:	6a 20                	push   0x20
c0007b27:	53                   	push   ebx
c0007b28:	e8 4b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b2d:	6a 00                	push   0x0
c0007b2f:	68 7a bd 01 c0       	push   0xc001bd7a
c0007b34:	6a 21                	push   0x21
c0007b36:	53                   	push   ebx
c0007b37:	e8 3c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b3c:	83 c4 20             	add    esp,0x20
c0007b3f:	6a 00                	push   0x0
c0007b41:	68 81 bd 01 c0       	push   0xc001bd81
c0007b46:	6a 22                	push   0x22
c0007b48:	53                   	push   ebx
c0007b49:	e8 2a fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b4e:	6a 00                	push   0x0
c0007b50:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007b55:	6a 23                	push   0x23
c0007b57:	53                   	push   ebx
c0007b58:	e8 1b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b5d:	83 c4 20             	add    esp,0x20
c0007b60:	6a 00                	push   0x0
c0007b62:	68 02 bd 01 c0       	push   0xc001bd02
c0007b67:	6a 24                	push   0x24
c0007b69:	53                   	push   ebx
c0007b6a:	e8 09 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b6f:	6a 00                	push   0x0
c0007b71:	68 0c bd 01 c0       	push   0xc001bd0c
c0007b76:	6a 25                	push   0x25
c0007b78:	53                   	push   ebx
c0007b79:	e8 fa fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b7e:	83 c4 20             	add    esp,0x20
c0007b81:	6a 00                	push   0x0
c0007b83:	68 16 bd 01 c0       	push   0xc001bd16
c0007b88:	6a 26                	push   0x26
c0007b8a:	53                   	push   ebx
c0007b8b:	e8 e8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b90:	6a 00                	push   0x0
c0007b92:	68 20 bd 01 c0       	push   0xc001bd20
c0007b97:	6a 27                	push   0x27
c0007b99:	53                   	push   ebx
c0007b9a:	e8 d9 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b9f:	83 c4 20             	add    esp,0x20
c0007ba2:	6a 00                	push   0x0
c0007ba4:	68 2a bd 01 c0       	push   0xc001bd2a
c0007ba9:	6a 28                	push   0x28
c0007bab:	53                   	push   ebx
c0007bac:	e8 c7 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bb1:	6a 00                	push   0x0
c0007bb3:	68 34 bd 01 c0       	push   0xc001bd34
c0007bb8:	6a 29                	push   0x29
c0007bba:	53                   	push   ebx
c0007bbb:	e8 b8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bc0:	83 c4 20             	add    esp,0x20
c0007bc3:	6a 00                	push   0x0
c0007bc5:	68 3e bd 01 c0       	push   0xc001bd3e
c0007bca:	6a 2a                	push   0x2a
c0007bcc:	53                   	push   ebx
c0007bcd:	e8 a6 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bd2:	6a 00                	push   0x0
c0007bd4:	68 48 bd 01 c0       	push   0xc001bd48
c0007bd9:	6a 2b                	push   0x2b
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 97 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007be1:	83 c4 20             	add    esp,0x20
c0007be4:	6a 00                	push   0x0
c0007be6:	68 52 bd 01 c0       	push   0xc001bd52
c0007beb:	6a 2c                	push   0x2c
c0007bed:	53                   	push   ebx
c0007bee:	e8 85 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bf3:	6a 00                	push   0x0
c0007bf5:	68 5c bd 01 c0       	push   0xc001bd5c
c0007bfa:	6a 2d                	push   0x2d
c0007bfc:	53                   	push   ebx
c0007bfd:	e8 76 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c02:	83 c4 20             	add    esp,0x20
c0007c05:	6a 00                	push   0x0
c0007c07:	68 66 bd 01 c0       	push   0xc001bd66
c0007c0c:	6a 2e                	push   0x2e
c0007c0e:	53                   	push   ebx
c0007c0f:	e8 64 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c14:	6a 00                	push   0x0
c0007c16:	68 70 bd 01 c0       	push   0xc001bd70
c0007c1b:	6a 2f                	push   0x2f
c0007c1d:	53                   	push   ebx
c0007c1e:	e8 55 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c23:	83 c4 20             	add    esp,0x20
c0007c26:	6a 00                	push   0x0
c0007c28:	68 c6 bd 01 c0       	push   0xc001bdc6
c0007c2d:	6a 30                	push   0x30
c0007c2f:	53                   	push   ebx
c0007c30:	e8 43 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c35:	6a 00                	push   0x0
c0007c37:	68 d0 bd 01 c0       	push   0xc001bdd0
c0007c3c:	6a 31                	push   0x31
c0007c3e:	53                   	push   ebx
c0007c3f:	e8 34 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c44:	83 c4 20             	add    esp,0x20
c0007c47:	6a 00                	push   0x0
c0007c49:	68 da bd 01 c0       	push   0xc001bdda
c0007c4e:	6a 32                	push   0x32
c0007c50:	53                   	push   ebx
c0007c51:	e8 22 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c56:	6a 00                	push   0x0
c0007c58:	68 e4 bd 01 c0       	push   0xc001bde4
c0007c5d:	6a 33                	push   0x33
c0007c5f:	53                   	push   ebx
c0007c60:	e8 13 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c65:	83 c4 20             	add    esp,0x20
c0007c68:	6a 00                	push   0x0
c0007c6a:	68 ee bd 01 c0       	push   0xc001bdee
c0007c6f:	6a 34                	push   0x34
c0007c71:	53                   	push   ebx
c0007c72:	e8 01 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c77:	6a 00                	push   0x0
c0007c79:	68 f8 bd 01 c0       	push   0xc001bdf8
c0007c7e:	6a 35                	push   0x35
c0007c80:	53                   	push   ebx
c0007c81:	e8 f2 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c86:	83 c4 20             	add    esp,0x20
c0007c89:	6a 00                	push   0x0
c0007c8b:	68 02 be 01 c0       	push   0xc001be02
c0007c90:	6a 36                	push   0x36
c0007c92:	53                   	push   ebx
c0007c93:	e8 e0 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c98:	6a 00                	push   0x0
c0007c9a:	68 0c be 01 c0       	push   0xc001be0c
c0007c9f:	6a 37                	push   0x37
c0007ca1:	53                   	push   ebx
c0007ca2:	e8 d1 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ca7:	83 c4 1c             	add    esp,0x1c
c0007caa:	6a 03                	push   0x3
c0007cac:	6a 02                	push   0x2
c0007cae:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007cb4:	e8 75 24 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007cb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc0:	89 c6                	mov    esi,eax
c0007cc2:	e8 92 01 00 00       	call   c0007e59 <malloc>
c0007cc7:	81 c6 00 20 00 00    	add    esi,0x2000
c0007ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd0:	89 c7                	mov    edi,eax
c0007cd2:	e8 01 16 00 00       	call   c00092d8 <TSS::TSS()>
c0007cd7:	83 c4 0c             	add    esp,0xc
c0007cda:	68 96 bc 01 c0       	push   0xc001bc96
c0007cdf:	56                   	push   esi
c0007ce0:	57                   	push   edi
c0007ce1:	e8 36 16 00 00       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c0007ce6:	89 c6                	mov    esi,eax
c0007ce8:	58                   	pop    eax
c0007ce9:	5a                   	pop    edx
c0007cea:	6a 00                	push   0x0
c0007cec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf0:	50                   	push   eax
c0007cf1:	e8 d6 fb ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c0007cf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007cff:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d06:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d10:	80 ce 05             	or     dh,0x5
c0007d13:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d24:	e8 87 fc ff ff       	call   c00079b0 <IDT::flush()>
c0007d29:	83 c4 20             	add    esp,0x20
c0007d2c:	5b                   	pop    ebx
c0007d2d:	5e                   	pop    esi
c0007d2e:	5f                   	pop    edi
c0007d2f:	c3                   	ret    

c0007d30 <sbrk>:
c0007d30:	55                   	push   ebp
c0007d31:	57                   	push   edi
c0007d32:	56                   	push   esi
c0007d33:	53                   	push   ebx
c0007d34:	83 ec 1c             	sub    esp,0x1c
c0007d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3b:	85 c0                	test   eax,eax
c0007d3d:	74 5f                	je     c0007d9e <sbrk+0x6e>
c0007d3f:	78 64                	js     c0007da5 <sbrk+0x75>
c0007d41:	8b 15 bc f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f6bc
c0007d47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4b:	05 ff 0f 00 00       	add    eax,0xfff
c0007d50:	89 c5                	mov    ebp,eax
c0007d52:	78 69                	js     c0007dbd <sbrk+0x8d>
c0007d54:	c1 fd 0c             	sar    ebp,0xc
c0007d57:	bb 00 00 00 00       	mov    ebx,0x0
c0007d5c:	8b 35 30 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a30
c0007d62:	8b 3d bc f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6bc
c0007d68:	e8 b9 04 00 00       	call   c0008226 <Phys::allocatePage()>
c0007d6d:	68 01 04 00 00       	push   0x401
c0007d72:	57                   	push   edi
c0007d73:	50                   	push   eax
c0007d74:	56                   	push   esi
c0007d75:	e8 b0 22 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7a:	81 05 bc f6 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f6bc,0x1000
c0007d84:	43                   	inc    ebx
c0007d85:	83 c4 10             	add    esp,0x10
c0007d88:	39 dd                	cmp    ebp,ebx
c0007d8a:	75 d0                	jne    c0007d5c <sbrk+0x2c>
c0007d8c:	0f 20 d8             	mov    eax,cr3
c0007d8f:	0f 22 d8             	mov    cr3,eax
c0007d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d96:	83 c4 1c             	add    esp,0x1c
c0007d99:	5b                   	pop    ebx
c0007d9a:	5e                   	pop    esi
c0007d9b:	5f                   	pop    edi
c0007d9c:	5d                   	pop    ebp
c0007d9d:	c3                   	ret    
c0007d9e:	a1 bc f6 01 c0       	mov    eax,ds:0xc001f6bc
c0007da3:	eb f1                	jmp    c0007d96 <sbrk+0x66>
c0007da5:	83 ec 08             	sub    esp,0x8
c0007da8:	50                   	push   eax
c0007da9:	68 04 d7 01 c0       	push   0xc001d704
c0007dae:	e8 35 2e 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007db3:	83 c4 10             	add    esp,0x10
c0007db6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbb:	eb d9                	jmp    c0007d96 <sbrk+0x66>
c0007dbd:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc3:	eb 8f                	jmp    c0007d54 <sbrk+0x24>

c0007dc5 <mmap>:
c0007dc5:	83 ec 18             	sub    esp,0x18
c0007dc8:	68 34 d7 01 c0       	push   0xc001d734
c0007dcd:	e8 15 89 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0007dd2:	b8 00 00 00 00       	mov    eax,0x0
c0007dd7:	83 c4 1c             	add    esp,0x1c
c0007dda:	c3                   	ret    

c0007ddb <munmap>:
c0007ddb:	83 ec 18             	sub    esp,0x18
c0007dde:	68 39 d7 01 c0       	push   0xc001d739
c0007de3:	e8 ff 88 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0007de8:	b8 00 00 00 00       	mov    eax,0x0
c0007ded:	83 c4 1c             	add    esp,0x1c
c0007df0:	c3                   	ret    

c0007df1 <liballoc_lock()>:
c0007df1:	fa                   	cli    
c0007df2:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0007df8:	b8 00 00 00 00       	mov    eax,0x0
c0007dfd:	c3                   	ret    

c0007dfe <liballoc_unlock()>:
c0007dfe:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0007e03:	48                   	dec    eax
c0007e04:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0007e09:	75 01                	jne    c0007e0c <liballoc_unlock()+0xe>
c0007e0b:	fb                   	sti    
c0007e0c:	b8 00 00 00 00       	mov    eax,0x0
c0007e11:	c3                   	ret    

c0007e12 <liballoc_alloc(int)>:
c0007e12:	83 ec 10             	sub    esp,0x10
c0007e15:	6a 01                	push   0x1
c0007e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1b:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e21:	e8 08 23 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007e26:	83 c4 1c             	add    esp,0x1c
c0007e29:	c3                   	ret    

c0007e2a <liballoc_free(void*, int)>:
c0007e2a:	83 ec 14             	sub    esp,0x14
c0007e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e31:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e37:	e8 ae 1f 00 00       	call   c0009dea <VAS::freeAllocatedPages(unsigned long)>
c0007e3c:	b8 00 00 00 00       	mov    eax,0x0
c0007e41:	83 c4 1c             	add    esp,0x1c
c0007e44:	c3                   	ret    

c0007e45 <realloc>:
c0007e45:	83 ec 14             	sub    esp,0x14
c0007e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	e8 fc 96 ff ff       	call   c0001551 <dlrealloc>
c0007e55:	83 c4 1c             	add    esp,0x1c
c0007e58:	c3                   	ret    

c0007e59 <malloc>:
c0007e59:	83 ec 18             	sub    esp,0x18
c0007e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e60:	e8 af 91 ff ff       	call   c0001014 <dlmalloc>
c0007e65:	83 c4 1c             	add    esp,0x1c
c0007e68:	c3                   	ret    

c0007e69 <free>:
c0007e69:	83 ec 18             	sub    esp,0x18
c0007e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e70:	e8 44 8e ff ff       	call   c0000cb9 <dlfree>
c0007e75:	83 c4 1c             	add    esp,0x1c
c0007e78:	c3                   	ret    

c0007e79 <rfree>:
c0007e79:	83 ec 18             	sub    esp,0x18
c0007e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e80:	e8 34 8e ff ff       	call   c0000cb9 <dlfree>
c0007e85:	83 c4 1c             	add    esp,0x1c
c0007e88:	c3                   	ret    

c0007e89 <calloc>:
c0007e89:	56                   	push   esi
c0007e8a:	53                   	push   ebx
c0007e8b:	83 ec 10             	sub    esp,0x10
c0007e8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e92:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e97:	53                   	push   ebx
c0007e98:	e8 bc ff ff ff       	call   c0007e59 <malloc>
c0007e9d:	89 c6                	mov    esi,eax
c0007e9f:	83 c4 0c             	add    esp,0xc
c0007ea2:	53                   	push   ebx
c0007ea3:	6a 00                	push   0x0
c0007ea5:	50                   	push   eax
c0007ea6:	e8 45 86 ff ff       	call   c00004f0 <memset>
c0007eab:	89 f0                	mov    eax,esi
c0007ead:	83 c4 14             	add    esp,0x14
c0007eb0:	5b                   	pop    ebx
c0007eb1:	5e                   	pop    esi
c0007eb2:	c3                   	ret    

c0007eb3 <Krnl::setBootMessage(char const*)>:
c0007eb3:	57                   	push   edi
c0007eb4:	56                   	push   esi
c0007eb5:	53                   	push   ebx
c0007eb6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ebc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ec3:	68 9e 00 00 00       	push   0x9e
c0007ec8:	6a 00                	push   0x0
c0007eca:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ece:	56                   	push   esi
c0007ecf:	e8 1c 86 ff ff       	call   c00004f0 <memset>
c0007ed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ed7:	e8 84 86 ff ff       	call   c0000560 <strlen>
c0007edc:	ba 50 00 00 00       	mov    edx,0x50
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	29 c2                	sub    edx,eax
c0007ee6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eea:	d1 ea                	shr    edx,1
c0007eec:	84 c0                	test   al,al
c0007eee:	74 19                	je     c0007f09 <Krnl::setBootMessage(char const*)+0x56>
c0007ef0:	01 d2                	add    edx,edx
c0007ef2:	43                   	inc    ebx
c0007ef3:	01 f2                	add    edx,esi
c0007ef5:	80 cc 0f             	or     ah,0xf
c0007ef8:	83 c2 02             	add    edx,0x2
c0007efb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007eff:	43                   	inc    ebx
c0007f00:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f05:	84 c0                	test   al,al
c0007f07:	75 ec                	jne    c0007ef5 <Krnl::setBootMessage(char const*)+0x42>
c0007f09:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f0e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f15:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f1b:	5b                   	pop    ebx
c0007f1c:	5e                   	pop    esi
c0007f1d:	5f                   	pop    edi
c0007f1e:	c3                   	ret    

c0007f1f <kernel_main>:
c0007f1f:	55                   	push   ebp
c0007f20:	57                   	push   edi
c0007f21:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f26:	56                   	push   esi
c0007f27:	89 fa                	mov    edx,edi
c0007f29:	53                   	push   ebx
c0007f2a:	31 f6                	xor    esi,esi
c0007f2c:	83 ec 38             	sub    esp,0x38
c0007f2f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f34:	a3 50 09 02 c0       	mov    ds:0xc0020950,eax
c0007f39:	89 f0                	mov    eax,esi
c0007f3b:	ee                   	out    dx,al
c0007f3c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f41:	b0 80                	mov    al,0x80
c0007f43:	89 da                	mov    edx,ebx
c0007f45:	ee                   	out    dx,al
c0007f46:	b1 03                	mov    cl,0x3
c0007f48:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f4d:	88 c8                	mov    al,cl
c0007f4f:	ee                   	out    dx,al
c0007f50:	89 f0                	mov    eax,esi
c0007f52:	89 fa                	mov    edx,edi
c0007f54:	ee                   	out    dx,al
c0007f55:	88 c8                	mov    al,cl
c0007f57:	89 da                	mov    edx,ebx
c0007f59:	ee                   	out    dx,al
c0007f5a:	b0 c7                	mov    al,0xc7
c0007f5c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f61:	ee                   	out    dx,al
c0007f62:	b0 0b                	mov    al,0xb
c0007f64:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f69:	ee                   	out    dx,al
c0007f6a:	68 40 d7 01 c0       	push   0xc001d740
c0007f6f:	e8 74 2c 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007f74:	0f be 05 c0 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f6c0
c0007f7b:	83 c4 10             	add    esp,0x10
c0007f7e:	84 c0                	test   al,al
c0007f80:	74 5c                	je     c0007fde <kernel_main+0xbf>
c0007f82:	31 db                	xor    ebx,ebx
c0007f84:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f89:	bf 05 00 00 00       	mov    edi,0x5
c0007f8e:	31 f6                	xor    esi,esi
c0007f90:	eb 14                	jmp    c0007fa6 <kernel_main+0x87>
c0007f92:	47                   	inc    edi
c0007f93:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f98:	31 f6                	xor    esi,esi
c0007f9a:	43                   	inc    ebx
c0007f9b:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007fa2:	84 c0                	test   al,al
c0007fa4:	74 38                	je     c0007fde <kernel_main+0xbf>
c0007fa6:	80 be f6 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe090a],0xdb
c0007fad:	0f 84 97 00 00 00    	je     c000804a <kernel_main+0x12b>
c0007fb3:	3c 0d                	cmp    al,0xd
c0007fb5:	74 e3                	je     c0007f9a <kernel_main+0x7b>
c0007fb7:	3c 0a                	cmp    al,0xa
c0007fb9:	74 d7                	je     c0007f92 <kernel_main+0x73>
c0007fbb:	83 ec 0c             	sub    esp,0xc
c0007fbe:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fc2:	57                   	push   edi
c0007fc3:	43                   	inc    ebx
c0007fc4:	52                   	push   edx
c0007fc5:	46                   	inc    esi
c0007fc6:	6a 00                	push   0x0
c0007fc8:	6a 0e                	push   0xe
c0007fca:	50                   	push   eax
c0007fcb:	e8 74 e4 00 00       	call   c0016444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd0:	83 c4 20             	add    esp,0x20
c0007fd3:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007fda:	84 c0                	test   al,al
c0007fdc:	75 c8                	jne    c0007fa6 <kernel_main+0x87>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fe6:	05 ff 0f 00 00       	add    eax,0xfff
c0007feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff0:	50                   	push   eax
c0007ff1:	e8 82 03 00 00       	call   c0008378 <Phys::physicalMemorySetup(unsigned int)>
c0007ff6:	e8 59 1b 00 00       	call   c0009b54 <Virt::virtualMemorySetup()>
c0007ffb:	58                   	pop    eax
c0007ffc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008000:	53                   	push   ebx
c0008001:	e8 0a 1c 00 00       	call   c0009c10 <VAS::VAS()>
c0008006:	89 1d 30 0a 02 c0    	mov    DWORD PTR ds:0xc0020a30,ebx
c000800c:	e8 0f 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008011:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008018:	e8 3c fe ff ff       	call   c0007e59 <malloc>
c000801d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008020:	89 c6                	mov    esi,eax
c0008022:	e8 af f1 ff ff       	call   c00071d6 <Computer::Computer()>
c0008027:	6a 00                	push   0x0
c0008029:	89 35 38 09 02 c0    	mov    DWORD PTR ds:0xc0020938,esi
c000802f:	6a 00                	push   0x0
c0008031:	6a 00                	push   0x0
c0008033:	56                   	push   esi
c0008034:	e8 43 f5 ff ff       	call   c000757c <Computer::open(int, int, void*)>
c0008039:	83 c4 14             	add    esp,0x14
c000803c:	53                   	push   ebx
c000803d:	e8 84 1e 00 00       	call   c0009ec6 <VAS::~VAS()>
c0008042:	83 c4 3c             	add    esp,0x3c
c0008045:	5b                   	pop    ebx
c0008046:	5e                   	pop    esi
c0008047:	5f                   	pop    edi
c0008048:	5d                   	pop    ebp
c0008049:	c3                   	ret    
c000804a:	31 d2                	xor    edx,edx
c000804c:	8a 96 f5 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe090b]
c0008052:	83 e2 fe             	and    edx,0xfffffffe
c0008055:	81 fa ba 00 00 00    	cmp    edx,0xba
c000805b:	0f 85 52 ff ff ff    	jne    c0007fb3 <kernel_main+0x94>
c0008061:	45                   	inc    ebp
c0008062:	e9 4c ff ff ff       	jmp    c0007fb3 <kernel_main+0x94>

c0008067 <Phys::allocateDMA(unsigned long)>:
c0008067:	55                   	push   ebp
c0008068:	31 ed                	xor    ebp,ebp
c000806a:	57                   	push   edi
c000806b:	56                   	push   esi
c000806c:	53                   	push   ebx
c000806d:	31 db                	xor    ebx,ebx
c000806f:	83 ec 1c             	sub    esp,0x1c
c0008072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008076:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000807e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008084:	31 c0                	xor    eax,eax
c0008086:	c1 ef 0c             	shr    edi,0xc
c0008089:	eb 19                	jmp    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c000808b:	85 c0                	test   eax,eax
c000808d:	75 06                	jne    c0008095 <Phys::allocateDMA(unsigned long)+0x2e>
c000808f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008093:	89 dd                	mov    ebp,ebx
c0008095:	8d 70 01             	lea    esi,[eax+0x1]
c0008098:	39 f7                	cmp    edi,esi
c000809a:	74 33                	je     c00080cf <Phys::allocateDMA(unsigned long)+0x68>
c000809c:	89 f0                	mov    eax,esi
c000809e:	43                   	inc    ebx
c000809f:	83 fb 0f             	cmp    ebx,0xf
c00080a2:	7f 11                	jg     c00080b5 <Phys::allocateDMA(unsigned long)+0x4e>
c00080a4:	80 bb 6c 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf694],0x0
c00080ab:	74 de                	je     c000808b <Phys::allocateDMA(unsigned long)+0x24>
c00080ad:	31 c0                	xor    eax,eax
c00080af:	43                   	inc    ebx
c00080b0:	83 fb 0f             	cmp    ebx,0xf
c00080b3:	7e ef                	jle    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c00080b5:	83 ec 0c             	sub    esp,0xc
c00080b8:	68 58 d7 01 c0       	push   0xc001d758
c00080bd:	e8 25 86 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	31 c0                	xor    eax,eax
c00080c7:	83 c4 1c             	add    esp,0x1c
c00080ca:	5b                   	pop    ebx
c00080cb:	5e                   	pop    esi
c00080cc:	5f                   	pop    edi
c00080cd:	5d                   	pop    ebp
c00080ce:	c3                   	ret    
c00080cf:	89 e9                	mov    ecx,ebp
c00080d1:	c1 f9 04             	sar    ecx,0x4
c00080d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080d8:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080dc:	89 ca                	mov    edx,ecx
c00080de:	4a                   	dec    edx
c00080df:	79 03                	jns    c00080e4 <Phys::allocateDMA(unsigned long)+0x7d>
c00080e1:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080e4:	c1 fa 04             	sar    edx,0x4
c00080e7:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080eb:	74 08                	je     c00080f5 <Phys::allocateDMA(unsigned long)+0x8e>
c00080ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f1:	31 c0                	xor    eax,eax
c00080f3:	eb ba                	jmp    c00080af <Phys::allocateDMA(unsigned long)+0x48>
c00080f5:	85 f6                	test   esi,esi
c00080f7:	74 15                	je     c000810e <Phys::allocateDMA(unsigned long)+0xa7>
c00080f9:	8d 95 6c 09 02 c0    	lea    edx,[ebp-0x3ffdf694]
c00080ff:	8d 84 05 6d 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf693]
c0008106:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008109:	42                   	inc    edx
c000810a:	39 d0                	cmp    eax,edx
c000810c:	75 f8                	jne    c0008106 <Phys::allocateDMA(unsigned long)+0x9f>
c000810e:	01 3d 64 09 02 c0    	add    DWORD PTR ds:0xc0020964,edi
c0008114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008118:	85 c0                	test   eax,eax
c000811a:	74 17                	je     c0008133 <Phys::allocateDMA(unsigned long)+0xcc>
c000811c:	83 ec 0c             	sub    esp,0xc
c000811f:	68 58 d7 01 c0       	push   0xc001d758
c0008124:	e8 be 85 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0008129:	83 c4 10             	add    esp,0x10
c000812c:	89 f0                	mov    eax,esi
c000812e:	e9 6b ff ff ff       	jmp    c000809e <Phys::allocateDMA(unsigned long)+0x37>
c0008133:	c1 e5 0c             	shl    ebp,0xc
c0008136:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000813c:	eb 89                	jmp    c00080c7 <Phys::allocateDMA(unsigned long)+0x60>

c000813e <Phys::freeDMA(unsigned long, unsigned long)>:
c000813e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008142:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000814c:	c1 ea 0c             	shr    edx,0xc
c000814f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008154:	29 15 64 09 02 c0    	sub    DWORD PTR ds:0xc0020964,edx
c000815a:	c1 e8 0c             	shr    eax,0xc
c000815d:	85 d2                	test   edx,edx
c000815f:	74 0f                	je     c0008170 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008161:	05 6c 09 02 c0       	add    eax,0xc002096c
c0008166:	01 c2                	add    edx,eax
c0008168:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000816b:	40                   	inc    eax
c000816c:	39 d0                	cmp    eax,edx
c000816e:	75 f8                	jne    c0008168 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008170:	c3                   	ret    

c0008171 <Phys::setPageState(unsigned long, bool)>:
c0008171:	56                   	push   esi
c0008172:	ba 01 00 00 00       	mov    edx,0x1
c0008177:	53                   	push   ebx
c0008178:	8b 35 04 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f804
c000817e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008182:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008186:	89 c8                	mov    eax,ecx
c0008188:	83 e1 07             	and    ecx,0x7
c000818b:	c1 e8 03             	shr    eax,0x3
c000818e:	d3 e3                	shl    ebx,cl
c0008190:	01 c6                	add    esi,eax
c0008192:	d3 e2                	shl    edx,cl
c0008194:	f7 d2                	not    edx
c0008196:	20 16                	and    BYTE PTR [esi],dl
c0008198:	03 05 04 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f804
c000819e:	08 18                	or     BYTE PTR [eax],bl
c00081a0:	5b                   	pop    ebx
c00081a1:	5e                   	pop    esi
c00081a2:	c3                   	ret    

c00081a3 <Phys::getPageState(unsigned long)>:
c00081a3:	53                   	push   ebx
c00081a4:	8b 15 04 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f804
c00081aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081ae:	31 db                	xor    ebx,ebx
c00081b0:	89 c8                	mov    eax,ecx
c00081b2:	83 e1 07             	and    ecx,0x7
c00081b5:	c1 e8 03             	shr    eax,0x3
c00081b8:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081bb:	89 d8                	mov    eax,ebx
c00081bd:	5b                   	pop    ebx
c00081be:	d3 f8                	sar    eax,cl
c00081c0:	83 e0 01             	and    eax,0x1
c00081c3:	c3                   	ret    

c00081c4 <Phys::freePage(unsigned long)>:
c00081c4:	53                   	push   ebx
c00081c5:	83 ec 08             	sub    esp,0x8
c00081c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081cc:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081d2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081d8:	76 3a                	jbe    c0008214 <Phys::freePage(unsigned long)+0x50>
c00081da:	c1 e8 0c             	shr    eax,0xc
c00081dd:	50                   	push   eax
c00081de:	89 c3                	mov    ebx,eax
c00081e0:	e8 be ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00081e5:	5a                   	pop    edx
c00081e6:	84 c0                	test   al,al
c00081e8:	74 19                	je     c0008203 <Phys::freePage(unsigned long)+0x3f>
c00081ea:	83 ec 08             	sub    esp,0x8
c00081ed:	ff 0d 64 09 02 c0    	dec    DWORD PTR ds:0xc0020964
c00081f3:	6a 00                	push   0x0
c00081f5:	53                   	push   ebx
c00081f6:	e8 76 ff ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00081fb:	83 c4 10             	add    esp,0x10
c00081fe:	83 c4 08             	add    esp,0x8
c0008201:	5b                   	pop    ebx
c0008202:	c3                   	ret    
c0008203:	c7 44 24 10 fd d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7fd
c000820b:	83 c4 08             	add    esp,0x8
c000820e:	5b                   	pop    ebx
c000820f:	e9 d3 84 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c0008214:	68 00 10 00 00       	push   0x1000
c0008219:	50                   	push   eax
c000821a:	e8 1f ff ff ff       	call   c000813e <Phys::freeDMA(unsigned long, unsigned long)>
c000821f:	59                   	pop    ecx
c0008220:	5b                   	pop    ebx
c0008221:	83 c4 08             	add    esp,0x8
c0008224:	5b                   	pop    ebx
c0008225:	c3                   	ret    

c0008226 <Phys::allocatePage()>:
c0008226:	56                   	push   esi
c0008227:	53                   	push   ebx
c0008228:	83 ec 14             	sub    esp,0x14
c000822b:	8b 35 58 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020958
c0008231:	89 f3                	mov    ebx,esi
c0008233:	eb 0a                	jmp    c000823f <Phys::allocatePage()+0x19>
c0008235:	89 1d 58 09 02 c0    	mov    DWORD PTR ds:0xc0020958,ebx
c000823b:	39 de                	cmp    esi,ebx
c000823d:	74 24                	je     c0008263 <Phys::allocatePage()+0x3d>
c000823f:	53                   	push   ebx
c0008240:	e8 5e ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c0008245:	5a                   	pop    edx
c0008246:	84 c0                	test   al,al
c0008248:	74 5f                	je     c00082a9 <Phys::allocatePage()+0x83>
c000824a:	43                   	inc    ebx
c000824b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008251:	75 e2                	jne    c0008235 <Phys::allocatePage()+0xf>
c0008253:	31 db                	xor    ebx,ebx
c0008255:	c7 05 58 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020958,0x0
c000825f:	39 de                	cmp    esi,ebx
c0008261:	75 dc                	jne    c000823f <Phys::allocatePage()+0x19>
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	80 35 7c 09 02 c0 01 	xor    BYTE PTR ds:0xc002097c,0x1
c000826d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008275:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000827b:	50                   	push   eax
c000827c:	e8 87 26 00 00       	call   c000a908 <VAS::scanForEviction()>
c0008281:	83 c4 10             	add    esp,0x10
c0008284:	85 c0                	test   eax,eax
c0008286:	75 3f                	jne    c00082c7 <Phys::allocatePage()+0xa1>
c0008288:	83 ec 0c             	sub    esp,0xc
c000828b:	68 80 d7 01 c0       	push   0xc001d780
c0008290:	e8 52 84 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0008295:	83 c4 10             	add    esp,0x10
c0008298:	8b 1d 58 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020958
c000829e:	53                   	push   ebx
c000829f:	e8 ff fe ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00082a4:	5a                   	pop    edx
c00082a5:	84 c0                	test   al,al
c00082a7:	75 a1                	jne    c000824a <Phys::allocatePage()+0x24>
c00082a9:	6a 01                	push   0x1
c00082ab:	53                   	push   ebx
c00082ac:	e8 c0 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082b1:	a1 58 09 02 c0       	mov    eax,ds:0xc0020958
c00082b6:	5a                   	pop    edx
c00082b7:	ff 05 64 09 02 c0    	inc    DWORD PTR ds:0xc0020964
c00082bd:	c1 e0 0c             	shl    eax,0xc
c00082c0:	59                   	pop    ecx
c00082c1:	83 c4 14             	add    esp,0x14
c00082c4:	5b                   	pop    ebx
c00082c5:	5e                   	pop    esi
c00082c6:	c3                   	ret    
c00082c7:	83 ec 08             	sub    esp,0x8
c00082ca:	89 c2                	mov    edx,eax
c00082cc:	6a 01                	push   0x1
c00082ce:	c1 ea 0c             	shr    edx,0xc
c00082d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082d5:	52                   	push   edx
c00082d6:	e8 96 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082db:	83 c4 10             	add    esp,0x10
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	eb dd                	jmp    c00082c1 <Phys::allocatePage()+0x9b>

c00082e4 <Phys::allocateContiguousPages(int)>:
c00082e4:	57                   	push   edi
c00082e5:	56                   	push   esi
c00082e6:	53                   	push   ebx
c00082e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082eb:	fa                   	cli    
c00082ec:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00082f2:	31 db                	xor    ebx,ebx
c00082f4:	85 db                	test   ebx,ebx
c00082f6:	75 11                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c00082f8:	e8 29 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c00082fd:	83 fe 01             	cmp    esi,0x1
c0008300:	89 c7                	mov    edi,eax
c0008302:	74 21                	je     c0008325 <Phys::allocateContiguousPages(int)+0x41>
c0008304:	bb 01 00 00 00       	mov    ebx,0x1
c0008309:	e8 18 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c000830e:	89 da                	mov    edx,ebx
c0008310:	c1 e2 0c             	shl    edx,0xc
c0008313:	01 fa                	add    edx,edi
c0008315:	39 c2                	cmp    edx,eax
c0008317:	74 20                	je     c0008339 <Phys::allocateContiguousPages(int)+0x55>
c0008319:	bb 01 00 00 00       	mov    ebx,0x1
c000831e:	89 c7                	mov    edi,eax
c0008320:	83 fe 01             	cmp    esi,0x1
c0008323:	75 e4                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c0008325:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000832a:	48                   	dec    eax
c000832b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0008330:	75 01                	jne    c0008333 <Phys::allocateContiguousPages(int)+0x4f>
c0008332:	fb                   	sti    
c0008333:	89 f8                	mov    eax,edi
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	5f                   	pop    edi
c0008338:	c3                   	ret    
c0008339:	43                   	inc    ebx
c000833a:	39 f3                	cmp    ebx,esi
c000833c:	75 b6                	jne    c00082f4 <Phys::allocateContiguousPages(int)+0x10>
c000833e:	eb e5                	jmp    c0008325 <Phys::allocateContiguousPages(int)+0x41>

c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008346:	39 1d 5c 09 02 c0    	cmp    DWORD PTR ds:0xc002095c,ebx
c000834c:	73 06                	jae    c0008354 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000834e:	89 1d 5c 09 02 c0    	mov    DWORD PTR ds:0xc002095c,ebx
c0008354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008358:	c1 eb 0c             	shr    ebx,0xc
c000835b:	c1 e8 0c             	shr    eax,0xc
c000835e:	39 d8                	cmp    eax,ebx
c0008360:	73 13                	jae    c0008375 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008362:	6a 00                	push   0x0
c0008364:	8d 70 01             	lea    esi,[eax+0x1]
c0008367:	50                   	push   eax
c0008368:	e8 04 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000836d:	5a                   	pop    edx
c000836e:	89 f0                	mov    eax,esi
c0008370:	59                   	pop    ecx
c0008371:	39 f3                	cmp    ebx,esi
c0008373:	75 ed                	jne    c0008362 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008375:	5b                   	pop    ebx
c0008376:	5e                   	pop    esi
c0008377:	c3                   	ret    

c0008378 <Phys::physicalMemorySetup(unsigned int)>:
c0008378:	55                   	push   ebp
c0008379:	57                   	push   edi
c000837a:	56                   	push   esi
c000837b:	53                   	push   ebx
c000837c:	31 db                	xor    ebx,ebx
c000837e:	83 ec 40             	sub    esp,0x40
c0008381:	6a 10                	push   0x10
c0008383:	6a 00                	push   0x0
c0008385:	68 6c 09 02 c0       	push   0xc002096c
c000838a:	e8 61 81 ff ff       	call   c00004f0 <memset>
c000838f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008393:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008398:	05 00 10 00 00       	add    eax,0x1000
c000839d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a1:	5a                   	pop    edx
c00083a2:	59                   	pop    ecx
c00083a3:	50                   	push   eax
c00083a4:	68 13 d8 01 c0       	push   0xc001d813
c00083a9:	e8 3a 28 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00083ae:	83 c4 10             	add    esp,0x10
c00083b1:	83 ec 08             	sub    esp,0x8
c00083b4:	6a 01                	push   0x1
c00083b6:	53                   	push   ebx
c00083b7:	43                   	inc    ebx
c00083b8:	e8 b4 fd ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00083bd:	83 c4 10             	add    esp,0x10
c00083c0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083c6:	75 e9                	jne    c00083b1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083c8:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083ce:	66 85 c0             	test   ax,ax
c00083d1:	0f 84 97 01 00 00    	je     c000856e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083d7:	89 c7                	mov    edi,eax
c00083d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e1:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083e7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083ec:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f0:	eb 15                	jmp    c0008407 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083f2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083f6:	83 c3 18             	add    ebx,0x18
c00083f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083fd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008401:	0f 84 77 01 00 00    	je     c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008407:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000840a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000840d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008410:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008414:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008418:	8b 33                	mov    esi,DWORD PTR [ebx]
c000841a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000841d:	01 f0                	add    eax,esi
c000841f:	55                   	push   ebp
c0008420:	11 fa                	adc    edx,edi
c0008422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008426:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	50                   	push   eax
c000842f:	56                   	push   esi
c0008430:	68 b0 d7 01 c0       	push   0xc001d7b0
c0008435:	e8 ae 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000843a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000843e:	83 c4 10             	add    esp,0x10
c0008441:	09 f8                	or     eax,edi
c0008443:	0f 85 35 01 00 00    	jne    c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008449:	4d                   	dec    ebp
c000844a:	75 a6                	jne    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000844c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008450:	ba 00 00 08 00       	mov    edx,0x80000
c0008455:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008459:	39 f2                	cmp    edx,esi
c000845b:	89 c1                	mov    ecx,eax
c000845d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008465:	19 f9                	sbb    ecx,edi
c0008467:	0f 82 a7 00 00 00    	jb     c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000846d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008471:	89 c1                	mov    ecx,eax
c0008473:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008477:	0f 83 97 00 00 00    	jae    c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000847d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000848a:	39 fa                	cmp    edx,edi
c000848c:	19 e8                	sbb    eax,ebp
c000848e:	0f 82 9a 01 00 00    	jb     c000862e <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008494:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008498:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000849c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084a7:	83 d5 ff             	adc    ebp,0xffffffff
c00084aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084ae:	31 c0                	xor    eax,eax
c00084b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084b4:	39 fa                	cmp    edx,edi
c00084b6:	89 c1                	mov    ecx,eax
c00084b8:	19 e9                	sbb    ecx,ebp
c00084ba:	0f 83 32 ff ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c0:	be 00 00 08 00       	mov    esi,0x80000
c00084c5:	51                   	push   ecx
c00084c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084ca:	57                   	push   edi
c00084cb:	56                   	push   esi
c00084cc:	68 d4 d7 01 c0       	push   0xc001d7d4
c00084d1:	e8 12 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00084d6:	5d                   	pop    ebp
c00084d7:	58                   	pop    eax
c00084d8:	57                   	push   edi
c00084d9:	56                   	push   esi
c00084da:	e8 61 fe ff ff       	call   c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084e7:	83 c4 0c             	add    esp,0xc
c00084ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084ee:	03 05 68 09 02 c0    	add    eax,DWORD PTR ds:0xc0020968
c00084f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084fb:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c0008500:	52                   	push   edx
c0008501:	50                   	push   eax
c0008502:	68 39 d8 01 c0       	push   0xc001d839
c0008507:	e8 dc 26 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	e9 de fe ff ff       	jmp    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008514:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000851c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008520:	39 ea                	cmp    edx,ebp
c0008522:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008526:	0f 82 c6 fe ff ff    	jb     c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000852c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008531:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008535:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008539:	0f 83 b3 fe ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000853f:	39 ee                	cmp    esi,ebp
c0008541:	89 f8                	mov    eax,edi
c0008543:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008547:	0f 83 78 ff ff ff    	jae    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000854d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008555:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008559:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000855d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008561:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008565:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008569:	e9 57 ff ff ff       	jmp    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000856e:	83 ec 0c             	sub    esp,0xc
c0008571:	68 2b d8 01 c0       	push   0xc001d82b
c0008576:	e8 6c 81 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000857b:	83 c4 10             	add    esp,0x10
c000857e:	83 ec 08             	sub    esp,0x8
c0008581:	bb 60 00 00 00       	mov    ebx,0x60
c0008586:	6a 00                	push   0x0
c0008588:	6a 06                	push   0x6
c000858a:	e8 e2 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000858f:	58                   	pop    eax
c0008590:	5a                   	pop    edx
c0008591:	6a 00                	push   0x0
c0008593:	6a 07                	push   0x7
c0008595:	e8 d7 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000859a:	83 05 68 09 02 c0 02 	add    DWORD PTR ds:0xc0020968,0x2
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	83 ec 08             	sub    esp,0x8
c00085a7:	6a 00                	push   0x0
c00085a9:	53                   	push   ebx
c00085aa:	43                   	inc    ebx
c00085ab:	e8 c1 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085b9:	75 e9                	jne    c00085a4 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085bb:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085c0:	bb 40 01 00 00       	mov    ebx,0x140
c00085c5:	83 c0 20             	add    eax,0x20
c00085c8:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085cd:	eb 22                	jmp    c00085f1 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085cf:	83 ec 08             	sub    esp,0x8
c00085d2:	6a 00                	push   0x0
c00085d4:	53                   	push   ebx
c00085d5:	43                   	inc    ebx
c00085d6:	e8 96 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085db:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085e0:	83 c4 10             	add    esp,0x10
c00085e3:	40                   	inc    eax
c00085e4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085ea:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085ef:	74 07                	je     c00085f8 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085f6:	7e d7                	jle    c00085cf <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085f8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00085fd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008602:	7f 22                	jg     c0008626 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008604:	83 ec 08             	sub    esp,0x8
c0008607:	6a 00                	push   0x0
c0008609:	53                   	push   ebx
c000860a:	43                   	inc    ebx
c000860b:	e8 61 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c0008610:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c0008615:	83 c4 10             	add    esp,0x10
c0008618:	40                   	inc    eax
c0008619:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000861f:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c0008624:	75 d7                	jne    c00085fd <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008626:	83 c4 3c             	add    esp,0x3c
c0008629:	5b                   	pop    ebx
c000862a:	5e                   	pop    esi
c000862b:	5f                   	pop    edi
c000862c:	5d                   	pop    ebp
c000862d:	c3                   	ret    
c000862e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008636:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000863e:	e9 51 fe ff ff       	jmp    c0008494 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008643:	90                   	nop

c0008644 <Pipe::isAtty()>:
c0008644:	31 c0                	xor    eax,eax
c0008646:	c3                   	ret    
c0008647:	90                   	nop

c0008648 <Pipe::~Pipe()>:
c0008648:	83 ec 0c             	sub    esp,0xc
c000864b:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c0008650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008654:	89 10                	mov    DWORD PTR [eax],edx
c0008656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865a:	83 ec 0c             	sub    esp,0xc
c000865d:	50                   	push   eax
c000865e:	e8 d1 10 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c0008663:	83 c4 10             	add    esp,0x10
c0008666:	90                   	nop
c0008667:	83 c4 0c             	add    esp,0xc
c000866a:	c3                   	ret    
c000866b:	90                   	nop

c000866c <Pipe::~Pipe()>:
c000866c:	83 ec 0c             	sub    esp,0xc
c000866f:	83 ec 0c             	sub    esp,0xc
c0008672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008676:	e8 cd ff ff ff       	call   c0008648 <Pipe::~Pipe()>
c000867b:	83 c4 10             	add    esp,0x10
c000867e:	83 ec 08             	sub    esp,0x8
c0008681:	6a 20                	push   0x20
c0008683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008687:	e8 66 24 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000868c:	83 c4 10             	add    esp,0x10
c000868f:	83 c4 0c             	add    esp,0xc
c0008692:	c3                   	ret    
c0008693:	90                   	nop

c0008694 <Pipe::write(unsigned long long, void*, int*)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086a3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00086ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b1:	89 d8                	mov    eax,ebx
c00086b3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086b6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086ba:	89 d6                	mov    esi,edx
c00086bc:	89 d7                	mov    edi,edx
c00086be:	c1 ff 1f             	sar    edi,0x1f
c00086c1:	03 34 24             	add    esi,DWORD PTR [esp]
c00086c4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086c8:	c1 f8 1f             	sar    eax,0x1f
c00086cb:	39 f3                	cmp    ebx,esi
c00086cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d5:	19 f8                	sbb    eax,edi
c00086d7:	b8 01 00 00 00       	mov    eax,0x1
c00086dc:	72 6e                	jb     c000874c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e1:	01 d0                	add    eax,edx
c00086e3:	99                   	cdq    
c00086e4:	f7 fb                	idiv   ebx
c00086e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ea:	29 d3                	sub    ebx,edx
c00086ec:	89 d7                	mov    edi,edx
c00086ee:	89 de                	mov    esi,ebx
c00086f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086f3:	c1 fb 1f             	sar    ebx,0x1f
c00086f6:	39 f2                	cmp    edx,esi
c00086f8:	19 d8                	sbb    eax,ebx
c00086fa:	b8 00 00 00 00       	mov    eax,0x0
c00086ff:	72 04                	jb     c0008705 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008701:	89 d0                	mov    eax,edx
c0008703:	29 f0                	sub    eax,esi
c0008705:	89 d3                	mov    ebx,edx
c0008707:	29 c3                	sub    ebx,eax
c0008709:	74 0b                	je     c0008716 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000870b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000870e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008712:	89 d9                	mov    ecx,ebx
c0008714:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008716:	85 c0                	test   eax,eax
c0008718:	74 0d                	je     c0008727 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000871a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000871e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008721:	89 de                	mov    esi,ebx
c0008723:	89 c1                	mov    ecx,eax
c0008725:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008727:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000872a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000872f:	75 10                	jne    c0008741 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	68 55 d8 01 c0       	push   0xc001d855
c0008739:	e8 a9 7f 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000873e:	83 c4 10             	add    esp,0x10
c0008741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008745:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008748:	89 08                	mov    DWORD PTR [eax],ecx
c000874a:	31 c0                	xor    eax,eax
c000874c:	83 c4 1c             	add    esp,0x1c
c000874f:	5b                   	pop    ebx
c0008750:	5e                   	pop    esi
c0008751:	5f                   	pop    edi
c0008752:	5d                   	pop    ebp
c0008753:	c3                   	ret    

c0008754 <Pipe::read(unsigned long long, void*, int*)>:
c0008754:	55                   	push   ebp
c0008755:	57                   	push   edi
c0008756:	56                   	push   esi
c0008757:	53                   	push   ebx
c0008758:	83 ec 1c             	sub    esp,0x1c
c000875b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000875f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008763:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008767:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000876a:	89 c8                	mov    eax,ecx
c000876c:	99                   	cdq    
c000876d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008771:	74 24                	je     c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008773:	39 f9                	cmp    ecx,edi
c0008775:	89 d1                	mov    ecx,edx
c0008777:	19 f1                	sbb    ecx,esi
c0008779:	73 1c                	jae    c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877b:	fa                   	cli    
c000877c:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0008782:	e8 b5 b2 00 00       	call   c0013a3c <schedule()>
c0008787:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000878c:	48                   	dec    eax
c000878d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0008792:	75 d3                	jne    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008794:	fb                   	sti    
c0008795:	eb d0                	jmp    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008797:	39 f8                	cmp    eax,edi
c0008799:	89 d1                	mov    ecx,edx
c000879b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000879e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087a2:	19 f1                	sbb    ecx,esi
c00087a4:	73 07                	jae    c00087ad <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00087a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087ad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087b3:	29 f7                	sub    edi,esi
c00087b5:	89 f8                	mov    eax,edi
c00087b7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087bb:	99                   	cdq    
c00087bc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087c3:	19 d0                	sbb    eax,edx
c00087c5:	73 07                	jae    c00087ce <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ce:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d1:	89 ea                	mov    edx,ebp
c00087d3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087dc:	74 0d                	je     c00087eb <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087eb:	85 d2                	test   edx,edx
c00087ed:	74 11                	je     c0008800 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087f6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087fa:	89 d1                	mov    ecx,edx
c00087fc:	89 c7                	mov    edi,eax
c00087fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008800:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008803:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008806:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008809:	99                   	cdq    
c000880a:	89 f7                	mov    edi,esi
c000880c:	03 04 24             	add    eax,DWORD PTR [esp]
c000880f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008813:	c1 ff 1f             	sar    edi,0x1f
c0008816:	57                   	push   edi
c0008817:	56                   	push   esi
c0008818:	52                   	push   edx
c0008819:	50                   	push   eax
c000881a:	e8 91 3a 01 00       	call   c001c2b0 <__umoddi3>
c000881f:	83 c4 10             	add    esp,0x10
c0008822:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008825:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000882a:	75 10                	jne    c000883c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000882c:	83 ec 0c             	sub    esp,0xc
c000882f:	68 72 d8 01 c0       	push   0xc001d872
c0008834:	e8 ae 7e 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0008839:	83 c4 10             	add    esp,0x10
c000883c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008840:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008843:	89 10                	mov    DWORD PTR [eax],edx
c0008845:	83 c4 1c             	add    esp,0x1c
c0008848:	31 c0                	xor    eax,eax
c000884a:	5b                   	pop    ebx
c000884b:	5e                   	pop    esi
c000884c:	5f                   	pop    edi
c000884d:	5d                   	pop    ebp
c000884e:	c3                   	ret    
c000884f:	90                   	nop

c0008850 <Pipe::Pipe(int)>:
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008857:	83 ec 08             	sub    esp,0x8
c000885a:	6a 00                	push   0x0
c000885c:	50                   	push   eax
c000885d:	e8 f0 0c 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c0008862:	83 c4 10             	add    esp,0x10
c0008865:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886e:	89 10                	mov    DWORD PTR [eax],edx
c0008870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008878:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000887f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008895:	83 ec 0c             	sub    esp,0xc
c0008898:	50                   	push   eax
c0008899:	e8 bb f5 ff ff       	call   c0007e59 <malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 c2                	mov    edx,eax
c00088a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ae:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088b2:	90                   	nop
c00088b3:	83 c4 0c             	add    esp,0xc
c00088b6:	c3                   	ret    
c00088b7:	90                   	nop

c00088b8 <VgaText::isAtty()>:
c00088b8:	b0 01                	mov    al,0x1
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::~VgaText()>:
c00088bc:	83 ec 0c             	sub    esp,0xc
c00088bf:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00088c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c8:	89 10                	mov    DWORD PTR [eax],edx
c00088ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ce:	83 ec 0c             	sub    esp,0xc
c00088d1:	50                   	push   eax
c00088d2:	e8 5d 0e 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c00088d7:	83 c4 10             	add    esp,0x10
c00088da:	90                   	nop
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <VgaText::~VgaText()>:
c00088e0:	83 ec 0c             	sub    esp,0xc
c00088e3:	83 ec 0c             	sub    esp,0xc
c00088e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088ea:	e8 cd ff ff ff       	call   c00088bc <VgaText::~VgaText()>
c00088ef:	83 c4 10             	add    esp,0x10
c00088f2:	83 ec 08             	sub    esp,0x8
c00088f5:	68 34 01 00 00       	push   0x134
c00088fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fe:	e8 ef 21 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	83 c4 0c             	add    esp,0xc
c0008909:	c3                   	ret    

c000890a <VgaText::read(unsigned long long, void*, int*)>:
c000890a:	83 ec 10             	sub    esp,0x10
c000890d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008919:	e8 24 45 00 00       	call   c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>
c000891e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008922:	89 02                	mov    DWORD PTR [edx],eax
c0008924:	31 c0                	xor    eax,eax
c0008926:	83 c4 1c             	add    esp,0x1c
c0008929:	c3                   	ret    

c000892a <setTerminalScrollLock(bool)>:
c000892a:	c3                   	ret    

c000892b <doTerminalCycle()>:
c000892b:	c3                   	ret    

c000892c <addToTerminalCycle(VgaText*)>:
c000892c:	c3                   	ret    

c000892d <scrollTerminalScrollLock(int)>:
c000892d:	c3                   	ret    

c000892e <VgaText::updateTitle()>:
c000892e:	c3                   	ret    
c000892f:	90                   	nop

c0008930 <VgaText::load()>:
c0008930:	c3                   	ret    
c0008931:	90                   	nop

c0008932 <VgaText::updateCursor()>:
c0008932:	83 ec 14             	sub    esp,0x14
c0008935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008939:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000893c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000893f:	e8 6c db 00 00       	call   c00164b0 <HalConsoleCursorUpdate(int, int)>
c0008944:	83 c4 1c             	add    esp,0x1c
c0008947:	c3                   	ret    

c0008948 <VgaText::doANSI_SGR(int)>:
c0008948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000894c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008950:	85 d2                	test   edx,edx
c0008952:	75 0b                	jne    c000895f <VgaText::doANSI_SGR(int)+0x17>
c0008954:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008957:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000895a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000895d:	eb 59                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000895f:	83 fa 07             	cmp    edx,0x7
c0008962:	75 0b                	jne    c000896f <VgaText::doANSI_SGR(int)+0x27>
c0008964:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008967:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000896a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000896d:	eb 49                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000896f:	83 fa 1b             	cmp    edx,0x1b
c0008972:	74 e0                	je     c0008954 <VgaText::doANSI_SGR(int)+0xc>
c0008974:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008977:	83 f9 07             	cmp    ecx,0x7
c000897a:	77 09                	ja     c0008985 <VgaText::doANSI_SGR(int)+0x3d>
c000897c:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c0008983:	eb 20                	jmp    c00089a5 <VgaText::doANSI_SGR(int)+0x5d>
c0008985:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008988:	83 f9 07             	cmp    ecx,0x7
c000898b:	77 09                	ja     c0008996 <VgaText::doANSI_SGR(int)+0x4e>
c000898d:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c0008994:	eb 22                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c0008996:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008999:	83 f9 07             	cmp    ecx,0x7
c000899c:	77 0b                	ja     c00089a9 <VgaText::doANSI_SGR(int)+0x61>
c000899e:	8b 14 95 f8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0908]
c00089a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089a8:	c3                   	ret    
c00089a9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089ac:	83 f9 07             	cmp    ecx,0x7
c00089af:	77 0a                	ja     c00089bb <VgaText::doANSI_SGR(int)+0x73>
c00089b1:	8b 14 95 d0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0930]
c00089b8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089bb:	c3                   	ret    

c00089bc <VgaText::setDefaultBgColour(VgaColour)>:
c00089bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089c7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089ca:	c3                   	ret    
c00089cb:	90                   	nop

c00089cc <VgaText::setDefaultFgColour(VgaColour)>:
c00089cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089da:	c3                   	ret    
c00089db:	90                   	nop

c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089dc:	53                   	push   ebx
c00089dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089e9:	51                   	push   ecx
c00089ea:	e8 cd ff ff ff       	call   c00089bc <VgaText::setDefaultBgColour(VgaColour)>
c00089ef:	58                   	pop    eax
c00089f0:	5a                   	pop    edx
c00089f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089f9:	5b                   	pop    ebx
c00089fa:	eb d0                	jmp    c00089cc <VgaText::setDefaultFgColour(VgaColour)>

c00089fc <VgaText::setTitleTextColour(VgaColour)>:
c00089fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a04:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a07:	c3                   	ret    

c0008a08 <VgaText::setTitleColour(VgaColour)>:
c0008a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a10:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a13:	c3                   	ret    

c0008a14 <VgaText::setTitle(char*)>:
c0008a14:	c3                   	ret    
c0008a15:	90                   	nop

c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a16:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a1f:	83 e0 0f             	and    eax,0xf
c0008a22:	c1 e2 04             	shl    edx,0x4
c0008a25:	09 d0                	or     eax,edx
c0008a27:	c3                   	ret    

c0008a28 <VgaText::scrollScreen()>:
c0008a28:	55                   	push   ebp
c0008a29:	b9 01 00 00 00       	mov    ecx,0x1
c0008a2e:	57                   	push   edi
c0008a2f:	56                   	push   esi
c0008a30:	53                   	push   ebx
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a3e:	31 ff                	xor    edi,edi
c0008a40:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a43:	83 f9 18             	cmp    ecx,0x18
c0008a46:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a49:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a50:	75 27                	jne    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a52:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a55:	01 f5                	add    ebp,esi
c0008a57:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a5d:	74 16                	je     c0008a75 <VgaText::scrollScreen()+0x4d>
c0008a5f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a63:	50                   	push   eax
c0008a64:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a68:	50                   	push   eax
c0008a69:	e8 a8 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a6e:	5a                   	pop    edx
c0008a6f:	5a                   	pop    edx
c0008a70:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a73:	eb 04                	jmp    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a75:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a79:	47                   	inc    edi
c0008a7a:	46                   	inc    esi
c0008a7b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a81:	75 bd                	jne    c0008a40 <VgaText::scrollScreen()+0x18>
c0008a83:	41                   	inc    ecx
c0008a84:	83 f9 19             	cmp    ecx,0x19
c0008a87:	75 af                	jne    c0008a38 <VgaText::scrollScreen()+0x10>
c0008a89:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c0008a8f:	75 1f                	jne    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a91:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a95:	74 05                	je     c0008a9c <VgaText::scrollScreen()+0x74>
c0008a97:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a9a:	eb 14                	jmp    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aa2:	50                   	push   eax
c0008aa3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aa7:	50                   	push   eax
c0008aa8:	e8 8f d8 00 00       	call   c001633c <HalConsoleScroll(int, int)>
c0008aad:	83 c4 10             	add    esp,0x10
c0008ab0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ab4:	83 c4 0c             	add    esp,0xc
c0008ab7:	5b                   	pop    ebx
c0008ab8:	5e                   	pop    esi
c0008ab9:	5f                   	pop    edi
c0008aba:	5d                   	pop    ebp
c0008abb:	e9 72 fe ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ac5:	c1 e0 08             	shl    eax,0x8
c0008ac8:	89 c2                	mov    edx,eax
c0008aca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008acf:	09 d0                	or     eax,edx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 1c             	sub    esp,0x1c
c0008ad9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008add:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ae9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008aed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af1:	0f b6 c3             	movzx  eax,bl
c0008af4:	50                   	push   eax
c0008af5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008afa:	50                   	push   eax
c0008afb:	e8 16 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b00:	5a                   	pop    edx
c0008b01:	0f b6 c0             	movzx  eax,al
c0008b04:	59                   	pop    ecx
c0008b05:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b0e:	50                   	push   eax
c0008b0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b13:	e8 a8 ff ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b18:	5a                   	pop    edx
c0008b19:	66 6b d7 50          	imul   dx,di,0x50
c0008b1d:	59                   	pop    ecx
c0008b1e:	01 f2                	add    edx,esi
c0008b20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b23:	0f b7 d2             	movzx  edx,dx
c0008b26:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b2a:	39 2d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebp
c0008b30:	75 28                	jne    c0008b5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b36:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b3a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b3e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b4e:	83 c4 1c             	add    esp,0x1c
c0008b51:	5b                   	pop    ebx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	5d                   	pop    ebp
c0008b55:	e9 ea d8 00 00       	jmp    c0016444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b5a:	83 c4 1c             	add    esp,0x1c
c0008b5d:	5b                   	pop    ebx
c0008b5e:	5e                   	pop    esi
c0008b5f:	5f                   	pop    edi
c0008b60:	5d                   	pop    ebp
c0008b61:	c3                   	ret    

c0008b62 <VgaText::getCursorX()>:
c0008b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b66:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b69:	c3                   	ret    

c0008b6a <VgaText::getCursorY()>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b71:	c3                   	ret    

c0008b72 <VgaText::setCursor(int, int)>:
c0008b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b7a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b84:	e9 a9 fd ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008b89 <setActiveTerminal(VgaText*)>:
c0008b89:	53                   	push   ebx
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b91:	85 db                	test   ebx,ebx
c0008b93:	75 11                	jne    c0008ba6 <setActiveTerminal(VgaText*)+0x1d>
c0008b95:	c7 44 24 10 ac d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8ac
c0008b9d:	83 c4 08             	add    esp,0x8
c0008ba0:	5b                   	pop    ebx
c0008ba1:	e9 41 7b 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c0008ba6:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0008bab:	85 c0                	test   eax,eax
c0008bad:	74 0c                	je     c0008bbb <setActiveTerminal(VgaText*)+0x32>
c0008baf:	83 ec 0c             	sub    esp,0xc
c0008bb2:	50                   	push   eax
c0008bb3:	e8 7a fd ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008bb8:	83 c4 10             	add    esp,0x10
c0008bbb:	89 1d 84 09 02 c0    	mov    DWORD PTR ds:0xc0020984,ebx
c0008bc1:	50                   	push   eax
c0008bc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc8:	53                   	push   ebx
c0008bc9:	e8 a4 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008bce:	83 c4 18             	add    esp,0x18
c0008bd1:	5b                   	pop    ebx
c0008bd2:	c3                   	ret    
c0008bd3:	90                   	nop

c0008bd4 <VgaText::clearScreen()>:
c0008bd4:	57                   	push   edi
c0008bd5:	56                   	push   esi
c0008bd6:	31 f6                	xor    esi,esi
c0008bd8:	53                   	push   ebx
c0008bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bdd:	52                   	push   edx
c0008bde:	6a 00                	push   0x0
c0008be0:	6a 00                	push   0x0
c0008be2:	53                   	push   ebx
c0008be3:	e8 8a ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008be8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bf5:	7e 20                	jle    c0008c17 <VgaText::clearScreen()+0x43>
c0008bf7:	31 ff                	xor    edi,edi
c0008bf9:	50                   	push   eax
c0008bfa:	50                   	push   eax
c0008bfb:	56                   	push   esi
c0008bfc:	57                   	push   edi
c0008bfd:	47                   	inc    edi
c0008bfe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c01:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c04:	6a 20                	push   0x20
c0008c06:	53                   	push   ebx
c0008c07:	e8 c6 fe ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 ff 50             	cmp    edi,0x50
c0008c12:	75 e5                	jne    c0008bf9 <VgaText::clearScreen()+0x25>
c0008c14:	46                   	inc    esi
c0008c15:	eb db                	jmp    c0008bf2 <VgaText::clearScreen()+0x1e>
c0008c17:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c1e:	5b                   	pop    ebx
c0008c1f:	5e                   	pop    esi
c0008c20:	5f                   	pop    edi
c0008c21:	c3                   	ret    

c0008c22 <VgaText::setCursorX(int)>:
c0008c22:	83 ec 10             	sub    esp,0x10
c0008c25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c30:	50                   	push   eax
c0008c31:	e8 3c ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c36:	83 c4 1c             	add    esp,0x1c
c0008c39:	c3                   	ret    

c0008c3a <VgaText::setCursorY(int)>:
c0008c3a:	83 ec 10             	sub    esp,0x10
c0008c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c48:	50                   	push   eax
c0008c49:	e8 24 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c4e:	83 c4 1c             	add    esp,0x1c
c0008c51:	c3                   	ret    

c0008c52 <VgaText::incrementCursor(bool)>:
c0008c52:	56                   	push   esi
c0008c53:	53                   	push   ebx
c0008c54:	51                   	push   ecx
c0008c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c60:	40                   	inc    eax
c0008c61:	83 f8 50             	cmp    eax,0x50
c0008c64:	74 05                	je     c0008c6b <VgaText::incrementCursor(bool)+0x19>
c0008c66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c69:	eb 24                	jmp    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c75:	8d 50 01             	lea    edx,[eax+0x1]
c0008c78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c7e:	75 0f                	jne    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c86:	53                   	push   ebx
c0008c87:	e8 9c fd ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008c8c:	83 c4 10             	add    esp,0x10
c0008c8f:	89 f0                	mov    eax,esi
c0008c91:	84 c0                	test   al,al
c0008c93:	74 0c                	je     c0008ca1 <VgaText::incrementCursor(bool)+0x4f>
c0008c95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c99:	5a                   	pop    edx
c0008c9a:	5b                   	pop    ebx
c0008c9b:	5e                   	pop    esi
c0008c9c:	e9 91 fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008ca1:	58                   	pop    eax
c0008ca2:	5b                   	pop    ebx
c0008ca3:	5e                   	pop    esi
c0008ca4:	c3                   	ret    
c0008ca5:	90                   	nop

c0008ca6 <VgaText::decrementCursor(bool)>:
c0008ca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008caa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb1:	85 c0                	test   eax,eax
c0008cb3:	74 04                	je     c0008cb9 <VgaText::decrementCursor(bool)+0x13>
c0008cb5:	48                   	dec    eax
c0008cb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cb9:	84 c9                	test   cl,cl
c0008cbb:	74 09                	je     c0008cc6 <VgaText::decrementCursor(bool)+0x20>
c0008cbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc1:	e9 6c fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008cc6:	c3                   	ret    
c0008cc7:	90                   	nop

c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cc8:	53                   	push   ebx
c0008cc9:	83 ec 08             	sub    esp,0x8
c0008ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008cdc:	3c 07                	cmp    al,0x7
c0008cde:	75 21                	jne    c0008d01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ce8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	e9 3e 2d 00 00       	jmp    c000ba3f <Krnl::beep(int, int, bool)>
c0008d01:	3c 0d                	cmp    al,0xd
c0008d03:	75 09                	jne    c0008d0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d0c:	eb 2c                	jmp    c0008d3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d0e:	3c 0a                	cmp    al,0xa
c0008d10:	75 31                	jne    c0008d43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008d1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d25:	75 0f                	jne    c0008d36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d27:	83 ec 0c             	sub    esp,0xc
c0008d2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d2d:	53                   	push   ebx
c0008d2e:	e8 f5 fc ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d3a:	83 c4 08             	add    esp,0x8
c0008d3d:	5b                   	pop    ebx
c0008d3e:	e9 ef fb ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008d43:	3c 08                	cmp    al,0x8
c0008d45:	75 25                	jne    c0008d6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d47:	50                   	push   eax
c0008d48:	50                   	push   eax
c0008d49:	6a 01                	push   0x1
c0008d4b:	53                   	push   ebx
c0008d4c:	e8 55 ff ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008d51:	5a                   	pop    edx
c0008d52:	59                   	pop    ecx
c0008d53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d5f:	6a 20                	push   0x20
c0008d61:	53                   	push   ebx
c0008d62:	e8 6b fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d67:	83 c4 28             	add    esp,0x28
c0008d6a:	5b                   	pop    ebx
c0008d6b:	c3                   	ret    
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	0f be c0             	movsx  eax,al
c0008d72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d78:	51                   	push   ecx
c0008d79:	52                   	push   edx
c0008d7a:	50                   	push   eax
c0008d7b:	53                   	push   ebx
c0008d7c:	e8 51 fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d8d:	83 c4 28             	add    esp,0x28
c0008d90:	5b                   	pop    ebx
c0008d91:	e9 bc fe ff ff       	jmp    c0008c52 <VgaText::incrementCursor(bool)>

c0008d96 <VgaText::putchar(char)>:
c0008d96:	56                   	push   esi
c0008d97:	53                   	push   ebx
c0008d98:	83 ec 14             	sub    esp,0x14
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008da3:	3c 5b                	cmp    al,0x5b
c0008da5:	75 18                	jne    c0008dbf <VgaText::putchar(char)+0x29>
c0008da7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008dab:	74 1f                	je     c0008dcc <VgaText::putchar(char)+0x36>
c0008dad:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008db3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dba:	e9 bd 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dbf:	3c 1b                	cmp    al,0x1b
c0008dc1:	75 09                	jne    c0008dcc <VgaText::putchar(char)+0x36>
c0008dc3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dc7:	e9 b0 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dcc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dcf:	84 c9                	test   cl,cl
c0008dd1:	0f 84 92 00 00 00    	je     c0008e69 <VgaText::putchar(char)+0xd3>
c0008dd7:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dda:	80 fa 3e             	cmp    dl,0x3e
c0008ddd:	77 76                	ja     c0008e55 <VgaText::putchar(char)+0xbf>
c0008ddf:	3c 6d                	cmp    al,0x6d
c0008de1:	75 47                	jne    c0008e2a <VgaText::putchar(char)+0x94>
c0008de3:	31 f6                	xor    esi,esi
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	31 c0                	xor    eax,eax
c0008de9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008dec:	7e 2d                	jle    c0008e1b <VgaText::putchar(char)+0x85>
c0008dee:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008df3:	80 fa 3b             	cmp    dl,0x3b
c0008df6:	75 17                	jne    c0008e0f <VgaText::putchar(char)+0x79>
c0008df8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008dfc:	50                   	push   eax
c0008dfd:	53                   	push   ebx
c0008dfe:	e8 45 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e03:	59                   	pop    ecx
c0008e04:	31 d2                	xor    edx,edx
c0008e06:	58                   	pop    eax
c0008e07:	31 c0                	xor    eax,eax
c0008e09:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e0d:	eb 09                	jmp    c0008e18 <VgaText::putchar(char)+0x82>
c0008e0f:	6b c0 0a             	imul   eax,eax,0xa
c0008e12:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e16:	88 ca                	mov    dl,cl
c0008e18:	46                   	inc    esi
c0008e19:	eb ce                	jmp    c0008de9 <VgaText::putchar(char)+0x53>
c0008e1b:	84 d2                	test   dl,dl
c0008e1d:	74 2e                	je     c0008e4d <VgaText::putchar(char)+0xb7>
c0008e1f:	50                   	push   eax
c0008e20:	53                   	push   ebx
c0008e21:	e8 22 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e26:	58                   	pop    eax
c0008e27:	5a                   	pop    edx
c0008e28:	eb 23                	jmp    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2a:	3c 4a                	cmp    al,0x4a
c0008e2c:	75 1f                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e32:	75 19                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e34:	83 ec 0c             	sub    esp,0xc
c0008e37:	53                   	push   ebx
c0008e38:	e8 97 fd ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0008e3d:	83 c4 0c             	add    esp,0xc
c0008e40:	6a 00                	push   0x0
c0008e42:	6a 00                	push   0x0
c0008e44:	53                   	push   ebx
c0008e45:	e8 28 fd ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008e4a:	83 c4 10             	add    esp,0x10
c0008e4d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e53:	eb 27                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e55:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e58:	83 fa 0e             	cmp    edx,0xe
c0008e5b:	7f 1f                	jg     c0008e7c <VgaText::putchar(char)+0xe6>
c0008e5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e60:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e63:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e67:	eb 13                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e69:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e6c:	0f be c0             	movsx  eax,al
c0008e6f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e72:	50                   	push   eax
c0008e73:	53                   	push   ebx
c0008e74:	e8 4f fe ff ff       	call   c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	83 c4 14             	add    esp,0x14
c0008e7f:	5b                   	pop    ebx
c0008e80:	5e                   	pop    esi
c0008e81:	c3                   	ret    

c0008e82 <VgaText::putx(unsigned int)>:
c0008e82:	57                   	push   edi
c0008e83:	b9 11 00 00 00       	mov    ecx,0x11
c0008e88:	56                   	push   esi
c0008e89:	be ba d8 01 c0       	mov    esi,0xc001d8ba
c0008e8e:	53                   	push   ebx
c0008e8f:	83 ec 20             	sub    esp,0x20
c0008e92:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e96:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e9a:	fc                   	cld    
c0008e9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008e9d:	be 08 00 00 00       	mov    esi,0x8
c0008ea2:	50                   	push   eax
c0008ea3:	50                   	push   eax
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	c1 e3 04             	shl    ebx,0x4
c0008ea9:	c1 e8 1c             	shr    eax,0x1c
c0008eac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb1:	50                   	push   eax
c0008eb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eb6:	e8 db fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	4e                   	dec    esi
c0008ebf:	75 e1                	jne    c0008ea2 <VgaText::putx(unsigned int)+0x20>
c0008ec1:	83 c4 20             	add    esp,0x20
c0008ec4:	5b                   	pop    ebx
c0008ec5:	5e                   	pop    esi
c0008ec6:	5f                   	pop    edi
c0008ec7:	c3                   	ret    

c0008ec8 <VgaText::puts(char const*)>:
c0008ec8:	53                   	push   ebx
c0008ec9:	83 ec 08             	sub    esp,0x8
c0008ecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ed3:	84 c0                	test   al,al
c0008ed5:	74 12                	je     c0008ee9 <VgaText::puts(char const*)+0x21>
c0008ed7:	43                   	inc    ebx
c0008ed8:	51                   	push   ecx
c0008ed9:	51                   	push   ecx
c0008eda:	50                   	push   eax
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 b2 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	eb e7                	jmp    c0008ed0 <VgaText::puts(char const*)+0x8>
c0008ee9:	83 c4 08             	add    esp,0x8
c0008eec:	5b                   	pop    ebx
c0008eed:	c3                   	ret    

c0008eee <VgaText::write(unsigned long long, void*, int*)>:
c0008eee:	55                   	push   ebp
c0008eef:	57                   	push   edi
c0008ef0:	56                   	push   esi
c0008ef1:	53                   	push   ebx
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ef9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008efd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f01:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f08:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f0b:	39 eb                	cmp    ebx,ebp
c0008f0d:	74 13                	je     c0008f22 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f0f:	43                   	inc    ebx
c0008f10:	50                   	push   eax
c0008f11:	50                   	push   eax
c0008f12:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f16:	50                   	push   eax
c0008f17:	56                   	push   esi
c0008f18:	e8 79 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008f1d:	83 c4 10             	add    esp,0x10
c0008f20:	eb e9                	jmp    c0008f0b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f22:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f2d:	89 38                	mov    DWORD PTR [eax],edi
c0008f2f:	83 c4 0c             	add    esp,0xc
c0008f32:	31 c0                	xor    eax,eax
c0008f34:	5b                   	pop    ebx
c0008f35:	5e                   	pop    esi
c0008f36:	5f                   	pop    edi
c0008f37:	5d                   	pop    ebp
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop

c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f3a:	55                   	push   ebp
c0008f3b:	57                   	push   edi
c0008f3c:	56                   	push   esi
c0008f3d:	53                   	push   ebx
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f51:	50                   	push   eax
c0008f52:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f57:	50                   	push   eax
c0008f58:	e8 b9 fa ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008f5d:	5a                   	pop    edx
c0008f5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f63:	59                   	pop    ecx
c0008f64:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f67:	89 c5                	mov    ebp,eax
c0008f69:	0f b7 f6             	movzx  esi,si
c0008f6c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f70:	01 f6                	add    esi,esi
c0008f72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f78:	84 c0                	test   al,al
c0008f7a:	0f 84 f4 00 00 00    	je     c0009074 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f80:	3c 0d                	cmp    al,0xd
c0008f82:	75 0c                	jne    c0008f90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f8b:	e9 de 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f90:	3c 0a                	cmp    al,0xa
c0008f92:	75 45                	jne    c0008fd9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f97:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fa4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fa7:	75 0f                	jne    c0008fb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fa9:	83 ec 0c             	sub    esp,0xc
c0008fac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008faf:	53                   	push   ebx
c0008fb0:	e8 73 fa ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008fb5:	83 c4 10             	add    esp,0x10
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	53                   	push   ebx
c0008fbc:	e8 71 f9 ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008fc1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fcc:	0f b7 f6             	movzx  esi,si
c0008fcf:	01 f6                	add    esi,esi
c0008fd1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd4:	e9 95 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fd9:	3c 08                	cmp    al,0x8
c0008fdb:	75 35                	jne    c0009012 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fdd:	51                   	push   ecx
c0008fde:	51                   	push   ecx
c0008fdf:	6a 01                	push   0x1
c0008fe1:	53                   	push   ebx
c0008fe2:	e8 bf fc ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008fe7:	5e                   	pop    esi
c0008fe8:	58                   	pop    eax
c0008fe9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008fef:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ff2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ff5:	6a 20                	push   0x20
c0008ff7:	53                   	push   ebx
c0008ff8:	e8 d5 fa ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008ffd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009002:	83 c4 20             	add    esp,0x20
c0009005:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009008:	0f b7 f6             	movzx  esi,si
c000900b:	01 f6                	add    esi,esi
c000900d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009010:	eb 5c                	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009012:	52                   	push   edx
c0009013:	52                   	push   edx
c0009014:	89 ea                	mov    edx,ebp
c0009016:	0f b6 ca             	movzx  ecx,dl
c0009019:	51                   	push   ecx
c000901a:	50                   	push   eax
c000901b:	e8 a0 fa ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0009020:	83 c4 10             	add    esp,0x10
c0009023:	66 89 06             	mov    WORD PTR [esi],ax
c0009026:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c000902c:	75 1d                	jne    c000904b <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000902e:	83 ec 0c             	sub    esp,0xc
c0009031:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009034:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009037:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009042:	50                   	push   eax
c0009043:	e8 fc d3 00 00       	call   c0016444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009048:	83 c4 20             	add    esp,0x20
c000904b:	83 c6 02             	add    esi,0x2
c000904e:	50                   	push   eax
c000904f:	50                   	push   eax
c0009050:	6a 00                	push   0x0
c0009052:	53                   	push   ebx
c0009053:	e8 fa fb ff ff       	call   c0008c52 <VgaText::incrementCursor(bool)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000905f:	75 0d                	jne    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009061:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009066:	0f b7 f6             	movzx  esi,si
c0009069:	01 f6                	add    esi,esi
c000906b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000906e:	47                   	inc    edi
c000906f:	e9 01 ff ff ff       	jmp    c0008f75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009074:	83 ec 0c             	sub    esp,0xc
c0009077:	53                   	push   ebx
c0009078:	e8 b5 f8 ff ff       	call   c0008932 <VgaText::updateCursor()>
c000907d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009084:	83 c4 1c             	add    esp,0x1c
c0009087:	5b                   	pop    ebx
c0009088:	5e                   	pop    esi
c0009089:	5f                   	pop    edi
c000908a:	5d                   	pop    ebp
c000908b:	c3                   	ret    

c000908c <VgaText::VgaText(char const*)>:
c000908c:	56                   	push   esi
c000908d:	53                   	push   ebx
c000908e:	83 ec 04             	sub    esp,0x4
c0009091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009095:	83 ec 08             	sub    esp,0x8
c0009098:	6a 00                	push   0x0
c000909a:	50                   	push   eax
c000909b:	e8 b2 04 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00090a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ac:	89 10                	mov    DWORD PTR [eax],edx
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ee:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009104:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	6a 01                	push   0x1
c0009110:	e8 80 08 00 00       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0009115:	83 c4 10             	add    esp,0x10
c0009118:	89 c2                	mov    edx,eax
c000911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009121:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c0009127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000912b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000912e:	89 c6                	mov    esi,eax
c0009130:	e8 f1 f0 ff ff       	call   c0008226 <Phys::allocatePage()>
c0009135:	68 05 0c 00 00       	push   0xc05
c000913a:	56                   	push   esi
c000913b:	50                   	push   eax
c000913c:	53                   	push   ebx
c000913d:	e8 e8 0e 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009142:	83 c4 10             	add    esp,0x10
c0009145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000914c:	83 ec 04             	sub    esp,0x4
c000914f:	68 a0 0f 00 00       	push   0xfa0
c0009154:	6a 00                	push   0x0
c0009156:	50                   	push   eax
c0009157:	e8 94 73 ff ff       	call   c00004f0 <memset>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	83 ec 04             	sub    esp,0x4
c0009162:	6a 00                	push   0x0
c0009164:	6a 07                	push   0x7
c0009166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000916a:	e8 6d f8 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	83 ec 04             	sub    esp,0x4
c0009175:	6a 00                	push   0x0
c0009177:	6a 00                	push   0x0
c0009179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917d:	e8 f0 f9 ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0009182:	83 c4 10             	add    esp,0x10
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918c:	e8 43 fa ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0009191:	83 c4 10             	add    esp,0x10
c0009194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009198:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a0:	05 82 00 00 00       	add    eax,0x82
c00091a5:	83 ec 04             	sub    esp,0x4
c00091a8:	6a 30                	push   0x30
c00091aa:	6a 00                	push   0x0
c00091ac:	50                   	push   eax
c00091ad:	e8 3e 73 ff ff       	call   c00004f0 <memset>
c00091b2:	83 c4 10             	add    esp,0x10
c00091b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b9:	05 b2 00 00 00       	add    eax,0xb2
c00091be:	83 ec 04             	sub    esp,0x4
c00091c1:	68 80 00 00 00       	push   0x80
c00091c6:	6a 00                	push   0x0
c00091c8:	50                   	push   eax
c00091c9:	e8 22 73 ff ff       	call   c00004f0 <memset>
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	90                   	nop
c00091d2:	83 c4 04             	add    esp,0x4
c00091d5:	5b                   	pop    ebx
c00091d6:	5e                   	pop    esi
c00091d7:	c3                   	ret    

c00091d8 <VgaText::receiveKey(unsigned char)>:
c00091d8:	57                   	push   edi
c00091d9:	56                   	push   esi
c00091da:	53                   	push   ebx
c00091db:	83 ec 10             	sub    esp,0x10
c00091de:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091e6:	84 db                	test   bl,bl
c00091e8:	0f 84 ba 00 00 00    	je     c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c00091ee:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091f4:	80 fb 08             	cmp    bl,0x8
c00091f7:	75 2c                	jne    c0009225 <VgaText::receiveKey(unsigned char)+0x4d>
c00091f9:	83 ec 0c             	sub    esp,0xc
c00091fc:	57                   	push   edi
c00091fd:	e8 5e 73 ff ff       	call   c0000560 <strlen>
c0009202:	83 c4 10             	add    esp,0x10
c0009205:	85 c0                	test   eax,eax
c0009207:	74 41                	je     c000924a <VgaText::receiveKey(unsigned char)+0x72>
c0009209:	50                   	push   eax
c000920a:	50                   	push   eax
c000920b:	6a 08                	push   0x8
c000920d:	56                   	push   esi
c000920e:	e8 83 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009213:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009216:	e8 45 73 ff ff       	call   c0000560 <strlen>
c000921b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009223:	eb 22                	jmp    c0009247 <VgaText::receiveKey(unsigned char)+0x6f>
c0009225:	0f be c3             	movsx  eax,bl
c0009228:	52                   	push   edx
c0009229:	52                   	push   edx
c000922a:	50                   	push   eax
c000922b:	56                   	push   esi
c000922c:	e8 65 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009231:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009235:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000923a:	59                   	pop    ecx
c000923b:	58                   	pop    eax
c000923c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009240:	50                   	push   eax
c0009241:	57                   	push   edi
c0009242:	e8 99 75 ff ff       	call   c00007e0 <strcat>
c0009247:	83 c4 10             	add    esp,0x10
c000924a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009251:	75 05                	jne    c0009258 <VgaText::receiveKey(unsigned char)+0x80>
c0009253:	80 fb 0a             	cmp    bl,0xa
c0009256:	75 50                	jne    c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009261:	56                   	push   esi
c0009262:	e8 f9 72 ff ff       	call   c0000560 <strlen>
c0009267:	89 3c 24             	mov    DWORD PTR [esp],edi
c000926a:	89 c3                	mov    ebx,eax
c000926c:	e8 ef 72 ff ff       	call   c0000560 <strlen>
c0009271:	83 c4 10             	add    esp,0x10
c0009274:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009278:	3d 80 00 00 00       	cmp    eax,0x80
c000927d:	76 10                	jbe    c000928f <VgaText::receiveKey(unsigned char)+0xb7>
c000927f:	83 ec 0c             	sub    esp,0xc
c0009282:	68 cb d8 01 c0       	push   0xc001d8cb
c0009287:	e8 5b 74 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000928c:	83 c4 10             	add    esp,0x10
c000928f:	50                   	push   eax
c0009290:	50                   	push   eax
c0009291:	57                   	push   edi
c0009292:	56                   	push   esi
c0009293:	e8 48 75 ff ff       	call   c00007e0 <strcat>
c0009298:	83 c4 0c             	add    esp,0xc
c000929b:	6a 30                	push   0x30
c000929d:	6a 00                	push   0x0
c000929f:	57                   	push   edi
c00092a0:	e8 4b 72 ff ff       	call   c00004f0 <memset>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	5b                   	pop    ebx
c00092ac:	5e                   	pop    esi
c00092ad:	5f                   	pop    edi
c00092ae:	c3                   	ret    
c00092af:	90                   	nop

c00092b0 <VgaText::doUpdate()>:
c00092b0:	c3                   	ret    

c00092b1 <newTerminal(char*)>:
c00092b1:	83 ec 28             	sub    esp,0x28
c00092b4:	68 34 01 00 00       	push   0x134
c00092b9:	e8 9b eb ff ff       	call   c0007e59 <malloc>
c00092be:	5a                   	pop    edx
c00092bf:	59                   	pop    ecx
c00092c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c4:	50                   	push   eax
c00092c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092c9:	e8 be fd ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c00092ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d2:	83 c4 2c             	add    esp,0x2c
c00092d5:	c3                   	ret    
c00092d6:	66 90                	xchg   ax,ax

c00092d8 <TSS::TSS()>:
c00092d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092e3:	90                   	nop
c00092e4:	c3                   	ret    
c00092e5:	90                   	nop
c00092e6:	66 90                	xchg   ax,ax

c00092e8 <TSS::setESP(unsigned long)>:
c00092e8:	55                   	push   ebp
c00092e9:	89 e5                	mov    ebp,esp
c00092eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092f7:	90                   	nop
c00092f8:	5d                   	pop    ebp
c00092f9:	c3                   	ret    
c00092fa:	66 90                	xchg   ax,ax

c00092fc <TSS::flush()>:
c00092fc:	55                   	push   ebp
c00092fd:	89 e5                	mov    ebp,esp
c00092ff:	83 ec 10             	sub    esp,0x10
c0009302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009305:	8b 00                	mov    eax,DWORD PTR [eax]
c0009307:	83 c8 03             	or     eax,0x3
c000930a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000930e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009312:	66 89 d0             	mov    ax,dx
c0009315:	0f 00 d8             	ltr    ax
c0009318:	90                   	nop
c0009319:	c9                   	leave  
c000931a:	c3                   	ret    
c000931b:	90                   	nop

c000931c <TSS::setup(unsigned long, unsigned long)>:
c000931c:	55                   	push   ebp
c000931d:	89 e5                	mov    ebp,esp
c000931f:	83 ec 18             	sub    esp,0x18
c0009322:	83 ec 0c             	sub    esp,0xc
c0009325:	6a 68                	push   0x68
c0009327:	e8 2d eb ff ff       	call   c0007e59 <malloc>
c000932c:	83 c4 10             	add    esp,0x10
c000932f:	89 c2                	mov    edx,eax
c0009331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000933d:	83 ec 04             	sub    esp,0x4
c0009340:	6a 68                	push   0x68
c0009342:	6a 00                	push   0x0
c0009344:	50                   	push   eax
c0009345:	e8 a6 71 ff ff       	call   c00004f0 <memset>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009353:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000935c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000935f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000936e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009377:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000937d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009383:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000938c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093c2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e4:	0f 20 da             	mov    edx,cr3
c00093e7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093ed:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	50                   	push   eax
c00093fa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093fd:	50                   	push   eax
c00093fe:	e8 e1 e2 ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	6a 68                	push   0x68
c000940b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000940e:	50                   	push   eax
c000940f:	e8 ec e2 ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c0009414:	83 c4 10             	add    esp,0x10
c0009417:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000941b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000941e:	83 e0 0f             	and    eax,0xf
c0009421:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009424:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009427:	83 c8 40             	or     eax,0x40
c000942a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000942d:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009438:	05 78 01 00 00       	add    eax,0x178
c000943d:	83 ec 04             	sub    esp,0x4
c0009440:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009443:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009446:	50                   	push   eax
c0009447:	e8 e8 e2 ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	89 c2                	mov    edx,eax
c0009451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009454:	89 10                	mov    DWORD PTR [eax],edx
c0009456:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000945b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009461:	05 78 01 00 00       	add    eax,0x178
c0009466:	83 ec 0c             	sub    esp,0xc
c0009469:	50                   	push   eax
c000946a:	e8 ef e2 ff ff       	call   c000775e <GDT::flush()>
c000946f:	83 c4 10             	add    esp,0x10
c0009472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009475:	8b 00                	mov    eax,DWORD PTR [eax]
c0009477:	c9                   	leave  
c0009478:	c3                   	ret    
c0009479:	90                   	nop

c000947a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009485:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000948a:	75 08                	jne    c0009494 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000948c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009492:	eb 38                	jmp    c00094cc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009494:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009499:	75 17                	jne    c00094b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000949b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094af:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094b2:	89 c1                	mov    ecx,eax
c00094b4:	83 e1 fd             	and    ecx,0xfffffffd
c00094b7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094bd:	74 cd                	je     c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094bf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094c4:	83 e0 ef             	and    eax,0xffffffef
c00094c7:	83 f8 08             	cmp    eax,0x8
c00094ca:	76 c0                	jbe    c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094cc:	31 c0                	xor    eax,eax
c00094ce:	c3                   	ret    
c00094cf:	90                   	nop

c00094d0 <ReservedFilename::isAtty()>:
c00094d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094d7:	31 c0                	xor    eax,eax
c00094d9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094df:	74 09                	je     c00094ea <ReservedFilename::isAtty()+0x1a>
c00094e1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094e7:	0f 94 c0             	sete   al
c00094ea:	c3                   	ret    
c00094eb:	90                   	nop

c00094ec <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094fb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009500:	75 08                	jne    c000950a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009502:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009508:	eb 3d                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000950a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000950f:	75 17                	jne    c0009528 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009516:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009519:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000951f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009525:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009528:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000952d:	75 04                	jne    c0009533 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000952f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009531:	eb 14                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009533:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009538:	74 c8                	je     c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000953f:	83 e0 ef             	and    eax,0xffffffef
c0009542:	83 f8 08             	cmp    eax,0x8
c0009545:	76 bb                	jbe    c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009547:	31 c0                	xor    eax,eax
c0009549:	c3                   	ret    

c000954a <UnixFile::getFileDescriptor()>:
c000954a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009551:	c3                   	ret    

c0009552 <UnixFile::UnixFile(int)>:
c0009552:	53                   	push   ebx
c0009553:	83 ec 28             	sub    esp,0x28
c0009556:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000955b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000955f:	89 10                	mov    DWORD PTR [eax],edx
c0009561:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009569:	0f 8f 8c 01 00 00    	jg     c00096fb <UnixFile::UnixFile(int)+0x1a9>
c000956f:	a1 80 f8 01 c0       	mov    eax,ds:0xc001f880
c0009574:	8d 50 01             	lea    edx,[eax+0x1]
c0009577:	89 15 80 f8 01 c0    	mov    DWORD PTR ds:0xc001f880,edx
c000957d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009581:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009584:	83 ec 08             	sub    esp,0x8
c0009587:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000958b:	68 18 0a 02 c0       	push   0xc0020a18
c0009590:	e8 03 2f 01 00       	call   c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009595:	83 c4 10             	add    esp,0x10
c0009598:	a0 14 0a 02 c0       	mov    al,ds:0xc0020a14
c000959d:	83 f0 01             	xor    eax,0x1
c00095a0:	84 c0                	test   al,al
c00095a2:	0f 84 54 01 00 00    	je     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c00095a8:	c6 05 14 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a14,0x1
c00095af:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095b7:	83 ec 0c             	sub    esp,0xc
c00095ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095be:	e8 96 e8 ff ff       	call   c0007e59 <malloc>
c00095c3:	83 c4 10             	add    esp,0x10
c00095c6:	89 c3                	mov    ebx,eax
c00095c8:	83 ec 08             	sub    esp,0x8
c00095cb:	68 03 ff ff 0f       	push   0xfffff03
c00095d0:	53                   	push   ebx
c00095d1:	e8 2c 01 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00095d6:	83 c4 10             	add    esp,0x10
c00095d9:	89 1d 0c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a0c,ebx
c00095df:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095e7:	83 ec 0c             	sub    esp,0xc
c00095ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ee:	e8 66 e8 ff ff       	call   c0007e59 <malloc>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	89 c3                	mov    ebx,eax
c00095f8:	83 ec 08             	sub    esp,0x8
c00095fb:	68 01 ff ff 0f       	push   0xfffff01
c0009600:	53                   	push   ebx
c0009601:	e8 fc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009606:	83 c4 10             	add    esp,0x10
c0009609:	89 1d 10 0a 02 c0    	mov    DWORD PTR ds:0xc0020a10,ebx
c000960f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000961e:	e8 36 e8 ff ff       	call   c0007e59 <malloc>
c0009623:	83 c4 10             	add    esp,0x10
c0009626:	89 c3                	mov    ebx,eax
c0009628:	83 ec 08             	sub    esp,0x8
c000962b:	68 00 ff ff 0f       	push   0xfffff00
c0009630:	53                   	push   ebx
c0009631:	e8 cc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	89 1d 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,ebx
c000963f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000964e:	e8 06 e8 ff ff       	call   c0007e59 <malloc>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 c3                	mov    ebx,eax
c0009658:	83 ec 08             	sub    esp,0x8
c000965b:	68 02 ff ff 0f       	push   0xfffff02
c0009660:	53                   	push   ebx
c0009661:	e8 9c 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009666:	83 c4 10             	add    esp,0x10
c0009669:	89 1d 08 0a 02 c0    	mov    DWORD PTR ds:0xc0020a08,ebx
c000966f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009677:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000967c:	7f 7e                	jg     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c000967e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009686:	83 ec 0c             	sub    esp,0xc
c0009689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000968d:	e8 c7 e7 ff ff       	call   c0007e59 <malloc>
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	89 c3                	mov    ebx,eax
c0009697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969b:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a0:	83 ec 08             	sub    esp,0x8
c00096a3:	50                   	push   eax
c00096a4:	53                   	push   ebx
c00096a5:	e8 58 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b1:	89 1c 85 e0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf620],ebx
c00096b8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 8d e7 ff ff       	call   c0007e59 <malloc>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	89 c3                	mov    ebx,eax
c00096d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096da:	83 ec 08             	sub    esp,0x8
c00096dd:	50                   	push   eax
c00096de:	53                   	push   ebx
c00096df:	e8 1e 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096eb:	89 1c 85 a0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf660],ebx
c00096f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096f6:	e9 7c ff ff ff       	jmp    c0009677 <UnixFile::UnixFile(int)+0x125>
c00096fb:	90                   	nop
c00096fc:	83 c4 28             	add    esp,0x28
c00096ff:	5b                   	pop    ebx
c0009700:	c3                   	ret    
c0009701:	90                   	nop

c0009702 <ReservedFilename::ReservedFilename(int)>:
c0009702:	83 ec 0c             	sub    esp,0xc
c0009705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009709:	83 ec 08             	sub    esp,0x8
c000970c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009710:	50                   	push   eax
c0009711:	e8 3c fe ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	ba 04 da 01 c0       	mov    edx,0xc001da04
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	89 10                	mov    DWORD PTR [eax],edx
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000972c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000972f:	90                   	nop
c0009730:	83 c4 0c             	add    esp,0xc
c0009733:	c3                   	ret    

c0009734 <UnixFile::~UnixFile()>:
c0009734:	83 ec 1c             	sub    esp,0x1c
c0009737:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000973c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009740:	89 10                	mov    DWORD PTR [eax],edx
c0009742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009749:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000974e:	7f 73                	jg     c00097c3 <UnixFile::~UnixFile()+0x8f>
c0009750:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009758:	83 ec 0c             	sub    esp,0xc
c000975b:	68 18 0a 02 c0       	push   0xc0020a18
c0009760:	e8 07 2e 01 00       	call   c001c56c <LinkedList<UnixFile>::getFirstElement()>
c0009765:	83 c4 10             	add    esp,0x10
c0009768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000976c:	83 ec 0c             	sub    esp,0xc
c000976f:	68 18 0a 02 c0       	push   0xc0020a18
c0009774:	e8 fb 2d 01 00       	call   c001c574 <LinkedList<UnixFile>::removeFirst()>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009780:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009784:	74 40                	je     c00097c6 <UnixFile::~UnixFile()+0x92>
c0009786:	83 ec 08             	sub    esp,0x8
c0009789:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000978d:	68 18 0a 02 c0       	push   0xc0020a18
c0009792:	e8 01 2d 01 00       	call   c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000979e:	8d 50 01             	lea    edx,[eax+0x1]
c00097a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a5:	3d 88 13 00 00       	cmp    eax,0x1388
c00097aa:	0f 94 c0             	sete   al
c00097ad:	84 c0                	test   al,al
c00097af:	74 a7                	je     c0009758 <UnixFile::~UnixFile()+0x24>
c00097b1:	83 ec 0c             	sub    esp,0xc
c00097b4:	68 c0 d9 01 c0       	push   0xc001d9c0
c00097b9:	e8 29 6f 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	eb 95                	jmp    c0009758 <UnixFile::~UnixFile()+0x24>
c00097c3:	90                   	nop
c00097c4:	eb 01                	jmp    c00097c7 <UnixFile::~UnixFile()+0x93>
c00097c6:	90                   	nop
c00097c7:	90                   	nop
c00097c8:	83 c4 1c             	add    esp,0x1c
c00097cb:	c3                   	ret    

c00097cc <UnixFile::~UnixFile()>:
c00097cc:	83 ec 0c             	sub    esp,0xc
c00097cf:	83 ec 0c             	sub    esp,0xc
c00097d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d6:	e8 59 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c00097db:	83 c4 10             	add    esp,0x10
c00097de:	83 ec 08             	sub    esp,0x8
c00097e1:	6a 0c                	push   0xc
c00097e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097e7:	e8 06 13 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	83 c4 0c             	add    esp,0xc
c00097f2:	c3                   	ret    
c00097f3:	90                   	nop

c00097f4 <ReservedFilename::~ReservedFilename()>:
c00097f4:	83 ec 0c             	sub    esp,0xc
c00097f7:	ba 04 da 01 c0       	mov    edx,0xc001da04
c00097fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009800:	89 10                	mov    DWORD PTR [eax],edx
c0009802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009806:	83 ec 0c             	sub    esp,0xc
c0009809:	50                   	push   eax
c000980a:	e8 25 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	90                   	nop
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    
c0009817:	90                   	nop

c0009818 <ReservedFilename::~ReservedFilename()>:
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009822:	e8 cd ff ff ff       	call   c00097f4 <ReservedFilename::~ReservedFilename()>
c0009827:	83 c4 10             	add    esp,0x10
c000982a:	83 ec 08             	sub    esp,0x8
c000982d:	6a 0c                	push   0xc
c000982f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009833:	e8 ba 12 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0009838:	83 c4 10             	add    esp,0x10
c000983b:	83 c4 0c             	add    esp,0xc
c000983e:	c3                   	ret    

c000983f <getFromFileDescriptor(int)>:
c000983f:	53                   	push   ebx
c0009840:	83 ec 08             	sub    esp,0x8
c0009843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009847:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000984d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009853:	7f 2c                	jg     c0009881 <getFromFileDescriptor(int)+0x42>
c0009855:	83 ec 0c             	sub    esp,0xc
c0009858:	68 18 0a 02 c0       	push   0xc0020a18
c000985d:	e8 0a 2d 01 00       	call   c001c56c <LinkedList<UnixFile>::getFirstElement()>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	85 c0                	test   eax,eax
c0009867:	75 04                	jne    c000986d <getFromFileDescriptor(int)+0x2e>
c0009869:	31 c0                	xor    eax,eax
c000986b:	eb 6e                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c000986d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009870:	74 69                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c0009872:	52                   	push   edx
c0009873:	52                   	push   edx
c0009874:	50                   	push   eax
c0009875:	68 18 0a 02 c0       	push   0xc0020a18
c000987a:	e8 97 2d 01 00       	call   c001c616 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000987f:	eb e1                	jmp    c0009862 <getFromFileDescriptor(int)+0x23>
c0009881:	a1 0c 0a 02 c0       	mov    eax,ds:0xc0020a0c
c0009886:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000988c:	74 4d                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000988e:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c0009893:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009899:	74 40                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000989b:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c00098a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098a6:	74 33                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098a8:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c00098ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098b3:	74 26                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098bb:	83 f8 08             	cmp    eax,0x8
c00098be:	77 09                	ja     c00098c9 <getFromFileDescriptor(int)+0x8a>
c00098c0:	8b 04 85 e0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf620]
c00098c7:	eb 12                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c00098c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098cf:	83 fb 08             	cmp    ebx,0x8
c00098d2:	77 95                	ja     c0009869 <getFromFileDescriptor(int)+0x2a>
c00098d4:	8b 04 9d a0 09 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf660]
c00098db:	83 c4 08             	add    esp,0x8
c00098de:	5b                   	pop    ebx
c00098df:	c3                   	ret    

c00098e0 <__static_initialization_and_destruction_0(int, int)>:
c00098e0:	83 ec 0c             	sub    esp,0xc
c00098e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098e8:	75 34                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098f2:	75 2a                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	68 18 0a 02 c0       	push   0xc0020a18
c00098fc:	e8 55 2b 01 00       	call   c001c456 <LinkedList<UnixFile>::LinkedList()>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	83 ec 04             	sub    esp,0x4
c0009907:	68 b8 f6 01 c0       	push   0xc001f6b8
c000990c:	68 18 0a 02 c0       	push   0xc0020a18
c0009911:	68 54 c4 01 c0       	push   0xc001c454
c0009916:	e8 87 11 00 00       	call   c000aaa2 <__cxa_atexit>
c000991b:	83 c4 10             	add    esp,0x10
c000991e:	90                   	nop
c000991f:	83 c4 0c             	add    esp,0xc
c0009922:	c3                   	ret    

c0009923 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009923:	83 ec 0c             	sub    esp,0xc
c0009926:	83 ec 08             	sub    esp,0x8
c0009929:	68 ff ff 00 00       	push   0xffff
c000992e:	6a 01                	push   0x1
c0009930:	e8 ab ff ff ff       	call   c00098e0 <__static_initialization_and_destruction_0(int, int)>
c0009935:	83 c4 10             	add    esp,0x10
c0009938:	83 c4 0c             	add    esp,0xc
c000993b:	c3                   	ret    

c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000993c:	53                   	push   ebx
c000993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009941:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009945:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000994b:	89 c8                	mov    eax,ecx
c000994d:	d1 e8                	shr    eax,1
c000994f:	03 05 88 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f888
c0009955:	83 e1 01             	and    ecx,0x1
c0009958:	8a 10                	mov    dl,BYTE PTR [eax]
c000995a:	75 09                	jne    c0009965 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000995c:	83 e2 f0             	and    edx,0xfffffff0
c000995f:	09 da                	or     edx,ebx
c0009961:	88 10                	mov    BYTE PTR [eax],dl
c0009963:	5b                   	pop    ebx
c0009964:	c3                   	ret    
c0009965:	c1 e3 04             	shl    ebx,0x4
c0009968:	83 e2 0f             	and    edx,0xf
c000996b:	09 da                	or     edx,ebx
c000996d:	88 10                	mov    BYTE PTR [eax],dl
c000996f:	5b                   	pop    ebx
c0009970:	c3                   	ret    

c0009971 <Virt::getPageState(unsigned long)>:
c0009971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009975:	8b 0d 88 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f888
c000997b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009981:	89 d0                	mov    eax,edx
c0009983:	d1 e8                	shr    eax,1
c0009985:	83 e2 01             	and    edx,0x1
c0009988:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000998b:	75 04                	jne    c0009991 <Virt::getPageState(unsigned long)+0x20>
c000998d:	83 e0 0f             	and    eax,0xf
c0009990:	c3                   	ret    
c0009991:	c0 e8 04             	shr    al,0x4
c0009994:	c3                   	ret    

c0009995 <Virt::allocateKernelVirtualPages(int)>:
c0009995:	55                   	push   ebp
c0009996:	31 ed                	xor    ebp,ebp
c0009998:	57                   	push   edi
c0009999:	56                   	push   esi
c000999a:	53                   	push   ebx
c000999b:	31 db                	xor    ebx,ebx
c000999d:	83 ec 1c             	sub    esp,0x1c
c00099a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099a4:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c00099aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099af:	57                   	push   edi
c00099b0:	e8 bc ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099b5:	5a                   	pop    edx
c00099b6:	84 c0                	test   al,al
c00099b8:	75 3a                	jne    c00099f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099ba:	85 db                	test   ebx,ebx
c00099bc:	75 02                	jne    c00099c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099be:	89 fd                	mov    ebp,edi
c00099c0:	43                   	inc    ebx
c00099c1:	39 f3                	cmp    ebx,esi
c00099c3:	74 5a                	je     c0009a1f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099c5:	47                   	inc    edi
c00099c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099cc:	76 31                	jbe    c00099ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099ce:	c7 05 84 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f884,0xc8000
c00099d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099dd:	75 28                	jne    c0009a07 <Virt::allocateKernelVirtualPages(int)+0x72>
c00099df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099e9:	57                   	push   edi
c00099ea:	e8 82 ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099ef:	5a                   	pop    edx
c00099f0:	84 c0                	test   al,al
c00099f2:	74 c6                	je     c00099ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00099f4:	31 db                	xor    ebx,ebx
c00099f6:	47                   	inc    edi
c00099f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099fd:	77 cf                	ja     c00099ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00099ff:	89 3d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edi
c0009a05:	eb a8                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	68 18 da 01 c0       	push   0xc001da18
c0009a0f:	e8 d3 6c 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0009a14:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	eb 90                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a1f:	89 2d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,ebp
c0009a25:	4b                   	dec    ebx
c0009a26:	74 5f                	je     c0009a87 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a28:	85 f6                	test   esi,esi
c0009a2a:	74 3d                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a2c:	89 e8                	mov    eax,ebp
c0009a2e:	31 db                	xor    ebx,ebx
c0009a30:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a33:	eb 14                	jmp    c0009a49 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a35:	6a 01                	push   0x1
c0009a37:	43                   	inc    ebx
c0009a38:	50                   	push   eax
c0009a39:	e8 fe fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3e:	58                   	pop    eax
c0009a3f:	39 f3                	cmp    ebx,esi
c0009a41:	5a                   	pop    edx
c0009a42:	74 25                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a44:	a1 84 f8 01 c0       	mov    eax,ds:0xc001f884
c0009a49:	8d 50 01             	lea    edx,[eax+0x1]
c0009a4c:	85 db                	test   ebx,ebx
c0009a4e:	89 15 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edx
c0009a54:	74 20                	je     c0009a76 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a56:	39 df                	cmp    edi,ebx
c0009a58:	75 db                	jne    c0009a35 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a5a:	6a 03                	push   0x3
c0009a5c:	43                   	inc    ebx
c0009a5d:	50                   	push   eax
c0009a5e:	e8 d9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a63:	59                   	pop    ecx
c0009a64:	39 f3                	cmp    ebx,esi
c0009a66:	58                   	pop    eax
c0009a67:	75 db                	jne    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	89 e8                	mov    eax,ebp
c0009a6e:	5b                   	pop    ebx
c0009a6f:	c1 e0 0c             	shl    eax,0xc
c0009a72:	5e                   	pop    esi
c0009a73:	5f                   	pop    edi
c0009a74:	5d                   	pop    ebp
c0009a75:	c3                   	ret    
c0009a76:	6a 02                	push   0x2
c0009a78:	bb 01 00 00 00       	mov    ebx,0x1
c0009a7d:	50                   	push   eax
c0009a7e:	e8 b9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a83:	58                   	pop    eax
c0009a84:	5a                   	pop    edx
c0009a85:	eb bd                	jmp    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a87:	6a 04                	push   0x4
c0009a89:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a8c:	55                   	push   ebp
c0009a8d:	a3 84 f8 01 c0       	mov    ds:0xc001f884,eax
c0009a92:	e8 a5 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a97:	59                   	pop    ecx
c0009a98:	89 e8                	mov    eax,ebp
c0009a9a:	5b                   	pop    ebx
c0009a9b:	c1 e0 0c             	shl    eax,0xc
c0009a9e:	83 c4 1c             	add    esp,0x1c
c0009aa1:	5b                   	pop    ebx
c0009aa2:	5e                   	pop    esi
c0009aa3:	5f                   	pop    edi
c0009aa4:	5d                   	pop    ebp
c0009aa5:	c3                   	ret    

c0009aa6 <Virt::freeSwapfilePage(unsigned long)>:
c0009aa6:	53                   	push   ebx
c0009aa7:	8b 15 2c 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a2c
c0009aad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab1:	b8 01 00 00 00       	mov    eax,0x1
c0009ab6:	89 cb                	mov    ebx,ecx
c0009ab8:	d3 e0                	shl    eax,cl
c0009aba:	c1 eb 05             	shr    ebx,0x5
c0009abd:	f7 d0                	not    eax
c0009abf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ac2:	5b                   	pop    ebx
c0009ac3:	c3                   	ret    

c0009ac4 <Virt::swapIDToSector(unsigned long)>:
c0009ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac8:	0f af 05 8c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f88c
c0009acf:	03 05 94 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f894
c0009ad5:	c3                   	ret    

c0009ad6 <Virt::allocateSwapfilePage()>:
c0009ad6:	55                   	push   ebp
c0009ad7:	31 d2                	xor    edx,edx
c0009ad9:	57                   	push   edi
c0009ada:	56                   	push   esi
c0009adb:	53                   	push   ebx
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c0009ae5:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009aea:	f7 f1                	div    ecx
c0009aec:	39 0d 90 f8 01 c0    	cmp    DWORD PTR ds:0xc001f890,ecx
c0009af2:	72 2d                	jb     c0009b21 <Virt::allocateSwapfilePage()+0x4b>
c0009af4:	8b 35 2c 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a2c
c0009afa:	8b 16                	mov    edx,DWORD PTR [esi]
c0009afc:	f6 c2 01             	test   dl,0x1
c0009aff:	74 3c                	je     c0009b3d <Virt::allocateSwapfilePage()+0x67>
c0009b01:	31 c9                	xor    ecx,ecx
c0009b03:	bf 01 00 00 00       	mov    edi,0x1
c0009b08:	eb 12                	jmp    c0009b1c <Virt::allocateSwapfilePage()+0x46>
c0009b0a:	89 fd                	mov    ebp,edi
c0009b0c:	89 ca                	mov    edx,ecx
c0009b0e:	d3 e5                	shl    ebp,cl
c0009b10:	c1 ea 05             	shr    edx,0x5
c0009b13:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b16:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b18:	85 ea                	test   edx,ebp
c0009b1a:	74 2a                	je     c0009b46 <Virt::allocateSwapfilePage()+0x70>
c0009b1c:	41                   	inc    ecx
c0009b1d:	39 c8                	cmp    eax,ecx
c0009b1f:	77 e9                	ja     c0009b0a <Virt::allocateSwapfilePage()+0x34>
c0009b21:	83 ec 0c             	sub    esp,0xc
c0009b24:	68 7f db 01 c0       	push   0xc001db7f
c0009b29:	e8 b9 6b 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	31 c9                	xor    ecx,ecx
c0009b33:	83 c4 0c             	add    esp,0xc
c0009b36:	89 c8                	mov    eax,ecx
c0009b38:	5b                   	pop    ebx
c0009b39:	5e                   	pop    esi
c0009b3a:	5f                   	pop    edi
c0009b3b:	5d                   	pop    ebp
c0009b3c:	c3                   	ret    
c0009b3d:	89 f3                	mov    ebx,esi
c0009b3f:	bd 01 00 00 00       	mov    ebp,0x1
c0009b44:	31 c9                	xor    ecx,ecx
c0009b46:	09 ea                	or     edx,ebp
c0009b48:	89 c8                	mov    eax,ecx
c0009b4a:	89 13                	mov    DWORD PTR [ebx],edx
c0009b4c:	83 c4 0c             	add    esp,0xc
c0009b4f:	5b                   	pop    ebx
c0009b50:	5e                   	pop    esi
c0009b51:	5f                   	pop    edi
c0009b52:	5d                   	pop    ebp
c0009b53:	c3                   	ret    

c0009b54 <Virt::virtualMemorySetup()>:
c0009b54:	53                   	push   ebx
c0009b55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b5a:	6a 0f                	push   0xf
c0009b5c:	53                   	push   ebx
c0009b5d:	43                   	inc    ebx
c0009b5e:	e8 d9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b63:	58                   	pop    eax
c0009b64:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b6a:	5a                   	pop    edx
c0009b6b:	75 ed                	jne    c0009b5a <Virt::virtualMemorySetup()+0x6>
c0009b6d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b72:	6a 00                	push   0x0
c0009b74:	53                   	push   ebx
c0009b75:	43                   	inc    ebx
c0009b76:	e8 c1 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b7b:	59                   	pop    ecx
c0009b7c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b82:	58                   	pop    eax
c0009b83:	75 ed                	jne    c0009b72 <Virt::virtualMemorySetup()+0x1e>
c0009b85:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b8a:	6a 0f                	push   0xf
c0009b8c:	53                   	push   ebx
c0009b8d:	43                   	inc    ebx
c0009b8e:	e8 a9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b93:	58                   	pop    eax
c0009b94:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b9a:	5a                   	pop    edx
c0009b9b:	75 ed                	jne    c0009b8a <Virt::virtualMemorySetup()+0x36>
c0009b9d:	5b                   	pop    ebx
c0009b9e:	c3                   	ret    

c0009b9f <Virt::setupPageSwapping(int)>:
c0009b9f:	53                   	push   ebx
c0009ba0:	83 ec 0c             	sub    esp,0xc
c0009ba3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009ba7:	a1 a8 2e 02 c0       	mov    eax,ds:0xc0022ea8
c0009bac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bb4:	53                   	push   ebx
c0009bb5:	c1 e3 0b             	shl    ebx,0xb
c0009bb8:	68 96 db 01 c0       	push   0xc001db96
c0009bbd:	50                   	push   eax
c0009bbe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc1:	89 1d 90 f8 01 c0    	mov    DWORD PTR ds:0xc001f890,ebx
c0009bc7:	c6 05 98 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f898,0x43
c0009bce:	c1 eb 08             	shr    ebx,0x8
c0009bd1:	a3 94 f8 01 c0       	mov    ds:0xc001f894,eax
c0009bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bd9:	c7 05 8c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f88c,0x8
c0009be3:	e8 71 e2 ff ff       	call   c0007e59 <malloc>
c0009be8:	83 c4 0c             	add    esp,0xc
c0009beb:	89 c1                	mov    ecx,eax
c0009bed:	a3 2c 0a 02 c0       	mov    ds:0xc0020a2c,eax
c0009bf2:	31 d2                	xor    edx,edx
c0009bf4:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009bf9:	f7 35 8c f8 01 c0    	div    DWORD PTR ds:0xc001f88c
c0009bff:	c1 e8 05             	shr    eax,0x5
c0009c02:	50                   	push   eax
c0009c03:	6a 00                	push   0x0
c0009c05:	51                   	push   ecx
c0009c06:	e8 e5 68 ff ff       	call   c00004f0 <memset>
c0009c0b:	83 c4 18             	add    esp,0x18
c0009c0e:	5b                   	pop    ebx
c0009c0f:	c3                   	ret    

c0009c10 <VAS::VAS()>:
c0009c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2a:	a3 30 0a 02 c0       	mov    ds:0xc0020a30,eax
c0009c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c33:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c42:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c49:	90                   	nop
c0009c4a:	c3                   	ret    
c0009c4b:	90                   	nop

c0009c4c <VAS::VAS(VAS*)>:
c0009c4c:	83 ec 0c             	sub    esp,0xc
c0009c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 38 da 01 c0       	push   0xc001da38
c0009c6d:	e8 75 6a 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	90                   	nop
c0009c76:	83 c4 0c             	add    esp,0xc
c0009c79:	c3                   	ret    

c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c7e:	89 c2                	mov    edx,eax
c0009c80:	c1 e8 0a             	shr    eax,0xa
c0009c83:	c1 ea 16             	shr    edx,0x16
c0009c86:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c8b:	19 c9                	sbb    ecx,ecx
c0009c8d:	c1 e2 0c             	shl    edx,0xc
c0009c90:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c96:	25 fc 0f 00 00       	and    eax,0xffc
c0009c9b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009ca2:	01 d0                	add    eax,edx
c0009ca4:	c3                   	ret    
c0009ca5:	90                   	nop

c0009ca6 <VAS::getPageTableEntry(unsigned long)>:
c0009ca6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009caa:	89 ca                	mov    edx,ecx
c0009cac:	c1 e9 0a             	shr    ecx,0xa
c0009caf:	c1 ea 16             	shr    edx,0x16
c0009cb2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cb8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cbe:	c1 e0 0c             	shl    eax,0xc
c0009cc1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cc4:	c3                   	ret    

c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cc5:	57                   	push   edi
c0009cc6:	56                   	push   esi
c0009cc7:	be 01 00 00 00       	mov    esi,0x1
c0009ccc:	53                   	push   ebx
c0009ccd:	83 ec 10             	sub    esp,0x10
c0009cd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cd4:	c1 eb 0c             	shr    ebx,0xc
c0009cd7:	eb 3f                	jmp    c0009d18 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cd9:	83 ec 08             	sub    esp,0x8
c0009cdc:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0009ce1:	57                   	push   edi
c0009ce2:	50                   	push   eax
c0009ce3:	e8 be ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ced:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf1:	f6 c4 04             	test   ah,0x4
c0009cf4:	75 60                	jne    c0009d56 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cf6:	80 fa 04             	cmp    dl,0x4
c0009cf9:	74 79                	je     c0009d74 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cfb:	80 fa 02             	cmp    dl,0x2
c0009cfe:	0f 84 89 00 00 00    	je     c0009d8d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d04:	80 fa 03             	cmp    dl,0x3
c0009d07:	0f 84 ae 00 00 00    	je     c0009dbb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d0d:	fe ca                	dec    dl
c0009d0f:	0f 84 93 00 00 00    	je     c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d15:	43                   	inc    ebx
c0009d16:	31 f6                	xor    esi,esi
c0009d18:	53                   	push   ebx
c0009d19:	89 df                	mov    edi,ebx
c0009d1b:	e8 51 fc ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c0009d20:	c1 e7 0c             	shl    edi,0xc
c0009d23:	5a                   	pop    edx
c0009d24:	84 c0                	test   al,al
c0009d26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d2a:	75 ad                	jne    c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	68 ad db 01 c0       	push   0xc001dbad
c0009d34:	e8 ae 69 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0009d39:	5a                   	pop    edx
c0009d3a:	59                   	pop    ecx
c0009d3b:	57                   	push   edi
c0009d3c:	8b 3d 30 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a30
c0009d42:	57                   	push   edi
c0009d43:	e8 5e ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d51:	f6 c4 04             	test   ah,0x4
c0009d54:	74 bf                	je     c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d56:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d5f:	83 ec 0c             	sub    esp,0xc
c0009d62:	50                   	push   eax
c0009d63:	e8 5c e4 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d6f:	80 fa 04             	cmp    dl,0x4
c0009d72:	75 87                	jne    c0009cfb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d74:	89 f0                	mov    eax,esi
c0009d76:	84 c0                	test   al,al
c0009d78:	75 47                	jne    c0009dc1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d7a:	c7 44 24 20 5c da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da5c
c0009d82:	83 c4 10             	add    esp,0x10
c0009d85:	5b                   	pop    ebx
c0009d86:	5e                   	pop    esi
c0009d87:	5f                   	pop    edi
c0009d88:	e9 5a 69 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c0009d8d:	89 f0                	mov    eax,esi
c0009d8f:	84 c0                	test   al,al
c0009d91:	75 15                	jne    c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d93:	83 ec 0c             	sub    esp,0xc
c0009d96:	68 c9 db 01 c0       	push   0xc001dbc9
c0009d9b:	e8 47 69 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c0009da0:	83 c4 10             	add    esp,0x10
c0009da3:	e9 6d ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009da8:	83 ec 08             	sub    esp,0x8
c0009dab:	6a 00                	push   0x0
c0009dad:	53                   	push   ebx
c0009dae:	e8 89 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	e9 5a ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbb:	89 f0                	mov    eax,esi
c0009dbd:	84 c0                	test   al,al
c0009dbf:	75 15                	jne    c0009dd6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc1:	83 ec 08             	sub    esp,0x8
c0009dc4:	6a 00                	push   0x0
c0009dc6:	53                   	push   ebx
c0009dc7:	e8 70 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dcc:	83 c4 10             	add    esp,0x10
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	5b                   	pop    ebx
c0009dd3:	5e                   	pop    esi
c0009dd4:	5f                   	pop    edi
c0009dd5:	c3                   	ret    
c0009dd6:	c7 44 24 20 e5 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbe5
c0009dde:	83 c4 10             	add    esp,0x10
c0009de1:	5b                   	pop    ebx
c0009de2:	5e                   	pop    esi
c0009de3:	5f                   	pop    edi
c0009de4:	e9 fe 68 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c0009de9:	90                   	nop

c0009dea <VAS::freeAllocatedPages(unsigned long)>:
c0009dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009dee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009df2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009df6:	74 09                	je     c0009e01 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009df8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009dfc:	e9 c4 fe ff ff       	jmp    c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e01:	c7 44 24 04 80 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da80
c0009e09:	e9 da 0d 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>

c0009e0e <VAS::virtualToPhysical(unsigned long)>:
c0009e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e12:	50                   	push   eax
c0009e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e17:	52                   	push   edx
c0009e18:	e8 89 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e1d:	59                   	pop    ecx
c0009e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e20:	5a                   	pop    edx
c0009e21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e26:	c3                   	ret    
c0009e27:	90                   	nop

c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e28:	55                   	push   ebp
c0009e29:	57                   	push   edi
c0009e2a:	56                   	push   esi
c0009e2b:	53                   	push   ebx
c0009e2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e30:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e3c:	85 db                	test   ebx,ebx
c0009e3e:	7e 22                	jle    c0009e62 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e40:	c1 e3 0c             	shl    ebx,0xc
c0009e43:	01 f3                	add    ebx,esi
c0009e45:	56                   	push   esi
c0009e46:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e4c:	55                   	push   ebp
c0009e4d:	e8 54 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e52:	5a                   	pop    edx
c0009e53:	59                   	pop    ecx
c0009e54:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e56:	21 f9                	and    ecx,edi
c0009e58:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e5c:	39 f3                	cmp    ebx,esi
c0009e5e:	89 08                	mov    DWORD PTR [eax],ecx
c0009e60:	75 e3                	jne    c0009e45 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e62:	5b                   	pop    ebx
c0009e63:	5e                   	pop    esi
c0009e64:	5f                   	pop    edi
c0009e65:	5d                   	pop    ebp
c0009e66:	c3                   	ret    
c0009e67:	90                   	nop

c0009e68 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e68:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009e6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e73:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e7a:	75 01                	jne    c0009e7d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e7c:	c3                   	ret    
c0009e7d:	68 80 00 00 00       	push   0x80
c0009e82:	6a ff                	push   0xffffffff
c0009e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e88:	50                   	push   eax
c0009e89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e8d:	52                   	push   edx
c0009e8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e92:	51                   	push   ecx
c0009e93:	e8 90 ff ff ff       	call   c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>
c0009e98:	83 c4 14             	add    esp,0x14
c0009e9b:	c3                   	ret    

c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>:
c0009e9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eaf:	19 c0                	sbb    eax,eax
c0009eb1:	83 ca 03             	or     edx,0x3
c0009eb4:	83 e0 fc             	and    eax,0xfffffffc
c0009eb7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ebe:	0f 20 d8             	mov    eax,cr3
c0009ec1:	0f 22 d8             	mov    cr3,eax
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <VAS::~VAS()>:
c0009ec6:	83 ec 2c             	sub    esp,0x2c
c0009ec9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed1:	fa                   	cli    
c0009ed2:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0009ed7:	40                   	inc    eax
c0009ed8:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0009edd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ee7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009eed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef1:	6a 01                	push   0x1
c0009ef3:	50                   	push   eax
c0009ef4:	e8 a3 ff ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c0009ef9:	83 c4 0c             	add    esp,0xc
c0009efc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f04:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f0c:	0f 8f d4 00 00 00    	jg     c0009fe6 <VAS::~VAS()+0x120>
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f1d:	c1 e2 02             	shl    edx,0x2
c0009f20:	01 d0                	add    eax,edx
c0009f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f2c:	83 e0 01             	and    eax,0x1
c0009f2f:	0f 84 a8 00 00 00    	je     c0009fdd <VAS::~VAS()+0x117>
c0009f35:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f3d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f45:	7f 72                	jg     c0009fb9 <VAS::~VAS()+0xf3>
c0009f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4b:	c1 e0 0a             	shl    eax,0xa
c0009f4e:	89 c2                	mov    edx,eax
c0009f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c1 e0 0c             	shl    eax,0xc
c0009f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f5d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f71:	6a 01                	push   0x1
c0009f73:	50                   	push   eax
c0009f74:	e8 01 fd ff ff       	call   c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f79:	83 c4 0c             	add    esp,0xc
c0009f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f8e:	25 01 04 00 00       	and    eax,0x401
c0009f93:	3d 01 04 00 00       	cmp    eax,0x401
c0009f98:	75 19                	jne    c0009fb3 <VAS::~VAS()+0xed>
c0009f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa3:	83 ec 0c             	sub    esp,0xc
c0009fa6:	50                   	push   eax
c0009fa7:	e8 18 e2 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fac:	83 c4 10             	add    esp,0x10
c0009faf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fb3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fb7:	eb 84                	jmp    c0009f3d <VAS::~VAS()+0x77>
c0009fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fbd:	25 00 04 00 00       	and    eax,0x400
c0009fc2:	74 19                	je     c0009fdd <VAS::~VAS()+0x117>
c0009fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fcd:	83 ec 0c             	sub    esp,0xc
c0009fd0:	50                   	push   eax
c0009fd1:	e8 ee e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fd6:	83 c4 10             	add    esp,0x10
c0009fd9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fdd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe1:	e9 1e ff ff ff       	jmp    c0009f04 <VAS::~VAS()+0x3e>
c0009fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fed:	83 ec 0c             	sub    esp,0xc
c0009ff0:	50                   	push   eax
c0009ff1:	e8 cf fc ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ff6:	83 c4 10             	add    esp,0x10
c0009ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a000:	83 ec 0c             	sub    esp,0xc
c000a003:	50                   	push   eax
c000a004:	e8 bb e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a010:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a015:	48                   	dec    eax
c000a016:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a01b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a020:	85 c0                	test   eax,eax
c000a022:	75 01                	jne    c000a025 <VAS::~VAS()+0x15f>
c000a024:	fb                   	sti    
c000a025:	90                   	nop
c000a026:	83 c4 2c             	add    esp,0x2c
c000a029:	c3                   	ret    

c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a02a:	55                   	push   ebp
c000a02b:	57                   	push   edi
c000a02c:	56                   	push   esi
c000a02d:	53                   	push   ebx
c000a02e:	83 ec 1c             	sub    esp,0x1c
c000a031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a035:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a039:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a03f:	77 0b                	ja     c000a04c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a041:	0f 20 d8             	mov    eax,cr3
c000a044:	0f 20 d8             	mov    eax,cr3
c000a047:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a04a:	75 47                	jne    c000a093 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a050:	09 d8                	or     eax,ebx
c000a052:	a9 ff 0f 00 00       	test   eax,0xfff
c000a057:	75 57                	jne    c000a0b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a059:	89 de                	mov    esi,ebx
c000a05b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a05e:	c1 ee 16             	shr    esi,0x16
c000a061:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a068:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a06c:	74 54                	je     c000a0c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a06e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a072:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a078:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a07c:	c1 e6 0c             	shl    esi,0xc
c000a07f:	c1 eb 0a             	shr    ebx,0xa
c000a082:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a088:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a08b:	83 c4 1c             	add    esp,0x1c
c000a08e:	5b                   	pop    ebx
c000a08f:	5e                   	pop    esi
c000a090:	5f                   	pop    edi
c000a091:	5d                   	pop    ebp
c000a092:	c3                   	ret    
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 a4 da 01 c0       	push   0xc001daa4
c000a09b:	e8 48 0b 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a0a0:	83 c4 10             	add    esp,0x10
c000a0a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a7:	09 d8                	or     eax,ebx
c000a0a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0ae:	74 a9                	je     c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b0:	83 ec 0c             	sub    esp,0xc
c000a0b3:	68 0c db 01 c0       	push   0xc001db0c
c000a0b8:	e8 2a 66 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	eb 97                	jmp    c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0c6:	e8 5b e1 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a0cb:	83 ec 0c             	sub    esp,0xc
c000a0ce:	89 c5                	mov    ebp,eax
c000a0d0:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a0d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0da:	6a 01                	push   0x1
c000a0dc:	e8 b4 f8 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a0e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0e8:	6a 01                	push   0x1
c000a0ea:	50                   	push   eax
c000a0eb:	55                   	push   ebp
c000a0ec:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0f6:	51                   	push   ecx
c000a0f7:	e8 28 02 00 00       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	68 00 10 00 00       	push   0x1000
c000a104:	6a 00                	push   0x0
c000a106:	50                   	push   eax
c000a107:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a10b:	e8 e0 63 ff ff       	call   c00004f0 <memset>
c000a110:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a114:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a117:	e8 a9 fb ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a11c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a120:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a129:	e9 40 ff ff ff       	jmp    c000a06e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a12e <VAS::allocatePages(int, int)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a139:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a13e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a144:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a14a:	83 e0 01             	and    eax,0x1
c000a14d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a151:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a155:	0f 85 cc 00 00 00    	jne    c000a227 <VAS::allocatePages(int, int)+0xf9>
c000a15b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a15e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a162:	85 c0                	test   eax,eax
c000a164:	0f 84 a1 00 00 00    	je     c000a20b <VAS::allocatePages(int, int)+0xdd>
c000a16a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a16e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a172:	c1 e6 0c             	shl    esi,0xc
c000a175:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a179:	85 c0                	test   eax,eax
c000a17b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a17e:	7e 33                	jle    c000a1b3 <VAS::allocatePages(int, int)+0x85>
c000a180:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a184:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a188:	81 cd 00 04 00 00    	or     ebp,0x400
c000a18e:	e8 93 e0 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a193:	55                   	push   ebp
c000a194:	53                   	push   ebx
c000a195:	50                   	push   eax
c000a196:	57                   	push   edi
c000a197:	e8 8e fe ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a19c:	83 c4 10             	add    esp,0x10
c000a19f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1a4:	74 03                	je     c000a1a9 <VAS::allocatePages(int, int)+0x7b>
c000a1a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1af:	39 de                	cmp    esi,ebx
c000a1b1:	75 db                	jne    c000a18e <VAS::allocatePages(int, int)+0x60>
c000a1b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1b8:	75 12                	jne    c000a1cc <VAS::allocatePages(int, int)+0x9e>
c000a1ba:	0f 20 d8             	mov    eax,cr3
c000a1bd:	0f 22 d8             	mov    cr3,eax
c000a1c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c4:	83 c4 1c             	add    esp,0x1c
c000a1c7:	5b                   	pop    ebx
c000a1c8:	5e                   	pop    esi
c000a1c9:	5f                   	pop    edi
c000a1ca:	5d                   	pop    ebp
c000a1cb:	c3                   	ret    
c000a1cc:	c1 ee 0a             	shr    esi,0xa
c000a1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1d3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1d9:	c1 eb 0a             	shr    ebx,0xa
c000a1dc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1e8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1ee:	39 c3                	cmp    ebx,eax
c000a1f0:	77 ce                	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a1f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1fb:	39 d8                	cmp    eax,ebx
c000a1fd:	73 f3                	jae    c000a1f2 <VAS::allocatePages(int, int)+0xc4>
c000a1ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a203:	83 c4 1c             	add    esp,0x1c
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	5d                   	pop    ebp
c000a20a:	c3                   	ret    
c000a20b:	83 ec 0c             	sub    esp,0xc
c000a20e:	68 30 db 01 c0       	push   0xc001db30
c000a213:	e8 cf 64 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000a218:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a21b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	e9 43 ff ff ff       	jmp    c000a16a <VAS::allocatePages(int, int)+0x3c>
c000a227:	83 ec 0c             	sub    esp,0xc
c000a22a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a22e:	51                   	push   ecx
c000a22f:	e8 61 f7 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a240:	0f 87 9b 00 00 00    	ja     c000a2e1 <VAS::allocatePages(int, int)+0x1b3>
c000a246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a24a:	85 d2                	test   edx,edx
c000a24c:	7e 3c                	jle    c000a28a <VAS::allocatePages(int, int)+0x15c>
c000a24e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a252:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a256:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a25a:	c1 e5 0c             	shl    ebp,0xc
c000a25d:	81 ce 00 04 00 00    	or     esi,0x400
c000a263:	01 dd                	add    ebp,ebx
c000a265:	e8 bc df ff ff       	call   c0008226 <Phys::allocatePage()>
c000a26a:	56                   	push   esi
c000a26b:	53                   	push   ebx
c000a26c:	50                   	push   eax
c000a26d:	57                   	push   edi
c000a26e:	e8 b7 fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a27b:	74 03                	je     c000a280 <VAS::allocatePages(int, int)+0x152>
c000a27d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a280:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a286:	39 dd                	cmp    ebp,ebx
c000a288:	75 db                	jne    c000a265 <VAS::allocatePages(int, int)+0x137>
c000a28a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a28f:	0f 84 25 ff ff ff    	je     c000a1ba <VAS::allocatePages(int, int)+0x8c>
c000a295:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a299:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a29d:	89 d3                	mov    ebx,edx
c000a29f:	c1 e0 0c             	shl    eax,0xc
c000a2a2:	c1 eb 0a             	shr    ebx,0xa
c000a2a5:	01 d0                	add    eax,edx
c000a2a7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2ad:	c1 e8 0a             	shr    eax,0xa
c000a2b0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bb:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c0:	39 c3                	cmp    ebx,eax
c000a2c2:	0f 87 f8 fe ff ff    	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a2c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d1:	39 d8                	cmp    eax,ebx
c000a2d3:	73 f3                	jae    c000a2c8 <VAS::allocatePages(int, int)+0x19a>
c000a2d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d9:	83 c4 1c             	add    esp,0x1c
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	5d                   	pop    ebp
c000a2e0:	c3                   	ret    
c000a2e1:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a2e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ec:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2f3:	0f 84 4d ff ff ff    	je     c000a246 <VAS::allocatePages(int, int)+0x118>
c000a2f9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a301:	e9 40 ff ff ff       	jmp    c000a246 <VAS::allocatePages(int, int)+0x118>

c000a306 <VAS::setCPUSpecific(unsigned long)>:
c000a306:	83 ec 0c             	sub    esp,0xc
c000a309:	6a 05                	push   0x5
c000a30b:	68 00 00 40 c2       	push   0xc2400000
c000a310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a314:	50                   	push   eax
c000a315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a319:	52                   	push   edx
c000a31a:	e8 0b fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a31f:	83 c4 1c             	add    esp,0x1c
c000a322:	c3                   	ret    
c000a323:	90                   	nop

c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a324:	55                   	push   ebp
c000a325:	57                   	push   edi
c000a326:	56                   	push   esi
c000a327:	53                   	push   ebx
c000a328:	83 ec 1c             	sub    esp,0x1c
c000a32b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a330:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a334:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a33e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a344:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a348:	83 e0 01             	and    eax,0x1
c000a34b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a34f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a353:	85 c0                	test   eax,eax
c000a355:	7e 39                	jle    c000a390 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35b:	89 f3                	mov    ebx,esi
c000a35d:	c1 e0 0c             	shl    eax,0xc
c000a360:	01 f0                	add    eax,esi
c000a362:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a366:	55                   	push   ebp
c000a367:	53                   	push   ebx
c000a368:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a36c:	29 f0                	sub    eax,esi
c000a36e:	01 d8                	add    eax,ebx
c000a370:	50                   	push   eax
c000a371:	57                   	push   edi
c000a372:	e8 b3 fc ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a37f:	74 03                	je     c000a384 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a381:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a384:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a38e:	75 d6                	jne    c000a366 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a395:	75 10                	jne    c000a3a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a397:	0f 20 d8             	mov    eax,cr3
c000a39a:	0f 22 d8             	mov    cr3,eax
c000a39d:	83 c4 1c             	add    esp,0x1c
c000a3a0:	89 f0                	mov    eax,esi
c000a3a2:	5b                   	pop    ebx
c000a3a3:	5e                   	pop    esi
c000a3a4:	5f                   	pop    edi
c000a3a5:	5d                   	pop    ebp
c000a3a6:	c3                   	ret    
c000a3a7:	89 f3                	mov    ebx,esi
c000a3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3ad:	c1 eb 0a             	shr    ebx,0xa
c000a3b0:	c1 e0 0c             	shl    eax,0xc
c000a3b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3b9:	01 f0                	add    eax,esi
c000a3bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c1:	c1 e8 0a             	shr    eax,0xa
c000a3c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3c9:	2d 00 00 40 00       	sub    eax,0x400000
c000a3ce:	39 c3                	cmp    ebx,eax
c000a3d0:	77 cb                	ja     c000a39d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3db:	39 d8                	cmp    eax,ebx
c000a3dd:	73 f3                	jae    c000a3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3df:	83 c4 1c             	add    esp,0x1c
c000a3e2:	89 f0                	mov    eax,esi
c000a3e4:	5b                   	pop    ebx
c000a3e5:	5e                   	pop    esi
c000a3e6:	5f                   	pop    edi
c000a3e7:	5d                   	pop    ebp
c000a3e8:	c3                   	ret    
c000a3e9:	90                   	nop

c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3ea:	55                   	push   ebp
c000a3eb:	57                   	push   edi
c000a3ec:	56                   	push   esi
c000a3ed:	53                   	push   ebx
c000a3ee:	83 ec 1c             	sub    esp,0x1c
c000a3f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a3fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a401:	a9 ff 0f 00 00       	test   eax,0xfff
c000a406:	75 4a                	jne    c000a452 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a40c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a40f:	c1 eb 16             	shr    ebx,0x16
c000a412:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a419:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a41d:	74 4d                	je     c000a46c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a423:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a427:	c1 e8 0a             	shr    eax,0xa
c000a42a:	80 fa 01             	cmp    dl,0x1
c000a42d:	19 d2                	sbb    edx,edx
c000a42f:	c1 e3 0c             	shl    ebx,0xc
c000a432:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a436:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a43c:	25 fc 0f 00 00       	and    eax,0xffc
c000a441:	01 d8                	add    eax,ebx
c000a443:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a44a:	83 c4 1c             	add    esp,0x1c
c000a44d:	5b                   	pop    ebx
c000a44e:	5e                   	pop    esi
c000a44f:	5f                   	pop    edi
c000a450:	5d                   	pop    ebp
c000a451:	c3                   	ret    
c000a452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	68 5c db 01 c0       	push   0xc001db5c
c000a45e:	e8 84 62 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a46a:	eb 9c                	jmp    c000a408 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a46c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a470:	e8 b1 dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a475:	83 ec 0c             	sub    esp,0xc
c000a478:	89 c5                	mov    ebp,eax
c000a47a:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a480:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a484:	6a 01                	push   0x1
c000a486:	e8 0a f5 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a48b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a492:	6a 01                	push   0x1
c000a494:	50                   	push   eax
c000a495:	55                   	push   ebp
c000a496:	81 cd 07 04 00 00    	or     ebp,0x407
c000a49c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a0:	51                   	push   ecx
c000a4a1:	e8 7e fe ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4a6:	83 c4 1c             	add    esp,0x1c
c000a4a9:	68 00 10 00 00       	push   0x1000
c000a4ae:	6a 00                	push   0x0
c000a4b0:	50                   	push   eax
c000a4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4b5:	e8 36 60 ff ff       	call   c00004f0 <memset>
c000a4ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c1:	e8 ff f7 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4c6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4c9:	83 c4 10             	add    esp,0x10
c000a4cc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4d3:	e9 47 ff ff ff       	jmp    c000a41f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4d8 <VAS::VAS(bool)>:
c000a4d8:	53                   	push   ebx
c000a4d9:	83 ec 28             	sub    esp,0x28
c000a4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a502:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a505:	e8 1c dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a50a:	89 c2                	mov    edx,eax
c000a50c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a510:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a513:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000a519:	83 ec 0c             	sub    esp,0xc
c000a51c:	6a 01                	push   0x1
c000a51e:	e8 72 f4 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	89 c2                	mov    edx,eax
c000a528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a52f:	83 ec 0c             	sub    esp,0xc
c000a532:	6a 03                	push   0x3
c000a534:	6a 01                	push   0x1
c000a536:	52                   	push   edx
c000a537:	50                   	push   eax
c000a538:	53                   	push   ebx
c000a539:	e8 e6 fd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a53e:	83 c4 20             	add    esp,0x20
c000a541:	89 c2                	mov    edx,eax
c000a543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a547:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a54a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a552:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a55a:	7f 1c                	jg     c000a578 <VAS::VAS(bool)+0xa0>
c000a55c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a560:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a567:	c1 e2 02             	shl    edx,0x2
c000a56a:	01 d0                	add    eax,edx
c000a56c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a572:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a576:	eb da                	jmp    c000a552 <VAS::VAS(bool)+0x7a>
c000a578:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a580:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a588:	7f 7a                	jg     c000a604 <VAS::VAS(bool)+0x12c>
c000a58a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a58e:	2d 00 02 00 00       	sub    eax,0x200
c000a593:	c1 e0 0c             	shl    eax,0xc
c000a596:	83 c8 03             	or     eax,0x3
c000a599:	89 c2                	mov    edx,eax
c000a59b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a5a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5a6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5ac:	83 e0 10             	and    eax,0x10
c000a5af:	84 c0                	test   al,al
c000a5b1:	74 07                	je     c000a5ba <VAS::VAS(bool)+0xe2>
c000a5b3:	b8 00 01 00 00       	mov    eax,0x100
c000a5b8:	eb 05                	jmp    c000a5bf <VAS::VAS(bool)+0xe7>
c000a5ba:	b8 00 00 00 00       	mov    eax,0x0
c000a5bf:	09 d0                	or     eax,edx
c000a5c1:	89 c1                	mov    ecx,eax
c000a5c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5ce:	c1 e2 02             	shl    edx,0x2
c000a5d1:	01 d0                	add    eax,edx
c000a5d3:	89 ca                	mov    edx,ecx
c000a5d5:	89 10                	mov    DWORD PTR [eax],edx
c000a5d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5db:	2d 40 03 00 00       	sub    eax,0x340
c000a5e0:	83 f8 7f             	cmp    eax,0x7f
c000a5e3:	77 16                	ja     c000a5fb <VAS::VAS(bool)+0x123>
c000a5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f0:	c1 e2 02             	shl    edx,0x2
c000a5f3:	01 d0                	add    eax,edx
c000a5f5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a5ff:	e9 7c ff ff ff       	jmp    c000a580 <VAS::VAS(bool)+0xa8>
c000a604:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a609:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a60f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a615:	83 e0 10             	and    eax,0x10
c000a618:	84 c0                	test   al,al
c000a61a:	74 07                	je     c000a623 <VAS::VAS(bool)+0x14b>
c000a61c:	b8 03 41 00 00       	mov    eax,0x4103
c000a621:	eb 05                	jmp    c000a628 <VAS::VAS(bool)+0x150>
c000a623:	b8 03 40 00 00       	mov    eax,0x4003
c000a628:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a62c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a62f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a635:	89 02                	mov    DWORD PTR [edx],eax
c000a637:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a63c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a642:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a648:	83 ec 08             	sub    esp,0x8
c000a64b:	50                   	push   eax
c000a64c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a650:	e8 b1 fc ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c000a655:	83 c4 10             	add    esp,0x10
c000a658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a65c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a65f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a664:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a66a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a670:	83 e0 10             	and    eax,0x10
c000a673:	84 c0                	test   al,al
c000a675:	74 07                	je     c000a67e <VAS::VAS(bool)+0x1a6>
c000a677:	b8 00 01 00 00       	mov    eax,0x100
c000a67c:	eb 05                	jmp    c000a683 <VAS::VAS(bool)+0x1ab>
c000a67e:	b8 00 00 00 00       	mov    eax,0x0
c000a683:	09 c2                	or     edx,eax
c000a685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a689:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a68c:	05 fc 0f 00 00       	add    eax,0xffc
c000a691:	83 ca 03             	or     edx,0x3
c000a694:	89 10                	mov    DWORD PTR [eax],edx
c000a696:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a69b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a1:	83 ec 0c             	sub    esp,0xc
c000a6a4:	50                   	push   eax
c000a6a5:	e8 12 1c 00 00       	call   c000c2bc <Device::getName()>
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	68 ff db 01 c0       	push   0xc001dbff
c000a6b5:	50                   	push   eax
c000a6b6:	e8 45 60 ff ff       	call   c0000700 <strcmp>
c000a6bb:	83 c4 10             	add    esp,0x10
c000a6be:	85 c0                	test   eax,eax
c000a6c0:	0f 94 c0             	sete   al
c000a6c3:	84 c0                	test   al,al
c000a6c5:	0f 84 87 00 00 00    	je     c000a752 <VAS::VAS(bool)+0x27a>
c000a6cb:	fa                   	cli    
c000a6cc:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a6d1:	40                   	inc    eax
c000a6d2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a6d7:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6e2:	05 7c 09 00 00       	add    eax,0x97c
c000a6e7:	83 ec 0c             	sub    esp,0xc
c000a6ea:	50                   	push   eax
c000a6eb:	e8 66 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6f8:	89 c3                	mov    ebx,eax
c000a6fa:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a705:	05 7c 09 00 00       	add    eax,0x97c
c000a70a:	83 ec 0c             	sub    esp,0xc
c000a70d:	50                   	push   eax
c000a70e:	e8 43 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	83 ec 08             	sub    esp,0x8
c000a719:	50                   	push   eax
c000a71a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a71e:	e8 83 f5 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a723:	83 c4 10             	add    esp,0x10
c000a726:	8b 00                	mov    eax,DWORD PTR [eax]
c000a728:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a72d:	6a 11                	push   0x11
c000a72f:	53                   	push   ebx
c000a730:	50                   	push   eax
c000a731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a735:	e8 f0 f8 ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a73a:	83 c4 10             	add    esp,0x10
c000a73d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a742:	48                   	dec    eax
c000a743:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a748:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a74d:	85 c0                	test   eax,eax
c000a74f:	75 01                	jne    c000a752 <VAS::VAS(bool)+0x27a>
c000a751:	fb                   	sti    
c000a752:	90                   	nop
c000a753:	83 c4 28             	add    esp,0x28
c000a756:	5b                   	pop    ebx
c000a757:	c3                   	ret    

c000a758 <VAS::evict(unsigned long)>:
c000a758:	55                   	push   ebp
c000a759:	57                   	push   edi
c000a75a:	56                   	push   esi
c000a75b:	53                   	push   ebx
c000a75c:	83 ec 1c             	sub    esp,0x1c
c000a75f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a763:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a76b:	e8 66 f3 ff ff       	call   c0009ad6 <Virt::allocateSwapfilePage()>
c000a770:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c000a776:	89 c7                	mov    edi,eax
c000a778:	85 c9                	test   ecx,ecx
c000a77a:	7e 3e                	jle    c000a7ba <VAS::evict(unsigned long)+0x62>
c000a77c:	89 ee                	mov    esi,ebp
c000a77e:	31 db                	xor    ebx,ebx
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	57                   	push   edi
c000a784:	e8 3b f3 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a789:	89 34 24             	mov    DWORD PTR [esp],esi
c000a78c:	01 d8                	add    eax,ebx
c000a78e:	6a 01                	push   0x1
c000a790:	31 d2                	xor    edx,edx
c000a792:	43                   	inc    ebx
c000a793:	52                   	push   edx
c000a794:	81 c6 00 02 00 00    	add    esi,0x200
c000a79a:	50                   	push   eax
c000a79b:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a7a2:	8b 14 85 9c 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd264]
c000a7a9:	52                   	push   edx
c000a7aa:	e8 8d 2b 00 00       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c000a7af:	83 c4 20             	add    esp,0x20
c000a7b2:	39 1d 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,ebx
c000a7b8:	7f c6                	jg     c000a780 <VAS::evict(unsigned long)+0x28>
c000a7ba:	83 ec 08             	sub    esp,0x8
c000a7bd:	c1 e7 0b             	shl    edi,0xb
c000a7c0:	55                   	push   ebp
c000a7c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7c5:	50                   	push   eax
c000a7c6:	e8 db f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a7cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7cd:	89 d1                	mov    ecx,edx
c000a7cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7d5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7db:	09 cf                	or     edi,ecx
c000a7dd:	89 38                	mov    DWORD PTR [eax],edi
c000a7df:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7e2:	ff 05 28 0a 02 c0    	inc    DWORD PTR ds:0xc0020a28
c000a7e8:	e8 d7 d9 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a7ed:	0f 20 d8             	mov    eax,cr3
c000a7f0:	0f 22 d8             	mov    cr3,eax
c000a7f3:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c000a7f8:	c7 44 24 40 0d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc0d
c000a800:	8d 50 01             	lea    edx,[eax+0x1]
c000a803:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a807:	89 15 24 0a 02 c0    	mov    DWORD PTR ds:0xc0020a24,edx
c000a80d:	83 c4 2c             	add    esp,0x2c
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	5f                   	pop    edi
c000a813:	5d                   	pop    ebp
c000a814:	e9 cf 03 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000a819:	90                   	nop

c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a81a:	55                   	push   ebp
c000a81b:	57                   	push   edi
c000a81c:	56                   	push   esi
c000a81d:	53                   	push   ebx
c000a81e:	83 ec 14             	sub    esp,0x14
c000a821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a825:	53                   	push   ebx
c000a826:	68 1e dc 01 c0       	push   0xc001dc1e
c000a82b:	e8 b8 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a839:	74 21                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	53                   	push   ebx
c000a83f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a843:	57                   	push   edi
c000a844:	e8 5d f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	89 c6                	mov    esi,eax
c000a84e:	85 c0                	test   eax,eax
c000a850:	74 0a                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a852:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a854:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a85a:	74 0a                	je     c000a866 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	83 c4 0c             	add    esp,0xc
c000a861:	5b                   	pop    ebx
c000a862:	5e                   	pop    esi
c000a863:	5f                   	pop    edi
c000a864:	5d                   	pop    ebp
c000a865:	c3                   	ret    
c000a866:	e8 bb d9 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a86b:	c1 ed 0b             	shr    ebp,0xb
c000a86e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a870:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a876:	09 c2                	or     edx,eax
c000a878:	81 ca 01 08 00 00    	or     edx,0x801
c000a87e:	89 16                	mov    DWORD PTR [esi],edx
c000a880:	8b 35 8c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f88c
c000a886:	85 f6                	test   esi,esi
c000a888:	7e 3e                	jle    c000a8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a88a:	89 df                	mov    edi,ebx
c000a88c:	31 f6                	xor    esi,esi
c000a88e:	83 ec 0c             	sub    esp,0xc
c000a891:	55                   	push   ebp
c000a892:	e8 2d f2 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a897:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89a:	01 f0                	add    eax,esi
c000a89c:	6a 01                	push   0x1
c000a89e:	31 d2                	xor    edx,edx
c000a8a0:	46                   	inc    esi
c000a8a1:	52                   	push   edx
c000a8a2:	81 c7 00 02 00 00    	add    edi,0x200
c000a8a8:	50                   	push   eax
c000a8a9:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a8b0:	8b 0c 85 9c 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd264]
c000a8b7:	51                   	push   ecx
c000a8b8:	e8 13 2a 00 00       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8bd:	83 c4 20             	add    esp,0x20
c000a8c0:	39 35 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,esi
c000a8c6:	7f c6                	jg     c000a88e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8c8:	a1 28 0a 02 c0       	mov    eax,ds:0xc0020a28
c000a8cd:	48                   	dec    eax
c000a8ce:	52                   	push   edx
c000a8cf:	a3 28 0a 02 c0       	mov    ds:0xc0020a28,eax
c000a8d4:	50                   	push   eax
c000a8d5:	53                   	push   ebx
c000a8d6:	68 31 dc 01 c0       	push   0xc001dc31
c000a8db:	e8 08 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a8e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8e3:	e8 be f1 ff ff       	call   c0009aa6 <Virt::freeSwapfilePage(unsigned long)>
c000a8e8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	48                   	dec    eax
c000a8f1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	75 01                	jne    c000a8fb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8fa:	fb                   	sti    
c000a8fb:	0f 20 d8             	mov    eax,cr3
c000a8fe:	0f 22 d8             	mov    cr3,eax
c000a901:	b0 01                	mov    al,0x1
c000a903:	e9 56 ff ff ff       	jmp    c000a85e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a908 <VAS::scanForEviction()>:
c000a908:	57                   	push   edi
c000a909:	31 ff                	xor    edi,edi
c000a90b:	56                   	push   esi
c000a90c:	53                   	push   ebx
c000a90d:	83 ec 10             	sub    esp,0x10
c000a910:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a914:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a917:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a91d:	75 0e                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a91f:	89 da                	mov    edx,ebx
c000a921:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a924:	c1 ea 16             	shr    edx,0x16
c000a927:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a92b:	74 4e                	je     c000a97b <VAS::scanForEviction()+0x73>
c000a92d:	53                   	push   ebx
c000a92e:	56                   	push   esi
c000a92f:	e8 72 f3 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a934:	5a                   	pop    edx
c000a935:	8b 10                	mov    edx,DWORD PTR [eax]
c000a937:	59                   	pop    ecx
c000a938:	89 d1                	mov    ecx,edx
c000a93a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a940:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a946:	74 3e                	je     c000a986 <VAS::scanForEviction()+0x7e>
c000a948:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a94e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a954:	76 2b                	jbe    c000a981 <VAS::scanForEviction()+0x79>
c000a956:	47                   	inc    edi
c000a957:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a95e:	83 ff 03             	cmp    edi,0x3
c000a961:	74 32                	je     c000a995 <VAS::scanForEviction()+0x8d>
c000a963:	31 db                	xor    ebx,ebx
c000a965:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a96b:	75 c0                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a96d:	89 da                	mov    edx,ebx
c000a96f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a972:	c1 ea 16             	shr    edx,0x16
c000a975:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a979:	75 b2                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a97b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a981:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a984:	eb 91                	jmp    c000a917 <VAS::scanForEviction()+0xf>
c000a986:	f6 c2 20             	test   dl,0x20
c000a989:	74 13                	je     c000a99e <VAS::scanForEviction()+0x96>
c000a98b:	83 e2 df             	and    edx,0xffffffdf
c000a98e:	89 10                	mov    DWORD PTR [eax],edx
c000a990:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a993:	eb b3                	jmp    c000a948 <VAS::scanForEviction()+0x40>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	31 c0                	xor    eax,eax
c000a99a:	5b                   	pop    ebx
c000a99b:	5e                   	pop    esi
c000a99c:	5f                   	pop    edi
c000a99d:	c3                   	ret    
c000a99e:	83 ec 08             	sub    esp,0x8
c000a9a1:	89 d0                	mov    eax,edx
c000a9a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9ac:	53                   	push   ebx
c000a9ad:	68 46 dc 01 c0       	push   0xc001dc46
c000a9b2:	e8 31 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9b7:	58                   	pop    eax
c000a9b8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9bb:	5a                   	pop    edx
c000a9bc:	51                   	push   ecx
c000a9bd:	56                   	push   esi
c000a9be:	e8 95 fd ff ff       	call   c000a758 <VAS::evict(unsigned long)>
c000a9c3:	5b                   	pop    ebx
c000a9c4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9c7:	5f                   	pop    edi
c000a9c8:	50                   	push   eax
c000a9c9:	68 5a dc 01 c0       	push   0xc001dc5a
c000a9ce:	e8 15 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9da:	83 c4 10             	add    esp,0x10
c000a9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	5b                   	pop    ebx
c000a9e5:	5e                   	pop    esi
c000a9e6:	5f                   	pop    edi
c000a9e7:	c3                   	ret    

c000a9e8 <mapVASFirstTime>:
c000a9e8:	55                   	push   ebp
c000a9e9:	57                   	push   edi
c000a9ea:	56                   	push   esi
c000a9eb:	53                   	push   ebx
c000a9ec:	83 ec 0c             	sub    esp,0xc
c000a9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9f7:	4a                   	dec    edx
c000a9f8:	0f 84 8c 00 00 00    	je     c000aa8a <mapVASFirstTime+0xa2>
c000a9fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa01:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa04:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa09:	c1 e5 15             	shl    ebp,0x15
c000aa0c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa11:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa17:	29 eb                	sub    ebx,ebp
c000aa19:	29 ef                	sub    edi,ebp
c000aa1b:	e8 06 d8 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa20:	83 ec 0c             	sub    esp,0xc
c000aa23:	68 03 04 00 00       	push   0x403
c000aa28:	6a 01                	push   0x1
c000aa2a:	53                   	push   ebx
c000aa2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa31:	50                   	push   eax
c000aa32:	56                   	push   esi
c000aa33:	e8 ec f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa38:	83 c4 20             	add    esp,0x20
c000aa3b:	39 fb                	cmp    ebx,edi
c000aa3d:	75 dc                	jne    c000aa1b <mapVASFirstTime+0x33>
c000aa3f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa44:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa49:	29 eb                	sub    ebx,ebp
c000aa4b:	29 ef                	sub    edi,ebp
c000aa4d:	e8 d4 d7 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa52:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa56:	19 d2                	sbb    edx,edx
c000aa58:	83 ec 0c             	sub    esp,0xc
c000aa5b:	83 e2 04             	and    edx,0x4
c000aa5e:	81 c2 03 04 00 00    	add    edx,0x403
c000aa64:	52                   	push   edx
c000aa65:	6a 01                	push   0x1
c000aa67:	53                   	push   ebx
c000aa68:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa6e:	50                   	push   eax
c000aa6f:	56                   	push   esi
c000aa70:	e8 af f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa75:	83 c4 20             	add    esp,0x20
c000aa78:	39 df                	cmp    edi,ebx
c000aa7a:	75 d1                	jne    c000aa4d <mapVASFirstTime+0x65>
c000aa7c:	0f 20 d8             	mov    eax,cr3
c000aa7f:	0f 22 d8             	mov    cr3,eax
c000aa82:	83 c4 0c             	add    esp,0xc
c000aa85:	5b                   	pop    ebx
c000aa86:	5e                   	pop    esi
c000aa87:	5f                   	pop    edi
c000aa88:	5d                   	pop    ebp
c000aa89:	c3                   	ret    
c000aa8a:	83 ec 0c             	sub    esp,0xc
c000aa8d:	68 6d dc 01 c0       	push   0xc001dc6d
c000aa92:	e8 51 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	83 c4 0c             	add    esp,0xc
c000aa9d:	5b                   	pop    ebx
c000aa9e:	5e                   	pop    esi
c000aa9f:	5f                   	pop    edi
c000aaa0:	5d                   	pop    ebp
c000aaa1:	c3                   	ret    

c000aaa2 <__cxa_atexit>:
c000aaa2:	31 c0                	xor    eax,eax
c000aaa4:	c3                   	ret    

c000aaa5 <__cxa_finalize>:
c000aaa5:	c3                   	ret    

c000aaa6 <__stack_chk_fail>:
c000aaa6:	55                   	push   ebp
c000aaa7:	89 e5                	mov    ebp,esp
c000aaa9:	83 ec 10             	sub    esp,0x10
c000aaac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aaaf:	68 86 dc 01 c0       	push   0xc001dc86
c000aab4:	e8 2f 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aab9:	58                   	pop    eax
c000aaba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aabd:	5a                   	pop    edx
c000aabe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac1:	68 86 dc 01 c0       	push   0xc001dc86
c000aac6:	e8 1d 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aacb:	c7 04 24 8e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc8e
c000aad2:	e8 10 5c 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	c9                   	leave  
c000aadb:	c3                   	ret    

c000aadc <__cxa_pure_virtual>:
c000aadc:	83 ec 18             	sub    esp,0x18
c000aadf:	68 a6 dc 01 c0       	push   0xc001dca6
c000aae4:	e8 fe 5b 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000aae9:	83 c4 1c             	add    esp,0x1c
c000aaec:	c3                   	ret    

c000aaed <operator new[](unsigned long)>:
c000aaed:	e9 67 d3 ff ff       	jmp    c0007e59 <malloc>

c000aaf2 <operator delete(void*, unsigned long)>:
c000aaf2:	e9 82 d3 ff ff       	jmp    c0007e79 <rfree>

c000aaf7 <operator delete[](void*)>:
c000aaf7:	e9 7d d3 ff ff       	jmp    c0007e79 <rfree>

c000aafc <operator delete[](void*, unsigned long)>:
c000aafc:	e9 78 d3 ff ff       	jmp    c0007e79 <rfree>

c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab01:	55                   	push   ebp
c000ab02:	b9 04 00 00 00       	mov    ecx,0x4
c000ab07:	57                   	push   edi
c000ab08:	56                   	push   esi
c000ab09:	be bb d8 01 c0       	mov    esi,0xc001d8bb
c000ab0e:	53                   	push   ebx
c000ab0f:	83 ec 20             	sub    esp,0x20
c000ab12:	a1 ba d8 01 c0       	mov    eax,ds:0xc001d8ba
c000ab17:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab1b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab1f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab23:	a1 c7 d8 01 c0       	mov    eax,ds:0xc001d8c7
c000ab28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	fc                   	cld    
c000ab31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab33:	89 ee                	mov    esi,ebp
c000ab35:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab39:	eb 02                	jmp    c000ab3d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab3b:	89 c6                	mov    esi,eax
c000ab3d:	31 d2                	xor    edx,edx
c000ab3f:	41                   	inc    ecx
c000ab40:	89 f0                	mov    eax,esi
c000ab42:	f7 f3                	div    ebx
c000ab44:	39 de                	cmp    esi,ebx
c000ab46:	73 f3                	jae    c000ab3b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab48:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab4b:	eb 02                	jmp    c000ab4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab4d:	89 c5                	mov    ebp,eax
c000ab4f:	31 d2                	xor    edx,edx
c000ab51:	49                   	dec    ecx
c000ab52:	89 e8                	mov    eax,ebp
c000ab54:	f7 f3                	div    ebx
c000ab56:	39 dd                	cmp    ebp,ebx
c000ab58:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab5c:	88 11                	mov    BYTE PTR [ecx],dl
c000ab5e:	73 ed                	jae    c000ab4d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab64:	83 c4 20             	add    esp,0x20
c000ab67:	5b                   	pop    ebx
c000ab68:	5e                   	pop    esi
c000ab69:	5f                   	pop    edi
c000ab6a:	5d                   	pop    ebp
c000ab6b:	c3                   	ret    

c000ab6c <Dbg::logc(char)>:
c000ab6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab70:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000ab77:	75 12                	jne    c000ab8b <Dbg::logc(char)+0x1f>
c000ab79:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab7e:	ec                   	in     al,dx
c000ab7f:	a8 20                	test   al,0x20
c000ab81:	74 fb                	je     c000ab7e <Dbg::logc(char)+0x12>
c000ab83:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab88:	88 c8                	mov    al,cl
c000ab8a:	ee                   	out    dx,al
c000ab8b:	c3                   	ret    

c000ab8c <Dbg::logs(char*)>:
c000ab8c:	53                   	push   ebx
c000ab8d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab94:	84 c0                	test   al,al
c000ab96:	74 0f                	je     c000aba7 <Dbg::logs(char*)+0x1b>
c000ab98:	50                   	push   eax
c000ab99:	43                   	inc    ebx
c000ab9a:	e8 cd ff ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ab9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba2:	5a                   	pop    edx
c000aba3:	84 c0                	test   al,al
c000aba5:	75 f1                	jne    c000ab98 <Dbg::logs(char*)+0xc>
c000aba7:	5b                   	pop    ebx
c000aba8:	c3                   	ret    

c000aba9 <Dbg::logWriteInt(unsigned int)>:
c000aba9:	83 ec 10             	sub    esp,0x10
c000abac:	6a 0a                	push   0xa
c000abae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abb2:	50                   	push   eax
c000abb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abb7:	50                   	push   eax
c000abb8:	e8 44 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abbd:	50                   	push   eax
c000abbe:	e8 c9 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abc3:	83 c4 20             	add    esp,0x20
c000abc6:	c3                   	ret    

c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000abc7:	83 ec 10             	sub    esp,0x10
c000abca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abce:	50                   	push   eax
c000abcf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abd3:	50                   	push   eax
c000abd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abd8:	52                   	push   edx
c000abd9:	e8 23 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abde:	50                   	push   eax
c000abdf:	e8 a8 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abe4:	83 c4 20             	add    esp,0x20
c000abe7:	c3                   	ret    

c000abe8 <Dbg::kprintf(char const*, ...)>:
c000abe8:	55                   	push   ebp
c000abe9:	57                   	push   edi
c000abea:	56                   	push   esi
c000abeb:	53                   	push   ebx
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abf3:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000abfa:	74 08                	je     c000ac04 <Dbg::kprintf(char const*, ...)+0x1c>
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	5b                   	pop    ebx
c000ac00:	5e                   	pop    esi
c000ac01:	5f                   	pop    edi
c000ac02:	5d                   	pop    ebp
c000ac03:	c3                   	ret    
c000ac04:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac08:	31 ff                	xor    edi,edi
c000ac0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac11:	84 c0                	test   al,al
c000ac13:	74 e7                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac15:	8d 77 01             	lea    esi,[edi+0x1]
c000ac18:	3c 25                	cmp    al,0x25
c000ac1a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac1d:	75 47                	jne    c000ac66 <Dbg::kprintf(char const*, ...)+0x7e>
c000ac1f:	83 c7 02             	add    edi,0x2
c000ac22:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac25:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac28:	83 e8 25             	sub    eax,0x25
c000ac2b:	3c 53                	cmp    al,0x53
c000ac2d:	0f 87 d2 00 00 00    	ja     c000ad05 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac33:	25 ff 00 00 00       	and    eax,0xff
c000ac38:	ff 24 85 bc dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2344]
c000ac3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac43:	89 c8                	mov    eax,ecx
c000ac45:	83 c1 04             	add    ecx,0x4
c000ac48:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac4c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac4e:	55                   	push   ebp
c000ac4f:	e8 55 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000ac54:	58                   	pop    eax
c000ac55:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac58:	84 c0                	test   al,al
c000ac5a:	74 a0                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac5c:	8d 77 01             	lea    esi,[edi+0x1]
c000ac5f:	3c 25                	cmp    al,0x25
c000ac61:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac64:	74 b9                	je     c000ac1f <Dbg::kprintf(char const*, ...)+0x37>
c000ac66:	50                   	push   eax
c000ac67:	89 f7                	mov    edi,esi
c000ac69:	e8 fe fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ac6e:	89 ee                	mov    esi,ebp
c000ac70:	58                   	pop    eax
c000ac71:	eb e2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac77:	89 c8                	mov    eax,ecx
c000ac79:	83 c1 04             	add    ecx,0x4
c000ac7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac7e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac82:	50                   	push   eax
c000ac83:	e8 04 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000ac88:	58                   	pop    eax
c000ac89:	eb ca                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac8f:	89 d0                	mov    eax,edx
c000ac91:	83 c2 04             	add    edx,0x4
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac9a:	50                   	push   eax
c000ac9b:	e8 09 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000aca0:	58                   	pop    eax
c000aca1:	eb b2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000aca3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aca7:	89 d0                	mov    eax,edx
c000aca9:	83 c2 04             	add    edx,0x4
c000acac:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acaf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb3:	50                   	push   eax
c000acb4:	e8 b3 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acb9:	58                   	pop    eax
c000acba:	eb 99                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc0:	89 c8                	mov    eax,ecx
c000acc2:	83 c1 04             	add    ecx,0x4
c000acc5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acc9:	6a 10                	push   0x10
c000accb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000accd:	51                   	push   ecx
c000acce:	e8 f4 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acd3:	5d                   	pop    ebp
c000acd4:	58                   	pop    eax
c000acd5:	e9 7b ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acde:	89 d0                	mov    eax,edx
c000ace0:	83 c2 08             	add    edx,0x8
c000ace3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace7:	6a 10                	push   0x10
c000ace9:	8b 00                	mov    eax,DWORD PTR [eax]
c000aceb:	50                   	push   eax
c000acec:	e8 d6 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acf1:	58                   	pop    eax
c000acf2:	5a                   	pop    edx
c000acf3:	e9 5d ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acf8:	6a 25                	push   0x25
c000acfa:	e8 6d fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acff:	5a                   	pop    edx
c000ad00:	e9 50 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad05:	6a 25                	push   0x25
c000ad07:	e8 60 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad0c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad10:	50                   	push   eax
c000ad11:	e8 56 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad16:	5a                   	pop    edx
c000ad17:	59                   	pop    ecx
c000ad18:	e9 38 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad1d:	90                   	nop

c000ad1e <File::read(unsigned long long, void*, int*)>:
c000ad1e:	53                   	push   ebx
c000ad1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad2e:	3c 19                	cmp    al,0x19
c000ad30:	77 35                	ja     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad32:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad39:	85 c0                	test   eax,eax
c000ad3b:	74 2a                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 20                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad4b:	74 21                	je     c000ad6e <File::read(unsigned long long, void*, int*)+0x50>
c000ad4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad61:	5b                   	pop    ebx
c000ad62:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad65:	ff e0                	jmp    eax
c000ad67:	b8 0b 00 00 00       	mov    eax,0xb
c000ad6c:	eb 05                	jmp    c000ad73 <File::read(unsigned long long, void*, int*)+0x55>
c000ad6e:	b8 05 00 00 00       	mov    eax,0x5
c000ad73:	5b                   	pop    ebx
c000ad74:	c3                   	ret    
c000ad75:	90                   	nop

c000ad76 <File::write(unsigned long long, void*, int*)>:
c000ad76:	53                   	push   ebx
c000ad77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad86:	3c 19                	cmp    al,0x19
c000ad88:	77 35                	ja     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad8a:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad91:	85 c0                	test   eax,eax
c000ad93:	74 2a                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad95:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad9b:	85 c0                	test   eax,eax
c000ad9d:	74 20                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada3:	74 21                	je     c000adc6 <File::write(unsigned long long, void*, int*)+0x50>
c000ada5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ada7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adb9:	5b                   	pop    ebx
c000adba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adbd:	ff e0                	jmp    eax
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	eb 05                	jmp    c000adcb <File::write(unsigned long long, void*, int*)+0x55>
c000adc6:	b8 05 00 00 00       	mov    eax,0x5
c000adcb:	5b                   	pop    ebx
c000adcc:	c3                   	ret    
c000adcd:	90                   	nop

c000adce <Directory::read(unsigned long long, void*, int*)>:
c000adce:	53                   	push   ebx
c000adcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000add3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000add7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adde:	3c 19                	cmp    al,0x19
c000ade0:	77 35                	ja     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade2:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ade9:	85 c0                	test   eax,eax
c000adeb:	74 2a                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000aded:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adf3:	85 c0                	test   eax,eax
c000adf5:	74 20                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfb:	74 21                	je     c000ae1e <Directory::read(unsigned long long, void*, int*)+0x50>
c000adfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae03:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae11:	5b                   	pop    ebx
c000ae12:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae15:	ff e0                	jmp    eax
c000ae17:	b8 0b 00 00 00       	mov    eax,0xb
c000ae1c:	eb 05                	jmp    c000ae23 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae1e:	b8 05 00 00 00       	mov    eax,0x5
c000ae23:	5b                   	pop    ebx
c000ae24:	c3                   	ret    
c000ae25:	90                   	nop

c000ae26 <Directory::write(unsigned long long, void*, int*)>:
c000ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae31:	b8 0b 00 00 00       	mov    eax,0xb
c000ae36:	80 fa 19             	cmp    dl,0x19
c000ae39:	77 18                	ja     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3b:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000ae42:	85 d2                	test   edx,edx
c000ae44:	74 0d                	je     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae46:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae4d:	19 c0                	sbb    eax,eax
c000ae4f:	83 e0 0a             	and    eax,0xa
c000ae52:	40                   	inc    eax
c000ae53:	c3                   	ret    

c000ae54 <File::isAtty()>:
c000ae54:	31 c0                	xor    eax,eax
c000ae56:	c3                   	ret    
c000ae57:	90                   	nop

c000ae58 <Directory::isAtty()>:
c000ae58:	31 c0                	xor    eax,eax
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae5c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae61:	c3                   	ret    

c000ae62 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae62:	b8 0a 00 00 00       	mov    eax,0xa
c000ae67:	c3                   	ret    

c000ae68 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae68:	31 c0                	xor    eax,eax
c000ae6a:	31 d2                	xor    edx,edx
c000ae6c:	c3                   	ret    
c000ae6d:	90                   	nop

c000ae6e <File::~File()>:
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	89 10                	mov    DWORD PTR [eax],edx
c000ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	50                   	push   eax
c000ae84:	e8 ab e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	90                   	nop
c000ae8d:	83 c4 0c             	add    esp,0xc
c000ae90:	c3                   	ret    
c000ae91:	90                   	nop

c000ae92 <File::~File()>:
c000ae92:	83 ec 0c             	sub    esp,0xc
c000ae95:	83 ec 0c             	sub    esp,0xc
c000ae98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9c:	e8 cd ff ff ff       	call   c000ae6e <File::~File()>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	83 ec 08             	sub    esp,0x8
c000aea7:	68 14 01 00 00       	push   0x114
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 3d fc ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	83 c4 0c             	add    esp,0xc
c000aebb:	c3                   	ret    

c000aebc <Directory::~Directory()>:
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	89 10                	mov    DWORD PTR [eax],edx
c000aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	50                   	push   eax
c000aed2:	e8 5d e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	90                   	nop
c000aedb:	83 c4 0c             	add    esp,0xc
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Directory::~Directory()>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	83 ec 0c             	sub    esp,0xc
c000aee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeea:	e8 cd ff ff ff       	call   c000aebc <Directory::~Directory()>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	83 ec 08             	sub    esp,0x8
c000aef5:	68 14 01 00 00       	push   0x114
c000aefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aefe:	e8 ef fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 c4 0c             	add    esp,0xc
c000af09:	c3                   	ret    

c000af0a <Filesystem::Filesystem()>:
c000af0a:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af13:	89 10                	mov    DWORD PTR [eax],edx
c000af15:	8b 15 34 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a34
c000af1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af26:	a3 34 0a 02 c0       	mov    ds:0xc0020a34,eax
c000af2b:	90                   	nop
c000af2c:	c3                   	ret    
c000af2d:	90                   	nop

c000af2e <Filesystem::~Filesystem()>:
c000af2e:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af37:	89 10                	mov    DWORD PTR [eax],edx
c000af39:	90                   	nop
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Filesystem::~Filesystem()>:
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af43:	e8 e6 ff ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c000af48:	83 c4 04             	add    esp,0x4
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	6a 08                	push   0x8
c000af50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af54:	e8 99 fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af59:	83 c4 10             	add    esp,0x10
c000af5c:	83 c4 0c             	add    esp,0xc
c000af5f:	c3                   	ret    

c000af60 <Fs::getcwd(Process*, char*, int)>:
c000af60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af64:	31 c0                	xor    eax,eax
c000af66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af6d:	7d 15                	jge    c000af84 <Fs::getcwd(Process*, char*, int)+0x24>
c000af6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af73:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af7a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af7d:	84 c9                	test   cl,cl
c000af7f:	74 06                	je     c000af87 <Fs::getcwd(Process*, char*, int)+0x27>
c000af81:	40                   	inc    eax
c000af82:	eb e2                	jmp    c000af66 <Fs::getcwd(Process*, char*, int)+0x6>
c000af84:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af87:	31 c0                	xor    eax,eax
c000af89:	c3                   	ret    

c000af8a <Fs::initVFS()>:
c000af8a:	83 ec 18             	sub    esp,0x18
c000af8d:	6a 08                	push   0x8
c000af8f:	e8 c5 ce ff ff       	call   c0007e59 <malloc>
c000af94:	89 04 24             	mov    DWORD PTR [esp],eax
c000af97:	e8 54 c2 00 00       	call   c00171f0 <FAT::FAT()>
c000af9c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afa3:	e8 b1 ce ff ff       	call   c0007e59 <malloc>
c000afa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000afab:	e8 38 cf 00 00       	call   c0017ee8 <ISO9660::ISO9660()>
c000afb0:	83 c4 1c             	add    esp,0x1c
c000afb3:	c3                   	ret    

c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afb4:	55                   	push   ebp
c000afb5:	57                   	push   edi
c000afb6:	56                   	push   esi
c000afb7:	53                   	push   ebx
c000afb8:	81 ec 10 04 00 00    	sub    esp,0x410
c000afbe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afc5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afcc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afd3:	68 00 04 00 00       	push   0x400
c000afd8:	6a 00                	push   0x0
c000afda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afde:	56                   	push   esi
c000afdf:	e8 0c 55 ff ff       	call   c00004f0 <memset>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afeb:	75 0b                	jne    c000aff8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afed:	50                   	push   eax
c000afee:	50                   	push   eax
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	e8 2a 56 ff ff       	call   c0000620 <strcpy>
c000aff6:	eb 41                	jmp    c000b039 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aff8:	8a 07                	mov    al,BYTE PTR [edi]
c000affa:	3c 5c                	cmp    al,0x5c
c000affc:	74 04                	je     c000b002 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000affe:	3c 2f                	cmp    al,0x2f
c000b000:	75 18                	jne    c000b01a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b002:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b005:	3c 60                	cmp    al,0x60
c000b007:	7e 03                	jle    c000b00c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b009:	83 e8 20             	sub    eax,0x20
c000b00c:	88 04 24             	mov    BYTE PTR [esp],al
c000b00f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b016:	50                   	push   eax
c000b017:	50                   	push   eax
c000b018:	eb 18                	jmp    c000b032 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b01a:	50                   	push   eax
c000b01b:	50                   	push   eax
c000b01c:	55                   	push   ebp
c000b01d:	56                   	push   esi
c000b01e:	e8 fd 55 ff ff       	call   c0000620 <strcpy>
c000b023:	5a                   	pop    edx
c000b024:	59                   	pop    ecx
c000b025:	68 bf ea 01 c0       	push   0xc001eabf
c000b02a:	56                   	push   esi
c000b02b:	e8 b0 57 ff ff       	call   c00007e0 <strcat>
c000b030:	5d                   	pop    ebp
c000b031:	58                   	pop    eax
c000b032:	57                   	push   edi
c000b033:	56                   	push   esi
c000b034:	e8 a7 57 ff ff       	call   c00007e0 <strcat>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b03f:	3c 60                	cmp    al,0x60
c000b041:	7e 03                	jle    c000b046 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b043:	83 e8 20             	sub    eax,0x20
c000b046:	88 04 24             	mov    BYTE PTR [esp],al
c000b049:	88 03                	mov    BYTE PTR [ebx],al
c000b04b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b052:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b058:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b05c:	bf 03 00 00 00       	mov    edi,0x3
c000b061:	b8 03 00 00 00       	mov    eax,0x3
c000b066:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b069:	84 d2                	test   dl,dl
c000b06b:	0f 84 91 00 00 00    	je     c000b102 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b071:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b074:	80 fa 5c             	cmp    dl,0x5c
c000b077:	74 05                	je     c000b07e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b079:	80 fa 2f             	cmp    dl,0x2f
c000b07c:	75 12                	jne    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b07e:	89 c5                	mov    ebp,eax
c000b080:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b085:	74 09                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b087:	40                   	inc    eax
c000b088:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b08c:	89 cf                	mov    edi,ecx
c000b08e:	eb d6                	jmp    c000b066 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b090:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b095:	75 5b                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b097:	80 fa 2e             	cmp    dl,0x2e
c000b09a:	75 56                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a0:	74 19                	je     c000b0bb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0a7:	74 53                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0a9:	89 f9                	mov    ecx,edi
c000b0ab:	41                   	inc    ecx
c000b0ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0af:	80 fa 2f             	cmp    dl,0x2f
c000b0b2:	74 f7                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b4:	80 fa 5c             	cmp    dl,0x5c
c000b0b7:	74 f2                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b9:	eb d1                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c0:	74 3a                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0c2:	83 f8 03             	cmp    eax,0x3
c000b0c5:	74 c5                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0c7:	41                   	inc    ecx
c000b0c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0cb:	80 fa 2f             	cmp    dl,0x2f
c000b0ce:	74 f7                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d0:	80 fa 5c             	cmp    dl,0x5c
c000b0d3:	74 f2                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d5:	48                   	dec    eax
c000b0d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0da:	75 06                	jne    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e0:	eb f3                	jmp    c000b0d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0e6:	74 07                	je     c000b0ef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ec:	48                   	dec    eax
c000b0ed:	eb f3                	jmp    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0ef:	40                   	inc    eax
c000b0f0:	eb 9a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f2:	80 fa 2f             	cmp    dl,0x2f
c000b0f5:	74 95                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f7:	80 fa 5c             	cmp    dl,0x5c
c000b0fa:	74 90                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b0ff:	40                   	inc    eax
c000b100:	eb 8a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b102:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	53                   	push   ebx
c000b10a:	e8 51 54 ff ff       	call   c0000560 <strlen>
c000b10f:	83 c4 10             	add    esp,0x10
c000b112:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b117:	75 26                	jne    c000b13f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 3e 54 ff ff       	call   c0000560 <strlen>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b12a:	74 26                	je     c000b152 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	53                   	push   ebx
c000b130:	e8 2b 54 ff ff       	call   c0000560 <strlen>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b13d:	eb c7                	jmp    c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	53                   	push   ebx
c000b143:	e8 18 54 ff ff       	call   c0000560 <strlen>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b150:	74 c7                	je     c000b119 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b152:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b158:	5b                   	pop    ebx
c000b159:	5e                   	pop    esi
c000b15a:	5f                   	pop    edi
c000b15b:	5d                   	pop    ebp
c000b15c:	c3                   	ret    
c000b15d:	90                   	nop

c000b15e <File::File(char const*, Process*)>:
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b165:	83 ec 08             	sub    esp,0x8
c000b168:	6a 00                	push   0x0
c000b16a:	50                   	push   eax
c000b16b:	e8 e2 e3 ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17c:	89 10                	mov    DWORD PTR [eax],edx
c000b17e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b182:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18c:	83 c0 0d             	add    eax,0xd
c000b18f:	83 ec 04             	sub    esp,0x4
c000b192:	52                   	push   edx
c000b193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b197:	50                   	push   eax
c000b198:	e8 17 fe ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1a7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1c6:	25 ff 00 00 00       	and    eax,0xff
c000b1cb:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1d2:	85 c0                	test   eax,eax
c000b1d4:	74 42                	je     c000b218 <File::File(char const*, Process*)+0xba>
c000b1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e0:	25 ff 00 00 00       	and    eax,0xff
c000b1e5:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f2:	85 c0                	test   eax,eax
c000b1f4:	75 22                	jne    c000b218 <File::File(char const*, Process*)+0xba>
c000b1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b200:	25 ff 00 00 00       	and    eax,0xff
c000b205:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 f9 1f 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <File::open(FileOpenMode)>:
c000b21e:	53                   	push   ebx
c000b21f:	b8 0b 00 00 00       	mov    eax,0xb
c000b224:	83 ec 08             	sub    esp,0x8
c000b227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b232:	80 fa 19             	cmp    dl,0x19
c000b235:	77 40                	ja     c000b277 <File::open(FileOpenMode)+0x59>
c000b237:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b23e:	85 d2                	test   edx,edx
c000b240:	74 35                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b242:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b248:	85 d2                	test   edx,edx
c000b24a:	74 2b                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b24c:	b8 06 00 00 00       	mov    eax,0x6
c000b251:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b255:	75 20                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b257:	8b 02                	mov    eax,DWORD PTR [edx]
c000b259:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	51                   	push   ecx
c000b264:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b267:	51                   	push   ecx
c000b268:	52                   	push   edx
c000b269:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	85 c0                	test   eax,eax
c000b271:	75 04                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b273:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b277:	83 c4 08             	add    esp,0x8
c000b27a:	5b                   	pop    ebx
c000b27b:	c3                   	ret    

c000b27c <File::close()>:
c000b27c:	53                   	push   ebx
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	83 ec 08             	sub    esp,0x8
c000b285:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b289:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b290:	80 fa 19             	cmp    dl,0x19
c000b293:	77 41                	ja     c000b2d6 <File::close()+0x5a>
c000b295:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b29c:	85 db                	test   ebx,ebx
c000b29e:	74 36                	je     c000b2d6 <File::close()+0x5a>
c000b2a0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2a7:	74 2d                	je     c000b2d6 <File::close()+0x5a>
c000b2a9:	b8 05 00 00 00       	mov    eax,0x5
c000b2ae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2b2:	74 22                	je     c000b2d6 <File::close()+0x5a>
c000b2b4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2b8:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b2bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2c5:	53                   	push   ebx
c000b2c6:	53                   	push   ebx
c000b2c7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2cf:	50                   	push   eax
c000b2d0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	83 c4 08             	add    esp,0x8
c000b2d9:	5b                   	pop    ebx
c000b2da:	c3                   	ret    
c000b2db:	90                   	nop

c000b2dc <File::seek(unsigned long long)>:
c000b2dc:	56                   	push   esi
c000b2dd:	53                   	push   ebx
c000b2de:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e3:	51                   	push   ecx
c000b2e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2ec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2f7:	80 fa 19             	cmp    dl,0x19
c000b2fa:	77 31                	ja     c000b32d <File::seek(unsigned long long)+0x51>
c000b2fc:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b303:	85 d2                	test   edx,edx
c000b305:	74 26                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b307:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b30d:	85 d2                	test   edx,edx
c000b30f:	74 1c                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b311:	b8 05 00 00 00       	mov    eax,0x5
c000b316:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b31a:	74 11                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b31c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b31e:	53                   	push   ebx
c000b31f:	51                   	push   ecx
c000b320:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b326:	52                   	push   edx
c000b327:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	5a                   	pop    edx
c000b32e:	5b                   	pop    ebx
c000b32f:	5e                   	pop    esi
c000b330:	c3                   	ret    
c000b331:	90                   	nop

c000b332 <File::tell(unsigned long long*)>:
c000b332:	83 ec 0c             	sub    esp,0xc
c000b335:	b8 0b 00 00 00       	mov    eax,0xb
c000b33a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b33e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b345:	80 fa 19             	cmp    dl,0x19
c000b348:	77 34                	ja     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b34a:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b351:	85 d2                	test   edx,edx
c000b353:	74 29                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b355:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b35b:	85 d2                	test   edx,edx
c000b35d:	74 1f                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b35f:	b8 05 00 00 00       	mov    eax,0x5
c000b364:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b368:	74 14                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b36a:	50                   	push   eax
c000b36b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b36d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b371:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b377:	52                   	push   edx
c000b378:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	83 c4 0c             	add    esp,0xc
c000b381:	c3                   	ret    

c000b382 <File::rewind()>:
c000b382:	83 ec 10             	sub    esp,0x10
c000b385:	6a 00                	push   0x0
c000b387:	6a 00                	push   0x0
c000b389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b38d:	e8 4a ff ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c000b392:	83 c4 1c             	add    esp,0x1c
c000b395:	c3                   	ret    

c000b396 <File::unlink()>:
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	b8 0b 00 00 00       	mov    eax,0xb
c000b39e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a9:	80 f9 19             	cmp    cl,0x19
c000b3ac:	77 2f                	ja     c000b3dd <File::unlink()+0x47>
c000b3ae:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b3b5:	85 c9                	test   ecx,ecx
c000b3b7:	74 24                	je     c000b3dd <File::unlink()+0x47>
c000b3b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3bf:	85 c9                	test   ecx,ecx
c000b3c1:	74 1a                	je     c000b3dd <File::unlink()+0x47>
c000b3c3:	b8 06 00 00 00       	mov    eax,0x6
c000b3c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3cc:	75 0f                	jne    c000b3dd <File::unlink()+0x47>
c000b3ce:	83 c2 0d             	add    edx,0xd
c000b3d1:	50                   	push   eax
c000b3d2:	50                   	push   eax
c000b3d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d5:	52                   	push   edx
c000b3d6:	51                   	push   ecx
c000b3d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	83 c4 0c             	add    esp,0xc
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop

c000b3e2 <File::rename(char const*)>:
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3f5:	80 f9 19             	cmp    cl,0x19
c000b3f8:	77 32                	ja     c000b42c <File::rename(char const*)+0x4a>
c000b3fa:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b401:	85 c9                	test   ecx,ecx
c000b403:	74 27                	je     c000b42c <File::rename(char const*)+0x4a>
c000b405:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b40b:	85 c9                	test   ecx,ecx
c000b40d:	74 1d                	je     c000b42c <File::rename(char const*)+0x4a>
c000b40f:	b8 06 00 00 00       	mov    eax,0x6
c000b414:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b418:	75 12                	jne    c000b42c <File::rename(char const*)+0x4a>
c000b41a:	83 c2 0d             	add    edx,0xd
c000b41d:	50                   	push   eax
c000b41e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b424:	52                   	push   edx
c000b425:	51                   	push   ecx
c000b426:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	83 c4 0c             	add    esp,0xc
c000b42f:	c3                   	ret    

c000b430 <File::chfatattr(unsigned char, unsigned char)>:
c000b430:	57                   	push   edi
c000b431:	b8 0b 00 00 00       	mov    eax,0xb
c000b436:	56                   	push   esi
c000b437:	53                   	push   ebx
c000b438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b43c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b447:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b44b:	80 f9 19             	cmp    cl,0x19
c000b44e:	77 37                	ja     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b450:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b457:	85 c9                	test   ecx,ecx
c000b459:	74 2c                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b461:	85 c9                	test   ecx,ecx
c000b463:	74 22                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b465:	b8 06 00 00 00       	mov    eax,0x6
c000b46a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b46e:	75 17                	jne    c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b470:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b472:	89 f0                	mov    eax,esi
c000b474:	83 c2 0d             	add    edx,0xd
c000b477:	0f b6 f0             	movzx  esi,al
c000b47a:	0f b6 db             	movzx  ebx,bl
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	52                   	push   edx
c000b480:	51                   	push   ecx
c000b481:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	5b                   	pop    ebx
c000b488:	5e                   	pop    esi
c000b489:	5f                   	pop    edi
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <File::exists()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	31 c0                	xor    eax,eax
c000b491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b495:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b49c:	80 f9 19             	cmp    cl,0x19
c000b49f:	77 24                	ja     c000b4c5 <File::exists()+0x39>
c000b4a1:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4a8:	85 c9                	test   ecx,ecx
c000b4aa:	74 19                	je     c000b4c5 <File::exists()+0x39>
c000b4ac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4b2:	85 c9                	test   ecx,ecx
c000b4b4:	74 0f                	je     c000b4c5 <File::exists()+0x39>
c000b4b6:	83 c2 0d             	add    edx,0xd
c000b4b9:	50                   	push   eax
c000b4ba:	50                   	push   eax
c000b4bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4bd:	52                   	push   edx
c000b4be:	51                   	push   ecx
c000b4bf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	83 c4 0c             	add    esp,0xc
c000b4c8:	c3                   	ret    
c000b4c9:	90                   	nop

c000b4ca <File::stat(unsigned long long*, bool*)>:
c000b4ca:	56                   	push   esi
c000b4cb:	53                   	push   ebx
c000b4cc:	50                   	push   eax
c000b4cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4e5:	80 f9 19             	cmp    cl,0x19
c000b4e8:	77 3d                	ja     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ea:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4f1:	85 c9                	test   ecx,ecx
c000b4f3:	74 32                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4fb:	85 c9                	test   ecx,ecx
c000b4fd:	74 28                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b501:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b505:	74 13                	je     c000b51a <File::stat(unsigned long long*, bool*)+0x50>
c000b507:	83 ec 04             	sub    esp,0x4
c000b50a:	56                   	push   esi
c000b50b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b511:	51                   	push   ecx
c000b512:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b515:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b518:	eb 0a                	jmp    c000b524 <File::stat(unsigned long long*, bool*)+0x5a>
c000b51a:	53                   	push   ebx
c000b51b:	83 c2 0d             	add    edx,0xd
c000b51e:	56                   	push   esi
c000b51f:	52                   	push   edx
c000b520:	51                   	push   ecx
c000b521:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	5a                   	pop    edx
c000b528:	5b                   	pop    ebx
c000b529:	5e                   	pop    esi
c000b52a:	c3                   	ret    

c000b52b <Fs::setcwd(Process*, char*)>:
c000b52b:	55                   	push   ebp
c000b52c:	57                   	push   edi
c000b52d:	56                   	push   esi
c000b52e:	53                   	push   ebx
c000b52f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b535:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b53c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b542:	57                   	push   edi
c000b543:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b54a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b54e:	56                   	push   esi
c000b54f:	e8 60 fa ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b554:	89 34 24             	mov    DWORD PTR [esp],esi
c000b557:	e8 04 50 ff ff       	call   c0000560 <strlen>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	83 f8 02             	cmp    eax,0x2
c000b562:	77 15                	ja     c000b579 <Fs::setcwd(Process*, char*)+0x4e>
c000b564:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b569:	83 eb 41             	sub    ebx,0x41
c000b56c:	8b 04 9d a0 2e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd160]
c000b573:	85 c0                	test   eax,eax
c000b575:	75 1c                	jne    c000b593 <Fs::setcwd(Process*, char*)+0x68>
c000b577:	eb 2f                	jmp    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b579:	83 ec 0c             	sub    esp,0xc
c000b57c:	56                   	push   esi
c000b57d:	e8 de 4f ff ff       	call   c0000560 <strlen>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	83 f8 03             	cmp    eax,0x3
c000b588:	75 57                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b58a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b58f:	75 50                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b591:	eb d1                	jmp    c000b564 <Fs::setcwd(Process*, char*)+0x39>
c000b593:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b59a:	75 0c                	jne    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b59c:	83 ec 0c             	sub    esp,0xc
c000b59f:	50                   	push   eax
c000b5a0:	e8 69 1c 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	b8 03 00 00 00       	mov    eax,0x3
c000b5ad:	83 fb 19             	cmp    ebx,0x19
c000b5b0:	0f 87 c6 00 00 00    	ja     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5b6:	8b 14 9d a0 2e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd160]
c000b5bd:	b8 05 00 00 00       	mov    eax,0x5
c000b5c2:	85 d2                	test   edx,edx
c000b5c4:	0f 84 b2 00 00 00    	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5ca:	b8 06 00 00 00       	mov    eax,0x6
c000b5cf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5d6:	0f 85 92 00 00 00    	jne    c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b5dc:	e9 9b 00 00 00       	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5e1:	83 ec 0c             	sub    esp,0xc
c000b5e4:	68 14 01 00 00       	push   0x114
c000b5e9:	e8 6b c8 ff ff       	call   c0007e59 <malloc>
c000b5ee:	83 c4 0c             	add    esp,0xc
c000b5f1:	89 c3                	mov    ebx,eax
c000b5f3:	55                   	push   ebp
c000b5f4:	56                   	push   esi
c000b5f5:	50                   	push   eax
c000b5f6:	e8 63 fb ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000b5fb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b600:	83 c4 0c             	add    esp,0xc
c000b603:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b607:	50                   	push   eax
c000b608:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b60c:	50                   	push   eax
c000b60d:	53                   	push   ebx
c000b60e:	e8 b7 fe ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	83 f8 02             	cmp    eax,0x2
c000b619:	74 04                	je     c000b61f <Fs::setcwd(Process*, char*)+0xf4>
c000b61b:	85 c0                	test   eax,eax
c000b61d:	74 1c                	je     c000b63b <Fs::setcwd(Process*, char*)+0x110>
c000b61f:	b8 01 00 00 00       	mov    eax,0x1
c000b624:	85 db                	test   ebx,ebx
c000b626:	74 54                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b628:	83 ec 0c             	sub    esp,0xc
c000b62b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b62d:	53                   	push   ebx
c000b62e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	b8 01 00 00 00       	mov    eax,0x1
c000b639:	eb 41                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b63b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b640:	75 1c                	jne    c000b65e <Fs::setcwd(Process*, char*)+0x133>
c000b642:	b8 02 00 00 00       	mov    eax,0x2
c000b647:	85 db                	test   ebx,ebx
c000b649:	74 31                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b64b:	83 ec 0c             	sub    esp,0xc
c000b64e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b650:	53                   	push   ebx
c000b651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	b8 02 00 00 00       	mov    eax,0x2
c000b65c:	eb 1e                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b65e:	85 db                	test   ebx,ebx
c000b660:	74 0c                	je     c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b662:	83 ec 0c             	sub    esp,0xc
c000b665:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b667:	53                   	push   ebx
c000b668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66b:	83 c4 10             	add    esp,0x10
c000b66e:	50                   	push   eax
c000b66f:	50                   	push   eax
c000b670:	56                   	push   esi
c000b671:	57                   	push   edi
c000b672:	e8 a9 4f ff ff       	call   c0000620 <strcpy>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	31 c0                	xor    eax,eax
c000b67c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b682:	5b                   	pop    ebx
c000b683:	5e                   	pop    esi
c000b684:	5f                   	pop    edi
c000b685:	5d                   	pop    ebp
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <Directory::Directory(char const*, Process*)>:
c000b688:	83 ec 0c             	sub    esp,0xc
c000b68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68f:	83 ec 08             	sub    esp,0x8
c000b692:	6a 00                	push   0x0
c000b694:	50                   	push   eax
c000b695:	e8 b8 de ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b69a:	83 c4 10             	add    esp,0x10
c000b69d:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000b6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a6:	89 10                	mov    DWORD PTR [eax],edx
c000b6a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b6:	83 c0 0d             	add    eax,0xd
c000b6b9:	83 ec 04             	sub    esp,0x4
c000b6bc:	52                   	push   edx
c000b6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c1:	50                   	push   eax
c000b6c2:	e8 ed f8 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6c7:	83 c4 10             	add    esp,0x10
c000b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ce:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d1:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f0:	25 ff 00 00 00       	and    eax,0xff
c000b6f5:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b6fc:	85 c0                	test   eax,eax
c000b6fe:	74 42                	je     c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70a:	25 ff 00 00 00       	and    eax,0xff
c000b70f:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b716:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b71c:	85 c0                	test   eax,eax
c000b71e:	75 22                	jne    c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b72a:	25 ff 00 00 00       	and    eax,0xff
c000b72f:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	50                   	push   eax
c000b73a:	e8 cf 1a 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	90                   	nop
c000b743:	83 c4 0c             	add    esp,0xc
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Directory::open()>:
c000b748:	53                   	push   ebx
c000b749:	b8 0b 00 00 00       	mov    eax,0xb
c000b74e:	83 ec 08             	sub    esp,0x8
c000b751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b755:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b75c:	80 fa 19             	cmp    dl,0x19
c000b75f:	77 3d                	ja     c000b79e <Directory::open()+0x56>
c000b761:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b768:	85 d2                	test   edx,edx
c000b76a:	74 32                	je     c000b79e <Directory::open()+0x56>
c000b76c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b772:	85 d2                	test   edx,edx
c000b774:	74 28                	je     c000b79e <Directory::open()+0x56>
c000b776:	b8 06 00 00 00       	mov    eax,0x6
c000b77b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b77f:	75 1d                	jne    c000b79e <Directory::open()+0x56>
c000b781:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b787:	50                   	push   eax
c000b788:	8b 02                	mov    eax,DWORD PTR [edx]
c000b78a:	51                   	push   ecx
c000b78b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b78e:	51                   	push   ecx
c000b78f:	52                   	push   edx
c000b790:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	85 c0                	test   eax,eax
c000b798:	75 04                	jne    c000b79e <Directory::open()+0x56>
c000b79a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b79e:	83 c4 08             	add    esp,0x8
c000b7a1:	5b                   	pop    ebx
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Directory::close()>:
c000b7a4:	53                   	push   ebx
c000b7a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7aa:	83 ec 08             	sub    esp,0x8
c000b7ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7b8:	80 fa 19             	cmp    dl,0x19
c000b7bb:	77 41                	ja     c000b7fe <Directory::close()+0x5a>
c000b7bd:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b7c4:	85 db                	test   ebx,ebx
c000b7c6:	74 36                	je     c000b7fe <Directory::close()+0x5a>
c000b7c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7cf:	74 2d                	je     c000b7fe <Directory::close()+0x5a>
c000b7d1:	b8 05 00 00 00       	mov    eax,0x5
c000b7d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7da:	74 22                	je     c000b7fe <Directory::close()+0x5a>
c000b7dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e0:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b7e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7ed:	53                   	push   ebx
c000b7ee:	53                   	push   ebx
c000b7ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7f7:	50                   	push   eax
c000b7f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	83 c4 08             	add    esp,0x8
c000b801:	5b                   	pop    ebx
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Directory::unlink()>:
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	b8 0b 00 00 00       	mov    eax,0xb
c000b80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b817:	80 f9 19             	cmp    cl,0x19
c000b81a:	77 2f                	ja     c000b84b <Directory::unlink()+0x47>
c000b81c:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b823:	85 c9                	test   ecx,ecx
c000b825:	74 24                	je     c000b84b <Directory::unlink()+0x47>
c000b827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b82d:	85 c9                	test   ecx,ecx
c000b82f:	74 1a                	je     c000b84b <Directory::unlink()+0x47>
c000b831:	b8 06 00 00 00       	mov    eax,0x6
c000b836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83a:	75 0f                	jne    c000b84b <Directory::unlink()+0x47>
c000b83c:	83 c2 0d             	add    edx,0xd
c000b83f:	50                   	push   eax
c000b840:	50                   	push   eax
c000b841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b843:	52                   	push   edx
c000b844:	51                   	push   ecx
c000b845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Directory::rename(char const*)>:
c000b850:	83 ec 0c             	sub    esp,0xc
c000b853:	b8 0b 00 00 00       	mov    eax,0xb
c000b858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b863:	80 f9 19             	cmp    cl,0x19
c000b866:	77 32                	ja     c000b89a <Directory::rename(char const*)+0x4a>
c000b868:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b86f:	85 c9                	test   ecx,ecx
c000b871:	74 27                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b879:	85 c9                	test   ecx,ecx
c000b87b:	74 1d                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b87d:	b8 06 00 00 00       	mov    eax,0x6
c000b882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b886:	75 12                	jne    c000b89a <Directory::rename(char const*)+0x4a>
c000b888:	83 c2 0d             	add    edx,0xd
c000b88b:	50                   	push   eax
c000b88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	52                   	push   edx
c000b893:	51                   	push   ecx
c000b894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	c3                   	ret    

c000b89e <Directory::exists()>:
c000b89e:	83 ec 0c             	sub    esp,0xc
c000b8a1:	31 c0                	xor    eax,eax
c000b8a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8ae:	80 f9 19             	cmp    cl,0x19
c000b8b1:	77 24                	ja     c000b8d7 <Directory::exists()+0x39>
c000b8b3:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b8ba:	85 c9                	test   ecx,ecx
c000b8bc:	74 19                	je     c000b8d7 <Directory::exists()+0x39>
c000b8be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8c4:	85 c9                	test   ecx,ecx
c000b8c6:	74 0f                	je     c000b8d7 <Directory::exists()+0x39>
c000b8c8:	83 c2 0d             	add    edx,0xd
c000b8cb:	50                   	push   eax
c000b8cc:	50                   	push   eax
c000b8cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8cf:	52                   	push   edx
c000b8d0:	51                   	push   ecx
c000b8d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	83 c4 0c             	add    esp,0xc
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <Directory::read(dirent*)>:
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	b8 0b 00 00 00       	mov    eax,0xb
c000b8e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8ef:	80 fa 19             	cmp    dl,0x19
c000b8f2:	77 30                	ja     c000b924 <Directory::read(dirent*)+0x48>
c000b8f4:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b8fb:	85 d2                	test   edx,edx
c000b8fd:	74 25                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b8ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b906:	74 1c                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b90d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b911:	52                   	push   edx
c000b912:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b916:	6a 00                	push   0x0
c000b918:	68 10 01 00 00       	push   0x110
c000b91d:	51                   	push   ecx
c000b91e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b921:	83 c4 20             	add    esp,0x20
c000b924:	83 c4 1c             	add    esp,0x1c
c000b927:	c3                   	ret    

c000b928 <Directory::create()>:
c000b928:	83 ec 0c             	sub    esp,0xc
c000b92b:	b8 0b 00 00 00       	mov    eax,0xb
c000b930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b934:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93b:	80 f9 19             	cmp    cl,0x19
c000b93e:	77 2f                	ja     c000b96f <Directory::create()+0x47>
c000b940:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b947:	85 c9                	test   ecx,ecx
c000b949:	74 24                	je     c000b96f <Directory::create()+0x47>
c000b94b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b951:	85 c9                	test   ecx,ecx
c000b953:	74 1a                	je     c000b96f <Directory::create()+0x47>
c000b955:	b8 06 00 00 00       	mov    eax,0x6
c000b95a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b95e:	75 0f                	jne    c000b96f <Directory::create()+0x47>
c000b960:	83 c2 0d             	add    edx,0xd
c000b963:	50                   	push   eax
c000b964:	50                   	push   eax
c000b965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b967:	52                   	push   edx
c000b968:	51                   	push   ecx
c000b969:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b96c:	83 c4 10             	add    esp,0x10
c000b96f:	83 c4 0c             	add    esp,0xc
c000b972:	c3                   	ret    
c000b973:	90                   	nop

c000b974 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b974:	b8 0a 00 00 00       	mov    eax,0xa
c000b979:	c3                   	ret    
c000b97a:	66 90                	xchg   ax,ax

c000b97c <Bus::Bus(char const*)>:
c000b97c:	83 ec 0c             	sub    esp,0xc
c000b97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b983:	83 ec 08             	sub    esp,0x8
c000b986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b98a:	50                   	push   eax
c000b98b:	e8 30 08 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b99c:	89 10                	mov    DWORD PTR [eax],edx
c000b99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9ac:	90                   	nop
c000b9ad:	83 c4 0c             	add    esp,0xc
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop
c000b9b2:	66 90                	xchg   ax,ax

c000b9b4 <Bus::~Bus()>:
c000b9b4:	83 ec 0c             	sub    esp,0xc
c000b9b7:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c0:	89 10                	mov    DWORD PTR [eax],edx
c000b9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 5b 05 00 00       	call   c000bf2a <Device::~Device()>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	90                   	nop
c000b9d3:	83 c4 0c             	add    esp,0xc
c000b9d6:	c3                   	ret    
c000b9d7:	90                   	nop

c000b9d8 <Bus::~Bus()>:
c000b9d8:	83 ec 0c             	sub    esp,0xc
c000b9db:	83 ec 0c             	sub    esp,0xc
c000b9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e2:	e8 cd ff ff ff       	call   c000b9b4 <Bus::~Bus()>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	83 ec 08             	sub    esp,0x8
c000b9ed:	68 58 01 00 00       	push   0x158
c000b9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f6:	e8 f7 f0 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	83 c4 0c             	add    esp,0xc
c000ba01:	c3                   	ret    

c000ba02 <beepThread(void*)>:
c000ba02:	83 ec 0c             	sub    esp,0xc
c000ba05:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ba0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba0e:	48                   	dec    eax
c000ba0f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ba14:	75 01                	jne    c000ba17 <beepThread(void*)+0x15>
c000ba16:	fb                   	sti    
c000ba17:	83 ec 0c             	sub    esp,0xc
c000ba1a:	6b c2 0a             	imul   eax,edx,0xa
c000ba1d:	50                   	push   eax
c000ba1e:	e8 19 83 00 00       	call   c0013d3c <milliTenthSleep(unsigned int)>
c000ba23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba2a:	e8 55 9f 00 00       	call   c0015984 <HalMakeBeep(int)>
c000ba2f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba37:	83 c4 1c             	add    esp,0x1c
c000ba3a:	e9 f9 81 00 00       	jmp    c0013c38 <blockTask(TaskState)>

c000ba3f <Krnl::beep(int, int, bool)>:
c000ba3f:	56                   	push   esi
c000ba40:	53                   	push   ebx
c000ba41:	83 ec 10             	sub    esp,0x10
c000ba44:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba50:	e8 2f 9f 00 00       	call   c0015984 <HalMakeBeep(int)>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	89 f0                	mov    eax,esi
c000ba5a:	84 c0                	test   al,al
c000ba5c:	74 1e                	je     c000ba7c <Krnl::beep(int, int, bool)+0x3d>
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	6b db 0a             	imul   ebx,ebx,0xa
c000ba64:	53                   	push   ebx
c000ba65:	e8 d2 82 00 00       	call   c0013d3c <milliTenthSleep(unsigned int)>
c000ba6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba72:	83 c4 14             	add    esp,0x14
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	e9 08 9f 00 00       	jmp    c0015984 <HalMakeBeep(int)>
c000ba7c:	68 e6 00 00 00       	push   0xe6
c000ba81:	53                   	push   ebx
c000ba82:	68 02 ba 00 c0       	push   0xc000ba02
c000ba87:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000ba8d:	e8 8a 7d 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c000ba92:	83 c4 14             	add    esp,0x14
c000ba95:	5b                   	pop    ebx
c000ba96:	5e                   	pop    esi
c000ba97:	c3                   	ret    

c000ba98 <User::loadClockSettings(int)>:
c000ba98:	53                   	push   ebx
c000ba99:	83 ec 14             	sub    esp,0x14
c000ba9c:	68 14 01 00 00       	push   0x114
c000baa1:	e8 b3 c3 ff ff       	call   c0007e59 <malloc>
c000baa6:	83 c4 0c             	add    esp,0xc
c000baa9:	89 c3                	mov    ebx,eax
c000baab:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000bab1:	68 d8 de 01 c0       	push   0xc001ded8
c000bab6:	50                   	push   eax
c000bab7:	e8 a2 f6 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000babc:	58                   	pop    eax
c000babd:	5a                   	pop    edx
c000babe:	6a 01                	push   0x1
c000bac0:	53                   	push   ebx
c000bac1:	e8 58 f7 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000bac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bac9:	e8 ae f7 ff ff       	call   c000b27c <File::close()>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	85 db                	test   ebx,ebx
c000bad3:	74 0f                	je     c000bae4 <User::loadClockSettings(int)+0x4c>
c000bad5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000badb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bade:	83 c4 08             	add    esp,0x8
c000bae1:	5b                   	pop    ebx
c000bae2:	ff e0                	jmp    eax
c000bae4:	83 c4 08             	add    esp,0x8
c000bae7:	5b                   	pop    ebx
c000bae8:	c3                   	ret    
c000bae9:	90                   	nop

c000baea <Clock::Clock(char const*)>:
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf1:	83 ec 08             	sub    esp,0x8
c000baf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf8:	50                   	push   eax
c000baf9:	e8 c2 06 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000bafe:	83 c4 10             	add    esp,0x10
c000bb01:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0a:	89 10                	mov    DWORD PTR [eax],edx
c000bb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb10:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb1a:	90                   	nop
c000bb1b:	83 c4 0c             	add    esp,0xc
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <Clock::~Clock()>:
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2c:	89 10                	mov    DWORD PTR [eax],edx
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	50                   	push   eax
c000bb36:	e8 ef 03 00 00       	call   c000bf2a <Device::~Device()>
c000bb3b:	83 c4 10             	add    esp,0x10
c000bb3e:	90                   	nop
c000bb3f:	83 c4 0c             	add    esp,0xc
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Clock::~Clock()>:
c000bb44:	83 ec 0c             	sub    esp,0xc
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4e:	e8 cd ff ff ff       	call   c000bb20 <Clock::~Clock()>
c000bb53:	83 c4 10             	add    esp,0x10
c000bb56:	83 ec 08             	sub    esp,0x8
c000bb59:	68 58 01 00 00       	push   0x158
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 8b ef ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 c4 0c             	add    esp,0xc
c000bb6d:	c3                   	ret    

c000bb6e <Clock::timeInSecondsLocal()>:
c000bb6e:	53                   	push   ebx
c000bb6f:	83 ec 14             	sub    esp,0x14
c000bb72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb76:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb78:	50                   	push   eax
c000bb79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb7c:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bb83:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bb89:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb8f:	89 cb                	mov    ebx,ecx
c000bb91:	c1 fb 1f             	sar    ebx,0x1f
c000bb94:	01 c8                	add    eax,ecx
c000bb96:	11 da                	adc    edx,ebx
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	31 c9                	xor    ecx,ecx
c000bb9d:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bba4:	74 05                	je     c000bbab <Clock::timeInSecondsLocal()+0x3d>
c000bba6:	b9 08 07 00 00       	mov    ecx,0x708
c000bbab:	31 db                	xor    ebx,ebx
c000bbad:	01 c8                	add    eax,ecx
c000bbaf:	11 da                	adc    edx,ebx
c000bbb1:	83 c4 08             	add    esp,0x8
c000bbb4:	5b                   	pop    ebx
c000bbb5:	c3                   	ret    

c000bbb6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbb6:	57                   	push   edi
c000bbb7:	56                   	push   esi
c000bbb8:	53                   	push   ebx
c000bbb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbc7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbca:	0f b6 05 38 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020a38
c000bbd1:	03 05 3c 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a3c
c000bbd7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbdd:	99                   	cdq    
c000bbde:	29 c6                	sub    esi,eax
c000bbe0:	19 d7                	sbb    edi,edx
c000bbe2:	89 f0                	mov    eax,esi
c000bbe4:	89 fa                	mov    edx,edi
c000bbe6:	31 f6                	xor    esi,esi
c000bbe8:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bbef:	74 05                	je     c000bbf6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf1:	be 08 07 00 00       	mov    esi,0x708
c000bbf6:	31 ff                	xor    edi,edi
c000bbf8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bbfc:	29 f0                	sub    eax,esi
c000bbfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc02:	19 fa                	sbb    edx,edi
c000bc04:	89 d8                	mov    eax,ebx
c000bc06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0a:	5b                   	pop    ebx
c000bc0b:	5e                   	pop    esi
c000bc0c:	5f                   	pop    edi
c000bc0d:	ff e0                	jmp    eax

c000bc0f <datetimeToSeconds(datetime_t)>:
c000bc0f:	55                   	push   ebp
c000bc10:	57                   	push   edi
c000bc11:	56                   	push   esi
c000bc12:	53                   	push   ebx
c000bc13:	83 ec 14             	sub    esp,0x14
c000bc16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc1e:	89 d3                	mov    ebx,edx
c000bc20:	0f b6 c6             	movzx  eax,dh
c000bc23:	c1 eb 10             	shr    ebx,0x10
c000bc26:	48                   	dec    eax
c000bc27:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc30:	0f b6 f5             	movzx  esi,ch
c000bc33:	89 cf                	mov    edi,ecx
c000bc35:	6b f6 3c             	imul   esi,esi,0x3c
c000bc38:	c1 ef 10             	shr    edi,0x10
c000bc3b:	0f b6 c9             	movzx  ecx,cl
c000bc3e:	89 f8                	mov    eax,edi
c000bc40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc46:	0f b6 f8             	movzx  edi,al
c000bc49:	0f b6 d2             	movzx  edx,dl
c000bc4c:	01 fe                	add    esi,edi
c000bc4e:	01 f1                	add    ecx,esi
c000bc50:	0f b7 f3             	movzx  esi,bx
c000bc53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc57:	c1 f9 1f             	sar    ecx,0x1f
c000bc5a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc63:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc68:	8b 0c 8d 40 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20c0]
c000bc6f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc73:	76 29                	jbe    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc75:	f6 c3 03             	test   bl,0x3
c000bc78:	75 24                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc7a:	31 d2                	xor    edx,edx
c000bc7c:	bf 64 00 00 00       	mov    edi,0x64
c000bc81:	89 d8                	mov    eax,ebx
c000bc83:	66 f7 f7             	div    di
c000bc86:	66 85 d2             	test   dx,dx
c000bc89:	75 12                	jne    c000bc9d <datetimeToSeconds(datetime_t)+0x8e>
c000bc8b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc91:	bf 90 01 00 00       	mov    edi,0x190
c000bc96:	99                   	cdq    
c000bc97:	f7 ff                	idiv   edi
c000bc99:	85 d2                	test   edx,edx
c000bc9b:	75 01                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc9d:	41                   	inc    ecx
c000bc9e:	66 83 fb 46          	cmp    bx,0x46
c000bca2:	76 45                	jbe    c000bce9 <datetimeToSeconds(datetime_t)+0xda>
c000bca4:	bb 46 00 00 00       	mov    ebx,0x46
c000bca9:	bf 64 00 00 00       	mov    edi,0x64
c000bcae:	bd 90 01 00 00       	mov    ebp,0x190
c000bcb3:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcb8:	f6 c3 03             	test   bl,0x3
c000bcbb:	75 23                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bcbd:	89 d8                	mov    eax,ebx
c000bcbf:	99                   	cdq    
c000bcc0:	f7 ff                	idiv   edi
c000bcc2:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcc7:	85 d2                	test   edx,edx
c000bcc9:	75 15                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd1:	99                   	cdq    
c000bcd2:	f7 fd                	idiv   ebp
c000bcd4:	31 c0                	xor    eax,eax
c000bcd6:	85 d2                	test   edx,edx
c000bcd8:	0f 94 c0             	sete   al
c000bcdb:	05 6d 01 00 00       	add    eax,0x16d
c000bce0:	01 c1                	add    ecx,eax
c000bce2:	43                   	inc    ebx
c000bce3:	39 f3                	cmp    ebx,esi
c000bce5:	7c cc                	jl     c000bcb3 <datetimeToSeconds(datetime_t)+0xa4>
c000bce7:	eb 3b                	jmp    c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bce9:	74 39                	je     c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bceb:	b8 45 00 00 00       	mov    eax,0x45
c000bcf0:	89 c2                	mov    edx,eax
c000bcf2:	83 e2 03             	and    edx,0x3
c000bcf5:	39 f0                	cmp    eax,esi
c000bcf7:	7e 13                	jle    c000bd0c <datetimeToSeconds(datetime_t)+0xfd>
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	0f 94 c2             	sete   dl
c000bcfe:	48                   	dec    eax
c000bcff:	0f b6 d2             	movzx  edx,dl
c000bd02:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd08:	29 d1                	sub    ecx,edx
c000bd0a:	eb e4                	jmp    c000bcf0 <datetimeToSeconds(datetime_t)+0xe1>
c000bd0c:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd11:	85 d2                	test   edx,edx
c000bd13:	75 0d                	jne    c000bd22 <datetimeToSeconds(datetime_t)+0x113>
c000bd15:	31 c0                	xor    eax,eax
c000bd17:	66 85 db             	test   bx,bx
c000bd1a:	0f 95 c0             	setne  al
c000bd1d:	05 6d 01 00 00       	add    eax,0x16d
c000bd22:	29 c1                	sub    ecx,eax
c000bd24:	b8 80 51 01 00       	mov    eax,0x15180
c000bd29:	f7 e9                	imul   ecx
c000bd2b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd2f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd33:	83 c4 14             	add    esp,0x14
c000bd36:	5b                   	pop    ebx
c000bd37:	5e                   	pop    esi
c000bd38:	5f                   	pop    edi
c000bd39:	5d                   	pop    ebp
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd3c:	57                   	push   edi
c000bd3d:	56                   	push   esi
c000bd3e:	53                   	push   ebx
c000bd3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd43:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd45:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd50:	e8 ba fe ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c000bd55:	59                   	pop    ecx
c000bd56:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bd5d:	5b                   	pop    ebx
c000bd5e:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bd64:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd6a:	89 cb                	mov    ebx,ecx
c000bd6c:	c1 fb 1f             	sar    ebx,0x1f
c000bd6f:	29 c8                	sub    eax,ecx
c000bd71:	19 da                	sbb    edx,ebx
c000bd73:	31 c9                	xor    ecx,ecx
c000bd75:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bd7c:	74 05                	je     c000bd83 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd7e:	b9 08 07 00 00       	mov    ecx,0x708
c000bd83:	31 db                	xor    ebx,ebx
c000bd85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd89:	29 c8                	sub    eax,ecx
c000bd8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd8f:	19 da                	sbb    edx,ebx
c000bd91:	89 f8                	mov    eax,edi
c000bd93:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd97:	5b                   	pop    ebx
c000bd98:	5e                   	pop    esi
c000bd99:	5f                   	pop    edi
c000bd9a:	ff e0                	jmp    eax

c000bd9c <secondsToDatetime(unsigned long long)>:
c000bd9c:	55                   	push   ebp
c000bd9d:	57                   	push   edi
c000bd9e:	56                   	push   esi
c000bd9f:	53                   	push   ebx
c000bda0:	83 ec 1c             	sub    esp,0x1c
c000bda3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bda7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdaf:	6a 00                	push   0x0
c000bdb1:	68 80 51 01 00       	push   0x15180
c000bdb6:	55                   	push   ebp
c000bdb7:	57                   	push   edi
c000bdb8:	e8 f3 03 01 00       	call   c001c1b0 <__udivdi3>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdca:	6a 00                	push   0x0
c000bdcc:	68 80 51 01 00       	push   0x15180
c000bdd1:	55                   	push   ebp
c000bdd2:	57                   	push   edi
c000bdd3:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdd8:	e8 d3 04 01 00       	call   c001c2b0 <__umoddi3>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	99                   	cdq    
c000bde1:	f7 ff                	idiv   edi
c000bde3:	bf 3c 00 00 00       	mov    edi,0x3c
c000bde8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdeb:	89 d0                	mov    eax,edx
c000bded:	99                   	cdq    
c000bdee:	f7 ff                	idiv   edi
c000bdf0:	85 db                	test   ebx,ebx
c000bdf2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdf5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdf8:	79 11                	jns    c000be0b <secondsToDatetime(unsigned long long)+0x6f>
c000bdfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdfe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be04:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be09:	eb 07                	jmp    c000be12 <secondsToDatetime(unsigned long long)+0x76>
c000be0b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be10:	89 d8                	mov    eax,ebx
c000be12:	bf b4 05 00 00       	mov    edi,0x5b4
c000be17:	99                   	cdq    
c000be18:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be1d:	f7 f9                	idiv   ecx
c000be1f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be28:	31 d2                	xor    edx,edx
c000be2a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be32:	01 c3                	add    ebx,eax
c000be34:	89 d8                	mov    eax,ebx
c000be36:	f7 f1                	div    ecx
c000be38:	31 d2                	xor    edx,edx
c000be3a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be3d:	89 d8                	mov    eax,ebx
c000be3f:	f7 f7                	div    edi
c000be41:	31 d2                	xor    edx,edx
c000be43:	29 c1                	sub    ecx,eax
c000be45:	89 d8                	mov    eax,ebx
c000be47:	f7 f5                	div    ebp
c000be49:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be4e:	29 c1                	sub    ecx,eax
c000be50:	31 d2                	xor    edx,edx
c000be52:	89 c8                	mov    eax,ecx
c000be54:	f7 f5                	div    ebp
c000be56:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be5f:	31 d2                	xor    edx,edx
c000be61:	89 c8                	mov    eax,ecx
c000be63:	f7 f5                	div    ebp
c000be65:	31 d2                	xor    edx,edx
c000be67:	01 c3                	add    ebx,eax
c000be69:	89 c8                	mov    eax,ecx
c000be6b:	f7 f7                	div    edi
c000be6d:	bf 99 00 00 00       	mov    edi,0x99
c000be72:	29 c3                	sub    ebx,eax
c000be74:	31 d2                	xor    edx,edx
c000be76:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be7e:	29 c3                	sub    ebx,eax
c000be80:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be83:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be86:	bb 05 00 00 00       	mov    ebx,0x5
c000be8b:	83 c1 02             	add    ecx,0x2
c000be8e:	89 c8                	mov    eax,ecx
c000be90:	f7 f7                	div    edi
c000be92:	31 d2                	xor    edx,edx
c000be94:	89 c7                	mov    edi,eax
c000be96:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000be9c:	83 c0 02             	add    eax,0x2
c000be9f:	f7 f3                	div    ebx
c000bea1:	89 eb                	mov    ebx,ebp
c000bea3:	29 c3                	sub    ebx,eax
c000bea5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beab:	88 1e                	mov    BYTE PTR [esi],bl
c000bead:	19 c0                	sbb    eax,eax
c000beaf:	31 d2                	xor    edx,edx
c000beb1:	83 e0 0c             	and    eax,0xc
c000beb4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000beb8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec4:	83 f9 01             	cmp    ecx,0x1
c000bec7:	0f 96 c2             	setbe  dl
c000beca:	41                   	inc    ecx
c000becb:	01 d0                	add    eax,edx
c000becd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bed4:	83 c4 1c             	add    esp,0x1c
c000bed7:	89 f0                	mov    eax,esi
c000bed9:	5b                   	pop    ebx
c000beda:	5e                   	pop    esi
c000bedb:	5f                   	pop    edi
c000bedc:	5d                   	pop    ebp
c000bedd:	c2 04 00             	ret    0x4

c000bee0 <Clock::timeInDatetimeLocal()>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 14             	sub    esp,0x14
c000bee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000beec:	e8 7d fc ff ff       	call   c000bb6e <Clock::timeInSecondsLocal()>
c000bef1:	83 c4 0c             	add    esp,0xc
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	53                   	push   ebx
c000bef7:	e8 a0 fe ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c000befc:	89 d8                	mov    eax,ebx
c000befe:	83 c4 14             	add    esp,0x14
c000bf01:	5b                   	pop    ebx
c000bf02:	c2 04 00             	ret    0x4
c000bf05:	90                   	nop

c000bf06 <Device::hibernate()>:
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <Device::wake()>:
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop

c000bf0a <Device::detect()>:
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <Device::disableLegacy()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Device::powerSaving(PowerSavingLevel)>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <DriverlessDevice::close(int, int, void*)>:
c000bf10:	31 c0                	xor    eax,eax
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <DriverlessDevice::detect()>:
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <DriverlessDevice::open(int, int, void*)>:
c000bf16:	83 ec 18             	sub    esp,0x18
c000bf19:	68 70 df 01 c0       	push   0xc001df70
c000bf1e:	e8 c4 47 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000bf23:	83 c8 ff             	or     eax,0xffffffff
c000bf26:	83 c4 1c             	add    esp,0x1c
c000bf29:	c3                   	ret    

c000bf2a <Device::~Device()>:
c000bf2a:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000bf2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf33:	89 10                	mov    DWORD PTR [eax],edx
c000bf35:	90                   	nop
c000bf36:	c3                   	ret    
c000bf37:	90                   	nop

c000bf38 <Device::~Device()>:
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf3f:	e8 e6 ff ff ff       	call   c000bf2a <Device::~Device()>
c000bf44:	83 c4 04             	add    esp,0x4
c000bf47:	83 ec 08             	sub    esp,0x8
c000bf4a:	68 58 01 00 00       	push   0x158
c000bf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf53:	e8 9a eb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	83 c4 0c             	add    esp,0xc
c000bf5e:	c3                   	ret    
c000bf5f:	90                   	nop

c000bf60 <Device::findAndLoadDriver()>:
c000bf60:	c7 44 24 04 8e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df8e
c000bf68:	e9 7b ec ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000bf6d:	90                   	nop

c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf6e:	57                   	push   edi
c000bf6f:	b9 09 00 00 00       	mov    ecx,0x9
c000bf74:	56                   	push   esi
c000bf75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf79:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf7d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf87:	81 c7 18 01 00 00    	add    edi,0x118
c000bf8d:	fc                   	cld    
c000bf8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf90:	5e                   	pop    esi
c000bf91:	5f                   	pop    edi
c000bf92:	c3                   	ret    
c000bf93:	90                   	nop

c000bf94 <Device::preOpenACPI(void*, char*, char*)>:
c000bf94:	57                   	push   edi
c000bf95:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf9a:	56                   	push   esi
c000bf9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfb3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfbf:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfc4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd0:	5e                   	pop    esi
c000bfd1:	5f                   	pop    edi
c000bfd2:	c3                   	ret    
c000bfd3:	90                   	nop

c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd4:	53                   	push   ebx
c000bfd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfe5:	0f b6 c0             	movzx  eax,al
c000bfe8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bfec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bff4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bff8:	5b                   	pop    ebx
c000bff9:	e9 a6 05 00 00       	jmp    c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bffe <Device::getParent()>:
c000bffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c002:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c008:	c3                   	ret    
c000c009:	90                   	nop

c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c00a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c00e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c012:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c017:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c01b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c01f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c023:	e9 e8 06 00 00       	jmp    c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c028 <Device::addChild(Device*)>:
c000c028:	53                   	push   ebx
c000c029:	83 ec 08             	sub    esp,0x8
c000c02c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c034:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c03a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c040:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c042:	85 d2                	test   edx,edx
c000c044:	74 04                	je     c000c04a <Device::addChild(Device*)+0x22>
c000c046:	89 d3                	mov    ebx,edx
c000c048:	eb f6                	jmp    c000c040 <Device::addChild(Device*)+0x18>
c000c04a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c04d:	83 ec 0c             	sub    esp,0xc
c000c050:	6a 08                	push   0x8
c000c052:	e8 02 be ff ff       	call   c0007e59 <malloc>
c000c057:	89 03                	mov    DWORD PTR [ebx],eax
c000c059:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c05f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c066:	83 c4 18             	add    esp,0x18
c000c069:	5b                   	pop    ebx
c000c06a:	c3                   	ret    
c000c06b:	90                   	nop

c000c06c <Device::removeAllChildren()>:
c000c06c:	56                   	push   esi
c000c06d:	53                   	push   ebx
c000c06e:	52                   	push   edx
c000c06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c073:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c079:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c07c:	74 17                	je     c000c095 <Device::removeAllChildren()+0x29>
c000c07e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c081:	85 c0                	test   eax,eax
c000c083:	74 0c                	je     c000c091 <Device::removeAllChildren()+0x25>
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	8b 10                	mov    edx,DWORD PTR [eax]
c000c08a:	50                   	push   eax
c000c08b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c08e:	83 c4 10             	add    esp,0x10
c000c091:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c093:	eb e4                	jmp    c000c079 <Device::removeAllChildren()+0xd>
c000c095:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0ae:	58                   	pop    eax
c000c0af:	5b                   	pop    ebx
c000c0b0:	5e                   	pop    esi
c000c0b1:	c3                   	ret    

c000c0b2 <Device::hibernateAll()>:
c000c0b2:	53                   	push   ebx
c000c0b3:	83 ec 14             	sub    esp,0x14
c000c0b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0bc:	53                   	push   ebx
c000c0bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0cc:	74 0f                	je     c000c0dd <Device::hibernateAll()+0x2b>
c000c0ce:	83 ec 0c             	sub    esp,0xc
c000c0d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d4:	e8 d9 ff ff ff       	call   c000c0b2 <Device::hibernateAll()>
c000c0d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0db:	eb e9                	jmp    c000c0c6 <Device::hibernateAll()+0x14>
c000c0dd:	83 c4 08             	add    esp,0x8
c000c0e0:	5b                   	pop    ebx
c000c0e1:	c3                   	ret    

c000c0e2 <Device::wakeAll()>:
c000c0e2:	53                   	push   ebx
c000c0e3:	83 ec 14             	sub    esp,0x14
c000c0e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0ec:	53                   	push   ebx
c000c0ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0f6:	83 c4 10             	add    esp,0x10
c000c0f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0fc:	74 0f                	je     c000c10d <Device::wakeAll()+0x2b>
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c104:	e8 d9 ff ff ff       	call   c000c0e2 <Device::wakeAll()>
c000c109:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10b:	eb e9                	jmp    c000c0f6 <Device::wakeAll()+0x14>
c000c10d:	83 c4 08             	add    esp,0x8
c000c110:	5b                   	pop    ebx
c000c111:	c3                   	ret    

c000c112 <Device::detectAll()>:
c000c112:	53                   	push   ebx
c000c113:	83 ec 14             	sub    esp,0x14
c000c116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c11c:	53                   	push   ebx
c000c11d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c120:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c12c:	74 0f                	je     c000c13d <Device::detectAll()+0x2b>
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c134:	e8 d9 ff ff ff       	call   c000c112 <Device::detectAll()>
c000c139:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13b:	eb e9                	jmp    c000c126 <Device::detectAll()+0x14>
c000c13d:	83 c4 08             	add    esp,0x8
c000c140:	5b                   	pop    ebx
c000c141:	c3                   	ret    

c000c142 <Device::disableLegacyAll()>:
c000c142:	c3                   	ret    
c000c143:	90                   	nop

c000c144 <Device::loadDriversForAll()>:
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <Device::closeAll()>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 08             	sub    esp,0x8
c000c14a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c14e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c150:	6a 00                	push   0x0
c000c152:	6a 00                	push   0x0
c000c154:	6a 00                	push   0x0
c000c156:	53                   	push   ebx
c000c157:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c15a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c166:	74 0f                	je     c000c177 <Device::closeAll()+0x31>
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c16e:	e8 d3 ff ff ff       	call   c000c146 <Device::closeAll()>
c000c173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c175:	eb e9                	jmp    c000c160 <Device::closeAll()+0x1a>
c000c177:	83 c4 08             	add    esp,0x8
c000c17a:	5b                   	pop    ebx
c000c17b:	c3                   	ret    

c000c17c <Device::powerSavingAll(PowerSavingLevel)>:
c000c17c:	56                   	push   esi
c000c17d:	53                   	push   ebx
c000c17e:	83 ec 0c             	sub    esp,0xc
c000c181:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c185:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c189:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18b:	56                   	push   esi
c000c18c:	53                   	push   ebx
c000c18d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c190:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c19c:	74 0f                	je     c000c1ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c19e:	52                   	push   edx
c000c19f:	52                   	push   edx
c000c1a0:	56                   	push   esi
c000c1a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a4:	e8 d3 ff ff ff       	call   c000c17c <Device::powerSavingAll(PowerSavingLevel)>
c000c1a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1ab:	eb e9                	jmp    c000c196 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1ad:	58                   	pop    eax
c000c1ae:	5b                   	pop    ebx
c000c1af:	5e                   	pop    esi
c000c1b0:	c3                   	ret    
c000c1b1:	90                   	nop

c000c1b2 <Device::setName(char const*)>:
c000c1b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1ba:	e9 61 44 ff ff       	jmp    c0000620 <strcpy>
c000c1bf:	90                   	nop

c000c1c0 <Device::Device(char const*)>:
c000c1c0:	83 ec 1c             	sub    esp,0x1c
c000c1c3:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000c1c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cc:	89 10                	mov    DWORD PTR [eax],edx
c000c1ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c206:	83 ec 08             	sub    esp,0x8
c000c209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c211:	e8 9c ff ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c221:	83 ec 0c             	sub    esp,0xc
c000c224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c228:	e8 2c bc ff ff       	call   c0007e59 <malloc>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c236:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c23d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c241:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c251:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c261:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c277:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c282:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c290:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2b6:	90                   	nop
c000c2b7:	83 c4 1c             	add    esp,0x1c
c000c2ba:	c3                   	ret    
c000c2bb:	90                   	nop

c000c2bc <Device::getName()>:
c000c2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c0:	05 d0 00 00 00       	add    eax,0xd0
c000c2c5:	c3                   	ret    

c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2c6:	83 ec 0c             	sub    esp,0xc
c000c2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2cd:	83 ec 08             	sub    esp,0x8
c000c2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d4:	50                   	push   eax
c000c2d5:	e8 e6 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c2da:	83 c4 10             	add    esp,0x10
c000c2dd:	ba fc df 01 c0       	mov    edx,0xc001dffc
c000c2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e6:	89 10                	mov    DWORD PTR [eax],edx
c000c2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2f6:	90                   	nop
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	c3                   	ret    
c000c2fb:	90                   	nop

c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c2fc:	57                   	push   edi
c000c2fd:	56                   	push   esi
c000c2fe:	53                   	push   ebx
c000c2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c303:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c307:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c311:	75 0c                	jne    c000c31f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c313:	52                   	push   edx
c000c314:	52                   	push   edx
c000c315:	53                   	push   ebx
c000c316:	56                   	push   esi
c000c317:	e8 46 03 01 00       	call   c001c662 <LinkedList<Device>::addElement(Device*)>
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c325:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c328:	74 12                	je     c000c33c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c32a:	50                   	push   eax
c000c32b:	57                   	push   edi
c000c32c:	56                   	push   esi
c000c32d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c330:	e8 c7 ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c335:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c337:	83 c4 10             	add    esp,0x10
c000c33a:	eb e9                	jmp    c000c325 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c33c:	5b                   	pop    ebx
c000c33d:	5e                   	pop    esi
c000c33e:	5f                   	pop    edi
c000c33f:	c3                   	ret    

c000c340 <getDevicesOfType(DeviceType)>:
c000c340:	53                   	push   ebx
c000c341:	83 ec 14             	sub    esp,0x14
c000c344:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c348:	53                   	push   ebx
c000c349:	e8 f0 03 01 00       	call   c001c73e <LinkedList<Device>::LinkedList()>
c000c34e:	83 c4 0c             	add    esp,0xc
c000c351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c355:	53                   	push   ebx
c000c356:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000c35c:	e8 9b ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c361:	89 d8                	mov    eax,ebx
c000c363:	83 c4 18             	add    esp,0x18
c000c366:	5b                   	pop    ebx
c000c367:	c2 04 00             	ret    0x4
c000c36a:	66 90                	xchg   ax,ax

c000c36c <HardDiskController::HardDiskController(char const*)>:
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c373:	83 ec 08             	sub    esp,0x8
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	50                   	push   eax
c000c37b:	e8 40 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c380:	83 c4 10             	add    esp,0x10
c000c383:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38c:	89 10                	mov    DWORD PTR [eax],edx
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c39c:	90                   	nop
c000c39d:	83 c4 0c             	add    esp,0xc
c000c3a0:	c3                   	ret    
c000c3a1:	90                   	nop
c000c3a2:	66 90                	xchg   ax,ax

c000c3a4 <HardDiskController::~HardDiskController()>:
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b0:	89 10                	mov    DWORD PTR [eax],edx
c000c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	50                   	push   eax
c000c3ba:	e8 6b fb ff ff       	call   c000bf2a <Device::~Device()>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	90                   	nop
c000c3c3:	83 c4 0c             	add    esp,0xc
c000c3c6:	c3                   	ret    
c000c3c7:	90                   	nop

c000c3c8 <HardDiskController::~HardDiskController()>:
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	83 ec 0c             	sub    esp,0xc
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	e8 cd ff ff ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	83 ec 08             	sub    esp,0x8
c000c3dd:	68 58 01 00 00       	push   0x158
c000c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e6:	e8 07 e7 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	83 c4 0c             	add    esp,0xc
c000c3f1:	c3                   	ret    

c000c3f2 <PhysicalDisk::eject()>:
c000c3f2:	83 c8 ff             	or     eax,0xffffffff
c000c3f5:	c3                   	ret    

c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3f6:	83 ec 0c             	sub    esp,0xc
c000c3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fd:	83 ec 08             	sub    esp,0x8
c000c400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c404:	50                   	push   eax
c000c405:	e8 b6 fd ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c40a:	83 c4 10             	add    esp,0x10
c000c40d:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c416:	89 10                	mov    DWORD PTR [eax],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c427:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c432:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c444:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c458:	90                   	nop
c000c459:	83 c4 0c             	add    esp,0xc
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <PhysicalDisk::startCache()>:
c000c45e:	56                   	push   esi
c000c45f:	53                   	push   ebx
c000c460:	83 ec 10             	sub    esp,0x10
c000c463:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c467:	6a 44                	push   0x44
c000c469:	e8 eb b9 ff ff       	call   c0007e59 <malloc>
c000c46e:	89 c6                	mov    esi,eax
c000c470:	58                   	pop    eax
c000c471:	5a                   	pop    edx
c000c472:	53                   	push   ebx
c000c473:	56                   	push   esi
c000c474:	e8 ab 15 00 00       	call   c000da24 <VCache::VCache(PhysicalDisk*)>
c000c479:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c47f:	83 c4 14             	add    esp,0x14
c000c482:	5b                   	pop    ebx
c000c483:	5e                   	pop    esi
c000c484:	c3                   	ret    
c000c485:	90                   	nop

c000c486 <PhysicalDisk::~PhysicalDisk()>:
c000c486:	83 ec 0c             	sub    esp,0xc
c000c489:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c492:	89 10                	mov    DWORD PTR [eax],edx
c000c494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c498:	83 ec 0c             	sub    esp,0xc
c000c49b:	50                   	push   eax
c000c49c:	e8 89 fa ff ff       	call   c000bf2a <Device::~Device()>
c000c4a1:	83 c4 10             	add    esp,0x10
c000c4a4:	90                   	nop
c000c4a5:	83 c4 0c             	add    esp,0xc
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <PhysicalDisk::~PhysicalDisk()>:
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	83 ec 0c             	sub    esp,0xc
c000c4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b4:	e8 cd ff ff ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	83 ec 08             	sub    esp,0x8
c000c4bf:	68 6c 01 00 00       	push   0x16c
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	e8 25 e6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	83 c4 0c             	add    esp,0xc
c000c4d3:	c3                   	ret    

c000c4d4 <int_handler>:
c000c4d4:	55                   	push   ebp
c000c4d5:	57                   	push   edi
c000c4d6:	56                   	push   esi
c000c4d7:	53                   	push   ebx
c000c4d8:	83 ec 0c             	sub    esp,0xc
c000c4db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4df:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4e6:	74 0b                	je     c000c4f3 <int_handler+0x1f>
c000c4e8:	fa                   	cli    
c000c4e9:	f4                   	hlt    
c000c4ea:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4f1:	75 f5                	jne    c000c4e8 <int_handler+0x14>
c000c4f3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4f6:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4f9:	83 f8 17             	cmp    eax,0x17
c000c4fc:	76 3e                	jbe    c000c53c <int_handler+0x68>
c000c4fe:	c1 e6 04             	shl    esi,0x4
c000c501:	31 db                	xor    ebx,ebx
c000c503:	8d ae 40 1a 02 c0    	lea    ebp,[esi-0x3ffde5c0]
c000c509:	81 c6 40 0a 02 c0    	add    esi,0xc0020a40
c000c50f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c513:	85 c0                	test   eax,eax
c000c515:	74 13                	je     c000c52a <int_handler+0x56>
c000c517:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c51a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c51e:	74 2a                	je     c000c54a <int_handler+0x76>
c000c520:	83 ec 08             	sub    esp,0x8
c000c523:	52                   	push   edx
c000c524:	57                   	push   edi
c000c525:	ff d0                	call   eax
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	43                   	inc    ebx
c000c52b:	83 fb 04             	cmp    ebx,0x4
c000c52e:	75 df                	jne    c000c50f <int_handler+0x3b>
c000c530:	83 c4 0c             	add    esp,0xc
c000c533:	31 c0                	xor    eax,eax
c000c535:	5b                   	pop    ebx
c000c536:	31 d2                	xor    edx,edx
c000c538:	5e                   	pop    esi
c000c539:	5f                   	pop    edi
c000c53a:	5d                   	pop    ebp
c000c53b:	c3                   	ret    
c000c53c:	83 ec 0c             	sub    esp,0xc
c000c53f:	50                   	push   eax
c000c540:	e8 7c 94 00 00       	call   c00159c1 <HalEndOfInterrupt(int)>
c000c545:	83 c4 10             	add    esp,0x10
c000c548:	eb b4                	jmp    c000c4fe <int_handler+0x2a>
c000c54a:	83 ec 08             	sub    esp,0x8
c000c54d:	52                   	push   edx
c000c54e:	57                   	push   edi
c000c54f:	ff d0                	call   eax
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	83 c4 0c             	add    esp,0xc
c000c557:	5b                   	pop    ebx
c000c558:	5e                   	pop    esi
c000c559:	5f                   	pop    edi
c000c55a:	5d                   	pop    ebp
c000c55b:	c3                   	ret    

c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c55c:	56                   	push   esi
c000c55d:	31 c0                	xor    eax,eax
c000c55f:	53                   	push   ebx
c000c560:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c568:	89 ca                	mov    edx,ecx
c000c56a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c56e:	c1 e2 04             	shl    edx,0x4
c000c571:	83 bc 82 40 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde5c0],0x0
c000c579:	74 15                	je     c000c590 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c57b:	40                   	inc    eax
c000c57c:	83 f8 04             	cmp    eax,0x4
c000c57f:	75 f0                	jne    c000c571 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c581:	c7 44 24 0c 84 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e084
c000c589:	5b                   	pop    ebx
c000c58a:	5e                   	pop    esi
c000c58b:	e9 57 41 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c000c590:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c593:	89 1c 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],ebx
c000c59a:	89 34 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],esi
c000c5a1:	5b                   	pop    ebx
c000c5a2:	5e                   	pop    esi
c000c5a3:	c3                   	ret    

c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a4:	57                   	push   edi
c000c5a5:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c5ab:	56                   	push   esi
c000c5ac:	53                   	push   ebx
c000c5ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5b5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5bc:	74 5b                	je     c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5be:	89 c7                	mov    edi,eax
c000c5c0:	84 c0                	test   al,al
c000c5c2:	74 24                	je     c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c4:	83 fe 0f             	cmp    esi,0xf
c000c5c7:	0f 8f d9 00 00 00    	jg     c000c6a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5cd:	8a 86 a0 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0760]
c000c5d3:	25 ff 00 00 00       	and    eax,0xff
c000c5d8:	66 8b bc 00 e0 31 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdce20]
c000c5e0:	89 c6                	mov    esi,eax
c000c5e2:	66 d1 ef             	shr    di,1
c000c5e5:	83 e7 01             	and    edi,0x1
c000c5e8:	83 ec 08             	sub    esp,0x8
c000c5eb:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c5f0:	31 db                	xor    ebx,ebx
c000c5f2:	50                   	push   eax
c000c5f3:	68 91 e0 01 c0       	push   0xc001e091
c000c5f8:	e8 eb e5 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c605:	85 c0                	test   eax,eax
c000c607:	7f 51                	jg     c000c65a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	68 a8 e0 01 c0       	push   0xc001e0a8
c000c611:	e8 d1 40 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c61c:	31 d2                	xor    edx,edx
c000c61e:	89 c8                	mov    eax,ecx
c000c620:	c1 e0 04             	shl    eax,0x4
c000c623:	8b 9c 90 40 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde5c0]
c000c62a:	85 db                	test   ebx,ebx
c000c62c:	0f 84 8b 00 00 00    	je     c000c6bd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c632:	42                   	inc    edx
c000c633:	83 fa 04             	cmp    edx,0x4
c000c636:	75 eb                	jne    c000c623 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c638:	83 ec 0c             	sub    esp,0xc
c000c63b:	68 fc e0 01 c0       	push   0xc001e0fc
c000c640:	e8 a2 40 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c64d:	5b                   	pop    ebx
c000c64e:	5e                   	pop    esi
c000c64f:	5f                   	pop    edi
c000c650:	c3                   	ret    
c000c651:	43                   	inc    ebx
c000c652:	39 1d 00 48 02 c0    	cmp    DWORD PTR ds:0xc0024800,ebx
c000c658:	7e af                	jle    c000c609 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c65a:	83 ec 08             	sub    esp,0x8
c000c65d:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c664:	56                   	push   esi
c000c665:	50                   	push   eax
c000c666:	e8 27 f0 00 00       	call   c001b692 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	84 c0                	test   al,al
c000c670:	74 df                	je     c000c651 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c672:	81 e7 ff 00 00 00    	and    edi,0xff
c000c678:	50                   	push   eax
c000c679:	8d 46 20             	lea    eax,[esi+0x20]
c000c67c:	57                   	push   edi
c000c67d:	25 ff 00 00 00       	and    eax,0xff
c000c682:	6a 00                	push   0x0
c000c684:	50                   	push   eax
c000c685:	89 f0                	mov    eax,esi
c000c687:	6a 00                	push   0x0
c000c689:	25 ff 00 00 00       	and    eax,0xff
c000c68e:	6a 00                	push   0x0
c000c690:	50                   	push   eax
c000c691:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c698:	50                   	push   eax
c000c699:	e8 6e f1 00 00       	call   c001b80c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c69e:	83 c4 20             	add    esp,0x20
c000c6a1:	e9 73 ff ff ff       	jmp    c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6a6:	83 ec 0c             	sub    esp,0xc
c000c6a9:	31 ff                	xor    edi,edi
c000c6ab:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c6b0:	e8 32 40 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	e9 2b ff ff ff       	jmp    c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6bd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6c4:	89 14 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],edx
c000c6cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6cf:	5b                   	pop    ebx
c000c6d0:	89 14 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],edx
c000c6d7:	89 f0                	mov    eax,esi
c000c6d9:	5e                   	pop    esi
c000c6da:	5f                   	pop    edi
c000c6db:	c3                   	ret    

c000c6dc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6e4:	c1 e0 04             	shl    eax,0x4
c000c6e7:	8d 50 10             	lea    edx,[eax+0x10]
c000c6ea:	39 88 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ecx
c000c6f0:	74 08                	je     c000c6fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6f2:	83 c0 04             	add    eax,0x4
c000c6f5:	39 d0                	cmp    eax,edx
c000c6f7:	75 f1                	jne    c000c6ea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6f9:	c3                   	ret    
c000c6fa:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c704:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c70e:	eb e2                	jmp    c000c6f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c710:	53                   	push   ebx
c000c711:	83 ec 08             	sub    esp,0x8
c000c714:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c718:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c71d:	74 0e                	je     c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c71f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000c724:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c72b:	75 37                	jne    c000c764 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c731:	83 c0 20             	add    eax,0x20
c000c734:	c1 e0 04             	shl    eax,0x4
c000c737:	8d 50 10             	lea    edx,[eax+0x10]
c000c73a:	39 98 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ebx
c000c740:	74 0c                	je     c000c74e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c742:	83 c0 04             	add    eax,0x4
c000c745:	39 d0                	cmp    eax,edx
c000c747:	75 f1                	jne    c000c73a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c749:	83 c4 08             	add    esp,0x8
c000c74c:	5b                   	pop    ebx
c000c74d:	c3                   	ret    
c000c74e:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c758:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c762:	eb de                	jmp    c000c742 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c764:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c769:	7f 12                	jg     c000c77d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c76b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c76f:	31 c0                	xor    eax,eax
c000c771:	8a 81 a0 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0760]
c000c777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77b:	eb b0                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c77d:	83 ec 0c             	sub    esp,0xc
c000c780:	68 b5 e0 01 c0       	push   0xc001e0b5
c000c785:	e8 5d 3f 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	eb 9e                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c78f <setupINTS()>:
c000c78f:	31 c0                	xor    eax,eax
c000c791:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c79b:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c7a5:	c7 80 44 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5bc],0x0
c000c7af:	c7 80 44 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5bc],0x0
c000c7b9:	c7 80 48 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b8],0x0
c000c7c3:	c7 80 48 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b8],0x0
c000c7cd:	c7 80 4c 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b4],0x0
c000c7d7:	c7 80 4c 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b4],0x0
c000c7e1:	83 c0 10             	add    eax,0x10
c000c7e4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7e9:	75 a6                	jne    c000c791 <setupINTS()+0x2>
c000c7eb:	c3                   	ret    

c000c7ec <convertLegacyIRQNumber(int)>:
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c800:	74 0f                	je     c000c811 <convertLegacyIRQNumber(int)+0x25>
c000c802:	83 f8 0f             	cmp    eax,0xf
c000c805:	7f 0e                	jg     c000c815 <convertLegacyIRQNumber(int)+0x29>
c000c807:	31 c9                	xor    ecx,ecx
c000c809:	8a 88 a0 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0760]
c000c80f:	89 c8                	mov    eax,ecx
c000c811:	83 c4 0c             	add    esp,0xc
c000c814:	c3                   	ret    
c000c815:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c819:	83 ec 0c             	sub    esp,0xc
c000c81c:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c821:	e8 c1 3e 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82d:	83 c4 0c             	add    esp,0xc
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <startGUI(void*)>:
c000c832:	55                   	push   ebp
c000c833:	89 e5                	mov    ebp,esp
c000c835:	53                   	push   ebx
c000c836:	83 ec 04             	sub    esp,0x4
c000c839:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c83e:	48                   	dec    eax
c000c83f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c844:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c849:	85 c0                	test   eax,eax
c000c84b:	75 01                	jne    c000c84e <startGUI(void*)+0x1c>
c000c84d:	fb                   	sti    
c000c84e:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c854:	83 ec 08             	sub    esp,0x8
c000c857:	6a 01                	push   0x1
c000c859:	68 21 e1 01 c0       	push   0xc001e121
c000c85e:	e8 e7 67 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	83 ec 08             	sub    esp,0x8
c000c869:	53                   	push   ebx
c000c86a:	50                   	push   eax
c000c86b:	e8 0b 6a 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c879:	83 ec 08             	sub    esp,0x8
c000c87c:	6a 01                	push   0x1
c000c87e:	68 3b e1 01 c0       	push   0xc001e13b
c000c883:	e8 c2 67 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000c888:	83 c4 10             	add    esp,0x10
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	53                   	push   ebx
c000c88f:	50                   	push   eax
c000c890:	e8 e6 69 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	90                   	nop
c000c899:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c89c:	c9                   	leave  
c000c89d:	c3                   	ret    

c000c89e <startGUIVESA(void*)>:
c000c89e:	55                   	push   ebp
c000c89f:	89 e5                	mov    ebp,esp
c000c8a1:	53                   	push   ebx
c000c8a2:	83 ec 04             	sub    esp,0x4
c000c8a5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8aa:	48                   	dec    eax
c000c8ab:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c8b0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	75 01                	jne    c000c8ba <startGUIVESA(void*)+0x1c>
c000c8b9:	fb                   	sti    
c000c8ba:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8c0:	83 ec 08             	sub    esp,0x8
c000c8c3:	6a 01                	push   0x1
c000c8c5:	68 59 e1 01 c0       	push   0xc001e159
c000c8ca:	e8 7b 67 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	83 ec 08             	sub    esp,0x8
c000c8d5:	53                   	push   ebx
c000c8d6:	50                   	push   eax
c000c8d7:	e8 9f 69 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8e5:	83 ec 08             	sub    esp,0x8
c000c8e8:	6a 01                	push   0x1
c000c8ea:	68 3b e1 01 c0       	push   0xc001e13b
c000c8ef:	e8 56 67 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	83 ec 08             	sub    esp,0x8
c000c8fa:	53                   	push   ebx
c000c8fb:	50                   	push   eax
c000c8fc:	e8 7a 69 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	90                   	nop
c000c905:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c908:	c9                   	leave  
c000c909:	c3                   	ret    

c000c90a <sendKeyToTerminal(unsigned char)>:
c000c90a:	55                   	push   ebp
c000c90b:	89 e5                	mov    ebp,esp
c000c90d:	83 ec 28             	sub    esp,0x28
c000c910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c913:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c916:	8b 15 84 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020984
c000c91c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c91f:	25 ff 00 00 00       	and    eax,0xff
c000c924:	83 ec 08             	sub    esp,0x8
c000c927:	50                   	push   eax
c000c928:	52                   	push   edx
c000c929:	e8 aa c8 ff ff       	call   c00091d8 <VgaText::receiveKey(unsigned char)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c935:	0f 85 8f 00 00 00    	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c93b:	fa                   	cli    
c000c93c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c941:	40                   	inc    eax
c000c942:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c947:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c94c:	40                   	inc    eax
c000c94d:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c952:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c000c957:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c95a:	c7 05 40 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a40,0x0
c000c964:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c968:	74 1f                	je     c000c989 <sendKeyToTerminal(unsigned char)+0x7f>
c000c96a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c96d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c970:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c973:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c976:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c979:	83 ec 0c             	sub    esp,0xc
c000c97c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c97f:	e8 7c 75 00 00       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb db                	jmp    c000c964 <sendKeyToTerminal(unsigned char)+0x5a>
c000c989:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c98e:	48                   	dec    eax
c000c98f:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c994:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c999:	85 c0                	test   eax,eax
c000c99b:	75 18                	jne    c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c99d:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c000c9a2:	85 c0                	test   eax,eax
c000c9a4:	74 0f                	je     c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c9a6:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000c9b0:	e8 87 70 00 00       	call   c0013a3c <schedule()>
c000c9b5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9ba:	48                   	dec    eax
c000c9bb:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c9c0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	75 01                	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c9c9:	fb                   	sti    
c000c9ca:	90                   	nop
c000c9cb:	c9                   	leave  
c000c9cc:	c3                   	ret    

c000c9cd <sendKeyboardToken(KeyboardToken)>:
c000c9cd:	55                   	push   ebp
c000c9ce:	89 e5                	mov    ebp,esp
c000c9d0:	83 ec 18             	sub    esp,0x18
c000c9d3:	e8 5b 3e 00 00       	call   c0010833 <Krnl::userIOReceived()>
c000c9d8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9de:	25 ff ff 00 00       	and    eax,0xffff
c000c9e3:	83 f2 01             	xor    edx,0x1
c000c9e6:	88 90 60 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd5a0],dl
c000c9ec:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 24                	je     c000ca19 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9f5:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000c9fb:	83 ec 04             	sub    esp,0x4
c000c9fe:	68 60 2a 02 c0       	push   0xc0022a60
c000ca03:	83 ec 08             	sub    esp,0x8
c000ca06:	89 e2                	mov    edx,esp
c000ca08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0b:	89 02                	mov    DWORD PTR [edx],eax
c000ca0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca10:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca14:	ff d1                	call   ecx
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca1d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca20:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca25:	38 c2                	cmp    dl,al
c000ca27:	74 1e                	je     c000ca47 <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca29:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca2c:	a2 68 2e 02 c0       	mov    ds:0xc0022e68,al
c000ca31:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca36:	25 ff 00 00 00       	and    eax,0xff
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 e6 be ff ff       	call   c000892a <setTerminalScrollLock(bool)>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca4a:	84 c0                	test   al,al
c000ca4c:	0f 84 ae 00 00 00    	je     c000cb00 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca55:	66 3d 10 03          	cmp    ax,0x310
c000ca59:	75 06                	jne    c000ca61 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca5b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca64:	66 3d 11 03          	cmp    ax,0x311
c000ca68:	75 06                	jne    c000ca70 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca6a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca73:	66 3d 12 03          	cmp    ax,0x312
c000ca77:	75 06                	jne    c000ca7f <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca79:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca82:	66 3d 13 03          	cmp    ax,0x313
c000ca86:	75 06                	jne    c000ca8e <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca88:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca91:	66 3d 14 03          	cmp    ax,0x314
c000ca95:	75 06                	jne    c000ca9d <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca97:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ca9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa0:	66 3d 15 03          	cmp    ax,0x315
c000caa4:	75 06                	jne    c000caac <sendKeyboardToken(KeyboardToken)+0xdf>
c000caa6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaf:	66 3d 16 03          	cmp    ax,0x316
c000cab3:	75 06                	jne    c000cabb <sendKeyboardToken(KeyboardToken)+0xee>
c000cab5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabe:	66 3d 17 03          	cmp    ax,0x317
c000cac2:	75 06                	jne    c000caca <sendKeyboardToken(KeyboardToken)+0xfd>
c000cac4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000caca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacd:	66 3d 18 03          	cmp    ax,0x318
c000cad1:	75 06                	jne    c000cad9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000cad3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cadc:	66 3d 19 03          	cmp    ax,0x319
c000cae0:	75 06                	jne    c000cae8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000cae2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caeb:	66 3d 1a 03          	cmp    ax,0x31a
c000caef:	0f 85 c9 00 00 00    	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cafb:	e9 be 00 00 00       	jmp    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb03:	66 3d 10 03          	cmp    ax,0x310
c000cb07:	75 0a                	jne    c000cb13 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb09:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb16:	66 3d 11 03          	cmp    ax,0x311
c000cb1a:	75 0a                	jne    c000cb26 <sendKeyboardToken(KeyboardToken)+0x159>
c000cb1c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb29:	66 3d 12 03          	cmp    ax,0x312
c000cb2d:	75 0a                	jne    c000cb39 <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb2f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb3c:	66 3d 13 03          	cmp    ax,0x313
c000cb40:	75 0a                	jne    c000cb4c <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb42:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4f:	66 3d 14 03          	cmp    ax,0x314
c000cb53:	75 0a                	jne    c000cb5f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb55:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb62:	66 3d 15 03          	cmp    ax,0x315
c000cb66:	75 0a                	jne    c000cb72 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb68:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb75:	66 3d 16 03          	cmp    ax,0x316
c000cb79:	75 0a                	jne    c000cb85 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb7b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb88:	66 3d 17 03          	cmp    ax,0x317
c000cb8c:	75 0a                	jne    c000cb98 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb8e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9b:	66 3d 18 03          	cmp    ax,0x318
c000cb9f:	75 0a                	jne    c000cbab <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cba7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbae:	66 3d 19 03          	cmp    ax,0x319
c000cbb2:	75 0a                	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbb4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc1:	66 3d 00 02          	cmp    ax,0x200
c000cbc5:	75 2c                	jne    c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbc7:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cbcc:	83 f0 01             	xor    eax,0x1
c000cbcf:	84 c0                	test   al,al
c000cbd1:	74 20                	je     c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbd3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cbd8:	6a 01                	push   0x1
c000cbda:	6a 00                	push   0x0
c000cbdc:	68 32 c8 00 c0       	push   0xc000c832
c000cbe1:	50                   	push   eax
c000cbe2:	e8 35 6c 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c000cbe7:	83 c4 10             	add    esp,0x10
c000cbea:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cbf1:	eb 33                	jmp    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf6:	66 3d 01 02          	cmp    ax,0x201
c000cbfa:	75 2a                	jne    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbfc:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cc01:	83 f0 01             	xor    eax,0x1
c000cc04:	84 c0                	test   al,al
c000cc06:	74 1e                	je     c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cc08:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cc0d:	6a 01                	push   0x1
c000cc0f:	6a 00                	push   0x0
c000cc11:	68 9e c8 00 c0       	push   0xc000c89e
c000cc16:	50                   	push   eax
c000cc17:	e8 00 6c 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cc26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc29:	66 3d 1d 03          	cmp    ax,0x31d
c000cc2d:	75 06                	jne    c000cc35 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc2f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc38:	66 3d 1c 03          	cmp    ax,0x31c
c000cc3c:	75 06                	jne    c000cc44 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc3e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc47:	66 3d 1b 03          	cmp    ax,0x31b
c000cc4b:	75 06                	jne    c000cc53 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc4d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	66 3d 1e 03          	cmp    ax,0x31e
c000cc5a:	75 06                	jne    c000cc62 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc5c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc65:	66 3d 1f 03          	cmp    ax,0x31f
c000cc69:	75 06                	jne    c000cc71 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc6b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc74:	66 3d 1a 03          	cmp    ax,0x31a
c000cc78:	75 06                	jne    c000cc80 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc7a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc80:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc84:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc87:	83 f0 01             	xor    eax,0x1
c000cc8a:	84 c0                	test   al,al
c000cc8c:	74 7b                	je     c000cd09 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc8e:	a0 61 2b 02 c0       	mov    al,ds:0xc0022b61
c000cc93:	84 c0                	test   al,al
c000cc95:	74 43                	je     c000ccda <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc97:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc9b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cc9f:	74 2d                	je     c000ccce <sendKeyboardToken(KeyboardToken)+0x301>
c000cca1:	8b 15 64 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e64
c000cca7:	89 d0                	mov    eax,edx
c000cca9:	c1 e0 02             	shl    eax,0x2
c000ccac:	01 d0                	add    eax,edx
c000ccae:	01 c0                	add    eax,eax
c000ccb0:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000ccb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb8:	25 ff ff 00 00       	and    eax,0xffff
c000ccbd:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc0:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccc5:	01 d0                	add    eax,edx
c000ccc7:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000cccc:	eb 71                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccce:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000ccd8:	eb 65                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccda:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	74 1a                	je     c000ccfd <sendKeyboardToken(KeyboardToken)+0x330>
c000cce3:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cce8:	25 ff 00 00 00       	and    eax,0xff
c000cced:	83 ec 0c             	sub    esp,0xc
c000ccf0:	50                   	push   eax
c000ccf1:	e8 14 fc ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccfd:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000cd07:	eb 36                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	66 3d 01 01          	cmp    ax,0x101
c000cd10:	75 2d                	jne    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd12:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd17:	85 c0                	test   eax,eax
c000cd19:	74 1a                	je     c000cd35 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd1b:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd20:	25 ff 00 00 00       	and    eax,0xff
c000cd25:	83 ec 0c             	sub    esp,0xc
c000cd28:	50                   	push   eax
c000cd29:	e8 dc fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd35:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000cd3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd42:	83 f0 01             	xor    eax,0x1
c000cd45:	84 c0                	test   al,al
c000cd47:	74 4e                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd4c:	83 f0 01             	xor    eax,0x1
c000cd4f:	84 c0                	test   al,al
c000cd51:	74 44                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd53:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cd58:	83 f0 01             	xor    eax,0x1
c000cd5b:	84 c0                	test   al,al
c000cd5d:	74 38                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd62:	66 83 f8 1f          	cmp    ax,0x1f
c000cd66:	76 09                	jbe    c000cd71 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6b:	66 83 f8 7e          	cmp    ax,0x7e
c000cd6f:	76 12                	jbe    c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd74:	66 83 f8 0a          	cmp    ax,0xa
c000cd78:	74 09                	je     c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7d:	66 83 f8 08          	cmp    ax,0x8
c000cd81:	75 14                	jne    c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd86:	25 ff 00 00 00       	and    eax,0xff
c000cd8b:	83 ec 0c             	sub    esp,0xc
c000cd8e:	50                   	push   eax
c000cd8f:	e8 76 fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd9a:	83 f0 01             	xor    eax,0x1
c000cd9d:	84 c0                	test   al,al
c000cd9f:	74 51                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cda1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cda4:	83 f0 01             	xor    eax,0x1
c000cda7:	84 c0                	test   al,al
c000cda9:	74 47                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdab:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cdb0:	84 c0                	test   al,al
c000cdb2:	74 3e                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb7:	66 83 f8 3f          	cmp    ax,0x3f
c000cdbb:	76 35                	jbe    c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc0:	66 83 f8 7f          	cmp    ax,0x7f
c000cdc4:	77 2c                	ja     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc9:	88 c2                	mov    dl,al
c000cdcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdce:	66 83 f8 5f          	cmp    ax,0x5f
c000cdd2:	76 04                	jbe    c000cdd8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdd4:	b0 20                	mov    al,0x20
c000cdd6:	eb 02                	jmp    c000cdda <sendKeyboardToken(KeyboardToken)+0x40d>
c000cdd8:	b0 00                	mov    al,0x0
c000cdda:	29 c2                	sub    edx,eax
c000cddc:	88 d0                	mov    al,dl
c000cdde:	83 e8 40             	sub    eax,0x40
c000cde1:	25 ff 00 00 00       	and    eax,0xff
c000cde6:	83 ec 0c             	sub    esp,0xc
c000cde9:	50                   	push   eax
c000cdea:	e8 1b fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf5:	66 3d 00 03          	cmp    ax,0x300
c000cdf9:	75 0f                	jne    c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdfe:	83 f0 01             	xor    eax,0x1
c000ce01:	84 c0                	test   al,al
c000ce03:	74 05                	je     c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce05:	e8 21 bb ff ff       	call   c000892b <doTerminalCycle()>
c000ce0a:	90                   	nop
c000ce0b:	c9                   	leave  
c000ce0c:	c3                   	ret    

c000ce0d <clearInternalKeybuffer(VgaText*)>:
c000ce0d:	55                   	push   ebp
c000ce0e:	89 e5                	mov    ebp,esp
c000ce10:	83 ec 08             	sub    esp,0x8
c000ce13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce16:	05 b2 00 00 00       	add    eax,0xb2
c000ce1b:	83 ec 0c             	sub    esp,0xc
c000ce1e:	50                   	push   eax
c000ce1f:	e8 3c 37 ff ff       	call   c0000560 <strlen>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce30:	83 ec 04             	sub    esp,0x4
c000ce33:	50                   	push   eax
c000ce34:	6a 00                	push   0x0
c000ce36:	52                   	push   edx
c000ce37:	e8 b4 36 ff ff       	call   c00004f0 <memset>
c000ce3c:	83 c4 10             	add    esp,0x10
c000ce3f:	90                   	nop
c000ce40:	c9                   	leave  
c000ce41:	c3                   	ret    

c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce42:	55                   	push   ebp
c000ce43:	89 e5                	mov    ebp,esp
c000ce45:	83 ec 18             	sub    esp,0x18
c000ce48:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000ce4d:	85 c0                	test   eax,eax
c000ce4f:	74 2a                	je     c000ce7b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce51:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce57:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000ce5d:	83 ec 04             	sub    esp,0x4
c000ce60:	68 60 2a 02 c0       	push   0xc0022a60
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	89 e2                	mov    edx,esp
c000ce6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce6d:	89 02                	mov    DWORD PTR [edx],eax
c000ce6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce72:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce76:	ff d1                	call   ecx
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	fb                   	sti    
c000ce7c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce87:	0f 84 a1 00 00 00    	je     c000cf2e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce90:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce96:	84 c0                	test   al,al
c000ce98:	75 28                	jne    c000cec2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce9a:	fa                   	cli    
c000ce9b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000cea0:	40                   	inc    eax
c000cea1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000cea6:	e8 91 6b 00 00       	call   c0013a3c <schedule()>
c000ceab:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ceb0:	48                   	dec    eax
c000ceb1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ceb6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000cebb:	85 c0                	test   eax,eax
c000cebd:	75 ce                	jne    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cebf:	fb                   	sti    
c000cec0:	eb cb                	jmp    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cec5:	8d 50 01             	lea    edx,[eax+0x1]
c000cec8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cece:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ced4:	88 10                	mov    BYTE PTR [eax],dl
c000ced6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced9:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cedf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee5:	05 b2 00 00 00       	add    eax,0xb2
c000ceea:	83 ec 0c             	sub    esp,0xc
c000ceed:	50                   	push   eax
c000ceee:	e8 6d 36 ff ff       	call   c0000560 <strlen>
c000cef3:	83 c4 10             	add    esp,0x10
c000cef6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cef9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ceff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf05:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf0b:	83 ec 04             	sub    esp,0x4
c000cf0e:	50                   	push   eax
c000cf0f:	51                   	push   ecx
c000cf10:	52                   	push   edx
c000cf11:	e8 ea 34 ff ff       	call   c0000400 <memmove>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf1f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf23:	0f 85 5a ff ff ff    	jne    c000ce83 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf2c:	eb 03                	jmp    c000cf31 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf31:	c9                   	leave  
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <Keyboard::Keyboard(char const*)>:
c000cf34:	83 ec 0c             	sub    esp,0xc
c000cf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3b:	83 ec 08             	sub    esp,0x8
c000cf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf42:	50                   	push   eax
c000cf43:	e8 78 f2 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000cf48:	83 c4 10             	add    esp,0x10
c000cf4b:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	89 10                	mov    DWORD PTR [eax],edx
c000cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf64:	c6 05 44 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a44,0x1
c000cf6b:	90                   	nop
c000cf6c:	83 c4 0c             	add    esp,0xc
c000cf6f:	c3                   	ret    

c000cf70 <Keyboard::~Keyboard()>:
c000cf70:	83 ec 0c             	sub    esp,0xc
c000cf73:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf7c:	89 10                	mov    DWORD PTR [eax],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	50                   	push   eax
c000cf86:	e8 9f ef ff ff       	call   c000bf2a <Device::~Device()>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	90                   	nop
c000cf8f:	83 c4 0c             	add    esp,0xc
c000cf92:	c3                   	ret    
c000cf93:	90                   	nop

c000cf94 <Keyboard::~Keyboard()>:
c000cf94:	83 ec 0c             	sub    esp,0xc
c000cf97:	83 ec 0c             	sub    esp,0xc
c000cf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9e:	e8 cd ff ff ff       	call   c000cf70 <Keyboard::~Keyboard()>
c000cfa3:	83 c4 10             	add    esp,0x10
c000cfa6:	83 ec 08             	sub    esp,0x8
c000cfa9:	68 5c 01 00 00       	push   0x15c
c000cfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb2:	e8 3b db ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	83 c4 0c             	add    esp,0xc
c000cfbd:	c3                   	ret    

c000cfbe <LogicalDisk::close(int, int, void*)>:
c000cfbe:	83 c8 ff             	or     eax,0xffffffff
c000cfc1:	c3                   	ret    

c000cfc2 <LogicalDisk::~LogicalDisk()>:
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfce:	89 10                	mov    DWORD PTR [eax],edx
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	50                   	push   eax
c000cfd8:	e8 4d ef ff ff       	call   c000bf2a <Device::~Device()>
c000cfdd:	83 c4 10             	add    esp,0x10
c000cfe0:	90                   	nop
c000cfe1:	83 c4 0c             	add    esp,0xc
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <LogicalDisk::~LogicalDisk()>:
c000cfe6:	83 ec 0c             	sub    esp,0xc
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff0:	e8 cd ff ff ff       	call   c000cfc2 <LogicalDisk::~LogicalDisk()>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	83 ec 08             	sub    esp,0x8
c000cffb:	68 74 01 00 00       	push   0x174
c000d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d004:	e8 e9 da ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 c4 0c             	add    esp,0xc
c000d00f:	c3                   	ret    

c000d010 <LogicalDisk::open(int, int, void*)>:
c000d010:	83 ec 18             	sub    esp,0x18
c000d013:	68 a8 e1 01 c0       	push   0xc001e1a8
c000d018:	e8 ca 36 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000d01d:	83 c8 ff             	or     eax,0xffffffff
c000d020:	83 c4 1c             	add    esp,0x1c
c000d023:	c3                   	ret    

c000d024 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d024:	53                   	push   ebx
c000d025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d02d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d031:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d037:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d03d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d043:	77 10                	ja     c000d055 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d045:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d04b:	89 d3                	mov    ebx,edx
c000d04d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d053:	72 05                	jb     c000d05a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d055:	83 c8 ff             	or     eax,0xffffffff
c000d058:	89 c2                	mov    edx,eax
c000d05a:	5b                   	pop    ebx
c000d05b:	c3                   	ret    

c000d05c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d05c:	56                   	push   esi
c000d05d:	83 c8 ff             	or     eax,0xffffffff
c000d060:	53                   	push   ebx
c000d061:	89 c2                	mov    edx,eax
c000d063:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d067:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d06b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d06f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d075:	77 27                	ja     c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d077:	89 d8                	mov    eax,ebx
c000d079:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d07f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d085:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08a:	89 c2                	mov    edx,eax
c000d08c:	73 10                	jae    c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d08e:	89 c8                	mov    eax,ecx
c000d090:	89 da                	mov    edx,ebx
c000d092:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d098:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d09e:	5b                   	pop    ebx
c000d09f:	5e                   	pop    esi
c000d0a0:	c3                   	ret    
c000d0a1:	90                   	nop

c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0a2:	83 ec 1c             	sub    esp,0x1c
c000d0a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0c8:	83 ec 08             	sub    esp,0x8
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	50                   	push   eax
c000d0d0:	e8 eb f0 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d0d5:	83 c4 10             	add    esp,0x10
c000d0d8:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000d0dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e1:	89 10                	mov    DWORD PTR [eax],edx
c000d0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d107:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d10f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d113:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d119:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d11f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d130:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d13a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d13e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d148:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d152:	90                   	nop
c000d153:	83 c4 1c             	add    esp,0x1c
c000d156:	c3                   	ret    
c000d157:	90                   	nop

c000d158 <LogicalDisk::assignDriveLetter()>:
c000d158:	55                   	push   ebp
c000d159:	57                   	push   edi
c000d15a:	56                   	push   esi
c000d15b:	53                   	push   ebx
c000d15c:	83 ec 14             	sub    esp,0x14
c000d15f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d163:	8b 3d 80 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e80
c000d169:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d16f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d173:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d179:	8b 3d 84 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e84
c000d17f:	3c 01                	cmp    al,0x1
c000d181:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d189:	19 c0                	sbb    eax,eax
c000d18b:	83 e0 02             	and    eax,0x2
c000d18e:	83 c0 41             	add    eax,0x41
c000d191:	0f be e8             	movsx  ebp,al
c000d194:	3c 43                	cmp    al,0x43
c000d196:	75 10                	jne    c000d1a8 <LogicalDisk::assignDriveLetter()+0x50>
c000d198:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d19f:	75 5d                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1a6:	75 56                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1ab:	ba 01 00 00 00       	mov    edx,0x1
c000d1b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1b8:	d3 e2                	shl    edx,cl
c000d1ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1be:	89 d7                	mov    edi,edx
c000d1c0:	89 d6                	mov    esi,edx
c000d1c2:	c1 ff 1f             	sar    edi,0x1f
c000d1c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1c9:	21 f9                	and    ecx,edi
c000d1cb:	09 d1                	or     ecx,edx
c000d1cd:	75 2f                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1dd:	09 f2                	or     edx,esi
c000d1df:	89 15 80 2e 02 c0    	mov    DWORD PTR ds:0xc0022e80,edx
c000d1e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e9:	09 fa                	or     edx,edi
c000d1eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1ef:	89 15 84 2e 02 c0    	mov    DWORD PTR ds:0xc0022e84,edx
c000d1f5:	89 1c bd a0 2e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd160],ebx
c000d1fc:	eb 08                	jmp    c000d206 <LogicalDisk::assignDriveLetter()+0xae>
c000d1fe:	45                   	inc    ebp
c000d1ff:	40                   	inc    eax
c000d200:	3c 5b                	cmp    al,0x5b
c000d202:	75 90                	jne    c000d194 <LogicalDisk::assignDriveLetter()+0x3c>
c000d204:	31 c0                	xor    eax,eax
c000d206:	83 c4 14             	add    esp,0x14
c000d209:	5b                   	pop    ebx
c000d20a:	5e                   	pop    esi
c000d20b:	5f                   	pop    edi
c000d20c:	5d                   	pop    ebp
c000d20d:	c3                   	ret    

c000d20e <LogicalDisk::mount()>:
c000d20e:	56                   	push   esi
c000d20f:	53                   	push   ebx
c000d210:	53                   	push   ebx
c000d211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d215:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c000d21b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d225:	85 db                	test   ebx,ebx
c000d227:	74 27                	je     c000d250 <LogicalDisk::mount()+0x42>
c000d229:	51                   	push   ecx
c000d22a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d231:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d233:	83 e8 41             	sub    eax,0x41
c000d236:	50                   	push   eax
c000d237:	56                   	push   esi
c000d238:	53                   	push   ebx
c000d239:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d23c:	83 c4 10             	add    esp,0x10
c000d23f:	84 c0                	test   al,al
c000d241:	74 08                	je     c000d24b <LogicalDisk::mount()+0x3d>
c000d243:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d249:	eb 07                	jmp    c000d252 <LogicalDisk::mount()+0x44>
c000d24b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d24e:	eb d5                	jmp    c000d225 <LogicalDisk::mount()+0x17>
c000d250:	31 c0                	xor    eax,eax
c000d252:	5a                   	pop    edx
c000d253:	5b                   	pop    ebx
c000d254:	5e                   	pop    esi
c000d255:	c3                   	ret    

c000d256 <LogicalDisk::unmount()>:
c000d256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <LogicalDisk::eject()>:
c000d266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d270:	8b 10                	mov    edx,DWORD PTR [eax]
c000d272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d276:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d279:	90                   	nop

c000d27a <LogicalDisk::unassignDriveLetter()>:
c000d27a:	57                   	push   edi
c000d27b:	56                   	push   esi
c000d27c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d280:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d287:	84 c9                	test   cl,cl
c000d289:	75 0f                	jne    c000d29a <LogicalDisk::unassignDriveLetter()+0x20>
c000d28b:	c7 44 24 0c cc e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1cc
c000d293:	5e                   	pop    esi
c000d294:	5f                   	pop    edi
c000d295:	e9 4d 34 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c000d29a:	83 e9 41             	sub    ecx,0x41
c000d29d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2a4:	b8 01 00 00 00       	mov    eax,0x1
c000d2a9:	c7 04 8d a0 2e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd160],0x0
c000d2b4:	d3 e0                	shl    eax,cl
c000d2b6:	89 c7                	mov    edi,eax
c000d2b8:	f7 d0                	not    eax
c000d2ba:	c1 ff 1f             	sar    edi,0x1f
c000d2bd:	21 05 80 2e 02 c0    	and    DWORD PTR ds:0xc0022e80,eax
c000d2c3:	89 fe                	mov    esi,edi
c000d2c5:	f7 d6                	not    esi
c000d2c7:	21 35 84 2e 02 c0    	and    DWORD PTR ds:0xc0022e84,esi
c000d2cd:	5e                   	pop    esi
c000d2ce:	5f                   	pop    edi
c000d2cf:	c3                   	ret    

c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d0:	57                   	push   edi
c000d2d1:	56                   	push   esi
c000d2d2:	53                   	push   ebx
c000d2d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2e9:	77 41                	ja     c000d32c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2eb:	99                   	cdq    
c000d2ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2f2:	01 c8                	add    eax,ecx
c000d2f4:	11 da                	adc    edx,ebx
c000d2f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2fc:	19 d7                	sbb    edi,edx
c000d2fe:	72 33                	jb     c000d333 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d300:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d306:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d30c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d310:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d314:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d31a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d320:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d324:	5b                   	pop    ebx
c000d325:	5e                   	pop    esi
c000d326:	5f                   	pop    edi
c000d327:	e9 4e 0a 00 00       	jmp    c000dd7a <VCache::read(unsigned long long, int, void*)>
c000d32c:	b8 05 00 00 00       	mov    eax,0x5
c000d331:	eb 05                	jmp    c000d338 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d333:	b8 07 00 00 00       	mov    eax,0x7
c000d338:	5b                   	pop    ebx
c000d339:	5e                   	pop    esi
c000d33a:	5f                   	pop    edi
c000d33b:	c3                   	ret    

c000d33c <LogicalDisk::write(unsigned long long, int, void*)>:
c000d33c:	57                   	push   edi
c000d33d:	56                   	push   esi
c000d33e:	53                   	push   ebx
c000d33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d347:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d34f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d355:	77 41                	ja     c000d398 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d357:	99                   	cdq    
c000d358:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d35e:	01 c8                	add    eax,ecx
c000d360:	11 da                	adc    edx,ebx
c000d362:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d368:	19 d7                	sbb    edi,edx
c000d36a:	72 33                	jb     c000d39f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d36c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d372:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d378:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d37c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d380:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d386:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d390:	5b                   	pop    ebx
c000d391:	5e                   	pop    esi
c000d392:	5f                   	pop    edi
c000d393:	e9 cc 08 00 00       	jmp    c000dc64 <VCache::write(unsigned long long, int, void*)>
c000d398:	b8 05 00 00 00       	mov    eax,0x5
c000d39d:	eb 05                	jmp    c000d3a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d39f:	b8 07 00 00 00       	mov    eax,0x7
c000d3a4:	5b                   	pop    ebx
c000d3a5:	5e                   	pop    esi
c000d3a6:	5f                   	pop    edi
c000d3a7:	c3                   	ret    

c000d3a8 <Mouse::Mouse(char const*)>:
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3af:	83 ec 08             	sub    esp,0x8
c000d3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b6:	50                   	push   eax
c000d3b7:	e8 04 ee ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d3bc:	83 c4 10             	add    esp,0x10
c000d3bf:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c8:	89 10                	mov    DWORD PTR [eax],edx
c000d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3d8:	90                   	nop
c000d3d9:	83 c4 0c             	add    esp,0xc
c000d3dc:	c3                   	ret    
c000d3dd:	90                   	nop
c000d3de:	66 90                	xchg   ax,ax

c000d3e0 <Mouse::~Mouse()>:
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ec:	89 10                	mov    DWORD PTR [eax],edx
c000d3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f2:	83 ec 0c             	sub    esp,0xc
c000d3f5:	50                   	push   eax
c000d3f6:	e8 2f eb ff ff       	call   c000bf2a <Device::~Device()>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	90                   	nop
c000d3ff:	83 c4 0c             	add    esp,0xc
c000d402:	c3                   	ret    
c000d403:	90                   	nop

c000d404 <Mouse::~Mouse()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d40e:	e8 cd ff ff ff       	call   c000d3e0 <Mouse::~Mouse()>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	83 ec 08             	sub    esp,0x8
c000d419:	68 58 01 00 00       	push   0x158
c000d41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d422:	e8 cb d6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 c4 0c             	add    esp,0xc
c000d42d:	c3                   	ret    

c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	81 ec 28 01 00 00    	sub    esp,0x128
c000d438:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d43f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d446:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d44d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d458:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d45c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d463:	e8 54 ee ff ff       	call   c000c2bc <Device::getName()>
c000d468:	5a                   	pop    edx
c000d469:	59                   	pop    ecx
c000d46a:	50                   	push   eax
c000d46b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d46f:	55                   	push   ebp
c000d470:	e8 ab 31 ff ff       	call   c0000620 <strcpy>
c000d475:	5b                   	pop    ebx
c000d476:	58                   	pop    eax
c000d477:	68 44 e2 01 c0       	push   0xc001e244
c000d47c:	55                   	push   ebp
c000d47d:	e8 5e 33 ff ff       	call   c00007e0 <strcat>
c000d482:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d489:	e8 cb a9 ff ff       	call   c0007e59 <malloc>
c000d48e:	83 c4 0c             	add    esp,0xc
c000d491:	89 c3                	mov    ebx,eax
c000d493:	57                   	push   edi
c000d494:	56                   	push   esi
c000d495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4a4:	55                   	push   ebp
c000d4a5:	50                   	push   eax
c000d4a6:	e8 f7 fb ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4ab:	83 c4 14             	add    esp,0x14
c000d4ae:	53                   	push   ebx
c000d4af:	e8 a4 fc ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c000d4b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4b7:	e8 52 fd ff ff       	call   c000d20e <LogicalDisk::mount()>
c000d4bc:	58                   	pop    eax
c000d4bd:	5a                   	pop    edx
c000d4be:	53                   	push   ebx
c000d4bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4c6:	e8 5d eb ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d4cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d1:	5b                   	pop    ebx
c000d4d2:	5e                   	pop    esi
c000d4d3:	5f                   	pop    edi
c000d4d4:	5d                   	pop    ebp
c000d4d5:	c3                   	ret    

c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d4d6:	55                   	push   ebp
c000d4d7:	57                   	push   edi
c000d4d8:	56                   	push   esi
c000d4d9:	53                   	push   ebx
c000d4da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4ed:	3d 00 02 00 00       	cmp    eax,0x200
c000d4f2:	74 27                	je     c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4fa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d500:	83 ec 10             	sub    esp,0x10
c000d503:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d507:	99                   	cdq    
c000d508:	c1 e6 0a             	shl    esi,0xa
c000d50b:	52                   	push   edx
c000d50c:	89 fd                	mov    ebp,edi
c000d50e:	50                   	push   eax
c000d50f:	55                   	push   ebp
c000d510:	56                   	push   esi
c000d511:	e8 9a ec 00 00       	call   c001c1b0 <__udivdi3>
c000d516:	e9 b1 00 00 00       	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d51b:	83 ec 0c             	sub    esp,0xc
c000d51e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d520:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d524:	56                   	push   esi
c000d525:	6a 01                	push   0x1
c000d527:	6a 00                	push   0x0
c000d529:	6a 00                	push   0x0
c000d52b:	53                   	push   ebx
c000d52c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d52f:	83 c4 20             	add    esp,0x20
c000d532:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d53a:	75 0a                	jne    c000d546 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d53c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d544:	74 2c                	je     c000d572 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d546:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d54c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d552:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d558:	83 ec 10             	sub    esp,0x10
c000d55b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d55f:	89 f7                	mov    edi,esi
c000d561:	c1 e0 0a             	shl    eax,0xa
c000d564:	c1 ff 1f             	sar    edi,0x1f
c000d567:	57                   	push   edi
c000d568:	56                   	push   esi
c000d569:	52                   	push   edx
c000d56a:	50                   	push   eax
c000d56b:	e8 40 ec 00 00       	call   c001c1b0 <__udivdi3>
c000d570:	eb 5a                	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d572:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d579:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d580:	83 e1 7f             	and    ecx,0x7f
c000d583:	83 e0 7f             	and    eax,0x7f
c000d586:	01 c1                	add    ecx,eax
c000d588:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d58f:	83 e0 7f             	and    eax,0x7f
c000d592:	01 c1                	add    ecx,eax
c000d594:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d59b:	83 e0 7f             	and    eax,0x7f
c000d59e:	00 c1                	add    cl,al
c000d5a0:	74 41                	je     c000d5e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b4:	83 ec 10             	sub    esp,0x10
c000d5b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bb:	89 f7                	mov    edi,esi
c000d5bd:	c1 e0 0a             	shl    eax,0xa
c000d5c0:	c1 ff 1f             	sar    edi,0x1f
c000d5c3:	57                   	push   edi
c000d5c4:	56                   	push   esi
c000d5c5:	52                   	push   edx
c000d5c6:	50                   	push   eax
c000d5c7:	e8 e4 eb 00 00       	call   c001c1b0 <__udivdi3>
c000d5cc:	83 c4 14             	add    esp,0x14
c000d5cf:	52                   	push   edx
c000d5d0:	50                   	push   eax
c000d5d1:	6a 00                	push   0x0
c000d5d3:	6a 00                	push   0x0
c000d5d5:	53                   	push   ebx
c000d5d6:	e8 53 fe ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5db:	83 c4 20             	add    esp,0x20
c000d5de:	e9 79 01 00 00       	jmp    c000d75c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5e3:	89 f0                	mov    eax,esi
c000d5e5:	31 f6                	xor    esi,esi
c000d5e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5ee:	75 02                	jne    c000d5f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f0:	89 f1                	mov    ecx,esi
c000d5f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d600:	c1 e2 08             	shl    edx,0x8
c000d603:	c1 e7 10             	shl    edi,0x10
c000d606:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d60e:	09 fa                	or     edx,edi
c000d610:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d618:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d61f:	83 c0 10             	add    eax,0x10
c000d622:	09 fa                	or     edx,edi
c000d624:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d62b:	c1 e7 18             	shl    edi,0x18
c000d62e:	09 fa                	or     edx,edi
c000d630:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d637:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d63b:	c1 e7 10             	shl    edi,0x10
c000d63e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d645:	c1 e2 08             	shl    edx,0x8
c000d648:	09 fa                	or     edx,edi
c000d64a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d651:	09 fa                	or     edx,edi
c000d653:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d65a:	c1 e7 18             	shl    edi,0x18
c000d65d:	09 fa                	or     edx,edi
c000d65f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d663:	46                   	inc    esi
c000d664:	83 fe 04             	cmp    esi,0x4
c000d667:	0f 85 7a ff ff ff    	jne    c000d5e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d671:	83 f0 01             	xor    eax,0x1
c000d674:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d678:	75 57                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d67e:	83 f0 01             	xor    eax,0x1
c000d681:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d685:	75 4a                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d687:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d68b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d693:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d69b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b1:	89 f7                	mov    edi,esi
c000d6b3:	c1 e0 0a             	shl    eax,0xa
c000d6b6:	c1 ff 1f             	sar    edi,0x1f
c000d6b9:	57                   	push   edi
c000d6ba:	56                   	push   esi
c000d6bb:	52                   	push   edx
c000d6bc:	50                   	push   eax
c000d6bd:	e8 ee ea 00 00       	call   c001c1b0 <__udivdi3>
c000d6c2:	83 c4 10             	add    esp,0x10
c000d6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d1:	84 c9                	test   cl,cl
c000d6d3:	74 53                	je     c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6d5:	0f b6 c9             	movzx  ecx,cl
c000d6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d708:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d70c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d710:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d714:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d718:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d71c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d720:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d724:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d728:	31 ed                	xor    ebp,ebp
c000d72a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d72e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d732:	89 f8                	mov    eax,edi
c000d734:	09 f0                	or     eax,esi
c000d736:	74 1e                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d738:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d73c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d740:	89 d1                	mov    ecx,edx
c000d742:	09 c1                	or     ecx,eax
c000d744:	74 10                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	57                   	push   edi
c000d74a:	56                   	push   esi
c000d74b:	52                   	push   edx
c000d74c:	50                   	push   eax
c000d74d:	53                   	push   ebx
c000d74e:	e8 db fc ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d753:	83 c4 20             	add    esp,0x20
c000d756:	45                   	inc    ebp
c000d757:	83 fd 04             	cmp    ebp,0x4
c000d75a:	75 ce                	jne    c000d72a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d75c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d762:	5b                   	pop    ebx
c000d763:	5e                   	pop    esi
c000d764:	5f                   	pop    edi
c000d765:	5d                   	pop    ebp
c000d766:	c3                   	ret    
c000d767:	90                   	nop

c000d768 <Serial::Serial(char const*)>:
c000d768:	83 ec 0c             	sub    esp,0xc
c000d76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	50                   	push   eax
c000d777:	e8 44 ea ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d788:	89 10                	mov    DWORD PTR [eax],edx
c000d78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d798:	90                   	nop
c000d799:	83 c4 0c             	add    esp,0xc
c000d79c:	c3                   	ret    
c000d79d:	90                   	nop
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Serial::~Serial()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 6f e7 ff ff       	call   c000bf2a <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Serial::~Serial()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Serial::~Serial()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 58 01 00 00       	push   0x158
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 0b d3 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    
c000d7ee:	66 90                	xchg   ax,ax

c000d7f0 <Timer::Timer(char const*)>:
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f7:	83 ec 08             	sub    esp,0x8
c000d7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fe:	50                   	push   eax
c000d7ff:	e8 bc e9 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d804:	83 c4 10             	add    esp,0x10
c000d807:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	89 10                	mov    DWORD PTR [eax],edx
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d820:	90                   	nop
c000d821:	83 c4 0c             	add    esp,0xc
c000d824:	c3                   	ret    
c000d825:	90                   	nop
c000d826:	66 90                	xchg   ax,ax

c000d828 <Timer::~Timer()>:
c000d828:	83 ec 0c             	sub    esp,0xc
c000d82b:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	89 10                	mov    DWORD PTR [eax],edx
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	83 ec 0c             	sub    esp,0xc
c000d83d:	50                   	push   eax
c000d83e:	e8 e7 e6 ff ff       	call   c000bf2a <Device::~Device()>
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	90                   	nop
c000d847:	83 c4 0c             	add    esp,0xc
c000d84a:	c3                   	ret    
c000d84b:	90                   	nop

c000d84c <Timer::~Timer()>:
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d856:	e8 cd ff ff ff       	call   c000d828 <Timer::~Timer()>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	83 ec 08             	sub    esp,0x8
c000d861:	68 5c 01 00 00       	push   0x15c
c000d866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86a:	e8 83 d2 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	83 c4 0c             	add    esp,0xc
c000d875:	c3                   	ret    

c000d876 <Timer::read()>:
c000d876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d87a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d880:	c3                   	ret    

c000d881 <setupTimer(int)>:
c000d881:	53                   	push   ebx
c000d882:	83 ec 14             	sub    esp,0x14
c000d885:	68 5c 01 00 00       	push   0x15c
c000d88a:	e8 ca a5 ff ff       	call   c0007e59 <malloc>
c000d88f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d892:	89 c3                	mov    ebx,eax
c000d894:	e8 93 e2 00 00       	call   c001bb2c <PIT::PIT()>
c000d899:	58                   	pop    eax
c000d89a:	5a                   	pop    edx
c000d89b:	53                   	push   ebx
c000d89c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000d8a2:	e8 81 e7 ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d8a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8a9:	6a 00                	push   0x0
c000d8ab:	6a 00                	push   0x0
c000d8ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b1:	53                   	push   ebx
c000d8b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8b5:	89 d8                	mov    eax,ebx
c000d8b7:	83 c4 28             	add    esp,0x28
c000d8ba:	5b                   	pop    ebx
c000d8bb:	c3                   	ret    

c000d8bc <timerHandler(unsigned int)>:
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	51                   	push   ecx
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	01 05 0c 2f 02 c0    	add    DWORD PTR ds:0xc0022f0c,eax
c000d8c9:	80 3d 3d 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093d,0x0
c000d8d0:	0f 84 4a 01 00 00    	je     c000da20 <timerHandler(unsigned int)+0x164>
c000d8d6:	fa                   	cli    
c000d8d7:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d8dd:	83 ec 0c             	sub    esp,0xc
c000d8e0:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c000d8e6:	68 18 3e 02 c0       	push   0xc0023e18
c000d8eb:	e8 90 ee 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	84 c0                	test   al,al
c000d8f5:	0f 85 a1 00 00 00    	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	68 18 3e 02 c0       	push   0xc0023e18
c000d903:	e8 94 ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 c6                	mov    esi,eax
c000d90d:	8d 76 00             	lea    esi,[esi+0x0]
c000d910:	83 ec 0c             	sub    esp,0xc
c000d913:	68 18 3e 02 c0       	push   0xc0023e18
c000d918:	e8 7f ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d91d:	c7 04 24 18 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e18
c000d924:	89 c3                	mov    ebx,eax
c000d926:	e8 79 ee 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d92b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c000d937:	77 23                	ja     c000d95c <timerHandler(unsigned int)+0xa0>
c000d939:	83 ec 0c             	sub    esp,0xc
c000d93c:	53                   	push   ebx
c000d93d:	e8 be 65 00 00       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	39 de                	cmp    esi,ebx
c000d947:	75 27                	jne    c000d970 <timerHandler(unsigned int)+0xb4>
c000d949:	83 ec 0c             	sub    esp,0xc
c000d94c:	68 18 3e 02 c0       	push   0xc0023e18
c000d951:	e8 46 ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d956:	89 c6                	mov    esi,eax
c000d958:	eb 12                	jmp    c000d96c <timerHandler(unsigned int)+0xb0>
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	52                   	push   edx
c000d95d:	52                   	push   edx
c000d95e:	53                   	push   ebx
c000d95f:	68 18 3e 02 c0       	push   0xc0023e18
c000d964:	e8 f3 ee 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	90                   	nop
c000d970:	83 ec 0c             	sub    esp,0xc
c000d973:	68 18 3e 02 c0       	push   0xc0023e18
c000d978:	e8 03 ee 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	84 c0                	test   al,al
c000d982:	75 18                	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	68 18 3e 02 c0       	push   0xc0023e18
c000d98c:	e8 0b ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	39 f0                	cmp    eax,esi
c000d996:	0f 85 74 ff ff ff    	jne    c000d910 <timerHandler(unsigned int)+0x54>
c000d99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9a5:	74 41                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9a7:	80 3d 3c 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093c,0x0
c000d9ae:	74 38                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9b0:	fa                   	cli    
c000d9b1:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d9b7:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000d9bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9ce:	72 08                	jb     c000d9d8 <timerHandler(unsigned int)+0x11c>
c000d9d0:	e8 67 60 00 00       	call   c0013a3c <schedule()>
c000d9d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000d9dd:	48                   	dec    eax
c000d9de:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000d9e3:	75 03                	jne    c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9e5:	fb                   	sti    
c000d9e6:	66 90                	xchg   ax,ax
c000d9e8:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000d9ed:	48                   	dec    eax
c000d9ee:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000d9f3:	75 1b                	jne    c000da10 <timerHandler(unsigned int)+0x154>
c000d9f5:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c000d9fc:	74 12                	je     c000da10 <timerHandler(unsigned int)+0x154>
c000d9fe:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000da08:	e8 2f 60 00 00       	call   c0013a3c <schedule()>
c000da0d:	8d 76 00             	lea    esi,[esi+0x0]
c000da10:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000da15:	48                   	dec    eax
c000da16:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000da1b:	75 03                	jne    c000da20 <timerHandler(unsigned int)+0x164>
c000da1d:	fb                   	sti    
c000da1e:	66 90                	xchg   ax,ax
c000da20:	58                   	pop    eax
c000da21:	5b                   	pop    ebx
c000da22:	5e                   	pop    esi
c000da23:	c3                   	ret    

c000da24 <VCache::VCache(PhysicalDisk*)>:
c000da24:	53                   	push   ebx
c000da25:	83 ec 18             	sub    esp,0x18
c000da28:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	89 10                	mov    DWORD PTR [eax],edx
c000da33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da37:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da84:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da8b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dabd:	83 ec 0c             	sub    esp,0xc
c000dac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dac4:	e8 90 a3 ff ff       	call   c0007e59 <malloc>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	89 c3                	mov    ebx,eax
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	53                   	push   ebx
c000dad2:	e8 31 5d 00 00       	call   c0013808 <Mutex::Mutex()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dade:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dafb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db0c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db1c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db1f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db26:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db34:	05 00 01 00 00       	add    eax,0x100
c000db39:	c1 e0 04             	shl    eax,0x4
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	50                   	push   eax
c000db40:	e8 14 a3 ff ff       	call   c0007e59 <malloc>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	89 c2                	mov    edx,eax
c000db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db55:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db6e:	c1 e0 06             	shl    eax,0x6
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	50                   	push   eax
c000db75:	e8 df a2 ff ff       	call   c0007e59 <malloc>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	89 c2                	mov    edx,eax
c000db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db83:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db86:	90                   	nop
c000db87:	83 c4 18             	add    esp,0x18
c000db8a:	5b                   	pop    ebx
c000db8b:	c3                   	ret    

c000db8c <VCache::invalidateReadBuffer()>:
c000db8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db90:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db96:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <VCache::writeWriteBuffer()>:
c000db9c:	53                   	push   ebx
c000db9d:	83 ec 08             	sub    esp,0x8
c000dba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dba4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dba8:	74 1e                	je     c000dbc8 <VCache::writeWriteBuffer()+0x2c>
c000dbaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbad:	83 ec 0c             	sub    esp,0xc
c000dbb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbb5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbbb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbbe:	50                   	push   eax
c000dbbf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbc2:	83 c4 20             	add    esp,0x20
c000dbc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbcf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbd6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbda:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe1:	83 c4 08             	add    esp,0x8
c000dbe4:	5b                   	pop    ebx
c000dbe5:	c3                   	ret    
c000dbe6:	66 90                	xchg   ax,ax

c000dbe8 <VCache::~VCache()>:
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	89 10                	mov    DWORD PTR [eax],edx
c000dbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbfd:	84 c0                	test   al,al
c000dbff:	74 0f                	je     c000dc10 <VCache::~VCache()+0x28>
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc08:	e8 8f ff ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc14:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	50                   	push   eax
c000dc1b:	e8 49 a2 ff ff       	call   c0007e69 <free>
c000dc20:	83 c4 10             	add    esp,0x10
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	50                   	push   eax
c000dc2e:	e8 36 a2 ff ff       	call   c0007e69 <free>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	90                   	nop
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <VCache::~VCache()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	83 ec 0c             	sub    esp,0xc
c000dc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc46:	e8 9d ff ff ff       	call   c000dbe8 <VCache::~VCache()>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	6a 44                	push   0x44
c000dc53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc57:	e8 96 ce ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	83 c4 0c             	add    esp,0xc
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <VCache::write(unsigned long long, int, void*)>:
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	56                   	push   esi
c000dc67:	53                   	push   ebx
c000dc68:	83 ec 1c             	sub    esp,0x1c
c000dc6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc7f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc87:	31 c0                	xor    eax,eax
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	39 e8                	cmp    eax,ebp
c000dc8e:	7d 18                	jge    c000dca8 <VCache::write(unsigned long long, int, void*)+0x44>
c000dc90:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc93:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc99:	0f af c8             	imul   ecx,eax
c000dc9c:	89 ca                	mov    edx,ecx
c000dc9e:	01 f2                	add    edx,esi
c000dca0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dca2:	40                   	inc    eax
c000dca3:	eb e7                	jmp    c000dc8c <VCache::write(unsigned long long, int, void*)+0x28>
c000dca5:	8d 76 00             	lea    esi,[esi+0x0]
c000dca8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dcac:	74 0a                	je     c000dcb8 <VCache::write(unsigned long long, int, void*)+0x54>
c000dcae:	53                   	push   ebx
c000dcaf:	e8 d8 fe ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000dcb4:	58                   	pop    eax
c000dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcbc:	74 5a                	je     c000dd18 <VCache::write(unsigned long long, int, void*)+0xb4>
c000dcbe:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dcc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc5:	89 f8                	mov    eax,edi
c000dcc7:	99                   	cdq    
c000dcc8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dccb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcce:	31 c1                	xor    ecx,eax
c000dcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd4:	31 d0                	xor    eax,edx
c000dcd6:	09 c1                	or     ecx,eax
c000dcd8:	75 32                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcda:	83 fd 01             	cmp    ebp,0x1
c000dcdd:	75 2d                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcdf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce8:	0f af f9             	imul   edi,ecx
c000dceb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcf3:	40                   	inc    eax
c000dcf4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcf7:	83 f8 40             	cmp    eax,0x40
c000dcfa:	75 74                	jne    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	53                   	push   ebx
c000dd00:	e8 97 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	eb 66                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	53                   	push   ebx
c000dd10:	e8 87 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd15:	83 c4 10             	add    esp,0x10
c000dd18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd1b:	83 fd 3f             	cmp    ebp,0x3f
c000dd1e:	7f 24                	jg     c000dd44 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd24:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dd27:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dd2a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd32:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd35:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dd38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd40:	eb 2e                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd46:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd4a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd56:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd5a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd5e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dd62:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd65:	83 c4 1c             	add    esp,0x1c
c000dd68:	5b                   	pop    ebx
c000dd69:	5e                   	pop    esi
c000dd6a:	5f                   	pop    edi
c000dd6b:	5d                   	pop    ebp
c000dd6c:	ff e0                	jmp    eax
c000dd6e:	66 90                	xchg   ax,ax
c000dd70:	83 c4 1c             	add    esp,0x1c
c000dd73:	31 c0                	xor    eax,eax
c000dd75:	5b                   	pop    ebx
c000dd76:	5e                   	pop    esi
c000dd77:	5f                   	pop    edi
c000dd78:	5d                   	pop    ebp
c000dd79:	c3                   	ret    

c000dd7a <VCache::read(unsigned long long, int, void*)>:
c000dd7a:	55                   	push   ebp
c000dd7b:	57                   	push   edi
c000dd7c:	56                   	push   esi
c000dd7d:	53                   	push   ebx
c000dd7e:	83 ec 1c             	sub    esp,0x1c
c000dd81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd95:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dd99:	31 c0                	xor    eax,eax
c000dd9b:	90                   	nop
c000dd9c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dda0:	7d 16                	jge    c000ddb8 <VCache::read(unsigned long long, int, void*)+0x3e>
c000dda2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dda5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ddab:	0f af c8             	imul   ecx,eax
c000ddae:	89 ca                	mov    edx,ecx
c000ddb0:	01 f2                	add    edx,esi
c000ddb2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ddb4:	40                   	inc    eax
c000ddb5:	eb e5                	jmp    c000dd9c <VCache::read(unsigned long long, int, void*)+0x22>
c000ddb7:	90                   	nop
c000ddb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddbc:	74 0e                	je     c000ddcc <VCache::read(unsigned long long, int, void*)+0x52>
c000ddbe:	83 ec 0c             	sub    esp,0xc
c000ddc1:	53                   	push   ebx
c000ddc2:	e8 d5 fd ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000ddc7:	83 c4 10             	add    esp,0x10
c000ddca:	66 90                	xchg   ax,ax
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	53                   	push   ebx
c000ddd0:	e8 b7 fd ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000ddd5:	83 c4 0c             	add    esp,0xc
c000ddd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dddb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000dde1:	6a 00                	push   0x0
c000dde3:	56                   	push   esi
c000dde4:	e8 07 27 ff ff       	call   c00004f0 <memset>
c000dde9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddec:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddee:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000ddf2:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000ddf6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ddfa:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000ddfe:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000de02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de06:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de09:	83 c4 2c             	add    esp,0x2c
c000de0c:	5b                   	pop    ebx
c000de0d:	5e                   	pop    esi
c000de0e:	5f                   	pop    edi
c000de0f:	5d                   	pop    ebp
c000de10:	ff e0                	jmp    eax

c000de12 <Video::putrect(int, int, int, int, unsigned int)>:
c000de12:	55                   	push   ebp
c000de13:	57                   	push   edi
c000de14:	56                   	push   esi
c000de15:	53                   	push   ebx
c000de16:	83 ec 1c             	sub    esp,0x1c
c000de19:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de21:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de25:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de31:	01 df                	add    edi,ebx
c000de33:	39 fb                	cmp    ebx,edi
c000de35:	7d 1f                	jge    c000de56 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de37:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de3b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de3f:	7d 12                	jge    c000de53 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de41:	8b 16                	mov    edx,DWORD PTR [esi]
c000de43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de47:	53                   	push   ebx
c000de48:	55                   	push   ebp
c000de49:	45                   	inc    ebp
c000de4a:	56                   	push   esi
c000de4b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de4e:	83 c4 10             	add    esp,0x10
c000de51:	eb e8                	jmp    c000de3b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de53:	43                   	inc    ebx
c000de54:	eb dd                	jmp    c000de33 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de56:	83 c4 1c             	add    esp,0x1c
c000de59:	5b                   	pop    ebx
c000de5a:	5e                   	pop    esi
c000de5b:	5f                   	pop    edi
c000de5c:	5d                   	pop    ebp
c000de5d:	c3                   	ret    

c000de5e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de5e:	55                   	push   ebp
c000de5f:	57                   	push   edi
c000de60:	31 ff                	xor    edi,edi
c000de62:	56                   	push   esi
c000de63:	53                   	push   ebx
c000de64:	83 ec 1c             	sub    esp,0x1c
c000de67:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de6f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de76:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de7f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de87:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de8a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de8e:	01 f9                	add    ecx,edi
c000de90:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de94:	7d 2f                	jge    c000dec5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de96:	31 f6                	xor    esi,esi
c000de98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de9c:	01 f2                	add    edx,esi
c000de9e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dea2:	7d 1a                	jge    c000debe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dea4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dea7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000deaa:	46                   	inc    esi
c000deab:	51                   	push   ecx
c000deac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deb0:	52                   	push   edx
c000deb1:	55                   	push   ebp
c000deb2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000debc:	eb da                	jmp    c000de98 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000debe:	47                   	inc    edi
c000debf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dec3:	eb c5                	jmp    c000de8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dec5:	83 c4 1c             	add    esp,0x1c
c000dec8:	5b                   	pop    ebx
c000dec9:	5e                   	pop    esi
c000deca:	5f                   	pop    edi
c000decb:	5d                   	pop    ebp
c000decc:	c3                   	ret    
c000decd:	90                   	nop

c000dece <Video::blit(unsigned int*, int, int, int, int)>:
c000dece:	55                   	push   ebp
c000decf:	57                   	push   edi
c000ded0:	56                   	push   esi
c000ded1:	53                   	push   ebx
c000ded2:	83 ec 1c             	sub    esp,0x1c
c000ded5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ded9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dedd:	85 c0                	test   eax,eax
c000dedf:	79 02                	jns    c000dee3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000dee1:	31 c0                	xor    eax,eax
c000dee3:	c1 e0 02             	shl    eax,0x2
c000dee6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000deea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000def2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000def6:	39 d8                	cmp    eax,ebx
c000def8:	7e 49                	jle    c000df43 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000defa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df00:	7c 41                	jl     c000df43 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df02:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df0a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df0e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df12:	39 f9                	cmp    ecx,edi
c000df14:	7e 22                	jle    c000df38 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df16:	83 c5 04             	add    ebp,0x4
c000df19:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df1f:	7c 14                	jl     c000df35 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df21:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df23:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df2e:	56                   	push   esi
c000df2f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df32:	83 c4 10             	add    esp,0x10
c000df35:	47                   	inc    edi
c000df36:	eb d2                	jmp    c000df0a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df3c:	43                   	inc    ebx
c000df3d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df41:	eb ab                	jmp    c000deee <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df43:	83 c4 1c             	add    esp,0x1c
c000df46:	5b                   	pop    ebx
c000df47:	5e                   	pop    esi
c000df48:	5f                   	pop    edi
c000df49:	5d                   	pop    ebp
c000df4a:	c3                   	ret    
c000df4b:	90                   	nop

c000df4c <Video::clearScreen(unsigned int)>:
c000df4c:	57                   	push   edi
c000df4d:	56                   	push   esi
c000df4e:	53                   	push   ebx
c000df4f:	31 db                	xor    ebx,ebx
c000df51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df55:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df5b:	7e 1f                	jle    c000df7c <Video::clearScreen(unsigned int)+0x30>
c000df5d:	31 ff                	xor    edi,edi
c000df5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df65:	7e 12                	jle    c000df79 <Video::clearScreen(unsigned int)+0x2d>
c000df67:	8b 06                	mov    eax,DWORD PTR [esi]
c000df69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6d:	53                   	push   ebx
c000df6e:	57                   	push   edi
c000df6f:	47                   	inc    edi
c000df70:	56                   	push   esi
c000df71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	eb e6                	jmp    c000df5f <Video::clearScreen(unsigned int)+0x13>
c000df79:	43                   	inc    ebx
c000df7a:	eb d9                	jmp    c000df55 <Video::clearScreen(unsigned int)+0x9>
c000df7c:	5b                   	pop    ebx
c000df7d:	5e                   	pop    esi
c000df7e:	5f                   	pop    edi
c000df7f:	c3                   	ret    

c000df80 <Video::putpixel(int, int, unsigned int)>:
c000df80:	c7 44 24 04 d4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2d4
c000df88:	e9 5a 27 00 00       	jmp    c00106e7 <Krnl::panic(char const*)>
c000df8d:	90                   	nop

c000df8e <Video::Video(char const*)>:
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df95:	83 ec 08             	sub    esp,0x8
c000df98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9c:	50                   	push   eax
c000df9d:	e8 1e e2 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000dfa2:	83 c4 10             	add    esp,0x10
c000dfa5:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000dfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfae:	89 10                	mov    DWORD PTR [eax],edx
c000dfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfbe:	90                   	nop
c000dfbf:	83 c4 0c             	add    esp,0xc
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <Video::~Video()>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000dfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd0:	89 10                	mov    DWORD PTR [eax],edx
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	83 ec 0c             	sub    esp,0xc
c000dfd9:	50                   	push   eax
c000dfda:	e8 4b df ff ff       	call   c000bf2a <Device::~Device()>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	90                   	nop
c000dfe3:	83 c4 0c             	add    esp,0xc
c000dfe6:	c3                   	ret    
c000dfe7:	90                   	nop

c000dfe8 <Video::~Video()>:
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	83 ec 0c             	sub    esp,0xc
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 cd ff ff ff       	call   c000dfc4 <Video::~Video()>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	83 ec 08             	sub    esp,0x8
c000dffd:	68 64 01 00 00       	push   0x164
c000e002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e006:	e8 e7 ca ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	83 c4 0c             	add    esp,0xc
c000e011:	c3                   	ret    

c000e012 <Video::isMonochrome()>:
c000e012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e016:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e01c:	c3                   	ret    
c000e01d:	90                   	nop

c000e01e <Video::getWidth()>:
c000e01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e028:	c3                   	ret    
c000e029:	90                   	nop

c000e02a <Video::getHeight()>:
c000e02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e034:	c3                   	ret    
c000e035:	90                   	nop

c000e036 <Video::drawCursor(int, int, unsigned char*, int)>:
c000e036:	55                   	push   ebp
c000e037:	57                   	push   edi
c000e038:	56                   	push   esi
c000e039:	53                   	push   ebx
c000e03a:	83 ec 2c             	sub    esp,0x2c
c000e03d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e041:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e045:	83 f8 01             	cmp    eax,0x1
c000e048:	19 c9                	sbb    ecx,ecx
c000e04a:	31 db                	xor    ebx,ebx
c000e04c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e050:	89 cd                	mov    ebp,ecx
c000e052:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e05a:	f7 d5                	not    ebp
c000e05c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e062:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e066:	01 d8                	add    eax,ebx
c000e068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e06c:	56                   	push   esi
c000e06d:	e8 b8 ff ff ff       	call   c000e02a <Video::getHeight()>
c000e072:	59                   	pop    ecx
c000e073:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e077:	7e 70                	jle    c000e0e9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e079:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e07d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e081:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e084:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e088:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e08c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e093:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e097:	89 f8                	mov    eax,edi
c000e099:	83 c0 20             	add    eax,0x20
c000e09c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0a0:	56                   	push   esi
c000e0a1:	e8 78 ff ff ff       	call   c000e01e <Video::getWidth()>
c000e0a6:	5a                   	pop    edx
c000e0a7:	39 c7                	cmp    edi,eax
c000e0a9:	7d 34                	jge    c000e0df <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e0ab:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0b0:	74 05                	je     c000e0b7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e0b2:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0b4:	55                   	push   ebp
c000e0b5:	eb 0d                	jmp    c000e0c4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e0b7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0bc:	74 12                	je     c000e0d0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e0be:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0c8:	57                   	push   edi
c000e0c9:	56                   	push   esi
c000e0ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0d4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0d8:	47                   	inc    edi
c000e0d9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0dd:	75 c1                	jne    c000e0a0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e0df:	43                   	inc    ebx
c000e0e0:	83 fb 20             	cmp    ebx,0x20
c000e0e3:	0f 85 79 ff ff ff    	jne    c000e062 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e0e9:	83 c4 2c             	add    esp,0x2c
c000e0ec:	5b                   	pop    ebx
c000e0ed:	5e                   	pop    esi
c000e0ee:	5f                   	pop    edi
c000e0ef:	5d                   	pop    ebp
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0f2:	55                   	push   ebp
c000e0f3:	57                   	push   edi
c000e0f4:	56                   	push   esi
c000e0f5:	53                   	push   ebx
c000e0f6:	83 ec 28             	sub    esp,0x28
c000e0f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0fd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e101:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e105:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e109:	c1 e6 08             	shl    esi,0x8
c000e10c:	01 c6                	add    esi,eax
c000e10e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e112:	c1 e0 08             	shl    eax,0x8
c000e115:	01 d0                	add    eax,edx
c000e117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e11b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e11f:	0f af c6             	imul   eax,esi
c000e122:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e129:	50                   	push   eax
c000e12a:	e8 2a 9d ff ff       	call   c0007e59 <malloc>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	89 c7                	mov    edi,eax
c000e134:	85 c0                	test   eax,eax
c000e136:	75 10                	jne    c000e148 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	68 f5 e2 01 c0       	push   0xc001e2f5
c000e140:	e8 a2 25 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e14b:	ba 12 00 00 00       	mov    edx,0x12
c000e150:	84 c0                	test   al,al
c000e152:	74 11                	je     c000e165 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e154:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e158:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e15c:	c1 fa 03             	sar    edx,0x3
c000e15f:	0f af d1             	imul   edx,ecx
c000e162:	83 c2 12             	add    edx,0x12
c000e165:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e169:	74 04                	je     c000e16f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e16b:	85 f6                	test   esi,esi
c000e16d:	75 12                	jne    c000e181 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e16f:	83 ec 0c             	sub    esp,0xc
c000e172:	68 05 e3 01 c0       	push   0xc001e305
c000e177:	e8 6c ca ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e17c:	e9 b8 00 00 00       	jmp    c000e239 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e181:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e185:	80 f9 02             	cmp    cl,0x2
c000e188:	0f 85 96 00 00 00    	jne    c000e224 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e18e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e193:	75 0e                	jne    c000e1a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e195:	84 c0                	test   al,al
c000e197:	75 0a                	jne    c000e1a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e199:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e19c:	83 e8 18             	sub    eax,0x18
c000e19f:	a8 f7                	test   al,0xf7
c000e1a1:	74 0a                	je     c000e1ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1a3:	83 ec 0c             	sub    esp,0xc
c000e1a6:	68 1a e3 01 c0       	push   0xc001e31a
c000e1ab:	eb 7f                	jmp    c000e22c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e1ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1bd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1c9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1cd:	75 0c                	jne    c000e1db <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e1cf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1d4:	c1 e0 18             	shl    eax,0x18
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	45                   	inc    ebp
c000e1dc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1e1:	c1 e1 10             	shl    ecx,0x10
c000e1e4:	89 c8                	mov    eax,ecx
c000e1e6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1eb:	c1 e1 08             	shl    ecx,0x8
c000e1ee:	09 c1                	or     ecx,eax
c000e1f0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1f4:	09 c1                	or     ecx,eax
c000e1f6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1fa:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e1fe:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e202:	c1 f8 03             	sar    eax,0x3
c000e205:	01 c2                	add    edx,eax
c000e207:	89 e8                	mov    eax,ebp
c000e209:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e20d:	39 c6                	cmp    esi,eax
c000e20f:	7f b0                	jg     c000e1c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e211:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e219:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e21c:	7e 22                	jle    c000e240 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e21e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e222:	eb 99                	jmp    c000e1bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e224:	50                   	push   eax
c000e225:	50                   	push   eax
c000e226:	51                   	push   ecx
c000e227:	68 28 e3 01 c0       	push   0xc001e328
c000e22c:	e8 b7 c9 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e231:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e234:	e8 30 9c ff ff       	call   c0007e69 <free>
c000e239:	83 c4 10             	add    esp,0x10
c000e23c:	31 ff                	xor    edi,edi
c000e23e:	eb 0f                	jmp    c000e24f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e240:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e244:	89 30                	mov    DWORD PTR [eax],esi
c000e246:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e24a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e24d:	89 30                	mov    DWORD PTR [eax],esi
c000e24f:	83 c4 1c             	add    esp,0x1c
c000e252:	89 f8                	mov    eax,edi
c000e254:	5b                   	pop    ebx
c000e255:	5e                   	pop    esi
c000e256:	5f                   	pop    edi
c000e257:	5d                   	pop    ebp
c000e258:	c3                   	ret    
c000e259:	90                   	nop

c000e25a <Video::putTGA(int, int, unsigned char*, int)>:
c000e25a:	55                   	push   ebp
c000e25b:	57                   	push   edi
c000e25c:	56                   	push   esi
c000e25d:	53                   	push   ebx
c000e25e:	83 ec 28             	sub    esp,0x28
c000e261:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e265:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e269:	50                   	push   eax
c000e26a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e26e:	50                   	push   eax
c000e26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e273:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e277:	56                   	push   esi
c000e278:	e8 75 fe ff ff       	call   c000e0f2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e27d:	83 c4 20             	add    esp,0x20
c000e280:	85 c0                	test   eax,eax
c000e282:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e286:	74 35                	je     c000e2bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e288:	89 c7                	mov    edi,eax
c000e28a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e28e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e292:	39 d8                	cmp    eax,ebx
c000e294:	7e 27                	jle    c000e2bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e296:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e29a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e29e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2a2:	39 e8                	cmp    eax,ebp
c000e2a4:	7e 14                	jle    c000e2ba <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2a6:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2a8:	83 c7 04             	add    edi,0x4
c000e2ab:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2ae:	53                   	push   ebx
c000e2af:	55                   	push   ebp
c000e2b0:	45                   	inc    ebp
c000e2b1:	56                   	push   esi
c000e2b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	eb e0                	jmp    c000e29a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2ba:	43                   	inc    ebx
c000e2bb:	eb cd                	jmp    c000e28a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2bd:	83 c4 1c             	add    esp,0x1c
c000e2c0:	5b                   	pop    ebx
c000e2c1:	5e                   	pop    esi
c000e2c2:	5f                   	pop    edi
c000e2c3:	5d                   	pop    ebp
c000e2c4:	c3                   	ret    
c000e2c5:	66 90                	xchg   ax,ax
c000e2c7:	90                   	nop

c000e2c8 <ACPI::close(int, int, void*)>:
c000e2c8:	83 ec 1c             	sub    esp,0x1c
c000e2cb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2d3:	74 0b                	je     c000e2e0 <ACPI::close(int, int, void*)+0x18>
c000e2d5:	b8 00 00 00 00       	mov    eax,0x0
c000e2da:	e9 9d 00 00 00       	jmp    c000e37c <ACPI::close(int, int, void*)+0xb4>
c000e2df:	90                   	nop
c000e2e0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2e5:	75 29                	jne    c000e310 <ACPI::close(int, int, void*)+0x48>
c000e2e7:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e2ec:	85 c0                	test   eax,eax
c000e2ee:	74 08                	je     c000e2f8 <ACPI::close(int, int, void*)+0x30>
c000e2f0:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e2f5:	ff d0                	call   eax
c000e2f7:	90                   	nop
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	68 84 e3 01 c0       	push   0xc001e384
c000e300:	e8 e2 23 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e30d:	eb 6d                	jmp    c000e37c <ACPI::close(int, int, void*)+0xb4>
c000e30f:	90                   	nop
c000e310:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e315:	75 5d                	jne    c000e374 <ACPI::close(int, int, void*)+0xac>
c000e317:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e31c:	85 c0                	test   eax,eax
c000e31e:	74 08                	je     c000e328 <ACPI::close(int, int, void*)+0x60>
c000e320:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e325:	ff d0                	call   eax
c000e327:	90                   	nop
c000e328:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e32d:	8d 76 00             	lea    esi,[esi+0x0]
c000e330:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e334:	25 ff 00 00 00       	and    eax,0xff
c000e339:	83 e0 02             	and    eax,0x2
c000e33c:	74 1e                	je     c000e35c <ACPI::close(int, int, void*)+0x94>
c000e33e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e349:	89 c2                	mov    edx,eax
c000e34b:	ec                   	in     al,dx
c000e34c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e350:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e354:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e358:	eb d6                	jmp    c000e330 <ACPI::close(int, int, void*)+0x68>
c000e35a:	66 90                	xchg   ax,ax
c000e35c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e363:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e368:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e36c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e370:	ee                   	out    dx,al
c000e371:	8d 76 00             	lea    esi,[esi+0x0]
c000e374:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e379:	8d 76 00             	lea    esi,[esi+0x0]
c000e37c:	83 c4 1c             	add    esp,0x1c
c000e37f:	c3                   	ret    

c000e380 <findRSDP()>:
c000e380:	83 ec 1c             	sub    esp,0x1c
c000e383:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e388:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e38e:	83 e0 04             	and    eax,0x4
c000e391:	84 c0                	test   al,al
c000e393:	75 07                	jne    c000e39c <findRSDP()+0x1c>
c000e395:	b8 00 00 00 00       	mov    eax,0x0
c000e39a:	eb 70                	jmp    c000e40c <findRSDP()+0x8c>
c000e39c:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c000e3a1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3a6:	7f 1c                	jg     c000e3c4 <findRSDP()+0x44>
c000e3a8:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e3ad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3b3:	83 e2 fb             	and    edx,0xfffffffb
c000e3b6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3bc:	b8 00 00 00 00       	mov    eax,0x0
c000e3c1:	eb 49                	jmp    c000e40c <findRSDP()+0x8c>
c000e3c3:	90                   	nop
c000e3c4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3cc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3d4:	77 2e                	ja     c000e404 <findRSDP()+0x84>
c000e3d6:	83 ec 04             	sub    esp,0x4
c000e3d9:	6a 08                	push   0x8
c000e3db:	68 1f e4 01 c0       	push   0xc001e41f
c000e3e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e4:	e8 c7 1f ff ff       	call   c00003b0 <memcmp>
c000e3e9:	83 c4 10             	add    esp,0x10
c000e3ec:	85 c0                	test   eax,eax
c000e3ee:	0f 94 c0             	sete   al
c000e3f1:	84 c0                	test   al,al
c000e3f3:	74 07                	je     c000e3fc <findRSDP()+0x7c>
c000e3f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3f9:	eb 11                	jmp    c000e40c <findRSDP()+0x8c>
c000e3fb:	90                   	nop
c000e3fc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e401:	eb c9                	jmp    c000e3cc <findRSDP()+0x4c>
c000e403:	90                   	nop
c000e404:	b8 00 00 00 00       	mov    eax,0x0
c000e409:	8d 76 00             	lea    esi,[esi+0x0]
c000e40c:	83 c4 1c             	add    esp,0x1c
c000e40f:	c3                   	ret    

c000e410 <loadACPITables(unsigned char*)>:
c000e410:	57                   	push   edi
c000e411:	56                   	push   esi
c000e412:	53                   	push   ebx
c000e413:	83 ec 60             	sub    esp,0x60
c000e416:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e41b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e421:	83 e0 04             	and    eax,0x4
c000e424:	84 c0                	test   al,al
c000e426:	0f 84 3c 02 00 00    	je     c000e668 <loadACPITables(unsigned char*)+0x258>
c000e42c:	a0 40 31 02 c0       	mov    al,ds:0xc0023140
c000e431:	84 c0                	test   al,al
c000e433:	74 77                	je     c000e4ac <loadACPITables(unsigned char*)+0x9c>
c000e435:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e439:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e43d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e441:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e444:	83 e8 24             	sub    eax,0x24
c000e447:	c1 e8 03             	shr    eax,0x3
c000e44a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e44e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e456:	66 90                	xchg   ax,ax
c000e458:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e45c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e460:	0f 8d b6 00 00 00    	jge    c000e51c <loadACPITables(unsigned char*)+0x10c>
c000e466:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e46a:	83 c0 24             	add    eax,0x24
c000e46d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e471:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e475:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e479:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e47d:	c1 e0 03             	shl    eax,0x3
c000e480:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e484:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e488:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e48b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e48d:	89 c1                	mov    ecx,eax
c000e48f:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e494:	8d 50 01             	lea    edx,[eax+0x1]
c000e497:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e49d:	89 ca                	mov    edx,ecx
c000e49f:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e4a6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e4aa:	eb ac                	jmp    c000e458 <loadACPITables(unsigned char*)+0x48>
c000e4ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4bb:	83 e8 24             	sub    eax,0x24
c000e4be:	c1 e8 02             	shr    eax,0x2
c000e4c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4c5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4d4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4d8:	7d 42                	jge    c000e51c <loadACPITables(unsigned char*)+0x10c>
c000e4da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4de:	83 c0 24             	add    eax,0x24
c000e4e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4f1:	c1 e0 02             	shl    eax,0x2
c000e4f4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4fe:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e503:	8d 50 01             	lea    edx,[eax+0x1]
c000e506:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e50c:	89 ca                	mov    edx,ecx
c000e50e:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e515:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e519:	eb b5                	jmp    c000e4d0 <loadACPITables(unsigned char*)+0xc0>
c000e51b:	90                   	nop
c000e51c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e524:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e529:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e52d:	0f 8d 39 01 00 00    	jge    c000e66c <loadACPITables(unsigned char*)+0x25c>
c000e533:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e537:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e53e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e54e:	25 ff 0f 00 00       	and    eax,0xfff
c000e553:	89 c6                	mov    esi,eax
c000e555:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	6a 01                	push   0x1
c000e560:	e8 30 b4 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e565:	83 c4 10             	add    esp,0x10
c000e568:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e56c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e572:	83 ec 0c             	sub    esp,0xc
c000e575:	6a 01                	push   0x1
c000e577:	6a 01                	push   0x1
c000e579:	50                   	push   eax
c000e57a:	52                   	push   edx
c000e57b:	53                   	push   ebx
c000e57c:	e8 a3 bd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e581:	83 c4 20             	add    esp,0x20
c000e584:	09 f0                	or     eax,esi
c000e586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e58a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e58e:	c1 e0 03             	shl    eax,0x3
c000e591:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e596:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5a2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5be:	89 c6                	mov    esi,eax
c000e5c0:	89 d7                	mov    edi,edx
c000e5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5c4:	89 c8                	mov    eax,ecx
c000e5c6:	89 fa                	mov    edx,edi
c000e5c8:	89 f3                	mov    ebx,esi
c000e5ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5e5:	05 00 10 00 00       	add    eax,0x1000
c000e5ea:	c1 e8 0c             	shr    eax,0xc
c000e5ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5fd:	25 ff 0f 00 00       	and    eax,0xfff
c000e602:	89 c6                	mov    esi,eax
c000e604:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e60a:	83 ec 0c             	sub    esp,0xc
c000e60d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e611:	e8 7f b3 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e616:	83 c4 10             	add    esp,0x10
c000e619:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e61d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e623:	83 ec 0c             	sub    esp,0xc
c000e626:	6a 01                	push   0x1
c000e628:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e62c:	50                   	push   eax
c000e62d:	52                   	push   edx
c000e62e:	53                   	push   ebx
c000e62f:	e8 f0 bc ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e634:	83 c4 20             	add    esp,0x20
c000e637:	09 f0                	or     eax,esi
c000e639:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e641:	83 ec 0c             	sub    esp,0xc
c000e644:	50                   	push   eax
c000e645:	e8 7b b6 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e64a:	83 c4 10             	add    esp,0x10
c000e64d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e651:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e655:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e65c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e660:	e9 bf fe ff ff       	jmp    c000e524 <loadACPITables(unsigned char*)+0x114>
c000e665:	8d 76 00             	lea    esi,[esi+0x0]
c000e668:	90                   	nop
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	83 c4 60             	add    esp,0x60
c000e66f:	5b                   	pop    ebx
c000e670:	5e                   	pop    esi
c000e671:	5f                   	pop    edi
c000e672:	c3                   	ret    
c000e673:	90                   	nop

c000e674 <findRSDT(unsigned char*)>:
c000e674:	57                   	push   edi
c000e675:	56                   	push   esi
c000e676:	53                   	push   ebx
c000e677:	83 ec 50             	sub    esp,0x50
c000e67a:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e67f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e685:	83 e0 04             	and    eax,0x4
c000e688:	84 c0                	test   al,al
c000e68a:	75 0c                	jne    c000e698 <findRSDT(unsigned char*)+0x24>
c000e68c:	b8 00 00 00 00       	mov    eax,0x0
c000e691:	e9 26 01 00 00       	jmp    c000e7bc <findRSDT(unsigned char*)+0x148>
c000e696:	66 90                	xchg   ax,ax
c000e698:	89 e0                	mov    eax,esp
c000e69a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e69e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6c2:	89 c6                	mov    esi,eax
c000e6c4:	89 d7                	mov    edi,edx
c000e6c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c8:	89 c8                	mov    eax,ecx
c000e6ca:	89 fa                	mov    edx,edi
c000e6cc:	89 f3                	mov    ebx,esi
c000e6ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e702:	25 ff 0f 00 00       	and    eax,0xfff
c000e707:	89 c6                	mov    esi,eax
c000e709:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e70f:	83 ec 0c             	sub    esp,0xc
c000e712:	6a 02                	push   0x2
c000e714:	e8 7c b2 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e719:	83 c4 10             	add    esp,0x10
c000e71c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e720:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e726:	83 ec 0c             	sub    esp,0xc
c000e729:	6a 01                	push   0x1
c000e72b:	6a 02                	push   0x2
c000e72d:	50                   	push   eax
c000e72e:	52                   	push   edx
c000e72f:	53                   	push   ebx
c000e730:	e8 ef bb ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e735:	83 c4 20             	add    esp,0x20
c000e738:	09 f0                	or     eax,esi
c000e73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e742:	25 ff 0f 00 00       	and    eax,0xfff
c000e747:	89 c6                	mov    esi,eax
c000e749:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e74f:	83 ec 0c             	sub    esp,0xc
c000e752:	6a 02                	push   0x2
c000e754:	e8 3c b2 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e759:	83 c4 10             	add    esp,0x10
c000e75c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e760:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	6a 01                	push   0x1
c000e76b:	6a 02                	push   0x2
c000e76d:	50                   	push   eax
c000e76e:	52                   	push   edx
c000e76f:	53                   	push   ebx
c000e770:	e8 af bb ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e775:	83 c4 20             	add    esp,0x20
c000e778:	09 f0                	or     eax,esi
c000e77a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e77e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e783:	75 13                	jne    c000e798 <findRSDT(unsigned char*)+0x124>
c000e785:	c6 05 40 31 02 c0 00 	mov    BYTE PTR ds:0xc0023140,0x0
c000e78c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e790:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e794:	eb 22                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x144>
c000e796:	66 90                	xchg   ax,ax
c000e798:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e79d:	75 11                	jne    c000e7b0 <findRSDT(unsigned char*)+0x13c>
c000e79f:	c6 05 40 31 02 c0 01 	mov    BYTE PTR ds:0xc0023140,0x1
c000e7a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ae:	eb 08                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x144>
c000e7b0:	b8 00 00 00 00       	mov    eax,0x0
c000e7b5:	eb 05                	jmp    c000e7bc <findRSDT(unsigned char*)+0x148>
c000e7b7:	90                   	nop
c000e7b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7bc:	83 c4 50             	add    esp,0x50
c000e7bf:	5b                   	pop    ebx
c000e7c0:	5e                   	pop    esi
c000e7c1:	5f                   	pop    edi
c000e7c2:	c3                   	ret    
c000e7c3:	90                   	nop

c000e7c4 <findDataTable(unsigned char*, char*)>:
c000e7c4:	83 ec 1c             	sub    esp,0x1c
c000e7c7:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e7cc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7d2:	83 e0 04             	and    eax,0x4
c000e7d5:	84 c0                	test   al,al
c000e7d7:	75 07                	jne    c000e7e0 <findDataTable(unsigned char*, char*)+0x1c>
c000e7d9:	b8 00 00 00 00       	mov    eax,0x0
c000e7de:	eb 58                	jmp    c000e838 <findDataTable(unsigned char*, char*)+0x74>
c000e7e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7e8:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e7ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7f1:	7d 3d                	jge    c000e830 <findDataTable(unsigned char*, char*)+0x6c>
c000e7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f7:	c1 e0 03             	shl    eax,0x3
c000e7fa:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e7ff:	83 ec 04             	sub    esp,0x4
c000e802:	6a 04                	push   0x4
c000e804:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e808:	50                   	push   eax
c000e809:	e8 a2 1b ff ff       	call   c00003b0 <memcmp>
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	85 c0                	test   eax,eax
c000e813:	0f 94 c0             	sete   al
c000e816:	84 c0                	test   al,al
c000e818:	74 0e                	je     c000e828 <findDataTable(unsigned char*, char*)+0x64>
c000e81a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e81e:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e825:	eb 11                	jmp    c000e838 <findDataTable(unsigned char*, char*)+0x74>
c000e827:	90                   	nop
c000e828:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e82c:	eb ba                	jmp    c000e7e8 <findDataTable(unsigned char*, char*)+0x24>
c000e82e:	66 90                	xchg   ax,ax
c000e830:	b8 00 00 00 00       	mov    eax,0x0
c000e835:	8d 76 00             	lea    esi,[esi+0x0]
c000e838:	83 c4 1c             	add    esp,0x1c
c000e83b:	c3                   	ret    

c000e83c <scanMADT()>:
c000e83c:	53                   	push   ebx
c000e83d:	83 ec 38             	sub    esp,0x38
c000e840:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c000e845:	25 00 04 00 00       	and    eax,0x400
c000e84a:	74 14                	je     c000e860 <scanMADT()+0x24>
c000e84c:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e851:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e857:	83 e2 fb             	and    edx,0xfffffffb
c000e85a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e860:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e865:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e86b:	83 e0 04             	and    eax,0x4
c000e86e:	84 c0                	test   al,al
c000e870:	0f 84 8a 04 00 00    	je     c000ed00 <scanMADT()+0x4c4>
c000e876:	e8 05 fb ff ff       	call   c000e380 <findRSDP()>
c000e87b:	a3 4c 31 02 c0       	mov    ds:0xc002314c,eax
c000e880:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e885:	85 c0                	test   eax,eax
c000e887:	75 1b                	jne    c000e8a4 <scanMADT()+0x68>
c000e889:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e88e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e894:	83 e2 fb             	and    edx,0xfffffffb
c000e897:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e89d:	e9 66 04 00 00       	jmp    c000ed08 <scanMADT()+0x4cc>
c000e8a2:	66 90                	xchg   ax,ax
c000e8a4:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e8a9:	83 ec 0c             	sub    esp,0xc
c000e8ac:	50                   	push   eax
c000e8ad:	e8 c2 fd ff ff       	call   c000e674 <findRSDT(unsigned char*)>
c000e8b2:	83 c4 10             	add    esp,0x10
c000e8b5:	a3 48 31 02 c0       	mov    ds:0xc0023148,eax
c000e8ba:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8bf:	85 c0                	test   eax,eax
c000e8c1:	75 19                	jne    c000e8dc <scanMADT()+0xa0>
c000e8c3:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e8c8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ce:	83 e2 fb             	and    edx,0xfffffffb
c000e8d1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8d7:	e9 2c 04 00 00       	jmp    c000ed08 <scanMADT()+0x4cc>
c000e8dc:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8e1:	83 ec 0c             	sub    esp,0xc
c000e8e4:	50                   	push   eax
c000e8e5:	e8 26 fb ff ff       	call   c000e410 <loadACPITables(unsigned char*)>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8f2:	83 ec 08             	sub    esp,0x8
c000e8f5:	68 28 e4 01 c0       	push   0xc001e428
c000e8fa:	50                   	push   eax
c000e8fb:	e8 c4 fe ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e907:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e90c:	75 1a                	jne    c000e928 <scanMADT()+0xec>
c000e90e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e913:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e919:	83 e2 fe             	and    edx,0xfffffffe
c000e91c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e922:	e9 e1 03 00 00       	jmp    c000ed08 <scanMADT()+0x4cc>
c000e927:	90                   	nop
c000e928:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e930:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e937:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e93b:	0f 87 c7 03 00 00    	ja     c000ed08 <scanMADT()+0x4cc>
c000e941:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e949:	0f 87 b9 03 00 00    	ja     c000ed08 <scanMADT()+0x4cc>
c000e94f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e953:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e957:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95b:	8d 50 01             	lea    edx,[eax+0x1]
c000e95e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e962:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e966:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e96a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e96e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e972:	8d 50 01             	lea    edx,[eax+0x1]
c000e975:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e979:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e97d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e981:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e985:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e98a:	0f 86 74 03 00 00    	jbe    c000ed04 <scanMADT()+0x4c8>
c000e990:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e995:	75 5d                	jne    c000e9f4 <scanMADT()+0x1b8>
c000e997:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e99b:	8d 50 01             	lea    edx,[eax+0x1]
c000e99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9a2:	8a 15 40 33 02 c0    	mov    dl,BYTE PTR ds:0xc0023340
c000e9a8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e9ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9b6:	88 82 80 33 02 c0    	mov    BYTE PTR [edx-0x3ffdcc80],al
c000e9bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e9c0:	8d 42 01             	lea    eax,[edx+0x1]
c000e9c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9c7:	a0 40 33 02 c0       	mov    al,ds:0xc0023340
c000e9cc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9cf:	88 0d 40 33 02 c0    	mov    BYTE PTR ds:0xc0023340,cl
c000e9d5:	25 ff 00 00 00       	and    eax,0xff
c000e9da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9de:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e9e2:	88 90 60 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcca0],dl
c000e9e8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9ed:	e9 f6 02 00 00       	jmp    c000ece8 <scanMADT()+0x4ac>
c000e9f2:	66 90                	xchg   ax,ax
c000e9f4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e9f9:	0f 85 29 01 00 00    	jne    c000eb28 <scanMADT()+0x2ec>
c000e9ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea03:	8d 50 01             	lea    edx,[eax+0x1]
c000ea06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea0a:	8a 15 00 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023200
c000ea10:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea16:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea1a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea1e:	88 82 20 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcde0],al
c000ea24:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea30:	01 d0                	add    eax,edx
c000ea32:	83 c0 2c             	add    eax,0x2c
c000ea35:	8a 00                	mov    al,BYTE PTR [eax]
c000ea37:	31 d2                	xor    edx,edx
c000ea39:	88 c2                	mov    dl,al
c000ea3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea3f:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea46:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea4a:	25 ff 00 00 00       	and    eax,0xff
c000ea4f:	c1 e0 08             	shl    eax,0x8
c000ea52:	89 d1                	mov    ecx,edx
c000ea54:	09 c1                	or     ecx,eax
c000ea56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5a:	8d 50 02             	lea    edx,[eax+0x2]
c000ea5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea61:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea65:	25 ff 00 00 00       	and    eax,0xff
c000ea6a:	c1 e0 10             	shl    eax,0x10
c000ea6d:	09 c1                	or     ecx,eax
c000ea6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea73:	8d 50 03             	lea    edx,[eax+0x3]
c000ea76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea7a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea7e:	25 ff 00 00 00       	and    eax,0xff
c000ea83:	c1 e0 18             	shl    eax,0x18
c000ea86:	09 c1                	or     ecx,eax
c000ea88:	89 ca                	mov    edx,ecx
c000ea8a:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000ea8f:	25 ff 00 00 00       	and    eax,0xff
c000ea94:	89 14 85 40 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcdc0],edx
c000ea9b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaa0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa8:	01 d0                	add    eax,edx
c000eaaa:	83 c0 2c             	add    eax,0x2c
c000eaad:	8a 00                	mov    al,BYTE PTR [eax]
c000eaaf:	31 d2                	xor    edx,edx
c000eab1:	88 c2                	mov    dl,al
c000eab3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab7:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eabe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eac2:	25 ff 00 00 00       	and    eax,0xff
c000eac7:	c1 e0 08             	shl    eax,0x8
c000eaca:	89 d1                	mov    ecx,edx
c000eacc:	09 c1                	or     ecx,eax
c000eace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead2:	8d 50 02             	lea    edx,[eax+0x2]
c000ead5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ead9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eadd:	25 ff 00 00 00       	and    eax,0xff
c000eae2:	c1 e0 10             	shl    eax,0x10
c000eae5:	09 c1                	or     ecx,eax
c000eae7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaeb:	8d 50 03             	lea    edx,[eax+0x3]
c000eaee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaf6:	25 ff 00 00 00       	and    eax,0xff
c000eafb:	c1 e0 18             	shl    eax,0x18
c000eafe:	09 c1                	or     ecx,eax
c000eb00:	89 ca                	mov    edx,ecx
c000eb02:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eb07:	25 ff 00 00 00       	and    eax,0xff
c000eb0c:	89 14 85 c0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd40],edx
c000eb13:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb18:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eb1d:	40                   	inc    eax
c000eb1e:	a2 00 32 02 c0       	mov    ds:0xc0023200,al
c000eb23:	e9 c0 01 00 00       	jmp    c000ece8 <scanMADT()+0x4ac>
c000eb28:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb2d:	0f 85 fd 00 00 00    	jne    c000ec30 <scanMADT()+0x3f4>
c000eb33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb37:	8d 50 01             	lea    edx,[eax+0x1]
c000eb3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb42:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb46:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb4e:	8d 50 01             	lea    edx,[eax+0x1]
c000eb51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb59:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb5d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb69:	01 d0                	add    eax,edx
c000eb6b:	83 c0 2c             	add    eax,0x2c
c000eb6e:	8a 00                	mov    al,BYTE PTR [eax]
c000eb70:	31 d2                	xor    edx,edx
c000eb72:	88 c2                	mov    dl,al
c000eb74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb78:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb83:	25 ff 00 00 00       	and    eax,0xff
c000eb88:	c1 e0 08             	shl    eax,0x8
c000eb8b:	89 d1                	mov    ecx,edx
c000eb8d:	09 c1                	or     ecx,eax
c000eb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb93:	8d 50 02             	lea    edx,[eax+0x2]
c000eb96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb9e:	25 ff 00 00 00       	and    eax,0xff
c000eba3:	c1 e0 10             	shl    eax,0x10
c000eba6:	09 c1                	or     ecx,eax
c000eba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebac:	8d 50 03             	lea    edx,[eax+0x3]
c000ebaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebb7:	25 ff 00 00 00       	and    eax,0xff
c000ebbc:	c1 e0 18             	shl    eax,0x18
c000ebbf:	09 c8                	or     eax,ecx
c000ebc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebc5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebd2:	01 d0                	add    eax,edx
c000ebd4:	83 c0 2c             	add    eax,0x2c
c000ebd7:	8a 00                	mov    al,BYTE PTR [eax]
c000ebd9:	25 ff 00 00 00       	and    eax,0xff
c000ebde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebe2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebe5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebe9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebed:	81 e2 ff 00 00 00    	and    edx,0xff
c000ebf3:	c1 e2 08             	shl    edx,0x8
c000ebf6:	09 d0                	or     eax,edx
c000ebf8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebfd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec02:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec06:	25 ff 00 00 00       	and    eax,0xff
c000ec0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec0f:	88 90 a0 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0760],dl
c000ec15:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec19:	31 d2                	xor    edx,edx
c000ec1b:	88 c2                	mov    dl,al
c000ec1d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec22:	66 89 84 12 e0 31 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdce20],ax
c000ec2a:	e9 b9 00 00 00       	jmp    c000ece8 <scanMADT()+0x4ac>
c000ec2f:	90                   	nop
c000ec30:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec35:	0f 85 a1 00 00 00    	jne    c000ecdc <scanMADT()+0x4a0>
c000ec3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3f:	8d 50 01             	lea    edx,[eax+0x1]
c000ec42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec4a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec4e:	25 ff 00 00 00       	and    eax,0xff
c000ec53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec5f:	01 d0                	add    eax,edx
c000ec61:	83 c0 2c             	add    eax,0x2c
c000ec64:	8a 00                	mov    al,BYTE PTR [eax]
c000ec66:	31 d2                	xor    edx,edx
c000ec68:	88 c2                	mov    dl,al
c000ec6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec75:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec79:	25 ff 00 00 00       	and    eax,0xff
c000ec7e:	c1 e0 08             	shl    eax,0x8
c000ec81:	09 d0                	or     eax,edx
c000ec83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec87:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec90:	8d 50 01             	lea    edx,[eax+0x1]
c000ec93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec9f:	25 ff 00 00 00       	and    eax,0xff
c000eca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecac:	c1 e0 08             	shl    eax,0x8
c000ecaf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecb3:	89 c1                	mov    ecx,eax
c000ecb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecb9:	c1 e0 18             	shl    eax,0x18
c000ecbc:	89 c3                	mov    ebx,eax
c000ecbe:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c000ecc3:	8d 50 01             	lea    edx,[eax+0x1]
c000ecc6:	89 15 50 31 02 c0    	mov    DWORD PTR ds:0xc0023150,edx
c000eccc:	09 d9                	or     ecx,ebx
c000ecce:	89 ca                	mov    edx,ecx
c000ecd0:	89 14 85 60 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcea0],edx
c000ecd7:	eb 0f                	jmp    c000ece8 <scanMADT()+0x4ac>
c000ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecdc:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ece1:	75 05                	jne    c000ece8 <scanMADT()+0x4ac>
c000ece3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ece8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ecec:	31 d2                	xor    edx,edx
c000ecee:	88 c2                	mov    dl,al
c000ecf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecf4:	01 d0                	add    eax,edx
c000ecf6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecfa:	e9 31 fc ff ff       	jmp    c000e930 <scanMADT()+0xf4>
c000ecff:	90                   	nop
c000ed00:	90                   	nop
c000ed01:	eb 05                	jmp    c000ed08 <scanMADT()+0x4cc>
c000ed03:	90                   	nop
c000ed04:	90                   	nop
c000ed05:	8d 76 00             	lea    esi,[esi+0x0]
c000ed08:	83 c4 38             	add    esp,0x38
c000ed0b:	5b                   	pop    ebx
c000ed0c:	c3                   	ret    
c000ed0d:	90                   	nop
c000ed0e:	66 90                	xchg   ax,ax

c000ed10 <ACPI::ACPI()>:
c000ed10:	83 ec 0c             	sub    esp,0xc
c000ed13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed17:	83 ec 08             	sub    esp,0x8
c000ed1a:	68 2d e4 01 c0       	push   0xc001e42d
c000ed1f:	50                   	push   eax
c000ed20:	e8 9b d4 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c000ed2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed31:	89 10                	mov    DWORD PTR [eax],edx
c000ed33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed37:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed42:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed50:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed5a:	e8 dd fa ff ff       	call   c000e83c <scanMADT()>
c000ed5f:	90                   	nop
c000ed60:	83 c4 0c             	add    esp,0xc
c000ed63:	c3                   	ret    

c000ed64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed64:	83 ec 2c             	sub    esp,0x2c
c000ed67:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed6f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed73:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed77:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed7c:	88 d0                	mov    al,dl
c000ed7e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed8f:	90                   	nop
c000ed90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed94:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed9a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed9e:	0f 8d 9c 00 00 00    	jge    c000ee40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000eda4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eda8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edac:	83 c2 2a             	add    edx,0x2a
c000edaf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edb3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000edb8:	75 7a                	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc2:	83 c2 2a             	add    edx,0x2a
c000edc5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edc9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000edcd:	75 65                	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edcf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000edd4:	74 3a                	je     c000ee10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000edd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edde:	83 c2 2a             	add    edx,0x2a
c000ede1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ede5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edec:	39 c2                	cmp    edx,eax
c000edee:	74 10                	je     c000ee00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	68 a8 e3 01 c0       	push   0xc001e3a8
c000edf8:	e8 ea 18 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000edfd:	83 c4 10             	add    esp,0x10
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	68 32 e4 01 c0       	push   0xc001e432
c000ee08:	e8 da 18 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000ee0d:	83 c4 10             	add    esp,0x10
c000ee10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee1c:	83 c2 2a             	add    edx,0x2a
c000ee1f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee23:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee25:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee28:	89 01                	mov    DWORD PTR [ecx],eax
c000ee2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee2d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee32:	66 90                	xchg   ax,ax
c000ee34:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee38:	e9 53 ff ff ff       	jmp    c000ed90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee40:	90                   	nop
c000ee41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee45:	83 c4 2c             	add    esp,0x2c
c000ee48:	c2 04 00             	ret    0x4
c000ee4b:	90                   	nop

c000ee4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee4c:	83 ec 1c             	sub    esp,0x1c
c000ee4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee60:	88 c8                	mov    al,cl
c000ee62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee66:	88 d0                	mov    al,dl
c000ee68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee70:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee7d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee81:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee89:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee93:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee9a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eea9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eead:	8d 48 01             	lea    ecx,[eax+0x1]
c000eeb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb4:	83 c2 2a             	add    edx,0x2a
c000eeb7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eecc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eed0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eede:	8d 50 01             	lea    edx,[eax+0x1]
c000eee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eeeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeef:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef5:	3d 00 02 00 00       	cmp    eax,0x200
c000eefa:	75 10                	jne    c000ef0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eefc:	83 ec 0c             	sub    esp,0xc
c000eeff:	68 41 e4 01 c0       	push   0xc001e441
c000ef04:	e8 de 17 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000ef09:	83 c4 10             	add    esp,0x10
c000ef0c:	90                   	nop
c000ef0d:	83 c4 1c             	add    esp,0x1c
c000ef10:	c3                   	ret    
c000ef11:	90                   	nop
c000ef12:	66 90                	xchg   ax,ax

c000ef14 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef14:	b8 00 00 00 00       	mov    eax,0x0
c000ef19:	c3                   	ret    
c000ef1a:	66 90                	xchg   ax,ax

c000ef1c <ACPI::detectPCI()>:
c000ef1c:	53                   	push   ebx
c000ef1d:	83 ec 28             	sub    esp,0x28
c000ef20:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef25:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef2a:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ef2f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef35:	83 e0 04             	and    eax,0x4
c000ef38:	84 c0                	test   al,al
c000ef3a:	74 2c                	je     c000ef68 <ACPI::detectPCI()+0x4c>
c000ef3c:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000ef41:	83 ec 08             	sub    esp,0x8
c000ef44:	68 5e e4 01 c0       	push   0xc001e45e
c000ef49:	50                   	push   eax
c000ef4a:	e8 75 f8 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000ef4f:	83 c4 10             	add    esp,0x10
c000ef52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef56:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef5b:	74 0b                	je     c000ef68 <ACPI::detectPCI()+0x4c>
c000ef5d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef62:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef67:	90                   	nop
c000ef68:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef74:	8a 00                	mov    al,BYTE PTR [eax]
c000ef76:	3c 01                	cmp    al,0x1
c000ef78:	75 0e                	jne    c000ef88 <ACPI::detectPCI()+0x6c>
c000ef7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef7f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef84:	eb 2a                	jmp    c000efb0 <ACPI::detectPCI()+0x94>
c000ef86:	66 90                	xchg   ax,ax
c000ef88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef8c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef8e:	3c 02                	cmp    al,0x2
c000ef90:	75 1e                	jne    c000efb0 <ACPI::detectPCI()+0x94>
c000ef92:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef97:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ef9c:	74 12                	je     c000efb0 <ACPI::detectPCI()+0x94>
c000ef9e:	83 ec 0c             	sub    esp,0xc
c000efa1:	68 d8 e3 01 c0       	push   0xc001e3d8
c000efa6:	e8 3c 17 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	66 90                	xchg   ax,ax
c000efb0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efb4:	83 f0 01             	xor    eax,0x1
c000efb7:	84 c0                	test   al,al
c000efb9:	74 41                	je     c000effc <ACPI::detectPCI()+0xe0>
c000efbb:	e8 90 11 ff ff       	call   c0000150 <manualPCIProbe>
c000efc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efc4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efc9:	75 0d                	jne    c000efd8 <ACPI::detectPCI()+0xbc>
c000efcb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd5:	eb 25                	jmp    c000effc <ACPI::detectPCI()+0xe0>
c000efd7:	90                   	nop
c000efd8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efdd:	75 1d                	jne    c000effc <ACPI::detectPCI()+0xe0>
c000efdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efe9:	74 11                	je     c000effc <ACPI::detectPCI()+0xe0>
c000efeb:	83 ec 0c             	sub    esp,0xc
c000efee:	68 d8 e3 01 c0       	push   0xc001e3d8
c000eff3:	e8 ef 16 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c000eff8:	83 c4 10             	add    esp,0x10
c000effb:	90                   	nop
c000effc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f001:	0f 84 85 00 00 00    	je     c000f08c <ACPI::detectPCI()+0x170>
c000f007:	83 ec 0c             	sub    esp,0xc
c000f00a:	68 63 e4 01 c0       	push   0xc001e463
c000f00f:	e8 9f 8e ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f01f:	83 ec 0c             	sub    esp,0xc
c000f022:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f026:	e8 2e 8e ff ff       	call   c0007e59 <malloc>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	89 c3                	mov    ebx,eax
c000f030:	83 ec 0c             	sub    esp,0xc
c000f033:	53                   	push   ebx
c000f034:	e8 dd 94 00 00       	call   c0018516 <PCI::PCI()>
c000f039:	83 c4 10             	add    esp,0x10
c000f03c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f044:	83 ec 08             	sub    esp,0x8
c000f047:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f04b:	50                   	push   eax
c000f04c:	e8 d7 cf ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f058:	8b 00                	mov    eax,DWORD PTR [eax]
c000f05a:	83 c0 08             	add    eax,0x8
c000f05d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f05f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f064:	74 0a                	je     c000f070 <ACPI::detectPCI()+0x154>
c000f066:	ba 01 00 00 00       	mov    edx,0x1
c000f06b:	eb 0b                	jmp    c000f078 <ACPI::detectPCI()+0x15c>
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	ba 02 00 00 00       	mov    edx,0x2
c000f075:	8d 76 00             	lea    esi,[esi+0x0]
c000f078:	6a 00                	push   0x0
c000f07a:	6a 00                	push   0x0
c000f07c:	52                   	push   edx
c000f07d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f081:	ff d0                	call   eax
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	e9 91 00 00 00       	jmp    c000f11c <ACPI::detectPCI()+0x200>
c000f08b:	90                   	nop
c000f08c:	83 ec 0c             	sub    esp,0xc
c000f08f:	68 7b e4 01 c0       	push   0xc001e47b
c000f094:	e8 1a 8e ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f099:	83 c4 10             	add    esp,0x10
c000f09c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0a3:	83 ec 0c             	sub    esp,0xc
c000f0a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0aa:	e8 aa 8d ff ff       	call   c0007e59 <malloc>
c000f0af:	83 c4 10             	add    esp,0x10
c000f0b2:	89 c3                	mov    ebx,eax
c000f0b4:	83 ec 0c             	sub    esp,0xc
c000f0b7:	53                   	push   ebx
c000f0b8:	e8 85 9f 00 00       	call   c0019042 <IDE::IDE()>
c000f0bd:	83 c4 10             	add    esp,0x10
c000f0c0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0cf:	50                   	push   eax
c000f0d0:	e8 53 cf ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f0d5:	83 c4 10             	add    esp,0x10
c000f0d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0dc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ea:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f100:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f104:	8b 00                	mov    eax,DWORD PTR [eax]
c000f106:	83 c0 08             	add    eax,0x8
c000f109:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10b:	6a 00                	push   0x0
c000f10d:	6a 00                	push   0x0
c000f10f:	6a 00                	push   0x0
c000f111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f115:	ff d0                	call   eax
c000f117:	83 c4 10             	add    esp,0x10
c000f11a:	66 90                	xchg   ax,ax
c000f11c:	90                   	nop
c000f11d:	83 c4 28             	add    esp,0x28
c000f120:	5b                   	pop    ebx
c000f121:	c3                   	ret    
c000f122:	66 90                	xchg   ax,ax

c000f124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f124:	83 ec 1c             	sub    esp,0x1c
c000f127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f12b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f12e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f132:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f138:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f13c:	25 ff 00 00 00       	and    eax,0xff
c000f141:	83 ec 08             	sub    esp,0x8
c000f144:	50                   	push   eax
c000f145:	52                   	push   edx
c000f146:	e8 ff 83 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c000f14b:	83 c4 10             	add    esp,0x10
c000f14e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f152:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f158:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f15c:	25 ff 00 00 00       	and    eax,0xff
c000f161:	83 ec 04             	sub    esp,0x4
c000f164:	6a 01                	push   0x1
c000f166:	50                   	push   eax
c000f167:	52                   	push   edx
c000f168:	e8 f3 84 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f16d:	83 c4 10             	add    esp,0x10
c000f170:	90                   	nop
c000f171:	83 c4 1c             	add    esp,0x1c
c000f174:	c3                   	ret    
c000f175:	90                   	nop
c000f176:	66 90                	xchg   ax,ax

c000f178 <ACPI::sleep()>:
c000f178:	83 ec 0c             	sub    esp,0xc
c000f17b:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f180:	85 c0                	test   eax,eax
c000f182:	74 08                	je     c000f18c <ACPI::sleep()+0x14>
c000f184:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f189:	ff d0                	call   eax
c000f18b:	90                   	nop
c000f18c:	90                   	nop
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	c3                   	ret    
c000f191:	90                   	nop
c000f192:	66 90                	xchg   ax,ax

c000f194 <ACPI::open(int, int, void*)>:
c000f194:	57                   	push   edi
c000f195:	56                   	push   esi
c000f196:	53                   	push   ebx
c000f197:	81 ec 70 01 00 00    	sub    esp,0x170
c000f19d:	83 ec 0c             	sub    esp,0xc
c000f1a0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1a7:	e8 70 fd ff ff       	call   c000ef1c <ACPI::detectPCI()>
c000f1ac:	83 c4 10             	add    esp,0x10
c000f1af:	83 ec 0c             	sub    esp,0xc
c000f1b2:	68 00 e4 01 c0       	push   0xc001e400
c000f1b7:	e8 f7 8c ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f1bc:	83 c4 10             	add    esp,0x10
c000f1bf:	83 ec 0c             	sub    esp,0xc
c000f1c2:	68 90 e4 01 c0       	push   0xc001e490
c000f1c7:	e8 07 34 00 00       	call   c00125d3 <Thr::loadKernelSymbolTable(char const*)>
c000f1cc:	83 c4 10             	add    esp,0x10
c000f1cf:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1d7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1e2:	83 ec 0c             	sub    esp,0xc
c000f1e5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1ec:	e8 68 8c ff ff       	call   c0007e59 <malloc>
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	89 c3                	mov    ebx,eax
c000f1f6:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f1fb:	83 ec 04             	sub    esp,0x4
c000f1fe:	50                   	push   eax
c000f1ff:	68 ae e4 01 c0       	push   0xc001e4ae
c000f204:	53                   	push   ebx
c000f205:	e8 54 bf ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f20a:	83 c4 10             	add    esp,0x10
c000f20d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f214:	83 ec 08             	sub    esp,0x8
c000f217:	6a 01                	push   0x1
c000f219:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f220:	e8 f9 bf ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000f225:	83 c4 10             	add    esp,0x10
c000f228:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f22f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f237:	75 17                	jne    c000f250 <ACPI::open(int, int, void*)+0xbc>
c000f239:	83 ec 0c             	sub    esp,0xc
c000f23c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f243:	e8 34 c0 ff ff       	call   c000b27c <File::close()>
c000f248:	83 c4 10             	add    esp,0x10
c000f24b:	eb 0b                	jmp    c000f258 <ACPI::open(int, int, void*)+0xc4>
c000f24d:	8d 76 00             	lea    esi,[esi+0x0]
c000f250:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f258:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f260:	74 1e                	je     c000f280 <ACPI::open(int, int, void*)+0xec>
c000f262:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f269:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26b:	83 c0 08             	add    eax,0x8
c000f26e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f27a:	ff d0                	call   eax
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	90                   	nop
c000f280:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f287:	83 f0 01             	xor    eax,0x1
c000f28a:	84 c0                	test   al,al
c000f28c:	74 42                	je     c000f2d0 <ACPI::open(int, int, void*)+0x13c>
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	68 cc e4 01 c0       	push   0xc001e4cc
c000f296:	e8 18 8c ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	83 ec 04             	sub    esp,0x4
c000f2a1:	6a 0c                	push   0xc
c000f2a3:	68 e7 e4 01 c0       	push   0xc001e4e7
c000f2a8:	68 f8 e4 01 c0       	push   0xc001e4f8
c000f2ad:	e8 20 1b 00 00       	call   c0010dd2 <Reg::readIntWithDefault(char*, char*, int)>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2c6:	e8 d4 a8 ff ff       	call   c0009b9f <Virt::setupPageSwapping(int)>
c000f2cb:	83 c4 10             	add    esp,0x10
c000f2ce:	66 90                	xchg   ax,ax
c000f2d0:	83 ec 0c             	sub    esp,0xc
c000f2d3:	68 80 d5 01 c0       	push   0xc001d580
c000f2d8:	e8 d6 8b ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f2dd:	83 c4 10             	add    esp,0x10
c000f2e0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2e7:	83 ec 08             	sub    esp,0x8
c000f2ea:	6a 12                	push   0x12
c000f2ec:	50                   	push   eax
c000f2ed:	e8 4e d0 ff ff       	call   c000c340 <getDevicesOfType(DeviceType)>
c000f2f2:	83 c4 0c             	add    esp,0xc
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f302:	50                   	push   eax
c000f303:	e8 84 d6 00 00       	call   c001c98c <LinkedList<Device>::isEmpty()>
c000f308:	83 c4 10             	add    esp,0x10
c000f30b:	83 f0 01             	xor    eax,0x1
c000f30e:	84 c0                	test   al,al
c000f310:	0f 84 46 01 00 00    	je     c000f45c <ACPI::open(int, int, void*)+0x2c8>
c000f316:	83 ec 0c             	sub    esp,0xc
c000f319:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f320:	50                   	push   eax
c000f321:	e8 82 d6 00 00       	call   c001c9a8 <LinkedList<Device>::getFirstElement()>
c000f326:	83 c4 10             	add    esp,0x10
c000f329:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f330:	83 ec 0c             	sub    esp,0xc
c000f333:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f33a:	50                   	push   eax
c000f33b:	e8 70 d6 00 00       	call   c001c9b0 <LinkedList<Device>::removeFirst()>
c000f340:	83 c4 10             	add    esp,0x10
c000f343:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f34a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f351:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f362:	ba 09 00 00 00       	mov    edx,0x9
c000f367:	fc                   	cld    
c000f368:	89 c7                	mov    edi,eax
c000f36a:	89 de                	mov    esi,ebx
c000f36c:	89 d1                	mov    ecx,edx
c000f36e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f370:	83 ec 08             	sub    esp,0x8
c000f373:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f377:	50                   	push   eax
c000f378:	83 ec 24             	sub    esp,0x24
c000f37b:	89 e0                	mov    eax,esp
c000f37d:	89 c3                	mov    ebx,eax
c000f37f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f383:	ba 09 00 00 00       	mov    edx,0x9
c000f388:	89 df                	mov    edi,ebx
c000f38a:	89 c6                	mov    esi,eax
c000f38c:	89 d1                	mov    ecx,edx
c000f38e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f390:	e8 63 96 00 00       	call   c00189f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f395:	83 c4 30             	add    esp,0x30
c000f398:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f39f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3a7:	0f 84 4b ff ff ff    	je     c000f2f8 <ACPI::open(int, int, void*)+0x164>
c000f3ad:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3b8:	83 ec 0c             	sub    esp,0xc
c000f3bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3c2:	e8 92 8a ff ff       	call   c0007e59 <malloc>
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	89 c3                	mov    ebx,eax
c000f3cc:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f3d1:	83 ec 04             	sub    esp,0x4
c000f3d4:	50                   	push   eax
c000f3d5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 7c bd ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f3e2:	83 c4 10             	add    esp,0x10
c000f3e5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3f6:	e8 91 c0 ff ff       	call   c000b48c <File::exists()>
c000f3fb:	83 c4 10             	add    esp,0x10
c000f3fe:	84 c0                	test   al,al
c000f400:	74 2a                	je     c000f42c <ACPI::open(int, int, void*)+0x298>
c000f402:	83 ec 08             	sub    esp,0x8
c000f405:	6a 01                	push   0x1
c000f407:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f40e:	e8 37 3c 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000f413:	83 c4 10             	add    esp,0x10
c000f416:	83 ec 08             	sub    esp,0x8
c000f419:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f420:	50                   	push   eax
c000f421:	e8 55 3e 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000f426:	83 c4 10             	add    esp,0x10
c000f429:	8d 76 00             	lea    esi,[esi+0x0]
c000f42c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f434:	0f 84 be fe ff ff    	je     c000f2f8 <ACPI::open(int, int, void*)+0x164>
c000f43a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f441:	8b 00                	mov    eax,DWORD PTR [eax]
c000f443:	83 c0 08             	add    eax,0x8
c000f446:	8b 00                	mov    eax,DWORD PTR [eax]
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f452:	ff d0                	call   eax
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	e9 9c fe ff ff       	jmp    c000f2f8 <ACPI::open(int, int, void*)+0x164>
c000f45c:	83 ec 0c             	sub    esp,0xc
c000f45f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f466:	50                   	push   eax
c000f467:	e8 1c d5 00 00       	call   c001c988 <LinkedList<Device>::~LinkedList()>
c000f46c:	83 c4 10             	add    esp,0x10
c000f46f:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000f475:	83 ec 08             	sub    esp,0x8
c000f478:	6a 01                	push   0x1
c000f47a:	68 ff e4 01 c0       	push   0xc001e4ff
c000f47f:	e8 c6 3b 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	83 ec 08             	sub    esp,0x8
c000f48a:	53                   	push   ebx
c000f48b:	50                   	push   eax
c000f48c:	e8 ea 3d 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000f491:	83 c4 10             	add    esp,0x10
c000f494:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f499:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f49f:	83 e0 04             	and    eax,0x4
c000f4a2:	84 c0                	test   al,al
c000f4a4:	0f 84 16 01 00 00    	je     c000f5c0 <ACPI::open(int, int, void*)+0x42c>
c000f4aa:	83 ec 0c             	sub    esp,0xc
c000f4ad:	68 1c e5 01 c0       	push   0xc001e51c
c000f4b2:	e8 fc 89 ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f4b7:	83 c4 10             	add    esp,0x10
c000f4ba:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4c5:	83 ec 0c             	sub    esp,0xc
c000f4c8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4cf:	e8 85 89 ff ff       	call   c0007e59 <malloc>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	89 c3                	mov    ebx,eax
c000f4d9:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f4de:	83 ec 04             	sub    esp,0x4
c000f4e1:	50                   	push   eax
c000f4e2:	68 39 e5 01 c0       	push   0xc001e539
c000f4e7:	53                   	push   ebx
c000f4e8:	e8 71 bc ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4f7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4ff:	74 1b                	je     c000f51c <ACPI::open(int, int, void*)+0x388>
c000f501:	83 ec 0c             	sub    esp,0xc
c000f504:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f50b:	e8 7c bf ff ff       	call   c000b48c <File::exists()>
c000f510:	83 c4 10             	add    esp,0x10
c000f513:	84 c0                	test   al,al
c000f515:	74 05                	je     c000f51c <ACPI::open(int, int, void*)+0x388>
c000f517:	b0 01                	mov    al,0x1
c000f519:	eb 05                	jmp    c000f520 <ACPI::open(int, int, void*)+0x38c>
c000f51b:	90                   	nop
c000f51c:	b0 00                	mov    al,0x0
c000f51e:	66 90                	xchg   ax,ax
c000f520:	84 c0                	test   al,al
c000f522:	74 28                	je     c000f54c <ACPI::open(int, int, void*)+0x3b8>
c000f524:	83 ec 08             	sub    esp,0x8
c000f527:	6a 01                	push   0x1
c000f529:	68 39 e5 01 c0       	push   0xc001e539
c000f52e:	e8 17 3b 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	83 ec 08             	sub    esp,0x8
c000f539:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f540:	50                   	push   eax
c000f541:	e8 35 3d 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	8d 76 00             	lea    esi,[esi+0x0]
c000f54c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f554:	74 2a                	je     c000f580 <ACPI::open(int, int, void*)+0x3ec>
c000f556:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f55e:	74 20                	je     c000f580 <ACPI::open(int, int, void*)+0x3ec>
c000f560:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f567:	8b 00                	mov    eax,DWORD PTR [eax]
c000f569:	83 c0 08             	add    eax,0x8
c000f56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56e:	83 ec 0c             	sub    esp,0xc
c000f571:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f578:	ff d0                	call   eax
c000f57a:	83 c4 10             	add    esp,0x10
c000f57d:	8d 76 00             	lea    esi,[esi+0x0]
c000f580:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000f585:	83 ec 08             	sub    esp,0x8
c000f588:	68 56 e5 01 c0       	push   0xc001e556
c000f58d:	50                   	push   eax
c000f58e:	e8 31 f2 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000f593:	83 c4 10             	add    esp,0x10
c000f596:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f59d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5a5:	74 19                	je     c000f5c0 <ACPI::open(int, int, void*)+0x42c>
c000f5a7:	83 ec 08             	sub    esp,0x8
c000f5aa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5b1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5b8:	e8 67 fb ff ff       	call   c000f124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5bd:	83 c4 10             	add    esp,0x10
c000f5c0:	b8 00 00 00 00       	mov    eax,0x0
c000f5c5:	81 c4 70 01 00 00    	add    esp,0x170
c000f5cb:	5b                   	pop    ebx
c000f5cc:	5e                   	pop    esi
c000f5cd:	5f                   	pop    edi
c000f5ce:	c3                   	ret    
c000f5cf:	90                   	nop

c000f5d0 <CPU::close(int, int, void*)>:
c000f5d0:	31 c0                	xor    eax,eax
c000f5d2:	c3                   	ret    
c000f5d3:	90                   	nop

c000f5d4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5d4:	60                   	pusha  
c000f5d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5e1:	9c                   	pushf  
c000f5e2:	fa                   	cli    
c000f5e3:	0f 09                	wbinvd 
c000f5e5:	0f 30                	wrmsr  
c000f5e7:	9d                   	popf   
c000f5e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5ec:	89 02                	mov    DWORD PTR [edx],eax
c000f5ee:	61                   	popa   
c000f5ef:	c3                   	ret    

c000f5f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5f0:	60                   	pusha  
c000f5f1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5f5:	9c                   	pushf  
c000f5f6:	fa                   	cli    
c000f5f7:	0f 09                	wbinvd 
c000f5f9:	31 c0                	xor    eax,eax
c000f5fb:	31 d2                	xor    edx,edx
c000f5fd:	0f 32                	rdmsr  
c000f5ff:	9d                   	popf   
c000f600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f604:	89 02                	mov    DWORD PTR [edx],eax
c000f606:	61                   	popa   
c000f607:	c3                   	ret    

c000f608 <CPU::AMD_K6_writeback(int, int, int)>:
c000f608:	56                   	push   esi
c000f609:	53                   	push   ebx
c000f60a:	83 ec 10             	sub    esp,0x10
c000f60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f611:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f616:	75 5d                	jne    c000f675 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f618:	83 f8 08             	cmp    eax,0x8
c000f61b:	75 09                	jne    c000f626 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f61d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f622:	7e 13                	jle    c000f637 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f624:	eb 30                	jmp    c000f656 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f626:	83 f8 06             	cmp    eax,0x6
c000f629:	7c 4a                	jl     c000f675 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f62b:	83 f8 07             	cmp    eax,0x7
c000f62e:	7e 07                	jle    c000f637 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f630:	83 f8 09             	cmp    eax,0x9
c000f633:	74 21                	je     c000f656 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f635:	eb 3e                	jmp    c000f675 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f637:	89 e6                	mov    esi,esp
c000f639:	8b 1d 5c 09 02 c0    	mov    ebx,DWORD PTR ds:0xc002095c
c000f63f:	56                   	push   esi
c000f640:	c1 eb 15             	shr    ebx,0x15
c000f643:	68 82 00 00 c0       	push   0xc0000082
c000f648:	83 e3 7e             	and    ebx,0x7e
c000f64b:	e8 a0 ff ff ff       	call   c000f5f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f650:	56                   	push   esi
c000f651:	6a 00                	push   0x0
c000f653:	53                   	push   ebx
c000f654:	eb 12                	jmp    c000f668 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f656:	89 e3                	mov    ebx,esp
c000f658:	53                   	push   ebx
c000f659:	68 82 00 00 c0       	push   0xc0000082
c000f65e:	e8 8d ff ff ff       	call   c000f5f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f663:	53                   	push   ebx
c000f664:	6a 00                	push   0x0
c000f666:	6a 00                	push   0x0
c000f668:	68 82 00 00 c0       	push   0xc0000082
c000f66d:	e8 62 ff ff ff       	call   c000f5d4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f672:	83 c4 18             	add    esp,0x18
c000f675:	83 c4 10             	add    esp,0x10
c000f678:	5b                   	pop    ebx
c000f679:	5e                   	pop    esi
c000f67a:	c3                   	ret    
c000f67b:	90                   	nop

c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f67c:	55                   	push   ebp
c000f67d:	57                   	push   edi
c000f67e:	56                   	push   esi
c000f67f:	53                   	push   ebx
c000f680:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f684:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f688:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f68c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f690:	39 05 b0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8b0,eax
c000f696:	75 23                	jne    c000f6bb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f698:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c000f69d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6a1:	89 06                	mov    DWORD PTR [esi],eax
c000f6a3:	a1 a8 33 02 c0       	mov    eax,ds:0xc00233a8
c000f6a8:	89 07                	mov    DWORD PTR [edi],eax
c000f6aa:	a1 a4 33 02 c0       	mov    eax,ds:0xc00233a4
c000f6af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6b2:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c000f6b7:	89 02                	mov    DWORD PTR [edx],eax
c000f6b9:	eb 3f                	jmp    c000f6fa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6bb:	31 c9                	xor    ecx,ecx
c000f6bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6c1:	0f a2                	cpuid  
c000f6c3:	89 06                	mov    DWORD PTR [esi],eax
c000f6c5:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6ce:	89 10                	mov    DWORD PTR [eax],edx
c000f6d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d4:	a3 b0 f8 01 c0       	mov    ds:0xc001f8b0,eax
c000f6d9:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6db:	a3 ac 33 02 c0       	mov    ds:0xc00233ac,eax
c000f6e0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6e2:	a3 a8 33 02 c0       	mov    ds:0xc00233a8,eax
c000f6e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6ea:	a3 a4 33 02 c0       	mov    ds:0xc00233a4,eax
c000f6ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f5:	a3 a0 33 02 c0       	mov    ds:0xc00233a0,eax
c000f6fa:	5b                   	pop    ebx
c000f6fb:	5e                   	pop    esi
c000f6fc:	5f                   	pop    edi
c000f6fd:	5d                   	pop    ebp
c000f6fe:	c3                   	ret    
c000f6ff:	90                   	nop

c000f700 <CPU::cpuidCheckEDX(unsigned int)>:
c000f700:	83 ec 10             	sub    esp,0x10
c000f703:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f707:	50                   	push   eax
c000f708:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70c:	50                   	push   eax
c000f70d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f711:	50                   	push   eax
c000f712:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f716:	50                   	push   eax
c000f717:	6a 01                	push   0x1
c000f719:	e8 5e ff ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f722:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f726:	0f 95 c0             	setne  al
c000f729:	83 c4 24             	add    esp,0x24
c000f72c:	c3                   	ret    
c000f72d:	90                   	nop

c000f72e <CPU::cpuidCheckECX(unsigned int)>:
c000f72e:	83 ec 10             	sub    esp,0x10
c000f731:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f735:	50                   	push   eax
c000f736:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73a:	50                   	push   eax
c000f73b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73f:	50                   	push   eax
c000f740:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f744:	50                   	push   eax
c000f745:	6a 01                	push   0x1
c000f747:	e8 30 ff ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f750:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f754:	0f 95 c0             	setne  al
c000f757:	83 c4 24             	add    esp,0x24
c000f75a:	c3                   	ret    
c000f75b:	90                   	nop

c000f75c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f75c:	83 ec 10             	sub    esp,0x10
c000f75f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f763:	50                   	push   eax
c000f764:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f768:	50                   	push   eax
c000f769:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76d:	50                   	push   eax
c000f76e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f772:	50                   	push   eax
c000f773:	6a 07                	push   0x7
c000f775:	e8 02 ff ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f77a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f782:	0f 95 c0             	setne  al
c000f785:	83 c4 24             	add    esp,0x24
c000f788:	c3                   	ret    
c000f789:	90                   	nop

c000f78a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f78a:	83 ec 10             	sub    esp,0x10
c000f78d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f791:	50                   	push   eax
c000f792:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f796:	50                   	push   eax
c000f797:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79b:	50                   	push   eax
c000f79c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a0:	50                   	push   eax
c000f7a1:	6a 07                	push   0x7
c000f7a3:	e8 d4 fe ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7ac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7b0:	0f 95 c0             	setne  al
c000f7b3:	83 c4 24             	add    esp,0x24
c000f7b6:	c3                   	ret    
c000f7b7:	90                   	nop

c000f7b8 <CPU::CPU()>:
c000f7b8:	83 ec 0c             	sub    esp,0xc
c000f7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7bf:	83 ec 08             	sub    esp,0x8
c000f7c2:	68 79 e6 01 c0       	push   0xc001e679
c000f7c7:	50                   	push   eax
c000f7c8:	e8 f3 c9 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c000f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d9:	89 10                	mov    DWORD PTR [eax],edx
c000f7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7df:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ed:	05 78 01 00 00       	add    eax,0x178
c000f7f2:	83 ec 0c             	sub    esp,0xc
c000f7f5:	50                   	push   eax
c000f7f6:	e8 23 7f ff ff       	call   c000771e <GDT::GDT()>
c000f7fb:	83 c4 10             	add    esp,0x10
c000f7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f802:	05 7c 09 00 00       	add    eax,0x97c
c000f807:	83 ec 0c             	sub    esp,0xc
c000f80a:	50                   	push   eax
c000f80b:	e8 44 81 ff ff       	call   c0007954 <IDT::IDT()>
c000f810:	83 c4 10             	add    esp,0x10
c000f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f817:	05 7c 11 00 00       	add    eax,0x117c
c000f81c:	83 ec 0c             	sub    esp,0xc
c000f81f:	50                   	push   eax
c000f820:	e8 b3 9a ff ff       	call   c00092d8 <TSS::TSS()>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f82c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f837:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f841:	90                   	nop
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	c3                   	ret    

c000f846 <CPU::displayFeatures()>:
c000f846:	c3                   	ret    
c000f847:	90                   	nop

c000f848 <CPU::detectFeatures()>:
c000f848:	55                   	push   ebp
c000f849:	57                   	push   edi
c000f84a:	56                   	push   esi
c000f84b:	53                   	push   ebx
c000f84c:	83 ec 30             	sub    esp,0x30
c000f84f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f853:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f85d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f864:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f86a:	6a 0d                	push   0xd
c000f86c:	6a 00                	push   0x0
c000f86e:	55                   	push   ebp
c000f86f:	e8 7c 0c ff ff       	call   c00004f0 <memset>
c000f874:	83 c4 10             	add    esp,0x10
c000f877:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f87c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f883:	0f 84 d5 05 00 00    	je     c000fe5e <CPU::detectFeatures()+0x616>
c000f889:	83 ec 0c             	sub    esp,0xc
c000f88c:	89 ef                	mov    edi,ebp
c000f88e:	6a 10                	push   0x10
c000f890:	e8 6b fe ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f895:	83 e0 01             	and    eax,0x1
c000f898:	8d 14 00             	lea    edx,[eax+eax*1]
c000f89b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a1:	83 e0 fd             	and    eax,0xfffffffd
c000f8a4:	09 d0                	or     eax,edx
c000f8a6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ac:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8b3:	e8 48 fe ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f8b8:	83 e0 01             	and    eax,0x1
c000f8bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c8:	83 e0 fb             	and    eax,0xfffffffb
c000f8cb:	09 d0                	or     eax,edx
c000f8cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8da:	e8 21 fe ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f8df:	83 e0 01             	and    eax,0x1
c000f8e2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8e9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ef:	83 e0 f7             	and    eax,0xfffffff7
c000f8f2:	09 d0                	or     eax,edx
c000f8f4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8fa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f901:	e8 fa fd ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f906:	83 e0 01             	and    eax,0x1
c000f909:	c1 e0 04             	shl    eax,0x4
c000f90c:	88 c2                	mov    dl,al
c000f90e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f914:	83 e0 ef             	and    eax,0xffffffef
c000f917:	09 d0                	or     eax,edx
c000f919:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f91f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f926:	e8 d5 fd ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f92b:	83 e0 01             	and    eax,0x1
c000f92e:	c1 e0 05             	shl    eax,0x5
c000f931:	88 c2                	mov    dl,al
c000f933:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f939:	83 e0 df             	and    eax,0xffffffdf
c000f93c:	09 d0                	or     eax,edx
c000f93e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f944:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f94b:	e8 b0 fd ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f950:	83 e0 01             	and    eax,0x1
c000f953:	8d 14 00             	lea    edx,[eax+eax*1]
c000f956:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f95c:	83 e0 fd             	and    eax,0xfffffffd
c000f95f:	09 d0                	or     eax,edx
c000f961:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f967:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f96e:	e8 8d fd ff ff       	call   c000f700 <CPU::cpuidCheckEDX(unsigned int)>
c000f973:	83 e0 01             	and    eax,0x1
c000f976:	c1 e0 06             	shl    eax,0x6
c000f979:	88 c2                	mov    dl,al
c000f97b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f981:	83 e0 bf             	and    eax,0xffffffbf
c000f984:	09 d0                	or     eax,edx
c000f986:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f98c:	58                   	pop    eax
c000f98d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f991:	50                   	push   eax
c000f992:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f996:	50                   	push   eax
c000f997:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f99b:	56                   	push   esi
c000f99c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a0:	50                   	push   eax
c000f9a1:	6a 00                	push   0x0
c000f9a3:	e8 d4 fc ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9a8:	b8 04 00 00 00       	mov    eax,0x4
c000f9ad:	89 c1                	mov    ecx,eax
c000f9af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9b7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9bb:	89 c1                	mov    ecx,eax
c000f9bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9bf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9c5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9c9:	89 c1                	mov    ecx,eax
c000f9cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cd:	83 c4 18             	add    esp,0x18
c000f9d0:	68 88 e5 01 c0       	push   0xc001e588
c000f9d5:	55                   	push   ebp
c000f9d6:	e8 25 0d ff ff       	call   c0000700 <strcmp>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	85 c0                	test   eax,eax
c000f9e0:	75 0f                	jne    c000f9f1 <CPU::detectFeatures()+0x1a9>
c000f9e2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9ec:	e9 22 02 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000f9f1:	50                   	push   eax
c000f9f2:	50                   	push   eax
c000f9f3:	68 95 e5 01 c0       	push   0xc001e595
c000f9f8:	55                   	push   ebp
c000f9f9:	e8 02 0d ff ff       	call   c0000700 <strcmp>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	85 c0                	test   eax,eax
c000fa03:	74 dd                	je     c000f9e2 <CPU::detectFeatures()+0x19a>
c000fa05:	50                   	push   eax
c000fa06:	50                   	push   eax
c000fa07:	68 a2 e5 01 c0       	push   0xc001e5a2
c000fa0c:	55                   	push   ebp
c000fa0d:	e8 ee 0c ff ff       	call   c0000700 <strcmp>
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	85 c0                	test   eax,eax
c000fa17:	74 2a                	je     c000fa43 <CPU::detectFeatures()+0x1fb>
c000fa19:	50                   	push   eax
c000fa1a:	50                   	push   eax
c000fa1b:	68 af e5 01 c0       	push   0xc001e5af
c000fa20:	55                   	push   ebp
c000fa21:	e8 da 0c ff ff       	call   c0000700 <strcmp>
c000fa26:	83 c4 10             	add    esp,0x10
c000fa29:	85 c0                	test   eax,eax
c000fa2b:	74 16                	je     c000fa43 <CPU::detectFeatures()+0x1fb>
c000fa2d:	50                   	push   eax
c000fa2e:	50                   	push   eax
c000fa2f:	68 bc e5 01 c0       	push   0xc001e5bc
c000fa34:	55                   	push   ebp
c000fa35:	e8 c6 0c ff ff       	call   c0000700 <strcmp>
c000fa3a:	83 c4 10             	add    esp,0x10
c000fa3d:	85 c0                	test   eax,eax
c000fa3f:	74 48                	je     c000fa89 <CPU::detectFeatures()+0x241>
c000fa41:	eb 0f                	jmp    c000fa52 <CPU::detectFeatures()+0x20a>
c000fa43:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa4d:	e9 c1 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fa52:	50                   	push   eax
c000fa53:	50                   	push   eax
c000fa54:	68 c9 e5 01 c0       	push   0xc001e5c9
c000fa59:	55                   	push   ebp
c000fa5a:	e8 a1 0c ff ff       	call   c0000700 <strcmp>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	85 c0                	test   eax,eax
c000fa64:	74 23                	je     c000fa89 <CPU::detectFeatures()+0x241>
c000fa66:	57                   	push   edi
c000fa67:	57                   	push   edi
c000fa68:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fa6d:	55                   	push   ebp
c000fa6e:	e8 8d 0c ff ff       	call   c0000700 <strcmp>
c000fa73:	83 c4 10             	add    esp,0x10
c000fa76:	85 c0                	test   eax,eax
c000fa78:	75 1e                	jne    c000fa98 <CPU::detectFeatures()+0x250>
c000fa7a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa84:	e9 8a 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fa89:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa93:	e9 7b 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fa98:	56                   	push   esi
c000fa99:	56                   	push   esi
c000fa9a:	68 e3 e5 01 c0       	push   0xc001e5e3
c000fa9f:	55                   	push   ebp
c000faa0:	e8 5b 0c ff ff       	call   c0000700 <strcmp>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	85 c0                	test   eax,eax
c000faaa:	75 0f                	jne    c000fabb <CPU::detectFeatures()+0x273>
c000faac:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fab6:	e9 58 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fabb:	51                   	push   ecx
c000fabc:	51                   	push   ecx
c000fabd:	68 a2 e5 01 c0       	push   0xc001e5a2
c000fac2:	55                   	push   ebp
c000fac3:	e8 38 0c ff ff       	call   c0000700 <strcmp>
c000fac8:	83 c4 10             	add    esp,0x10
c000facb:	85 c0                	test   eax,eax
c000facd:	75 0f                	jne    c000fade <CPU::detectFeatures()+0x296>
c000facf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fad9:	e9 35 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fade:	52                   	push   edx
c000fadf:	52                   	push   edx
c000fae0:	68 f0 e5 01 c0       	push   0xc001e5f0
c000fae5:	55                   	push   ebp
c000fae6:	e8 15 0c ff ff       	call   c0000700 <strcmp>
c000faeb:	83 c4 10             	add    esp,0x10
c000faee:	85 c0                	test   eax,eax
c000faf0:	75 0f                	jne    c000fb01 <CPU::detectFeatures()+0x2b9>
c000faf2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fafc:	e9 12 01 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fb01:	50                   	push   eax
c000fb02:	50                   	push   eax
c000fb03:	68 fd e5 01 c0       	push   0xc001e5fd
c000fb08:	55                   	push   ebp
c000fb09:	e8 f2 0b ff ff       	call   c0000700 <strcmp>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	85 c0                	test   eax,eax
c000fb13:	75 0f                	jne    c000fb24 <CPU::detectFeatures()+0x2dc>
c000fb15:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb1f:	e9 ef 00 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fb24:	50                   	push   eax
c000fb25:	50                   	push   eax
c000fb26:	68 0a e6 01 c0       	push   0xc001e60a
c000fb2b:	55                   	push   ebp
c000fb2c:	e8 cf 0b ff ff       	call   c0000700 <strcmp>
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	85 c0                	test   eax,eax
c000fb36:	75 0f                	jne    c000fb47 <CPU::detectFeatures()+0x2ff>
c000fb38:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb42:	e9 cc 00 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fb47:	50                   	push   eax
c000fb48:	50                   	push   eax
c000fb49:	68 17 e6 01 c0       	push   0xc001e617
c000fb4e:	55                   	push   ebp
c000fb4f:	e8 ac 0b ff ff       	call   c0000700 <strcmp>
c000fb54:	83 c4 10             	add    esp,0x10
c000fb57:	85 c0                	test   eax,eax
c000fb59:	75 0f                	jne    c000fb6a <CPU::detectFeatures()+0x322>
c000fb5b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb65:	e9 a9 00 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fb6a:	50                   	push   eax
c000fb6b:	50                   	push   eax
c000fb6c:	68 24 e6 01 c0       	push   0xc001e624
c000fb71:	55                   	push   ebp
c000fb72:	e8 89 0b ff ff       	call   c0000700 <strcmp>
c000fb77:	83 c4 10             	add    esp,0x10
c000fb7a:	85 c0                	test   eax,eax
c000fb7c:	75 0f                	jne    c000fb8d <CPU::detectFeatures()+0x345>
c000fb7e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb88:	e9 86 00 00 00       	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fb8d:	50                   	push   eax
c000fb8e:	50                   	push   eax
c000fb8f:	68 31 e6 01 c0       	push   0xc001e631
c000fb94:	55                   	push   ebp
c000fb95:	e8 66 0b ff ff       	call   c0000700 <strcmp>
c000fb9a:	83 c4 10             	add    esp,0x10
c000fb9d:	85 c0                	test   eax,eax
c000fb9f:	75 0c                	jne    c000fbad <CPU::detectFeatures()+0x365>
c000fba1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbab:	eb 66                	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fbad:	50                   	push   eax
c000fbae:	50                   	push   eax
c000fbaf:	68 3e e6 01 c0       	push   0xc001e63e
c000fbb4:	55                   	push   ebp
c000fbb5:	e8 46 0b ff ff       	call   c0000700 <strcmp>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	85 c0                	test   eax,eax
c000fbbf:	75 0c                	jne    c000fbcd <CPU::detectFeatures()+0x385>
c000fbc1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbcb:	eb 46                	jmp    c000fc13 <CPU::detectFeatures()+0x3cb>
c000fbcd:	57                   	push   edi
c000fbce:	57                   	push   edi
c000fbcf:	68 4b e6 01 c0       	push   0xc001e64b
c000fbd4:	55                   	push   ebp
c000fbd5:	e8 26 0b ff ff       	call   c0000700 <strcmp>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	85 c0                	test   eax,eax
c000fbdf:	74 e0                	je     c000fbc1 <CPU::detectFeatures()+0x379>
c000fbe1:	56                   	push   esi
c000fbe2:	56                   	push   esi
c000fbe3:	68 58 e6 01 c0       	push   0xc001e658
c000fbe8:	55                   	push   ebp
c000fbe9:	e8 12 0b ff ff       	call   c0000700 <strcmp>
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	85 c0                	test   eax,eax
c000fbf3:	74 cc                	je     c000fbc1 <CPU::detectFeatures()+0x379>
c000fbf5:	51                   	push   ecx
c000fbf6:	51                   	push   ecx
c000fbf7:	68 65 e6 01 c0       	push   0xc001e665
c000fbfc:	55                   	push   ebp
c000fbfd:	e8 fe 0a ff ff       	call   c0000700 <strcmp>
c000fc02:	83 c4 10             	add    esp,0x10
c000fc05:	85 c0                	test   eax,eax
c000fc07:	74 b8                	je     c000fbc1 <CPU::detectFeatures()+0x379>
c000fc09:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc13:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc18:	0f 86 be 00 00 00    	jbe    c000fcdc <CPU::detectFeatures()+0x494>
c000fc1e:	83 ec 0c             	sub    esp,0xc
c000fc21:	68 80 00 00 00       	push   0x80
c000fc26:	e8 31 fb ff ff       	call   c000f75c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc2b:	83 e0 01             	and    eax,0x1
c000fc2e:	c1 e0 06             	shl    eax,0x6
c000fc31:	88 c2                	mov    dl,al
c000fc33:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc39:	83 e0 bf             	and    eax,0xffffffbf
c000fc3c:	09 d0                	or     eax,edx
c000fc3e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc44:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc4b:	e8 0c fb ff ff       	call   c000f75c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc50:	83 e0 01             	and    eax,0x1
c000fc53:	c1 e0 04             	shl    eax,0x4
c000fc56:	88 c2                	mov    dl,al
c000fc58:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc5e:	83 e0 ef             	and    eax,0xffffffef
c000fc61:	09 d0                	or     eax,edx
c000fc63:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc69:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc70:	e8 e7 fa ff ff       	call   c000f75c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc75:	c1 e0 07             	shl    eax,0x7
c000fc78:	88 c2                	mov    dl,al
c000fc7a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc80:	83 e0 7f             	and    eax,0x7f
c000fc83:	09 d0                	or     eax,edx
c000fc85:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc8b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc92:	e8 f3 fa ff ff       	call   c000f78a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc97:	83 e0 01             	and    eax,0x1
c000fc9a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fca1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fca7:	83 e0 f7             	and    eax,0xfffffff7
c000fcaa:	09 d0                	or     eax,edx
c000fcac:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcb2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcb9:	e8 cc fa ff ff       	call   c000f78a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcbe:	83 c4 10             	add    esp,0x10
c000fcc1:	83 e0 01             	and    eax,0x1
c000fcc4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fccb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcd1:	83 e0 fb             	and    eax,0xfffffffb
c000fcd4:	09 d0                	or     eax,edx
c000fcd6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fce3:	50                   	push   eax
c000fce4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fce8:	50                   	push   eax
c000fce9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fced:	56                   	push   esi
c000fcee:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf2:	50                   	push   eax
c000fcf3:	6a 01                	push   0x1
c000fcf5:	e8 82 f9 ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcfa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fcfe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd04:	88 ca                	mov    dl,cl
c000fd06:	83 e0 f0             	and    eax,0xfffffff0
c000fd09:	83 e2 0f             	and    edx,0xf
c000fd0c:	09 d0                	or     eax,edx
c000fd0e:	88 ca                	mov    dl,cl
c000fd10:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd16:	c0 ea 04             	shr    dl,0x4
c000fd19:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd1d:	0f b6 c2             	movzx  eax,dl
c000fd20:	83 c4 20             	add    esp,0x20
c000fd23:	c1 e0 06             	shl    eax,0x6
c000fd26:	89 c7                	mov    edi,eax
c000fd28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd2e:	66 25 3f c0          	and    ax,0xc03f
c000fd32:	09 f8                	or     eax,edi
c000fd34:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd3b:	89 c8                	mov    eax,ecx
c000fd3d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd44:	c1 e8 08             	shr    eax,0x8
c000fd47:	83 e5 3f             	and    ebp,0x3f
c000fd4a:	83 e0 0f             	and    eax,0xf
c000fd4d:	89 c7                	mov    edi,eax
c000fd4f:	c1 e7 06             	shl    edi,0x6
c000fd52:	09 ef                	or     edi,ebp
c000fd54:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fd5b:	89 fa                	mov    edx,edi
c000fd5d:	83 e5 c0             	and    ebp,0xffffffc0
c000fd60:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd66:	88 c2                	mov    dl,al
c000fd68:	c0 ea 02             	shr    dl,0x2
c000fd6b:	89 d7                	mov    edi,edx
c000fd6d:	09 ef                	or     edi,ebp
c000fd6f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd75:	89 fa                	mov    edx,edi
c000fd77:	83 e5 cf             	and    ebp,0xffffffcf
c000fd7a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd80:	89 cf                	mov    edi,ecx
c000fd82:	c1 ef 0c             	shr    edi,0xc
c000fd85:	83 e7 03             	and    edi,0x3
c000fd88:	c1 e7 04             	shl    edi,0x4
c000fd8b:	09 ef                	or     edi,ebp
c000fd8d:	3c 06                	cmp    al,0x6
c000fd8f:	89 fa                	mov    edx,edi
c000fd91:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd97:	74 04                	je     c000fd9d <CPU::detectFeatures()+0x555>
c000fd99:	3c 0f                	cmp    al,0xf
c000fd9b:	75 5c                	jne    c000fdf9 <CPU::detectFeatures()+0x5b1>
c000fd9d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fda1:	89 cf                	mov    edi,ecx
c000fda3:	c1 ef 10             	shr    edi,0x10
c000fda6:	c1 e7 04             	shl    edi,0x4
c000fda9:	09 fa                	or     edx,edi
c000fdab:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fdb1:	0f b6 d2             	movzx  edx,dl
c000fdb4:	66 81 e7 3f c0       	and    di,0xc03f
c000fdb9:	c1 e2 06             	shl    edx,0x6
c000fdbc:	09 fa                	or     edx,edi
c000fdbe:	3c 0f                	cmp    al,0xf
c000fdc0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdc7:	75 30                	jne    c000fdf9 <CPU::detectFeatures()+0x5b1>
c000fdc9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fdcf:	c1 e9 14             	shr    ecx,0x14
c000fdd2:	83 e0 3f             	and    eax,0x3f
c000fdd5:	83 c1 0f             	add    ecx,0xf
c000fdd8:	88 ca                	mov    dl,cl
c000fdda:	c0 e9 02             	shr    cl,0x2
c000fddd:	c1 e2 06             	shl    edx,0x6
c000fde0:	09 d0                	or     eax,edx
c000fde2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fde8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fdee:	83 e0 c0             	and    eax,0xffffffc0
c000fdf1:	09 c1                	or     ecx,eax
c000fdf3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fdf9:	83 ec 0c             	sub    esp,0xc
c000fdfc:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe03:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe07:	50                   	push   eax
c000fe08:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe0c:	55                   	push   ebp
c000fe0d:	56                   	push   esi
c000fe0e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe12:	57                   	push   edi
c000fe13:	68 00 00 00 80       	push   0x80000000
c000fe18:	e8 5f f8 ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe1d:	83 c4 20             	add    esp,0x20
c000fe20:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe28:	76 22                	jbe    c000fe4c <CPU::detectFeatures()+0x604>
c000fe2a:	83 ec 0c             	sub    esp,0xc
c000fe2d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe31:	50                   	push   eax
c000fe32:	55                   	push   ebp
c000fe33:	56                   	push   esi
c000fe34:	57                   	push   edi
c000fe35:	68 01 00 00 80       	push   0x80000001
c000fe3a:	e8 3d f8 ff ff       	call   c000f67c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe3f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe49:	83 c4 20             	add    esp,0x20
c000fe4c:	52                   	push   edx
c000fe4d:	52                   	push   edx
c000fe4e:	68 71 e6 01 c0       	push   0xc001e671
c000fe53:	53                   	push   ebx
c000fe54:	e8 59 c3 ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	eb 67                	jmp    c000fec5 <CPU::detectFeatures()+0x67d>
c000fe5e:	50                   	push   eax
c000fe5f:	50                   	push   eax
c000fe60:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fe65:	55                   	push   ebp
c000fe66:	e8 b5 07 ff ff       	call   c0000620 <strcpy>
c000fe6b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe75:	e8 69 03 ff ff       	call   c00001e3 <is486>
c000fe7a:	83 c4 10             	add    esp,0x10
c000fe7d:	85 c0                	test   eax,eax
c000fe7f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe85:	74 1d                	je     c000fea4 <CPU::detectFeatures()+0x65c>
c000fe87:	83 c8 07             	or     eax,0x7
c000fe8a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe90:	0f 20 c0             	mov    eax,cr0
c000fe93:	83 e0 14             	and    eax,0x14
c000fe96:	83 f8 04             	cmp    eax,0x4
c000fe99:	75 0e                	jne    c000fea9 <CPU::detectFeatures()+0x661>
c000fe9b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fea2:	eb 21                	jmp    c000fec5 <CPU::detectFeatures()+0x67d>
c000fea4:	83 e0 f8             	and    eax,0xfffffff8
c000fea7:	eb e1                	jmp    c000fe8a <CPU::detectFeatures()+0x642>
c000fea9:	e8 10 03 ff ff       	call   c00001be <hasLegacyFPU>
c000feae:	83 e0 01             	and    eax,0x1
c000feb1:	8d 14 00             	lea    edx,[eax+eax*1]
c000feb4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feba:	83 e0 fd             	and    eax,0xfffffffd
c000febd:	09 d0                	or     eax,edx
c000febf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fec5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fecc:	74 0e                	je     c000fedc <CPU::detectFeatures()+0x694>
c000fece:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000fed3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000feda:	eb 20                	jmp    c000fefc <CPU::detectFeatures()+0x6b4>
c000fedc:	e8 dd 02 ff ff       	call   c00001be <hasLegacyFPU>
c000fee1:	83 e0 01             	and    eax,0x1
c000fee4:	8d 14 00             	lea    edx,[eax+eax*1]
c000fee7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feed:	83 e0 fd             	and    eax,0xfffffffd
c000fef0:	09 d0                	or     eax,edx
c000fef2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fef8:	a8 02                	test   al,0x2
c000fefa:	75 d2                	jne    c000fece <CPU::detectFeatures()+0x686>
c000fefc:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff03:	83 c4 2c             	add    esp,0x2c
c000ff06:	5b                   	pop    ebx
c000ff07:	5e                   	pop    esi
c000ff08:	5f                   	pop    edi
c000ff09:	5d                   	pop    ebp
c000ff0a:	c3                   	ret    
c000ff0b:	90                   	nop

c000ff0c <CPU::setupSMEP()>:
c000ff0c:	0f 20 e0             	mov    eax,cr4
c000ff0f:	0d 00 00 10 00       	or     eax,0x100000
c000ff14:	0f 22 e0             	mov    cr4,eax
c000ff17:	c3                   	ret    

c000ff18 <CPU::setupUMIP()>:
c000ff18:	0f 20 e0             	mov    eax,cr4
c000ff1b:	80 cc 08             	or     ah,0x8
c000ff1e:	0f 22 e0             	mov    cr4,eax
c000ff21:	c3                   	ret    

c000ff22 <CPU::setupTSC()>:
c000ff22:	0f 20 e0             	mov    eax,cr4
c000ff25:	83 c8 04             	or     eax,0x4
c000ff28:	0f 22 e0             	mov    cr4,eax
c000ff2b:	c3                   	ret    

c000ff2c <CPU::setupLargePages()>:
c000ff2c:	0f 20 e0             	mov    eax,cr4
c000ff2f:	83 c8 10             	or     eax,0x10
c000ff32:	0f 22 e0             	mov    cr4,eax
c000ff35:	c3                   	ret    

c000ff36 <CPU::setupPAT()>:
c000ff36:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ff3b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff42:	74 2c                	je     c000ff70 <CPU::setupPAT()+0x3a>
c000ff44:	53                   	push   ebx
c000ff45:	83 ec 10             	sub    esp,0x10
c000ff48:	68 77 02 00 00       	push   0x277
c000ff4d:	50                   	push   eax
c000ff4e:	e8 43 75 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c000ff53:	83 e2 f8             	and    edx,0xfffffff8
c000ff56:	83 ca 01             	or     edx,0x1
c000ff59:	52                   	push   edx
c000ff5a:	50                   	push   eax
c000ff5b:	68 77 02 00 00       	push   0x277
c000ff60:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000ff66:	e8 57 75 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff6b:	83 c4 28             	add    esp,0x28
c000ff6e:	5b                   	pop    ebx
c000ff6f:	c3                   	ret    
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <CPU::setupMTRR()>:
c000ff72:	c3                   	ret    
c000ff73:	90                   	nop

c000ff74 <CPU::setupGlobalPages()>:
c000ff74:	0f 20 e0             	mov    eax,cr4
c000ff77:	0c 80                	or     al,0x80
c000ff79:	0f 22 e0             	mov    cr4,eax
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <CPU::allowUsermodeDataAccess()>:
c000ff7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff82:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff89:	74 03                	je     c000ff8e <CPU::allowUsermodeDataAccess()+0x10>
c000ff8b:	0f 01 cb             	stac   
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <CPU::prohibitUsermodeDataAccess()>:
c000ff90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff94:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff9b:	74 03                	je     c000ffa0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff9d:	0f 01 ca             	clac   
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <CPU::setupSMAP()>:
c000ffa2:	0f 20 e0             	mov    eax,cr4
c000ffa5:	0d 00 00 20 00       	or     eax,0x200000
c000ffaa:	0f 22 e0             	mov    cr4,eax
c000ffad:	eb e1                	jmp    c000ff90 <CPU::prohibitUsermodeDataAccess()>
c000ffaf:	90                   	nop

c000ffb0 <CPU::setupFeatures()>:
c000ffb0:	53                   	push   ebx
c000ffb1:	83 ec 08             	sub    esp,0x8
c000ffb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffb8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffbf:	74 18                	je     c000ffd9 <CPU::setupFeatures()+0x29>
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	68 7d e6 01 c0       	push   0xc001e67d
c000ffc9:	e8 1a ac ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000ffce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd1:	e8 42 ff ff ff       	call   c000ff18 <CPU::setupUMIP()>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffe0:	74 18                	je     c000fffa <CPU::setupFeatures()+0x4a>
c000ffe2:	83 ec 0c             	sub    esp,0xc
c000ffe5:	68 87 e6 01 c0       	push   0xc001e687
c000ffea:	e8 f9 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000ffef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff2:	e8 2b ff ff ff       	call   c000ff22 <CPU::setupTSC()>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010001:	74 18                	je     c001001b <CPU::setupFeatures()+0x6b>
c0010003:	83 ec 0c             	sub    esp,0xc
c0010006:	68 90 e6 01 c0       	push   0xc001e690
c001000b:	e8 d8 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0010010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010013:	e8 14 ff ff ff       	call   c000ff2c <CPU::setupLargePages()>
c0010018:	83 c4 10             	add    esp,0x10
c001001b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010022:	74 18                	je     c001003c <CPU::setupFeatures()+0x8c>
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	68 99 e6 01 c0       	push   0xc001e699
c001002c:	e8 b7 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0010031:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010034:	e8 3b ff ff ff       	call   c000ff74 <CPU::setupGlobalPages()>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010043:	74 18                	je     c001005d <CPU::setupFeatures()+0xad>
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	68 ab e6 01 c0       	push   0xc001e6ab
c001004d:	e8 96 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0010052:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010055:	e8 dc fe ff ff       	call   c000ff36 <CPU::setupPAT()>
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010064:	74 11                	je     c0010077 <CPU::setupFeatures()+0xc7>
c0010066:	c7 44 24 10 b4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6b4
c001006e:	83 c4 08             	add    esp,0x8
c0010071:	5b                   	pop    ebx
c0010072:	e9 71 ab ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c0010077:	83 c4 08             	add    esp,0x8
c001007a:	5b                   	pop    ebx
c001007b:	c3                   	ret    

c001007c <CPU::open(int, int, void*)>:
c001007c:	57                   	push   edi
c001007d:	56                   	push   esi
c001007e:	53                   	push   ebx
c001007f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010083:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010087:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010096:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001009c:	50                   	push   eax
c001009d:	e8 de 76 ff ff       	call   c0007780 <GDT::setup()>
c00100a2:	83 c4 0c             	add    esp,0xc
c00100a5:	6a 00                	push   0x0
c00100a7:	68 ef be ad de       	push   0xdeadbeef
c00100ac:	57                   	push   edi
c00100ad:	e8 6a 92 ff ff       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c00100b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100b5:	e8 42 92 ff ff       	call   c00092fc <TSS::flush()>
c00100ba:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c3:	e8 02 79 ff ff       	call   c00079ca <IDT::setup()>
c00100c8:	b8 00 04 00 00       	mov    eax,0x400
c00100cd:	0f 23 f8             	mov    db7,eax
c00100d0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100da:	e8 47 81 ff ff       	call   c0008226 <Phys::allocatePage()>
c00100df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100e5:	89 30                	mov    DWORD PTR [eax],esi
c00100e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100ed:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100f0:	58                   	pop    eax
c00100f1:	5a                   	pop    edx
c00100f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100fc:	e8 05 a2 ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c0010101:	c7 04 24 be e6 01 c0 	mov    DWORD PTR [esp],0xc001e6be
c0010108:	e8 a6 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c001010d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010110:	e8 33 f7 ff ff       	call   c000f848 <CPU::detectFeatures()>
c0010115:	c7 04 24 e1 e6 01 c0 	mov    DWORD PTR [esp],0xc001e6e1
c001011c:	e8 92 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0010121:	e8 b8 56 00 00       	call   c00157de <HalInitialise()>
c0010126:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c001012b:	83 e0 10             	and    eax,0x10
c001012e:	83 f8 01             	cmp    eax,0x1
c0010131:	19 c0                	sbb    eax,eax
c0010133:	83 e0 46             	and    eax,0x46
c0010136:	83 c0 1e             	add    eax,0x1e
c0010139:	89 04 24             	mov    DWORD PTR [esp],eax
c001013c:	e8 40 d7 ff ff       	call   c000d881 <setupTimer(int)>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001014a:	f6 05 50 09 02 c0 20 	test   BYTE PTR ds:0xc0020950,0x20
c0010151:	74 0c                	je     c001015f <CPU::open(int, int, void*)+0xe3>
c0010153:	83 ec 0c             	sub    esp,0xc
c0010156:	53                   	push   ebx
c0010157:	e8 54 fe ff ff       	call   c000ffb0 <CPU::setupFeatures()>
c001015c:	83 c4 10             	add    esp,0x10
c001015f:	5b                   	pop    ebx
c0010160:	31 c0                	xor    eax,eax
c0010162:	5e                   	pop    esi
c0010163:	5f                   	pop    edi
c0010164:	c3                   	ret    
c0010165:	90                   	nop

c0010166 <EnvVarContainer::getEnv(char const*)>:
c0010166:	57                   	push   edi
c0010167:	56                   	push   esi
c0010168:	53                   	push   ebx
c0010169:	31 db                	xor    ebx,ebx
c001016b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001016f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010171:	7e 2b                	jle    c001019e <EnvVarContainer::getEnv(char const*)+0x38>
c0010173:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001017a:	50                   	push   eax
c001017b:	50                   	push   eax
c001017c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001017f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010182:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010186:	e8 75 05 ff ff       	call   c0000700 <strcmp>
c001018b:	83 c4 10             	add    esp,0x10
c001018e:	85 c0                	test   eax,eax
c0010190:	75 09                	jne    c001019b <EnvVarContainer::getEnv(char const*)+0x35>
c0010192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010195:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010199:	eb 05                	jmp    c00101a0 <EnvVarContainer::getEnv(char const*)+0x3a>
c001019b:	43                   	inc    ebx
c001019c:	eb d1                	jmp    c001016f <EnvVarContainer::getEnv(char const*)+0x9>
c001019e:	31 c0                	xor    eax,eax
c00101a0:	5b                   	pop    ebx
c00101a1:	5e                   	pop    esi
c00101a2:	5f                   	pop    edi
c00101a3:	c3                   	ret    

c00101a4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101a4:	55                   	push   ebp
c00101a5:	57                   	push   edi
c00101a6:	56                   	push   esi
c00101a7:	53                   	push   ebx
c00101a8:	83 ec 28             	sub    esp,0x28
c00101ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101af:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101b7:	56                   	push   esi
c00101b8:	e8 a3 03 ff ff       	call   c0000560 <strlen>
c00101bd:	40                   	inc    eax
c00101be:	89 04 24             	mov    DWORD PTR [esp],eax
c00101c1:	e8 93 7c ff ff       	call   c0007e59 <malloc>
c00101c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101cd:	e8 8e 03 ff ff       	call   c0000560 <strlen>
c00101d2:	40                   	inc    eax
c00101d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101d6:	e8 7e 7c ff ff       	call   c0007e59 <malloc>
c00101db:	89 34 24             	mov    DWORD PTR [esp],esi
c00101de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101e2:	e8 79 03 ff ff       	call   c0000560 <strlen>
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	40                   	inc    eax
c00101eb:	50                   	push   eax
c00101ec:	6a 00                	push   0x0
c00101ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101f2:	e8 f9 02 ff ff       	call   c00004f0 <memset>
c00101f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00101fa:	e8 61 03 ff ff       	call   c0000560 <strlen>
c00101ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010203:	8d 48 01             	lea    ecx,[eax+0x1]
c0010206:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001020b:	89 de                	mov    esi,ebx
c001020d:	e8 4e 03 ff ff       	call   c0000560 <strlen>
c0010212:	83 c4 0c             	add    esp,0xc
c0010215:	40                   	inc    eax
c0010216:	50                   	push   eax
c0010217:	6a 00                	push   0x0
c0010219:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001021d:	e8 ce 02 ff ff       	call   c00004f0 <memset>
c0010222:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010225:	e8 36 03 ff ff       	call   c0000560 <strlen>
c001022a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001022e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010231:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010233:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010236:	40                   	inc    eax
c0010237:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001023a:	c1 e0 03             	shl    eax,0x3
c001023d:	5a                   	pop    edx
c001023e:	59                   	pop    ecx
c001023f:	50                   	push   eax
c0010240:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010243:	e8 fd 7b ff ff       	call   c0007e45 <realloc>
c0010248:	8d 74 24 18          	lea    esi,[esp+0x18]
c001024c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001024f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010252:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010256:	b9 08 00 00 00       	mov    ecx,0x8
c001025b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001025d:	83 c4 2c             	add    esp,0x2c
c0010260:	5b                   	pop    ebx
c0010261:	5e                   	pop    esi
c0010262:	5f                   	pop    edi
c0010263:	5d                   	pop    ebp
c0010264:	c3                   	ret    
c0010265:	90                   	nop

c0010266 <EnvVarContainer::deleteEnv(char const*)>:
c0010266:	c3                   	ret    
c0010267:	90                   	nop

c0010268 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010268:	55                   	push   ebp
c0010269:	57                   	push   edi
c001026a:	56                   	push   esi
c001026b:	53                   	push   ebx
c001026c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010272:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010279:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010280:	68 14 01 00 00       	push   0x114
c0010285:	e8 cf 7b ff ff       	call   c0007e59 <malloc>
c001028a:	83 c4 0c             	add    esp,0xc
c001028d:	89 c3                	mov    ebx,eax
c001028f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010292:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010299:	50                   	push   eax
c001029a:	e8 bf ae ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001029f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a2:	e8 e5 b1 ff ff       	call   c000b48c <File::exists()>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	84 c0                	test   al,al
c00102ac:	75 31                	jne    c00102df <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102ae:	50                   	push   eax
c00102af:	50                   	push   eax
c00102b0:	6a 12                	push   0x12
c00102b2:	53                   	push   ebx
c00102b3:	e8 66 af ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00102b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102ba:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00102c0:	e8 9b 02 ff ff       	call   c0000560 <strlen>
c00102c5:	5a                   	pop    edx
c00102c6:	31 d2                	xor    edx,edx
c00102c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102cc:	51                   	push   ecx
c00102cd:	56                   	push   esi
c00102ce:	52                   	push   edx
c00102cf:	50                   	push   eax
c00102d0:	53                   	push   ebx
c00102d1:	ff d7                	call   edi
c00102d3:	83 c4 14             	add    esp,0x14
c00102d6:	53                   	push   ebx
c00102d7:	e8 a0 af ff ff       	call   c000b27c <File::close()>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	56                   	push   esi
c00102e0:	31 f6                	xor    esi,esi
c00102e2:	68 00 01 00 00       	push   0x100
c00102e7:	6a 00                	push   0x0
c00102e9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102ed:	50                   	push   eax
c00102ee:	e8 fd 01 ff ff       	call   c00004f0 <memset>
c00102f3:	5f                   	pop    edi
c00102f4:	58                   	pop    eax
c00102f5:	6a 01                	push   0x1
c00102f7:	53                   	push   ebx
c00102f8:	e8 21 af ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00102fd:	83 c4 10             	add    esp,0x10
c0010300:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001030d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010311:	51                   	push   ecx
c0010312:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010316:	52                   	push   edx
c0010317:	6a 00                	push   0x0
c0010319:	6a 01                	push   0x1
c001031b:	53                   	push   ebx
c001031c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001031f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010323:	83 c4 20             	add    esp,0x20
c0010326:	3c 0d                	cmp    al,0xd
c0010328:	0f 84 09 01 00 00    	je     c0010437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001032e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010333:	0f 84 ef 00 00 00    	je     c0010428 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010339:	3c 0a                	cmp    al,0xa
c001033b:	74 13                	je     c0010350 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001033d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010342:	74 0c                	je     c0010350 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010344:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001034a:	0f 8e d8 00 00 00    	jle    c0010428 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	8d 78 01             	lea    edi,[eax+0x1]
c001035a:	57                   	push   edi
c001035b:	e8 f9 7a ff ff       	call   c0007e59 <malloc>
c0010360:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010368:	8d 56 04             	lea    edx,[esi+0x4]
c001036b:	89 14 24             	mov    DWORD PTR [esp],edx
c001036e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010372:	e8 e2 7a ff ff       	call   c0007e59 <malloc>
c0010377:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001037b:	83 c4 0c             	add    esp,0xc
c001037e:	57                   	push   edi
c001037f:	6a 00                	push   0x0
c0010381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010385:	e8 66 01 ff ff       	call   c00004f0 <memset>
c001038a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001038e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010392:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010396:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010398:	83 c4 0c             	add    esp,0xc
c001039b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001039f:	52                   	push   edx
c00103a0:	6a 00                	push   0x0
c00103a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103a6:	e8 45 01 ff ff       	call   c00004f0 <memset>
c00103ab:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103af:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00103b6:	e8 a5 01 ff ff       	call   c0000560 <strlen>
c00103bb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00103bf:	89 c1                	mov    ecx,eax
c00103c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103c9:	40                   	inc    eax
c00103ca:	83 c4 10             	add    esp,0x10
c00103cd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103d0:	85 d2                	test   edx,edx
c00103d2:	75 0c                	jne    c00103e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103d4:	83 ec 0c             	sub    esp,0xc
c00103d7:	6a 08                	push   0x8
c00103d9:	e8 7b 7a ff ff       	call   c0007e59 <malloc>
c00103de:	eb 0c                	jmp    c00103ec <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103e0:	c1 e0 03             	shl    eax,0x3
c00103e3:	51                   	push   ecx
c00103e4:	51                   	push   ecx
c00103e5:	50                   	push   eax
c00103e6:	52                   	push   edx
c00103e7:	e8 59 7a ff ff       	call   c0007e45 <realloc>
c00103ec:	83 c4 10             	add    esp,0x10
c00103ef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103f5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103f8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103fc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010400:	b9 08 00 00 00       	mov    ecx,0x8
c0010405:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010407:	31 f6                	xor    esi,esi
c0010409:	50                   	push   eax
c001040a:	68 00 01 00 00       	push   0x100
c001040f:	6a 00                	push   0x0
c0010411:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010415:	50                   	push   eax
c0010416:	e8 d5 00 ff ff       	call   c00004f0 <memset>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010426:	eb 0f                	jmp    c0010437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010428:	3c 3d                	cmp    al,0x3d
c001042a:	74 07                	je     c0010433 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001042c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010430:	46                   	inc    esi
c0010431:	eb 04                	jmp    c0010437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010437:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001043c:	0f 85 c6 fe ff ff    	jne    c0010308 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010442:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	5f                   	pop    edi
c001044b:	5d                   	pop    ebp
c001044c:	c3                   	ret    
c001044d:	90                   	nop

c001044e <EnvVarContainer::__loadSystem()>:
c001044e:	83 ec 10             	sub    esp,0x10
c0010451:	68 c0 f8 01 c0       	push   0xc001f8c0
c0010456:	68 24 e7 01 c0       	push   0xc001e724
c001045b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045f:	e8 04 fe ff ff       	call   c0010268 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010464:	83 c4 1c             	add    esp,0x1c
c0010467:	c3                   	ret    

c0010468 <EnvVarContainer::__loadUser()>:
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <EnvVarContainer::EnvVarContainer(Process*)>:
c001046a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001047c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001047f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010483:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001048a:	90                   	nop
c001048b:	c3                   	ret    

c001048c <EnvVarContainer::~EnvVarContainer()>:
c001048c:	83 ec 0c             	sub    esp,0xc
c001048f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010493:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010496:	85 c0                	test   eax,eax
c0010498:	74 1d                	je     c00104b7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001049a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049e:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a0:	85 c0                	test   eax,eax
c00104a2:	74 13                	je     c00104b7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104ab:	83 ec 0c             	sub    esp,0xc
c00104ae:	50                   	push   eax
c00104af:	e8 b5 79 ff ff       	call   c0007e69 <free>
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	90                   	nop
c00104b8:	83 c4 0c             	add    esp,0xc
c00104bb:	c3                   	ret    

c00104bc <Krnl::getEnv(Process*, char const*)>:
c00104bc:	53                   	push   ebx
c00104bd:	83 ec 08             	sub    esp,0x8
c00104c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104c8:	39 05 30 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e30,eax
c00104ce:	74 04                	je     c00104d4 <Krnl::getEnv(Process*, char const*)+0x18>
c00104d0:	85 c0                	test   eax,eax
c00104d2:	75 0b                	jne    c00104df <Krnl::getEnv(Process*, char const*)+0x23>
c00104d4:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c00104d9:	85 c0                	test   eax,eax
c00104db:	75 19                	jne    c00104f6 <Krnl::getEnv(Process*, char const*)+0x3a>
c00104dd:	eb 27                	jmp    c0010506 <Krnl::getEnv(Process*, char const*)+0x4a>
c00104df:	52                   	push   edx
c00104e0:	52                   	push   edx
c00104e1:	53                   	push   ebx
c00104e2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104e8:	e8 79 fc ff ff       	call   c0010166 <EnvVarContainer::getEnv(char const*)>
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	85 c0                	test   eax,eax
c00104f2:	75 28                	jne    c001051c <Krnl::getEnv(Process*, char const*)+0x60>
c00104f4:	eb de                	jmp    c00104d4 <Krnl::getEnv(Process*, char const*)+0x18>
c00104f6:	52                   	push   edx
c00104f7:	52                   	push   edx
c00104f8:	53                   	push   ebx
c00104f9:	50                   	push   eax
c00104fa:	e8 67 fc ff ff       	call   c0010166 <EnvVarContainer::getEnv(char const*)>
c00104ff:	83 c4 10             	add    esp,0x10
c0010502:	85 c0                	test   eax,eax
c0010504:	75 16                	jne    c001051c <Krnl::getEnv(Process*, char const*)+0x60>
c0010506:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001050a:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c001050f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010513:	83 c4 08             	add    esp,0x8
c0010516:	5b                   	pop    ebx
c0010517:	e9 4a fc ff ff       	jmp    c0010166 <EnvVarContainer::getEnv(char const*)>
c001051c:	83 c4 08             	add    esp,0x8
c001051f:	5b                   	pop    ebx
c0010520:	c3                   	ret    

c0010521 <Krnl::setEnvSystem(char const*, char const*)>:
c0010521:	83 ec 10             	sub    esp,0x10
c0010524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052c:	ff 35 b4 33 02 c0    	push   DWORD PTR ds:0xc00233b4
c0010532:	e8 6d fc ff ff       	call   c00101a4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010537:	83 c4 1c             	add    esp,0x1c
c001053a:	c3                   	ret    

c001053b <Krnl::setEnvUser(char const*, char const*)>:
c001053b:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c0010540:	85 c0                	test   eax,eax
c0010542:	74 15                	je     c0010559 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010544:	83 ec 10             	sub    esp,0x10
c0010547:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001054b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001054f:	50                   	push   eax
c0010550:	e8 4f fc ff ff       	call   c00101a4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010555:	83 c4 1c             	add    esp,0x1c
c0010558:	c3                   	ret    
c0010559:	c3                   	ret    

c001055a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001055a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010564:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010568:	e9 37 fc ff ff       	jmp    c00101a4 <EnvVarContainer::setEnv(char const*, char const*)>

c001056d <Krnl::deleteEnvSystem(char const*)>:
c001056d:	c3                   	ret    

c001056e <Krnl::deleteEnvUser(char const*)>:
c001056e:	c3                   	ret    

c001056f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001056f:	c3                   	ret    

c0010570 <Krnl::newProcessEnv(Process*)>:
c0010570:	83 ec 28             	sub    esp,0x28
c0010573:	6a 0c                	push   0xc
c0010575:	e8 df 78 ff ff       	call   c0007e59 <malloc>
c001057a:	5a                   	pop    edx
c001057b:	59                   	pop    ecx
c001057c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010580:	50                   	push   eax
c0010581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010585:	e8 e0 fe ff ff       	call   c001046a <EnvVarContainer::EnvVarContainer(Process*)>
c001058a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001058e:	83 c4 2c             	add    esp,0x2c
c0010591:	c3                   	ret    

c0010592 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010592:	57                   	push   edi
c0010593:	56                   	push   esi
c0010594:	53                   	push   ebx
c0010595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010599:	83 ec 0c             	sub    esp,0xc
c001059c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105a2:	6a 0c                	push   0xc
c00105a4:	e8 b0 78 ff ff       	call   c0007e59 <malloc>
c00105a9:	89 c3                	mov    ebx,eax
c00105ab:	58                   	pop    eax
c00105ac:	5a                   	pop    edx
c00105ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b1:	53                   	push   ebx
c00105b2:	e8 b3 fe ff ff       	call   c001046a <EnvVarContainer::EnvVarContainer(Process*)>
c00105b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00105b9:	89 03                	mov    DWORD PTR [ebx],eax
c00105bb:	c1 e0 03             	shl    eax,0x3
c00105be:	89 04 24             	mov    DWORD PTR [esp],eax
c00105c1:	e8 93 78 ff ff       	call   c0007e59 <malloc>
c00105c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105c9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105cb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105ce:	c1 e1 03             	shl    ecx,0x3
c00105d1:	89 c7                	mov    edi,eax
c00105d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d5:	83 c4 10             	add    esp,0x10
c00105d8:	89 d8                	mov    eax,ebx
c00105da:	5b                   	pop    ebx
c00105db:	5e                   	pop    esi
c00105dc:	5f                   	pop    edi
c00105dd:	c3                   	ret    

c00105de <Krnl::loadSystemEnv()>:
c00105de:	53                   	push   ebx
c00105df:	83 ec 14             	sub    esp,0x14
c00105e2:	6a 0c                	push   0xc
c00105e4:	e8 70 78 ff ff       	call   c0007e59 <malloc>
c00105e9:	89 c3                	mov    ebx,eax
c00105eb:	58                   	pop    eax
c00105ec:	5a                   	pop    edx
c00105ed:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00105f3:	53                   	push   ebx
c00105f4:	e8 71 fe ff ff       	call   c001046a <EnvVarContainer::EnvVarContainer(Process*)>
c00105f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105fc:	89 1d b4 33 02 c0    	mov    DWORD PTR ds:0xc00233b4,ebx
c0010602:	e8 47 fe ff ff       	call   c001044e <EnvVarContainer::__loadSystem()>
c0010607:	83 c4 18             	add    esp,0x18
c001060a:	5b                   	pop    ebx
c001060b:	c3                   	ret    

c001060c <Krnl::loadUserEnv()>:
c001060c:	53                   	push   ebx
c001060d:	83 ec 14             	sub    esp,0x14
c0010610:	6a 0c                	push   0xc
c0010612:	e8 42 78 ff ff       	call   c0007e59 <malloc>
c0010617:	89 c3                	mov    ebx,eax
c0010619:	58                   	pop    eax
c001061a:	5a                   	pop    edx
c001061b:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010621:	53                   	push   ebx
c0010622:	e8 43 fe ff ff       	call   c001046a <EnvVarContainer::EnvVarContainer(Process*)>
c0010627:	89 1d b0 33 02 c0    	mov    DWORD PTR ds:0xc00233b0,ebx
c001062d:	83 c4 18             	add    esp,0x18
c0010630:	5b                   	pop    ebx
c0010631:	c3                   	ret    

c0010632 <Krnl::flushEnv()>:
c0010632:	c3                   	ret    

c0010633 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010637:	8b 15 b0 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233b0
c001063d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010643:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c0010648:	8b 00                	mov    eax,DWORD PTR [eax]
c001064a:	03 01                	add    eax,DWORD PTR [ecx]
c001064c:	85 d2                	test   edx,edx
c001064e:	74 02                	je     c0010652 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010650:	03 02                	add    eax,DWORD PTR [edx]
c0010652:	c3                   	ret    

c0010653 <Krnl::getProcessEnvPair(Process*, int)>:
c0010653:	57                   	push   edi
c0010654:	56                   	push   esi
c0010655:	8b 35 b0 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b0
c001065b:	53                   	push   ebx
c001065c:	85 f6                	test   esi,esi
c001065e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010666:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001066c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010670:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010672:	75 16                	jne    c001068a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010674:	39 c2                	cmp    edx,eax
c0010676:	7c 16                	jl     c001068e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010678:	8b 0d b4 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233b4
c001067e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010680:	01 c6                	add    esi,eax
c0010682:	39 d6                	cmp    esi,edx
c0010684:	7e 3c                	jle    c00106c2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010686:	29 c2                	sub    edx,eax
c0010688:	eb 04                	jmp    c001068e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001068a:	39 c2                	cmp    edx,eax
c001068c:	7d 05                	jge    c0010693 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001068e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010691:	eb 20                	jmp    c00106b3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010693:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010695:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010698:	39 d1                	cmp    ecx,edx
c001069a:	7e 04                	jle    c00106a0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001069c:	29 c2                	sub    edx,eax
c001069e:	eb 10                	jmp    c00106b0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106a0:	8b 35 b4 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b4
c00106a6:	03 0e                	add    ecx,DWORD PTR [esi]
c00106a8:	39 d1                	cmp    ecx,edx
c00106aa:	7e 16                	jle    c00106c2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106ac:	29 c2                	sub    edx,eax
c00106ae:	29 fa                	sub    edx,edi
c00106b0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106b3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106b6:	8b 02                	mov    eax,DWORD PTR [edx]
c00106b8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00106bb:	89 03                	mov    DWORD PTR [ebx],eax
c00106bd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00106c0:	eb 1d                	jmp    c00106df <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	68 46 e7 01 c0       	push   0xc001e746
c00106ca:	e8 18 00 00 00       	call   c00106e7 <Krnl::panic(char const*)>
c00106cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	89 d8                	mov    eax,ebx
c00106e1:	5b                   	pop    ebx
c00106e2:	5e                   	pop    esi
c00106e3:	5f                   	pop    edi
c00106e4:	c2 04 00             	ret    0x4

c00106e7 <Krnl::panic(char const*)>:
c00106e7:	53                   	push   ebx
c00106e8:	83 ec 10             	sub    esp,0x10
c00106eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106ef:	fa                   	cli    
c00106f0:	c6 05 c0 33 02 c0 01 	mov    BYTE PTR ds:0xc00233c0,0x1
c00106f7:	53                   	push   ebx
c00106f8:	68 60 e7 01 c0       	push   0xc001e760
c00106fd:	e8 e6 a4 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0010702:	83 c4 0c             	add    esp,0xc
c0010705:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c001070a:	6a 01                	push   0x1
c001070c:	6a 0f                	push   0xf
c001070e:	50                   	push   eax
c001070f:	e8 c8 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010714:	5a                   	pop    edx
c0010715:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c001071b:	51                   	push   ecx
c001071c:	e8 b3 84 ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0010721:	58                   	pop    eax
c0010722:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010728:	5a                   	pop    edx
c0010729:	68 91 e7 01 c0       	push   0xc001e791
c001072e:	51                   	push   ecx
c001072f:	e8 e0 82 ff ff       	call   c0008a14 <VgaText::setTitle(char*)>
c0010734:	83 c4 0c             	add    esp,0xc
c0010737:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c001073c:	6a 01                	push   0x1
c001073e:	6a 0f                	push   0xf
c0010740:	50                   	push   eax
c0010741:	e8 96 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010746:	58                   	pop    eax
c0010747:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c001074d:	5a                   	pop    edx
c001074e:	68 79 e7 01 c0       	push   0xc001e779
c0010753:	51                   	push   ecx
c0010754:	e8 6f 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010759:	83 c4 0c             	add    esp,0xc
c001075c:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010761:	6a 0f                	push   0xf
c0010763:	6a 01                	push   0x1
c0010765:	50                   	push   eax
c0010766:	e8 71 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001076b:	58                   	pop    eax
c001076c:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010772:	5a                   	pop    edx
c0010773:	68 82 e7 01 c0       	push   0xc001e782
c0010778:	51                   	push   ecx
c0010779:	e8 4a 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001077e:	83 c4 0c             	add    esp,0xc
c0010781:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010786:	6a 01                	push   0x1
c0010788:	6a 0f                	push   0xf
c001078a:	50                   	push   eax
c001078b:	e8 4c 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010790:	58                   	pop    eax
c0010791:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010797:	5a                   	pop    edx
c0010798:	68 8f e7 01 c0       	push   0xc001e78f
c001079d:	51                   	push   ecx
c001079e:	e8 25 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107a3:	58                   	pop    eax
c00107a4:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107aa:	5a                   	pop    edx
c00107ab:	68 a0 e7 01 c0       	push   0xc001e7a0
c00107b0:	51                   	push   ecx
c00107b1:	e8 12 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107b6:	58                   	pop    eax
c00107b7:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107bd:	5a                   	pop    edx
c00107be:	68 92 e7 01 c0       	push   0xc001e792
c00107c3:	51                   	push   ecx
c00107c4:	e8 ff 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107c9:	58                   	pop    eax
c00107ca:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107d0:	5a                   	pop    edx
c00107d1:	53                   	push   ebx
c00107d2:	51                   	push   ecx
c00107d3:	e8 f0 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107d8:	5b                   	pop    ebx
c00107d9:	58                   	pop    eax
c00107da:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c00107df:	68 8f e7 01 c0       	push   0xc001e78f
c00107e4:	50                   	push   eax
c00107e5:	e8 de 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107ea:	83 c4 10             	add    esp,0x10
c00107ed:	eb fe                	jmp    c00107ed <Krnl::panic(char const*)+0x106>

c00107ef <Krnl::powerThread(void*)>:
c00107ef:	83 ec 0c             	sub    esp,0xc
c00107f2:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00107f7:	48                   	dec    eax
c00107f8:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00107fd:	75 01                	jne    c0010800 <Krnl::powerThread(void*)+0x11>
c00107ff:	fb                   	sti    
c0010800:	83 ec 0c             	sub    esp,0xc
c0010803:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c001080a:	6a 0a                	push   0xa
c001080c:	e8 3b 35 00 00       	call   c0013d4c <sleep(unsigned int)>
c0010811:	83 05 24 34 02 c0 0a 	add    DWORD PTR ds:0xc0023424,0xa
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	eb e3                	jmp    c0010800 <Krnl::powerThread(void*)+0x11>

c001081d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001081d:	57                   	push   edi
c001081e:	b9 09 00 00 00       	mov    ecx,0x9
c0010823:	56                   	push   esi
c0010824:	bf 00 34 02 c0       	mov    edi,0xc0023400
c0010829:	fc                   	cld    
c001082a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001082e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010830:	5e                   	pop    esi
c0010831:	5f                   	pop    edi
c0010832:	c3                   	ret    

c0010833 <Krnl::userIOReceived()>:
c0010833:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c001083d:	c3                   	ret    

c001083e <Krnl::handlePowerButton()>:
c001083e:	83 ec 0c             	sub    esp,0xc
c0010841:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c0010846:	83 f8 02             	cmp    eax,0x2
c0010849:	75 10                	jne    c001085b <Krnl::handlePowerButton()+0x1d>
c001084b:	83 ec 0c             	sub    esp,0xc
c001084e:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010854:	e8 a1 6c ff ff       	call   c00074fa <Computer::shutdown()>
c0010859:	eb 11                	jmp    c001086c <Krnl::handlePowerButton()+0x2e>
c001085b:	48                   	dec    eax
c001085c:	75 11                	jne    c001086f <Krnl::handlePowerButton()+0x31>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010867:	e8 be 6c ff ff       	call   c000752a <Computer::sleep()>
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	83 c4 0c             	add    esp,0xc
c0010872:	c3                   	ret    

c0010873 <Krnl::handleSleepButton()>:
c0010873:	83 ec 0c             	sub    esp,0xc
c0010876:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c001087b:	83 f8 02             	cmp    eax,0x2
c001087e:	75 10                	jne    c0010890 <Krnl::handleSleepButton()+0x1d>
c0010880:	83 ec 0c             	sub    esp,0xc
c0010883:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010889:	e8 6c 6c ff ff       	call   c00074fa <Computer::shutdown()>
c001088e:	eb 11                	jmp    c00108a1 <Krnl::handleSleepButton()+0x2e>
c0010890:	48                   	dec    eax
c0010891:	75 11                	jne    c00108a4 <Krnl::handleSleepButton()+0x31>
c0010893:	83 ec 0c             	sub    esp,0xc
c0010896:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001089c:	e8 89 6c ff ff       	call   c000752a <Computer::sleep()>
c00108a1:	83 c4 10             	add    esp,0x10
c00108a4:	83 c4 0c             	add    esp,0xc
c00108a7:	c3                   	ret    

c00108a8 <Krnl::setupPowerManager()>:
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c00108b5:	68 f0 00 00 00       	push   0xf0
c00108ba:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c00108c1:	6a 00                	push   0x0
c00108c3:	68 ef 07 01 c0       	push   0xc00107ef
c00108c8:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00108ce:	e8 49 2f 00 00       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c00108d3:	c7 05 00 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023400,0x2
c00108dd:	c7 05 04 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x1
c00108e7:	c7 05 08 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023408,0x3
c00108f1:	c7 05 0c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002340c,0x0
c00108fb:	c7 05 18 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023418,0x0
c0010905:	c7 05 10 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023410,0x0
c001090f:	c7 05 1c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002341c,0x0
c0010919:	c7 05 14 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023414,0x3c
c0010923:	c7 05 20 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023420,0x3c
c001092d:	83 c4 1c             	add    esp,0x1c
c0010930:	c3                   	ret    

c0010931 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010931:	55                   	push   ebp
c0010932:	57                   	push   edi
c0010933:	56                   	push   esi
c0010934:	53                   	push   ebx
c0010935:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001093b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010942:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010944:	8d 6e 01             	lea    ebp,[esi+0x1]
c0010947:	80 fb 40             	cmp    bl,0x40
c001094a:	75 1b                	jne    c0010967 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001094c:	8a 16                	mov    dl,BYTE PTR [esi]
c001094e:	84 d2                	test   dl,dl
c0010950:	0f 84 f1 00 00 00    	je     c0010a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010956:	8d 46 01             	lea    eax,[esi+0x1]
c0010959:	80 fa 3a             	cmp    dl,0x3a
c001095c:	74 04                	je     c0010962 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001095e:	89 c6                	mov    esi,eax
c0010960:	eb ea                	jmp    c001094c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0010962:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010965:	89 c6                	mov    esi,eax
c0010967:	50                   	push   eax
c0010968:	6a 40                	push   0x40
c001096a:	6a 00                	push   0x0
c001096c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010970:	50                   	push   eax
c0010971:	e8 7a fb fe ff       	call   c00004f0 <memset>
c0010976:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001097d:	31 c0                	xor    eax,eax
c001097f:	83 c4 10             	add    esp,0x10
c0010982:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010984:	84 c9                	test   cl,cl
c0010986:	0f 84 bb 00 00 00    	je     c0010a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001098c:	3d c7 00 00 00       	cmp    eax,0xc7
c0010991:	0f 8f b0 00 00 00    	jg     c0010a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010997:	80 f9 0a             	cmp    cl,0xa
c001099a:	0f 85 98 00 00 00    	jne    c0010a38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109a0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109a5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00109a9:	a8 df                	test   al,0xdf
c00109ab:	0f 94 c1             	sete   cl
c00109ae:	3c 23                	cmp    al,0x23
c00109b0:	0f 94 c2             	sete   dl
c00109b3:	08 d1                	or     cl,dl
c00109b5:	75 4a                	jne    c0010a01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109b7:	8d 50 f7             	lea    edx,[eax-0x9]
c00109ba:	80 fa 01             	cmp    dl,0x1
c00109bd:	76 42                	jbe    c0010a01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109bf:	3c 5b                	cmp    al,0x5b
c00109c1:	75 42                	jne    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00109c3:	80 fb 40             	cmp    bl,0x40
c00109c6:	75 39                	jne    c0010a01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109c8:	83 ec 0c             	sub    esp,0xc
c00109cb:	8d 54 24 65          	lea    edx,[esp+0x65]
c00109cf:	52                   	push   edx
c00109d0:	e8 8b fb fe ff       	call   c0000560 <strlen>
c00109d5:	83 c4 10             	add    esp,0x10
c00109d8:	83 f8 3f             	cmp    eax,0x3f
c00109db:	77 6a                	ja     c0010a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109dd:	50                   	push   eax
c00109de:	50                   	push   eax
c00109df:	8d 54 24 61          	lea    edx,[esp+0x61]
c00109e3:	52                   	push   edx
c00109e4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109e8:	52                   	push   edx
c00109e9:	e8 32 fc fe ff       	call   c0000620 <strcpy>
c00109ee:	58                   	pop    eax
c00109ef:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109f3:	52                   	push   edx
c00109f4:	e8 67 fb fe ff       	call   c0000560 <strlen>
c00109f9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00109fe:	83 c4 10             	add    esp,0x10
c0010a01:	31 d2                	xor    edx,edx
c0010a03:	eb 3a                	jmp    c0010a3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a05:	80 fb 40             	cmp    bl,0x40
c0010a08:	74 06                	je     c0010a10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a0a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a0e:	eb 20                	jmp    c0010a30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a10:	50                   	push   eax
c0010a11:	50                   	push   eax
c0010a12:	55                   	push   ebp
c0010a13:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a17:	50                   	push   eax
c0010a18:	e8 e3 fc fe ff       	call   c0000700 <strcmp>
c0010a1d:	83 c4 10             	add    esp,0x10
c0010a20:	85 c0                	test   eax,eax
c0010a22:	75 dd                	jne    c0010a01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a24:	eb e4                	jmp    c0010a0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a26:	8d 50 01             	lea    edx,[eax+0x1]
c0010a29:	80 f9 3d             	cmp    cl,0x3d
c0010a2c:	74 1d                	je     c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a2e:	89 d0                	mov    eax,edx
c0010a30:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a32:	84 c9                	test   cl,cl
c0010a34:	75 f0                	jne    c0010a26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a36:	eb 0f                	jmp    c0010a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a38:	8d 50 01             	lea    edx,[eax+0x1]
c0010a3b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a3f:	47                   	inc    edi
c0010a40:	89 d0                	mov    eax,edx
c0010a42:	e9 3b ff ff ff       	jmp    c0010982 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a47:	31 c0                	xor    eax,eax
c0010a49:	eb 33                	jmp    c0010a7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010a52:	50                   	push   eax
c0010a53:	50                   	push   eax
c0010a54:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010a58:	50                   	push   eax
c0010a59:	56                   	push   esi
c0010a5a:	e8 a1 fc fe ff       	call   c0000700 <strcmp>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	85 c0                	test   eax,eax
c0010a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a68:	75 97                	jne    c0010a01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a6a:	51                   	push   ecx
c0010a6b:	51                   	push   ecx
c0010a6c:	52                   	push   edx
c0010a6d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010a74:	e8 a7 fb fe ff       	call   c0000620 <strcpy>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	b0 01                	mov    al,0x1
c0010a7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a84:	5b                   	pop    ebx
c0010a85:	5e                   	pop    esi
c0010a86:	5f                   	pop    edi
c0010a87:	5d                   	pop    ebp
c0010a88:	c3                   	ret    

c0010a89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010a89:	57                   	push   edi
c0010a8a:	56                   	push   esi
c0010a8b:	53                   	push   ebx
c0010a8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010a92:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010a99:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010aa0:	53                   	push   ebx
c0010aa1:	e8 ba fa fe ff       	call   c0000560 <strlen>
c0010aa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0010aa9:	89 c7                	mov    edi,eax
c0010aab:	e8 b0 fa fe ff       	call   c0000560 <strlen>
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010ab7:	3d ff 00 00 00       	cmp    eax,0xff
c0010abc:	0f 87 d3 00 00 00    	ja     c0010b95 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010ac2:	57                   	push   edi
c0010ac3:	57                   	push   edi
c0010ac4:	56                   	push   esi
c0010ac5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010ac9:	56                   	push   esi
c0010aca:	e8 51 fb fe ff       	call   c0000620 <strcpy>
c0010acf:	58                   	pop    eax
c0010ad0:	5a                   	pop    edx
c0010ad1:	68 bf ea 01 c0       	push   0xc001eabf
c0010ad6:	56                   	push   esi
c0010ad7:	e8 04 fd fe ff       	call   c00007e0 <strcat>
c0010adc:	59                   	pop    ecx
c0010add:	5f                   	pop    edi
c0010ade:	53                   	push   ebx
c0010adf:	56                   	push   esi
c0010ae0:	e8 fb fc fe ff       	call   c00007e0 <strcat>
c0010ae5:	58                   	pop    eax
c0010ae6:	5a                   	pop    edx
c0010ae7:	68 da e7 01 c0       	push   0xc001e7da
c0010aec:	56                   	push   esi
c0010aed:	e8 ee fc fe ff       	call   c00007e0 <strcat>
c0010af2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010af9:	e8 5b 73 ff ff       	call   c0007e59 <malloc>
c0010afe:	83 c4 0c             	add    esp,0xc
c0010b01:	89 c3                	mov    ebx,eax
c0010b03:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010b09:	56                   	push   esi
c0010b0a:	50                   	push   eax
c0010b0b:	e8 4e a6 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0010b10:	83 c4 10             	add    esp,0x10
c0010b13:	85 db                	test   ebx,ebx
c0010b15:	74 7e                	je     c0010b95 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b17:	51                   	push   ecx
c0010b18:	51                   	push   ecx
c0010b19:	6a 01                	push   0x1
c0010b1b:	53                   	push   ebx
c0010b1c:	e8 fd a6 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	85 c0                	test   eax,eax
c0010b26:	74 08                	je     c0010b30 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b2d:	53                   	push   ebx
c0010b2e:	eb 5f                	jmp    c0010b8f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b30:	52                   	push   edx
c0010b31:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b35:	50                   	push   eax
c0010b36:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b3a:	50                   	push   eax
c0010b3b:	53                   	push   ebx
c0010b3c:	e8 89 a9 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0010b41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	89 c1                	mov    ecx,eax
c0010b4a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010b4e:	74 31                	je     c0010b81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	50                   	push   eax
c0010b54:	e8 00 73 ff ff       	call   c0007e59 <malloc>
c0010b59:	89 c6                	mov    esi,eax
c0010b5b:	58                   	pop    eax
c0010b5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b5e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010b62:	52                   	push   edx
c0010b63:	56                   	push   esi
c0010b64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b6c:	53                   	push   ebx
c0010b6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b70:	83 c4 20             	add    esp,0x20
c0010b73:	85 c0                	test   eax,eax
c0010b75:	75 0a                	jne    c0010b81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b7b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010b7f:	74 18                	je     c0010b99 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	53                   	push   ebx
c0010b85:	e8 f2 a6 ff ff       	call   c000b27c <File::close()>
c0010b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b92:	83 c4 10             	add    esp,0x10
c0010b95:	31 c0                	xor    eax,eax
c0010b97:	eb 3b                	jmp    c0010bd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010b99:	83 ec 0c             	sub    esp,0xc
c0010b9c:	53                   	push   ebx
c0010b9d:	e8 da a6 ff ff       	call   c000b27c <File::close()>
c0010ba2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ba7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010baa:	83 c4 0c             	add    esp,0xc
c0010bad:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bb4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bbb:	56                   	push   esi
c0010bbc:	e8 70 fd ff ff       	call   c0010931 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010bc1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bc4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010bc8:	e8 9c 72 ff ff       	call   c0007e69 <free>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010bd4:	81 c4 20 01 00 00    	add    esp,0x120
c0010bda:	5b                   	pop    ebx
c0010bdb:	5e                   	pop    esi
c0010bdc:	5f                   	pop    edi
c0010bdd:	c3                   	ret    

c0010bde <Reg::getLine(char*, char*, char*)>:
c0010bde:	57                   	push   edi
c0010bdf:	56                   	push   esi
c0010be0:	53                   	push   ebx
c0010be1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010be9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bed:	57                   	push   edi
c0010bee:	56                   	push   esi
c0010bef:	53                   	push   ebx
c0010bf0:	68 df e7 01 c0       	push   0xc001e7df
c0010bf5:	e8 8f fe ff ff       	call   c0010a89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	84 c0                	test   al,al
c0010bff:	75 10                	jne    c0010c11 <Reg::getLine(char*, char*, char*)+0x33>
c0010c01:	57                   	push   edi
c0010c02:	56                   	push   esi
c0010c03:	53                   	push   ebx
c0010c04:	68 04 e8 01 c0       	push   0xc001e804
c0010c09:	e8 7b fe ff ff       	call   c0010a89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	5b                   	pop    ebx
c0010c12:	5e                   	pop    esi
c0010c13:	5f                   	pop    edi
c0010c14:	c3                   	ret    

c0010c15 <Reg::readInt(char*, char*, int*)>:
c0010c15:	55                   	push   ebp
c0010c16:	57                   	push   edi
c0010c17:	56                   	push   esi
c0010c18:	53                   	push   ebx
c0010c19:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c1f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c23:	57                   	push   edi
c0010c24:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c2b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c32:	e8 a7 ff ff ff       	call   c0010bde <Reg::getLine(char*, char*, char*)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	84 c0                	test   al,al
c0010c3c:	0f 84 b3 00 00 00    	je     c0010cf5 <Reg::readInt(char*, char*, int*)+0xe0>
c0010c42:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c46:	80 fa 2b             	cmp    dl,0x2b
c0010c49:	74 0c                	je     c0010c57 <Reg::readInt(char*, char*, int*)+0x42>
c0010c4b:	80 fa 2d             	cmp    dl,0x2d
c0010c4e:	75 0e                	jne    c0010c5e <Reg::readInt(char*, char*, int*)+0x49>
c0010c50:	ba 01 00 00 00       	mov    edx,0x1
c0010c55:	eb 0b                	jmp    c0010c62 <Reg::readInt(char*, char*, int*)+0x4d>
c0010c57:	ba 01 00 00 00       	mov    edx,0x1
c0010c5c:	eb 02                	jmp    c0010c60 <Reg::readInt(char*, char*, int*)+0x4b>
c0010c5e:	31 d2                	xor    edx,edx
c0010c60:	31 c0                	xor    eax,eax
c0010c62:	be 0a 00 00 00       	mov    esi,0xa
c0010c67:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010c6c:	75 20                	jne    c0010c8e <Reg::readInt(char*, char*, int*)+0x79>
c0010c6e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010c72:	80 f9 78             	cmp    cl,0x78
c0010c75:	75 0a                	jne    c0010c81 <Reg::readInt(char*, char*, int*)+0x6c>
c0010c77:	83 c2 02             	add    edx,0x2
c0010c7a:	be 10 00 00 00       	mov    esi,0x10
c0010c7f:	eb 0d                	jmp    c0010c8e <Reg::readInt(char*, char*, int*)+0x79>
c0010c81:	80 f9 62             	cmp    cl,0x62
c0010c84:	75 08                	jne    c0010c8e <Reg::readInt(char*, char*, int*)+0x79>
c0010c86:	83 c2 02             	add    edx,0x2
c0010c89:	be 02 00 00 00       	mov    esi,0x2
c0010c8e:	01 d7                	add    edi,edx
c0010c90:	31 d2                	xor    edx,edx
c0010c92:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010c94:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010c98:	80 fb 0d             	cmp    bl,0xd
c0010c9b:	0f 94 c3             	sete   bl
c0010c9e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010ca3:	0f 94 c1             	sete   cl
c0010ca6:	08 cb                	or     bl,cl
c0010ca8:	75 3a                	jne    c0010ce4 <Reg::readInt(char*, char*, int*)+0xcf>
c0010caa:	0f af d6             	imul   edx,esi
c0010cad:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010cb2:	83 fe 10             	cmp    esi,0x10
c0010cb5:	75 26                	jne    c0010cdd <Reg::readInt(char*, char*, int*)+0xc8>
c0010cb7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cbb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010cbe:	89 e9                	mov    ecx,ebp
c0010cc0:	80 f9 05             	cmp    cl,0x5
c0010cc3:	77 06                	ja     c0010ccb <Reg::readInt(char*, char*, int*)+0xb6>
c0010cc5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010cc9:	eb 16                	jmp    c0010ce1 <Reg::readInt(char*, char*, int*)+0xcc>
c0010ccb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ccf:	83 e9 61             	sub    ecx,0x61
c0010cd2:	80 f9 05             	cmp    cl,0x5
c0010cd5:	77 06                	ja     c0010cdd <Reg::readInt(char*, char*, int*)+0xc8>
c0010cd7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010cdb:	eb 04                	jmp    c0010ce1 <Reg::readInt(char*, char*, int*)+0xcc>
c0010cdd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010ce1:	47                   	inc    edi
c0010ce2:	eb ae                	jmp    c0010c92 <Reg::readInt(char*, char*, int*)+0x7d>
c0010ce4:	84 c0                	test   al,al
c0010ce6:	74 02                	je     c0010cea <Reg::readInt(char*, char*, int*)+0xd5>
c0010ce8:	f7 da                	neg    edx
c0010cea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010cf1:	89 10                	mov    DWORD PTR [eax],edx
c0010cf3:	88 d8                	mov    al,bl
c0010cf5:	81 c4 ec 00 00 00    	add    esp,0xec
c0010cfb:	5b                   	pop    ebx
c0010cfc:	5e                   	pop    esi
c0010cfd:	5f                   	pop    edi
c0010cfe:	5d                   	pop    ebp
c0010cff:	c3                   	ret    

c0010d00 <Reg::readString(char*, char*, char*, int)>:
c0010d00:	57                   	push   edi
c0010d01:	56                   	push   esi
c0010d02:	53                   	push   ebx
c0010d03:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d09:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d10:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d14:	57                   	push   edi
c0010d15:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d1c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d23:	e8 b6 fe ff ff       	call   c0010bde <Reg::getLine(char*, char*, char*)>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	89 c6                	mov    esi,eax
c0010d2d:	84 c0                	test   al,al
c0010d2f:	74 44                	je     c0010d75 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d31:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d38:	31 c0                	xor    eax,eax
c0010d3a:	4a                   	dec    edx
c0010d3b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d3e:	84 c9                	test   cl,cl
c0010d40:	74 0f                	je     c0010d51 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d42:	39 c2                	cmp    edx,eax
c0010d44:	7e 0b                	jle    c0010d51 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d46:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d49:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010d4e:	40                   	inc    eax
c0010d4f:	eb ea                	jmp    c0010d3b <Reg::readString(char*, char*, char*, int)+0x3b>
c0010d51:	83 ec 0c             	sub    esp,0xc
c0010d54:	53                   	push   ebx
c0010d55:	e8 06 f8 fe ff       	call   c0000560 <strlen>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010d62:	75 11                	jne    c0010d75 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	53                   	push   ebx
c0010d68:	e8 f3 f7 fe ff       	call   c0000560 <strlen>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010d75:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010d7b:	89 f0                	mov    eax,esi
c0010d7d:	5b                   	pop    ebx
c0010d7e:	5e                   	pop    esi
c0010d7f:	5f                   	pop    edi
c0010d80:	c3                   	ret    

c0010d81 <Reg::readBool(char*, char*, bool*)>:
c0010d81:	83 ec 20             	sub    esp,0x20
c0010d84:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010d88:	50                   	push   eax
c0010d89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d91:	e8 7f fe ff ff       	call   c0010c15 <Reg::readInt(char*, char*, int*)>
c0010d96:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010d9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d9f:	0f 95 02             	setne  BYTE PTR [edx]
c0010da2:	83 c4 2c             	add    esp,0x2c
c0010da5:	c3                   	ret    

c0010da6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010da6:	53                   	push   ebx
c0010da7:	83 ec 1c             	sub    esp,0x1c
c0010daa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010dae:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010db2:	50                   	push   eax
c0010db3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010db7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dbb:	e8 c1 ff ff ff       	call   c0010d81 <Reg::readBool(char*, char*, bool*)>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	84 c0                	test   al,al
c0010dc5:	74 04                	je     c0010dcb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010dc7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010dcb:	88 d8                	mov    al,bl
c0010dcd:	83 c4 18             	add    esp,0x18
c0010dd0:	5b                   	pop    ebx
c0010dd1:	c3                   	ret    

c0010dd2 <Reg::readIntWithDefault(char*, char*, int)>:
c0010dd2:	53                   	push   ebx
c0010dd3:	83 ec 1c             	sub    esp,0x1c
c0010dd6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010dde:	50                   	push   eax
c0010ddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de7:	e8 29 fe ff ff       	call   c0010c15 <Reg::readInt(char*, char*, int*)>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	84 c0                	test   al,al
c0010df1:	74 04                	je     c0010df7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010df3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010df7:	89 d8                	mov    eax,ebx
c0010df9:	83 c4 18             	add    esp,0x18
c0010dfc:	5b                   	pop    ebx
c0010dfd:	c3                   	ret    

c0010dfe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010dfe:	57                   	push   edi
c0010dff:	56                   	push   esi
c0010e00:	56                   	push   esi
c0010e01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e05:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e09:	56                   	push   esi
c0010e0a:	57                   	push   edi
c0010e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e13:	e8 e8 fe ff ff       	call   c0010d00 <Reg::readString(char*, char*, char*, int)>
c0010e18:	83 c4 10             	add    esp,0x10
c0010e1b:	84 c0                	test   al,al
c0010e1d:	75 1a                	jne    c0010e39 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e1f:	51                   	push   ecx
c0010e20:	56                   	push   esi
c0010e21:	6a 00                	push   0x0
c0010e23:	57                   	push   edi
c0010e24:	e8 c7 f6 fe ff       	call   c00004f0 <memset>
c0010e29:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e32:	83 c4 10             	add    esp,0x10
c0010e35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e39:	89 f8                	mov    eax,edi
c0010e3b:	5a                   	pop    edx
c0010e3c:	5e                   	pop    esi
c0010e3d:	5f                   	pop    edi
c0010e3e:	c3                   	ret    

c0010e3f <Sys::eject(regs*)>:
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	83 ca ff             	or     edx,0xffffffff
c0010e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010e4c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010e51:	83 e9 41             	sub    ecx,0x41
c0010e54:	83 f9 19             	cmp    ecx,0x19
c0010e57:	77 18                	ja     c0010e71 <Sys::eject(regs*)+0x32>
c0010e59:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c0010e60:	85 c9                	test   ecx,ecx
c0010e62:	74 0d                	je     c0010e71 <Sys::eject(regs*)+0x32>
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	51                   	push   ecx
c0010e68:	e8 f9 c3 ff ff       	call   c000d266 <LogicalDisk::eject()>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	99                   	cdq    
c0010e71:	83 c4 0c             	add    esp,0xc
c0010e74:	c3                   	ret    

c0010e75 <Sys::exit(regs*)>:
c0010e75:	83 ec 18             	sub    esp,0x18
c0010e78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e7f:	e8 dc 34 00 00       	call   c0014360 <terminateTask(int)>
c0010e84:	83 c8 ff             	or     eax,0xffffffff
c0010e87:	83 c4 1c             	add    esp,0x1c
c0010e8a:	89 c2                	mov    edx,eax
c0010e8c:	c3                   	ret    

c0010e8d <Sys::getCwd(regs*)>:
c0010e8d:	83 ec 10             	sub    esp,0x10
c0010e90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e94:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010e97:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010ea2:	e8 b9 a0 ff ff       	call   c000af60 <Fs::getcwd(Process*, char*, int)>
c0010ea7:	83 c4 1c             	add    esp,0x1c
c0010eaa:	99                   	cdq    
c0010eab:	c3                   	ret    

c0010eac <Sys::getPID(regs*)>:
c0010eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eb6:	99                   	cdq    
c0010eb7:	c3                   	ret    

c0010eb8 <Sys::getRAMData(regs*)>:
c0010eb8:	8b 0d 68 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020968
c0010ebe:	69 05 64 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020964,0xc8
c0010ec8:	99                   	cdq    
c0010ec9:	f7 f9                	idiv   ecx
c0010ecb:	c1 e0 18             	shl    eax,0x18
c0010ece:	09 c8                	or     eax,ecx
c0010ed0:	99                   	cdq    
c0010ed1:	c3                   	ret    

c0010ed2 <Sys::getVGAPtr(regs*)>:
c0010ed2:	55                   	push   ebp
c0010ed3:	57                   	push   edi
c0010ed4:	56                   	push   esi
c0010ed5:	53                   	push   ebx
c0010ed6:	83 ec 18             	sub    esp,0x18
c0010ed9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010edd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ee0:	e8 7b 2f 00 00       	call   c0013e60 <Thr::processFromPID(int)>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	89 c1                	mov    ecx,eax
c0010eea:	b8 01 00 00 00       	mov    eax,0x1
c0010eef:	85 c9                	test   ecx,ecx
c0010ef1:	74 57                	je     c0010f4a <Sys::getVGAPtr(regs*)+0x78>
c0010ef3:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010ef9:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010efd:	74 0c                	je     c0010f0b <Sys::getVGAPtr(regs*)+0x39>
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	55                   	push   ebp
c0010f03:	e8 81 7c ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f0e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f11:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f18:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f1e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f27:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f2a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f30:	50                   	push   eax
c0010f31:	50                   	push   eax
c0010f32:	68 1f e8 01 c0       	push   0xc001e81f
c0010f37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f3a:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f3f:	50                   	push   eax
c0010f40:	e8 db f6 fe ff       	call   c0000620 <strcpy>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	31 c0                	xor    eax,eax
c0010f4a:	83 c4 0c             	add    esp,0xc
c0010f4d:	31 d2                	xor    edx,edx
c0010f4f:	5b                   	pop    ebx
c0010f50:	5e                   	pop    esi
c0010f51:	5f                   	pop    edi
c0010f52:	5d                   	pop    ebp
c0010f53:	c3                   	ret    

c0010f54 <Sys::loadDLL(regs*)>:
c0010f54:	56                   	push   esi
c0010f55:	53                   	push   ebx
c0010f56:	31 d2                	xor    edx,edx
c0010f58:	51                   	push   ecx
c0010f59:	b8 01 00 00 00       	mov    eax,0x1
c0010f5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f62:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010f66:	0f 84 8c 00 00 00    	je     c0010ff8 <Sys::loadDLL(regs*)+0xa4>
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	68 14 01 00 00       	push   0x114
c0010f74:	e8 e0 6e ff ff       	call   c0007e59 <malloc>
c0010f79:	83 c4 0c             	add    esp,0xc
c0010f7c:	89 c3                	mov    ebx,eax
c0010f7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f83:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f86:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010f89:	53                   	push   ebx
c0010f8a:	e8 cf a1 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	31 d2                	xor    edx,edx
c0010f94:	b8 02 00 00 00       	mov    eax,0x2
c0010f99:	85 db                	test   ebx,ebx
c0010f9b:	74 5b                	je     c0010ff8 <Sys::loadDLL(regs*)+0xa4>
c0010f9d:	83 ec 0c             	sub    esp,0xc
c0010fa0:	53                   	push   ebx
c0010fa1:	e8 e6 a4 ff ff       	call   c000b48c <File::exists()>
c0010fa6:	83 c4 10             	add    esp,0x10
c0010fa9:	84 c0                	test   al,al
c0010fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fad:	75 11                	jne    c0010fc0 <Sys::loadDLL(regs*)+0x6c>
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	53                   	push   ebx
c0010fb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fb6:	83 c4 10             	add    esp,0x10
c0010fb9:	b8 03 00 00 00       	mov    eax,0x3
c0010fbe:	eb 36                	jmp    c0010ff6 <Sys::loadDLL(regs*)+0xa2>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	53                   	push   ebx
c0010fc4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fc7:	58                   	pop    eax
c0010fc8:	5a                   	pop    edx
c0010fc9:	6a 00                	push   0x0
c0010fcb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fce:	e8 77 20 00 00       	call   c001304a <Thr::loadDLL(char const*, bool)>
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	89 c1                	mov    ecx,eax
c0010fd8:	31 d2                	xor    edx,edx
c0010fda:	b8 04 00 00 00       	mov    eax,0x4
c0010fdf:	85 c9                	test   ecx,ecx
c0010fe1:	74 15                	je     c0010ff8 <Sys::loadDLL(regs*)+0xa4>
c0010fe3:	53                   	push   ebx
c0010fe4:	53                   	push   ebx
c0010fe5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010feb:	51                   	push   ecx
c0010fec:	e8 8a 22 00 00       	call   c001327b <Thr::executeDLL(unsigned long, void*)>
c0010ff1:	83 c4 10             	add    esp,0x10
c0010ff4:	31 c0                	xor    eax,eax
c0010ff6:	31 d2                	xor    edx,edx
c0010ff8:	59                   	pop    ecx
c0010ff9:	5b                   	pop    ebx
c0010ffa:	5e                   	pop    esi
c0010ffb:	c3                   	ret    

c0010ffc <Sys::read(regs*)>:
c0010ffc:	57                   	push   edi
c0010ffd:	56                   	push   esi
c0010ffe:	53                   	push   ebx
c0010fff:	83 ec 10             	sub    esp,0x10
c0011002:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011006:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011009:	83 f8 02             	cmp    eax,0x2
c001100c:	77 10                	ja     c001101e <Sys::read(regs*)+0x22>
c001100e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011013:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011016:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001101c:	eb 0e                	jmp    c001102c <Sys::read(regs*)+0x30>
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	50                   	push   eax
c0011022:	e8 18 88 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	89 c1                	mov    ecx,eax
c001102c:	83 c8 ff             	or     eax,0xffffffff
c001102f:	85 c9                	test   ecx,ecx
c0011031:	89 c2                	mov    edx,eax
c0011033:	74 28                	je     c001105d <Sys::read(regs*)+0x61>
c0011035:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001103d:	31 ff                	xor    edi,edi
c001103f:	83 ec 0c             	sub    esp,0xc
c0011042:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011044:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011048:	52                   	push   edx
c0011049:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001104c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001104f:	57                   	push   edi
c0011050:	56                   	push   esi
c0011051:	51                   	push   ecx
c0011052:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011055:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011059:	83 c4 20             	add    esp,0x20
c001105c:	99                   	cdq    
c001105d:	83 c4 10             	add    esp,0x10
c0011060:	5b                   	pop    ebx
c0011061:	5e                   	pop    esi
c0011062:	5f                   	pop    edi
c0011063:	c3                   	ret    

c0011064 <Sys::sbrk(regs*)>:
c0011064:	56                   	push   esi
c0011065:	53                   	push   ebx
c0011066:	50                   	push   eax
c0011067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011070:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011073:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011076:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001107c:	85 db                	test   ebx,ebx
c001107e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011081:	74 02                	je     c0011085 <Sys::sbrk(regs*)+0x21>
c0011083:	79 06                	jns    c001108b <Sys::sbrk(regs*)+0x27>
c0011085:	89 f0                	mov    eax,esi
c0011087:	31 d2                	xor    edx,edx
c0011089:	eb 2a                	jmp    c00110b5 <Sys::sbrk(regs*)+0x51>
c001108b:	83 c8 ff             	or     eax,0xffffffff
c001108e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011094:	89 c2                	mov    edx,eax
c0011096:	77 1d                	ja     c00110b5 <Sys::sbrk(regs*)+0x51>
c0011098:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001109e:	50                   	push   eax
c001109f:	c1 ea 0c             	shr    edx,0xc
c00110a2:	68 07 0c 00 00       	push   0xc07
c00110a7:	52                   	push   edx
c00110a8:	51                   	push   ecx
c00110a9:	e8 80 90 ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c00110ae:	89 f0                	mov    eax,esi
c00110b0:	31 d2                	xor    edx,edx
c00110b2:	83 c4 10             	add    esp,0x10
c00110b5:	59                   	pop    ecx
c00110b6:	5b                   	pop    ebx
c00110b7:	5e                   	pop    esi
c00110b8:	c3                   	ret    

c00110b9 <Sys::setCwd(regs*)>:
c00110b9:	83 ec 14             	sub    esp,0x14
c00110bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110c0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00110c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00110cb:	e8 5b a4 ff ff       	call   c000b52b <Fs::setcwd(Process*, char*)>
c00110d0:	83 c4 1c             	add    esp,0x1c
c00110d3:	99                   	cdq    
c00110d4:	c3                   	ret    

c00110d5 <Sys::setTime(regs*)>:
c00110d5:	55                   	push   ebp
c00110d6:	31 c9                	xor    ecx,ecx
c00110d8:	57                   	push   edi
c00110d9:	bd 0c 00 00 00       	mov    ebp,0xc
c00110de:	56                   	push   esi
c00110df:	53                   	push   ebx
c00110e0:	31 db                	xor    ebx,ebx
c00110e2:	83 ec 10             	sub    esp,0x10
c00110e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00110e9:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00110ec:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00110ef:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00110f2:	89 c2                	mov    edx,eax
c00110f4:	66 81 ef 6c 07       	sub    di,0x76c
c00110f9:	83 e2 1f             	and    edx,0x1f
c00110fc:	c1 e7 10             	shl    edi,0x10
c00110ff:	42                   	inc    edx
c0011100:	c1 e8 05             	shr    eax,0x5
c0011103:	88 d1                	mov    cl,dl
c0011105:	31 d2                	xor    edx,edx
c0011107:	f7 f5                	div    ebp
c0011109:	89 dd                	mov    ebp,ebx
c001110b:	88 d5                	mov    ch,dl
c001110d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011113:	0f b7 c1             	movzx  eax,cx
c0011116:	31 d2                	xor    edx,edx
c0011118:	09 f8                	or     eax,edi
c001111a:	bf 3c 00 00 00       	mov    edi,0x3c
c001111f:	89 c1                	mov    ecx,eax
c0011121:	89 f0                	mov    eax,esi
c0011123:	f7 f7                	div    edi
c0011125:	c1 e2 10             	shl    edx,0x10
c0011128:	09 d5                	or     ebp,edx
c001112a:	31 d2                	xor    edx,edx
c001112c:	89 eb                	mov    ebx,ebp
c001112e:	f7 f7                	div    edi
c0011130:	bf 10 0e 00 00       	mov    edi,0xe10
c0011135:	88 d7                	mov    bh,dl
c0011137:	89 f0                	mov    eax,esi
c0011139:	31 d2                	xor    edx,edx
c001113b:	f7 f7                	div    edi
c001113d:	bf 18 00 00 00       	mov    edi,0x18
c0011142:	31 d2                	xor    edx,edx
c0011144:	f7 f7                	div    edi
c0011146:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001114b:	88 d3                	mov    bl,dl
c001114d:	53                   	push   ebx
c001114e:	51                   	push   ecx
c001114f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011155:	e8 e2 ab ff ff       	call   c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001115a:	83 c4 1c             	add    esp,0x1c
c001115d:	83 f0 01             	xor    eax,0x1
c0011160:	5b                   	pop    ebx
c0011161:	0f b6 c0             	movzx  eax,al
c0011164:	5e                   	pop    esi
c0011165:	31 d2                	xor    edx,edx
c0011167:	5f                   	pop    edi
c0011168:	5d                   	pop    ebp
c0011169:	c3                   	ret    

c001116a <Sys::timezone(regs*)>:
c001116a:	53                   	push   ebx
c001116b:	83 ec 08             	sub    esp,0x8
c001116e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011172:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011176:	75 17                	jne    c001118f <Sys::timezone(regs*)+0x25>
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	68 29 e8 01 c0       	push   0xc001e829
c0011180:	e8 63 9a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0011185:	83 c8 ff             	or     eax,0xffffffff
c0011188:	83 c4 10             	add    esp,0x10
c001118b:	89 c2                	mov    edx,eax
c001118d:	eb 20                	jmp    c00111af <Sys::timezone(regs*)+0x45>
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	68 3e e8 01 c0       	push   0xc001e83e
c0011197:	e8 4c 9a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001119c:	58                   	pop    eax
c001119d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00111a0:	e8 f3 a8 ff ff       	call   c000ba98 <User::loadClockSettings(int)>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	b8 01 00 00 00       	mov    eax,0x1
c00111ad:	31 d2                	xor    edx,edx
c00111af:	83 c4 08             	add    esp,0x8
c00111b2:	5b                   	pop    ebx
c00111b3:	c3                   	ret    

c00111b4 <Sys::write(regs*)>:
c00111b4:	57                   	push   edi
c00111b5:	56                   	push   esi
c00111b6:	53                   	push   ebx
c00111b7:	83 ec 10             	sub    esp,0x10
c00111ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111c1:	83 f8 02             	cmp    eax,0x2
c00111c4:	77 10                	ja     c00111d6 <Sys::write(regs*)+0x22>
c00111c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ce:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00111d4:	eb 0e                	jmp    c00111e4 <Sys::write(regs*)+0x30>
c00111d6:	83 ec 0c             	sub    esp,0xc
c00111d9:	50                   	push   eax
c00111da:	e8 60 86 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00111df:	83 c4 10             	add    esp,0x10
c00111e2:	89 c1                	mov    ecx,eax
c00111e4:	83 c8 ff             	or     eax,0xffffffff
c00111e7:	85 c9                	test   ecx,ecx
c00111e9:	89 c2                	mov    edx,eax
c00111eb:	74 28                	je     c0011215 <Sys::write(regs*)+0x61>
c00111ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111f5:	31 ff                	xor    edi,edi
c00111f7:	83 ec 0c             	sub    esp,0xc
c00111fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111fc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011200:	52                   	push   edx
c0011201:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011204:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011207:	57                   	push   edi
c0011208:	56                   	push   esi
c0011209:	51                   	push   ecx
c001120a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001120d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011211:	83 c4 20             	add    esp,0x20
c0011214:	99                   	cdq    
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	5b                   	pop    ebx
c0011219:	5e                   	pop    esi
c001121a:	5f                   	pop    edi
c001121b:	c3                   	ret    

c001121c <Sys::wsbe(regs*)>:
c001121c:	57                   	push   edi
c001121d:	b9 0b 00 00 00       	mov    ecx,0xb
c0011222:	56                   	push   esi
c0011223:	be 7d e8 01 c0       	mov    esi,0xc001e87d
c0011228:	53                   	push   ebx
c0011229:	83 ec 30             	sub    esp,0x30
c001122c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011230:	fc                   	cld    
c0011231:	83 ec 0c             	sub    esp,0xc
c0011234:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011236:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001123a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001123f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011242:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011248:	8b 06                	mov    eax,DWORD PTR [esi]
c001124a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001124d:	57                   	push   edi
c001124e:	e8 0d f3 fe ff       	call   c0000560 <strlen>
c0011253:	5a                   	pop    edx
c0011254:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011258:	52                   	push   edx
c0011259:	31 d2                	xor    edx,edx
c001125b:	57                   	push   edi
c001125c:	52                   	push   edx
c001125d:	50                   	push   eax
c001125e:	56                   	push   esi
c001125f:	ff d3                	call   ebx
c0011261:	83 c4 14             	add    esp,0x14
c0011264:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011268:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001126b:	e8 f0 30 00 00       	call   c0014360 <terminateTask(int)>
c0011270:	83 c4 40             	add    esp,0x40
c0011273:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011278:	5b                   	pop    ebx
c0011279:	31 d2                	xor    edx,edx
c001127b:	5e                   	pop    esi
c001127c:	5f                   	pop    edi
c001127d:	c3                   	ret    

c001127e <Sys::yield(regs*)>:
c001127e:	83 ec 0c             	sub    esp,0xc
c0011281:	fa                   	cli    
c0011282:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0011288:	e8 af 27 00 00       	call   c0013a3c <schedule()>
c001128d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0011292:	48                   	dec    eax
c0011293:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0011298:	75 01                	jne    c001129b <Sys::yield(regs*)+0x1d>
c001129a:	fb                   	sti    
c001129b:	31 c0                	xor    eax,eax
c001129d:	31 d2                	xor    edx,edx
c001129f:	83 c4 0c             	add    esp,0xc
c00112a2:	c3                   	ret    

c00112a3 <sysCallSeekDir(regs*)>:
c00112a3:	31 c0                	xor    eax,eax
c00112a5:	31 d2                	xor    edx,edx
c00112a7:	c3                   	ret    

c00112a8 <sysCallTellDir(regs*)>:
c00112a8:	31 c0                	xor    eax,eax
c00112aa:	31 d2                	xor    edx,edx
c00112ac:	c3                   	ret    

c00112ad <sysCallVerify(regs*)>:
c00112ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b1:	31 d2                	xor    edx,edx
c00112b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112b6:	c3                   	ret    

c00112b7 <sysCallGetArgc(regs*)>:
c00112b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112bf:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112c5:	99                   	cdq    
c00112c6:	c3                   	ret    

c00112c7 <sysCallTTYName(regs*)>:
c00112c7:	b8 01 00 00 00       	mov    eax,0x1
c00112cc:	31 d2                	xor    edx,edx
c00112ce:	c3                   	ret    

c00112cf <sysFormatDisk(regs*)>:
c00112cf:	56                   	push   esi
c00112d0:	53                   	push   ebx
c00112d1:	50                   	push   eax
c00112d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112d6:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c00112dc:	eb 28                	jmp    c0011306 <sysFormatDisk(regs*)+0x37>
c00112de:	83 ec 0c             	sub    esp,0xc
c00112e1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112e4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112e9:	51                   	push   ecx
c00112ea:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112ed:	51                   	push   ecx
c00112ee:	50                   	push   eax
c00112ef:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c00112f6:	50                   	push   eax
c00112f7:	53                   	push   ebx
c00112f8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00112fb:	83 c4 20             	add    esp,0x20
c00112fe:	83 f8 08             	cmp    eax,0x8
c0011301:	75 12                	jne    c0011315 <sysFormatDisk(regs*)+0x46>
c0011303:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011306:	85 db                	test   ebx,ebx
c0011308:	75 d4                	jne    c00112de <sysFormatDisk(regs*)+0xf>
c001130a:	59                   	pop    ecx
c001130b:	b8 03 00 00 00       	mov    eax,0x3
c0011310:	31 d2                	xor    edx,edx
c0011312:	5b                   	pop    ebx
c0011313:	5e                   	pop    esi
c0011314:	c3                   	ret    
c0011315:	85 c0                	test   eax,eax
c0011317:	74 1b                	je     c0011334 <sysFormatDisk(regs*)+0x65>
c0011319:	83 f8 09             	cmp    eax,0x9
c001131c:	74 0b                	je     c0011329 <sysFormatDisk(regs*)+0x5a>
c001131e:	59                   	pop    ecx
c001131f:	b8 02 00 00 00       	mov    eax,0x2
c0011324:	31 d2                	xor    edx,edx
c0011326:	5b                   	pop    ebx
c0011327:	5e                   	pop    esi
c0011328:	c3                   	ret    
c0011329:	59                   	pop    ecx
c001132a:	b8 01 00 00 00       	mov    eax,0x1
c001132f:	31 d2                	xor    edx,edx
c0011331:	5b                   	pop    ebx
c0011332:	5e                   	pop    esi
c0011333:	c3                   	ret    
c0011334:	59                   	pop    ecx
c0011335:	31 c0                	xor    eax,eax
c0011337:	31 d2                	xor    edx,edx
c0011339:	5b                   	pop    ebx
c001133a:	5e                   	pop    esi
c001133b:	c3                   	ret    

c001133c <sysSetDiskVolumeLabel(regs*)>:
c001133c:	56                   	push   esi
c001133d:	53                   	push   ebx
c001133e:	53                   	push   ebx
c001133f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011343:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011346:	83 f8 19             	cmp    eax,0x19
c0011349:	77 2d                	ja     c0011378 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001134b:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c0011352:	85 c9                	test   ecx,ecx
c0011354:	74 22                	je     c0011378 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011356:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011359:	85 db                	test   ebx,ebx
c001135b:	74 1b                	je     c0011378 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001135d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0011363:	85 d2                	test   edx,edx
c0011365:	74 11                	je     c0011378 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011367:	8b 32                	mov    esi,DWORD PTR [edx]
c0011369:	53                   	push   ebx
c001136a:	50                   	push   eax
c001136b:	51                   	push   ecx
c001136c:	52                   	push   edx
c001136d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	99                   	cdq    
c0011374:	59                   	pop    ecx
c0011375:	5b                   	pop    ebx
c0011376:	5e                   	pop    esi
c0011377:	c3                   	ret    
c0011378:	59                   	pop    ecx
c0011379:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001137e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011383:	5b                   	pop    ebx
c0011384:	5e                   	pop    esi
c0011385:	c3                   	ret    

c0011386 <sysGetDiskVolumeLabel(regs*)>:
c0011386:	57                   	push   edi
c0011387:	56                   	push   esi
c0011388:	53                   	push   ebx
c0011389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001138d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011390:	83 fa 19             	cmp    edx,0x19
c0011393:	77 38                	ja     c00113cd <sysGetDiskVolumeLabel(regs*)+0x47>
c0011395:	8b 0c 95 a0 2e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd160]
c001139c:	85 c9                	test   ecx,ecx
c001139e:	74 2d                	je     c00113cd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113a0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113a3:	85 db                	test   ebx,ebx
c00113a5:	74 26                	je     c00113cd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113a7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113aa:	85 f6                	test   esi,esi
c00113ac:	74 1f                	je     c00113cd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113ae:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00113b4:	85 c0                	test   eax,eax
c00113b6:	74 15                	je     c00113cd <sysGetDiskVolumeLabel(regs*)+0x47>
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	8b 38                	mov    edi,DWORD PTR [eax]
c00113bd:	56                   	push   esi
c00113be:	53                   	push   ebx
c00113bf:	52                   	push   edx
c00113c0:	51                   	push   ecx
c00113c1:	50                   	push   eax
c00113c2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113c5:	83 c4 20             	add    esp,0x20
c00113c8:	99                   	cdq    
c00113c9:	5b                   	pop    ebx
c00113ca:	5e                   	pop    esi
c00113cb:	5f                   	pop    edi
c00113cc:	c3                   	ret    
c00113cd:	5b                   	pop    ebx
c00113ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	c3                   	ret    

c00113db <sysShutdown(regs*)>:
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113e5:	85 c0                	test   eax,eax
c00113e7:	74 18                	je     c0011401 <sysShutdown(regs*)+0x26>
c00113e9:	83 f8 01             	cmp    eax,0x1
c00113ec:	74 38                	je     c0011426 <sysShutdown(regs*)+0x4b>
c00113ee:	83 f8 02             	cmp    eax,0x2
c00113f1:	74 24                	je     c0011417 <sysShutdown(regs*)+0x3c>
c00113f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113fd:	83 c4 0c             	add    esp,0xc
c0011400:	c3                   	ret    
c0011401:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011406:	8b 10                	mov    edx,DWORD PTR [eax]
c0011408:	6a 00                	push   0x0
c001140a:	6a 00                	push   0x0
c001140c:	6a 00                	push   0x0
c001140e:	50                   	push   eax
c001140f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	eb dc                	jmp    c00113f3 <sysShutdown(regs*)+0x18>
c0011417:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001141c:	8b 10                	mov    edx,DWORD PTR [eax]
c001141e:	6a 00                	push   0x0
c0011420:	6a 00                	push   0x0
c0011422:	6a 01                	push   0x1
c0011424:	eb e8                	jmp    c001140e <sysShutdown(regs*)+0x33>
c0011426:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c001142b:	85 c0                	test   eax,eax
c001142d:	74 02                	je     c0011431 <sysShutdown(regs*)+0x56>
c001142f:	ff d0                	call   eax
c0011431:	31 c0                	xor    eax,eax
c0011433:	31 d2                	xor    edx,edx
c0011435:	83 c4 0c             	add    esp,0xc
c0011438:	c3                   	ret    

c0011439 <sysCallRealpath(regs*)>:
c0011439:	83 ec 0c             	sub    esp,0xc
c001143c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011440:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011443:	85 d2                	test   edx,edx
c0011445:	74 07                	je     c001144e <sysCallRealpath(regs*)+0x15>
c0011447:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001144a:	85 c0                	test   eax,eax
c001144c:	75 0b                	jne    c0011459 <sysCallRealpath(regs*)+0x20>
c001144e:	b8 01 00 00 00       	mov    eax,0x1
c0011453:	31 d2                	xor    edx,edx
c0011455:	83 c4 0c             	add    esp,0xc
c0011458:	c3                   	ret    
c0011459:	51                   	push   ecx
c001145a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011460:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011463:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011469:	51                   	push   ecx
c001146a:	52                   	push   edx
c001146b:	50                   	push   eax
c001146c:	e8 43 9b ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	31 c0                	xor    eax,eax
c0011476:	31 d2                	xor    edx,edx
c0011478:	83 c4 0c             	add    esp,0xc
c001147b:	c3                   	ret    

c001147c <sysCallReadDir(regs*)>:
c001147c:	53                   	push   ebx
c001147d:	83 ec 18             	sub    esp,0x18
c0011480:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011484:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011487:	83 f8 02             	cmp    eax,0x2
c001148a:	76 61                	jbe    c00114ed <sysCallReadDir(regs*)+0x71>
c001148c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011493:	77 49                	ja     c00114de <sysCallReadDir(regs*)+0x62>
c0011495:	83 ec 0c             	sub    esp,0xc
c0011498:	50                   	push   eax
c0011499:	e8 a1 83 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001149e:	83 c4 10             	add    esp,0x10
c00114a1:	85 c0                	test   eax,eax
c00114a3:	74 39                	je     c00114de <sysCallReadDir(regs*)+0x62>
c00114a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114ad:	83 ec 0c             	sub    esp,0xc
c00114b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00114b2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114b6:	51                   	push   ecx
c00114b7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114ba:	51                   	push   ecx
c00114bb:	6a 00                	push   0x0
c00114bd:	68 10 01 00 00       	push   0x110
c00114c2:	50                   	push   eax
c00114c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114c6:	83 c4 20             	add    esp,0x20
c00114c9:	85 c0                	test   eax,eax
c00114cb:	74 29                	je     c00114f6 <sysCallReadDir(regs*)+0x7a>
c00114cd:	83 f8 07             	cmp    eax,0x7
c00114d0:	74 1b                	je     c00114ed <sysCallReadDir(regs*)+0x71>
c00114d2:	b8 02 00 00 00       	mov    eax,0x2
c00114d7:	31 d2                	xor    edx,edx
c00114d9:	83 c4 18             	add    esp,0x18
c00114dc:	5b                   	pop    ebx
c00114dd:	c3                   	ret    
c00114de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e8:	83 c4 18             	add    esp,0x18
c00114eb:	5b                   	pop    ebx
c00114ec:	c3                   	ret    
c00114ed:	b8 01 00 00 00       	mov    eax,0x1
c00114f2:	31 d2                	xor    edx,edx
c00114f4:	eb e3                	jmp    c00114d9 <sysCallReadDir(regs*)+0x5d>
c00114f6:	31 c0                	xor    eax,eax
c00114f8:	31 d2                	xor    edx,edx
c00114fa:	eb dd                	jmp    c00114d9 <sysCallReadDir(regs*)+0x5d>

c00114fc <sysCallIsATTY(regs*)>:
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011503:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011506:	83 f8 02             	cmp    eax,0x2
c0011509:	76 07                	jbe    c0011512 <sysCallIsATTY(regs*)+0x16>
c001150b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011510:	75 28                	jne    c001153a <sysCallIsATTY(regs*)+0x3e>
c0011512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011517:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001151a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011520:	85 c0                	test   eax,eax
c0011522:	74 26                	je     c001154a <sysCallIsATTY(regs*)+0x4e>
c0011524:	83 ec 0c             	sub    esp,0xc
c0011527:	8b 10                	mov    edx,DWORD PTR [eax]
c0011529:	50                   	push   eax
c001152a:	ff 12                	call   DWORD PTR [edx]
c001152c:	31 d2                	xor    edx,edx
c001152e:	25 ff 00 00 00       	and    eax,0xff
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	83 c4 0c             	add    esp,0xc
c0011539:	c3                   	ret    
c001153a:	83 ec 0c             	sub    esp,0xc
c001153d:	50                   	push   eax
c001153e:	e8 fc 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	85 c0                	test   eax,eax
c0011548:	75 da                	jne    c0011524 <sysCallIsATTY(regs*)+0x28>
c001154a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011554:	83 c4 0c             	add    esp,0xc
c0011557:	c3                   	ret    

c0011558 <sysCallSeek(regs*)>:
c0011558:	53                   	push   ebx
c0011559:	83 ec 08             	sub    esp,0x8
c001155c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011560:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011563:	8d 50 fd             	lea    edx,[eax-0x3]
c0011566:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001156c:	77 34                	ja     c00115a2 <sysCallSeek(regs*)+0x4a>
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	50                   	push   eax
c0011572:	e8 c8 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011577:	83 c4 0c             	add    esp,0xc
c001157a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001157d:	31 db                	xor    ebx,ebx
c001157f:	53                   	push   ebx
c0011580:	51                   	push   ecx
c0011581:	50                   	push   eax
c0011582:	e8 55 9d ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0011587:	83 c4 10             	add    esp,0x10
c001158a:	85 c0                	test   eax,eax
c001158c:	0f 95 c0             	setne  al
c001158f:	31 d2                	xor    edx,edx
c0011591:	25 ff 00 00 00       	and    eax,0xff
c0011596:	f7 d8                	neg    eax
c0011598:	83 d2 00             	adc    edx,0x0
c001159b:	83 c4 08             	add    esp,0x8
c001159e:	f7 da                	neg    edx
c00115a0:	5b                   	pop    ebx
c00115a1:	c3                   	ret    
c00115a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ac:	83 c4 08             	add    esp,0x8
c00115af:	5b                   	pop    ebx
c00115b0:	c3                   	ret    

c00115b1 <sysCallTell(regs*)>:
c00115b1:	53                   	push   ebx
c00115b2:	83 ec 08             	sub    esp,0x8
c00115b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115bc:	83 f8 02             	cmp    eax,0x2
c00115bf:	76 50                	jbe    c0011611 <sysCallTell(regs*)+0x60>
c00115c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115c6:	76 19                	jbe    c00115e1 <sysCallTell(regs*)+0x30>
c00115c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115cb:	31 d2                	xor    edx,edx
c00115cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115da:	31 c0                	xor    eax,eax
c00115dc:	83 c4 08             	add    esp,0x8
c00115df:	5b                   	pop    ebx
c00115e0:	c3                   	ret    
c00115e1:	83 ec 0c             	sub    esp,0xc
c00115e4:	50                   	push   eax
c00115e5:	e8 55 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00115ea:	5a                   	pop    edx
c00115eb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115ee:	59                   	pop    ecx
c00115ef:	53                   	push   ebx
c00115f0:	50                   	push   eax
c00115f1:	e8 3c 9d ff ff       	call   c000b332 <File::tell(unsigned long long*)>
c00115f6:	83 c4 10             	add    esp,0x10
c00115f9:	85 c0                	test   eax,eax
c00115fb:	0f 95 c0             	setne  al
c00115fe:	31 d2                	xor    edx,edx
c0011600:	25 ff 00 00 00       	and    eax,0xff
c0011605:	f7 d8                	neg    eax
c0011607:	83 d2 00             	adc    edx,0x0
c001160a:	83 c4 08             	add    esp,0x8
c001160d:	f7 da                	neg    edx
c001160f:	5b                   	pop    ebx
c0011610:	c3                   	ret    
c0011611:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011616:	ba ff ff ff ff       	mov    edx,0xffffffff
c001161b:	83 c4 08             	add    esp,0x8
c001161e:	5b                   	pop    ebx
c001161f:	c3                   	ret    

c0011620 <sysCallSize(regs*)>:
c0011620:	53                   	push   ebx
c0011621:	83 ec 18             	sub    esp,0x18
c0011624:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011628:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001162b:	83 f8 02             	cmp    eax,0x2
c001162e:	76 56                	jbe    c0011686 <sysCallSize(regs*)+0x66>
c0011630:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011635:	76 19                	jbe    c0011650 <sysCallSize(regs*)+0x30>
c0011637:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001163a:	31 d2                	xor    edx,edx
c001163c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011642:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011649:	31 c0                	xor    eax,eax
c001164b:	83 c4 18             	add    esp,0x18
c001164e:	5b                   	pop    ebx
c001164f:	c3                   	ret    
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	50                   	push   eax
c0011654:	e8 e6 81 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011659:	83 c4 0c             	add    esp,0xc
c001165c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011660:	52                   	push   edx
c0011661:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011664:	52                   	push   edx
c0011665:	50                   	push   eax
c0011666:	e8 5f 9e ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	85 c0                	test   eax,eax
c0011670:	0f 95 c0             	setne  al
c0011673:	31 d2                	xor    edx,edx
c0011675:	25 ff 00 00 00       	and    eax,0xff
c001167a:	f7 d8                	neg    eax
c001167c:	83 d2 00             	adc    edx,0x0
c001167f:	83 c4 18             	add    esp,0x18
c0011682:	f7 da                	neg    edx
c0011684:	5b                   	pop    ebx
c0011685:	c3                   	ret    
c0011686:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001168b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011690:	83 c4 18             	add    esp,0x18
c0011693:	5b                   	pop    ebx
c0011694:	c3                   	ret    

c0011695 <sysCallSizeFromFilename(regs*)>:
c0011695:	57                   	push   edi
c0011696:	56                   	push   esi
c0011697:	53                   	push   ebx
c0011698:	83 ec 20             	sub    esp,0x20
c001169b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001169f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116a2:	83 fb 02             	cmp    ebx,0x2
c00116a5:	0f 86 8c 00 00 00    	jbe    c0011737 <sysCallSizeFromFilename(regs*)+0xa2>
c00116ab:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116b1:	76 1b                	jbe    c00116ce <sysCallSizeFromFilename(regs*)+0x39>
c00116b3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116b6:	31 d2                	xor    edx,edx
c00116b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116c5:	83 c4 20             	add    esp,0x20
c00116c8:	31 c0                	xor    eax,eax
c00116ca:	5b                   	pop    ebx
c00116cb:	5e                   	pop    esi
c00116cc:	5f                   	pop    edi
c00116cd:	c3                   	ret    
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	68 14 01 00 00       	push   0x114
c00116d6:	e8 7e 67 ff ff       	call   c0007e59 <malloc>
c00116db:	83 c4 0c             	add    esp,0xc
c00116de:	89 c7                	mov    edi,eax
c00116e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116e8:	50                   	push   eax
c00116e9:	53                   	push   ebx
c00116ea:	57                   	push   edi
c00116eb:	e8 6e 9a ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00116f0:	83 c4 0c             	add    esp,0xc
c00116f3:	8d 44 24 23          	lea    eax,[esp+0x23]
c00116f7:	50                   	push   eax
c00116f8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00116fb:	52                   	push   edx
c00116fc:	57                   	push   edi
c00116fd:	e8 c8 9d ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	85 ff                	test   edi,edi
c0011707:	74 14                	je     c001171d <sysCallSizeFromFilename(regs*)+0x88>
c0011709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001170d:	8b 17                	mov    edx,DWORD PTR [edi]
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	57                   	push   edi
c0011713:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011716:	83 c4 10             	add    esp,0x10
c0011719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001171d:	85 c0                	test   eax,eax
c001171f:	0f 95 c0             	setne  al
c0011722:	31 d2                	xor    edx,edx
c0011724:	25 ff 00 00 00       	and    eax,0xff
c0011729:	f7 d8                	neg    eax
c001172b:	83 d2 00             	adc    edx,0x0
c001172e:	83 c4 20             	add    esp,0x20
c0011731:	f7 da                	neg    edx
c0011733:	5b                   	pop    ebx
c0011734:	5e                   	pop    esi
c0011735:	5f                   	pop    edi
c0011736:	c3                   	ret    
c0011737:	83 c4 20             	add    esp,0x20
c001173a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001173f:	5b                   	pop    ebx
c0011740:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011745:	5e                   	pop    esi
c0011746:	5f                   	pop    edi
c0011747:	c3                   	ret    

c0011748 <sysCallClose(regs*)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 08             	sub    esp,0x8
c001174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011750:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011753:	83 f8 02             	cmp    eax,0x2
c0011756:	76 41                	jbe    c0011799 <sysCallClose(regs*)+0x51>
c0011758:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001175e:	83 fa 01             	cmp    edx,0x1
c0011761:	76 2d                	jbe    c0011790 <sysCallClose(regs*)+0x48>
c0011763:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011768:	77 2f                	ja     c0011799 <sysCallClose(regs*)+0x51>
c001176a:	83 ec 0c             	sub    esp,0xc
c001176d:	50                   	push   eax
c001176e:	e8 cc 80 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011773:	89 c3                	mov    ebx,eax
c0011775:	89 04 24             	mov    DWORD PTR [esp],eax
c0011778:	e8 ff 9a ff ff       	call   c000b27c <File::close()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	85 db                	test   ebx,ebx
c0011782:	74 0c                	je     c0011790 <sysCallClose(regs*)+0x48>
c0011784:	83 ec 0c             	sub    esp,0xc
c0011787:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011789:	53                   	push   ebx
c001178a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	31 c0                	xor    eax,eax
c0011792:	31 d2                	xor    edx,edx
c0011794:	83 c4 08             	add    esp,0x8
c0011797:	5b                   	pop    ebx
c0011798:	c3                   	ret    
c0011799:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001179e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117a3:	83 c4 08             	add    esp,0x8
c00117a6:	5b                   	pop    ebx
c00117a7:	c3                   	ret    

c00117a8 <sysCallOpenDir(regs*)>:
c00117a8:	56                   	push   esi
c00117a9:	53                   	push   ebx
c00117aa:	50                   	push   eax
c00117ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117b2:	85 c0                	test   eax,eax
c00117b4:	74 5b                	je     c0011811 <sysCallOpenDir(regs*)+0x69>
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	68 14 01 00 00       	push   0x114
c00117be:	e8 96 66 ff ff       	call   c0007e59 <malloc>
c00117c3:	83 c4 0c             	add    esp,0xc
c00117c6:	89 c6                	mov    esi,eax
c00117c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117d0:	50                   	push   eax
c00117d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117d4:	50                   	push   eax
c00117d5:	56                   	push   esi
c00117d6:	e8 ad 9e ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c00117db:	83 c4 10             	add    esp,0x10
c00117de:	85 f6                	test   esi,esi
c00117e0:	74 2f                	je     c0011811 <sysCallOpenDir(regs*)+0x69>
c00117e2:	83 ec 0c             	sub    esp,0xc
c00117e5:	56                   	push   esi
c00117e6:	e8 5d 9f ff ff       	call   c000b748 <Directory::open()>
c00117eb:	83 c4 10             	add    esp,0x10
c00117ee:	85 c0                	test   eax,eax
c00117f0:	75 1f                	jne    c0011811 <sysCallOpenDir(regs*)+0x69>
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	56                   	push   esi
c00117f6:	e8 4f 7d ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c00117fb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	89 02                	mov    DWORD PTR [edx],eax
c0011803:	c1 f8 1f             	sar    eax,0x1f
c0011806:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011809:	31 c0                	xor    eax,eax
c001180b:	59                   	pop    ecx
c001180c:	31 d2                	xor    edx,edx
c001180e:	5b                   	pop    ebx
c001180f:	5e                   	pop    esi
c0011810:	c3                   	ret    
c0011811:	59                   	pop    ecx
c0011812:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011817:	ba ff ff ff ff       	mov    edx,0xffffffff
c001181c:	5b                   	pop    ebx
c001181d:	5e                   	pop    esi
c001181e:	c3                   	ret    

c001181f <sysCallCloseDir(regs*)>:
c001181f:	53                   	push   ebx
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011827:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001182a:	8d 50 fd             	lea    edx,[eax-0x3]
c001182d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011833:	77 2f                	ja     c0011864 <sysCallCloseDir(regs*)+0x45>
c0011835:	83 ec 0c             	sub    esp,0xc
c0011838:	50                   	push   eax
c0011839:	e8 01 80 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001183e:	89 c3                	mov    ebx,eax
c0011840:	89 04 24             	mov    DWORD PTR [esp],eax
c0011843:	e8 5c 9f ff ff       	call   c000b7a4 <Directory::close()>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	85 db                	test   ebx,ebx
c001184d:	74 0c                	je     c001185b <sysCallCloseDir(regs*)+0x3c>
c001184f:	83 ec 0c             	sub    esp,0xc
c0011852:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011854:	53                   	push   ebx
c0011855:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	31 c0                	xor    eax,eax
c001185d:	31 d2                	xor    edx,edx
c001185f:	83 c4 08             	add    esp,0x8
c0011862:	5b                   	pop    ebx
c0011863:	c3                   	ret    
c0011864:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011869:	ba ff ff ff ff       	mov    edx,0xffffffff
c001186e:	83 c4 08             	add    esp,0x8
c0011871:	5b                   	pop    ebx
c0011872:	c3                   	ret    

c0011873 <sysCallMakeDir(regs*)>:
c0011873:	56                   	push   esi
c0011874:	53                   	push   ebx
c0011875:	83 ec 10             	sub    esp,0x10
c0011878:	68 14 01 00 00       	push   0x114
c001187d:	e8 d7 65 ff ff       	call   c0007e59 <malloc>
c0011882:	83 c4 0c             	add    esp,0xc
c0011885:	89 c3                	mov    ebx,eax
c0011887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001188f:	56                   	push   esi
c0011890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011894:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011897:	50                   	push   eax
c0011898:	53                   	push   ebx
c0011899:	e8 ea 9d ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	85 db                	test   ebx,ebx
c00118a3:	74 32                	je     c00118d7 <sysCallMakeDir(regs*)+0x64>
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	53                   	push   ebx
c00118a9:	e8 7a a0 ff ff       	call   c000b928 <Directory::create()>
c00118ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118b1:	89 c6                	mov    esi,eax
c00118b3:	e8 ec 9e ff ff       	call   c000b7a4 <Directory::close()>
c00118b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	31 c0                	xor    eax,eax
c00118c5:	59                   	pop    ecx
c00118c6:	85 f6                	test   esi,esi
c00118c8:	5b                   	pop    ebx
c00118c9:	0f 95 c0             	setne  al
c00118cc:	5e                   	pop    esi
c00118cd:	31 d2                	xor    edx,edx
c00118cf:	f7 d8                	neg    eax
c00118d1:	83 d2 00             	adc    edx,0x0
c00118d4:	f7 da                	neg    edx
c00118d6:	c3                   	ret    
c00118d7:	59                   	pop    ecx
c00118d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118e2:	5b                   	pop    ebx
c00118e3:	5e                   	pop    esi
c00118e4:	c3                   	ret    

c00118e5 <sysCallWait(regs*)>:
c00118e5:	83 ec 10             	sub    esp,0x10
c00118e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118ef:	52                   	push   edx
c00118f0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118f3:	51                   	push   ecx
c00118f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118f7:	50                   	push   eax
c00118f8:	e8 6b 23 00 00       	call   c0013c68 <waitTask(int, int*, int)>
c00118fd:	83 c4 1c             	add    esp,0x1c
c0011900:	99                   	cdq    
c0011901:	c3                   	ret    

c0011902 <sysCallNotImpl(regs*)>:
c0011902:	83 ec 18             	sub    esp,0x18
c0011905:	68 a9 e8 01 c0       	push   0xc001e8a9
c001190a:	e8 d8 ed ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001190f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011914:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011919:	83 c4 1c             	add    esp,0x1c
c001191c:	c3                   	ret    

c001191d <sysPanic(regs*)>:
c001191d:	83 ec 18             	sub    esp,0x18
c0011920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011924:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011927:	50                   	push   eax
c0011928:	e8 ba ed ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001192d:	b8 01 00 00 00       	mov    eax,0x1
c0011932:	31 d2                	xor    edx,edx
c0011934:	83 c4 1c             	add    esp,0x1c
c0011937:	c3                   	ret    

c0011938 <sysCallRmdir(regs*)>:
c0011938:	56                   	push   esi
c0011939:	53                   	push   ebx
c001193a:	83 ec 20             	sub    esp,0x20
c001193d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011941:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011944:	68 14 01 00 00       	push   0x114
c0011949:	e8 0b 65 ff ff       	call   c0007e59 <malloc>
c001194e:	83 c4 0c             	add    esp,0xc
c0011951:	89 c3                	mov    ebx,eax
c0011953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011958:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001195b:	50                   	push   eax
c001195c:	56                   	push   esi
c001195d:	53                   	push   ebx
c001195e:	e8 fb 97 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011966:	e8 2b 9a ff ff       	call   c000b396 <File::unlink()>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	85 db                	test   ebx,ebx
c0011970:	74 14                	je     c0011986 <sysCallRmdir(regs*)+0x4e>
c0011972:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011976:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	53                   	push   ebx
c001197c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001197f:	83 c4 10             	add    esp,0x10
c0011982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011986:	85 c0                	test   eax,eax
c0011988:	0f 95 c0             	setne  al
c001198b:	31 d2                	xor    edx,edx
c001198d:	25 ff 00 00 00       	and    eax,0xff
c0011992:	f7 d8                	neg    eax
c0011994:	83 d2 00             	adc    edx,0x0
c0011997:	83 c4 14             	add    esp,0x14
c001199a:	f7 da                	neg    edx
c001199c:	5b                   	pop    ebx
c001199d:	5e                   	pop    esi
c001199e:	c3                   	ret    

c001199f <sysCallUnlink(regs*)>:
c001199f:	56                   	push   esi
c00119a0:	53                   	push   ebx
c00119a1:	83 ec 20             	sub    esp,0x20
c00119a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119a8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119ab:	68 14 01 00 00       	push   0x114
c00119b0:	e8 a4 64 ff ff       	call   c0007e59 <malloc>
c00119b5:	83 c4 0c             	add    esp,0xc
c00119b8:	89 c3                	mov    ebx,eax
c00119ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c2:	50                   	push   eax
c00119c3:	56                   	push   esi
c00119c4:	53                   	push   ebx
c00119c5:	e8 94 97 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00119ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119cd:	e8 c4 99 ff ff       	call   c000b396 <File::unlink()>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	85 db                	test   ebx,ebx
c00119d7:	74 14                	je     c00119ed <sysCallUnlink(regs*)+0x4e>
c00119d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	53                   	push   ebx
c00119e3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ed:	85 c0                	test   eax,eax
c00119ef:	0f 95 c0             	setne  al
c00119f2:	31 d2                	xor    edx,edx
c00119f4:	25 ff 00 00 00       	and    eax,0xff
c00119f9:	f7 d8                	neg    eax
c00119fb:	83 d2 00             	adc    edx,0x0
c00119fe:	83 c4 14             	add    esp,0x14
c0011a01:	f7 da                	neg    edx
c0011a03:	5b                   	pop    ebx
c0011a04:	5e                   	pop    esi
c0011a05:	c3                   	ret    

c0011a06 <sysCallGetArgv(regs*)>:
c0011a06:	83 ec 0c             	sub    esp,0xc
c0011a09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a0d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a10:	85 c0                	test   eax,eax
c0011a12:	78 2c                	js     c0011a40 <sysCallGetArgv(regs*)+0x3a>
c0011a14:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a1a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a1d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a23:	7d 1b                	jge    c0011a40 <sysCallGetArgv(regs*)+0x3a>
c0011a25:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a2c:	85 c0                	test   eax,eax
c0011a2e:	74 18                	je     c0011a48 <sysCallGetArgv(regs*)+0x42>
c0011a30:	83 ec 08             	sub    esp,0x8
c0011a33:	50                   	push   eax
c0011a34:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a37:	50                   	push   eax
c0011a38:	e8 e3 eb fe ff       	call   c0000620 <strcpy>
c0011a3d:	83 c4 10             	add    esp,0x10
c0011a40:	31 c0                	xor    eax,eax
c0011a42:	31 d2                	xor    edx,edx
c0011a44:	83 c4 0c             	add    esp,0xc
c0011a47:	c3                   	ret    
c0011a48:	b8 01 00 00 00       	mov    eax,0x1
c0011a4d:	31 d2                	xor    edx,edx
c0011a4f:	83 c4 0c             	add    esp,0xc
c0011a52:	c3                   	ret    

c0011a53 <sysCallUSleep(regs*)>:
c0011a53:	83 ec 1c             	sub    esp,0x1c
c0011a56:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a5a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a5d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a60:	6a 00                	push   0x0
c0011a62:	6a 64                	push   0x64
c0011a64:	52                   	push   edx
c0011a65:	50                   	push   eax
c0011a66:	e8 45 a7 00 00       	call   c001c1b0 <__udivdi3>
c0011a6b:	83 c4 14             	add    esp,0x14
c0011a6e:	50                   	push   eax
c0011a6f:	e8 c8 22 00 00       	call   c0013d3c <milliTenthSleep(unsigned int)>
c0011a74:	31 c0                	xor    eax,eax
c0011a76:	31 d2                	xor    edx,edx
c0011a78:	83 c4 1c             	add    esp,0x1c
c0011a7b:	c3                   	ret    

c0011a7c <sysCallSpawn(regs*)>:
c0011a7c:	56                   	push   esi
c0011a7d:	53                   	push   ebx
c0011a7e:	50                   	push   eax
c0011a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a86:	85 c0                	test   eax,eax
c0011a88:	75 08                	jne    c0011a92 <sysCallSpawn(regs*)+0x16>
c0011a8a:	59                   	pop    ecx
c0011a8b:	31 c0                	xor    eax,eax
c0011a8d:	31 d2                	xor    edx,edx
c0011a8f:	5b                   	pop    ebx
c0011a90:	5e                   	pop    esi
c0011a91:	c3                   	ret    
c0011a92:	83 ec 0c             	sub    esp,0xc
c0011a95:	68 1f 07 00 00       	push   0x71f
c0011a9a:	e8 ba 63 ff ff       	call   c0007e59 <malloc>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	89 c6                	mov    esi,eax
c0011aa4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aa7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aaa:	85 c0                	test   eax,eax
c0011aac:	75 33                	jne    c0011ae1 <sysCallSpawn(regs*)+0x65>
c0011aae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab6:	52                   	push   edx
c0011ab7:	50                   	push   eax
c0011ab8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011abb:	53                   	push   ebx
c0011abc:	56                   	push   esi
c0011abd:	e8 5e 19 00 00       	call   c0013420 <Process::Process(char const*, Process*, char**)>
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011acc:	75 bc                	jne    c0011a8a <sysCallSpawn(regs*)+0xe>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	56                   	push   esi
c0011ad2:	e8 3d 1e 00 00       	call   c0013914 <Process::createUserThread()>
c0011ad7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	99                   	cdq    
c0011add:	59                   	pop    ecx
c0011ade:	5b                   	pop    ebx
c0011adf:	5e                   	pop    esi
c0011ae0:	c3                   	ret    
c0011ae1:	31 c0                	xor    eax,eax
c0011ae3:	eb d1                	jmp    c0011ab6 <sysCallSpawn(regs*)+0x3a>

c0011ae5 <sysCallGetEnv(regs*)>:
c0011ae5:	57                   	push   edi
c0011ae6:	56                   	push   esi
c0011ae7:	53                   	push   ebx
c0011ae8:	83 ec 1c             	sub    esp,0x1c
c0011aeb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011af7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011afa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011afd:	50                   	push   eax
c0011afe:	e8 30 eb ff ff       	call   c0010633 <Krnl::getProcessTotalEnvCount(Process*)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	39 c7                	cmp    edi,eax
c0011b08:	7c 14                	jl     c0011b1e <sysCallGetEnv(regs*)+0x39>
c0011b0a:	85 f6                	test   esi,esi
c0011b0c:	75 0b                	jne    c0011b19 <sysCallGetEnv(regs*)+0x34>
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	31 c0                	xor    eax,eax
c0011b13:	5b                   	pop    ebx
c0011b14:	31 d2                	xor    edx,edx
c0011b16:	5e                   	pop    esi
c0011b17:	5f                   	pop    edi
c0011b18:	c3                   	ret    
c0011b19:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b1c:	eb f0                	jmp    c0011b0e <sysCallGetEnv(regs*)+0x29>
c0011b1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b22:	52                   	push   edx
c0011b23:	57                   	push   edi
c0011b24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b2a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b2d:	51                   	push   ecx
c0011b2e:	50                   	push   eax
c0011b2f:	e8 1f eb ff ff       	call   c0010653 <Krnl::getProcessEnvPair(Process*, int)>
c0011b34:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b3f:	83 c4 0c             	add    esp,0xc
c0011b42:	85 db                	test   ebx,ebx
c0011b44:	75 23                	jne    c0011b69 <sysCallGetEnv(regs*)+0x84>
c0011b46:	83 ec 0c             	sub    esp,0xc
c0011b49:	50                   	push   eax
c0011b4a:	e8 11 ea fe ff       	call   c0000560 <strlen>
c0011b4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b52:	89 c3                	mov    ebx,eax
c0011b54:	e8 07 ea fe ff       	call   c0000560 <strlen>
c0011b59:	31 d2                	xor    edx,edx
c0011b5b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b5f:	83 c4 10             	add    esp,0x10
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	5b                   	pop    ebx
c0011b66:	5e                   	pop    esi
c0011b67:	5f                   	pop    edi
c0011b68:	c3                   	ret    
c0011b69:	83 ec 08             	sub    esp,0x8
c0011b6c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b6f:	50                   	push   eax
c0011b70:	56                   	push   esi
c0011b71:	e8 aa ea fe ff       	call   c0000620 <strcpy>
c0011b76:	58                   	pop    eax
c0011b77:	5a                   	pop    edx
c0011b78:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011b7d:	56                   	push   esi
c0011b7e:	e8 5d ec fe ff       	call   c00007e0 <strcat>
c0011b83:	59                   	pop    ecx
c0011b84:	5b                   	pop    ebx
c0011b85:	57                   	push   edi
c0011b86:	56                   	push   esi
c0011b87:	e8 54 ec fe ff       	call   c00007e0 <strcat>
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	e9 7a ff ff ff       	jmp    c0011b0e <sysCallGetEnv(regs*)+0x29>

c0011b94 <sysSetFatAttrib(regs*)>:
c0011b94:	57                   	push   edi
c0011b95:	56                   	push   esi
c0011b96:	53                   	push   ebx
c0011b97:	83 ec 1c             	sub    esp,0x1c
c0011b9a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b9e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ba1:	68 14 01 00 00       	push   0x114
c0011ba6:	e8 ae 62 ff ff       	call   c0007e59 <malloc>
c0011bab:	83 c4 0c             	add    esp,0xc
c0011bae:	89 c3                	mov    ebx,eax
c0011bb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb8:	50                   	push   eax
c0011bb9:	57                   	push   edi
c0011bba:	53                   	push   ebx
c0011bbb:	e8 9e 95 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011bc0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bc3:	83 c4 0c             	add    esp,0xc
c0011bc6:	0f b6 d4             	movzx  edx,ah
c0011bc9:	25 ff 00 00 00       	and    eax,0xff
c0011bce:	52                   	push   edx
c0011bcf:	50                   	push   eax
c0011bd0:	53                   	push   ebx
c0011bd1:	e8 5a 98 ff ff       	call   c000b430 <File::chfatattr(unsigned char, unsigned char)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	85 db                	test   ebx,ebx
c0011bdb:	74 14                	je     c0011bf1 <sysSetFatAttrib(regs*)+0x5d>
c0011bdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011be1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011be3:	83 ec 0c             	sub    esp,0xc
c0011be6:	53                   	push   ebx
c0011be7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bf1:	85 c0                	test   eax,eax
c0011bf3:	0f 95 c0             	setne  al
c0011bf6:	31 d2                	xor    edx,edx
c0011bf8:	25 ff 00 00 00       	and    eax,0xff
c0011bfd:	f7 d8                	neg    eax
c0011bff:	83 d2 00             	adc    edx,0x0
c0011c02:	83 c4 10             	add    esp,0x10
c0011c05:	f7 da                	neg    edx
c0011c07:	5b                   	pop    ebx
c0011c08:	5e                   	pop    esi
c0011c09:	5f                   	pop    edi
c0011c0a:	c3                   	ret    

c0011c0b <sysPipe(regs*)>:
c0011c0b:	57                   	push   edi
c0011c0c:	56                   	push   esi
c0011c0d:	53                   	push   ebx
c0011c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c12:	83 ec 0c             	sub    esp,0xc
c0011c15:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c18:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c1b:	6a 20                	push   0x20
c0011c1d:	e8 37 62 ff ff       	call   c0007e59 <malloc>
c0011c22:	89 c3                	mov    ebx,eax
c0011c24:	58                   	pop    eax
c0011c25:	5a                   	pop    edx
c0011c26:	68 00 50 00 00       	push   0x5000
c0011c2b:	53                   	push   ebx
c0011c2c:	e8 1f 6c ff ff       	call   c0008850 <Pipe::Pipe(int)>
c0011c31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c34:	e8 11 79 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011c39:	89 07                	mov    DWORD PTR [edi],eax
c0011c3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c3e:	e8 07 79 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	89 06                	mov    DWORD PTR [esi],eax
c0011c48:	31 d2                	xor    edx,edx
c0011c4a:	5b                   	pop    ebx
c0011c4b:	31 c0                	xor    eax,eax
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	c3                   	ret    

c0011c50 <sysGetUnixTime(regs*)>:
c0011c50:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011c55:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c5f:	e9 0a 9f ff ff       	jmp    c000bb6e <Clock::timeInSecondsLocal()>

c0011c64 <string_ends_with(char const*, char const*)>:
c0011c64:	57                   	push   edi
c0011c65:	56                   	push   esi
c0011c66:	53                   	push   ebx
c0011c67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c6b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c6f:	83 ec 0c             	sub    esp,0xc
c0011c72:	53                   	push   ebx
c0011c73:	e8 e8 e8 fe ff       	call   c0000560 <strlen>
c0011c78:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c7b:	89 c6                	mov    esi,eax
c0011c7d:	e8 de e8 fe ff       	call   c0000560 <strlen>
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	39 c6                	cmp    esi,eax
c0011c87:	7d 06                	jge    c0011c8f <string_ends_with(char const*, char const*)+0x2b>
c0011c89:	5b                   	pop    ebx
c0011c8a:	31 c0                	xor    eax,eax
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	c3                   	ret    
c0011c8f:	83 ec 08             	sub    esp,0x8
c0011c92:	29 c6                	sub    esi,eax
c0011c94:	57                   	push   edi
c0011c95:	01 f3                	add    ebx,esi
c0011c97:	53                   	push   ebx
c0011c98:	e8 63 ea fe ff       	call   c0000700 <strcmp>
c0011c9d:	83 c4 10             	add    esp,0x10
c0011ca0:	85 c0                	test   eax,eax
c0011ca2:	5b                   	pop    ebx
c0011ca3:	0f 94 c0             	sete   al
c0011ca6:	5e                   	pop    esi
c0011ca7:	25 ff 00 00 00       	and    eax,0xff
c0011cac:	5f                   	pop    edi
c0011cad:	c3                   	ret    

c0011cae <sysCallOpen(regs*)>:
c0011cae:	56                   	push   esi
c0011caf:	53                   	push   ebx
c0011cb0:	81 ec 04 01 00 00    	sub    esp,0x104
c0011cb6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011cbd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cc0:	85 c9                	test   ecx,ecx
c0011cc2:	0f 84 b9 01 00 00    	je     c0011e81 <sysCallOpen(regs*)+0x1d3>
c0011cc8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ccb:	85 c0                	test   eax,eax
c0011ccd:	0f 84 ae 01 00 00    	je     c0011e81 <sysCallOpen(regs*)+0x1d3>
c0011cd3:	52                   	push   edx
c0011cd4:	68 c5 e8 01 c0       	push   0xc001e8c5
c0011cd9:	50                   	push   eax
c0011cda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cde:	56                   	push   esi
c0011cdf:	e8 d0 92 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ce4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce7:	e8 74 e8 fe ff       	call   c0000560 <strlen>
c0011cec:	83 c4 10             	add    esp,0x10
c0011cef:	48                   	dec    eax
c0011cf0:	74 1d                	je     c0011d0f <sysCallOpen(regs*)+0x61>
c0011cf2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011cf5:	eb 0f                	jmp    c0011d06 <sysCallOpen(regs*)+0x58>
c0011cf7:	80 fa 3a             	cmp    dl,0x3a
c0011cfa:	74 0f                	je     c0011d0b <sysCallOpen(regs*)+0x5d>
c0011cfc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d00:	48                   	dec    eax
c0011d01:	74 0c                	je     c0011d0f <sysCallOpen(regs*)+0x61>
c0011d03:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d06:	80 fa 2e             	cmp    dl,0x2e
c0011d09:	75 ec                	jne    c0011cf7 <sysCallOpen(regs*)+0x49>
c0011d0b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d0f:	83 ec 08             	sub    esp,0x8
c0011d12:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011d17:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d1a:	50                   	push   eax
c0011d1b:	e8 44 ff ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	85 c0                	test   eax,eax
c0011d25:	74 1d                	je     c0011d44 <sysCallOpen(regs*)+0x96>
c0011d27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d37:	81 c4 04 01 00 00    	add    esp,0x104
c0011d3d:	31 c0                	xor    eax,eax
c0011d3f:	31 d2                	xor    edx,edx
c0011d41:	5b                   	pop    ebx
c0011d42:	5e                   	pop    esi
c0011d43:	c3                   	ret    
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	68 ce e8 01 c0       	push   0xc001e8ce
c0011d4c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d4f:	50                   	push   eax
c0011d50:	e8 0f ff ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	85 c0                	test   eax,eax
c0011d5a:	75 cb                	jne    c0011d27 <sysCallOpen(regs*)+0x79>
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	68 ca e8 01 c0       	push   0xc001e8ca
c0011d64:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d67:	50                   	push   eax
c0011d68:	e8 93 e9 fe ff       	call   c0000700 <strcmp>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	85 c0                	test   eax,eax
c0011d72:	74 b3                	je     c0011d27 <sysCallOpen(regs*)+0x79>
c0011d74:	83 ec 08             	sub    esp,0x8
c0011d77:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011d7c:	56                   	push   esi
c0011d7d:	e8 e2 fe ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	85 c0                	test   eax,eax
c0011d87:	75 9e                	jne    c0011d27 <sysCallOpen(regs*)+0x79>
c0011d89:	83 ec 08             	sub    esp,0x8
c0011d8c:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011d91:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d94:	50                   	push   eax
c0011d95:	e8 ca fe ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	85 c0                	test   eax,eax
c0011d9f:	0f 85 ef 00 00 00    	jne    c0011e94 <sysCallOpen(regs*)+0x1e6>
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	68 d8 e8 01 c0       	push   0xc001e8d8
c0011dad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011db0:	50                   	push   eax
c0011db1:	e8 ae fe ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011db6:	83 c4 10             	add    esp,0x10
c0011db9:	85 c0                	test   eax,eax
c0011dbb:	0f 85 d3 00 00 00    	jne    c0011e94 <sysCallOpen(regs*)+0x1e6>
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	68 d4 e8 01 c0       	push   0xc001e8d4
c0011dc9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011dcc:	51                   	push   ecx
c0011dcd:	e8 2e e9 fe ff       	call   c0000700 <strcmp>
c0011dd2:	83 c4 10             	add    esp,0x10
c0011dd5:	85 c0                	test   eax,eax
c0011dd7:	0f 84 b7 00 00 00    	je     c0011e94 <sysCallOpen(regs*)+0x1e6>
c0011ddd:	83 ec 08             	sub    esp,0x8
c0011de0:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011de5:	56                   	push   esi
c0011de6:	e8 79 fe ff ff       	call   c0011c64 <string_ends_with(char const*, char const*)>
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	85 c0                	test   eax,eax
c0011df0:	0f 85 9e 00 00 00    	jne    c0011e94 <sysCallOpen(regs*)+0x1e6>
c0011df6:	83 ec 0c             	sub    esp,0xc
c0011df9:	68 14 01 00 00       	push   0x114
c0011dfe:	e8 56 60 ff ff       	call   c0007e59 <malloc>
c0011e03:	83 c4 0c             	add    esp,0xc
c0011e06:	89 c6                	mov    esi,eax
c0011e08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e10:	50                   	push   eax
c0011e11:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e14:	52                   	push   edx
c0011e15:	56                   	push   esi
c0011e16:	e8 43 93 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011e1b:	83 c4 10             	add    esp,0x10
c0011e1e:	85 f6                	test   esi,esi
c0011e20:	74 5f                	je     c0011e81 <sysCallOpen(regs*)+0x1d3>
c0011e22:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e25:	89 d0                	mov    eax,edx
c0011e27:	25 ff 00 00 00       	and    eax,0xff
c0011e2c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e2f:	89 d0                	mov    eax,edx
c0011e31:	83 e0 01             	and    eax,0x1
c0011e34:	f6 c2 02             	test   dl,0x2
c0011e37:	74 03                	je     c0011e3c <sysCallOpen(regs*)+0x18e>
c0011e39:	83 c8 02             	or     eax,0x2
c0011e3c:	f6 c2 04             	test   dl,0x4
c0011e3f:	74 03                	je     c0011e44 <sysCallOpen(regs*)+0x196>
c0011e41:	83 c8 04             	or     eax,0x4
c0011e44:	f6 c2 08             	test   dl,0x8
c0011e47:	74 03                	je     c0011e4c <sysCallOpen(regs*)+0x19e>
c0011e49:	83 c8 0a             	or     eax,0xa
c0011e4c:	83 e2 10             	and    edx,0x10
c0011e4f:	74 03                	je     c0011e54 <sysCallOpen(regs*)+0x1a6>
c0011e51:	83 c8 12             	or     eax,0x12
c0011e54:	83 ec 08             	sub    esp,0x8
c0011e57:	50                   	push   eax
c0011e58:	56                   	push   esi
c0011e59:	e8 c0 93 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0011e5e:	83 c4 10             	add    esp,0x10
c0011e61:	85 c0                	test   eax,eax
c0011e63:	75 1c                	jne    c0011e81 <sysCallOpen(regs*)+0x1d3>
c0011e65:	83 ec 0c             	sub    esp,0xc
c0011e68:	56                   	push   esi
c0011e69:	e8 dc 76 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011e6e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	89 02                	mov    DWORD PTR [edx],eax
c0011e76:	c1 f8 1f             	sar    eax,0x1f
c0011e79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e7c:	e9 b6 fe ff ff       	jmp    c0011d37 <sysCallOpen(regs*)+0x89>
c0011e81:	81 c4 04 01 00 00    	add    esp,0x104
c0011e87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	c3                   	ret    
c0011e94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e97:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e9d:	e9 8e fe ff ff       	jmp    c0011d30 <sysCallOpen(regs*)+0x82>

c0011ea2 <Sys::loadSyscalls()>:
c0011ea2:	c7 05 40 34 02 c0 7e 12 01 c0 	mov    DWORD PTR ds:0xc0023440,0xc001127e
c0011eac:	c7 05 44 34 02 c0 75 0e 01 c0 	mov    DWORD PTR ds:0xc0023444,0xc0010e75
c0011eb6:	c7 05 48 34 02 c0 64 10 01 c0 	mov    DWORD PTR ds:0xc0023448,0xc0011064
c0011ec0:	c7 05 4c 34 02 c0 b4 11 01 c0 	mov    DWORD PTR ds:0xc002344c,0xc00111b4
c0011eca:	c7 05 50 34 02 c0 fc 0f 01 c0 	mov    DWORD PTR ds:0xc0023450,0xc0010ffc
c0011ed4:	c7 05 54 34 02 c0 ac 0e 01 c0 	mov    DWORD PTR ds:0xc0023454,0xc0010eac
c0011ede:	c7 05 58 34 02 c0 8d 0e 01 c0 	mov    DWORD PTR ds:0xc0023458,0xc0010e8d
c0011ee8:	c7 05 5c 34 02 c0 b9 10 01 c0 	mov    DWORD PTR ds:0xc002345c,0xc00110b9
c0011ef2:	c7 05 64 34 02 c0 48 17 01 c0 	mov    DWORD PTR ds:0xc0023464,0xc0011748
c0011efc:	c7 05 60 34 02 c0 ae 1c 01 c0 	mov    DWORD PTR ds:0xc0023460,0xc0011cae
c0011f06:	c7 05 68 34 02 c0 a8 17 01 c0 	mov    DWORD PTR ds:0xc0023468,0xc00117a8
c0011f10:	c7 05 6c 34 02 c0 7c 14 01 c0 	mov    DWORD PTR ds:0xc002346c,0xc001147c
c0011f1a:	c7 05 70 34 02 c0 a3 12 01 c0 	mov    DWORD PTR ds:0xc0023470,0xc00112a3
c0011f24:	c7 05 74 34 02 c0 a8 12 01 c0 	mov    DWORD PTR ds:0xc0023474,0xc00112a8
c0011f2e:	c7 05 78 34 02 c0 73 18 01 c0 	mov    DWORD PTR ds:0xc0023478,0xc0011873
c0011f38:	c7 05 7c 34 02 c0 1f 18 01 c0 	mov    DWORD PTR ds:0xc002347c,0xc001181f
c0011f42:	c7 05 80 34 02 c0 58 15 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc0011558
c0011f4c:	c7 05 84 34 02 c0 b1 15 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc00115b1
c0011f56:	c7 05 88 34 02 c0 20 16 01 c0 	mov    DWORD PTR ds:0xc0023488,0xc0011620
c0011f60:	c7 05 8c 34 02 c0 ad 12 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc00112ad
c0011f6a:	c7 05 90 34 02 c0 e5 18 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc00118e5
c0011f74:	c7 05 94 34 02 c0 02 19 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc0011902
c0011f7e:	c7 05 98 34 02 c0 02 19 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc0011902
c0011f88:	c7 05 9c 34 02 c0 38 19 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc0011938
c0011f92:	c7 05 a0 34 02 c0 9f 19 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc001199f
c0011f9c:	c7 05 a4 34 02 c0 b7 12 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc00112b7
c0011fa6:	c7 05 a8 34 02 c0 06 1a 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc0011a06
c0011fb0:	c7 05 ac 34 02 c0 39 14 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0011439
c0011fba:	c7 05 b0 34 02 c0 c7 12 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc00112c7
c0011fc4:	c7 05 b4 34 02 c0 fc 14 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc00114fc
c0011fce:	c7 05 b8 34 02 c0 53 1a 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0011a53
c0011fd8:	c7 05 bc 34 02 c0 95 16 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc0011695
c0011fe2:	c7 05 c0 34 02 c0 7c 1a 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0011a7c
c0011fec:	c7 05 c4 34 02 c0 e5 1a 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0011ae5
c0011ff6:	c7 05 cc 34 02 c0 cf 12 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc00112cf
c0012000:	c7 05 d0 34 02 c0 3c 13 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc001133c
c001200a:	c7 05 d4 34 02 c0 86 13 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0011386
c0012014:	c7 05 d8 34 02 c0 94 1b 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0011b94
c001201e:	c7 05 dc 34 02 c0 1d 19 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc001191d
c0012028:	c7 05 e0 34 02 c0 db 13 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc00113db
c0012032:	c7 05 e4 34 02 c0 0b 1c 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0011c0b
c001203c:	c7 05 e8 34 02 c0 50 1c 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0011c50
c0012046:	c7 05 ec 34 02 c0 54 0f 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0010f54
c0012050:	c7 05 f0 34 02 c0 d5 10 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc00110d5
c001205a:	c7 05 f4 34 02 c0 6a 11 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc001116a
c0012064:	c7 05 f8 34 02 c0 3f 0e 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010e3f
c001206e:	c7 05 fc 34 02 c0 1c 12 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc001121c
c0012078:	c7 05 00 35 02 c0 b8 0e 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010eb8
c0012082:	c7 05 04 35 02 c0 d2 0e 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0010ed2
c001208c:	c3                   	ret    

c001208d <Sys::systemCall(regs*, void*)>:
c001208d:	53                   	push   ebx
c001208e:	83 ec 08             	sub    esp,0x8
c0012091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012095:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012098:	83 f8 7f             	cmp    eax,0x7f
c001209b:	77 16                	ja     c00120b3 <Sys::systemCall(regs*, void*)+0x26>
c001209d:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c00120a4:	85 d2                	test   edx,edx
c00120a6:	74 0b                	je     c00120b3 <Sys::systemCall(regs*, void*)+0x26>
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	53                   	push   ebx
c00120ac:	ff d2                	call   edx
c00120ae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120b1:	eb 0d                	jmp    c00120c0 <Sys::systemCall(regs*, void*)+0x33>
c00120b3:	52                   	push   edx
c00120b4:	52                   	push   edx
c00120b5:	50                   	push   eax
c00120b6:	68 dd e8 01 c0       	push   0xc001e8dd
c00120bb:	e8 28 8b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120c8:	31 d2                	xor    edx,edx
c00120ca:	83 c4 08             	add    esp,0x8
c00120cd:	5b                   	pop    ebx
c00120ce:	c3                   	ret    

c00120cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00120cf:	55                   	push   ebp
c00120d0:	57                   	push   edi
c00120d1:	56                   	push   esi
c00120d2:	53                   	push   ebx
c00120d3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00120d9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00120e1:	0f 95 c2             	setne  dl
c00120e4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00120ec:	0f 94 c0             	sete   al
c00120ef:	84 c2                	test   dl,al
c00120f1:	74 34                	je     c0012127 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00120f3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00120fe:	74 27                	je     c0012127 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012100:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012107:	05 00 10 00 00       	add    eax,0x1000
c001210c:	89 c1                	mov    ecx,eax
c001210e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012113:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012119:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012120:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012127:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001212e:	83 ec 0c             	sub    esp,0xc
c0012131:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012137:	6a 01                	push   0x1
c0012139:	e8 57 78 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001213e:	83 c4 10             	add    esp,0x10
c0012141:	89 c3                	mov    ebx,eax
c0012143:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012149:	0f 86 25 01 00 00    	jbe    c0012274 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001214f:	c1 ee 0c             	shr    esi,0xc
c0012152:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012159:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001215d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012165:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001216c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012170:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012177:	29 ef                	sub    edi,ebp
c0012179:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001217d:	0f 83 f8 00 00 00    	jae    c001227b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012183:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012189:	76 05                	jbe    c0012190 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001218b:	bf 00 10 00 00       	mov    edi,0x1000
c0012190:	83 ec 0c             	sub    esp,0xc
c0012193:	31 d2                	xor    edx,edx
c0012195:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001219c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219e:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121a2:	50                   	push   eax
c00121a3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121a7:	56                   	push   esi
c00121a8:	52                   	push   edx
c00121a9:	57                   	push   edi
c00121aa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00121b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121b4:	83 c4 20             	add    esp,0x20
c00121b7:	85 c0                	test   eax,eax
c00121b9:	75 06                	jne    c00121c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00121bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00121bf:	74 13                	je     c00121d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00121c1:	83 ec 0c             	sub    esp,0xc
c00121c4:	53                   	push   ebx
c00121c5:	e8 fb 7a ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	31 c0                	xor    eax,eax
c00121cf:	e9 7c 01 00 00       	jmp    c0012350 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00121d4:	fa                   	cli    
c00121d5:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00121db:	e8 46 60 ff ff       	call   c0008226 <Phys::allocatePage()>
c00121e0:	6a 07                	push   0x7
c00121e2:	89 c7                	mov    edi,eax
c00121e4:	53                   	push   ebx
c00121e5:	50                   	push   eax
c00121e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121f4:	e8 31 7e ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c00121f9:	83 c4 0c             	add    esp,0xc
c00121fc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012203:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012209:	6a 00                	push   0x0
c001220b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012210:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012213:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012219:	e8 7e 7c ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c001221e:	58                   	pop    eax
c001221f:	5a                   	pop    edx
c0012220:	68 07 0c 00 00       	push   0xc07
c0012225:	55                   	push   ebp
c0012226:	57                   	push   edi
c0012227:	89 df                	mov    edi,ebx
c0012229:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012230:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012236:	6a 00                	push   0x0
c0012238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001223d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012240:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012246:	e8 9f 81 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001224b:	b9 00 10 00 00       	mov    ecx,0x1000
c0012250:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012252:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012257:	83 c4 20             	add    esp,0x20
c001225a:	48                   	dec    eax
c001225b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0012260:	85 c0                	test   eax,eax
c0012262:	75 01                	jne    c0012265 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012264:	fb                   	sti    
c0012265:	81 c5 00 10 00 00    	add    ebp,0x1000
c001226b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001226f:	e9 f1 fe ff ff       	jmp    c0012165 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012274:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001227b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012282:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012288:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001228e:	0f 86 ae 00 00 00    	jbe    c0012342 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012294:	fa                   	cli    
c0012295:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001229b:	c1 ee 0c             	shr    esi,0xc
c001229e:	51                   	push   ecx
c001229f:	31 ff                	xor    edi,edi
c00122a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00122a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122ae:	6a 00                	push   0x0
c00122b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122be:	e8 d9 7b ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	e8 5b 5f ff ff       	call   c0008226 <Phys::allocatePage()>
c00122cb:	47                   	inc    edi
c00122cc:	6a 07                	push   0x7
c00122ce:	53                   	push   ebx
c00122cf:	50                   	push   eax
c00122d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122da:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00122dd:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00122e3:	e8 42 7d ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c00122e8:	58                   	pop    eax
c00122e9:	5a                   	pop    edx
c00122ea:	68 07 0c 00 00       	push   0xc07
c00122ef:	55                   	push   ebp
c00122f0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122fa:	50                   	push   eax
c00122fb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012302:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012308:	6a 00                	push   0x0
c001230a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001230f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012312:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012318:	e8 cd 80 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001231d:	83 c4 1c             	add    esp,0x1c
c0012320:	68 00 10 00 00       	push   0x1000
c0012325:	6a 00                	push   0x0
c0012327:	53                   	push   ebx
c0012328:	e8 c3 e1 fe ff       	call   c00004f0 <memset>
c001232d:	83 c4 10             	add    esp,0x10
c0012330:	39 fe                	cmp    esi,edi
c0012332:	77 92                	ja     c00122c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012334:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012339:	48                   	dec    eax
c001233a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001233f:	75 01                	jne    c0012342 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012341:	fb                   	sti    
c0012342:	83 ec 0c             	sub    esp,0xc
c0012345:	53                   	push   ebx
c0012346:	e8 7a 79 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	b0 01                	mov    al,0x1
c0012350:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012356:	5b                   	pop    ebx
c0012357:	5e                   	pop    esi
c0012358:	5f                   	pop    edi
c0012359:	5d                   	pop    ebp
c001235a:	c3                   	ret    

c001235b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001235b:	55                   	push   ebp
c001235c:	57                   	push   edi
c001235d:	56                   	push   esi
c001235e:	53                   	push   ebx
c001235f:	83 ec 48             	sub    esp,0x48
c0012362:	68 14 01 00 00       	push   0x114
c0012367:	e8 ed 5a ff ff       	call   c0007e59 <malloc>
c001236c:	83 c4 0c             	add    esp,0xc
c001236f:	89 c6                	mov    esi,eax
c0012371:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012375:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012379:	50                   	push   eax
c001237a:	e8 df 8d ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001237f:	58                   	pop    eax
c0012380:	5a                   	pop    edx
c0012381:	6a 01                	push   0x1
c0012383:	56                   	push   esi
c0012384:	e8 95 8e ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	85 c0                	test   eax,eax
c001238e:	0f 85 47 01 00 00    	jne    c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012394:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	6a 34                	push   0x34
c00123a1:	e8 b3 5a ff ff       	call   c0007e59 <malloc>
c00123a6:	89 c3                	mov    ebx,eax
c00123a8:	58                   	pop    eax
c00123a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00123ab:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00123af:	57                   	push   edi
c00123b0:	53                   	push   ebx
c00123b1:	6a 00                	push   0x0
c00123b3:	6a 34                	push   0x34
c00123b5:	56                   	push   esi
c00123b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123b9:	83 c4 20             	add    esp,0x20
c00123bc:	85 c0                	test   eax,eax
c00123be:	0f 85 17 01 00 00    	jne    c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123c4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00123ca:	0f 85 0b 01 00 00    	jne    c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123d3:	85 c0                	test   eax,eax
c00123d5:	0f 84 00 01 00 00    	je     c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123db:	31 d2                	xor    edx,edx
c00123dd:	55                   	push   ebp
c00123de:	52                   	push   edx
c00123df:	50                   	push   eax
c00123e0:	56                   	push   esi
c00123e1:	e8 f6 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	85 c0                	test   eax,eax
c00123eb:	0f 85 ea 00 00 00    	jne    c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123f7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00123fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00123ff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012403:	0f af c2             	imul   eax,edx
c0012406:	50                   	push   eax
c0012407:	e8 4d 5a ff ff       	call   c0007e59 <malloc>
c001240c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001240e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012412:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012415:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012419:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001241d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012421:	0f af c2             	imul   eax,edx
c0012424:	99                   	cdq    
c0012425:	52                   	push   edx
c0012426:	50                   	push   eax
c0012427:	56                   	push   esi
c0012428:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001242b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001242e:	83 c4 20             	add    esp,0x20
c0012431:	85 c0                	test   eax,eax
c0012433:	0f 84 a2 00 00 00    	je     c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012439:	31 d2                	xor    edx,edx
c001243b:	51                   	push   ecx
c001243c:	52                   	push   edx
c001243d:	50                   	push   eax
c001243e:	56                   	push   esi
c001243f:	e8 98 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	85 c0                	test   eax,eax
c0012449:	0f 85 8c 00 00 00    	jne    c00124db <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001244f:	83 ec 0c             	sub    esp,0xc
c0012452:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012456:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001245a:	31 ed                	xor    ebp,ebp
c001245c:	0f af c2             	imul   eax,edx
c001245f:	50                   	push   eax
c0012460:	e8 f4 59 ff ff       	call   c0007e59 <malloc>
c0012465:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001246b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001246e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012472:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012476:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001247a:	0f af c2             	imul   eax,edx
c001247d:	99                   	cdq    
c001247e:	52                   	push   edx
c001247f:	50                   	push   eax
c0012480:	56                   	push   esi
c0012481:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012484:	83 c4 20             	add    esp,0x20
c0012487:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001248f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012493:	0f 86 80 00 00 00    	jbe    c0012519 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012499:	0f b7 fd             	movzx  edi,bp
c001249c:	c1 e7 05             	shl    edi,0x5
c001249f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124a3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124a6:	75 6b                	jne    c0012513 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124af:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00124b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124b6:	52                   	push   edx
c00124b7:	31 d2                	xor    edx,edx
c00124b9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124bc:	52                   	push   edx
c00124bd:	50                   	push   eax
c00124be:	56                   	push   esi
c00124bf:	e8 18 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	85 c0                	test   eax,eax
c00124c9:	74 17                	je     c00124e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	68 f1 e8 01 c0       	push   0xc001e8f1
c00124d3:	e8 10 87 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	31 c0                	xor    eax,eax
c00124dd:	e9 87 00 00 00       	jmp    c0012569 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00124e2:	83 ec 0c             	sub    esp,0xc
c00124e5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00124e8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00124eb:	50                   	push   eax
c00124ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124f4:	56                   	push   esi
c00124f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00124f9:	e8 d1 fb ff ff       	call   c00120cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00124fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012502:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012506:	83 c4 20             	add    esp,0x20
c0012509:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001250d:	73 04                	jae    c0012513 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001250f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012513:	45                   	inc    ebp
c0012514:	e9 76 ff ff ff       	jmp    c001248f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012519:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001251d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012525:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001252b:	83 ec 0c             	sub    esp,0xc
c001252e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012534:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012539:	05 00 10 00 00       	add    eax,0x1000
c001253e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012541:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012545:	e8 1f 59 ff ff       	call   c0007e69 <free>
c001254a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001254d:	e8 17 59 ff ff       	call   c0007e69 <free>
c0012552:	58                   	pop    eax
c0012553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012557:	e8 0d 59 ff ff       	call   c0007e69 <free>
c001255c:	89 34 24             	mov    DWORD PTR [esp],esi
c001255f:	e8 18 8d ff ff       	call   c000b27c <File::close()>
c0012564:	83 c4 10             	add    esp,0x10
c0012567:	b0 01                	mov    al,0x1
c0012569:	83 c4 3c             	add    esp,0x3c
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	5f                   	pop    edi
c001256f:	5d                   	pop    ebp
c0012570:	c3                   	ret    

c0012571 <Thr::runtimeReferenceHelper()>:
c0012571:	83 ec 18             	sub    esp,0x18
c0012574:	68 f9 e8 01 c0       	push   0xc001e8f9
c0012579:	e8 6a 86 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001257e:	fa                   	cli    
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	eb fe                	jmp    c0012582 <Thr::runtimeReferenceHelper()+0x11>

c0012584 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012584:	57                   	push   edi
c0012585:	56                   	push   esi
c0012586:	53                   	push   ebx
c0012587:	31 db                	xor    ebx,ebx
c0012589:	39 1d e0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023de0,ebx
c001258f:	7e 3c                	jle    c00125cd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012591:	8b 34 9d 60 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc2a0]
c0012598:	31 ff                	xor    edi,edi
c001259a:	39 3c 9d 60 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc3a0],edi
c00125a1:	7e 27                	jle    c00125ca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125a3:	50                   	push   eax
c00125a4:	50                   	push   eax
c00125a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00125ab:	03 04 9d e0 3c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc320]
c00125b2:	50                   	push   eax
c00125b3:	e8 48 e1 fe ff       	call   c0000700 <strcmp>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	85 c0                	test   eax,eax
c00125bd:	75 05                	jne    c00125c4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00125bf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00125c2:	eb 0b                	jmp    c00125cf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00125c4:	83 c6 10             	add    esi,0x10
c00125c7:	47                   	inc    edi
c00125c8:	eb d0                	jmp    c001259a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00125ca:	43                   	inc    ebx
c00125cb:	eb bc                	jmp    c0012589 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00125cd:	31 c0                	xor    eax,eax
c00125cf:	5b                   	pop    ebx
c00125d0:	5e                   	pop    esi
c00125d1:	5f                   	pop    edi
c00125d2:	c3                   	ret    

c00125d3 <Thr::loadKernelSymbolTable(char const*)>:
c00125d3:	55                   	push   ebp
c00125d4:	57                   	push   edi
c00125d5:	56                   	push   esi
c00125d6:	53                   	push   ebx
c00125d7:	83 ec 68             	sub    esp,0x68
c00125da:	8b 35 30 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e30
c00125e0:	68 14 01 00 00       	push   0x114
c00125e5:	e8 6f 58 ff ff       	call   c0007e59 <malloc>
c00125ea:	83 c4 0c             	add    esp,0xc
c00125ed:	89 c3                	mov    ebx,eax
c00125ef:	56                   	push   esi
c00125f0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00125f4:	50                   	push   eax
c00125f5:	e8 64 8b ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00125fa:	5e                   	pop    esi
c00125fb:	5f                   	pop    edi
c00125fc:	6a 01                	push   0x1
c00125fe:	53                   	push   ebx
c00125ff:	e8 1a 8c ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	85 c0                	test   eax,eax
c0012609:	74 0a                	je     c0012615 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001260b:	83 ec 0c             	sub    esp,0xc
c001260e:	68 1b e9 01 c0       	push   0xc001e91b
c0012613:	eb 34                	jmp    c0012649 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012615:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001261d:	83 ec 0c             	sub    esp,0xc
c0012620:	6a 34                	push   0x34
c0012622:	e8 32 58 ff ff       	call   c0007e59 <malloc>
c0012627:	59                   	pop    ecx
c0012628:	89 c7                	mov    edi,eax
c001262a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001262e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012630:	56                   	push   esi
c0012631:	57                   	push   edi
c0012632:	6a 00                	push   0x0
c0012634:	6a 34                	push   0x34
c0012636:	53                   	push   ebx
c0012637:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001263a:	83 c4 20             	add    esp,0x20
c001263d:	85 c0                	test   eax,eax
c001263f:	74 17                	je     c0012658 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012641:	83 ec 0c             	sub    esp,0xc
c0012644:	68 32 e9 01 c0       	push   0xc001e932
c0012649:	e8 99 e0 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	31 c0                	xor    eax,eax
c0012653:	e9 31 02 00 00       	jmp    c0012889 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012658:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001265e:	75 e1                	jne    c0012641 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012660:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012663:	85 c0                	test   eax,eax
c0012665:	74 da                	je     c0012641 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012667:	52                   	push   edx
c0012668:	31 d2                	xor    edx,edx
c001266a:	52                   	push   edx
c001266b:	50                   	push   eax
c001266c:	53                   	push   ebx
c001266d:	e8 6a 8c ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012672:	83 c4 10             	add    esp,0x10
c0012675:	85 c0                	test   eax,eax
c0012677:	75 c8                	jne    c0012641 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012679:	83 ec 0c             	sub    esp,0xc
c001267c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012680:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012684:	31 ed                	xor    ebp,ebp
c0012686:	0f af c2             	imul   eax,edx
c0012689:	50                   	push   eax
c001268a:	e8 ca 57 ff ff       	call   c0007e59 <malloc>
c001268f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012691:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012695:	89 34 24             	mov    DWORD PTR [esp],esi
c0012698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001269c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126a4:	0f af c2             	imul   eax,edx
c00126a7:	99                   	cdq    
c00126a8:	52                   	push   edx
c00126a9:	50                   	push   eax
c00126aa:	53                   	push   ebx
c00126ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126ae:	83 c4 20             	add    esp,0x20
c00126b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00126c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126d1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00126d5:	0f 86 aa 00 00 00    	jbe    c0012785 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00126db:	0f b7 f5             	movzx  esi,bp
c00126de:	6b f6 28             	imul   esi,esi,0x28
c00126e1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00126e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00126e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ec:	50                   	push   eax
c00126ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00126f1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00126f5:	8b 16                	mov    edx,DWORD PTR [esi]
c00126f7:	6b c0 28             	imul   eax,eax,0x28
c00126fa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00126fe:	89 d0                	mov    eax,edx
c0012700:	31 d2                	xor    edx,edx
c0012702:	52                   	push   edx
c0012703:	50                   	push   eax
c0012704:	53                   	push   ebx
c0012705:	e8 d2 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c001270a:	83 c4 0c             	add    esp,0xc
c001270d:	6a 20                	push   0x20
c001270f:	6a 00                	push   0x0
c0012711:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012715:	52                   	push   edx
c0012716:	e8 d5 dd fe ff       	call   c00004f0 <memset>
c001271b:	58                   	pop    eax
c001271c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001271e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012722:	51                   	push   ecx
c0012723:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012727:	52                   	push   edx
c0012728:	6a 00                	push   0x0
c001272a:	6a 1f                	push   0x1f
c001272c:	53                   	push   ebx
c001272d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012730:	83 c4 18             	add    esp,0x18
c0012733:	68 49 e9 01 c0       	push   0xc001e949
c0012738:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001273c:	52                   	push   edx
c001273d:	e8 be df fe ff       	call   c0000700 <strcmp>
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	85 c0                	test   eax,eax
c0012747:	75 0f                	jne    c0012758 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012749:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001274c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012758:	50                   	push   eax
c0012759:	50                   	push   eax
c001275a:	68 51 e9 01 c0       	push   0xc001e951
c001275f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012763:	50                   	push   eax
c0012764:	e8 97 df fe ff       	call   c0000700 <strcmp>
c0012769:	83 c4 10             	add    esp,0x10
c001276c:	85 c0                	test   eax,eax
c001276e:	75 0f                	jne    c001277f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012770:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012773:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001277f:	45                   	inc    ebp
c0012780:	e9 4c ff ff ff       	jmp    c00126d1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012785:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001278a:	75 10                	jne    c001279c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	68 59 e9 01 c0       	push   0xc001e959
c0012794:	e8 4e df ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0012799:	83 c4 10             	add    esp,0x10
c001279c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127a1:	75 10                	jne    c00127b3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127a3:	83 ec 0c             	sub    esp,0xc
c00127a6:	68 59 e9 01 c0       	push   0xc001e959
c00127ab:	e8 37 df ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	31 d2                	xor    edx,edx
c00127b5:	50                   	push   eax
c00127b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ba:	52                   	push   edx
c00127bb:	50                   	push   eax
c00127bc:	53                   	push   ebx
c00127bd:	e8 1a 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00127c2:	5a                   	pop    edx
c00127c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00127c7:	e8 8d 56 ff ff       	call   c0007e59 <malloc>
c00127cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127d4:	31 c9                	xor    ecx,ecx
c00127d6:	5e                   	pop    esi
c00127d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00127dd:	55                   	push   ebp
c00127de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127e2:	51                   	push   ecx
c00127e3:	52                   	push   edx
c00127e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127e8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00127ec:	53                   	push   ebx
c00127ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127f0:	83 c4 14             	add    esp,0x14
c00127f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127f7:	e8 5d 56 ff ff       	call   c0007e59 <malloc>
c00127fc:	89 c6                	mov    esi,eax
c00127fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012800:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012803:	56                   	push   esi
c0012804:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012808:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001280c:	51                   	push   ecx
c001280d:	52                   	push   edx
c001280e:	53                   	push   ebx
c001280f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012812:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012816:	8b 15 e0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de0
c001281c:	83 c4 1c             	add    esp,0x1c
c001281f:	c1 e8 04             	shr    eax,0x4
c0012822:	89 04 95 60 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3a0],eax
c0012829:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001282d:	31 d2                	xor    edx,edx
c001282f:	52                   	push   edx
c0012830:	50                   	push   eax
c0012831:	53                   	push   ebx
c0012832:	e8 a5 8a ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012837:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012839:	31 d2                	xor    edx,edx
c001283b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001283e:	56                   	push   esi
c001283f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012843:	52                   	push   edx
c0012844:	50                   	push   eax
c0012845:	53                   	push   ebx
c0012846:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012849:	83 c4 14             	add    esp,0x14
c001284c:	53                   	push   ebx
c001284d:	e8 2a 8a ff ff       	call   c000b27c <File::close()>
c0012852:	5d                   	pop    ebp
c0012853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012857:	e8 0d 56 ff ff       	call   c0007e69 <free>
c001285c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001285f:	e8 05 56 ff ff       	call   c0007e69 <free>
c0012864:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0012869:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001286d:	8d 50 01             	lea    edx,[eax+0x1]
c0012870:	89 0c 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],ecx
c0012877:	89 34 85 e0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc320],esi
c001287e:	89 15 e0 3d 02 c0    	mov    DWORD PTR ds:0xc0023de0,edx
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	b0 01                	mov    al,0x1
c0012889:	83 c4 5c             	add    esp,0x5c
c001288c:	5b                   	pop    ebx
c001288d:	5e                   	pop    esi
c001288e:	5f                   	pop    edi
c001288f:	5d                   	pop    ebp
c0012890:	c3                   	ret    

c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012891:	55                   	push   ebp
c0012892:	57                   	push   edi
c0012893:	56                   	push   esi
c0012894:	53                   	push   ebx
c0012895:	81 ec 68 03 00 00    	sub    esp,0x368
c001289b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128a2:	8b 1d 30 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e30
c00128a8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00128ac:	68 14 01 00 00       	push   0x114
c00128b1:	e8 a3 55 ff ff       	call   c0007e59 <malloc>
c00128b6:	83 c4 0c             	add    esp,0xc
c00128b9:	89 c5                	mov    ebp,eax
c00128bb:	53                   	push   ebx
c00128bc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00128c3:	50                   	push   eax
c00128c4:	e8 95 88 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00128c9:	5e                   	pop    esi
c00128ca:	5f                   	pop    edi
c00128cb:	6a 01                	push   0x1
c00128cd:	55                   	push   ebp
c00128ce:	e8 4b 89 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00128d3:	83 c4 10             	add    esp,0x10
c00128d6:	85 c0                	test   eax,eax
c00128d8:	0f 85 a7 06 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128de:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00128e6:	83 ec 0c             	sub    esp,0xc
c00128e9:	6a 34                	push   0x34
c00128eb:	e8 69 55 ff ff       	call   c0007e59 <malloc>
c00128f0:	5b                   	pop    ebx
c00128f1:	89 c7                	mov    edi,eax
c00128f3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00128f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128fa:	53                   	push   ebx
c00128fb:	57                   	push   edi
c00128fc:	6a 00                	push   0x0
c00128fe:	6a 34                	push   0x34
c0012900:	55                   	push   ebp
c0012901:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012904:	83 c4 20             	add    esp,0x20
c0012907:	85 c0                	test   eax,eax
c0012909:	0f 85 76 06 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001290f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012915:	0f 85 6a 06 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001291b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001291e:	85 c0                	test   eax,eax
c0012920:	0f 84 5f 06 00 00    	je     c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012926:	31 d2                	xor    edx,edx
c0012928:	51                   	push   ecx
c0012929:	52                   	push   edx
c001292a:	50                   	push   eax
c001292b:	55                   	push   ebp
c001292c:	e8 ab 89 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	85 c0                	test   eax,eax
c0012936:	0f 85 49 06 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012942:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012946:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001294a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001294e:	0f af c2             	imul   eax,edx
c0012951:	50                   	push   eax
c0012952:	e8 02 55 ff ff       	call   c0007e59 <malloc>
c0012957:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001295a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001295e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012965:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012969:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001296d:	0f af c2             	imul   eax,edx
c0012970:	99                   	cdq    
c0012971:	52                   	push   edx
c0012972:	50                   	push   eax
c0012973:	55                   	push   ebp
c0012974:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012977:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001297a:	83 c4 20             	add    esp,0x20
c001297d:	85 c0                	test   eax,eax
c001297f:	0f 84 00 06 00 00    	je     c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012985:	52                   	push   edx
c0012986:	31 d2                	xor    edx,edx
c0012988:	52                   	push   edx
c0012989:	50                   	push   eax
c001298a:	55                   	push   ebp
c001298b:	e8 4c 89 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	85 c0                	test   eax,eax
c0012995:	0f 85 ea 05 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001299b:	83 ec 0c             	sub    esp,0xc
c001299e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129a2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129a6:	31 f6                	xor    esi,esi
c00129a8:	0f af c2             	imul   eax,edx
c00129ab:	50                   	push   eax
c00129ac:	e8 a8 54 ff ff       	call   c0007e59 <malloc>
c00129b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129c7:	0f af c2             	imul   eax,edx
c00129ca:	99                   	cdq    
c00129cb:	52                   	push   edx
c00129cc:	50                   	push   eax
c00129cd:	55                   	push   ebp
c00129ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129d1:	83 c4 20             	add    esp,0x20
c00129d4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00129d8:	0f 86 8a 00 00 00    	jbe    c0012a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00129de:	0f b7 de             	movzx  ebx,si
c00129e1:	c1 e3 05             	shl    ebx,0x5
c00129e4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00129e8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00129eb:	75 75                	jne    c0012a62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00129ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129f0:	31 d2                	xor    edx,edx
c00129f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00129f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129fd:	50                   	push   eax
c00129fe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a01:	52                   	push   edx
c0012a02:	50                   	push   eax
c0012a03:	55                   	push   ebp
c0012a04:	e8 d3 88 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012a09:	83 c4 10             	add    esp,0x10
c0012a0c:	85 c0                	test   eax,eax
c0012a0e:	0f 85 71 05 00 00    	jne    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a14:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a1b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a1e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a22:	31 d2                	xor    edx,edx
c0012a24:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a28:	83 ec 0c             	sub    esp,0xc
c0012a2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a2f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a3f:	52                   	push   edx
c0012a40:	50                   	push   eax
c0012a41:	55                   	push   ebp
c0012a42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a45:	83 c4 1c             	add    esp,0x1c
c0012a48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a4b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012a4e:	50                   	push   eax
c0012a4f:	6a 00                	push   0x0
c0012a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a55:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012a59:	50                   	push   eax
c0012a5a:	e8 91 da fe ff       	call   c00004f0 <memset>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	46                   	inc    esi
c0012a63:	e9 6c ff ff ff       	jmp    c00129d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012a68:	53                   	push   ebx
c0012a69:	31 db                	xor    ebx,ebx
c0012a6b:	68 00 01 00 00       	push   0x100
c0012a70:	6a 00                	push   0x0
c0012a72:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012a76:	50                   	push   eax
c0012a77:	e8 74 da fe ff       	call   c00004f0 <memset>
c0012a7c:	83 c4 0c             	add    esp,0xc
c0012a7f:	68 00 01 00 00       	push   0x100
c0012a84:	6a 00                	push   0x0
c0012a86:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012a8d:	50                   	push   eax
c0012a8e:	e8 5d da fe ff       	call   c00004f0 <memset>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012a9e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012aa6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012aae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ab6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012abe:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012ac2:	0f 86 30 01 00 00    	jbe    c0012bf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012ac8:	0f b7 f3             	movzx  esi,bx
c0012acb:	6b f6 28             	imul   esi,esi,0x28
c0012ace:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012ad2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012ad5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ad9:	52                   	push   edx
c0012ada:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ade:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012ae2:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ae4:	6b d2 28             	imul   edx,edx,0x28
c0012ae7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012aeb:	31 d2                	xor    edx,edx
c0012aed:	52                   	push   edx
c0012aee:	50                   	push   eax
c0012aef:	55                   	push   ebp
c0012af0:	e8 e7 87 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012af5:	83 c4 0c             	add    esp,0xc
c0012af8:	6a 20                	push   0x20
c0012afa:	6a 00                	push   0x0
c0012afc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b03:	51                   	push   ecx
c0012b04:	e8 e7 d9 fe ff       	call   c00004f0 <memset>
c0012b09:	59                   	pop    ecx
c0012b0a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b0d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b11:	52                   	push   edx
c0012b12:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b19:	51                   	push   ecx
c0012b1a:	6a 00                	push   0x0
c0012b1c:	6a 1f                	push   0x1f
c0012b1e:	55                   	push   ebp
c0012b1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b22:	83 c4 1c             	add    esp,0x1c
c0012b25:	6a 09                	push   0x9
c0012b27:	68 73 e9 01 c0       	push   0xc001e973
c0012b2c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b33:	51                   	push   ecx
c0012b34:	e8 77 d8 fe ff       	call   c00003b0 <memcmp>
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	85 c0                	test   eax,eax
c0012b3e:	75 21                	jne    c0012b61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b48:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b50:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b53:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b5a:	89 d0                	mov    eax,edx
c0012b5c:	40                   	inc    eax
c0012b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b61:	50                   	push   eax
c0012b62:	6a 09                	push   0x9
c0012b64:	68 7d e9 01 c0       	push   0xc001e97d
c0012b69:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b70:	50                   	push   eax
c0012b71:	e8 3a d8 fe ff       	call   c00003b0 <memcmp>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	85 c0                	test   eax,eax
c0012b7b:	75 21                	jne    c0012b9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b85:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b8d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b90:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b97:	89 d0                	mov    eax,edx
c0012b99:	40                   	inc    eax
c0012b9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b9e:	50                   	push   eax
c0012b9f:	50                   	push   eax
c0012ba0:	68 49 e9 01 c0       	push   0xc001e949
c0012ba5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bac:	50                   	push   eax
c0012bad:	e8 4e db fe ff       	call   c0000700 <strcmp>
c0012bb2:	83 c4 10             	add    esp,0x10
c0012bb5:	85 c0                	test   eax,eax
c0012bb7:	75 0f                	jne    c0012bc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012bb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bc8:	50                   	push   eax
c0012bc9:	50                   	push   eax
c0012bca:	68 51 e9 01 c0       	push   0xc001e951
c0012bcf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bd6:	50                   	push   eax
c0012bd7:	e8 24 db fe ff       	call   c0000700 <strcmp>
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	85 c0                	test   eax,eax
c0012be1:	75 0f                	jne    c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012be3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012be6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012bea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012bf2:	43                   	inc    ebx
c0012bf3:	e9 c6 fe ff ff       	jmp    c0012abe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012bf8:	31 d2                	xor    edx,edx
c0012bfa:	50                   	push   eax
c0012bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bff:	52                   	push   edx
c0012c00:	50                   	push   eax
c0012c01:	55                   	push   ebp
c0012c02:	e8 d5 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012c07:	58                   	pop    eax
c0012c08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c0c:	e8 48 52 ff ff       	call   c0007e59 <malloc>
c0012c11:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c14:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c18:	31 d2                	xor    edx,edx
c0012c1a:	58                   	pop    eax
c0012c1b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c1f:	53                   	push   ebx
c0012c20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c28:	52                   	push   edx
c0012c29:	50                   	push   eax
c0012c2a:	55                   	push   ebp
c0012c2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c2e:	83 c4 14             	add    esp,0x14
c0012c31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c35:	e8 1f 52 ff ff       	call   c0007e59 <malloc>
c0012c3a:	31 d2                	xor    edx,edx
c0012c3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c40:	83 c4 0c             	add    esp,0xc
c0012c43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c47:	52                   	push   edx
c0012c48:	50                   	push   eax
c0012c49:	55                   	push   ebp
c0012c4a:	e8 8d 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012c4f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c52:	31 d2                	xor    edx,edx
c0012c54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c5f:	52                   	push   edx
c0012c60:	50                   	push   eax
c0012c61:	55                   	push   ebp
c0012c62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c65:	83 c4 20             	add    esp,0x20
c0012c68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012c78:	0f 84 0b 03 00 00    	je     c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012c7e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012c85:	31 d2                	xor    edx,edx
c0012c87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c8b:	c1 e8 03             	shr    eax,0x3
c0012c8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012c92:	51                   	push   ecx
c0012c93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c97:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012c9b:	52                   	push   edx
c0012c9c:	50                   	push   eax
c0012c9d:	55                   	push   ebp
c0012c9e:	e8 39 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012ca3:	5b                   	pop    ebx
c0012ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ca8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012caf:	e8 a5 51 ff ff       	call   c0007e59 <malloc>
c0012cb4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012cb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cbb:	31 d2                	xor    edx,edx
c0012cbd:	5e                   	pop    esi
c0012cbe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012cc2:	50                   	push   eax
c0012cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ccb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012cd2:	52                   	push   edx
c0012cd3:	50                   	push   eax
c0012cd4:	55                   	push   ebp
c0012cd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cd8:	83 c4 20             	add    esp,0x20
c0012cdb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ce3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ce7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012ceb:	0f 8d 7c 02 00 00    	jge    c0012f6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012cf1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cf9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012cfe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d01:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d09:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d0d:	89 d8                	mov    eax,ebx
c0012d0f:	c1 e8 08             	shr    eax,0x8
c0012d12:	89 c6                	mov    esi,eax
c0012d14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d18:	c1 e6 04             	shl    esi,0x4
c0012d1b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d1f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d22:	85 d2                	test   edx,edx
c0012d24:	0f 85 bf 00 00 00    	jne    c0012de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d2a:	83 ec 0c             	sub    esp,0xc
c0012d2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d31:	03 06                	add    eax,DWORD PTR [esi]
c0012d33:	50                   	push   eax
c0012d34:	e8 4b f8 ff ff       	call   c0012584 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d39:	83 c4 10             	add    esp,0x10
c0012d3c:	89 c2                	mov    edx,eax
c0012d3e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d43:	85 c0                	test   eax,eax
c0012d45:	0f 85 9e 00 00 00    	jne    c0012de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d4b:	83 ec 0c             	sub    esp,0xc
c0012d4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d52:	03 06                	add    eax,DWORD PTR [esi]
c0012d54:	50                   	push   eax
c0012d55:	e8 e6 41 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012d5a:	83 c4 10             	add    esp,0x10
c0012d5d:	89 c2                	mov    edx,eax
c0012d5f:	85 c0                	test   eax,eax
c0012d61:	0f 85 82 00 00 00    	jne    c0012de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d67:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d6b:	50                   	push   eax
c0012d6c:	50                   	push   eax
c0012d6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d71:	03 06                	add    eax,DWORD PTR [esi]
c0012d73:	50                   	push   eax
c0012d74:	68 87 e9 01 c0       	push   0xc001e987
c0012d79:	e8 6a 7e ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012d7e:	58                   	pop    eax
c0012d7f:	5a                   	pop    edx
c0012d80:	68 a1 e9 01 c0       	push   0xc001e9a1
c0012d85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012d8c:	50                   	push   eax
c0012d8d:	e8 8e d8 fe ff       	call   c0000620 <strcpy>
c0012d92:	59                   	pop    ecx
c0012d93:	58                   	pop    eax
c0012d94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d98:	03 06                	add    eax,DWORD PTR [esi]
c0012d9a:	50                   	push   eax
c0012d9b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012da2:	50                   	push   eax
c0012da3:	e8 38 da fe ff       	call   c00007e0 <strcat>
c0012da8:	58                   	pop    eax
c0012da9:	5a                   	pop    edx
c0012daa:	68 37 ea 01 c0       	push   0xc001ea37
c0012daf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012db6:	50                   	push   eax
c0012db7:	e8 24 da fe ff       	call   c00007e0 <strcat>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012dc4:	0f 84 5d 01 00 00    	je     c0012f27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012dca:	83 ec 0c             	sub    esp,0xc
c0012dcd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dd4:	50                   	push   eax
c0012dd5:	e8 0d d9 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012de1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012de5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012de9:	80 fb 01             	cmp    bl,0x1
c0012dec:	0f 85 88 00 00 00    	jne    c0012e7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012df2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012df9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012dfd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e01:	01 ce                	add    esi,ecx
c0012e03:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e09:	0f 94 c0             	sete   al
c0012e0c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e12:	0f 94 c3             	sete   bl
c0012e15:	09 c3                	or     ebx,eax
c0012e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e19:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e1e:	74 41                	je     c0012e61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e20:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e23:	84 db                	test   bl,bl
c0012e25:	75 15                	jne    c0012e3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e27:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e2b:	66 83 f8 0c          	cmp    ax,0xc
c0012e2f:	76 05                	jbe    c0012e36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e31:	b8 0c 00 00 00       	mov    eax,0xc
c0012e36:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e3a:	76 37                	jbe    c0012e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e3c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e40:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e45:	0f 84 dc 00 00 00    	je     c0012f27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e4b:	83 ec 0c             	sub    esp,0xc
c0012e4e:	68 b8 e9 01 c0       	push   0xc001e9b8
c0012e53:	e8 8f d8 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012e5f:	eb 12                	jmp    c0012e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e61:	01 c1                	add    ecx,eax
c0012e63:	84 db                	test   bl,bl
c0012e65:	75 0c                	jne    c0012e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e67:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e6b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e6f:	77 02                	ja     c0012e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e71:	01 d1                	add    ecx,edx
c0012e73:	89 0e                	mov    DWORD PTR [esi],ecx
c0012e75:	e9 ea 00 00 00       	jmp    c0012f64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e7a:	80 fb 02             	cmp    bl,0x2
c0012e7d:	75 7c                	jne    c0012efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012e7f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012e86:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012e8a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012e8e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e94:	74 20                	je     c0012eb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012e96:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e9c:	74 18                	je     c0012eb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012e9e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ea2:	b9 0a 00 00 00       	mov    ecx,0xa
c0012ea7:	66 83 f8 0e          	cmp    ax,0xe
c0012eab:	77 03                	ja     c0012eb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012ead:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012eb0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012eb4:	76 1f                	jbe    c0012ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012eb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012eba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ebf:	74 66                	je     c0012f27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ec1:	83 ec 0c             	sub    esp,0xc
c0012ec4:	68 d4 e9 01 c0       	push   0xc001e9d4
c0012ec9:	e8 19 d8 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ed5:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ed7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012edc:	74 13                	je     c0012ef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012ede:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ee2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012ee9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012eed:	01 c8                	add    eax,ecx
c0012eef:	eb 04                	jmp    c0012ef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012ef1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012ef5:	01 c2                	add    edx,eax
c0012ef7:	89 16                	mov    DWORD PTR [esi],edx
c0012ef9:	eb 69                	jmp    c0012f64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012efb:	0f b6 db             	movzx  ebx,bl
c0012efe:	50                   	push   eax
c0012eff:	50                   	push   eax
c0012f00:	53                   	push   ebx
c0012f01:	68 f0 e9 01 c0       	push   0xc001e9f0
c0012f06:	e8 dd 7c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012f0b:	83 c4 10             	add    esp,0x10
c0012f0e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f13:	74 12                	je     c0012f27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f15:	83 ec 0c             	sub    esp,0xc
c0012f18:	68 fb e9 01 c0       	push   0xc001e9fb
c0012f1d:	e8 c5 d7 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	eb 3d                	jmp    c0012f64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f27:	83 ec 0c             	sub    esp,0xc
c0012f2a:	55                   	push   ebp
c0012f2b:	e8 4c 83 ff ff       	call   c000b27c <File::close()>
c0012f30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f33:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f39:	59                   	pop    ecx
c0012f3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f3e:	e8 26 4f ff ff       	call   c0007e69 <free>
c0012f43:	5b                   	pop    ebx
c0012f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f48:	e8 1c 4f ff ff       	call   c0007e69 <free>
c0012f4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f50:	e8 14 4f ff ff       	call   c0007e69 <free>
c0012f55:	5e                   	pop    esi
c0012f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5a:	e8 0a 4f ff ff       	call   c0007e69 <free>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	eb 21                	jmp    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012f64:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012f68:	e9 76 fd ff ff       	jmp    c0012ce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012f6d:	83 ec 0c             	sub    esp,0xc
c0012f70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f74:	e8 f0 4e ff ff       	call   c0007e69 <free>
c0012f79:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012f7d:	83 c4 10             	add    esp,0x10
c0012f80:	e9 eb fc ff ff       	jmp    c0012c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012f85:	31 c0                	xor    eax,eax
c0012f87:	eb 33                	jmp    c0012fbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012f89:	83 ec 0c             	sub    esp,0xc
c0012f8c:	55                   	push   ebp
c0012f8d:	e8 ea 82 ff ff       	call   c000b27c <File::close()>
c0012f92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f95:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9b:	58                   	pop    eax
c0012f9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fa0:	e8 c4 4e ff ff       	call   c0007e69 <free>
c0012fa5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fa8:	e8 bc 4e ff ff       	call   c0007e69 <free>
c0012fad:	5a                   	pop    edx
c0012fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb2:	e8 b2 4e ff ff       	call   c0007e69 <free>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	b0 01                	mov    al,0x1
c0012fbc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012fc2:	5b                   	pop    ebx
c0012fc3:	5e                   	pop    esi
c0012fc4:	5f                   	pop    edi
c0012fc5:	5d                   	pop    ebp
c0012fc6:	c3                   	ret    

c0012fc7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012fc7:	56                   	push   esi
c0012fc8:	31 d2                	xor    edx,edx
c0012fca:	53                   	push   ebx
c0012fcb:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c0012fd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fd5:	39 d3                	cmp    ebx,edx
c0012fd7:	7e 1b                	jle    c0012ff4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012fd9:	8b 04 95 60 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc7a0]
c0012fe0:	39 c8                	cmp    eax,ecx
c0012fe2:	77 0d                	ja     c0012ff1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012fe4:	8b 34 95 60 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc9a0]
c0012feb:	01 c6                	add    esi,eax
c0012fed:	39 ce                	cmp    esi,ecx
c0012fef:	77 05                	ja     c0012ff6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012ff1:	42                   	inc    edx
c0012ff2:	eb e1                	jmp    c0012fd5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012ff4:	31 c0                	xor    eax,eax
c0012ff6:	5b                   	pop    ebx
c0012ff7:	5e                   	pop    esi
c0012ff8:	c3                   	ret    

c0012ff9 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012ff9:	53                   	push   ebx
c0012ffa:	31 c0                	xor    eax,eax
c0012ffc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013000:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c0013006:	39 c3                	cmp    ebx,eax
c0013008:	7e 22                	jle    c001302c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001300a:	8b 14 85 60 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc7a0]
c0013011:	39 ca                	cmp    edx,ecx
c0013013:	77 14                	ja     c0013029 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013015:	03 14 85 60 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc9a0]
c001301c:	39 ca                	cmp    edx,ecx
c001301e:	76 09                	jbe    c0013029 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013020:	8b 04 85 60 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5a0]
c0013027:	eb 05                	jmp    c001302e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013029:	40                   	inc    eax
c001302a:	eb da                	jmp    c0013006 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001302c:	31 c0                	xor    eax,eax
c001302e:	5b                   	pop    ebx
c001302f:	c3                   	ret    

c0013030 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013030:	53                   	push   ebx
c0013031:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013035:	53                   	push   ebx
c0013036:	e8 8c ff ff ff       	call   c0012fc7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001303b:	5a                   	pop    edx
c001303c:	31 d2                	xor    edx,edx
c001303e:	85 c0                	test   eax,eax
c0013040:	74 04                	je     c0013046 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013042:	89 da                	mov    edx,ebx
c0013044:	29 c2                	sub    edx,eax
c0013046:	89 d0                	mov    eax,edx
c0013048:	5b                   	pop    ebx
c0013049:	c3                   	ret    

c001304a <Thr::loadDLL(char const*, bool)>:
c001304a:	55                   	push   ebp
c001304b:	57                   	push   edi
c001304c:	56                   	push   esi
c001304d:	53                   	push   ebx
c001304e:	81 ec 34 01 00 00    	sub    esp,0x134
c0013054:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001305b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013062:	56                   	push   esi
c0013063:	68 13 ea 01 c0       	push   0xc001ea13
c0013068:	e8 7b 7b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001306d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013074:	e8 e0 4d ff ff       	call   c0007e59 <malloc>
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	89 c3                	mov    ebx,eax
c001307e:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0013084:	56                   	push   esi
c0013085:	50                   	push   eax
c0013086:	e8 d3 80 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	85 db                	test   ebx,ebx
c0013090:	75 3c                	jne    c00130ce <Thr::loadDLL(char const*, bool)+0x84>
c0013092:	89 f8                	mov    eax,edi
c0013094:	84 c0                	test   al,al
c0013096:	0f 84 d2 01 00 00    	je     c001326e <Thr::loadDLL(char const*, bool)+0x224>
c001309c:	55                   	push   ebp
c001309d:	55                   	push   ebp
c001309e:	68 24 ea 01 c0       	push   0xc001ea24
c00130a3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130a7:	55                   	push   ebp
c00130a8:	e8 73 d5 fe ff       	call   c0000620 <strcpy>
c00130ad:	58                   	pop    eax
c00130ae:	5a                   	pop    edx
c00130af:	56                   	push   esi
c00130b0:	55                   	push   ebp
c00130b1:	e8 2a d7 fe ff       	call   c00007e0 <strcat>
c00130b6:	59                   	pop    ecx
c00130b7:	58                   	pop    eax
c00130b8:	68 37 ea 01 c0       	push   0xc001ea37
c00130bd:	55                   	push   ebp
c00130be:	e8 1d d7 fe ff       	call   c00007e0 <strcat>
c00130c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00130c6:	e8 1c d6 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	51                   	push   ecx
c00130cf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00130d3:	50                   	push   eax
c00130d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130d8:	50                   	push   eax
c00130d9:	53                   	push   ebx
c00130da:	e8 eb 83 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c00130df:	83 c4 10             	add    esp,0x10
c00130e2:	85 db                	test   ebx,ebx
c00130e4:	74 0c                	je     c00130f2 <Thr::loadDLL(char const*, bool)+0xa8>
c00130e6:	83 ec 0c             	sub    esp,0xc
c00130e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130eb:	53                   	push   ebx
c00130ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00130f7:	75 0a                	jne    c0013103 <Thr::loadDLL(char const*, bool)+0xb9>
c00130f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130fd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013101:	75 3c                	jne    c001313f <Thr::loadDLL(char const*, bool)+0xf5>
c0013103:	89 f8                	mov    eax,edi
c0013105:	84 c0                	test   al,al
c0013107:	0f 84 49 01 00 00    	je     c0013256 <Thr::loadDLL(char const*, bool)+0x20c>
c001310d:	51                   	push   ecx
c001310e:	51                   	push   ecx
c001310f:	68 24 ea 01 c0       	push   0xc001ea24
c0013114:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013118:	53                   	push   ebx
c0013119:	e8 02 d5 fe ff       	call   c0000620 <strcpy>
c001311e:	5d                   	pop    ebp
c001311f:	58                   	pop    eax
c0013120:	56                   	push   esi
c0013121:	53                   	push   ebx
c0013122:	e8 b9 d6 fe ff       	call   c00007e0 <strcat>
c0013127:	58                   	pop    eax
c0013128:	5a                   	pop    edx
c0013129:	68 37 ea 01 c0       	push   0xc001ea37
c001312e:	53                   	push   ebx
c001312f:	e8 ac d6 fe ff       	call   c00007e0 <strcat>
c0013134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013137:	e8 ab d5 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	52                   	push   edx
c0013140:	6a 03                	push   0x3
c0013142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013146:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001314a:	05 ff 0f 00 00       	add    eax,0xfff
c001314f:	83 d2 00             	adc    edx,0x0
c0013152:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013156:	50                   	push   eax
c0013157:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001315d:	e8 cc 6f ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c0013162:	59                   	pop    ecx
c0013163:	89 c3                	mov    ebx,eax
c0013165:	5d                   	pop    ebp
c0013166:	50                   	push   eax
c0013167:	68 1e d8 01 c0       	push   0xc001d81e
c001316c:	e8 77 7a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013171:	89 34 24             	mov    DWORD PTR [esp],esi
c0013174:	e8 e7 d3 fe ff       	call   c0000560 <strlen>
c0013179:	8b 2d 40 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023640
c001317f:	40                   	inc    eax
c0013180:	89 04 24             	mov    DWORD PTR [esp],eax
c0013183:	e8 d1 4c ff ff       	call   c0007e59 <malloc>
c0013188:	89 04 ad 60 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc5a0],eax
c001318f:	58                   	pop    eax
c0013190:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c0013195:	5a                   	pop    edx
c0013196:	56                   	push   esi
c0013197:	ff 34 85 60 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5a0]
c001319e:	e8 7d d4 fe ff       	call   c0000620 <strcpy>
c00131a3:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c00131a8:	8d 50 01             	lea    edx,[eax+0x1]
c00131ab:	89 1c 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],ebx
c00131b2:	89 15 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,edx
c00131b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131bc:	83 c4 0c             	add    esp,0xc
c00131bf:	89 14 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],edx
c00131c6:	6a 01                	push   0x1
c00131c8:	53                   	push   ebx
c00131c9:	56                   	push   esi
c00131ca:	e8 c2 f6 ff ff       	call   c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00131cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00131d3:	83 c4 10             	add    esp,0x10
c00131d6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131db:	0f 85 89 00 00 00    	jne    c001326a <Thr::loadDLL(char const*, bool)+0x220>
c00131e1:	89 f8                	mov    eax,edi
c00131e3:	84 c0                	test   al,al
c00131e5:	74 73                	je     c001325a <Thr::loadDLL(char const*, bool)+0x210>
c00131e7:	83 ec 0c             	sub    esp,0xc
c00131ea:	68 39 ea 01 c0       	push   0xc001ea39
c00131ef:	e8 f3 d4 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00131f4:	83 c4 10             	add    esp,0x10
c00131f7:	eb 61                	jmp    c001325a <Thr::loadDLL(char const*, bool)+0x210>
c00131f9:	50                   	push   eax
c00131fa:	50                   	push   eax
c00131fb:	89 e8                	mov    eax,ebp
c00131fd:	c1 e0 0c             	shl    eax,0xc
c0013200:	01 d8                	add    eax,ebx
c0013202:	50                   	push   eax
c0013203:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0013209:	e8 98 6a ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	8b 00                	mov    eax,DWORD PTR [eax]
c0013213:	a8 60                	test   al,0x60
c0013215:	75 11                	jne    c0013228 <Thr::loadDLL(char const*, bool)+0x1de>
c0013217:	83 ec 0c             	sub    esp,0xc
c001321a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001321f:	50                   	push   eax
c0013220:	e8 9f 4f ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	45                   	inc    ebp
c0013229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001322d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013231:	05 ff 0f 00 00       	add    eax,0xfff
c0013236:	bf 00 00 00 00       	mov    edi,0x0
c001323b:	83 d2 00             	adc    edx,0x0
c001323e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013242:	c1 ea 0c             	shr    edx,0xc
c0013245:	39 c5                	cmp    ebp,eax
c0013247:	89 d1                	mov    ecx,edx
c0013249:	89 f8                	mov    eax,edi
c001324b:	19 c8                	sbb    eax,ecx
c001324d:	72 aa                	jb     c00131f9 <Thr::loadDLL(char const*, bool)+0x1af>
c001324f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013254:	75 18                	jne    c001326e <Thr::loadDLL(char const*, bool)+0x224>
c0013256:	31 db                	xor    ebx,ebx
c0013258:	eb 14                	jmp    c001326e <Thr::loadDLL(char const*, bool)+0x224>
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	68 58 ea 01 c0       	push   0xc001ea58
c0013262:	e8 80 d4 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	31 ed                	xor    ebp,ebp
c001326c:	eb bb                	jmp    c0013229 <Thr::loadDLL(char const*, bool)+0x1df>
c001326e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013274:	89 d8                	mov    eax,ebx
c0013276:	5b                   	pop    ebx
c0013277:	5e                   	pop    esi
c0013278:	5f                   	pop    edi
c0013279:	5d                   	pop    ebp
c001327a:	c3                   	ret    

c001327b <Thr::executeDLL(unsigned long, void*)>:
c001327b:	56                   	push   esi
c001327c:	53                   	push   ebx
c001327d:	52                   	push   edx
c001327e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013282:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013286:	85 db                	test   ebx,ebx
c0013288:	75 10                	jne    c001329a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001328a:	83 ec 0c             	sub    esp,0xc
c001328d:	68 74 ea 01 c0       	push   0xc001ea74
c0013292:	e8 50 d4 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0013297:	83 c4 10             	add    esp,0x10
c001329a:	50                   	push   eax
c001329b:	50                   	push   eax
c001329c:	53                   	push   ebx
c001329d:	68 9e ea 01 c0       	push   0xc001ea9e
c00132a2:	e8 41 79 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00132a7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132ab:	89 d8                	mov    eax,ebx
c00132ad:	83 c4 14             	add    esp,0x14
c00132b0:	5b                   	pop    ebx
c00132b1:	5e                   	pop    esi
c00132b2:	ff e0                	jmp    eax

c00132b4 <userModeEntryPoint(void*)>:
c00132b4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00132b9:	48                   	dec    eax
c00132ba:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00132bf:	75 03                	jne    c00132c4 <userModeEntryPoint(void*)+0x10>
c00132c1:	fb                   	sti    
c00132c2:	66 90                	xchg   ax,ax
c00132c4:	fb                   	sti    
c00132c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132cd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00132d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132d7:	e9 83 cf fe ff       	jmp    c000025f <goToUsermode>

c00132dc <changeTSS>:
c00132dc:	83 ec 14             	sub    esp,0x14
c00132df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132e4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00132e7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00132ec:	c1 e2 15             	shl    edx,0x15
c00132ef:	29 d0                	sub    eax,edx
c00132f1:	50                   	push   eax
c00132f2:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00132f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00132fd:	05 7c 11 00 00       	add    eax,0x117c
c0013302:	50                   	push   eax
c0013303:	e8 e0 5f ff ff       	call   c00092e8 <TSS::setESP(unsigned long)>
c0013308:	83 c4 1c             	add    esp,0x1c
c001330b:	c3                   	ret    

c001330c <switchToThread(ThreadControlBlock*)>:
c001330c:	57                   	push   edi
c001330d:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013312:	56                   	push   esi
c0013313:	85 c0                	test   eax,eax
c0013315:	53                   	push   ebx
c0013316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001331a:	0f 85 90 00 00 00    	jne    c00133b0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013320:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013323:	80 fa ff             	cmp    dl,0xff
c0013326:	0f 84 80 00 00 00    	je     c00133ac <switchToThread(ThreadControlBlock*)+0xa0>
c001332c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013332:	b8 00 04 00 00       	mov    eax,0x400
c0013337:	29 d0                	sub    eax,edx
c0013339:	d1 f8                	sar    eax,1
c001333b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001333e:	66 90                	xchg   ax,ax
c0013340:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013343:	e8 7b 24 00 00       	call   c00157c3 <HalQueryPerformanceCounter()>
c0013348:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001334d:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c0013353:	89 c6                	mov    esi,eax
c0013355:	89 d7                	mov    edi,edx
c0013357:	2b 35 38 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e38
c001335d:	a3 38 3e 02 c0       	mov    ds:0xc0023e38,eax
c0013362:	1b 3d 3c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e3c
c0013368:	89 35 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,esi
c001336e:	89 3d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,edi
c0013374:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001337a:	89 15 3c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e3c,edx
c0013380:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013383:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013386:	01 c6                	add    esi,eax
c0013388:	11 d7                	adc    edi,edx
c001338a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001338d:	83 ec 0c             	sub    esp,0xc
c0013390:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013393:	53                   	push   ebx
c0013394:	e8 fe ce fe ff       	call   c0000297 <switchToThreadASM>
c0013399:	0f 20 c0             	mov    eax,cr0
c001339c:	83 c8 08             	or     eax,0x8
c001339f:	0f 22 c0             	mov    cr0,eax
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	5b                   	pop    ebx
c00133a6:	5e                   	pop    esi
c00133a7:	5f                   	pop    edi
c00133a8:	c3                   	ret    
c00133a9:	8d 76 00             	lea    esi,[esi+0x0]
c00133ac:	31 c0                	xor    eax,eax
c00133ae:	eb 90                	jmp    c0013340 <switchToThread(ThreadControlBlock*)+0x34>
c00133b0:	5b                   	pop    ebx
c00133b1:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c00133bb:	5e                   	pop    esi
c00133bc:	5f                   	pop    edi
c00133bd:	c3                   	ret    
c00133be:	66 90                	xchg   ax,ax

c00133c0 <Process::addArgs(char**)>:
c00133c0:	57                   	push   edi
c00133c1:	56                   	push   esi
c00133c2:	53                   	push   ebx
c00133c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133cb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00133d5:	85 ff                	test   edi,edi
c00133d7:	74 43                	je     c001341c <Process::addArgs(char**)+0x5c>
c00133d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00133db:	85 c0                	test   eax,eax
c00133dd:	74 3d                	je     c001341c <Process::addArgs(char**)+0x5c>
c00133df:	31 db                	xor    ebx,ebx
c00133e1:	8d 76 00             	lea    esi,[esi+0x0]
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	50                   	push   eax
c00133e8:	e8 73 d1 fe ff       	call   c0000560 <strlen>
c00133ed:	40                   	inc    eax
c00133ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00133f1:	e8 63 4a ff ff       	call   c0007e59 <malloc>
c00133f6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00133fd:	5a                   	pop    edx
c00133fe:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013401:	59                   	pop    ecx
c0013402:	43                   	inc    ebx
c0013403:	52                   	push   edx
c0013404:	50                   	push   eax
c0013405:	e8 16 d2 fe ff       	call   c0000620 <strcpy>
c001340a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013416:	85 c0                	test   eax,eax
c0013418:	75 ca                	jne    c00133e4 <Process::addArgs(char**)+0x24>
c001341a:	66 90                	xchg   ax,ax
c001341c:	5b                   	pop    ebx
c001341d:	5e                   	pop    esi
c001341e:	5f                   	pop    edi
c001341f:	c3                   	ret    

c0013420 <Process::Process(char const*, Process*, char**)>:
c0013420:	56                   	push   esi
c0013421:	53                   	push   ebx
c0013422:	83 ec 14             	sub    esp,0x14
c0013425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013429:	05 0c 02 00 00       	add    eax,0x20c
c001342e:	bb 07 00 00 00       	mov    ebx,0x7
c0013433:	89 c6                	mov    esi,eax
c0013435:	8d 76 00             	lea    esi,[esi+0x0]
c0013438:	85 db                	test   ebx,ebx
c001343a:	78 14                	js     c0013450 <Process::Process(char const*, Process*, char**)+0x30>
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	56                   	push   esi
c0013440:	e8 77 96 00 00       	call   c001cabc <ThreadControlBlock::ThreadControlBlock()>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 c6 5f             	add    esi,0x5f
c001344b:	4b                   	dec    ebx
c001344c:	eb ea                	jmp    c0013438 <Process::Process(char const*, Process*, char**)+0x18>
c001344e:	66 90                	xchg   ax,ax
c0013450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013454:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001345b:	83 ec 0c             	sub    esp,0xc
c001345e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013462:	e8 09 d1 ff ff       	call   c0010570 <Krnl::newProcessEnv(Process*)>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	89 c2                	mov    edx,eax
c001346c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013470:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001347a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013483:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c0013488:	8d 50 01             	lea    edx,[eax+0x1]
c001348b:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c0013491:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013495:	89 02                	mov    DWORD PTR [edx],eax
c0013497:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001349f:	83 ec 0c             	sub    esp,0xc
c00134a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134a6:	e8 ae 49 ff ff       	call   c0007e59 <malloc>
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	89 c3                	mov    ebx,eax
c00134b0:	83 ec 08             	sub    esp,0x8
c00134b3:	6a 00                	push   0x0
c00134b5:	53                   	push   ebx
c00134b6:	e8 1d 70 ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00134de:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134ee:	85 c0                	test   eax,eax
c00134f0:	74 42                	je     c0013534 <Process::Process(char const*, Process*, char**)+0x114>
c00134f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013506:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001350c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013510:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013516:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001351c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013520:	05 0c 01 00 00       	add    eax,0x10c
c0013525:	83 ec 08             	sub    esp,0x8
c0013528:	52                   	push   edx
c0013529:	50                   	push   eax
c001352a:	e8 f1 d0 fe ff       	call   c0000620 <strcpy>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	eb 64                	jmp    c0013598 <Process::Process(char const*, Process*, char**)+0x178>
c0013534:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013543:	e8 11 49 ff ff       	call   c0007e59 <malloc>
c0013548:	83 c4 10             	add    esp,0x10
c001354b:	89 c3                	mov    ebx,eax
c001354d:	83 ec 08             	sub    esp,0x8
c0013550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013554:	53                   	push   ebx
c0013555:	e8 32 5b ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013561:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001356b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	50                   	push   eax
c0013575:	e8 b2 53 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013581:	05 0c 01 00 00       	add    eax,0x10c
c0013586:	83 ec 08             	sub    esp,0x8
c0013589:	68 bd ea 01 c0       	push   0xc001eabd
c001358e:	50                   	push   eax
c001358f:	e8 8c d0 fe ff       	call   c0000620 <strcpy>
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	90                   	nop
c0013598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001359c:	83 c0 0c             	add    eax,0xc
c001359f:	83 ec 08             	sub    esp,0x8
c00135a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135a6:	50                   	push   eax
c00135a7:	e8 74 d0 fe ff       	call   c0000620 <strcpy>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	83 ec 08             	sub    esp,0x8
c00135b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135ba:	e8 01 fe ff ff       	call   c00133c0 <Process::addArgs(char**)>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	83 ec 08             	sub    esp,0x8
c00135c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135cd:	e8 89 ed ff ff       	call   c001235b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135dd:	83 f0 01             	xor    eax,0x1
c00135e0:	88 c2                	mov    dl,al
c00135e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00135ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135f0:	25 ff 00 00 00       	and    eax,0xff
c00135f5:	83 ec 08             	sub    esp,0x8
c00135f8:	50                   	push   eax
c00135f9:	68 14 eb 01 c0       	push   0xc001eb14
c00135fe:	e8 e5 75 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013603:	83 c4 10             	add    esp,0x10
c0013606:	90                   	nop
c0013607:	83 c4 14             	add    esp,0x14
c001360a:	5b                   	pop    ebx
c001360b:	5e                   	pop    esi
c001360c:	c3                   	ret    
c001360d:	90                   	nop
c001360e:	66 90                	xchg   ax,ax

c0013610 <Process::Process(bool, char const*, Process*, char**)>:
c0013610:	56                   	push   esi
c0013611:	53                   	push   ebx
c0013612:	83 ec 24             	sub    esp,0x24
c0013615:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013619:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001361d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013621:	05 0c 02 00 00       	add    eax,0x20c
c0013626:	bb 07 00 00 00       	mov    ebx,0x7
c001362b:	89 c6                	mov    esi,eax
c001362d:	8d 76 00             	lea    esi,[esi+0x0]
c0013630:	85 db                	test   ebx,ebx
c0013632:	78 14                	js     c0013648 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	56                   	push   esi
c0013638:	e8 7f 94 00 00       	call   c001cabc <ThreadControlBlock::ThreadControlBlock()>
c001363d:	83 c4 10             	add    esp,0x10
c0013640:	83 c6 5f             	add    esi,0x5f
c0013643:	4b                   	dec    ebx
c0013644:	eb ea                	jmp    c0013630 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013646:	66 90                	xchg   ax,ax
c0013648:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001364c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001365a:	e8 11 cf ff ff       	call   c0010570 <Krnl::newProcessEnv(Process*)>
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	89 c2                	mov    edx,eax
c0013664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013668:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001366e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013672:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001367b:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c0013680:	8d 50 01             	lea    edx,[eax+0x1]
c0013683:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c0013689:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001368d:	89 02                	mov    DWORD PTR [edx],eax
c001368f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013697:	83 ec 0c             	sub    esp,0xc
c001369a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001369e:	e8 b6 47 ff ff       	call   c0007e59 <malloc>
c00136a3:	83 c4 10             	add    esp,0x10
c00136a6:	89 c3                	mov    ebx,eax
c00136a8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00136ac:	25 ff 00 00 00       	and    eax,0xff
c00136b1:	83 ec 08             	sub    esp,0x8
c00136b4:	50                   	push   eax
c00136b5:	53                   	push   ebx
c00136b6:	e8 1d 6e ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00136c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00136d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00136de:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00136e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136ee:	85 c0                	test   eax,eax
c00136f0:	74 42                	je     c0013734 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00136f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013706:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001370c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013710:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013716:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001371c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013720:	05 0c 01 00 00       	add    eax,0x10c
c0013725:	83 ec 08             	sub    esp,0x8
c0013728:	52                   	push   edx
c0013729:	50                   	push   eax
c001372a:	e8 f1 ce fe ff       	call   c0000620 <strcpy>
c001372f:	83 c4 10             	add    esp,0x10
c0013732:	eb 64                	jmp    c0013798 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013734:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013743:	e8 11 47 ff ff       	call   c0007e59 <malloc>
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	89 c3                	mov    ebx,eax
c001374d:	83 ec 08             	sub    esp,0x8
c0013750:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013754:	53                   	push   ebx
c0013755:	e8 32 59 ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013761:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001376b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013771:	83 ec 0c             	sub    esp,0xc
c0013774:	50                   	push   eax
c0013775:	e8 b2 51 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c001377a:	83 c4 10             	add    esp,0x10
c001377d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013781:	05 0c 01 00 00       	add    eax,0x10c
c0013786:	83 ec 08             	sub    esp,0x8
c0013789:	68 bd ea 01 c0       	push   0xc001eabd
c001378e:	50                   	push   eax
c001378f:	e8 8c ce fe ff       	call   c0000620 <strcpy>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	90                   	nop
c0013798:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001379c:	83 c0 0c             	add    eax,0xc
c001379f:	83 ec 08             	sub    esp,0x8
c00137a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137a6:	50                   	push   eax
c00137a7:	e8 74 ce fe ff       	call   c0000620 <strcpy>
c00137ac:	83 c4 10             	add    esp,0x10
c00137af:	83 ec 08             	sub    esp,0x8
c00137b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00137ba:	e8 01 fc ff ff       	call   c00133c0 <Process::addArgs(char**)>
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	90                   	nop
c00137c3:	83 c4 24             	add    esp,0x24
c00137c6:	5b                   	pop    ebx
c00137c7:	5e                   	pop    esi
c00137c8:	c3                   	ret    
c00137c9:	8d 76 00             	lea    esi,[esi+0x0]

c00137cc <taskStartupFunction>:
c00137cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00137d4:	c3                   	ret    
c00137d5:	90                   	nop
c00137d6:	66 90                	xchg   ax,ax

c00137d8 <Semaphore::Semaphore(int)>:
c00137d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137e0:	89 10                	mov    DWORD PTR [eax],edx
c00137e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137e6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00137ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013803:	90                   	nop
c0013804:	c3                   	ret    
c0013805:	90                   	nop
c0013806:	66 90                	xchg   ax,ax

c0013808 <Mutex::Mutex()>:
c0013808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380c:	6a 01                	push   0x1
c001380e:	50                   	push   eax
c001380f:	e8 c4 ff ff ff       	call   c00137d8 <Semaphore::Semaphore(int)>
c0013814:	83 c4 08             	add    esp,0x8
c0013817:	90                   	nop
c0013818:	c3                   	ret    
c0013819:	90                   	nop
c001381a:	66 90                	xchg   ax,ax

c001381c <Process::createThread(void (*)(void*), void*, int)>:
c001381c:	57                   	push   edi
c001381d:	31 c9                	xor    ecx,ecx
c001381f:	56                   	push   esi
c0013820:	53                   	push   ebx
c0013821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013825:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001382c:	89 f2                	mov    edx,esi
c001382e:	66 90                	xchg   ax,ax
c0013830:	31 c0                	xor    eax,eax
c0013832:	66 89 d0             	mov    ax,dx
c0013835:	83 e2 01             	and    edx,0x1
c0013838:	74 12                	je     c001384c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001383a:	d1 f8                	sar    eax,1
c001383c:	41                   	inc    ecx
c001383d:	89 c2                	mov    edx,eax
c001383f:	83 f9 10             	cmp    ecx,0x10
c0013842:	75 ec                	jne    c0013830 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013844:	31 db                	xor    ebx,ebx
c0013846:	89 d8                	mov    eax,ebx
c0013848:	5b                   	pop    ebx
c0013849:	5e                   	pop    esi
c001384a:	5f                   	pop    edi
c001384b:	c3                   	ret    
c001384c:	b8 01 00 00 00       	mov    eax,0x1
c0013851:	d3 e0                	shl    eax,cl
c0013853:	09 c6                	or     esi,eax
c0013855:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013858:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001385f:	01 c0                	add    eax,eax
c0013861:	01 c8                	add    eax,ecx
c0013863:	8d 04 80             	lea    eax,[eax+eax*4]
c0013866:	01 d8                	add    eax,ebx
c0013868:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001386f:	75 0b                	jne    c001387c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013871:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001387b:	90                   	nop
c001387c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013882:	83 ec 08             	sub    esp,0x8
c0013885:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013888:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001388b:	01 c0                	add    eax,eax
c001388d:	01 c8                	add    eax,ecx
c001388f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013892:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013895:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001389b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138a5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00138ab:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00138b1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00138b8:	89 ca                	mov    edx,ecx
c00138ba:	f7 da                	neg    edx
c00138bc:	c1 e2 15             	shl    edx,0x15
c00138bf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00138c5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00138cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138cf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00138d9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00138df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00138e3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00138e9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00138f3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00138fd:	53                   	push   ebx
c00138fe:	68 24 3e 02 c0       	push   0xc0023e24
c0013903:	e8 54 8f 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013908:	83 c4 10             	add    esp,0x10
c001390b:	89 d8                	mov    eax,ebx
c001390d:	5b                   	pop    ebx
c001390e:	5e                   	pop    esi
c001390f:	5f                   	pop    edi
c0013910:	c3                   	ret    
c0013911:	90                   	nop
c0013912:	66 90                	xchg   ax,ax

c0013914 <Process::createUserThread()>:
c0013914:	83 ec 0c             	sub    esp,0xc
c0013917:	68 80 00 00 00       	push   0x80
c001391c:	6a 00                	push   0x0
c001391e:	68 b4 32 01 c0       	push   0xc00132b4
c0013923:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013927:	50                   	push   eax
c0013928:	e8 ef fe ff ff       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c001392d:	83 c4 1c             	add    esp,0x1c
c0013930:	c3                   	ret    
c0013931:	8d 76 00             	lea    esi,[esi+0x0]

c0013934 <setupMultitasking(void (*)())>:
c0013934:	56                   	push   esi
c0013935:	53                   	push   ebx
c0013936:	53                   	push   ebx
c0013937:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001393b:	eb 13                	jmp    c0013950 <setupMultitasking(void (*)())+0x1c>
c001393d:	8d 76 00             	lea    esi,[esi+0x0]
c0013940:	83 ec 0c             	sub    esp,0xc
c0013943:	68 24 3e 02 c0       	push   0xc0023e24
c0013948:	e8 57 8e 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	68 24 3e 02 c0       	push   0xc0023e24
c0013958:	e8 23 8e 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	84 c0                	test   al,al
c0013962:	74 dc                	je     c0013940 <setupMultitasking(void (*)())+0xc>
c0013964:	83 ec 0c             	sub    esp,0xc
c0013967:	68 1f 07 00 00       	push   0x71f
c001396c:	e8 e8 44 ff ff       	call   c0007e59 <malloc>
c0013971:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013978:	89 c3                	mov    ebx,eax
c001397a:	6a 00                	push   0x0
c001397c:	68 c1 ea 01 c0       	push   0xc001eac1
c0013981:	6a 01                	push   0x1
c0013983:	50                   	push   eax
c0013984:	e8 87 fc ff ff       	call   c0013610 <Process::Process(bool, char const*, Process*, char**)>
c0013989:	83 c4 14             	add    esp,0x14
c001398c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013992:	89 1d 30 3e 02 c0    	mov    DWORD PTR ds:0xc0023e30,ebx
c0013998:	50                   	push   eax
c0013999:	e8 eb 51 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c001399e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139a6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00139b0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00139b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139b9:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00139c3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00139c9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00139cf:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00139d9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00139e3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00139ed:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00139f3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00139f9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a03:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a09:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a13:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a19:	5a                   	pop    edx
c0013a1a:	59                   	pop    ecx
c0013a1b:	68 bd ea 01 c0       	push   0xc001eabd
c0013a20:	50                   	push   eax
c0013a21:	e8 fa cb fe ff       	call   c0000620 <strcpy>
c0013a26:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a2d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a31:	83 c4 14             	add    esp,0x14
c0013a34:	5b                   	pop    ebx
c0013a35:	5e                   	pop    esi
c0013a36:	e9 4e c8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a3b:	90                   	nop

c0013a3c <schedule()>:
c0013a3c:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013a42:	85 d2                	test   edx,edx
c0013a44:	74 0e                	je     c0013a54 <schedule()+0x18>
c0013a46:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c0013a50:	c3                   	ret    
c0013a51:	8d 76 00             	lea    esi,[esi+0x0]
c0013a54:	53                   	push   ebx
c0013a55:	83 ec 14             	sub    esp,0x14
c0013a58:	68 24 3e 02 c0       	push   0xc0023e24
c0013a5d:	e8 1e 8d 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a62:	83 c4 10             	add    esp,0x10
c0013a65:	84 c0                	test   al,al
c0013a67:	75 3b                	jne    c0013aa4 <schedule()+0x68>
c0013a69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013a71:	4a                   	dec    edx
c0013a72:	74 38                	je     c0013aac <schedule()+0x70>
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	68 24 3e 02 c0       	push   0xc0023e24
c0013a7c:	e8 1b 8d 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a81:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013a88:	89 c3                	mov    ebx,eax
c0013a8a:	e8 15 8d 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a8f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013a96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a99:	e8 6e f8 ff ff       	call   c001330c <switchToThread(ThreadControlBlock*)>
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa4:	83 c4 08             	add    esp,0x8
c0013aa7:	5b                   	pop    ebx
c0013aa8:	c3                   	ret    
c0013aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013ab3:	83 ec 08             	sub    esp,0x8
c0013ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abb:	50                   	push   eax
c0013abc:	68 24 3e 02 c0       	push   0xc0023e24
c0013ac1:	e8 96 8d 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	eb a9                	jmp    c0013a74 <schedule()+0x38>
c0013acb:	90                   	nop

c0013acc <Semaphore::tryAcquire()>:
c0013acc:	53                   	push   ebx
c0013acd:	83 ec 08             	sub    esp,0x8
c0013ad0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ad4:	fa                   	cli    
c0013ad5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ada:	8d 50 01             	lea    edx,[eax+0x1]
c0013add:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c0013ae3:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013ae9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013aec:	89 1d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ebx
c0013af2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013af5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013af7:	7c 33                	jl     c0013b2c <Semaphore::tryAcquire()+0x60>
c0013af9:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013aff:	85 d2                	test   edx,edx
c0013b01:	75 0d                	jne    c0013b10 <Semaphore::tryAcquire()+0x44>
c0013b03:	8b 15 00 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e00
c0013b09:	85 d2                	test   edx,edx
c0013b0b:	75 6b                	jne    c0013b78 <Semaphore::tryAcquire()+0xac>
c0013b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b10:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b15:	85 c0                	test   eax,eax
c0013b17:	74 0b                	je     c0013b24 <Semaphore::tryAcquire()+0x58>
c0013b19:	8d 76 00             	lea    esi,[esi+0x0]
c0013b1c:	31 c0                	xor    eax,eax
c0013b1e:	83 c4 08             	add    esp,0x8
c0013b21:	5b                   	pop    ebx
c0013b22:	c3                   	ret    
c0013b23:	90                   	nop
c0013b24:	fb                   	sti    
c0013b25:	83 c4 08             	add    esp,0x8
c0013b28:	5b                   	pop    ebx
c0013b29:	c3                   	ret    
c0013b2a:	66 90                	xchg   ax,ax
c0013b2c:	43                   	inc    ebx
c0013b2d:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013b33:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b36:	85 d2                	test   edx,edx
c0013b38:	75 22                	jne    c0013b5c <Semaphore::tryAcquire()+0x90>
c0013b3a:	8b 0d 00 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e00
c0013b40:	85 c9                	test   ecx,ecx
c0013b42:	74 18                	je     c0013b5c <Semaphore::tryAcquire()+0x90>
c0013b44:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013b4e:	e8 e9 fe ff ff       	call   c0013a3c <schedule()>
c0013b53:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013b58:	48                   	dec    eax
c0013b59:	8d 76 00             	lea    esi,[esi+0x0]
c0013b5c:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b61:	85 c0                	test   eax,eax
c0013b63:	75 0b                	jne    c0013b70 <Semaphore::tryAcquire()+0xa4>
c0013b65:	fb                   	sti    
c0013b66:	b0 01                	mov    al,0x1
c0013b68:	83 c4 08             	add    esp,0x8
c0013b6b:	5b                   	pop    ebx
c0013b6c:	c3                   	ret    
c0013b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b70:	b0 01                	mov    al,0x1
c0013b72:	83 c4 08             	add    esp,0x8
c0013b75:	5b                   	pop    ebx
c0013b76:	c3                   	ret    
c0013b77:	90                   	nop
c0013b78:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013b82:	e8 b5 fe ff ff       	call   c0013a3c <schedule()>
c0013b87:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013b8c:	48                   	dec    eax
c0013b8d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b92:	85 c0                	test   eax,eax
c0013b94:	75 86                	jne    c0013b1c <Semaphore::tryAcquire()+0x50>
c0013b96:	eb 8c                	jmp    c0013b24 <Semaphore::tryAcquire()+0x58>

c0013b98 <Semaphore::assertLocked(char const*)>:
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b9f:	fa                   	cli    
c0013ba0:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013ba6:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013bab:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bae:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013bb4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013bb6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013bb9:	7c 29                	jl     c0013be4 <Semaphore::assertLocked(char const*)+0x4c>
c0013bbb:	90                   	nop
c0013bbc:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013bc1:	85 c0                	test   eax,eax
c0013bc3:	75 0b                	jne    c0013bd0 <Semaphore::assertLocked(char const*)+0x38>
c0013bc5:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013bca:	85 c0                	test   eax,eax
c0013bcc:	75 2e                	jne    c0013bfc <Semaphore::assertLocked(char const*)+0x64>
c0013bce:	66 90                	xchg   ax,ax
c0013bd0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013bd5:	48                   	dec    eax
c0013bd6:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013bdb:	75 03                	jne    c0013be0 <Semaphore::assertLocked(char const*)+0x48>
c0013bdd:	fb                   	sti    
c0013bde:	66 90                	xchg   ax,ax
c0013be0:	83 c4 0c             	add    esp,0xc
c0013be3:	c3                   	ret    
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013beb:	52                   	push   edx
c0013bec:	e8 f6 ca ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0013bf1:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	48                   	dec    eax
c0013bfa:	eb c0                	jmp    c0013bbc <Semaphore::assertLocked(char const*)+0x24>
c0013bfc:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013c06:	e8 31 fe ff ff       	call   c0013a3c <schedule()>
c0013c0b:	eb c3                	jmp    c0013bd0 <Semaphore::assertLocked(char const*)+0x38>
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]

c0013c10 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c1f:	e8 18 fe ff ff       	call   c0013a3c <schedule()>
c0013c24:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c29:	48                   	dec    eax
c0013c2a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c2f:	75 03                	jne    c0013c34 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c31:	fb                   	sti    
c0013c32:	66 90                	xchg   ax,ax
c0013c34:	83 c4 0c             	add    esp,0xc
c0013c37:	c3                   	ret    

c0013c38 <blockTask(TaskState)>:
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	fa                   	cli    
c0013c3c:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013c42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c4e:	e8 e9 fd ff ff       	call   c0013a3c <schedule()>
c0013c53:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c58:	48                   	dec    eax
c0013c59:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c5e:	75 04                	jne    c0013c64 <blockTask(TaskState)+0x2c>
c0013c60:	fb                   	sti    
c0013c61:	8d 76 00             	lea    esi,[esi+0x0]
c0013c64:	83 c4 0c             	add    esp,0xc
c0013c67:	c3                   	ret    

c0013c68 <waitTask(int, int*, int)>:
c0013c68:	83 ec 18             	sub    esp,0x18
c0013c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c74:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013c77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c80:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013c83:	6a 07                	push   0x7
c0013c85:	e8 ae ff ff ff       	call   c0013c38 <blockTask(TaskState)>
c0013c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013c95:	85 d2                	test   edx,edx
c0013c97:	74 0b                	je     c0013ca4 <waitTask(int, int*, int)+0x3c>
c0013c99:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013c9c:	89 02                	mov    DWORD PTR [edx],eax
c0013c9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca3:	90                   	nop
c0013ca4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013ca7:	83 c4 0c             	add    esp,0xc
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <milliTenthSleepUntil(unsigned int)>:
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb3:	39 05 0c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f0c,eax
c0013cb9:	76 05                	jbe    c0013cc0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013cbb:	90                   	nop
c0013cbc:	83 c4 0c             	add    esp,0xc
c0013cbf:	c3                   	ret    
c0013cc0:	fa                   	cli    
c0013cc1:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013cc7:	83 ec 08             	sub    esp,0x8
c0013cca:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0013cd0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cd6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013cd9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cdf:	52                   	push   edx
c0013ce0:	68 18 3e 02 c0       	push   0xc0023e18
c0013ce5:	e8 72 8b 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cea:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013cf1:	e8 42 ff ff ff       	call   c0013c38 <blockTask(TaskState)>
c0013cf6:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	48                   	dec    eax
c0013cff:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013d04:	85 c0                	test   eax,eax
c0013d06:	75 0c                	jne    c0013d14 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d08:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013d0d:	85 c0                	test   eax,eax
c0013d0f:	75 17                	jne    c0013d28 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d11:	8d 76 00             	lea    esi,[esi+0x0]
c0013d14:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013d19:	48                   	dec    eax
c0013d1a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013d1f:	75 9b                	jne    c0013cbc <milliTenthSleepUntil(unsigned int)+0x10>
c0013d21:	fb                   	sti    
c0013d22:	83 c4 0c             	add    esp,0xc
c0013d25:	c3                   	ret    
c0013d26:	66 90                	xchg   ax,ax
c0013d28:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013d32:	e8 05 fd ff ff       	call   c0013a3c <schedule()>
c0013d37:	eb db                	jmp    c0013d14 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d39:	8d 76 00             	lea    esi,[esi+0x0]

c0013d3c <milliTenthSleep(unsigned int)>:
c0013d3c:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c0013d41:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d45:	e9 62 ff ff ff       	jmp    c0013cac <milliTenthSleepUntil(unsigned int)>
c0013d4a:	66 90                	xchg   ax,ax

c0013d4c <sleep(unsigned int)>:
c0013d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d50:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d53:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d56:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d59:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d5c:	c1 e0 04             	shl    eax,0x4
c0013d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d63:	eb d7                	jmp    c0013d3c <milliTenthSleep(unsigned int)>
c0013d65:	90                   	nop
c0013d66:	66 90                	xchg   ax,ax

c0013d68 <Semaphore::acquire()>:
c0013d68:	83 ec 0c             	sub    esp,0xc
c0013d6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d6f:	fa                   	cli    
c0013d70:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013d75:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013d7b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d7e:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013d84:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013d87:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013d89:	7d 2d                	jge    c0013db8 <Semaphore::acquire()+0x50>
c0013d8b:	41                   	inc    ecx
c0013d8c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013d8f:	90                   	nop
c0013d90:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013d95:	85 c0                	test   eax,eax
c0013d97:	75 0b                	jne    c0013da4 <Semaphore::acquire()+0x3c>
c0013d99:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013d9e:	85 c0                	test   eax,eax
c0013da0:	75 62                	jne    c0013e04 <Semaphore::acquire()+0x9c>
c0013da2:	66 90                	xchg   ax,ax
c0013da4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013da9:	48                   	dec    eax
c0013daa:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013daf:	75 03                	jne    c0013db4 <Semaphore::acquire()+0x4c>
c0013db1:	fb                   	sti    
c0013db2:	66 90                	xchg   ax,ax
c0013db4:	83 c4 0c             	add    esp,0xc
c0013db7:	c3                   	ret    
c0013db8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013dc4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013dc7:	85 c9                	test   ecx,ecx
c0013dc9:	74 4d                	je     c0013e18 <Semaphore::acquire()+0xb0>
c0013dcb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013dce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013dd4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013dd7:	90                   	nop
c0013dd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ddd:	83 ec 0c             	sub    esp,0xc
c0013de0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013de3:	68 3c eb 01 c0       	push   0xc001eb3c
c0013de8:	e8 fb 6d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013ded:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013df4:	e8 3f fe ff ff       	call   c0013c38 <blockTask(TaskState)>
c0013df9:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	48                   	dec    eax
c0013e02:	eb 8c                	jmp    c0013d90 <Semaphore::acquire()+0x28>
c0013e04:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013e0e:	e8 29 fc ff ff       	call   c0013a3c <schedule()>
c0013e13:	eb 8f                	jmp    c0013da4 <Semaphore::acquire()+0x3c>
c0013e15:	8d 76 00             	lea    esi,[esi+0x0]
c0013e18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e1d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e20:	eb b6                	jmp    c0013dd8 <Semaphore::acquire()+0x70>
c0013e22:	66 90                	xchg   ax,ax

c0013e24 <taskReturned>:
c0013e24:	83 ec 18             	sub    esp,0x18
c0013e27:	68 5c eb 01 c0       	push   0xc001eb5c
c0013e2c:	e8 b6 c8 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	6a 02                	push   0x2
c0013e39:	e8 fa fd ff ff       	call   c0013c38 <blockTask(TaskState)>
c0013e3e:	fa                   	cli    
c0013e3f:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013e45:	e8 f2 fb ff ff       	call   c0013a3c <schedule()>
c0013e4a:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	48                   	dec    eax
c0013e53:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013e58:	85 c0                	test   eax,eax
c0013e5a:	75 d8                	jne    c0013e34 <taskReturned+0x10>
c0013e5c:	fb                   	sti    
c0013e5d:	eb d5                	jmp    c0013e34 <taskReturned+0x10>
c0013e5f:	90                   	nop

c0013e60 <Thr::processFromPID(int)>:
c0013e60:	57                   	push   edi
c0013e61:	56                   	push   esi
c0013e62:	53                   	push   ebx
c0013e63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e67:	fa                   	cli    
c0013e68:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013e6e:	83 ec 0c             	sub    esp,0xc
c0013e71:	68 24 3e 02 c0       	push   0xc0023e24
c0013e76:	e8 21 89 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	89 c7                	mov    edi,eax
c0013e80:	eb 16                	jmp    c0013e98 <Thr::processFromPID(int)+0x38>
c0013e82:	66 90                	xchg   ax,ax
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 24 3e 02 c0       	push   0xc0023e24
c0013e8c:	e8 0b 89 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	39 f8                	cmp    eax,edi
c0013e96:	74 4c                	je     c0013ee4 <Thr::processFromPID(int)+0x84>
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	68 24 3e 02 c0       	push   0xc0023e24
c0013ea0:	e8 f7 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ea5:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013eac:	89 c3                	mov    ebx,eax
c0013eae:	e8 f1 88 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013eb3:	58                   	pop    eax
c0013eb4:	5a                   	pop    edx
c0013eb5:	53                   	push   ebx
c0013eb6:	68 24 3e 02 c0       	push   0xc0023e24
c0013ebb:	e8 9c 89 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ec0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec3:	83 c4 10             	add    esp,0x10
c0013ec6:	39 30                	cmp    DWORD PTR [eax],esi
c0013ec8:	75 ba                	jne    c0013e84 <Thr::processFromPID(int)+0x24>
c0013eca:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ecf:	48                   	dec    eax
c0013ed0:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013ed5:	74 09                	je     c0013ee0 <Thr::processFromPID(int)+0x80>
c0013ed7:	90                   	nop
c0013ed8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013edb:	5b                   	pop    ebx
c0013edc:	5e                   	pop    esi
c0013edd:	5f                   	pop    edi
c0013ede:	c3                   	ret    
c0013edf:	90                   	nop
c0013ee0:	fb                   	sti    
c0013ee1:	eb f5                	jmp    c0013ed8 <Thr::processFromPID(int)+0x78>
c0013ee3:	90                   	nop
c0013ee4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ee9:	48                   	dec    eax
c0013eea:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013eef:	75 07                	jne    c0013ef8 <Thr::processFromPID(int)+0x98>
c0013ef1:	fb                   	sti    
c0013ef2:	5b                   	pop    ebx
c0013ef3:	5e                   	pop    esi
c0013ef4:	5f                   	pop    edi
c0013ef5:	c3                   	ret    
c0013ef6:	66 90                	xchg   ax,ax
c0013ef8:	5b                   	pop    ebx
c0013ef9:	31 c0                	xor    eax,eax
c0013efb:	5e                   	pop    esi
c0013efc:	5f                   	pop    edi
c0013efd:	c3                   	ret    
c0013efe:	66 90                	xchg   ax,ax

c0013f00 <unblockTask(ThreadControlBlock*)>:
c0013f00:	53                   	push   ebx
c0013f01:	83 ec 08             	sub    esp,0x8
c0013f04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f08:	fa                   	cli    
c0013f09:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013f0f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f12:	85 c0                	test   eax,eax
c0013f14:	74 66                	je     c0013f7c <unblockTask(ThreadControlBlock*)+0x7c>
c0013f16:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f19:	48                   	dec    eax
c0013f1a:	74 38                	je     c0013f54 <unblockTask(ThreadControlBlock*)+0x54>
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	68 24 3e 02 c0       	push   0xc0023e24
c0013f24:	e8 73 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f29:	83 c4 10             	add    esp,0x10
c0013f2c:	85 c0                	test   eax,eax
c0013f2e:	75 1c                	jne    c0013f4c <unblockTask(ThreadControlBlock*)+0x4c>
c0013f30:	eb 5e                	jmp    c0013f90 <unblockTask(ThreadControlBlock*)+0x90>
c0013f32:	66 90                	xchg   ax,ax
c0013f34:	83 ec 08             	sub    esp,0x8
c0013f37:	50                   	push   eax
c0013f38:	68 24 3e 02 c0       	push   0xc0023e24
c0013f3d:	e8 0a 8c 00 00       	call   c001cb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	85 c0                	test   eax,eax
c0013f47:	74 47                	je     c0013f90 <unblockTask(ThreadControlBlock*)+0x90>
c0013f49:	8d 76 00             	lea    esi,[esi+0x0]
c0013f4c:	39 c3                	cmp    ebx,eax
c0013f4e:	75 e4                	jne    c0013f34 <unblockTask(ThreadControlBlock*)+0x34>
c0013f50:	eb 12                	jmp    c0013f64 <unblockTask(ThreadControlBlock*)+0x64>
c0013f52:	66 90                	xchg   ax,ax
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	68 df ea 01 c0       	push   0xc001eadf
c0013f5c:	e8 87 6c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013f69:	48                   	dec    eax
c0013f6a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013f6f:	75 03                	jne    c0013f74 <unblockTask(ThreadControlBlock*)+0x74>
c0013f71:	fb                   	sti    
c0013f72:	66 90                	xchg   ax,ax
c0013f74:	83 c4 08             	add    esp,0x8
c0013f77:	5b                   	pop    ebx
c0013f78:	c3                   	ret    
c0013f79:	8d 76 00             	lea    esi,[esi+0x0]
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	68 c8 ea 01 c0       	push   0xc001eac8
c0013f84:	e8 5f 6c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	eb d6                	jmp    c0013f64 <unblockTask(ThreadControlBlock*)+0x64>
c0013f8e:	66 90                	xchg   ax,ax
c0013f90:	83 ec 08             	sub    esp,0x8
c0013f93:	53                   	push   ebx
c0013f94:	68 24 3e 02 c0       	push   0xc0023e24
c0013f99:	e8 be 88 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	eb c1                	jmp    c0013f64 <unblockTask(ThreadControlBlock*)+0x64>
c0013fa3:	90                   	nop

c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013fa4:	55                   	push   ebp
c0013fa5:	57                   	push   edi
c0013fa6:	56                   	push   esi
c0013fa7:	53                   	push   ebx
c0013fa8:	83 ec 1c             	sub    esp,0x1c
c0013fab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013faf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013fb8:	85 ed                	test   ebp,ebp
c0013fba:	7e 24                	jle    c0013fe0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013fbc:	31 f6                	xor    esi,esi
c0013fbe:	66 90                	xchg   ax,ax
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013fca:	46                   	inc    esi
c0013fcb:	57                   	push   edi
c0013fcc:	e8 98 3e ff ff       	call   c0007e69 <free>
c0013fd1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013fdd:	7f e1                	jg     c0013fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013fdf:	90                   	nop
c0013fe0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013fea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013fef:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ff2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ff5:	d3 c0                	rol    eax,cl
c0013ff7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ffe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014001:	89 f7                	mov    edi,esi
c0014003:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001400b:	0f 85 77 01 00 00    	jne    c0014188 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014011:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014017:	85 ed                	test   ebp,ebp
c0014019:	74 1d                	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001401b:	83 ec 0c             	sub    esp,0xc
c001401e:	55                   	push   ebp
c001401f:	e8 68 c4 ff ff       	call   c001048c <EnvVarContainer::~EnvVarContainer()>
c0014024:	59                   	pop    ecx
c0014025:	5e                   	pop    esi
c0014026:	6a 0c                	push   0xc
c0014028:	55                   	push   ebp
c0014029:	e8 c4 6a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001402e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	89 f7                	mov    edi,esi
c0014036:	66 90                	xchg   ax,ax
c0014038:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001403e:	85 c0                	test   eax,eax
c0014040:	0f 84 b6 00 00 00    	je     c00140fc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014046:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014049:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001404d:	31 c9                	xor    ecx,ecx
c001404f:	eb 17                	jmp    c0014068 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014051:	8d 76 00             	lea    esi,[esi+0x0]
c0014054:	41                   	inc    ecx
c0014055:	83 f9 10             	cmp    ecx,0x10
c0014058:	0f 84 9e 00 00 00    	je     c00140fc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001405e:	66 90                	xchg   ax,ax
c0014060:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014066:	66 90                	xchg   ax,ax
c0014068:	31 d2                	xor    edx,edx
c001406a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014071:	d3 fa                	sar    edx,cl
c0014073:	83 e2 01             	and    edx,0x1
c0014076:	74 dc                	je     c0014054 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014078:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001407b:	01 d2                	add    edx,edx
c001407d:	01 ca                	add    edx,ecx
c001407f:	8d 14 92             	lea    edx,[edx+edx*4]
c0014082:	01 d0                	add    eax,edx
c0014084:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001408a:	83 fd 07             	cmp    ebp,0x7
c001408d:	75 c5                	jne    c0014054 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001408f:	05 40 02 00 00       	add    eax,0x240
c0014094:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014097:	83 fd ff             	cmp    ebp,0xffffffff
c001409a:	0f 8c f0 00 00 00    	jl     c0014190 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140a0:	0f 84 ae 01 00 00    	je     c0014254 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140a6:	85 ed                	test   ebp,ebp
c00140a8:	0f 84 92 01 00 00    	je     c0014240 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00140ae:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00140b0:	75 a2                	jne    c0014054 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140b2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140bc:	01 d0                	add    eax,edx
c00140be:	66 90                	xchg   ax,ax
c00140c0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00140c4:	83 ec 0c             	sub    esp,0xc
c00140c7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00140cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140d6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00140dd:	50                   	push   eax
c00140de:	e8 1d fe ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140ed:	89 f7                	mov    edi,esi
c00140ef:	41                   	inc    ecx
c00140f0:	83 f9 10             	cmp    ecx,0x10
c00140f3:	0f 85 67 ff ff ff    	jne    c0014060 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00140f9:	8d 76 00             	lea    esi,[esi+0x0]
c00140fc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014102:	85 c0                	test   eax,eax
c0014104:	74 62                	je     c0014168 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014106:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001410c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014112:	74 54                	je     c0014168 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014114:	83 ec 0c             	sub    esp,0xc
c0014117:	68 24 3e 02 c0       	push   0xc0023e24
c001411c:	e8 7b 86 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014121:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0014128:	89 c7                	mov    edi,eax
c001412a:	e8 51 86 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	84 c0                	test   al,al
c0014134:	0f 84 ce 00 00 00    	je     c0014208 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001413a:	66 90                	xchg   ax,ax
c001413c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001413f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014145:	85 d2                	test   edx,edx
c0014147:	74 0f                	je     c0014158 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	8b 02                	mov    eax,DWORD PTR [edx]
c001414e:	52                   	push   edx
c001414f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014152:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014162:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014165:	8d 76 00             	lea    esi,[esi+0x0]
c0014168:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001416e:	85 db                	test   ebx,ebx
c0014170:	74 16                	je     c0014188 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014172:	83 ec 0c             	sub    esp,0xc
c0014175:	53                   	push   ebx
c0014176:	e8 4b 5d ff ff       	call   c0009ec6 <VAS::~VAS()>
c001417b:	58                   	pop    eax
c001417c:	5a                   	pop    edx
c001417d:	6a 14                	push   0x14
c001417f:	53                   	push   ebx
c0014180:	e8 6d 69 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	83 c4 1c             	add    esp,0x1c
c001418b:	5b                   	pop    ebx
c001418c:	5e                   	pop    esi
c001418d:	5f                   	pop    edi
c001418e:	5d                   	pop    ebp
c001418f:	c3                   	ret    
c0014190:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	68 90 eb 01 c0       	push   0xc001eb90
c001419c:	e8 46 c5 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00141a1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141a4:	83 c4 10             	add    esp,0x10
c00141a7:	89 f7                	mov    edi,esi
c00141a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141ad:	e9 a2 fe ff ff       	jmp    c0014054 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141ba:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00141c0:	75 1e                	jne    c00141e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	68 f8 eb 01 c0       	push   0xc001ebf8
c00141ca:	e8 19 6a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00141cf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141d6:	e8 5d fa ff ff       	call   c0013c38 <blockTask(TaskState)>
c00141db:	83 c4 10             	add    esp,0x10
c00141de:	66 90                	xchg   ax,ax
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	56                   	push   esi
c00141e4:	68 24 3e 02 c0       	push   0xc0023e24
c00141e9:	e8 6e 86 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141ee:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c00141f5:	e8 a2 85 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141fa:	83 c4 10             	add    esp,0x10
c00141fd:	39 f8                	cmp    eax,edi
c00141ff:	0f 84 37 ff ff ff    	je     c001413c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014205:	8d 76 00             	lea    esi,[esi+0x0]
c0014208:	83 ec 0c             	sub    esp,0xc
c001420b:	68 24 3e 02 c0       	push   0xc0023e24
c0014210:	e8 87 85 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014215:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c001421c:	89 c6                	mov    esi,eax
c001421e:	e8 81 85 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	39 f3                	cmp    ebx,esi
c0014228:	74 b6                	je     c00141e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001422a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001422d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014230:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014236:	75 a8                	jne    c00141e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014238:	e9 77 ff ff ff       	jmp    c00141b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001423d:	8d 76 00             	lea    esi,[esi+0x0]
c0014240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	68 c4 eb 01 c0       	push   0xc001ebc4
c001424c:	e9 4b ff ff ff       	jmp    c001419c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014251:	8d 76 00             	lea    esi,[esi+0x0]
c0014254:	8b 36                	mov    esi,DWORD PTR [esi]
c0014256:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001425a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001425d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014260:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014266:	01 d7                	add    edi,edx
c0014268:	89 f8                	mov    eax,edi
c001426a:	e9 51 fe ff ff       	jmp    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001426f:	90                   	nop

c0014270 <cleanerTaskFunction(void*)>:
c0014270:	53                   	push   ebx
c0014271:	83 ec 08             	sub    esp,0x8
c0014274:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014279:	48                   	dec    eax
c001427a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001427f:	75 03                	jne    c0014284 <cleanerTaskFunction(void*)+0x14>
c0014281:	fb                   	sti    
c0014282:	66 90                	xchg   ax,ax
c0014284:	fa                   	cli    
c0014285:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001428a:	80 3d ec 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023dec,0x0
c0014291:	8d 50 01             	lea    edx,[eax+0x1]
c0014294:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c001429a:	0f 84 ac 00 00 00    	je     c001434c <cleanerTaskFunction(void*)+0xdc>
c00142a0:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00142a5:	85 c0                	test   eax,eax
c00142a7:	75 03                	jne    c00142ac <cleanerTaskFunction(void*)+0x3c>
c00142a9:	fb                   	sti    
c00142aa:	66 90                	xchg   ax,ax
c00142ac:	c6 05 ec 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023dec,0x0
c00142b3:	fa                   	cli    
c00142b4:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00142ba:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c00142c0:	fa                   	cli    
c00142c1:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00142c7:	eb 2b                	jmp    c00142f4 <cleanerTaskFunction(void*)+0x84>
c00142c9:	8d 76 00             	lea    esi,[esi+0x0]
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	68 0c 3e 02 c0       	push   0xc0023e0c
c00142d4:	e8 c3 84 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00142d9:	c7 04 24 0c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e0c
c00142e0:	89 c3                	mov    ebx,eax
c00142e2:	e8 bd 84 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00142e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ea:	e8 b5 fc ff ff       	call   c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)>
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	66 90                	xchg   ax,ax
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	68 0c 3e 02 c0       	push   0xc0023e0c
c00142fc:	e8 7f 84 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014301:	83 c4 10             	add    esp,0x10
c0014304:	84 c0                	test   al,al
c0014306:	74 c4                	je     c00142cc <cleanerTaskFunction(void*)+0x5c>
c0014308:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001430d:	48                   	dec    eax
c001430e:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014313:	75 03                	jne    c0014318 <cleanerTaskFunction(void*)+0xa8>
c0014315:	fb                   	sti    
c0014316:	66 90                	xchg   ax,ax
c0014318:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c001431d:	48                   	dec    eax
c001431e:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0014323:	0f 85 4b ff ff ff    	jne    c0014274 <cleanerTaskFunction(void*)+0x4>
c0014329:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c001432e:	85 c0                	test   eax,eax
c0014330:	0f 84 3e ff ff ff    	je     c0014274 <cleanerTaskFunction(void*)+0x4>
c0014336:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0014340:	e8 f7 f6 ff ff       	call   c0013a3c <schedule()>
c0014345:	e9 2a ff ff ff       	jmp    c0014274 <cleanerTaskFunction(void*)+0x4>
c001434a:	66 90                	xchg   ax,ax
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	6a 02                	push   0x2
c0014351:	e8 ba f8 ff ff       	call   c0013c10 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	e9 4e ff ff ff       	jmp    c00142ac <cleanerTaskFunction(void*)+0x3c>
c001435e:	66 90                	xchg   ax,ax

c0014360 <terminateTask(int)>:
c0014360:	83 ec 14             	sub    esp,0x14
c0014363:	fa                   	cli    
c0014364:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001436a:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0014370:	fa                   	cli    
c0014371:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014377:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001437b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014380:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014388:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001438b:	50                   	push   eax
c001438c:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014391:	e8 c6 84 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014396:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439b:	83 c4 10             	add    esp,0x10
c001439e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143a5:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00143aa:	85 c0                	test   eax,eax
c00143ac:	74 5e                	je     c001440c <terminateTask(int)+0xac>
c00143ae:	83 ec 0c             	sub    esp,0xc
c00143b1:	c6 05 ec 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023dec,0x1
c00143b8:	50                   	push   eax
c00143b9:	e8 42 fb ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	8d 76 00             	lea    esi,[esi+0x0]
c00143c4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00143c9:	48                   	dec    eax
c00143ca:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00143cf:	75 03                	jne    c00143d4 <terminateTask(int)+0x74>
c00143d1:	fb                   	sti    
c00143d2:	66 90                	xchg   ax,ax
c00143d4:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c00143d9:	48                   	dec    eax
c00143da:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c00143df:	75 0b                	jne    c00143ec <terminateTask(int)+0x8c>
c00143e1:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c00143e8:	75 36                	jne    c0014420 <terminateTask(int)+0xc0>
c00143ea:	66 90                	xchg   ax,ax
c00143ec:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00143f1:	48                   	dec    eax
c00143f2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00143f7:	75 03                	jne    c00143fc <terminateTask(int)+0x9c>
c00143f9:	fb                   	sti    
c00143fa:	66 90                	xchg   ax,ax
c00143fc:	fa                   	cli    
c00143fd:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014403:	90                   	nop
c0014404:	e8 33 f6 ff ff       	call   c0013a3c <schedule()>
c0014409:	eb e1                	jmp    c00143ec <terminateTask(int)+0x8c>
c001440b:	90                   	nop
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	68 f6 ea 01 c0       	push   0xc001eaf6
c0014414:	e8 cf 67 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	eb a6                	jmp    c00143c4 <terminateTask(int)+0x64>
c001441e:	66 90                	xchg   ax,ax
c0014420:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c001442a:	eb d8                	jmp    c0014404 <terminateTask(int)+0xa4>

c001442c <Thr::terminateFromIRQ(int)>:
c001442c:	83 ec 18             	sub    esp,0x18
c001442f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014433:	50                   	push   eax
c0014434:	e8 27 ff ff ff       	call   c0014360 <terminateTask(int)>
c0014439:	90                   	nop
c001443a:	66 90                	xchg   ax,ax

c001443c <Semaphore::release()>:
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014443:	fa                   	cli    
c0014444:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014449:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001444f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014452:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0014458:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001445b:	85 c9                	test   ecx,ecx
c001445d:	74 41                	je     c00144a0 <Semaphore::release()+0x64>
c001445f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014462:	83 ec 0c             	sub    esp,0xc
c0014465:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014468:	51                   	push   ecx
c0014469:	e8 92 fa ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c001446e:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	48                   	dec    eax
c0014477:	90                   	nop
c0014478:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c001447d:	85 c0                	test   eax,eax
c001447f:	75 0b                	jne    c001448c <Semaphore::release()+0x50>
c0014481:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0014486:	85 c0                	test   eax,eax
c0014488:	75 1e                	jne    c00144a8 <Semaphore::release()+0x6c>
c001448a:	66 90                	xchg   ax,ax
c001448c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014491:	48                   	dec    eax
c0014492:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014497:	75 03                	jne    c001449c <Semaphore::release()+0x60>
c0014499:	fb                   	sti    
c001449a:	66 90                	xchg   ax,ax
c001449c:	83 c4 0c             	add    esp,0xc
c001449f:	c3                   	ret    
c00144a0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144a3:	eb d3                	jmp    c0014478 <Semaphore::release()+0x3c>
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]
c00144a8:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c00144b2:	e8 85 f5 ff ff       	call   c0013a3c <schedule()>
c00144b7:	eb d3                	jmp    c001448c <Semaphore::release()+0x50>
c00144b9:	8d 76 00             	lea    esi,[esi+0x0]

c00144bc <__static_initialization_and_destruction_0(int, int)>:
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00144c4:	0f 85 8e 00 00 00    	jne    c0014558 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00144d2:	0f 85 80 00 00 00    	jne    c0014558 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	68 24 3e 02 c0       	push   0xc0023e24
c00144e0:	e8 23 86 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	83 ec 04             	sub    esp,0x4
c00144eb:	68 b8 f6 01 c0       	push   0xc001f6b8
c00144f0:	68 24 3e 02 c0       	push   0xc0023e24
c00144f5:	68 b8 ca 01 c0       	push   0xc001cab8
c00144fa:	e8 a3 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	68 18 3e 02 c0       	push   0xc0023e18
c001450a:	e8 f9 85 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	83 ec 04             	sub    esp,0x4
c0014515:	68 b8 f6 01 c0       	push   0xc001f6b8
c001451a:	68 18 3e 02 c0       	push   0xc0023e18
c001451f:	68 b8 ca 01 c0       	push   0xc001cab8
c0014524:	e8 79 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014534:	e8 cf 85 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014539:	83 c4 10             	add    esp,0x10
c001453c:	83 ec 04             	sub    esp,0x4
c001453f:	68 b8 f6 01 c0       	push   0xc001f6b8
c0014544:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014549:	68 b8 ca 01 c0       	push   0xc001cab8
c001454e:	e8 4f 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	66 90                	xchg   ax,ax
c0014558:	90                   	nop
c0014559:	83 c4 0c             	add    esp,0xc
c001455c:	c3                   	ret    
c001455d:	8d 76 00             	lea    esi,[esi+0x0]

c0014560 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014560:	83 ec 0c             	sub    esp,0xc
c0014563:	83 ec 08             	sub    esp,0x8
c0014566:	68 ff ff 00 00       	push   0xffff
c001456b:	6a 01                	push   0x1
c001456d:	e8 4a ff ff ff       	call   c00144bc <__static_initialization_and_destruction_0(int, int)>
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	83 c4 0c             	add    esp,0xc
c0014578:	c3                   	ret    

c0014579 <Vm::inbv(unsigned short)>:
c0014579:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001457d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014582:	75 06                	jne    c001458a <Vm::inbv(unsigned short)+0x11>
c0014584:	a0 6c 3e 02 c0       	mov    al,ds:0xc0023e6c
c0014589:	c3                   	ret    
c001458a:	ec                   	in     al,dx
c001458b:	c3                   	ret    

c001458c <Vm::outbv(unsigned short, unsigned char)>:
c001458c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014594:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014599:	75 25                	jne    c00145c0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001459b:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c00145a1:	8d 51 01             	lea    edx,[ecx+0x1]
c00145a4:	88 81 80 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc180],al
c00145aa:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c00145b0:	83 fa 20             	cmp    edx,0x20
c00145b3:	75 0c                	jne    c00145c1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00145b5:	c7 05 6c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x1f
c00145bf:	c3                   	ret    
c00145c0:	ee                   	out    dx,al
c00145c1:	c3                   	ret    

c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00145c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145cc:	c1 e0 04             	shl    eax,0x4
c00145cf:	01 d0                	add    eax,edx
c00145d1:	c3                   	ret    

c00145d2 <Vm::getSegment(unsigned int)>:
c00145d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145d6:	c1 e8 10             	shr    eax,0x10
c00145d9:	c3                   	ret    

c00145da <Vm::getOffset(unsigned int)>:
c00145da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145de:	c3                   	ret    

c00145df <Vm::mainloop2()>:
c00145df:	83 ec 18             	sub    esp,0x18
c00145e2:	fa                   	cli    
c00145e3:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00145e9:	6a 02                	push   0x2
c00145eb:	c6 05 65 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e65,0x1
c00145f2:	e8 19 f6 ff ff       	call   c0013c10 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00145f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145fc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014600:	52                   	push   edx
c0014601:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014605:	52                   	push   edx
c0014606:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001460a:	52                   	push   edx
c001460b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001460f:	50                   	push   eax
c0014610:	e8 1a bc fe ff       	call   c000022f <goToVM86>
c0014615:	83 c4 2c             	add    esp,0x2c
c0014618:	c3                   	ret    

c0014619 <Vm::mainVm8086Loop(void*)>:
c0014619:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001461e:	48                   	dec    eax
c001461f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014624:	75 01                	jne    c0014627 <Vm::mainVm8086Loop(void*)+0xe>
c0014626:	fb                   	sti    
c0014627:	eb b6                	jmp    c00145df <Vm::mainloop2()>

c0014629 <Vm::mainloop3(unsigned long)>:
c0014629:	83 ec 18             	sub    esp,0x18
c001462c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014630:	fa                   	cli    
c0014631:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014637:	6a 02                	push   0x2
c0014639:	c6 05 64 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e64,0x1
c0014640:	a3 60 3e 02 c0       	mov    ds:0xc0023e60,eax
c0014645:	e8 c6 f5 ff ff       	call   c0013c10 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001464a:	83 c4 1c             	add    esp,0x1c
c001464d:	eb 90                	jmp    c00145df <Vm::mainloop2()>

c001464f <Vm::initialise8086()>:
c001464f:	83 ec 0c             	sub    esp,0xc
c0014652:	68 80 00 00 00       	push   0x80
c0014657:	6a 00                	push   0x0
c0014659:	68 19 46 01 c0       	push   0xc0014619
c001465e:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0014664:	e8 b3 f1 ff ff       	call   c001381c <Process::createThread(void (*)(void*), void*, int)>
c0014669:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014670:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014675:	68 00 01 00 00       	push   0x100
c001467a:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001467f:	6a 00                	push   0x0
c0014681:	6a 00                	push   0x0
c0014683:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014689:	e8 96 5c ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001468e:	83 c4 2c             	add    esp,0x2c
c0014691:	c3                   	ret    

c0014692 <Vm::finish8086()>:
c0014692:	53                   	push   ebx
c0014693:	83 ec 08             	sub    esp,0x8
c0014696:	fa                   	cli    
c0014697:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001469d:	80 3d 64 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e64,0x0
c00146a4:	75 15                	jne    c00146bb <Vm::finish8086()+0x29>
c00146a6:	e8 91 f3 ff ff       	call   c0013a3c <schedule()>
c00146ab:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00146b0:	48                   	dec    eax
c00146b1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00146b6:	75 de                	jne    c0014696 <Vm::finish8086()+0x4>
c00146b8:	fb                   	sti    
c00146b9:	eb db                	jmp    c0014696 <Vm::finish8086()+0x4>
c00146bb:	83 ec 0c             	sub    esp,0xc
c00146be:	8b 1d 60 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e60
c00146c4:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c00146ca:	c6 05 64 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e64,0x0
c00146d1:	e8 2a f8 ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c00146d6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	8d 50 ff             	lea    edx,[eax-0x1]
c00146e1:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c00146e7:	85 d2                	test   edx,edx
c00146e9:	75 01                	jne    c00146ec <Vm::finish8086()+0x5a>
c00146eb:	fb                   	sti    
c00146ec:	89 d8                	mov    eax,ebx
c00146ee:	83 c4 08             	add    esp,0x8
c00146f1:	5b                   	pop    ebx
c00146f2:	c3                   	ret    

c00146f3 <Vm::getOutput8086(unsigned char*)>:
c00146f3:	57                   	push   edi
c00146f4:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c00146fa:	56                   	push   esi
c00146fb:	be 80 3e 02 c0       	mov    esi,0xc0023e80
c0014700:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014704:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014706:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c001470b:	5e                   	pop    esi
c001470c:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014716:	5f                   	pop    edi
c0014717:	c3                   	ret    

c0014718 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014718:	55                   	push   ebp
c0014719:	57                   	push   edi
c001471a:	56                   	push   esi
c001471b:	53                   	push   ebx
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014723:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014727:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001472b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001472f:	fa                   	cli    
c0014730:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014736:	80 3d 65 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e65,0x0
c001473d:	75 15                	jne    c0014754 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001473f:	e8 f8 f2 ff ff       	call   c0013a3c <schedule()>
c0014744:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014749:	48                   	dec    eax
c001474a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001474f:	75 de                	jne    c001472f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014751:	fb                   	sti    
c0014752:	eb db                	jmp    c001472f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014754:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014759:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014763:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014767:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001476b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001476f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014773:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014777:	0f b7 ff             	movzx  edi,di
c001477a:	0f b7 f6             	movzx  esi,si
c001477d:	50                   	push   eax
c001477e:	6a 20                	push   0x20
c0014780:	6a 00                	push   0x0
c0014782:	68 80 3e 02 c0       	push   0xc0023e80
c0014787:	e8 64 bd fe ff       	call   c00004f0 <memset>
c001478c:	5a                   	pop    edx
c001478d:	59                   	pop    ecx
c001478e:	57                   	push   edi
c001478f:	56                   	push   esi
c0014790:	e8 2d fe ff ff       	call   c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	89 c7                	mov    edi,eax
c001479a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001479e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147a4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00147a9:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c00147b0:	48                   	dec    eax
c00147b1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00147b6:	75 01                	jne    c00147b9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00147b8:	fb                   	sti    
c00147b9:	83 ec 0c             	sub    esp,0xc
c00147bc:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c00147c2:	e8 39 f7 ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c00147c7:	83 c4 1c             	add    esp,0x1c
c00147ca:	b0 01                	mov    al,0x1
c00147cc:	5b                   	pop    ebx
c00147cd:	5e                   	pop    esi
c00147ce:	5f                   	pop    edi
c00147cf:	5d                   	pop    ebp
c00147d0:	c3                   	ret    

c00147d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00147d1:	55                   	push   ebp
c00147d2:	57                   	push   edi
c00147d3:	56                   	push   esi
c00147d4:	53                   	push   ebx
c00147d5:	83 ec 2c             	sub    esp,0x2c
c00147d8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00147dc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00147e0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00147e4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00147e8:	fa                   	cli    
c00147e9:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00147ef:	0f b6 35 65 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e65
c00147f6:	89 f0                	mov    eax,esi
c00147f8:	84 c0                	test   al,al
c00147fa:	75 1d                	jne    c0014819 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00147fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014800:	e8 37 f2 ff ff       	call   c0013a3c <schedule()>
c0014805:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001480a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001480e:	48                   	dec    eax
c001480f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014814:	75 d2                	jne    c00147e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014816:	fb                   	sti    
c0014817:	eb cf                	jmp    c00147e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014819:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001481e:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014828:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001482c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014830:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014834:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014838:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001483c:	50                   	push   eax
c001483d:	6a 20                	push   0x20
c001483f:	6a 00                	push   0x0
c0014841:	68 80 3e 02 c0       	push   0xc0023e80
c0014846:	e8 a5 bc fe ff       	call   c00004f0 <memset>
c001484b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014852:	e8 02 36 ff ff       	call   c0007e59 <malloc>
c0014857:	83 c4 0c             	add    esp,0xc
c001485a:	89 c3                	mov    ebx,eax
c001485c:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0014862:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014866:	50                   	push   eax
c0014867:	e8 f2 68 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001486c:	83 c4 10             	add    esp,0x10
c001486f:	85 db                	test   ebx,ebx
c0014871:	75 0a                	jne    c001487d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014873:	83 ec 0c             	sub    esp,0xc
c0014876:	68 20 ec 01 c0       	push   0xc001ec20
c001487b:	eb 3e                	jmp    c00148bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001487d:	50                   	push   eax
c001487e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014882:	50                   	push   eax
c0014883:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014887:	50                   	push   eax
c0014888:	53                   	push   ebx
c0014889:	e8 3c 6c ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c001488e:	83 c4 10             	add    esp,0x10
c0014891:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014896:	74 0a                	je     c00148a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014898:	83 ec 0c             	sub    esp,0xc
c001489b:	68 34 ec 01 c0       	push   0xc001ec34
c00148a0:	eb 19                	jmp    c00148bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148a2:	51                   	push   ecx
c00148a3:	51                   	push   ecx
c00148a4:	6a 01                	push   0x1
c00148a6:	53                   	push   ebx
c00148a7:	e8 72 69 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	85 c0                	test   eax,eax
c00148b1:	74 24                	je     c00148d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00148b3:	83 ec 0c             	sub    esp,0xc
c00148b6:	68 4d ec 01 c0       	push   0xc001ec4d
c00148bb:	e8 27 be ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00148c0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	48                   	dec    eax
c00148c9:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00148ce:	85 c0                	test   eax,eax
c00148d0:	75 01                	jne    c00148d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00148d2:	fb                   	sti    
c00148d3:	31 f6                	xor    esi,esi
c00148d5:	eb 58                	jmp    c001492f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00148d7:	0f b7 ed             	movzx  ebp,bp
c00148da:	50                   	push   eax
c00148db:	0f b7 ff             	movzx  edi,di
c00148de:	50                   	push   eax
c00148df:	55                   	push   ebp
c00148e0:	57                   	push   edi
c00148e1:	e8 dc fc ff ff       	call   c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>
c00148e6:	5a                   	pop    edx
c00148e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00148e9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00148ed:	51                   	push   ecx
c00148ee:	50                   	push   eax
c00148ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148f7:	53                   	push   ebx
c00148f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00148fb:	83 c4 14             	add    esp,0x14
c00148fe:	53                   	push   ebx
c00148ff:	e8 78 69 ff ff       	call   c000b27c <File::close()>
c0014904:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014909:	83 c4 10             	add    esp,0x10
c001490c:	48                   	dec    eax
c001490d:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c0014914:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014919:	85 c0                	test   eax,eax
c001491b:	75 01                	jne    c001491e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001491d:	fb                   	sti    
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c0014927:	e8 d4 f5 ff ff       	call   c0013f00 <unblockTask(ThreadControlBlock*)>
c001492c:	83 c4 10             	add    esp,0x10
c001492f:	83 c4 2c             	add    esp,0x2c
c0014932:	89 f0                	mov    eax,esi
c0014934:	5b                   	pop    ebx
c0014935:	5e                   	pop    esi
c0014936:	5f                   	pop    edi
c0014937:	5d                   	pop    ebp
c0014938:	c3                   	ret    

c0014939 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014939:	57                   	push   edi
c001493a:	56                   	push   esi
c001493b:	53                   	push   ebx
c001493c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014944:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014948:	83 e8 06             	sub    eax,0x6
c001494b:	0f b7 c0             	movzx  eax,ax
c001494e:	50                   	push   eax
c001494f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014954:	50                   	push   eax
c0014955:	e8 68 fc ff ff       	call   c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>
c001495a:	5a                   	pop    edx
c001495b:	5e                   	pop    esi
c001495c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001495f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014962:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014968:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001496b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001496e:	83 c2 02             	add    edx,0x2
c0014971:	66 89 10             	mov    WORD PTR [eax],dx
c0014974:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014977:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001497b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001497e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014982:	89 d6                	mov    esi,edx
c0014984:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001498a:	66 81 e6 ff fd       	and    si,0xfdff
c001498f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014993:	74 07                	je     c001499c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014995:	89 d6                	mov    esi,edx
c0014997:	66 81 ce 00 02       	or     si,0x200
c001499c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149a5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00149a9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00149b1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00149b4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00149bc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00149bf:	5b                   	pop    ebx
c00149c0:	5e                   	pop    esi
c00149c1:	5f                   	pop    edi
c00149c2:	c3                   	ret    

c00149c3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00149c3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149c8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149cd:	c1 e0 04             	shl    eax,0x4
c00149d0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00149d3:	c3                   	ret    

c00149d4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00149d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149de:	c1 e0 04             	shl    eax,0x4
c00149e1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00149e5:	c3                   	ret    

c00149e6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00149e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149f0:	c1 e0 04             	shl    eax,0x4
c00149f3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00149f6:	c3                   	ret    

c00149f7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00149f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a01:	c1 e0 04             	shl    eax,0x4
c0014a04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a08:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a0b:	c3                   	ret    

c0014a0c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a16:	c1 e0 04             	shl    eax,0x4
c0014a19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a1d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a21:	c3                   	ret    

c0014a22 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a22:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a27:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a2c:	c1 e0 04             	shl    eax,0x4
c0014a2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a33:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a36:	c3                   	ret    

c0014a37 <Vm::faultHandler(regs*)>:
c0014a37:	55                   	push   ebp
c0014a38:	57                   	push   edi
c0014a39:	56                   	push   esi
c0014a3a:	53                   	push   ebx
c0014a3b:	83 ec 1c             	sub    esp,0x1c
c0014a3e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a42:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a45:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a49:	0f b7 f8             	movzx  edi,ax
c0014a4c:	52                   	push   edx
c0014a4d:	0f b7 c0             	movzx  eax,ax
c0014a50:	50                   	push   eax
c0014a51:	e8 6c fb ff ff       	call   c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a56:	5a                   	pop    edx
c0014a57:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014a5a:	59                   	pop    ecx
c0014a5b:	89 c1                	mov    ecx,eax
c0014a5d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a6d:	0f b7 c5             	movzx  eax,bp
c0014a70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a74:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014a78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a7c:	e8 41 fb ff ff       	call   c00145c2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a81:	5e                   	pop    esi
c0014a82:	be 06 00 00 00       	mov    esi,0x6
c0014a87:	5a                   	pop    edx
c0014a88:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014a8d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014a92:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014a95:	80 fa 9d             	cmp    dl,0x9d
c0014a98:	0f 84 2c 02 00 00    	je     c0014cca <Vm::faultHandler(regs*)+0x293>
c0014a9e:	0f 87 91 00 00 00    	ja     c0014b35 <Vm::faultHandler(regs*)+0xfe>
c0014aa4:	80 fa 66             	cmp    dl,0x66
c0014aa7:	0f 84 98 01 00 00    	je     c0014c45 <Vm::faultHandler(regs*)+0x20e>
c0014aad:	77 47                	ja     c0014af6 <Vm::faultHandler(regs*)+0xbf>
c0014aaf:	80 fa 36             	cmp    dl,0x36
c0014ab2:	0f 84 80 01 00 00    	je     c0014c38 <Vm::faultHandler(regs*)+0x201>
c0014ab8:	77 1a                	ja     c0014ad4 <Vm::faultHandler(regs*)+0x9d>
c0014aba:	80 fa 26             	cmp    dl,0x26
c0014abd:	0f 84 4e 01 00 00    	je     c0014c11 <Vm::faultHandler(regs*)+0x1da>
c0014ac3:	80 fa 2e             	cmp    dl,0x2e
c0014ac6:	0f 85 e2 05 00 00    	jne    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014acc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014acf:	31 f6                	xor    esi,esi
c0014ad1:	41                   	inc    ecx
c0014ad2:	eb be                	jmp    c0014a92 <Vm::faultHandler(regs*)+0x5b>
c0014ad4:	80 fa 64             	cmp    dl,0x64
c0014ad7:	0f 84 41 01 00 00    	je     c0014c1e <Vm::faultHandler(regs*)+0x1e7>
c0014add:	0f 87 48 01 00 00    	ja     c0014c2b <Vm::faultHandler(regs*)+0x1f4>
c0014ae3:	80 fa 3e             	cmp    dl,0x3e
c0014ae6:	0f 85 c2 05 00 00    	jne    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014aec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aef:	be 01 00 00 00       	mov    esi,0x1
c0014af4:	eb db                	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014af6:	80 fa 6d             	cmp    dl,0x6d
c0014af9:	0f 84 ec 02 00 00    	je     c0014deb <Vm::faultHandler(regs*)+0x3b4>
c0014aff:	77 17                	ja     c0014b18 <Vm::faultHandler(regs*)+0xe1>
c0014b01:	80 fa 67             	cmp    dl,0x67
c0014b04:	0f 84 48 01 00 00    	je     c0014c52 <Vm::faultHandler(regs*)+0x21b>
c0014b0a:	80 fa 6c             	cmp    dl,0x6c
c0014b0d:	0f 84 69 02 00 00    	je     c0014d7c <Vm::faultHandler(regs*)+0x345>
c0014b13:	e9 96 05 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014b18:	80 fa 6f             	cmp    dl,0x6f
c0014b1b:	0f 84 f4 03 00 00    	je     c0014f15 <Vm::faultHandler(regs*)+0x4de>
c0014b21:	0f 82 59 03 00 00    	jb     c0014e80 <Vm::faultHandler(regs*)+0x449>
c0014b27:	80 fa 9c             	cmp    dl,0x9c
c0014b2a:	0f 84 2f 01 00 00    	je     c0014c5f <Vm::faultHandler(regs*)+0x228>
c0014b30:	e9 79 05 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014b35:	80 fa ec             	cmp    dl,0xec
c0014b38:	0f 84 14 05 00 00    	je     c0015052 <Vm::faultHandler(regs*)+0x61b>
c0014b3e:	77 7b                	ja     c0014bbb <Vm::faultHandler(regs*)+0x184>
c0014b40:	80 fa e4             	cmp    dl,0xe4
c0014b43:	0f 84 93 04 00 00    	je     c0014fdc <Vm::faultHandler(regs*)+0x5a5>
c0014b49:	77 53                	ja     c0014b9e <Vm::faultHandler(regs*)+0x167>
c0014b4b:	80 fa cd             	cmp    dl,0xcd
c0014b4e:	0f 84 d9 01 00 00    	je     c0014d2d <Vm::faultHandler(regs*)+0x2f6>
c0014b54:	80 fa cf             	cmp    dl,0xcf
c0014b57:	0f 85 51 05 00 00    	jne    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014b5d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b60:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014b63:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014b67:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014b6a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014b6e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b74:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b77:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b7b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b81:	66 c1 e8 09          	shr    ax,0x9
c0014b85:	83 e0 01             	and    eax,0x1
c0014b88:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b8b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b8e:	83 c0 06             	add    eax,0x6
c0014b91:	25 ff ff 00 00       	and    eax,0xffff
c0014b96:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b99:	e9 0c 05 00 00       	jmp    c00150aa <Vm::faultHandler(regs*)+0x673>
c0014b9e:	80 fa e6             	cmp    dl,0xe6
c0014ba1:	0f 84 7f 04 00 00    	je     c0015026 <Vm::faultHandler(regs*)+0x5ef>
c0014ba7:	0f 82 4b 04 00 00    	jb     c0014ff8 <Vm::faultHandler(regs*)+0x5c1>
c0014bad:	80 fa e7             	cmp    dl,0xe7
c0014bb0:	0f 84 87 04 00 00    	je     c001503d <Vm::faultHandler(regs*)+0x606>
c0014bb6:	e9 f3 04 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014bbb:	80 fa ef             	cmp    dl,0xef
c0014bbe:	0f 84 d1 04 00 00    	je     c0015095 <Vm::faultHandler(regs*)+0x65e>
c0014bc4:	77 28                	ja     c0014bee <Vm::faultHandler(regs*)+0x1b7>
c0014bc6:	80 fa ed             	cmp    dl,0xed
c0014bc9:	0f 84 9f 04 00 00    	je     c001506e <Vm::faultHandler(regs*)+0x637>
c0014bcf:	80 fa ee             	cmp    dl,0xee
c0014bd2:	0f 85 d6 04 00 00    	jne    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014bd8:	50                   	push   eax
c0014bd9:	50                   	push   eax
c0014bda:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014bde:	50                   	push   eax
c0014bdf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014be3:	50                   	push   eax
c0014be4:	e8 a3 f9 ff ff       	call   c001458c <Vm::outbv(unsigned short, unsigned char)>
c0014be9:	e9 9f 04 00 00       	jmp    c001508d <Vm::faultHandler(regs*)+0x656>
c0014bee:	80 fa fa             	cmp    dl,0xfa
c0014bf1:	0f 84 69 01 00 00    	je     c0014d60 <Vm::faultHandler(regs*)+0x329>
c0014bf7:	80 fa fb             	cmp    dl,0xfb
c0014bfa:	0f 84 6e 01 00 00    	je     c0014d6e <Vm::faultHandler(regs*)+0x337>
c0014c00:	80 fa f3             	cmp    dl,0xf3
c0014c03:	0f 85 a5 04 00 00    	jne    c00150ae <Vm::faultHandler(regs*)+0x677>
c0014c09:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c0c:	e9 c0 fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c11:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c14:	be 02 00 00 00       	mov    esi,0x2
c0014c19:	e9 b3 fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c21:	be 03 00 00 00       	mov    esi,0x3
c0014c26:	e9 a6 fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c2b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c2e:	be 04 00 00 00       	mov    esi,0x4
c0014c33:	e9 99 fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c38:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c3b:	be 05 00 00 00       	mov    esi,0x5
c0014c40:	e9 8c fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c48:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014c4d:	e9 7f fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c52:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c55:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014c5a:	e9 72 fe ff ff       	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x9a>
c0014c5f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014c62:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014c66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c6b:	74 30                	je     c0014c9d <Vm::faultHandler(regs*)+0x266>
c0014c6d:	83 e9 04             	sub    ecx,0x4
c0014c70:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014c76:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014c7c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014c7f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c82:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c88:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014c8c:	0f 84 15 04 00 00    	je     c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014c92:	80 ce 02             	or     dh,0x2
c0014c95:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c98:	e9 0a 04 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014c9d:	83 e9 02             	sub    ecx,0x2
c0014ca0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ca6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014ca9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cad:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cb3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cb7:	74 05                	je     c0014cbe <Vm::faultHandler(regs*)+0x287>
c0014cb9:	80 ce 02             	or     dh,0x2
c0014cbc:	eb 03                	jmp    c0014cc1 <Vm::faultHandler(regs*)+0x28a>
c0014cbe:	80 e6 fd             	and    dh,0xfd
c0014cc1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cc5:	e9 dd 03 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014cca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ccf:	74 2a                	je     c0014cfb <Vm::faultHandler(regs*)+0x2c4>
c0014cd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cd3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cd9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014cdf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cea:	c1 e8 09             	shr    eax,0x9
c0014ced:	83 e0 01             	and    eax,0x1
c0014cf0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014cf3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014cf6:	83 c0 04             	add    eax,0x4
c0014cf9:	eb 25                	jmp    c0014d20 <Vm::faultHandler(regs*)+0x2e9>
c0014cfb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014cfe:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d07:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d0a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d10:	66 c1 e8 09          	shr    ax,0x9
c0014d14:	83 e0 01             	and    eax,0x1
c0014d17:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d1a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d1d:	83 c0 02             	add    eax,0x2
c0014d20:	25 ff ff 00 00       	and    eax,0xffff
c0014d25:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d28:	e9 7a 03 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014d2d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d31:	3c ee                	cmp    al,0xee
c0014d33:	75 10                	jne    c0014d45 <Vm::faultHandler(regs*)+0x30e>
c0014d35:	83 ec 0c             	sub    esp,0xc
c0014d38:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d3b:	e8 e9 f8 ff ff       	call   c0014629 <Vm::mainloop3(unsigned long)>
c0014d40:	e9 4b 03 00 00       	jmp    c0015090 <Vm::faultHandler(regs*)+0x659>
c0014d45:	83 ec 0c             	sub    esp,0xc
c0014d48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d50:	51                   	push   ecx
c0014d51:	50                   	push   eax
c0014d52:	53                   	push   ebx
c0014d53:	e8 e1 fb ff ff       	call   c0014939 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014d58:	83 c4 20             	add    esp,0x20
c0014d5b:	e9 4a 03 00 00       	jmp    c00150aa <Vm::faultHandler(regs*)+0x673>
c0014d60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d65:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014d69:	e9 39 03 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014d6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d73:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014d77:	e9 2b 03 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014d7c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014d7f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d84:	74 2b                	je     c0014db1 <Vm::faultHandler(regs*)+0x37a>
c0014d86:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014d8d:	76 22                	jbe    c0014db1 <Vm::faultHandler(regs*)+0x37a>
c0014d8f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d93:	50                   	push   eax
c0014d94:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d98:	50                   	push   eax
c0014d99:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d9d:	50                   	push   eax
c0014d9e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014da2:	50                   	push   eax
c0014da3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014da7:	50                   	push   eax
c0014da8:	6a 6c                	push   0x6c
c0014daa:	6a 6c                	push   0x6c
c0014dac:	e9 b9 01 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x533>
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014db8:	0f b7 f6             	movzx  esi,si
c0014dbb:	50                   	push   eax
c0014dbc:	e8 b8 f7 ff ff       	call   c0014579 <Vm::inbv(unsigned short)>
c0014dc1:	83 c4 0c             	add    esp,0xc
c0014dc4:	0f b6 c0             	movzx  eax,al
c0014dc7:	50                   	push   eax
c0014dc8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014dcc:	50                   	push   eax
c0014dcd:	56                   	push   esi
c0014dce:	e8 24 fc ff ff       	call   c00149f7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014dd3:	83 c4 10             	add    esp,0x10
c0014dd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014dd9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ddd:	74 03                	je     c0014de2 <Vm::faultHandler(regs*)+0x3ab>
c0014ddf:	48                   	dec    eax
c0014de0:	eb 01                	jmp    c0014de3 <Vm::faultHandler(regs*)+0x3ac>
c0014de2:	40                   	inc    eax
c0014de3:	0f b7 c0             	movzx  eax,ax
c0014de6:	e9 8d 00 00 00       	jmp    c0014e78 <Vm::faultHandler(regs*)+0x441>
c0014deb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014df1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014df6:	74 29                	je     c0014e21 <Vm::faultHandler(regs*)+0x3ea>
c0014df8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014dfd:	76 22                	jbe    c0014e21 <Vm::faultHandler(regs*)+0x3ea>
c0014dff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e03:	50                   	push   eax
c0014e04:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e08:	50                   	push   eax
c0014e09:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e0d:	50                   	push   eax
c0014e0e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e12:	50                   	push   eax
c0014e13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e17:	50                   	push   eax
c0014e18:	6a 6d                	push   0x6d
c0014e1a:	6a 6d                	push   0x6d
c0014e1c:	e9 49 01 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x533>
c0014e21:	0f b7 c8             	movzx  ecx,ax
c0014e24:	0f b7 f6             	movzx  esi,si
c0014e27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e2f:	74 20                	je     c0014e51 <Vm::faultHandler(regs*)+0x41a>
c0014e31:	ed                   	in     eax,dx
c0014e32:	55                   	push   ebp
c0014e33:	50                   	push   eax
c0014e34:	51                   	push   ecx
c0014e35:	56                   	push   esi
c0014e36:	e8 e7 fb ff ff       	call   c0014a22 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e45:	74 05                	je     c0014e4c <Vm::faultHandler(regs*)+0x415>
c0014e47:	83 e8 04             	sub    eax,0x4
c0014e4a:	eb 27                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x43c>
c0014e4c:	83 c0 04             	add    eax,0x4
c0014e4f:	eb 22                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x43c>
c0014e51:	66 ed                	in     ax,dx
c0014e53:	0f b7 c0             	movzx  eax,ax
c0014e56:	57                   	push   edi
c0014e57:	50                   	push   eax
c0014e58:	51                   	push   ecx
c0014e59:	56                   	push   esi
c0014e5a:	e8 ad fb ff ff       	call   c0014a0c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e65:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e69:	74 05                	je     c0014e70 <Vm::faultHandler(regs*)+0x439>
c0014e6b:	83 e8 02             	sub    eax,0x2
c0014e6e:	eb 03                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x43c>
c0014e70:	83 c0 02             	add    eax,0x2
c0014e73:	25 ff ff 00 00       	and    eax,0xffff
c0014e78:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014e7b:	e9 27 02 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014e80:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e83:	3c 05                	cmp    al,0x5
c0014e85:	77 24                	ja     c0014eab <Vm::faultHandler(regs*)+0x474>
c0014e87:	0f b6 c0             	movzx  eax,al
c0014e8a:	ff 24 85 c0 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1340]
c0014e91:	0f b7 fd             	movzx  edi,bp
c0014e94:	eb 15                	jmp    c0014eab <Vm::faultHandler(regs*)+0x474>
c0014e96:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014e9a:	eb 0f                	jmp    c0014eab <Vm::faultHandler(regs*)+0x474>
c0014e9c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ea0:	eb 09                	jmp    c0014eab <Vm::faultHandler(regs*)+0x474>
c0014ea2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014ea6:	eb 03                	jmp    c0014eab <Vm::faultHandler(regs*)+0x474>
c0014ea8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014eab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014eae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014eb3:	74 29                	je     c0014ede <Vm::faultHandler(regs*)+0x4a7>
c0014eb5:	3d ff ff 00 00       	cmp    eax,0xffff
c0014eba:	76 22                	jbe    c0014ede <Vm::faultHandler(regs*)+0x4a7>
c0014ebc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ec0:	50                   	push   eax
c0014ec1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ec5:	50                   	push   eax
c0014ec6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014eca:	50                   	push   eax
c0014ecb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ecf:	50                   	push   eax
c0014ed0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ed4:	50                   	push   eax
c0014ed5:	6a 6e                	push   0x6e
c0014ed7:	6a 6e                	push   0x6e
c0014ed9:	e9 8c 00 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x533>
c0014ede:	0f b7 c0             	movzx  eax,ax
c0014ee1:	52                   	push   edx
c0014ee2:	52                   	push   edx
c0014ee3:	50                   	push   eax
c0014ee4:	57                   	push   edi
c0014ee5:	e8 d9 fa ff ff       	call   c00149c3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014eea:	59                   	pop    ecx
c0014eeb:	0f b6 c0             	movzx  eax,al
c0014eee:	5e                   	pop    esi
c0014eef:	50                   	push   eax
c0014ef0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ef4:	50                   	push   eax
c0014ef5:	e8 92 f6 ff ff       	call   c001458c <Vm::outbv(unsigned short, unsigned char)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f00:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f04:	74 03                	je     c0014f09 <Vm::faultHandler(regs*)+0x4d2>
c0014f06:	48                   	dec    eax
c0014f07:	eb 01                	jmp    c0014f0a <Vm::faultHandler(regs*)+0x4d3>
c0014f09:	40                   	inc    eax
c0014f0a:	0f b7 c0             	movzx  eax,ax
c0014f0d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f10:	e9 92 01 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014f15:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f18:	3c 05                	cmp    al,0x5
c0014f1a:	77 1f                	ja     c0014f3b <Vm::faultHandler(regs*)+0x504>
c0014f1c:	0f b6 c0             	movzx  eax,al
c0014f1f:	ff 24 85 d8 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1328]
c0014f26:	89 ef                	mov    edi,ebp
c0014f28:	eb 11                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x504>
c0014f2a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f2d:	eb 0c                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x504>
c0014f2f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f32:	eb 07                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x504>
c0014f34:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f37:	eb 02                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x504>
c0014f39:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f3b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f3e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f43:	74 37                	je     c0014f7c <Vm::faultHandler(regs*)+0x545>
c0014f45:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f4b:	76 2f                	jbe    c0014f7c <Vm::faultHandler(regs*)+0x545>
c0014f4d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f51:	50                   	push   eax
c0014f52:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f56:	50                   	push   eax
c0014f57:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f5b:	50                   	push   eax
c0014f5c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f60:	50                   	push   eax
c0014f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f65:	50                   	push   eax
c0014f66:	6a 6f                	push   0x6f
c0014f68:	6a 6f                	push   0x6f
c0014f6a:	68 66 ec 01 c0       	push   0xc001ec66
c0014f6f:	e8 74 5c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0014f74:	83 c4 20             	add    esp,0x20
c0014f77:	e9 86 01 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x6cb>
c0014f7c:	0f b7 d7             	movzx  edx,di
c0014f7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014f82:	0f b7 c6             	movzx  eax,si
c0014f85:	81 e1 00 04 00 00    	and    ecx,0x400
c0014f8b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014f8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f93:	74 1d                	je     c0014fb2 <Vm::faultHandler(regs*)+0x57b>
c0014f95:	55                   	push   ebp
c0014f96:	55                   	push   ebp
c0014f97:	50                   	push   eax
c0014f98:	52                   	push   edx
c0014f99:	e8 48 fa ff ff       	call   c00149e6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	89 fa                	mov    edx,edi
c0014fa3:	ef                   	out    dx,eax
c0014fa4:	85 c9                	test   ecx,ecx
c0014fa6:	74 05                	je     c0014fad <Vm::faultHandler(regs*)+0x576>
c0014fa8:	83 ee 04             	sub    esi,0x4
c0014fab:	eb 21                	jmp    c0014fce <Vm::faultHandler(regs*)+0x597>
c0014fad:	83 c6 04             	add    esi,0x4
c0014fb0:	eb 1c                	jmp    c0014fce <Vm::faultHandler(regs*)+0x597>
c0014fb2:	55                   	push   ebp
c0014fb3:	55                   	push   ebp
c0014fb4:	50                   	push   eax
c0014fb5:	52                   	push   edx
c0014fb6:	e8 19 fa ff ff       	call   c00149d4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	89 fa                	mov    edx,edi
c0014fc0:	66 ef                	out    dx,ax
c0014fc2:	85 c9                	test   ecx,ecx
c0014fc4:	74 05                	je     c0014fcb <Vm::faultHandler(regs*)+0x594>
c0014fc6:	83 ee 02             	sub    esi,0x2
c0014fc9:	eb 03                	jmp    c0014fce <Vm::faultHandler(regs*)+0x597>
c0014fcb:	83 c6 02             	add    esi,0x2
c0014fce:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014fd4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014fd7:	e9 cb 00 00 00       	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c0014fdc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fea:	50                   	push   eax
c0014feb:	e8 89 f5 ff ff       	call   c0014579 <Vm::inbv(unsigned short)>
c0014ff0:	0f b6 c0             	movzx  eax,al
c0014ff3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ff6:	eb 3f                	jmp    c0015037 <Vm::faultHandler(regs*)+0x600>
c0014ff8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ffd:	74 07                	je     c0015006 <Vm::faultHandler(regs*)+0x5cf>
c0014fff:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015003:	ed                   	in     eax,dx
c0015004:	eb 14                	jmp    c001501a <Vm::faultHandler(regs*)+0x5e3>
c0015006:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015009:	66 31 f6             	xor    si,si
c001500c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001500f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015013:	66 ed                	in     ax,dx
c0015015:	0f b7 c0             	movzx  eax,ax
c0015018:	09 f0                	or     eax,esi
c001501a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001501d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015021:	e9 84 00 00 00       	jmp    c00150aa <Vm::faultHandler(regs*)+0x673>
c0015026:	52                   	push   edx
c0015027:	52                   	push   edx
c0015028:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001502c:	50                   	push   eax
c001502d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015031:	50                   	push   eax
c0015032:	e8 55 f5 ff ff       	call   c001458c <Vm::outbv(unsigned short, unsigned char)>
c0015037:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001503b:	eb 53                	jmp    c0015090 <Vm::faultHandler(regs*)+0x659>
c001503d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015040:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015044:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015049:	74 03                	je     c001504e <Vm::faultHandler(regs*)+0x617>
c001504b:	ef                   	out    dx,eax
c001504c:	eb cf                	jmp    c001501d <Vm::faultHandler(regs*)+0x5e6>
c001504e:	66 ef                	out    dx,ax
c0015050:	eb cb                	jmp    c001501d <Vm::faultHandler(regs*)+0x5e6>
c0015052:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015059:	83 ec 0c             	sub    esp,0xc
c001505c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015060:	50                   	push   eax
c0015061:	e8 13 f5 ff ff       	call   c0014579 <Vm::inbv(unsigned short)>
c0015066:	0f b6 c0             	movzx  eax,al
c0015069:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001506c:	eb 1f                	jmp    c001508d <Vm::faultHandler(regs*)+0x656>
c001506e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015071:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015076:	74 03                	je     c001507b <Vm::faultHandler(regs*)+0x644>
c0015078:	ed                   	in     eax,dx
c0015079:	eb 0d                	jmp    c0015088 <Vm::faultHandler(regs*)+0x651>
c001507b:	66 ed                	in     ax,dx
c001507d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015080:	0f b7 c0             	movzx  eax,ax
c0015083:	66 31 d2             	xor    dx,dx
c0015086:	09 d0                	or     eax,edx
c0015088:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001508b:	eb 1a                	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c001508d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	eb 15                	jmp    c00150aa <Vm::faultHandler(regs*)+0x673>
c0015095:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015098:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001509b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150a0:	74 03                	je     c00150a5 <Vm::faultHandler(regs*)+0x66e>
c00150a2:	ef                   	out    dx,eax
c00150a3:	eb 02                	jmp    c00150a7 <Vm::faultHandler(regs*)+0x670>
c00150a5:	66 ef                	out    dx,ax
c00150a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150aa:	b0 01                	mov    al,0x1
c00150ac:	eb 56                	jmp    c0015104 <Vm::faultHandler(regs*)+0x6cd>
c00150ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00150b2:	50                   	push   eax
c00150b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00150b7:	50                   	push   eax
c00150b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00150bc:	50                   	push   eax
c00150bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00150c1:	50                   	push   eax
c00150c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00150c6:	50                   	push   eax
c00150c7:	52                   	push   edx
c00150c8:	52                   	push   edx
c00150c9:	68 93 ec 01 c0       	push   0xc001ec93
c00150ce:	e8 15 5b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00150d3:	83 c4 20             	add    esp,0x20
c00150d6:	83 ec 0c             	sub    esp,0xc
c00150d9:	6a 60                	push   0x60
c00150db:	e8 99 f4 ff ff       	call   c0014579 <Vm::inbv(unsigned short)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	3c 1c                	cmp    al,0x1c
c00150e5:	74 04                	je     c00150eb <Vm::faultHandler(regs*)+0x6b4>
c00150e7:	3c 5a                	cmp    al,0x5a
c00150e9:	75 eb                	jne    c00150d6 <Vm::faultHandler(regs*)+0x69f>
c00150eb:	3c 5a                	cmp    al,0x5a
c00150ed:	74 04                	je     c00150f3 <Vm::faultHandler(regs*)+0x6bc>
c00150ef:	3c 1c                	cmp    al,0x1c
c00150f1:	75 0f                	jne    c0015102 <Vm::faultHandler(regs*)+0x6cb>
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	6a 60                	push   0x60
c00150f8:	e8 7c f4 ff ff       	call   c0014579 <Vm::inbv(unsigned short)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	eb e9                	jmp    c00150eb <Vm::faultHandler(regs*)+0x6b4>
c0015102:	31 c0                	xor    eax,eax
c0015104:	83 c4 1c             	add    esp,0x1c
c0015107:	5b                   	pop    ebx
c0015108:	5e                   	pop    esi
c0015109:	5f                   	pop    edi
c001510a:	5d                   	pop    ebp
c001510b:	c3                   	ret    

c001510c <noCopro(unsigned long)>:
c001510c:	c3                   	ret    

c001510d <nmiHandler(regs*, void*)>:
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015115:	83 ec 0c             	sub    esp,0xc
c0015118:	50                   	push   eax
c0015119:	e8 60 25 ff ff       	call   c000767e <Computer::handleNMI()>
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	90                   	nop
c0015122:	83 c4 0c             	add    esp,0xc
c0015125:	c3                   	ret    

c0015126 <doubleFault(regs*, void*)>:
c0015126:	55                   	push   ebp
c0015127:	89 e5                	mov    ebp,esp
c0015129:	83 ec 08             	sub    esp,0x8
c001512c:	83 ec 0c             	sub    esp,0xc
c001512f:	68 f0 ec 01 c0       	push   0xc001ecf0
c0015134:	e8 ae b5 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	90                   	nop
c001513d:	c9                   	leave  
c001513e:	c3                   	ret    

c001513f <displayDebugInfo(regs*)>:
c001513f:	83 ec 1c             	sub    esp,0x1c
c0015142:	0f 20 c0             	mov    eax,cr0
c0015145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015149:	0f 20 d0             	mov    eax,cr2
c001514c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015150:	0f 20 d8             	mov    eax,cr3
c0015153:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015157:	0f 20 e0             	mov    eax,cr4
c001515a:	89 04 24             	mov    DWORD PTR [esp],eax
c001515d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015161:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015164:	83 ec 08             	sub    esp,0x8
c0015167:	50                   	push   eax
c0015168:	68 0c ed 01 c0       	push   0xc001ed0c
c001516d:	e8 76 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015179:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001517c:	83 ec 08             	sub    esp,0x8
c001517f:	50                   	push   eax
c0015180:	68 fd ec 01 c0       	push   0xc001ecfd
c0015185:	e8 5e 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015191:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015194:	83 ec 08             	sub    esp,0x8
c0015197:	50                   	push   eax
c0015198:	68 08 ed 01 c0       	push   0xc001ed08
c001519d:	e8 46 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ac:	83 ec 08             	sub    esp,0x8
c00151af:	50                   	push   eax
c00151b0:	68 17 ed 01 c0       	push   0xc001ed17
c00151b5:	e8 2e 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00151c4:	83 ec 08             	sub    esp,0x8
c00151c7:	50                   	push   eax
c00151c8:	68 22 ed 01 c0       	push   0xc001ed22
c00151cd:	e8 16 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	83 ec 08             	sub    esp,0x8
c00151d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151dc:	68 2d ed 01 c0       	push   0xc001ed2d
c00151e1:	e8 02 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	83 ec 08             	sub    esp,0x8
c00151ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151f0:	68 38 ed 01 c0       	push   0xc001ed38
c00151f5:	e8 ee 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015202:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015208:	83 ec 0c             	sub    esp,0xc
c001520b:	50                   	push   eax
c001520c:	e8 78 39 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c0015211:	83 c4 10             	add    esp,0x10
c0015214:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015219:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001521f:	83 ec 08             	sub    esp,0x8
c0015222:	68 43 ed 01 c0       	push   0xc001ed43
c0015227:	50                   	push   eax
c0015228:	e8 9b 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015235:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001523b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015240:	8b 12                	mov    edx,DWORD PTR [edx]
c0015242:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015245:	83 c2 0c             	add    edx,0xc
c0015248:	83 ec 08             	sub    esp,0x8
c001524b:	52                   	push   edx
c001524c:	50                   	push   eax
c001524d:	e8 76 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001525a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015260:	83 ec 08             	sub    esp,0x8
c0015263:	68 4c ed 01 c0       	push   0xc001ed4c
c0015268:	50                   	push   eax
c0015269:	e8 5a 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015276:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001527c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015280:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015283:	83 ec 08             	sub    esp,0x8
c0015286:	52                   	push   edx
c0015287:	50                   	push   eax
c0015288:	e8 f5 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015295:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529b:	83 ec 08             	sub    esp,0x8
c001529e:	68 54 ed 01 c0       	push   0xc001ed54
c00152a3:	50                   	push   eax
c00152a4:	e8 1f 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152a9:	83 c4 10             	add    esp,0x10
c00152ac:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152bb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00152be:	83 ec 08             	sub    esp,0x8
c00152c1:	52                   	push   edx
c00152c2:	50                   	push   eax
c00152c3:	e8 ba 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d6:	83 ec 08             	sub    esp,0x8
c00152d9:	68 5c ed 01 c0       	push   0xc001ed5c
c00152de:	50                   	push   eax
c00152df:	e8 e4 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152f6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00152f9:	83 ec 08             	sub    esp,0x8
c00152fc:	52                   	push   edx
c00152fd:	50                   	push   eax
c00152fe:	e8 7f 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001530b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015311:	83 ec 08             	sub    esp,0x8
c0015314:	68 64 ed 01 c0       	push   0xc001ed64
c0015319:	50                   	push   eax
c001531a:	e8 a9 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001531f:	83 c4 10             	add    esp,0x10
c0015322:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015327:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015331:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015334:	83 ec 08             	sub    esp,0x8
c0015337:	52                   	push   edx
c0015338:	50                   	push   eax
c0015339:	e8 44 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015346:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001534c:	83 ec 08             	sub    esp,0x8
c001534f:	68 6c ed 01 c0       	push   0xc001ed6c
c0015354:	50                   	push   eax
c0015355:	e8 6e 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015362:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015368:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001536c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001536f:	83 ec 08             	sub    esp,0x8
c0015372:	52                   	push   edx
c0015373:	50                   	push   eax
c0015374:	e8 09 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015381:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015387:	83 ec 08             	sub    esp,0x8
c001538a:	68 74 ed 01 c0       	push   0xc001ed74
c001538f:	50                   	push   eax
c0015390:	e8 33 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001539d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153a7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00153aa:	83 ec 08             	sub    esp,0x8
c00153ad:	52                   	push   edx
c00153ae:	50                   	push   eax
c00153af:	e8 ce 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153c2:	83 ec 08             	sub    esp,0x8
c00153c5:	68 7c ed 01 c0       	push   0xc001ed7c
c00153ca:	50                   	push   eax
c00153cb:	e8 f8 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153de:	83 ec 08             	sub    esp,0x8
c00153e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153e5:	50                   	push   eax
c00153e6:	e8 97 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	68 85 ed 01 c0       	push   0xc001ed85
c0015401:	50                   	push   eax
c0015402:	e8 c1 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001540f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015415:	83 ec 08             	sub    esp,0x8
c0015418:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001541c:	50                   	push   eax
c001541d:	e8 60 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001542a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015430:	83 ec 08             	sub    esp,0x8
c0015433:	68 8d ed 01 c0       	push   0xc001ed8d
c0015438:	50                   	push   eax
c0015439:	e8 8a 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015446:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001544c:	83 ec 08             	sub    esp,0x8
c001544f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015453:	50                   	push   eax
c0015454:	e8 29 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	fa                   	cli    
c001545d:	f4                   	hlt    
c001545e:	eb fe                	jmp    c001545e <displayDebugInfo(regs*)+0x31f>

c0015460 <displayProgramFault(char const*)>:
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	83 ec 0c             	sub    esp,0xc
c0015466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001546a:	e8 79 57 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015477:	8b 00                	mov    eax,DWORD PTR [eax]
c0015479:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001547c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015482:	85 c0                	test   eax,eax
c0015484:	74 21                	je     c00154a7 <displayProgramFault(char const*)+0x47>
c0015486:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001548b:	8b 00                	mov    eax,DWORD PTR [eax]
c001548d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015490:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015496:	6a 04                	push   0x4
c0015498:	6a 0f                	push   0xf
c001549a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001549e:	50                   	push   eax
c001549f:	e8 96 3a ff ff       	call   c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	90                   	nop
c00154a8:	83 c4 0c             	add    esp,0xc
c00154ab:	c3                   	ret    

c00154ac <gpFault(regs*, void*)>:
c00154ac:	83 ec 1c             	sub    esp,0x1c
c00154af:	c7 05 b0 3e 02 c0 37 4a 01 c0 	mov    DWORD PTR ds:0xc0023eb0,0xc0014a37
c00154b9:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00154be:	85 c0                	test   eax,eax
c00154c0:	74 1c                	je     c00154de <gpFault(regs*, void*)+0x32>
c00154c2:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154ce:	ff d0                	call   eax
c00154d0:	83 c4 10             	add    esp,0x10
c00154d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00154d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00154dc:	75 2e                	jne    c001550c <gpFault(regs*, void*)+0x60>
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154e5:	e8 55 fc ff ff       	call   c001513f <displayDebugInfo(regs*)>
c00154ea:	83 c4 10             	add    esp,0x10
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	68 95 ed 01 c0       	push   0xc001ed95
c00154f5:	e8 66 ff ff ff       	call   c0015460 <displayProgramFault(char const*)>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	6a 00                	push   0x0
c0015502:	e8 25 ef ff ff       	call   c001442c <Thr::terminateFromIRQ(int)>
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	eb 01                	jmp    c001550d <gpFault(regs*, void*)+0x61>
c001550c:	90                   	nop
c001550d:	83 c4 1c             	add    esp,0x1c
c0015510:	c3                   	ret    

c0015511 <pgFault(regs*, void*)>:
c0015511:	83 ec 1c             	sub    esp,0x1c
c0015514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015518:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001551b:	0f 20 d0             	mov    eax,cr2
c001551e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015526:	83 ec 04             	sub    esp,0x4
c0015529:	52                   	push   edx
c001552a:	50                   	push   eax
c001552b:	68 00 ee 01 c0       	push   0xc001ee00
c0015530:	e8 b3 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015542:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015548:	0f 20 d2             	mov    edx,cr2
c001554b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001554f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015553:	83 ec 08             	sub    esp,0x8
c0015556:	52                   	push   edx
c0015557:	50                   	push   eax
c0015558:	e8 bd 52 ff ff       	call   c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>
c001555d:	83 c4 10             	add    esp,0x10
c0015560:	84 c0                	test   al,al
c0015562:	75 2e                	jne    c0015592 <pgFault(regs*, void*)+0x81>
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001556b:	e8 cf fb ff ff       	call   c001513f <displayDebugInfo(regs*)>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	83 ec 0c             	sub    esp,0xc
c0015576:	68 ae ed 01 c0       	push   0xc001edae
c001557b:	e8 e0 fe ff ff       	call   c0015460 <displayProgramFault(char const*)>
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	83 ec 0c             	sub    esp,0xc
c0015586:	6a 00                	push   0x0
c0015588:	e8 9f ee ff ff       	call   c001442c <Thr::terminateFromIRQ(int)>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	eb 01                	jmp    c0015593 <pgFault(regs*, void*)+0x82>
c0015592:	90                   	nop
c0015593:	83 c4 1c             	add    esp,0x1c
c0015596:	c3                   	ret    

c0015597 <otherISRHandler(regs*, void*)>:
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155a1:	e8 99 fb ff ff       	call   c001513f <displayDebugInfo(regs*)>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	83 ec 0c             	sub    esp,0xc
c00155ac:	68 28 ee 01 c0       	push   0xc001ee28
c00155b1:	e8 aa fe ff ff       	call   c0015460 <displayProgramFault(char const*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	83 ec 0c             	sub    esp,0xc
c00155bc:	6a 00                	push   0x0
c00155be:	e8 69 ee ff ff       	call   c001442c <Thr::terminateFromIRQ(int)>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	90                   	nop
c00155c7:	83 c4 0c             	add    esp,0xc
c00155ca:	c3                   	ret    

c00155cb <opcodeFault(regs*, void*)>:
c00155cb:	55                   	push   ebp
c00155cc:	89 e5                	mov    ebp,esp
c00155ce:	83 ec 08             	sub    esp,0x8
c00155d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155d7:	83 ec 08             	sub    esp,0x8
c00155da:	50                   	push   eax
c00155db:	68 b9 ed 01 c0       	push   0xc001edb9
c00155e0:	e8 03 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00155ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155f3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00155f9:	84 c0                	test   al,al
c00155fb:	74 21                	je     c001561e <opcodeFault(regs*, void*)+0x53>
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	68 50 ee 01 c0       	push   0xc001ee50
c0015605:	e8 de 55 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015613:	8d 50 19             	lea    edx,[eax+0x19]
c0015616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015619:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001561c:	eb 2b                	jmp    c0015649 <opcodeFault(regs*, void*)+0x7e>
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015624:	e8 16 fb ff ff       	call   c001513f <displayDebugInfo(regs*)>
c0015629:	83 c4 10             	add    esp,0x10
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	68 c7 ed 01 c0       	push   0xc001edc7
c0015634:	e8 27 fe ff ff       	call   c0015460 <displayProgramFault(char const*)>
c0015639:	83 c4 10             	add    esp,0x10
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	6a 00                	push   0x0
c0015641:	e8 e6 ed ff ff       	call   c001442c <Thr::terminateFromIRQ(int)>
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	c9                   	leave  
c001564a:	c3                   	ret    

c001564b <i386SaveCoprocessor(void*)>:
c001564b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001564f:	83 c0 3f             	add    eax,0x3f
c0015652:	83 e0 c0             	and    eax,0xffffffc0
c0015655:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015659:	ff 25 ac 3e 02 c0    	jmp    DWORD PTR ds:0xc0023eac

c001565f <i386LoadCoprocessor(void*)>:
c001565f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015663:	83 c0 3f             	add    eax,0x3f
c0015666:	83 e0 c0             	and    eax,0xffffffc0
c0015669:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001566d:	ff 25 a8 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ea8

c0015673 <x87EmulHandler(regs*, void*)>:
c0015673:	53                   	push   ebx
c0015674:	83 ec 08             	sub    esp,0x8
c0015677:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001567c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015680:	74 10                	je     c0015692 <x87EmulHandler(regs*, void*)+0x1f>
c0015682:	83 ec 0c             	sub    esp,0xc
c0015685:	68 d4 ed 01 c0       	push   0xc001edd4
c001568a:	e8 58 b0 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001568f:	83 c4 10             	add    esp,0x10
c0015692:	0f 20 c0             	mov    eax,cr0
c0015695:	a8 08                	test   al,0x8
c0015697:	74 59                	je     c00156f2 <x87EmulHandler(regs*, void*)+0x7f>
c0015699:	0f 06                	clts   
c001569b:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00156a0:	85 c0                	test   eax,eax
c00156a2:	74 0e                	je     c00156b2 <x87EmulHandler(regs*, void*)+0x3f>
c00156a4:	83 ec 0c             	sub    esp,0xc
c00156a7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156aa:	e8 9c ff ff ff       	call   c001564b <i386SaveCoprocessor(void*)>
c00156af:	83 c4 10             	add    esp,0x10
c00156b2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00156b8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00156bc:	75 12                	jne    c00156d0 <x87EmulHandler(regs*, void*)+0x5d>
c00156be:	83 ec 0c             	sub    esp,0xc
c00156c1:	68 40 02 00 00       	push   0x240
c00156c6:	e8 8e 27 ff ff       	call   c0007e59 <malloc>
c00156cb:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00156ce:	eb 10                	jmp    c00156e0 <x87EmulHandler(regs*, void*)+0x6d>
c00156d0:	83 ec 0c             	sub    esp,0xc
c00156d3:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00156d8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156db:	e8 7f ff ff ff       	call   c001565f <i386LoadCoprocessor(void*)>
c00156e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e5:	83 c4 10             	add    esp,0x10
c00156e8:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c00156ed:	83 c4 08             	add    esp,0x8
c00156f0:	5b                   	pop    ebx
c00156f1:	c3                   	ret    
c00156f2:	83 ec 0c             	sub    esp,0xc
c00156f5:	68 e8 ed 01 c0       	push   0xc001ede8
c00156fa:	e8 e9 54 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00156ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015707:	83 c4 18             	add    esp,0x18
c001570a:	5b                   	pop    ebx
c001570b:	e9 1c ed ff ff       	jmp    c001442c <Thr::terminateFromIRQ(int)>

c0015710 <HalInitialiseCoprocessor()>:
c0015710:	83 ec 10             	sub    esp,0x10
c0015713:	c7 05 a4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea4,0x0
c001571d:	6a 00                	push   0x0
c001571f:	68 73 56 01 c0       	push   0xc0015673
c0015724:	6a 07                	push   0x7
c0015726:	e8 31 6e ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572b:	e8 80 64 00 00       	call   c001bbb0 <avxDetect>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	85 c0                	test   eax,eax
c0015735:	74 1c                	je     c0015753 <HalInitialiseCoprocessor()+0x43>
c0015737:	c7 05 ac 3e 02 c0 da bb 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001bbda
c0015741:	c7 05 a8 3e 02 c0 eb bb 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001bbeb
c001574b:	83 c4 0c             	add    esp,0xc
c001574e:	e9 a9 64 00 00       	jmp    c001bbfc <avxInit>
c0015753:	e8 d8 66 00 00       	call   c001be30 <absolutelyNoChanceInHell>
c0015758:	85 c0                	test   eax,eax
c001575a:	74 1c                	je     c0015778 <HalInitialiseCoprocessor()+0x68>
c001575c:	c7 05 ac 3e 02 c0 48 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be48
c0015766:	c7 05 a8 3e 02 c0 50 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be50
c0015770:	83 c4 0c             	add    esp,0xc
c0015773:	e9 e0 66 00 00       	jmp    c001be58 <sseInit>
c0015778:	e8 f9 66 00 00       	call   c001be76 <x87Detect>
c001577d:	85 c0                	test   eax,eax
c001577f:	74 1c                	je     c001579d <HalInitialiseCoprocessor()+0x8d>
c0015781:	c7 05 ac 3e 02 c0 91 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be91
c001578b:	c7 05 a8 3e 02 c0 98 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be98
c0015795:	83 c4 0c             	add    esp,0xc
c0015798:	e9 02 67 00 00       	jmp    c001be9f <x87Init>
c001579d:	c7 05 ac 3e 02 c0 0c 51 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001510c
c00157a7:	c7 05 a8 3e 02 c0 0c 51 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001510c
c00157b1:	0f 20 c0             	mov    eax,cr0
c00157b4:	83 c8 04             	or     eax,0x4
c00157b7:	0f 22 c0             	mov    cr0,eax
c00157ba:	83 c4 0c             	add    esp,0xc
c00157bd:	c3                   	ret    

c00157be <HalPanic(char const*)>:
c00157be:	e9 24 af ff ff       	jmp    c00106e7 <Krnl::panic(char const*)>

c00157c3 <HalQueryPerformanceCounter()>:
c00157c3:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00157c8:	31 d2                	xor    edx,edx
c00157ca:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00157d0:	31 c0                	xor    eax,eax
c00157d2:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00157d9:	74 02                	je     c00157dd <HalQueryPerformanceCounter()+0x1a>
c00157db:	0f 31                	rdtsc  
c00157dd:	c3                   	ret    

c00157de <HalInitialise()>:
c00157de:	53                   	push   ebx
c00157df:	83 ec 08             	sub    esp,0x8
c00157e2:	e8 a8 6f ff ff       	call   c000c78f <setupINTS()>
c00157e7:	80 3d 00 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023200,0x0
c00157ee:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00157f3:	75 07                	jne    c00157fc <HalInitialise()+0x1e>
c00157f5:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00157fc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015802:	83 e0 01             	and    eax,0x1
c0015805:	a2 a0 3e 02 c0       	mov    ds:0xc0023ea0,al
c001580a:	e8 a9 02 00 00       	call   c0015ab8 <picOpen()>
c001580f:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c0015816:	74 0a                	je     c0015822 <HalInitialise()+0x44>
c0015818:	e8 e3 01 00 00       	call   c0015a00 <picDisable()>
c001581d:	e8 0a 5d 00 00       	call   c001b52c <apicOpen()>
c0015822:	bb 0f 00 00 00       	mov    ebx,0xf
c0015827:	50                   	push   eax
c0015828:	6a 00                	push   0x0
c001582a:	68 97 55 01 c0       	push   0xc0015597
c001582f:	6a 00                	push   0x0
c0015831:	e8 26 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015836:	83 c4 0c             	add    esp,0xc
c0015839:	6a 00                	push   0x0
c001583b:	68 97 55 01 c0       	push   0xc0015597
c0015840:	6a 01                	push   0x1
c0015842:	e8 15 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015847:	83 c4 0c             	add    esp,0xc
c001584a:	6a 00                	push   0x0
c001584c:	68 0d 51 01 c0       	push   0xc001510d
c0015851:	6a 02                	push   0x2
c0015853:	e8 04 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015858:	83 c4 0c             	add    esp,0xc
c001585b:	6a 00                	push   0x0
c001585d:	68 97 55 01 c0       	push   0xc0015597
c0015862:	6a 03                	push   0x3
c0015864:	e8 f3 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015869:	83 c4 0c             	add    esp,0xc
c001586c:	6a 00                	push   0x0
c001586e:	68 97 55 01 c0       	push   0xc0015597
c0015873:	6a 04                	push   0x4
c0015875:	e8 e2 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587a:	83 c4 0c             	add    esp,0xc
c001587d:	6a 00                	push   0x0
c001587f:	68 97 55 01 c0       	push   0xc0015597
c0015884:	6a 05                	push   0x5
c0015886:	e8 d1 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588b:	83 c4 0c             	add    esp,0xc
c001588e:	6a 00                	push   0x0
c0015890:	68 cb 55 01 c0       	push   0xc00155cb
c0015895:	6a 06                	push   0x6
c0015897:	e8 c0 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589c:	83 c4 0c             	add    esp,0xc
c001589f:	6a 00                	push   0x0
c00158a1:	68 26 51 01 c0       	push   0xc0015126
c00158a6:	6a 08                	push   0x8
c00158a8:	e8 af 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ad:	83 c4 0c             	add    esp,0xc
c00158b0:	6a 00                	push   0x0
c00158b2:	68 97 55 01 c0       	push   0xc0015597
c00158b7:	6a 09                	push   0x9
c00158b9:	e8 9e 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158be:	83 c4 0c             	add    esp,0xc
c00158c1:	6a 00                	push   0x0
c00158c3:	68 97 55 01 c0       	push   0xc0015597
c00158c8:	6a 0a                	push   0xa
c00158ca:	e8 8d 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158cf:	83 c4 0c             	add    esp,0xc
c00158d2:	6a 00                	push   0x0
c00158d4:	68 97 55 01 c0       	push   0xc0015597
c00158d9:	6a 0b                	push   0xb
c00158db:	e8 7c 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e0:	83 c4 0c             	add    esp,0xc
c00158e3:	6a 00                	push   0x0
c00158e5:	68 ac 54 01 c0       	push   0xc00154ac
c00158ea:	6a 0d                	push   0xd
c00158ec:	e8 6b 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f1:	83 c4 0c             	add    esp,0xc
c00158f4:	6a 00                	push   0x0
c00158f6:	68 11 55 01 c0       	push   0xc0015511
c00158fb:	6a 0e                	push   0xe
c00158fd:	e8 5a 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	50                   	push   eax
c0015906:	6a 00                	push   0x0
c0015908:	68 97 55 01 c0       	push   0xc0015597
c001590d:	53                   	push   ebx
c001590e:	43                   	inc    ebx
c001590f:	e8 48 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	83 fb 1e             	cmp    ebx,0x1e
c001591a:	75 e9                	jne    c0015905 <HalInitialise()+0x127>
c001591c:	50                   	push   eax
c001591d:	6a 00                	push   0x0
c001591f:	68 8d 20 01 c0       	push   0xc001208d
c0015924:	6a 60                	push   0x60
c0015926:	e8 31 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015930:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001593a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015941:	e8 13 25 ff ff       	call   c0007e59 <malloc>
c0015946:	89 04 24             	mov    DWORD PTR [esp],eax
c0015949:	89 c3                	mov    ebx,eax
c001594b:	e8 30 09 00 00       	call   c0016280 <RTC::RTC()>
c0015950:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001595a:	5a                   	pop    edx
c001595b:	59                   	pop    ecx
c001595c:	53                   	push   ebx
c001595d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015963:	e8 c0 66 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0015968:	8b 03                	mov    eax,DWORD PTR [ebx]
c001596a:	6a 00                	push   0x0
c001596c:	6a 00                	push   0x0
c001596e:	6a 00                	push   0x0
c0015970:	53                   	push   ebx
c0015971:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015974:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015979:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001597f:	83 c4 28             	add    esp,0x28
c0015982:	5b                   	pop    ebx
c0015983:	c3                   	ret    

c0015984 <HalMakeBeep(int)>:
c0015984:	53                   	push   ebx
c0015985:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015989:	85 db                	test   ebx,ebx
c001598b:	75 07                	jne    c0015994 <HalMakeBeep(int)+0x10>
c001598d:	e4 61                	in     al,0x61
c001598f:	83 e0 fc             	and    eax,0xfffffffc
c0015992:	eb 26                	jmp    c00159ba <HalMakeBeep(int)+0x36>
c0015994:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015999:	99                   	cdq    
c001599a:	f7 fb                	idiv   ebx
c001599c:	89 c1                	mov    ecx,eax
c001599e:	b0 b6                	mov    al,0xb6
c00159a0:	e6 43                	out    0x43,al
c00159a2:	88 c8                	mov    al,cl
c00159a4:	e6 42                	out    0x42,al
c00159a6:	89 c8                	mov    eax,ecx
c00159a8:	c1 e8 08             	shr    eax,0x8
c00159ab:	e6 42                	out    0x42,al
c00159ad:	e4 61                	in     al,0x61
c00159af:	88 c2                	mov    dl,al
c00159b1:	83 ca 03             	or     edx,0x3
c00159b4:	38 c2                	cmp    dl,al
c00159b6:	74 04                	je     c00159bc <HalMakeBeep(int)+0x38>
c00159b8:	88 d0                	mov    al,dl
c00159ba:	e6 61                	out    0x61,al
c00159bc:	5b                   	pop    ebx
c00159bd:	c3                   	ret    

c00159be <HalGetRand()>:
c00159be:	31 c0                	xor    eax,eax
c00159c0:	c3                   	ret    

c00159c1 <HalEndOfInterrupt(int)>:
c00159c1:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c00159c8:	74 23                	je     c00159ed <HalEndOfInterrupt(int)+0x2c>
c00159ca:	83 ec 14             	sub    esp,0x14
c00159cd:	6a 1b                	push   0x1b
c00159cf:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00159d5:	e8 bc 1a ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c00159da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00159df:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00159e9:	83 c4 1c             	add    esp,0x1c
c00159ec:	c3                   	ret    
c00159ed:	e9 56 02 00 00       	jmp    c0015c48 <picEOI(int)>

c00159f2 <HalRestart()>:
c00159f2:	c3                   	ret    

c00159f3 <HalShutdown()>:
c00159f3:	c3                   	ret    

c00159f4 <HalSleep()>:
c00159f4:	c3                   	ret    
c00159f5:	66 90                	xchg   ax,ax
c00159f7:	90                   	nop

c00159f8 <picIoWait()>:
c00159f8:	eb 00                	jmp    c00159fa <picIoWait()+0x2>
c00159fa:	eb 00                	jmp    c00159fc <picIoWait()+0x4>
c00159fc:	90                   	nop
c00159fd:	c3                   	ret    
c00159fe:	66 90                	xchg   ax,ax

c0015a00 <picDisable()>:
c0015a00:	83 ec 10             	sub    esp,0x10
c0015a03:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a0a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a18:	ee                   	out    dx,al
c0015a19:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a20:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a25:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a29:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a2e:	ee                   	out    dx,al
c0015a2f:	90                   	nop
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	c3                   	ret    

c0015a34 <picGetIRQReg(int)>:
c0015a34:	83 ec 10             	sub    esp,0x10
c0015a37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a3b:	25 ff 00 00 00       	and    eax,0xff
c0015a40:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a47:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a4b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a4f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a54:	ee                   	out    dx,al
c0015a55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a59:	25 ff 00 00 00       	and    eax,0xff
c0015a5e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a65:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a69:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a6d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a72:	ee                   	out    dx,al
c0015a73:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a7a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a7f:	89 c2                	mov    edx,eax
c0015a81:	ec                   	in     al,dx
c0015a82:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a86:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a8a:	25 ff 00 00 00       	and    eax,0xff
c0015a8f:	c1 e0 08             	shl    eax,0x8
c0015a92:	89 c1                	mov    ecx,eax
c0015a94:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a9b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015aa0:	89 c2                	mov    edx,eax
c0015aa2:	ec                   	in     al,dx
c0015aa3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aa7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015aab:	25 ff 00 00 00       	and    eax,0xff
c0015ab0:	09 c8                	or     eax,ecx
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	c3                   	ret    
c0015ab6:	66 90                	xchg   ax,ax

c0015ab8 <picOpen()>:
c0015ab8:	83 ec 50             	sub    esp,0x50
c0015abb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015ac2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ac7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015acb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015acf:	ee                   	out    dx,al
c0015ad0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015ad7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015adc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015ae0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ae4:	ee                   	out    dx,al
c0015ae5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015aed:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015af5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015afc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b00:	89 c2                	mov    edx,eax
c0015b02:	ec                   	in     al,dx
c0015b03:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b07:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b0b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b0f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b1a:	89 c2                	mov    edx,eax
c0015b1c:	ec                   	in     al,dx
c0015b1d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b21:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b25:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b29:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b30:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b35:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b3d:	ee                   	out    dx,al
c0015b3e:	e8 b5 fe ff ff       	call   c00159f8 <picIoWait()>
c0015b43:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b4a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b4f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b57:	ee                   	out    dx,al
c0015b58:	e8 9b fe ff ff       	call   c00159f8 <picIoWait()>
c0015b5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b61:	25 ff 00 00 00       	and    eax,0xff
c0015b66:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b6d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b71:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b79:	ee                   	out    dx,al
c0015b7a:	e8 79 fe ff ff       	call   c00159f8 <picIoWait()>
c0015b7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b83:	25 ff 00 00 00       	and    eax,0xff
c0015b88:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b8f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015b93:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b97:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b9b:	ee                   	out    dx,al
c0015b9c:	e8 57 fe ff ff       	call   c00159f8 <picIoWait()>
c0015ba1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015ba8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bad:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bb1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bb5:	ee                   	out    dx,al
c0015bb6:	e8 3d fe ff ff       	call   c00159f8 <picIoWait()>
c0015bbb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bc2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bc7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015bcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015bcf:	ee                   	out    dx,al
c0015bd0:	e8 23 fe ff ff       	call   c00159f8 <picIoWait()>
c0015bd5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015bdc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015be1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015be5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015be9:	ee                   	out    dx,al
c0015bea:	e8 09 fe ff ff       	call   c00159f8 <picIoWait()>
c0015bef:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015bf6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015bfb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015bff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c03:	ee                   	out    dx,al
c0015c04:	e8 ef fd ff ff       	call   c00159f8 <picIoWait()>
c0015c09:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c0d:	25 ff 00 00 00       	and    eax,0xff
c0015c12:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c19:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c1d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c21:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c25:	ee                   	out    dx,al
c0015c26:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c2a:	25 ff 00 00 00       	and    eax,0xff
c0015c2f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c36:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c3a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c3e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c42:	ee                   	out    dx,al
c0015c43:	90                   	nop
c0015c44:	83 c4 50             	add    esp,0x50
c0015c47:	c3                   	ret    

c0015c48 <picEOI(int)>:
c0015c48:	83 ec 10             	sub    esp,0x10
c0015c4b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c50:	75 22                	jne    c0015c74 <picEOI(int)+0x2c>
c0015c52:	6a 0b                	push   0xb
c0015c54:	e8 db fd ff ff       	call   c0015a34 <picGetIRQReg(int)>
c0015c59:	83 c4 04             	add    esp,0x4
c0015c5c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c61:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c66:	25 ff ff 00 00       	and    eax,0xffff
c0015c6b:	25 80 00 00 00       	and    eax,0x80
c0015c70:	74 72                	je     c0015ce4 <picEOI(int)+0x9c>
c0015c72:	66 90                	xchg   ax,ax
c0015c74:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c79:	75 31                	jne    c0015cac <picEOI(int)+0x64>
c0015c7b:	6a 0b                	push   0xb
c0015c7d:	e8 b2 fd ff ff       	call   c0015a34 <picGetIRQReg(int)>
c0015c82:	83 c4 04             	add    esp,0x4
c0015c85:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c8e:	66 85 c0             	test   ax,ax
c0015c91:	78 19                	js     c0015cac <picEOI(int)+0x64>
c0015c93:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c9a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ca3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015ca8:	ee                   	out    dx,al
c0015ca9:	eb 3d                	jmp    c0015ce8 <picEOI(int)+0xa0>
c0015cab:	90                   	nop
c0015cac:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cb1:	7e 19                	jle    c0015ccc <picEOI(int)+0x84>
c0015cb3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015cba:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015cbf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015cc3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015cc8:	ee                   	out    dx,al
c0015cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ccc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015cd3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015cd8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015cdc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ce1:	ee                   	out    dx,al
c0015ce2:	eb 04                	jmp    c0015ce8 <picEOI(int)+0xa0>
c0015ce4:	90                   	nop
c0015ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ce8:	83 c4 10             	add    esp,0x10
c0015ceb:	c3                   	ret    

c0015cec <RTC::open(int, int, void*)>:
c0015cec:	31 c0                	xor    eax,eax
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <RTC::close(int, int, void*)>:
c0015cf0:	31 c0                	xor    eax,eax
c0015cf2:	c3                   	ret    
c0015cf3:	90                   	nop

c0015cf4 <RTC::timeInSecondsUTC()>:
c0015cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cf8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015cfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop

c0015d06 <RTC::timeInDatetimeUTC()>:
c0015d06:	53                   	push   ebx
c0015d07:	83 ec 14             	sub    esp,0x14
c0015d0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d12:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d14:	50                   	push   eax
c0015d15:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d18:	83 c4 0c             	add    esp,0xc
c0015d1b:	52                   	push   edx
c0015d1c:	50                   	push   eax
c0015d1d:	53                   	push   ebx
c0015d1e:	e8 79 60 ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015d23:	89 d8                	mov    eax,ebx
c0015d25:	83 c4 14             	add    esp,0x14
c0015d28:	5b                   	pop    ebx
c0015d29:	c2 04 00             	ret    0x4

c0015d2c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d2c:	56                   	push   esi
c0015d2d:	53                   	push   ebx
c0015d2e:	83 ec 14             	sub    esp,0x14
c0015d31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d37:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d3e:	52                   	push   edx
c0015d3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d47:	50                   	push   eax
c0015d48:	e8 4f 60 ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d59:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d61:	89 f0                	mov    eax,esi
c0015d63:	83 c4 20             	add    esp,0x20
c0015d66:	5b                   	pop    ebx
c0015d67:	5e                   	pop    esi
c0015d68:	ff e0                	jmp    eax

c0015d6a <RTC::~RTC()>:
c0015d6a:	83 ec 0c             	sub    esp,0xc
c0015d6d:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c0015d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d76:	89 10                	mov    DWORD PTR [eax],edx
c0015d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	50                   	push   eax
c0015d80:	e8 9b 5d ff ff       	call   c000bb20 <Clock::~Clock()>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	90                   	nop
c0015d89:	83 c4 0c             	add    esp,0xc
c0015d8c:	c3                   	ret    
c0015d8d:	90                   	nop

c0015d8e <RTC::~RTC()>:
c0015d8e:	83 ec 0c             	sub    esp,0xc
c0015d91:	83 ec 0c             	sub    esp,0xc
c0015d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d98:	e8 cd ff ff ff       	call   c0015d6a <RTC::~RTC()>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	83 ec 08             	sub    esp,0x8
c0015da3:	68 60 01 00 00       	push   0x160
c0015da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dac:	e8 41 4d ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0015db1:	83 c4 10             	add    esp,0x10
c0015db4:	83 c4 0c             	add    esp,0xc
c0015db7:	c3                   	ret    

c0015db8 <RTC::get_update_in_progress_flag()>:
c0015db8:	83 ec 14             	sub    esp,0x14
c0015dbb:	6a 0a                	push   0xa
c0015dbd:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015dc3:	e8 82 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015dc8:	83 c4 1c             	add    esp,0x1c
c0015dcb:	c0 e8 07             	shr    al,0x7
c0015dce:	c3                   	ret    
c0015dcf:	90                   	nop

c0015dd0 <RTC::completeRTCRefresh()>:
c0015dd0:	55                   	push   ebp
c0015dd1:	57                   	push   edi
c0015dd2:	56                   	push   esi
c0015dd3:	53                   	push   ebx
c0015dd4:	83 ec 2c             	sub    esp,0x2c
c0015dd7:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015ddd:	83 ec 0c             	sub    esp,0xc
c0015de0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015de4:	e8 cf ff ff ff       	call   c0015db8 <RTC::get_update_in_progress_flag()>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	84 c0                	test   al,al
c0015dee:	74 0e                	je     c0015dfe <RTC::completeRTCRefresh()+0x2e>
c0015df0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015df6:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015dfc:	73 df                	jae    c0015ddd <RTC::completeRTCRefresh()+0xd>
c0015dfe:	55                   	push   ebp
c0015dff:	55                   	push   ebp
c0015e00:	6a 00                	push   0x0
c0015e02:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e08:	e8 3d 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e0d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e11:	58                   	pop    eax
c0015e12:	5a                   	pop    edx
c0015e13:	6a 02                	push   0x2
c0015e15:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e1b:	e8 2a 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e20:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e24:	59                   	pop    ecx
c0015e25:	5b                   	pop    ebx
c0015e26:	6a 04                	push   0x4
c0015e28:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e2e:	e8 17 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e33:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e37:	5e                   	pop    esi
c0015e38:	5f                   	pop    edi
c0015e39:	6a 07                	push   0x7
c0015e3b:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e41:	e8 04 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e46:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e4a:	5d                   	pop    ebp
c0015e4b:	58                   	pop    eax
c0015e4c:	6a 08                	push   0x8
c0015e4e:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e54:	e8 f1 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e59:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e5d:	58                   	pop    eax
c0015e5e:	5a                   	pop    edx
c0015e5f:	6a 09                	push   0x9
c0015e61:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e67:	e8 de 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	0f b6 e8             	movzx  ebp,al
c0015e72:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015e78:	83 ec 0c             	sub    esp,0xc
c0015e7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e7f:	e8 34 ff ff ff       	call   c0015db8 <RTC::get_update_in_progress_flag()>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	84 c0                	test   al,al
c0015e89:	74 0e                	je     c0015e99 <RTC::completeRTCRefresh()+0xc9>
c0015e8b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e91:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015e97:	73 df                	jae    c0015e78 <RTC::completeRTCRefresh()+0xa8>
c0015e99:	50                   	push   eax
c0015e9a:	50                   	push   eax
c0015e9b:	6a 00                	push   0x0
c0015e9d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015ea3:	e8 a2 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ea8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015eac:	58                   	pop    eax
c0015ead:	5a                   	pop    edx
c0015eae:	6a 02                	push   0x2
c0015eb0:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eb6:	e8 8f 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ebb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ebf:	59                   	pop    ecx
c0015ec0:	5b                   	pop    ebx
c0015ec1:	6a 04                	push   0x4
c0015ec3:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015ec9:	e8 7c 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ece:	5e                   	pop    esi
c0015ecf:	88 c3                	mov    bl,al
c0015ed1:	5f                   	pop    edi
c0015ed2:	6a 07                	push   0x7
c0015ed4:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eda:	e8 6b 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015edf:	89 c6                	mov    esi,eax
c0015ee1:	58                   	pop    eax
c0015ee2:	5a                   	pop    edx
c0015ee3:	6a 08                	push   0x8
c0015ee5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eeb:	e8 5a 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ef0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015ef4:	59                   	pop    ecx
c0015ef5:	5f                   	pop    edi
c0015ef6:	6a 09                	push   0x9
c0015ef8:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015efe:	e8 47 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f03:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f07:	0f b6 f8             	movzx  edi,al
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f11:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f15:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f19:	89 f1                	mov    ecx,esi
c0015f1b:	0f 94 c0             	sete   al
c0015f1e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f22:	0f 94 c2             	sete   dl
c0015f25:	21 d0                	and    eax,edx
c0015f27:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f2b:	0f 94 c2             	sete   dl
c0015f2e:	21 c2                	and    edx,eax
c0015f30:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f34:	0f 94 c0             	sete   al
c0015f37:	21 d0                	and    eax,edx
c0015f39:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f3d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f41:	0f 94 c1             	sete   cl
c0015f44:	84 c8                	test   al,cl
c0015f46:	75 29                	jne    c0015f71 <RTC::completeRTCRefresh()+0x1a1>
c0015f48:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f4c:	89 fd                	mov    ebp,edi
c0015f4e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f52:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f56:	89 f0                	mov    eax,esi
c0015f58:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f60:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f64:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f68:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f6c:	e9 01 ff ff ff       	jmp    c0015e72 <RTC::completeRTCRefresh()+0xa2>
c0015f71:	39 fd                	cmp    ebp,edi
c0015f73:	75 d3                	jne    c0015f48 <RTC::completeRTCRefresh()+0x178>
c0015f75:	55                   	push   ebp
c0015f76:	55                   	push   ebp
c0015f77:	6a 0b                	push   0xb
c0015f79:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f7f:	e8 c6 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f84:	83 c4 10             	add    esp,0x10
c0015f87:	89 c5                	mov    ebp,eax
c0015f89:	a8 04                	test   al,0x4
c0015f8b:	75 78                	jne    c0016005 <RTC::completeRTCRefresh()+0x235>
c0015f8d:	b1 0a                	mov    cl,0xa
c0015f8f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015f93:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f97:	83 e2 0f             	and    edx,0xf
c0015f9a:	c0 e8 04             	shr    al,0x4
c0015f9d:	c1 ef 04             	shr    edi,0x4
c0015fa0:	f6 e1                	mul    cl
c0015fa2:	6b ff 0a             	imul   edi,edi,0xa
c0015fa5:	01 d0                	add    eax,edx
c0015fa7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fab:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015faf:	83 e2 0f             	and    edx,0xf
c0015fb2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fb6:	c0 e8 04             	shr    al,0x4
c0015fb9:	f6 e1                	mul    cl
c0015fbb:	01 d0                	add    eax,edx
c0015fbd:	88 da                	mov    dl,bl
c0015fbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015fc3:	83 e2 0f             	and    edx,0xf
c0015fc6:	88 d8                	mov    al,bl
c0015fc8:	83 e3 80             	and    ebx,0xffffff80
c0015fcb:	c0 e8 04             	shr    al,0x4
c0015fce:	83 e0 07             	and    eax,0x7
c0015fd1:	f6 e1                	mul    cl
c0015fd3:	01 d0                	add    eax,edx
c0015fd5:	89 f2                	mov    edx,esi
c0015fd7:	09 c3                	or     ebx,eax
c0015fd9:	83 e2 0f             	and    edx,0xf
c0015fdc:	89 f0                	mov    eax,esi
c0015fde:	c0 e8 04             	shr    al,0x4
c0015fe1:	f6 e1                	mul    cl
c0015fe3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015fe6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fea:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fee:	83 e2 0f             	and    edx,0xf
c0015ff1:	c0 e8 04             	shr    al,0x4
c0015ff4:	f6 e1                	mul    cl
c0015ff6:	01 d0                	add    eax,edx
c0015ff8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ffc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016000:	83 e0 0f             	and    eax,0xf
c0016003:	01 c7                	add    edi,eax
c0016005:	83 e5 02             	and    ebp,0x2
c0016008:	75 14                	jne    c001601e <RTC::completeRTCRefresh()+0x24e>
c001600a:	84 db                	test   bl,bl
c001600c:	79 10                	jns    c001601e <RTC::completeRTCRefresh()+0x24e>
c001600e:	83 e3 7f             	and    ebx,0x7f
c0016011:	b9 18 00 00 00       	mov    ecx,0x18
c0016016:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016019:	99                   	cdq    
c001601a:	f7 f9                	idiv   ecx
c001601c:	88 d3                	mov    bl,dl
c001601e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016024:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001602a:	77 06                	ja     c0016032 <RTC::completeRTCRefresh()+0x262>
c001602c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016032:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016037:	31 d2                	xor    edx,edx
c0016039:	c1 e1 10             	shl    ecx,0x10
c001603c:	89 d7                	mov    edi,edx
c001603e:	c1 e5 10             	shl    ebp,0x10
c0016041:	31 c0                	xor    eax,eax
c0016043:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016049:	09 cf                	or     edi,ecx
c001604b:	89 fa                	mov    edx,edi
c001604d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016051:	88 da                	mov    dl,bl
c0016053:	89 f3                	mov    ebx,esi
c0016055:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016059:	88 d8                	mov    al,bl
c001605b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001605f:	0f b7 c8             	movzx  ecx,ax
c0016062:	09 e9                	or     ecx,ebp
c0016064:	89 c8                	mov    eax,ecx
c0016066:	51                   	push   ecx
c0016067:	51                   	push   ecx
c0016068:	52                   	push   edx
c0016069:	50                   	push   eax
c001606a:	e8 a0 5b ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c001606f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016073:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016079:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001607f:	83 c4 3c             	add    esp,0x3c
c0016082:	5b                   	pop    ebx
c0016083:	5e                   	pop    esi
c0016084:	5f                   	pop    edi
c0016085:	5d                   	pop    ebp
c0016086:	c3                   	ret    
c0016087:	90                   	nop

c0016088 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016088:	55                   	push   ebp
c0016089:	57                   	push   edi
c001608a:	56                   	push   esi
c001608b:	53                   	push   ebx
c001608c:	83 ec 30             	sub    esp,0x30
c001608f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016093:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016097:	6a 00                	push   0x0
c0016099:	6a 00                	push   0x0
c001609b:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00160a1:	e8 ba 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a6:	83 c4 0c             	add    esp,0xc
c00160a9:	6a 00                	push   0x0
c00160ab:	6a 02                	push   0x2
c00160ad:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00160b3:	e8 a8 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b8:	31 d2                	xor    edx,edx
c00160ba:	89 f9                	mov    ecx,edi
c00160bc:	89 f8                	mov    eax,edi
c00160be:	c1 e9 10             	shr    ecx,0x10
c00160c1:	0f b6 c4             	movzx  eax,ah
c00160c4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00160c8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00160cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160d0:	b9 64 00 00 00       	mov    ecx,0x64
c00160d5:	89 f0                	mov    eax,esi
c00160d7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00160db:	89 f0                	mov    eax,esi
c00160dd:	0f b6 c4             	movzx  eax,ah
c00160e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160e4:	89 f0                	mov    eax,esi
c00160e6:	c1 e8 10             	shr    eax,0x10
c00160e9:	66 f7 f1             	div    cx
c00160ec:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00160f1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00160f6:	59                   	pop    ecx
c00160f7:	5b                   	pop    ebx
c00160f8:	89 fb                	mov    ebx,edi
c00160fa:	6a 0b                	push   0xb
c00160fc:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016102:	e8 43 14 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016107:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001610b:	83 c4 10             	add    esp,0x10
c001610e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016113:	75 74                	jne    c0016189 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016115:	b2 0a                	mov    dl,0xa
c0016117:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001611b:	0f b6 c1             	movzx  eax,cl
c001611e:	f6 f2                	div    dl
c0016120:	88 c3                	mov    bl,al
c0016122:	88 e0                	mov    al,ah
c0016124:	c1 e3 04             	shl    ebx,0x4
c0016127:	09 c3                	or     ebx,eax
c0016129:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001612e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016132:	f6 f2                	div    dl
c0016134:	88 c1                	mov    cl,al
c0016136:	88 e0                	mov    al,ah
c0016138:	c1 e1 04             	shl    ecx,0x4
c001613b:	09 c1                	or     ecx,eax
c001613d:	89 f8                	mov    eax,edi
c001613f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016143:	0f b6 c0             	movzx  eax,al
c0016146:	f6 f2                	div    dl
c0016148:	88 c3                	mov    bl,al
c001614a:	88 e0                	mov    al,ah
c001614c:	c1 e3 04             	shl    ebx,0x4
c001614f:	09 c3                	or     ebx,eax
c0016151:	89 f0                	mov    eax,esi
c0016153:	0f b6 c0             	movzx  eax,al
c0016156:	f6 f2                	div    dl
c0016158:	88 c1                	mov    cl,al
c001615a:	88 e0                	mov    al,ah
c001615c:	c1 e1 04             	shl    ecx,0x4
c001615f:	09 c1                	or     ecx,eax
c0016161:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016166:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001616a:	f6 f2                	div    dl
c001616c:	88 c1                	mov    cl,al
c001616e:	88 e0                	mov    al,ah
c0016170:	c1 e1 04             	shl    ecx,0x4
c0016173:	09 c1                	or     ecx,eax
c0016175:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001617a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001617e:	f6 f2                	div    dl
c0016180:	89 c5                	mov    ebp,eax
c0016182:	88 e0                	mov    al,ah
c0016184:	c1 e5 04             	shl    ebp,0x4
c0016187:	09 c5                	or     ebp,eax
c0016189:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001618e:	75 17                	jne    c00161a7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016190:	80 fb 0b             	cmp    bl,0xb
c0016193:	76 0c                	jbe    c00161a1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016195:	80 eb 0c             	sub    bl,0xc
c0016198:	75 02                	jne    c001619c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001619a:	b3 0c                	mov    bl,0xc
c001619c:	83 cb 80             	or     ebx,0xffffff80
c001619f:	eb 06                	jmp    c00161a7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161a1:	84 db                	test   bl,bl
c00161a3:	75 02                	jne    c00161a7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161a5:	b3 0c                	mov    bl,0xc
c00161a7:	0f b6 db             	movzx  ebx,bl
c00161aa:	50                   	push   eax
c00161ab:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161b0:	50                   	push   eax
c00161b1:	6a 00                	push   0x0
c00161b3:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161b9:	e8 a2 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161be:	83 c4 0c             	add    esp,0xc
c00161c1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161c6:	50                   	push   eax
c00161c7:	6a 02                	push   0x2
c00161c9:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161cf:	e8 8c 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161d4:	83 c4 0c             	add    esp,0xc
c00161d7:	53                   	push   ebx
c00161d8:	6a 04                	push   0x4
c00161da:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161e0:	e8 7b 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e5:	83 c4 0c             	add    esp,0xc
c00161e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00161ed:	50                   	push   eax
c00161ee:	6a 07                	push   0x7
c00161f0:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161f6:	e8 65 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161fb:	83 c4 0c             	add    esp,0xc
c00161fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016203:	50                   	push   eax
c0016204:	6a 08                	push   0x8
c0016206:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001620c:	e8 4f 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016211:	83 c4 0c             	add    esp,0xc
c0016214:	89 e8                	mov    eax,ebp
c0016216:	0f b6 e8             	movzx  ebp,al
c0016219:	55                   	push   ebp
c001621a:	6a 09                	push   0x9
c001621c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016222:	e8 39 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016227:	5a                   	pop    edx
c0016228:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001622c:	e8 9f fb ff ff       	call   c0015dd0 <RTC::completeRTCRefresh()>
c0016231:	83 c4 3c             	add    esp,0x3c
c0016234:	b0 01                	mov    al,0x1
c0016236:	5b                   	pop    ebx
c0016237:	5e                   	pop    esi
c0016238:	5f                   	pop    edi
c0016239:	5d                   	pop    ebp
c001623a:	c3                   	ret    

c001623b <rtcIRQHandler(regs*, void*)>:
c001623b:	53                   	push   ebx
c001623c:	83 ec 10             	sub    esp,0x10
c001623f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016243:	6a 0c                	push   0xc
c0016245:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001624b:	e8 fa 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	84 c0                	test   al,al
c0016255:	79 24                	jns    c001627b <rtcIRQHandler(regs*, void*)+0x40>
c0016257:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001625e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016265:	66 ff 05 b4 3e 02 c0 	inc    WORD PTR ds:0xc0023eb4
c001626c:	75 0d                	jne    c001627b <rtcIRQHandler(regs*, void*)+0x40>
c001626e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016272:	83 c4 08             	add    esp,0x8
c0016275:	5b                   	pop    ebx
c0016276:	e9 55 fb ff ff       	jmp    c0015dd0 <RTC::completeRTCRefresh()>
c001627b:	83 c4 08             	add    esp,0x8
c001627e:	5b                   	pop    ebx
c001627f:	c3                   	ret    

c0016280 <RTC::RTC()>:
c0016280:	83 ec 1c             	sub    esp,0x1c
c0016283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016287:	83 ec 08             	sub    esp,0x8
c001628a:	68 73 ee 01 c0       	push   0xc001ee73
c001628f:	50                   	push   eax
c0016290:	e8 55 58 ff ff       	call   c000baea <Clock::Clock(char const*)>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c001629d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162a1:	89 10                	mov    DWORD PTR [eax],edx
c00162a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ae:	6a 01                	push   0x1
c00162b0:	68 3b 62 01 c0       	push   0xc001623b
c00162b5:	6a 08                	push   0x8
c00162b7:	50                   	push   eax
c00162b8:	e8 17 5d ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162bd:	83 c4 20             	add    esp,0x20
c00162c0:	89 c2                	mov    edx,eax
c00162c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162c6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00162cc:	fa                   	cli    
c00162cd:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00162d2:	40                   	inc    eax
c00162d3:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00162d8:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00162dd:	83 ec 08             	sub    esp,0x8
c00162e0:	6a 0b                	push   0xb
c00162e2:	50                   	push   eax
c00162e3:	e8 62 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162ef:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00162f4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00162f8:	83 ca 10             	or     edx,0x10
c00162fb:	81 e2 ff 00 00 00    	and    edx,0xff
c0016301:	83 ec 04             	sub    esp,0x4
c0016304:	52                   	push   edx
c0016305:	6a 0b                	push   0xb
c0016307:	50                   	push   eax
c0016308:	e8 53 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016317:	e8 b4 fa ff ff       	call   c0015dd0 <RTC::completeRTCRefresh()>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0016324:	48                   	dec    eax
c0016325:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001632a:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001632f:	85 c0                	test   eax,eax
c0016331:	75 01                	jne    c0016334 <RTC::RTC()+0xb4>
c0016333:	fb                   	sti    
c0016334:	90                   	nop
c0016335:	83 c4 1c             	add    esp,0x1c
c0016338:	c3                   	ret    
c0016339:	66 90                	xchg   ax,ax
c001633b:	90                   	nop

c001633c <HalConsoleScroll(int, int)>:
c001633c:	83 ec 10             	sub    esp,0x10
c001633f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016347:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001634f:	90                   	nop
c0016350:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016355:	0f 8f e1 00 00 00    	jg     c001643c <HalConsoleScroll(int, int)+0x100>
c001635b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016363:	90                   	nop
c0016364:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001636c:	0f 8f be 00 00 00    	jg     c0016430 <HalConsoleScroll(int, int)+0xf4>
c0016372:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016376:	89 d0                	mov    eax,edx
c0016378:	c1 e0 02             	shl    eax,0x2
c001637b:	01 d0                	add    eax,edx
c001637d:	c1 e0 05             	shl    eax,0x5
c0016380:	89 c2                	mov    edx,eax
c0016382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016386:	01 d0                	add    eax,edx
c0016388:	89 c2                	mov    edx,eax
c001638a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001638e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016395:	89 d0                	mov    eax,edx
c0016397:	c1 e0 02             	shl    eax,0x2
c001639a:	01 d0                	add    eax,edx
c001639c:	c1 e0 05             	shl    eax,0x5
c001639f:	89 c2                	mov    edx,eax
c00163a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163a5:	01 d0                	add    eax,edx
c00163a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b1:	01 c2                	add    edx,eax
c00163b3:	8a 01                	mov    al,BYTE PTR [ecx]
c00163b5:	88 02                	mov    BYTE PTR [edx],al
c00163b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163bc:	75 66                	jne    c0016424 <HalConsoleScroll(int, int)+0xe8>
c00163be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163c2:	83 e0 01             	and    eax,0x1
c00163c5:	74 39                	je     c0016400 <HalConsoleScroll(int, int)+0xc4>
c00163c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163cb:	83 e0 0f             	and    eax,0xf
c00163ce:	88 c2                	mov    dl,al
c00163d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163d4:	c1 e0 04             	shl    eax,0x4
c00163d7:	88 d1                	mov    cl,dl
c00163d9:	09 c1                	or     ecx,eax
c00163db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163df:	89 d0                	mov    eax,edx
c00163e1:	c1 e0 02             	shl    eax,0x2
c00163e4:	01 d0                	add    eax,edx
c00163e6:	c1 e0 05             	shl    eax,0x5
c00163e9:	89 c2                	mov    edx,eax
c00163eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ef:	01 d0                	add    eax,edx
c00163f1:	89 c2                	mov    edx,eax
c00163f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f7:	01 d0                	add    eax,edx
c00163f9:	88 ca                	mov    dl,cl
c00163fb:	88 10                	mov    BYTE PTR [eax],dl
c00163fd:	eb 25                	jmp    c0016424 <HalConsoleScroll(int, int)+0xe8>
c00163ff:	90                   	nop
c0016400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016404:	89 d0                	mov    eax,edx
c0016406:	c1 e0 02             	shl    eax,0x2
c0016409:	01 d0                	add    eax,edx
c001640b:	c1 e0 05             	shl    eax,0x5
c001640e:	89 c2                	mov    edx,eax
c0016410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016414:	01 d0                	add    eax,edx
c0016416:	89 c2                	mov    edx,eax
c0016418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001641c:	01 d0                	add    eax,edx
c001641e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016421:	8d 76 00             	lea    esi,[esi+0x0]
c0016424:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016428:	e9 37 ff ff ff       	jmp    c0016364 <HalConsoleScroll(int, int)+0x28>
c001642d:	8d 76 00             	lea    esi,[esi+0x0]
c0016430:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016434:	e9 17 ff ff ff       	jmp    c0016350 <HalConsoleScroll(int, int)+0x14>
c0016439:	8d 76 00             	lea    esi,[esi+0x0]
c001643c:	90                   	nop
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	c3                   	ret    
c0016441:	8d 76 00             	lea    esi,[esi+0x0]

c0016444 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016444:	83 ec 14             	sub    esp,0x14
c0016447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001644b:	88 04 24             	mov    BYTE PTR [esp],al
c001644e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016451:	25 ff 00 00 00       	and    eax,0xff
c0016456:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001645a:	89 d1                	mov    ecx,edx
c001645c:	83 e1 0f             	and    ecx,0xf
c001645f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016463:	c1 e2 04             	shl    edx,0x4
c0016466:	81 e2 ff 00 00 00    	and    edx,0xff
c001646c:	09 ca                	or     edx,ecx
c001646e:	c1 e2 08             	shl    edx,0x8
c0016471:	09 d0                	or     eax,edx
c0016473:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016478:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016480:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016484:	89 d0                	mov    eax,edx
c0016486:	c1 e0 02             	shl    eax,0x2
c0016489:	01 d0                	add    eax,edx
c001648b:	c1 e0 04             	shl    eax,0x4
c001648e:	89 c2                	mov    edx,eax
c0016490:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016494:	01 d0                	add    eax,edx
c0016496:	01 c0                	add    eax,eax
c0016498:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001649c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164a0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164a5:	66 89 02             	mov    WORD PTR [edx],ax
c00164a8:	90                   	nop
c00164a9:	83 c4 14             	add    esp,0x14
c00164ac:	c3                   	ret    
c00164ad:	8d 76 00             	lea    esi,[esi+0x0]

c00164b0 <HalConsoleCursorUpdate(int, int)>:
c00164b0:	83 ec 20             	sub    esp,0x20
c00164b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164b7:	89 c2                	mov    edx,eax
c00164b9:	89 d0                	mov    eax,edx
c00164bb:	c1 e0 02             	shl    eax,0x2
c00164be:	01 d0                	add    eax,edx
c00164c0:	c1 e0 04             	shl    eax,0x4
c00164c3:	89 c2                	mov    edx,eax
c00164c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164c9:	01 d0                	add    eax,edx
c00164cb:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00164d0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00164d7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00164dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00164e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164e4:	ee                   	out    dx,al
c00164e5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164ea:	25 ff 00 00 00       	and    eax,0xff
c00164ef:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00164f6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00164fa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00164fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016502:	ee                   	out    dx,al
c0016503:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001650a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001650f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016513:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016517:	ee                   	out    dx,al
c0016518:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001651d:	66 c1 e8 08          	shr    ax,0x8
c0016521:	25 ff 00 00 00       	and    eax,0xff
c0016526:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001652d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016531:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016535:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016539:	ee                   	out    dx,al
c001653a:	90                   	nop
c001653b:	83 c4 20             	add    esp,0x20
c001653e:	c3                   	ret    
c001653f:	90                   	nop

c0016540 <FAT::getName()>:
c0016540:	b8 c4 ee 01 c0       	mov    eax,0xc001eec4
c0016545:	c3                   	ret    
c0016546:	66 90                	xchg   ax,ax

c0016548 <FAT::tell(void*, unsigned long long*)>:
c0016548:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001654d:	75 09                	jne    c0016558 <FAT::tell(void*, unsigned long long*)+0x10>
c001654f:	b8 04 00 00 00       	mov    eax,0x4
c0016554:	c3                   	ret    
c0016555:	8d 76 00             	lea    esi,[esi+0x0]
c0016558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001655d:	75 09                	jne    c0016568 <FAT::tell(void*, unsigned long long*)+0x20>
c001655f:	b8 04 00 00 00       	mov    eax,0x4
c0016564:	c3                   	ret    
c0016565:	8d 76 00             	lea    esi,[esi+0x0]
c0016568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001656c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001656f:	ba 00 00 00 00       	mov    edx,0x0
c0016574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016578:	89 01                	mov    DWORD PTR [ecx],eax
c001657a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001657d:	b8 00 00 00 00       	mov    eax,0x0
c0016582:	c3                   	ret    
c0016583:	90                   	nop

c0016584 <FAT::stat(void*, unsigned long long*)>:
c0016584:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016589:	75 09                	jne    c0016594 <FAT::stat(void*, unsigned long long*)+0x10>
c001658b:	b8 04 00 00 00       	mov    eax,0x4
c0016590:	c3                   	ret    
c0016591:	8d 76 00             	lea    esi,[esi+0x0]
c0016594:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016599:	75 09                	jne    c00165a4 <FAT::stat(void*, unsigned long long*)+0x20>
c001659b:	b8 04 00 00 00       	mov    eax,0x4
c00165a0:	c3                   	ret    
c00165a1:	8d 76 00             	lea    esi,[esi+0x0]
c00165a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165ab:	ba 00 00 00 00       	mov    edx,0x0
c00165b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b4:	89 01                	mov    DWORD PTR [ecx],eax
c00165b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165b9:	b8 00 00 00 00       	mov    eax,0x0
c00165be:	c3                   	ret    
c00165bf:	90                   	nop

c00165c0 <FAT::~FAT()>:
c00165c0:	83 ec 0c             	sub    esp,0xc
c00165c3:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c00165c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165cc:	89 10                	mov    DWORD PTR [eax],edx
c00165ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d2:	83 ec 0c             	sub    esp,0xc
c00165d5:	50                   	push   eax
c00165d6:	e8 53 49 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	90                   	nop
c00165df:	83 c4 0c             	add    esp,0xc
c00165e2:	c3                   	ret    
c00165e3:	90                   	nop

c00165e4 <FAT::~FAT()>:
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	83 ec 0c             	sub    esp,0xc
c00165ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ee:	e8 cd ff ff ff       	call   c00165c0 <FAT::~FAT()>
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	83 ec 08             	sub    esp,0x8
c00165f9:	6a 08                	push   0x8
c00165fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ff:	e8 ee 44 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0016604:	83 c4 10             	add    esp,0x10
c0016607:	83 c4 0c             	add    esp,0xc
c001660a:	c3                   	ret    
c001660b:	90                   	nop

c001660c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001660c:	83 ec 1c             	sub    esp,0x1c
c001660f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016616:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001661b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001661f:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016626:	83 f8 ff             	cmp    eax,0xffffffff
c0016629:	75 35                	jne    c0016660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001662b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001662f:	88 c2                	mov    dl,al
c0016631:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016636:	01 d0                	add    eax,edx
c0016638:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001663c:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c0016642:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016646:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c001664d:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016652:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016656:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c001665d:	eb 19                	jmp    c0016678 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001665f:	90                   	nop
c0016660:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016664:	88 c2                	mov    dl,al
c0016666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001666a:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016671:	01 d0                	add    eax,edx
c0016673:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016677:	90                   	nop
c0016678:	83 ec 04             	sub    esp,0x4
c001667b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001667f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016683:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016687:	50                   	push   eax
c0016688:	e8 e7 e7 fe ff       	call   c0004e74 <f_getlabel>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016694:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016699:	75 09                	jne    c00166a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001669b:	b8 00 00 00 00       	mov    eax,0x0
c00166a0:	eb 0a                	jmp    c00166ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166a2:	66 90                	xchg   ax,ax
c00166a4:	b8 01 00 00 00       	mov    eax,0x1
c00166a9:	8d 76 00             	lea    esi,[esi+0x0]
c00166ac:	83 c4 1c             	add    esp,0x1c
c00166af:	c3                   	ret    

c00166b0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166b0:	57                   	push   edi
c00166b1:	83 ec 58             	sub    esp,0x58
c00166b4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166c0:	b8 00 00 00 00       	mov    eax,0x0
c00166c5:	b9 0f 00 00 00       	mov    ecx,0xf
c00166ca:	fc                   	cld    
c00166cb:	89 d7                	mov    edi,edx
c00166cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00166cf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166d3:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00166da:	83 f8 ff             	cmp    eax,0xffffffff
c00166dd:	75 35                	jne    c0016714 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00166df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166e3:	88 c2                	mov    dl,al
c00166e5:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00166ea:	01 d0                	add    eax,edx
c00166ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166f0:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c00166f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166fa:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016701:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016706:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001670a:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016711:	eb 19                	jmp    c001672c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016713:	90                   	nop
c0016714:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016718:	88 c2                	mov    dl,al
c001671a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001671e:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016725:	01 d0                	add    eax,edx
c0016727:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001672b:	90                   	nop
c001672c:	83 ec 08             	sub    esp,0x8
c001672f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016733:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016737:	50                   	push   eax
c0016738:	e8 a3 a0 fe ff       	call   c00007e0 <strcat>
c001673d:	83 c4 10             	add    esp,0x10
c0016740:	83 ec 0c             	sub    esp,0xc
c0016743:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016747:	50                   	push   eax
c0016748:	e8 78 e8 fe ff       	call   c0004fc5 <f_setlabel>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016754:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016759:	75 09                	jne    c0016764 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001675b:	b8 00 00 00 00       	mov    eax,0x0
c0016760:	eb 0a                	jmp    c001676c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016762:	66 90                	xchg   ax,ax
c0016764:	b8 01 00 00 00       	mov    eax,0x1
c0016769:	8d 76 00             	lea    esi,[esi+0x0]
c001676c:	83 c4 58             	add    esp,0x58
c001676f:	5f                   	pop    edi
c0016770:	c3                   	ret    
c0016771:	90                   	nop
c0016772:	66 90                	xchg   ax,ax

c0016774 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016774:	83 ec 2c             	sub    esp,0x2c
c0016777:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001677f:	83 ec 08             	sub    esp,0x8
c0016782:	68 e8 ee 01 c0       	push   0xc001eee8
c0016787:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001678b:	e8 70 9f fe ff       	call   c0000700 <strcmp>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	85 c0                	test   eax,eax
c0016795:	0f 94 c0             	sete   al
c0016798:	84 c0                	test   al,al
c001679a:	74 10                	je     c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001679c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167a4:	e9 b3 00 00 00       	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167a9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ac:	83 ec 08             	sub    esp,0x8
c00167af:	68 da ee 01 c0       	push   0xc001eeda
c00167b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167b8:	e8 43 9f fe ff       	call   c0000700 <strcmp>
c00167bd:	83 c4 10             	add    esp,0x10
c00167c0:	85 c0                	test   eax,eax
c00167c2:	0f 94 c0             	sete   al
c00167c5:	84 c0                	test   al,al
c00167c7:	74 0f                	je     c00167d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00167c9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167d1:	e9 86 00 00 00       	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167d6:	66 90                	xchg   ax,ax
c00167d8:	83 ec 08             	sub    esp,0x8
c00167db:	68 e0 ee 01 c0       	push   0xc001eee0
c00167e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167e4:	e8 17 9f fe ff       	call   c0000700 <strcmp>
c00167e9:	83 c4 10             	add    esp,0x10
c00167ec:	85 c0                	test   eax,eax
c00167ee:	0f 94 c0             	sete   al
c00167f1:	84 c0                	test   al,al
c00167f3:	74 0b                	je     c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00167f5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167fd:	eb 5d                	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167ff:	90                   	nop
c0016800:	83 ec 08             	sub    esp,0x8
c0016803:	68 9c cf 01 c0       	push   0xc001cf9c
c0016808:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001680c:	e8 ef 9e fe ff       	call   c0000700 <strcmp>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	85 c0                	test   eax,eax
c0016816:	0f 94 c0             	sete   al
c0016819:	84 c0                	test   al,al
c001681b:	74 0b                	je     c0016828 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001681d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016825:	eb 35                	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016827:	90                   	nop
c0016828:	83 ec 08             	sub    esp,0x8
c001682b:	68 e6 ee 01 c0       	push   0xc001eee6
c0016830:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016834:	e8 c7 9e fe ff       	call   c0000700 <strcmp>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	85 c0                	test   eax,eax
c001683e:	0f 94 c0             	sete   al
c0016841:	84 c0                	test   al,al
c0016843:	74 0b                	je     c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016845:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001684d:	eb 0d                	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001684f:	90                   	nop
c0016850:	b8 08 00 00 00       	mov    eax,0x8
c0016855:	e9 ea 00 00 00       	jmp    c0016944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001685a:	66 90                	xchg   ax,ax
c001685c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016863:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001686c:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016873:	83 f8 ff             	cmp    eax,0xffffffff
c0016876:	75 34                	jne    c00168ac <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016878:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001687c:	88 c2                	mov    dl,al
c001687e:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016883:	01 d0                	add    eax,edx
c0016885:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016889:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001688f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016893:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c001689a:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001689f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168a3:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00168aa:	eb 18                	jmp    c00168c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168ac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168b0:	88 c2                	mov    dl,al
c00168b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168b6:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00168bd:	01 d0                	add    eax,edx
c00168bf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168c3:	90                   	nop
c00168c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168c8:	88 04 24             	mov    BYTE PTR [esp],al
c00168cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00168db:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00168e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	68 00 20 00 00       	push   0x2000
c00168f0:	e8 64 15 ff ff       	call   c0007e59 <malloc>
c00168f5:	83 c4 10             	add    esp,0x10
c00168f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168fc:	68 00 20 00 00       	push   0x2000
c0016901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016905:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016909:	50                   	push   eax
c001690a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001690e:	50                   	push   eax
c001690f:	e8 a1 e9 fe ff       	call   c00052b5 <f_mkfs>
c0016914:	83 c4 10             	add    esp,0x10
c0016917:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001691b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016920:	75 0a                	jne    c001692c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016922:	b8 00 00 00 00       	mov    eax,0x0
c0016927:	eb 1b                	jmp    c0016944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016929:	8d 76 00             	lea    esi,[esi+0x0]
c001692c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016931:	75 09                	jne    c001693c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016933:	b8 09 00 00 00       	mov    eax,0x9
c0016938:	eb 0a                	jmp    c0016944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001693a:	66 90                	xchg   ax,ax
c001693c:	b8 01 00 00 00       	mov    eax,0x1
c0016941:	8d 76 00             	lea    esi,[esi+0x0]
c0016944:	83 c4 2c             	add    esp,0x2c
c0016947:	c3                   	ret    

c0016948 <FAT::tryMount(LogicalDisk*, int)>:
c0016948:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001694e:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016953:	83 f8 14             	cmp    eax,0x14
c0016956:	75 18                	jne    c0016970 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	68 ec ee 01 c0       	push   0xc001eeec
c0016960:	e8 82 9d ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	b0 00                	mov    al,0x0
c001696a:	e9 e9 01 00 00       	jmp    c0016b58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001696f:	90                   	nop
c0016970:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016977:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001697d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016983:	3d 00 02 00 00       	cmp    eax,0x200
c0016988:	74 0a                	je     c0016994 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001698a:	b0 00                	mov    al,0x0
c001698c:	e9 c7 01 00 00       	jmp    c0016b58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016991:	8d 76 00             	lea    esi,[esi+0x0]
c0016994:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001699c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169a3:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00169aa:	83 f8 ff             	cmp    eax,0xffffffff
c00169ad:	74 09                	je     c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169af:	b0 01                	mov    al,0x1
c00169b1:	e9 a2 01 00 00       	jmp    c0016b58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b6:	66 90                	xchg   ax,ax
c00169b8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169c2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00169ca:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00169d1:	88 c2                	mov    dl,al
c00169d3:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00169d8:	01 d0                	add    eax,edx
c00169da:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00169e1:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c00169e7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169ee:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c00169f5:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00169fa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a01:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	68 34 02 00 00       	push   0x234
c0016a10:	e8 44 14 ff ff       	call   c0007e59 <malloc>
c0016a15:	83 c4 10             	add    esp,0x10
c0016a18:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a1f:	83 ec 04             	sub    esp,0x4
c0016a22:	6a 00                	push   0x0
c0016a24:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a2b:	50                   	push   eax
c0016a2c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a33:	e8 a3 d0 fe ff       	call   c0003adb <f_mount>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a42:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a4a:	74 1c                	je     c0016a68 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a56:	e8 1e 14 ff ff       	call   c0007e79 <rfree>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	b0 00                	mov    al,0x0
c0016a60:	e9 f3 00 00 00       	jmp    c0016b58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a65:	8d 76 00             	lea    esi,[esi+0x0]
c0016a68:	83 ec 04             	sub    esp,0x4
c0016a6b:	68 00 01 00 00       	push   0x100
c0016a70:	6a 00                	push   0x0
c0016a72:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a79:	50                   	push   eax
c0016a7a:	e8 71 9a fe ff       	call   c00004f0 <memset>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	83 ec 08             	sub    esp,0x8
c0016a85:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a8c:	50                   	push   eax
c0016a8d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a94:	50                   	push   eax
c0016a95:	e8 46 9d fe ff       	call   c00007e0 <strcat>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	83 ec 08             	sub    esp,0x8
c0016aa0:	68 fa ee 01 c0       	push   0xc001eefa
c0016aa5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aac:	50                   	push   eax
c0016aad:	e8 2e 9d fe ff       	call   c00007e0 <strcat>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	83 ec 04             	sub    esp,0x4
c0016ab8:	6a 01                	push   0x1
c0016aba:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016ac1:	50                   	push   eax
c0016ac2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ac6:	50                   	push   eax
c0016ac7:	e8 71 d0 fe ff       	call   c0003b3d <f_open>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ad6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016add:	85 c0                	test   eax,eax
c0016adf:	74 0b                	je     c0016aec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016ae1:	78 31                	js     c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016ae3:	83 e8 04             	sub    eax,0x4
c0016ae6:	83 f8 01             	cmp    eax,0x1
c0016ae9:	77 29                	ja     c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016aeb:	90                   	nop
c0016aec:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016afb:	50                   	push   eax
c0016afc:	e8 ef d7 fe ff       	call   c00042f0 <f_close>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	90                   	nop
c0016b05:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b0d:	74 41                	je     c0016b50 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b0f:	eb 33                	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b11:	8d 76 00             	lea    esi,[esi+0x0]
c0016b14:	83 ec 0c             	sub    esp,0xc
c0016b17:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b1e:	e8 56 13 ff ff       	call   c0007e79 <rfree>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	83 ec 04             	sub    esp,0x4
c0016b29:	6a 00                	push   0x0
c0016b2b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b32:	50                   	push   eax
c0016b33:	6a 00                	push   0x0
c0016b35:	e8 a1 cf fe ff       	call   c0003adb <f_mount>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	b0 00                	mov    al,0x0
c0016b3f:	eb 17                	jmp    c0016b58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b41:	8d 76 00             	lea    esi,[esi+0x0]
c0016b44:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016b49:	40                   	inc    eax
c0016b4a:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0016b4f:	90                   	nop
c0016b50:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b57:	90                   	nop
c0016b58:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b5e:	c3                   	ret    
c0016b5f:	90                   	nop

c0016b60 <FAT::allocateSwapfile(char const*, int)>:
c0016b60:	55                   	push   ebp
c0016b61:	57                   	push   edi
c0016b62:	56                   	push   esi
c0016b63:	53                   	push   ebx
c0016b64:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b6a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b75:	83 ec 0c             	sub    esp,0xc
c0016b78:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b7f:	e8 d5 12 ff ff       	call   c0007e59 <malloc>
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	89 c7                	mov    edi,eax
c0016b89:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0016b8e:	83 ec 04             	sub    esp,0x4
c0016b91:	50                   	push   eax
c0016b92:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b99:	57                   	push   edi
c0016b9a:	e8 bf 45 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0016b9f:	83 c4 10             	add    esp,0x10
c0016ba2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016ba9:	83 ec 04             	sub    esp,0x4
c0016bac:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bb0:	50                   	push   eax
c0016bb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bb5:	50                   	push   eax
c0016bb6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bbd:	e8 08 49 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bcc:	c1 e0 14             	shl    eax,0x14
c0016bcf:	89 c7                	mov    edi,eax
c0016bd1:	89 c5                	mov    ebp,eax
c0016bd3:	c1 fd 1f             	sar    ebp,0x1f
c0016bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bde:	89 f9                	mov    ecx,edi
c0016be0:	31 c1                	xor    ecx,eax
c0016be2:	89 cb                	mov    ebx,ecx
c0016be4:	89 e9                	mov    ecx,ebp
c0016be6:	31 d1                	xor    ecx,edx
c0016be8:	89 ce                	mov    esi,ecx
c0016bea:	89 f0                	mov    eax,esi
c0016bec:	09 d8                	or     eax,ebx
c0016bee:	0f 84 9c 00 00 00    	je     c0016c90 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bfe:	e8 93 47 ff ff       	call   c000b396 <File::unlink()>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	83 ec 08             	sub    esp,0x8
c0016c09:	6a 12                	push   0x12
c0016c0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c12:	e8 07 46 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c21:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c27:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c2e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c35:	c1 e0 14             	shl    eax,0x14
c0016c38:	83 ec 04             	sub    esp,0x4
c0016c3b:	6a 01                	push   0x1
c0016c3d:	50                   	push   eax
c0016c3e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c45:	e8 0b e5 fe ff       	call   c0005155 <f_expand>
c0016c4a:	83 c4 10             	add    esp,0x10
c0016c4d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c56:	83 c0 10             	add    eax,0x10
c0016c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c5b:	83 ec 0c             	sub    esp,0xc
c0016c5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c62:	52                   	push   edx
c0016c63:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c67:	52                   	push   edx
c0016c68:	6a 00                	push   0x0
c0016c6a:	68 00 04 00 00       	push   0x400
c0016c6f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c76:	ff d0                	call   eax
c0016c78:	83 c4 20             	add    esp,0x20
c0016c7b:	83 ec 0c             	sub    esp,0xc
c0016c7e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c85:	e8 f2 45 ff ff       	call   c000b27c <File::close()>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c90:	83 ec 08             	sub    esp,0x8
c0016c93:	6a 01                	push   0x1
c0016c95:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c9c:	e8 7d 45 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016ca1:	83 c4 10             	add    esp,0x10
c0016ca4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cad:	83 c0 0c             	add    eax,0xc
c0016cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb2:	83 ec 0c             	sub    esp,0xc
c0016cb5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cb9:	52                   	push   edx
c0016cba:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016cbe:	52                   	push   edx
c0016cbf:	6a 00                	push   0x0
c0016cc1:	6a 04                	push   0x4
c0016cc3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cca:	ff d0                	call   eax
c0016ccc:	83 c4 20             	add    esp,0x20
c0016ccf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cd6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016cdc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ce3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016cea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016ced:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cfe:	e8 79 45 ff ff       	call   c000b27c <File::close()>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d0d:	ba 00 00 00 00       	mov    edx,0x0
c0016d12:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d18:	5b                   	pop    ebx
c0016d19:	5e                   	pop    esi
c0016d1a:	5f                   	pop    edi
c0016d1b:	5d                   	pop    ebp
c0016d1c:	c3                   	ret    
c0016d1d:	90                   	nop
c0016d1e:	66 90                	xchg   ax,ax

c0016d20 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d20:	57                   	push   edi
c0016d21:	56                   	push   esi
c0016d22:	53                   	push   ebx
c0016d23:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d29:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d31:	74 0d                	je     c0016d40 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d33:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d3b:	75 0f                	jne    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d40:	b8 04 00 00 00       	mov    eax,0x4
c0016d45:	e9 36 01 00 00       	jmp    c0016e80 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d4a:	66 90                	xchg   ax,ax
c0016d4c:	83 ec 08             	sub    esp,0x8
c0016d4f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d56:	50                   	push   eax
c0016d57:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d5e:	e8 50 d8 fe ff       	call   c00045b3 <f_readdir>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d6d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d7e:	83 c0 16             	add    eax,0x16
c0016d81:	50                   	push   eax
c0016d82:	e8 d9 97 fe ff       	call   c0000560 <strlen>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	ba 00 00 00 00       	mov    edx,0x0
c0016d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d93:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d97:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d9e:	25 ff 00 00 00       	and    eax,0xff
c0016da3:	83 e0 10             	and    eax,0x10
c0016da6:	74 08                	je     c0016db0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016da8:	b8 02 00 00 00       	mov    eax,0x2
c0016dad:	eb 09                	jmp    c0016db8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016daf:	90                   	nop
c0016db0:	b8 01 00 00 00       	mov    eax,0x1
c0016db5:	8d 76 00             	lea    esi,[esi+0x0]
c0016db8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dbc:	83 ec 08             	sub    esp,0x8
c0016dbf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dc6:	83 c0 16             	add    eax,0x16
c0016dc9:	50                   	push   eax
c0016dca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016dce:	83 c0 10             	add    eax,0x10
c0016dd1:	50                   	push   eax
c0016dd2:	e8 49 98 fe ff       	call   c0000620 <strcpy>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016de1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016de8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dec:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016df3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016dfa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e01:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e08:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e0f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e16:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e1d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e24:	89 c6                	mov    esi,eax
c0016e26:	89 d7                	mov    edi,edx
c0016e28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2a:	89 c8                	mov    eax,ecx
c0016e2c:	89 fa                	mov    edx,edi
c0016e2e:	89 f3                	mov    ebx,esi
c0016e30:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e37:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e3e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e45:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e4c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e52:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e59:	84 c0                	test   al,al
c0016e5b:	75 07                	jne    c0016e64 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e5d:	b8 07 00 00 00       	mov    eax,0x7
c0016e62:	eb 1c                	jmp    c0016e80 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e64:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e6b:	85 c0                	test   eax,eax
c0016e6d:	75 09                	jne    c0016e78 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e6f:	b8 00 00 00 00       	mov    eax,0x0
c0016e74:	eb 0a                	jmp    c0016e80 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e76:	66 90                	xchg   ax,ax
c0016e78:	b8 01 00 00 00       	mov    eax,0x1
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	81 c4 50 02 00 00    	add    esp,0x250
c0016e86:	5b                   	pop    ebx
c0016e87:	5e                   	pop    esi
c0016e88:	5f                   	pop    edi
c0016e89:	c3                   	ret    
c0016e8a:	66 90                	xchg   ax,ax

c0016e8c <FAT::read(void*, unsigned long, void*, int*)>:
c0016e8c:	83 ec 1c             	sub    esp,0x1c
c0016e8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e94:	74 0a                	je     c0016ea0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e96:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e9b:	75 0b                	jne    c0016ea8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea0:	b8 04 00 00 00       	mov    eax,0x4
c0016ea5:	eb 41                	jmp    c0016ee8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ea7:	90                   	nop
c0016ea8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016eac:	50                   	push   eax
c0016ead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016eb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016eb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eb9:	e8 4a cf fe ff       	call   c0003e08 <f_read>
c0016ebe:	83 c4 10             	add    esp,0x10
c0016ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ec9:	89 c2                	mov    edx,eax
c0016ecb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ecf:	89 10                	mov    DWORD PTR [eax],edx
c0016ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ed5:	85 c0                	test   eax,eax
c0016ed7:	75 07                	jne    c0016ee0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016ed9:	b8 00 00 00 00       	mov    eax,0x0
c0016ede:	eb 08                	jmp    c0016ee8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ee0:	b8 01 00 00 00       	mov    eax,0x1
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	83 c4 1c             	add    esp,0x1c
c0016eeb:	c3                   	ret    

c0016eec <FAT::write(void*, unsigned long, void*, int*)>:
c0016eec:	83 ec 1c             	sub    esp,0x1c
c0016eef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ef4:	74 0a                	je     c0016f00 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016ef6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016efb:	75 0b                	jne    c0016f08 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]
c0016f00:	b8 04 00 00 00       	mov    eax,0x4
c0016f05:	eb 41                	jmp    c0016f48 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f07:	90                   	nop
c0016f08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f0c:	50                   	push   eax
c0016f0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f19:	e8 e9 d0 fe ff       	call   c0004007 <f_write>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f29:	89 c2                	mov    edx,eax
c0016f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f2f:	89 10                	mov    DWORD PTR [eax],edx
c0016f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f35:	85 c0                	test   eax,eax
c0016f37:	75 07                	jne    c0016f40 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f39:	b8 00 00 00 00       	mov    eax,0x0
c0016f3e:	eb 08                	jmp    c0016f48 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f40:	b8 01 00 00 00       	mov    eax,0x1
c0016f45:	8d 76 00             	lea    esi,[esi+0x0]
c0016f48:	83 c4 1c             	add    esp,0x1c
c0016f4b:	c3                   	ret    

c0016f4c <FAT::close(void*)>:
c0016f4c:	83 ec 1c             	sub    esp,0x1c
c0016f4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f54:	75 0a                	jne    c0016f60 <FAT::close(void*)+0x14>
c0016f56:	b8 04 00 00 00       	mov    eax,0x4
c0016f5b:	eb 3f                	jmp    c0016f9c <FAT::close(void*)+0x50>
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f67:	e8 84 d3 fe ff       	call   c00042f0 <f_close>
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f73:	83 ec 0c             	sub    esp,0xc
c0016f76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f7a:	e8 ea 0e ff ff       	call   c0007e69 <free>
c0016f7f:	83 c4 10             	add    esp,0x10
c0016f82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f86:	85 c0                	test   eax,eax
c0016f88:	75 0a                	jne    c0016f94 <FAT::close(void*)+0x48>
c0016f8a:	b8 00 00 00 00       	mov    eax,0x0
c0016f8f:	eb 0b                	jmp    c0016f9c <FAT::close(void*)+0x50>
c0016f91:	8d 76 00             	lea    esi,[esi+0x0]
c0016f94:	b8 01 00 00 00       	mov    eax,0x1
c0016f99:	8d 76 00             	lea    esi,[esi+0x0]
c0016f9c:	83 c4 1c             	add    esp,0x1c
c0016f9f:	c3                   	ret    

c0016fa0 <FAT::closeDir(void*)>:
c0016fa0:	83 ec 1c             	sub    esp,0x1c
c0016fa3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fa8:	75 0a                	jne    c0016fb4 <FAT::closeDir(void*)+0x14>
c0016faa:	b8 04 00 00 00       	mov    eax,0x4
c0016faf:	eb 3f                	jmp    c0016ff0 <FAT::closeDir(void*)+0x50>
c0016fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fbb:	e8 d1 d5 fe ff       	call   c0004591 <f_closedir>
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc7:	83 ec 0c             	sub    esp,0xc
c0016fca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fce:	e8 96 0e ff ff       	call   c0007e69 <free>
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fda:	85 c0                	test   eax,eax
c0016fdc:	75 0a                	jne    c0016fe8 <FAT::closeDir(void*)+0x48>
c0016fde:	b8 00 00 00 00       	mov    eax,0x0
c0016fe3:	eb 0b                	jmp    c0016ff0 <FAT::closeDir(void*)+0x50>
c0016fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe8:	b8 01 00 00 00       	mov    eax,0x1
c0016fed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff0:	83 c4 1c             	add    esp,0x1c
c0016ff3:	c3                   	ret    

c0016ff4 <FAT::seek(void*, unsigned long long)>:
c0016ff4:	83 ec 2c             	sub    esp,0x2c
c0016ff7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ffb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017007:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001700c:	75 0a                	jne    c0017018 <FAT::seek(void*, unsigned long long)+0x24>
c001700e:	b8 04 00 00 00       	mov    eax,0x4
c0017013:	eb 33                	jmp    c0017048 <FAT::seek(void*, unsigned long long)+0x54>
c0017015:	8d 76 00             	lea    esi,[esi+0x0]
c0017018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001701c:	83 ec 08             	sub    esp,0x8
c001701f:	50                   	push   eax
c0017020:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017024:	e8 f6 d2 fe ff       	call   c000431f <f_lseek>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017034:	85 c0                	test   eax,eax
c0017036:	75 08                	jne    c0017040 <FAT::seek(void*, unsigned long long)+0x4c>
c0017038:	b8 00 00 00 00       	mov    eax,0x0
c001703d:	eb 09                	jmp    c0017048 <FAT::seek(void*, unsigned long long)+0x54>
c001703f:	90                   	nop
c0017040:	b8 01 00 00 00       	mov    eax,0x1
c0017045:	8d 76 00             	lea    esi,[esi+0x0]
c0017048:	83 c4 2c             	add    esp,0x2c
c001704b:	c3                   	ret    

c001704c <fatWrapperReadDisk>:
c001704c:	53                   	push   ebx
c001704d:	83 ec 18             	sub    esp,0x18
c0017050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017054:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017058:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001705c:	25 ff 00 00 00       	and    eax,0xff
c0017061:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c0017068:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001706c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017070:	ba 00 00 00 00       	mov    edx,0x0
c0017075:	83 ec 0c             	sub    esp,0xc
c0017078:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001707c:	53                   	push   ebx
c001707d:	52                   	push   edx
c001707e:	50                   	push   eax
c001707f:	51                   	push   ecx
c0017080:	e8 4b 62 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017085:	83 c4 20             	add    esp,0x20
c0017088:	83 c4 18             	add    esp,0x18
c001708b:	5b                   	pop    ebx
c001708c:	c3                   	ret    
c001708d:	8d 76 00             	lea    esi,[esi+0x0]

c0017090 <fatWrapperWriteDisk>:
c0017090:	53                   	push   ebx
c0017091:	83 ec 18             	sub    esp,0x18
c0017094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017098:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001709c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a0:	25 ff 00 00 00       	and    eax,0xff
c00170a5:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c00170ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b4:	ba 00 00 00 00       	mov    edx,0x0
c00170b9:	83 ec 0c             	sub    esp,0xc
c00170bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170c0:	53                   	push   ebx
c00170c1:	52                   	push   edx
c00170c2:	50                   	push   eax
c00170c3:	51                   	push   ecx
c00170c4:	e8 73 62 ff ff       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c00170c9:	83 c4 20             	add    esp,0x20
c00170cc:	83 c4 18             	add    esp,0x18
c00170cf:	5b                   	pop    ebx
c00170d0:	c3                   	ret    
c00170d1:	8d 76 00             	lea    esi,[esi+0x0]

c00170d4 <fatWrapperIoctl>:
c00170d4:	53                   	push   ebx
c00170d5:	83 ec 28             	sub    esp,0x28
c00170d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170e8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00170ed:	75 35                	jne    c0017124 <fatWrapperIoctl+0x50>
c00170ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170fb:	25 ff 00 00 00       	and    eax,0xff
c0017100:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c0017107:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001710d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017113:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017117:	66 89 02             	mov    WORD PTR [edx],ax
c001711a:	b8 00 00 00 00       	mov    eax,0x0
c001711f:	e9 c4 00 00 00       	jmp    c00171e8 <fatWrapperIoctl+0x114>
c0017124:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017129:	75 75                	jne    c00171a0 <fatWrapperIoctl+0xcc>
c001712b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001712f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017133:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017137:	25 ff 00 00 00       	and    eax,0xff
c001713c:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c0017143:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017149:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001714f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017155:	89 c8                	mov    eax,ecx
c0017157:	89 da                	mov    edx,ebx
c0017159:	0f a4 c2 0a          	shld   edx,eax,0xa
c001715d:	c1 e0 0a             	shl    eax,0xa
c0017160:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017164:	81 e1 ff 00 00 00    	and    ecx,0xff
c001716a:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c0017171:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017177:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001717d:	89 cb                	mov    ebx,ecx
c001717f:	c1 fb 1f             	sar    ebx,0x1f
c0017182:	53                   	push   ebx
c0017183:	51                   	push   ecx
c0017184:	52                   	push   edx
c0017185:	50                   	push   eax
c0017186:	e8 25 50 00 00       	call   c001c1b0 <__udivdi3>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	89 c2                	mov    edx,eax
c0017190:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017194:	89 10                	mov    DWORD PTR [eax],edx
c0017196:	b8 00 00 00 00       	mov    eax,0x0
c001719b:	eb 4b                	jmp    c00171e8 <fatWrapperIoctl+0x114>
c001719d:	8d 76 00             	lea    esi,[esi+0x0]
c00171a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171a5:	75 09                	jne    c00171b0 <fatWrapperIoctl+0xdc>
c00171a7:	b8 00 00 00 00       	mov    eax,0x0
c00171ac:	eb 3a                	jmp    c00171e8 <fatWrapperIoctl+0x114>
c00171ae:	66 90                	xchg   ax,ax
c00171b0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171b5:	75 19                	jne    c00171d0 <fatWrapperIoctl+0xfc>
c00171b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171c3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00171c9:	b8 00 00 00 00       	mov    eax,0x0
c00171ce:	eb 18                	jmp    c00171e8 <fatWrapperIoctl+0x114>
c00171d0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00171d5:	75 09                	jne    c00171e0 <fatWrapperIoctl+0x10c>
c00171d7:	b8 00 00 00 00       	mov    eax,0x0
c00171dc:	eb 0a                	jmp    c00171e8 <fatWrapperIoctl+0x114>
c00171de:	66 90                	xchg   ax,ax
c00171e0:	b8 04 00 00 00       	mov    eax,0x4
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	83 c4 28             	add    esp,0x28
c00171eb:	5b                   	pop    ebx
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop
c00171ee:	66 90                	xchg   ax,ax

c00171f0 <FAT::FAT()>:
c00171f0:	83 ec 1c             	sub    esp,0x1c
c00171f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171f7:	83 ec 0c             	sub    esp,0xc
c00171fa:	50                   	push   eax
c00171fb:	e8 0a 3d ff ff       	call   c000af0a <Filesystem::Filesystem()>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0017208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001720c:	89 10                	mov    DWORD PTR [eax],edx
c001720e:	c7 05 c0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ec0,0x0
c0017218:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017220:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017225:	7f 15                	jg     c001723c <FAT::FAT()+0x4c>
c0017227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722b:	c7 04 85 e0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc120],0xffffffff
c0017236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001723a:	eb e4                	jmp    c0017220 <FAT::FAT()+0x30>
c001723c:	90                   	nop
c001723d:	83 c4 1c             	add    esp,0x1c
c0017240:	c3                   	ret    
c0017241:	90                   	nop
c0017242:	66 90                	xchg   ax,ax

c0017244 <FAT::fixFilepath(char*)>:
c0017244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017248:	8a 00                	mov    al,BYTE PTR [eax]
c001724a:	3c 40                	cmp    al,0x40
c001724c:	7e 2e                	jle    c001727c <FAT::fixFilepath(char*)+0x38>
c001724e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017252:	8a 00                	mov    al,BYTE PTR [eax]
c0017254:	83 e8 41             	sub    eax,0x41
c0017257:	88 c2                	mov    dl,al
c0017259:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001725d:	88 10                	mov    BYTE PTR [eax],dl
c001725f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017263:	8a 00                	mov    al,BYTE PTR [eax]
c0017265:	0f be c0             	movsx  eax,al
c0017268:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001726f:	83 c0 30             	add    eax,0x30
c0017272:	88 c2                	mov    dl,al
c0017274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017278:	88 10                	mov    BYTE PTR [eax],dl
c001727a:	66 90                	xchg   ax,ax
c001727c:	90                   	nop
c001727d:	c3                   	ret    
c001727e:	66 90                	xchg   ax,ax

c0017280 <FAT::open(char const*, void**, FileOpenMode)>:
c0017280:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017286:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001728e:	74 0c                	je     c001729c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017290:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017298:	75 0e                	jne    c00172a8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001729a:	66 90                	xchg   ax,ax
c001729c:	b8 04 00 00 00       	mov    eax,0x4
c00172a1:	e9 0a 01 00 00       	jmp    c00173b0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172a6:	66 90                	xchg   ax,ax
c00172a8:	83 ec 08             	sub    esp,0x8
c00172ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172b6:	50                   	push   eax
c00172b7:	e8 64 93 fe ff       	call   c0000620 <strcpy>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	83 ec 08             	sub    esp,0x8
c00172c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172c6:	50                   	push   eax
c00172c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ce:	e8 71 ff ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00172de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172e5:	83 e0 01             	and    eax,0x1
c00172e8:	74 0a                	je     c00172f4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00172ea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00172f2:	66 90                	xchg   ax,ax
c00172f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172fb:	83 e0 04             	and    eax,0x4
c00172fe:	74 10                	je     c0017310 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017300:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017308:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017310:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017317:	83 e0 02             	and    eax,0x2
c001731a:	74 08                	je     c0017324 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001731c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001732b:	83 e0 08             	and    eax,0x8
c001732e:	74 08                	je     c0017338 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017330:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017338:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733f:	83 e0 10             	and    eax,0x10
c0017342:	74 08                	je     c001734c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017344:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001734c:	83 ec 0c             	sub    esp,0xc
c001734f:	68 28 02 00 00       	push   0x228
c0017354:	e8 00 0b ff ff       	call   c0007e59 <malloc>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	89 c2                	mov    edx,eax
c001735e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017365:	89 10                	mov    DWORD PTR [eax],edx
c0017367:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001736e:	31 d2                	xor    edx,edx
c0017370:	88 c2                	mov    dl,al
c0017372:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017379:	8b 00                	mov    eax,DWORD PTR [eax]
c001737b:	83 ec 04             	sub    esp,0x4
c001737e:	52                   	push   edx
c001737f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017383:	52                   	push   edx
c0017384:	50                   	push   eax
c0017385:	e8 b3 c7 fe ff       	call   c0003b3d <f_open>
c001738a:	83 c4 10             	add    esp,0x10
c001738d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017394:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001739c:	74 0a                	je     c00173a8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001739e:	b8 01 00 00 00       	mov    eax,0x1
c00173a3:	eb 0b                	jmp    c00173b0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173a5:	8d 76 00             	lea    esi,[esi+0x0]
c00173a8:	b8 00 00 00 00       	mov    eax,0x0
c00173ad:	8d 76 00             	lea    esi,[esi+0x0]
c00173b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173b6:	c3                   	ret    
c00173b7:	90                   	nop

c00173b8 <FAT::openDir(char const*, void**)>:
c00173b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173c6:	74 0c                	je     c00173d4 <FAT::openDir(char const*, void**)+0x1c>
c00173c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00173d0:	75 0e                	jne    c00173e0 <FAT::openDir(char const*, void**)+0x28>
c00173d2:	66 90                	xchg   ax,ax
c00173d4:	b8 04 00 00 00       	mov    eax,0x4
c00173d9:	e9 82 00 00 00       	jmp    c0017460 <FAT::openDir(char const*, void**)+0xa8>
c00173de:	66 90                	xchg   ax,ax
c00173e0:	83 ec 08             	sub    esp,0x8
c00173e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173ee:	50                   	push   eax
c00173ef:	e8 2c 92 fe ff       	call   c0000620 <strcpy>
c00173f4:	83 c4 10             	add    esp,0x10
c00173f7:	83 ec 08             	sub    esp,0x8
c00173fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173fe:	50                   	push   eax
c00173ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017406:	e8 39 fe ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	83 ec 0c             	sub    esp,0xc
c0017411:	6a 30                	push   0x30
c0017413:	e8 41 0a ff ff       	call   c0007e59 <malloc>
c0017418:	83 c4 10             	add    esp,0x10
c001741b:	89 c2                	mov    edx,eax
c001741d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017424:	89 10                	mov    DWORD PTR [eax],edx
c0017426:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001742d:	8b 00                	mov    eax,DWORD PTR [eax]
c001742f:	83 ec 08             	sub    esp,0x8
c0017432:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017436:	52                   	push   edx
c0017437:	50                   	push   eax
c0017438:	e8 89 d0 fe ff       	call   c00044c6 <f_opendir>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017447:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001744f:	74 07                	je     c0017458 <FAT::openDir(char const*, void**)+0xa0>
c0017451:	b8 01 00 00 00       	mov    eax,0x1
c0017456:	eb 08                	jmp    c0017460 <FAT::openDir(char const*, void**)+0xa8>
c0017458:	b8 00 00 00 00       	mov    eax,0x0
c001745d:	8d 76 00             	lea    esi,[esi+0x0]
c0017460:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017466:	c3                   	ret    
c0017467:	90                   	nop

c0017468 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017468:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001746e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017476:	75 0c                	jne    c0017484 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017478:	b8 04 00 00 00       	mov    eax,0x4
c001747d:	e9 d6 00 00 00       	jmp    c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017482:	66 90                	xchg   ax,ax
c0017484:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001748c:	75 0a                	jne    c0017498 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001748e:	b8 04 00 00 00       	mov    eax,0x4
c0017493:	e9 c0 00 00 00       	jmp    c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017498:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174a0:	75 0a                	jne    c00174ac <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174a2:	b8 04 00 00 00       	mov    eax,0x4
c00174a7:	e9 ac 00 00 00       	jmp    c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ac:	83 ec 08             	sub    esp,0x8
c00174af:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174b6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174bd:	50                   	push   eax
c00174be:	e8 5d 91 fe ff       	call   c0000620 <strcpy>
c00174c3:	83 c4 10             	add    esp,0x10
c00174c6:	83 ec 08             	sub    esp,0x8
c00174c9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00174d0:	50                   	push   eax
c00174d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174d8:	e8 67 fd ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	83 ec 08             	sub    esp,0x8
c00174e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174e7:	50                   	push   eax
c00174e8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174ef:	50                   	push   eax
c00174f0:	e8 50 d1 fe ff       	call   c0004645 <f_stat>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00174ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017506:	85 c0                	test   eax,eax
c0017508:	74 0a                	je     c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001750a:	83 f8 04             	cmp    eax,0x4
c001750d:	74 39                	je     c0017548 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001750f:	eb 3f                	jmp    c0017550 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017511:	8d 76 00             	lea    esi,[esi+0x0]
c0017514:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017518:	25 ff 00 00 00       	and    eax,0xff
c001751d:	83 e0 10             	and    eax,0x10
c0017520:	0f 95 c2             	setne  dl
c0017523:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001752a:	88 10                	mov    BYTE PTR [eax],dl
c001752c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017530:	ba 00 00 00 00       	mov    edx,0x0
c0017535:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001753c:	89 01                	mov    DWORD PTR [ecx],eax
c001753e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017541:	b8 00 00 00 00       	mov    eax,0x0
c0017546:	eb 10                	jmp    c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017548:	b8 02 00 00 00       	mov    eax,0x2
c001754d:	eb 09                	jmp    c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001754f:	90                   	nop
c0017550:	b8 01 00 00 00       	mov    eax,0x1
c0017555:	8d 76 00             	lea    esi,[esi+0x0]
c0017558:	81 c4 2c 02 00 00    	add    esp,0x22c
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <FAT::unlink(char const*)>:
c0017560:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017566:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001756e:	75 08                	jne    c0017578 <FAT::unlink(char const*)+0x18>
c0017570:	b8 04 00 00 00       	mov    eax,0x4
c0017575:	eb 61                	jmp    c00175d8 <FAT::unlink(char const*)+0x78>
c0017577:	90                   	nop
c0017578:	83 ec 08             	sub    esp,0x8
c001757b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017582:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017586:	50                   	push   eax
c0017587:	e8 94 90 fe ff       	call   c0000620 <strcpy>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	83 ec 08             	sub    esp,0x8
c0017592:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017596:	50                   	push   eax
c0017597:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001759e:	e8 a1 fc ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	83 ec 0c             	sub    esp,0xc
c00175a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ad:	50                   	push   eax
c00175ae:	e8 f7 d2 fe ff       	call   c00048aa <f_unlink>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175c4:	85 c0                	test   eax,eax
c00175c6:	75 08                	jne    c00175d0 <FAT::unlink(char const*)+0x70>
c00175c8:	b8 00 00 00 00       	mov    eax,0x0
c00175cd:	eb 09                	jmp    c00175d8 <FAT::unlink(char const*)+0x78>
c00175cf:	90                   	nop
c00175d0:	b8 01 00 00 00       	mov    eax,0x1
c00175d5:	8d 76 00             	lea    esi,[esi+0x0]
c00175d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00175de:	c3                   	ret    
c00175df:	90                   	nop

c00175e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00175e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00175e6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00175ed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00175f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00175f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00175fc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017604:	75 0a                	jne    c0017610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017606:	b8 04 00 00 00       	mov    eax,0x4
c001760b:	e9 54 01 00 00       	jmp    c0017764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017610:	83 ec 08             	sub    esp,0x8
c0017613:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001761a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001761e:	50                   	push   eax
c001761f:	e8 fc 8f fe ff       	call   c0000620 <strcpy>
c0017624:	83 c4 10             	add    esp,0x10
c0017627:	83 ec 08             	sub    esp,0x8
c001762a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001762e:	50                   	push   eax
c001762f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017636:	e8 09 fc ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c001763b:	83 c4 10             	add    esp,0x10
c001763e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017646:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001764e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017652:	25 ff 00 00 00       	and    eax,0xff
c0017657:	83 e0 01             	and    eax,0x1
c001765a:	74 08                	je     c0017664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001765c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017664:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017668:	25 ff 00 00 00       	and    eax,0xff
c001766d:	83 e0 02             	and    eax,0x2
c0017670:	74 0a                	je     c001767c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017672:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001767a:	66 90                	xchg   ax,ax
c001767c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017680:	25 ff 00 00 00       	and    eax,0xff
c0017685:	83 e0 04             	and    eax,0x4
c0017688:	74 0a                	je     c0017694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001768a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017692:	66 90                	xchg   ax,ax
c0017694:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017698:	25 ff 00 00 00       	and    eax,0xff
c001769d:	83 e0 08             	and    eax,0x8
c00176a0:	74 0a                	je     c00176ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176a2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176aa:	66 90                	xchg   ax,ax
c00176ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176b0:	25 ff 00 00 00       	and    eax,0xff
c00176b5:	83 e0 01             	and    eax,0x1
c00176b8:	74 0a                	je     c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176ba:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176c8:	25 ff 00 00 00       	and    eax,0xff
c00176cd:	83 e0 02             	and    eax,0x2
c00176d0:	74 0a                	je     c00176dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00176d2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00176da:	66 90                	xchg   ax,ax
c00176dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176e0:	25 ff 00 00 00       	and    eax,0xff
c00176e5:	83 e0 04             	and    eax,0x4
c00176e8:	74 0a                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00176ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 08             	and    eax,0x8
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017702:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017713:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001771a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017721:	31 d2                	xor    edx,edx
c0017723:	88 c2                	mov    dl,al
c0017725:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001772c:	25 ff 00 00 00       	and    eax,0xff
c0017731:	83 ec 04             	sub    esp,0x4
c0017734:	52                   	push   edx
c0017735:	50                   	push   eax
c0017736:	8d 44 24 24          	lea    eax,[esp+0x24]
c001773a:	50                   	push   eax
c001773b:	e8 dd d5 fe ff       	call   c0004d1d <f_chmod>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001774a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017751:	85 c0                	test   eax,eax
c0017753:	75 07                	jne    c001775c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017755:	b8 00 00 00 00       	mov    eax,0x0
c001775a:	eb 08                	jmp    c0017764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001775c:	b8 01 00 00 00       	mov    eax,0x1
c0017761:	8d 76 00             	lea    esi,[esi+0x0]
c0017764:	81 c4 2c 01 00 00    	add    esp,0x12c
c001776a:	c3                   	ret    
c001776b:	90                   	nop

c001776c <FAT::rename(char const*, char const*)>:
c001776c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017772:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001777a:	74 0c                	je     c0017788 <FAT::rename(char const*, char const*)+0x1c>
c001777c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017784:	75 0e                	jne    c0017794 <FAT::rename(char const*, char const*)+0x28>
c0017786:	66 90                	xchg   ax,ax
c0017788:	b8 04 00 00 00       	mov    eax,0x4
c001778d:	e9 9e 00 00 00       	jmp    c0017830 <FAT::rename(char const*, char const*)+0xc4>
c0017792:	66 90                	xchg   ax,ax
c0017794:	83 ec 08             	sub    esp,0x8
c0017797:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001779e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177a5:	50                   	push   eax
c00177a6:	e8 75 8e fe ff       	call   c0000620 <strcpy>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	83 ec 08             	sub    esp,0x8
c00177b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177b8:	50                   	push   eax
c00177b9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177c0:	e8 7f fa ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	83 ec 08             	sub    esp,0x8
c00177cb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00177d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d6:	50                   	push   eax
c00177d7:	e8 44 8e fe ff       	call   c0000620 <strcpy>
c00177dc:	83 c4 10             	add    esp,0x10
c00177df:	83 ec 08             	sub    esp,0x8
c00177e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177e6:	50                   	push   eax
c00177e7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177ee:	e8 51 fa ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177fd:	50                   	push   eax
c00177fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017805:	50                   	push   eax
c0017806:	e8 5c d3 fe ff       	call   c0004b67 <f_rename>
c001780b:	83 c4 10             	add    esp,0x10
c001780e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017815:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001781c:	85 c0                	test   eax,eax
c001781e:	75 08                	jne    c0017828 <FAT::rename(char const*, char const*)+0xbc>
c0017820:	b8 00 00 00 00       	mov    eax,0x0
c0017825:	eb 09                	jmp    c0017830 <FAT::rename(char const*, char const*)+0xc4>
c0017827:	90                   	nop
c0017828:	b8 01 00 00 00       	mov    eax,0x1
c001782d:	8d 76 00             	lea    esi,[esi+0x0]
c0017830:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017836:	c3                   	ret    
c0017837:	90                   	nop

c0017838 <FAT::mkdir(char const*)>:
c0017838:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001783e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017846:	75 08                	jne    c0017850 <FAT::mkdir(char const*)+0x18>
c0017848:	b8 04 00 00 00       	mov    eax,0x4
c001784d:	eb 61                	jmp    c00178b0 <FAT::mkdir(char const*)+0x78>
c001784f:	90                   	nop
c0017850:	83 ec 08             	sub    esp,0x8
c0017853:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001785a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001785e:	50                   	push   eax
c001785f:	e8 bc 8d fe ff       	call   c0000620 <strcpy>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	83 ec 08             	sub    esp,0x8
c001786a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001786e:	50                   	push   eax
c001786f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017876:	e8 c9 f9 ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	83 ec 0c             	sub    esp,0xc
c0017881:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017885:	50                   	push   eax
c0017886:	e8 41 d1 fe ff       	call   c00049cc <f_mkdir>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017895:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001789c:	85 c0                	test   eax,eax
c001789e:	75 08                	jne    c00178a8 <FAT::mkdir(char const*)+0x70>
c00178a0:	b8 00 00 00 00       	mov    eax,0x0
c00178a5:	eb 09                	jmp    c00178b0 <FAT::mkdir(char const*)+0x78>
c00178a7:	90                   	nop
c00178a8:	b8 01 00 00 00       	mov    eax,0x1
c00178ad:	8d 76 00             	lea    esi,[esi+0x0]
c00178b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <FAT::exists(char const*)>:
c00178b8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178be:	83 ec 08             	sub    esp,0x8
c00178c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178cc:	50                   	push   eax
c00178cd:	e8 4e 8d fe ff       	call   c0000620 <strcpy>
c00178d2:	83 c4 10             	add    esp,0x10
c00178d5:	83 ec 08             	sub    esp,0x8
c00178d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178dc:	50                   	push   eax
c00178dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178e4:	e8 5b f9 ff ff       	call   c0017244 <FAT::fixFilepath(char*)>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	83 ec 08             	sub    esp,0x8
c00178ef:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00178f6:	50                   	push   eax
c00178f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178fb:	50                   	push   eax
c00178fc:	e8 44 cd fe ff       	call   c0004645 <f_stat>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001790b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017912:	85 c0                	test   eax,eax
c0017914:	75 06                	jne    c001791c <FAT::exists(char const*)+0x64>
c0017916:	b0 01                	mov    al,0x1
c0017918:	eb 06                	jmp    c0017920 <FAT::exists(char const*)+0x68>
c001791a:	66 90                	xchg   ax,ax
c001791c:	b0 00                	mov    al,0x0
c001791e:	66 90                	xchg   ax,ax
c0017920:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017926:	c3                   	ret    
c0017927:	90                   	nop

c0017928 <isoReadDiscSectorHelper>:
c0017928:	83 ec 2c             	sub    esp,0x2c
c001792b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001792f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017933:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017938:	83 e8 41             	sub    eax,0x41
c001793b:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c0017942:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017946:	ba 00 00 00 00       	mov    edx,0x0
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017952:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017956:	52                   	push   edx
c0017957:	50                   	push   eax
c0017958:	51                   	push   ecx
c0017959:	e8 72 59 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001795e:	83 c4 20             	add    esp,0x20
c0017961:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017965:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001796a:	74 0c                	je     c0017978 <isoReadDiscSectorHelper+0x50>
c001796c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017970:	c1 e0 0b             	shl    eax,0xb
c0017973:	eb 0b                	jmp    c0017980 <isoReadDiscSectorHelper+0x58>
c0017975:	8d 76 00             	lea    esi,[esi+0x0]
c0017978:	b8 00 00 00 00       	mov    eax,0x0
c001797d:	8d 76 00             	lea    esi,[esi+0x0]
c0017980:	83 c4 2c             	add    esp,0x2c
c0017983:	c3                   	ret    

c0017984 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017984:	b8 08 00 00 00       	mov    eax,0x8
c0017989:	c3                   	ret    

c001798a <ISO9660::getName()>:
c001798a:	b8 70 ef 01 c0       	mov    eax,0xc001ef70
c001798f:	c3                   	ret    

c0017990 <ISO9660::closeDir(void*)>:
c0017990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017994:	8b 00                	mov    eax,DWORD PTR [eax]
c0017996:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017999:	90                   	nop

c001799a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001799a:	b8 01 00 00 00       	mov    eax,0x1
c001799f:	c3                   	ret    

c00179a0 <ISO9660::unlink(char const*)>:
c00179a0:	b8 01 00 00 00       	mov    eax,0x1
c00179a5:	c3                   	ret    

c00179a6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179a6:	b8 03 00 00 00       	mov    eax,0x3
c00179ab:	c3                   	ret    

c00179ac <ISO9660::rename(char const*, char const*)>:
c00179ac:	b8 01 00 00 00       	mov    eax,0x1
c00179b1:	c3                   	ret    

c00179b2 <ISO9660::mkdir(char const*)>:
c00179b2:	b8 01 00 00 00       	mov    eax,0x1
c00179b7:	c3                   	ret    

c00179b8 <ISO9660::~ISO9660()>:
c00179b8:	83 ec 0c             	sub    esp,0xc
c00179bb:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c00179c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c4:	89 10                	mov    DWORD PTR [eax],edx
c00179c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ca:	83 ec 0c             	sub    esp,0xc
c00179cd:	50                   	push   eax
c00179ce:	e8 5b 35 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	90                   	nop
c00179d7:	83 c4 0c             	add    esp,0xc
c00179da:	c3                   	ret    
c00179db:	90                   	nop

c00179dc <ISO9660::~ISO9660()>:
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	83 ec 0c             	sub    esp,0xc
c00179e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179e6:	e8 cd ff ff ff       	call   c00179b8 <ISO9660::~ISO9660()>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	83 ec 08             	sub    esp,0x8
c00179f1:	6a 08                	push   0x8
c00179f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f7:	e8 f6 30 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	83 c4 0c             	add    esp,0xc
c0017a02:	c3                   	ret    
c0017a03:	90                   	nop

c0017a04 <ISO9660::exists(char const*)>:
c0017a04:	83 ec 18             	sub    esp,0x18
c0017a07:	68 8b ef 01 c0       	push   0xc001ef8b
c0017a0c:	e8 ad dd ff ff       	call   c00157be <HalPanic(char const*)>
c0017a11:	31 c0                	xor    eax,eax
c0017a13:	83 c4 1c             	add    esp,0x1c
c0017a16:	c3                   	ret    
c0017a17:	90                   	nop

c0017a18 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a18:	56                   	push   esi
c0017a19:	53                   	push   ebx
c0017a1a:	53                   	push   ebx
c0017a1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a1f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a23:	85 db                	test   ebx,ebx
c0017a25:	74 72                	je     c0017a99 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a27:	85 f6                	test   esi,esi
c0017a29:	74 6e                	je     c0017a99 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a2b:	ba 03 00 00 00       	mov    edx,0x3
c0017a30:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a35:	75 67                	jne    c0017a9e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a37:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a3a:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017a40:	74 34                	je     c0017a76 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	50                   	push   eax
c0017a46:	e8 47 f2 fe ff       	call   c0006c92 <init_percd>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	ba 0b 00 00 00       	mov    edx,0xb
c0017a53:	40                   	inc    eax
c0017a54:	74 48                	je     c0017a9e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a56:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017a5d:	74 10                	je     c0017a6f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017a5f:	83 ec 0c             	sub    esp,0xc
c0017a62:	68 a9 ef 01 c0       	push   0xc001efa9
c0017a67:	e8 52 dd ff ff       	call   c00157be <HalPanic(char const*)>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a71:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017a76:	83 c3 03             	add    ebx,0x3
c0017a79:	51                   	push   ecx
c0017a7a:	51                   	push   ecx
c0017a7b:	6a 00                	push   0x0
c0017a7d:	53                   	push   ebx
c0017a7e:	e8 7f ea fe ff       	call   c0006502 <iso_open>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	ba 01 00 00 00       	mov    edx,0x1
c0017a8b:	83 f8 ff             	cmp    eax,0xffffffff
c0017a8e:	74 0e                	je     c0017a9e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a90:	83 c0 64             	add    eax,0x64
c0017a93:	31 d2                	xor    edx,edx
c0017a95:	89 06                	mov    DWORD PTR [esi],eax
c0017a97:	eb 05                	jmp    c0017a9e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a99:	ba 04 00 00 00       	mov    edx,0x4
c0017a9e:	89 d0                	mov    eax,edx
c0017aa0:	5a                   	pop    edx
c0017aa1:	5b                   	pop    ebx
c0017aa2:	5e                   	pop    esi
c0017aa3:	c3                   	ret    

c0017aa4 <ISO9660::openDir(char const*, void**)>:
c0017aa4:	56                   	push   esi
c0017aa5:	53                   	push   ebx
c0017aa6:	53                   	push   ebx
c0017aa7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017aab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017aaf:	85 db                	test   ebx,ebx
c0017ab1:	74 66                	je     c0017b19 <ISO9660::openDir(char const*, void**)+0x75>
c0017ab3:	85 f6                	test   esi,esi
c0017ab5:	74 62                	je     c0017b19 <ISO9660::openDir(char const*, void**)+0x75>
c0017ab7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017aba:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017ac0:	74 34                	je     c0017af6 <ISO9660::openDir(char const*, void**)+0x52>
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	50                   	push   eax
c0017ac6:	e8 c7 f1 fe ff       	call   c0006c92 <init_percd>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	ba 0b 00 00 00       	mov    edx,0xb
c0017ad3:	40                   	inc    eax
c0017ad4:	74 48                	je     c0017b1e <ISO9660::openDir(char const*, void**)+0x7a>
c0017ad6:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017add:	74 10                	je     c0017aef <ISO9660::openDir(char const*, void**)+0x4b>
c0017adf:	83 ec 0c             	sub    esp,0xc
c0017ae2:	68 a9 ef 01 c0       	push   0xc001efa9
c0017ae7:	e8 d2 dc ff ff       	call   c00157be <HalPanic(char const*)>
c0017aec:	83 c4 10             	add    esp,0x10
c0017aef:	8a 03                	mov    al,BYTE PTR [ebx]
c0017af1:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017af6:	83 c3 03             	add    ebx,0x3
c0017af9:	51                   	push   ecx
c0017afa:	51                   	push   ecx
c0017afb:	6a 01                	push   0x1
c0017afd:	53                   	push   ebx
c0017afe:	e8 ff e9 fe ff       	call   c0006502 <iso_open>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	ba 01 00 00 00       	mov    edx,0x1
c0017b0b:	83 f8 ff             	cmp    eax,0xffffffff
c0017b0e:	74 0e                	je     c0017b1e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b10:	83 c0 64             	add    eax,0x64
c0017b13:	31 d2                	xor    edx,edx
c0017b15:	89 06                	mov    DWORD PTR [esi],eax
c0017b17:	eb 05                	jmp    c0017b1e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b19:	ba 04 00 00 00       	mov    edx,0x4
c0017b1e:	89 d0                	mov    eax,edx
c0017b20:	5a                   	pop    edx
c0017b21:	5b                   	pop    ebx
c0017b22:	5e                   	pop    esi
c0017b23:	c3                   	ret    

c0017b24 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b24:	53                   	push   ebx
c0017b25:	83 ec 08             	sub    esp,0x8
c0017b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b30:	85 c0                	test   eax,eax
c0017b32:	74 25                	je     c0017b59 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b34:	85 db                	test   ebx,ebx
c0017b36:	74 21                	je     c0017b59 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b38:	83 e8 64             	sub    eax,0x64
c0017b3b:	52                   	push   edx
c0017b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b44:	50                   	push   eax
c0017b45:	e8 b8 ea fe ff       	call   c0006602 <iso_read>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b4f:	09 d0                	or     eax,edx
c0017b51:	0f 94 c0             	sete   al
c0017b54:	0f b6 c0             	movzx  eax,al
c0017b57:	eb 05                	jmp    c0017b5e <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b59:	b8 04 00 00 00       	mov    eax,0x4
c0017b5e:	83 c4 08             	add    esp,0x8
c0017b61:	5b                   	pop    ebx
c0017b62:	c3                   	ret    
c0017b63:	90                   	nop

c0017b64 <ISO9660::seek(void*, unsigned long long)>:
c0017b64:	57                   	push   edi
c0017b65:	56                   	push   esi
c0017b66:	b8 04 00 00 00       	mov    eax,0x4
c0017b6b:	51                   	push   ecx
c0017b6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b78:	85 d2                	test   edx,edx
c0017b7a:	74 1c                	je     c0017b98 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b7c:	6a 00                	push   0x0
c0017b7e:	83 ea 64             	sub    edx,0x64
c0017b81:	57                   	push   edi
c0017b82:	56                   	push   esi
c0017b83:	52                   	push   edx
c0017b84:	e8 77 ec fe ff       	call   c0006800 <iso_seek>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	31 f0                	xor    eax,esi
c0017b8e:	31 fa                	xor    edx,edi
c0017b90:	09 d0                	or     eax,edx
c0017b92:	0f 95 c0             	setne  al
c0017b95:	0f b6 c0             	movzx  eax,al
c0017b98:	5a                   	pop    edx
c0017b99:	5e                   	pop    esi
c0017b9a:	5f                   	pop    edi
c0017b9b:	c3                   	ret    

c0017b9c <ISO9660::tell(void*, unsigned long long*)>:
c0017b9c:	53                   	push   ebx
c0017b9d:	83 ec 08             	sub    esp,0x8
c0017ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ba8:	85 c0                	test   eax,eax
c0017baa:	74 1c                	je     c0017bc8 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bac:	85 db                	test   ebx,ebx
c0017bae:	74 18                	je     c0017bc8 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	83 e8 64             	sub    eax,0x64
c0017bb6:	50                   	push   eax
c0017bb7:	e8 22 ed fe ff       	call   c00068de <iso_tell>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	89 03                	mov    DWORD PTR [ebx],eax
c0017bc1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017bc4:	31 c0                	xor    eax,eax
c0017bc6:	eb 05                	jmp    c0017bcd <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017bc8:	b8 04 00 00 00       	mov    eax,0x4
c0017bcd:	83 c4 08             	add    esp,0x8
c0017bd0:	5b                   	pop    ebx
c0017bd1:	c3                   	ret    

c0017bd2 <ISO9660::stat(void*, unsigned long long*)>:
c0017bd2:	53                   	push   ebx
c0017bd3:	83 ec 08             	sub    esp,0x8
c0017bd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bda:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bde:	85 c0                	test   eax,eax
c0017be0:	74 20                	je     c0017c02 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017be2:	85 db                	test   ebx,ebx
c0017be4:	74 1c                	je     c0017c02 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	83 e8 64             	sub    eax,0x64
c0017bec:	50                   	push   eax
c0017bed:	e8 49 ed fe ff       	call   c000693b <iso_total>
c0017bf2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017bf9:	89 03                	mov    DWORD PTR [ebx],eax
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	31 c0                	xor    eax,eax
c0017c00:	eb 05                	jmp    c0017c07 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c02:	b8 04 00 00 00       	mov    eax,0x4
c0017c07:	83 c4 08             	add    esp,0x8
c0017c0a:	5b                   	pop    ebx
c0017c0b:	c3                   	ret    

c0017c0c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c0c:	55                   	push   ebp
c0017c0d:	57                   	push   edi
c0017c0e:	56                   	push   esi
c0017c0f:	53                   	push   ebx
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c17:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c1b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c1f:	85 ff                	test   edi,edi
c0017c21:	0f 94 c2             	sete   dl
c0017c24:	85 f6                	test   esi,esi
c0017c26:	0f 94 c0             	sete   al
c0017c29:	08 c2                	or     dl,al
c0017c2b:	0f 85 b7 00 00 00    	jne    c0017ce8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c31:	85 db                	test   ebx,ebx
c0017c33:	0f 84 af 00 00 00    	je     c0017ce8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c39:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c3c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c42:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c4c:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017c52:	74 38                	je     c0017c8c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017c54:	83 ec 0c             	sub    esp,0xc
c0017c57:	50                   	push   eax
c0017c58:	e8 35 f0 fe ff       	call   c0006c92 <init_percd>
c0017c5d:	83 c4 10             	add    esp,0x10
c0017c60:	ba 0b 00 00 00       	mov    edx,0xb
c0017c65:	40                   	inc    eax
c0017c66:	0f 84 81 00 00 00    	je     c0017ced <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017c6c:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017c73:	74 10                	je     c0017c85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017c75:	83 ec 0c             	sub    esp,0xc
c0017c78:	68 a9 ef 01 c0       	push   0xc001efa9
c0017c7d:	e8 3c db ff ff       	call   c00157be <HalPanic(char const*)>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c87:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017c8c:	83 c3 03             	add    ebx,0x3
c0017c8f:	55                   	push   ebp
c0017c90:	55                   	push   ebp
c0017c91:	6a 00                	push   0x0
c0017c93:	53                   	push   ebx
c0017c94:	e8 69 e8 fe ff       	call   c0006502 <iso_open>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	89 c5                	mov    ebp,eax
c0017c9e:	83 f8 ff             	cmp    eax,0xffffffff
c0017ca1:	75 0f                	jne    c0017cb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017ca3:	56                   	push   esi
c0017ca4:	56                   	push   esi
c0017ca5:	6a 01                	push   0x1
c0017ca7:	53                   	push   ebx
c0017ca8:	e8 55 e8 fe ff       	call   c0006502 <iso_open>
c0017cad:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cb0:	eb 2f                	jmp    c0017ce1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017cb2:	83 ec 0c             	sub    esp,0xc
c0017cb5:	50                   	push   eax
c0017cb6:	e8 80 ec fe ff       	call   c000693b <iso_total>
c0017cbb:	5a                   	pop    edx
c0017cbc:	59                   	pop    ecx
c0017cbd:	50                   	push   eax
c0017cbe:	68 b9 ef 01 c0       	push   0xc001efb9
c0017cc3:	e8 20 2f ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017cc8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ccb:	e8 6b ec fe ff       	call   c000693b <iso_total>
c0017cd0:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cd7:	89 06                	mov    DWORD PTR [esi],eax
c0017cd9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cdc:	e8 01 e9 fe ff       	call   c00065e2 <iso_close>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	31 d2                	xor    edx,edx
c0017ce6:	eb 05                	jmp    c0017ced <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017ce8:	ba 04 00 00 00       	mov    edx,0x4
c0017ced:	83 c4 0c             	add    esp,0xc
c0017cf0:	89 d0                	mov    eax,edx
c0017cf2:	5b                   	pop    ebx
c0017cf3:	5e                   	pop    esi
c0017cf4:	5f                   	pop    edi
c0017cf5:	5d                   	pop    ebp
c0017cf6:	c3                   	ret    
c0017cf7:	90                   	nop

c0017cf8 <ISO9660::close(void*)>:
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	b8 04 00 00 00       	mov    eax,0x4
c0017d00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d04:	85 d2                	test   edx,edx
c0017d06:	74 11                	je     c0017d19 <ISO9660::close(void*)+0x21>
c0017d08:	83 ec 0c             	sub    esp,0xc
c0017d0b:	83 ea 64             	sub    edx,0x64
c0017d0e:	52                   	push   edx
c0017d0f:	e8 ce e8 fe ff       	call   c00065e2 <iso_close>
c0017d14:	83 c4 10             	add    esp,0x10
c0017d17:	31 c0                	xor    eax,eax
c0017d19:	83 c4 0c             	add    esp,0xc
c0017d1c:	c3                   	ret    
c0017d1d:	90                   	nop

c0017d1e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d1e:	55                   	push   ebp
c0017d1f:	57                   	push   edi
c0017d20:	56                   	push   esi
c0017d21:	53                   	push   ebx
c0017d22:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d28:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d2f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d36:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d3d:	85 c0                	test   eax,eax
c0017d3f:	0f 84 96 00 00 00    	je     c0017ddb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d45:	85 db                	test   ebx,ebx
c0017d47:	0f 84 8e 00 00 00    	je     c0017ddb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d4d:	83 ec 0c             	sub    esp,0xc
c0017d50:	83 e8 64             	sub    eax,0x64
c0017d53:	50                   	push   eax
c0017d54:	e8 5f ec fe ff       	call   c00069b8 <iso_readdir>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	89 c6                	mov    esi,eax
c0017d5e:	85 c0                	test   eax,eax
c0017d60:	75 18                	jne    c0017d7a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d62:	52                   	push   edx
c0017d63:	68 10 01 00 00       	push   0x110
c0017d68:	6a 00                	push   0x0
c0017d6a:	57                   	push   edi
c0017d6b:	e8 80 87 fe ff       	call   c00004f0 <memset>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	b8 01 00 00 00       	mov    eax,0x1
c0017d78:	eb 66                	jmp    c0017de0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d7a:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d80:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d83:	83 ec 0c             	sub    esp,0xc
c0017d86:	55                   	push   ebp
c0017d87:	e8 d4 87 fe ff       	call   c0000560 <strlen>
c0017d8c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d9f:	75 0a                	jne    c0017dab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017da1:	b8 02 00 00 00       	mov    eax,0x2
c0017da6:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017da9:	74 05                	je     c0017db0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017dab:	b8 01 00 00 00       	mov    eax,0x1
c0017db0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017db4:	50                   	push   eax
c0017db5:	50                   	push   eax
c0017db6:	55                   	push   ebp
c0017db7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dbb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dbf:	50                   	push   eax
c0017dc0:	e8 5b 88 fe ff       	call   c0000620 <strcpy>
c0017dc5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017dcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dce:	31 c0                	xor    eax,eax
c0017dd0:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	eb 05                	jmp    c0017de0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017ddb:	b8 04 00 00 00       	mov    eax,0x4
c0017de0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017de6:	5b                   	pop    ebx
c0017de7:	5e                   	pop    esi
c0017de8:	5f                   	pop    edi
c0017de9:	5d                   	pop    ebp
c0017dea:	c3                   	ret    

c0017deb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017deb:	57                   	push   edi
c0017dec:	56                   	push   esi
c0017ded:	53                   	push   ebx
c0017dee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017df2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017df6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017dfa:	39 35 c4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fc4,esi
c0017e00:	75 08                	jne    c0017e0a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e02:	38 1d 14 f9 01 c0    	cmp    BYTE PTR ds:0xc001f914,bl
c0017e08:	74 59                	je     c0017e63 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	31 d2                	xor    edx,edx
c0017e0f:	68 e0 3f 02 c0       	push   0xc0023fe0
c0017e14:	0f be c3             	movsx  eax,bl
c0017e17:	6a 01                	push   0x1
c0017e19:	52                   	push   edx
c0017e1a:	56                   	push   esi
c0017e1b:	ff 34 85 9c 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd264]
c0017e22:	e8 a9 54 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e27:	83 c4 20             	add    esp,0x20
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	75 0e                	jne    c0017e3c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e2e:	89 35 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,esi
c0017e34:	88 1d 14 f9 01 c0    	mov    BYTE PTR ds:0xc001f914,bl
c0017e3a:	eb 27                	jmp    c0017e63 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	68 cb ef 01 c0       	push   0xc001efcb
c0017e44:	e8 9f 2d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017e49:	83 c4 0c             	add    esp,0xc
c0017e4c:	68 00 08 00 00       	push   0x800
c0017e51:	6a 00                	push   0x0
c0017e53:	57                   	push   edi
c0017e54:	e8 97 86 fe ff       	call   c00004f0 <memset>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	b8 01 00 00 00       	mov    eax,0x1
c0017e61:	eb 0e                	jmp    c0017e71 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017e63:	be e0 3f 02 c0       	mov    esi,0xc0023fe0
c0017e68:	b9 00 08 00 00       	mov    ecx,0x800
c0017e6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e6f:	31 c0                	xor    eax,eax
c0017e71:	5b                   	pop    ebx
c0017e72:	5e                   	pop    esi
c0017e73:	5f                   	pop    edi
c0017e74:	c3                   	ret    
c0017e75:	90                   	nop

c0017e76 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e76:	53                   	push   ebx
c0017e77:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e7d:	c7 05 c4 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023fc4,0xdeadbeef
c0017e87:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e8e:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e91:	0f be db             	movsx  ebx,bl
c0017e94:	53                   	push   ebx
c0017e95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e99:	50                   	push   eax
c0017e9a:	6a 10                	push   0x10
c0017e9c:	e8 4a ff ff ff       	call   c0017deb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	31 d2                	xor    edx,edx
c0017ea6:	85 c0                	test   eax,eax
c0017ea8:	75 33                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eaa:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017eaf:	75 2c                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017eb6:	75 25                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017ebd:	75 1e                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ebf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ec4:	75 17                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ecb:	75 10                	jne    c0017edd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ecd:	83 ec 0c             	sub    esp,0xc
c0017ed0:	53                   	push   ebx
c0017ed1:	e8 bc ed fe ff       	call   c0006c92 <init_percd>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	40                   	inc    eax
c0017eda:	0f 95 c2             	setne  dl
c0017edd:	88 d0                	mov    al,dl
c0017edf:	81 c4 08 08 00 00    	add    esp,0x808
c0017ee5:	5b                   	pop    ebx
c0017ee6:	c3                   	ret    
c0017ee7:	90                   	nop

c0017ee8 <ISO9660::ISO9660()>:
c0017ee8:	83 ec 0c             	sub    esp,0xc
c0017eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	50                   	push   eax
c0017ef3:	e8 12 30 ff ff       	call   c000af0a <Filesystem::Filesystem()>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0017f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f04:	89 10                	mov    DWORD PTR [eax],edx
c0017f06:	e8 97 ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017f0b:	90                   	nop
c0017f0c:	83 c4 0c             	add    esp,0xc
c0017f0f:	c3                   	ret    

c0017f10 <SoundCard::beginPlayback()>:
c0017f10:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f18:	e9 ca 87 ff ff       	jmp    c00106e7 <Krnl::panic(char const*)>
c0017f1d:	90                   	nop

c0017f1e <SoundCard::stopPlayback()>:
c0017f1e:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f26:	e9 bc 87 ff ff       	jmp    c00106e7 <Krnl::panic(char const*)>
c0017f2b:	90                   	nop

c0017f2c <SoundCard::SoundCard(char const*)>:
c0017f2c:	83 ec 1c             	sub    esp,0x1c
c0017f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f33:	83 ec 08             	sub    esp,0x8
c0017f36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f3a:	50                   	push   eax
c0017f3b:	e8 80 42 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0017f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4c:	89 10                	mov    DWORD PTR [eax],edx
c0017f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f52:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f79:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f87:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f99:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f9e:	7f 19                	jg     c0017fb9 <SoundCard::SoundCard(char const*)+0x8d>
c0017fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fa8:	83 c2 54             	add    edx,0x54
c0017fab:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fb3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fb7:	eb e0                	jmp    c0017f99 <SoundCard::SoundCard(char const*)+0x6d>
c0017fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fc4:	90                   	nop
c0017fc5:	83 c4 1c             	add    esp,0x1c
c0017fc8:	c3                   	ret    
c0017fc9:	90                   	nop

c0017fca <SoundCard::~SoundCard()>:
c0017fca:	83 ec 0c             	sub    esp,0xc
c0017fcd:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0017fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd6:	89 10                	mov    DWORD PTR [eax],edx
c0017fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	50                   	push   eax
c0017fe0:	e8 45 3f ff ff       	call   c000bf2a <Device::~Device()>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	90                   	nop
c0017fe9:	83 c4 0c             	add    esp,0xc
c0017fec:	c3                   	ret    
c0017fed:	90                   	nop

c0017fee <SoundCard::~SoundCard()>:
c0017fee:	83 ec 0c             	sub    esp,0xc
c0017ff1:	83 ec 0c             	sub    esp,0xc
c0017ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff8:	e8 cd ff ff ff       	call   c0017fca <SoundCard::~SoundCard()>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	83 ec 08             	sub    esp,0x8
c0018003:	68 e8 01 00 00       	push   0x1e8
c0018008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001800c:	e8 e1 2a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	83 c4 0c             	add    esp,0xc
c0018017:	c3                   	ret    

c0018018 <SoundCard::configureRates(int, int, int)>:
c0018018:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001801c:	31 c0                	xor    eax,eax
c001801e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018025:	75 20                	jne    c0018047 <SoundCard::configureRates(int, int, int)+0x2f>
c0018027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001802b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018031:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018035:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001803b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001803f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018045:	b0 01                	mov    al,0x1
c0018047:	c3                   	ret    

c0018048 <SoundCard::getSamples16(int, short*)>:
c0018048:	55                   	push   ebp
c0018049:	57                   	push   edi
c001804a:	31 ff                	xor    edi,edi
c001804c:	56                   	push   esi
c001804d:	53                   	push   ebx
c001804e:	31 db                	xor    ebx,ebx
c0018050:	83 ec 10             	sub    esp,0x10
c0018053:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018057:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001805b:	8d 04 36             	lea    eax,[esi+esi*1]
c001805e:	50                   	push   eax
c001805f:	6a 00                	push   0x0
c0018061:	55                   	push   ebp
c0018062:	e8 89 84 fe ff       	call   c00004f0 <memset>
c0018067:	83 c4 10             	add    esp,0x10
c001806a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001806e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018075:	85 c0                	test   eax,eax
c0018077:	74 1b                	je     c0018094 <SoundCard::getSamples16(int, short*)+0x4c>
c0018079:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001807d:	75 15                	jne    c0018094 <SoundCard::getSamples16(int, short*)+0x4c>
c001807f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018083:	55                   	push   ebp
c0018084:	56                   	push   esi
c0018085:	50                   	push   eax
c0018086:	e8 ed 02 00 00       	call   c0018378 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001808b:	83 c4 10             	add    esp,0x10
c001808e:	39 c7                	cmp    edi,eax
c0018090:	7d 02                	jge    c0018094 <SoundCard::getSamples16(int, short*)+0x4c>
c0018092:	89 c7                	mov    edi,eax
c0018094:	43                   	inc    ebx
c0018095:	83 fb 20             	cmp    ebx,0x20
c0018098:	75 d0                	jne    c001806a <SoundCard::getSamples16(int, short*)+0x22>
c001809a:	83 c4 0c             	add    esp,0xc
c001809d:	89 f8                	mov    eax,edi
c001809f:	5b                   	pop    ebx
c00180a0:	5e                   	pop    esi
c00180a1:	5f                   	pop    edi
c00180a2:	5d                   	pop    ebp
c00180a3:	c3                   	ret    

c00180a4 <SoundCard::getSamples32(int, int*)>:
c00180a4:	55                   	push   ebp
c00180a5:	57                   	push   edi
c00180a6:	31 ff                	xor    edi,edi
c00180a8:	56                   	push   esi
c00180a9:	31 f6                	xor    esi,esi
c00180ab:	53                   	push   ebx
c00180ac:	83 ec 10             	sub    esp,0x10
c00180af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180b7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180bb:	c1 e0 02             	shl    eax,0x2
c00180be:	50                   	push   eax
c00180bf:	6a 00                	push   0x0
c00180c1:	55                   	push   ebp
c00180c2:	e8 29 84 fe ff       	call   c00004f0 <memset>
c00180c7:	83 c4 10             	add    esp,0x10
c00180ca:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180d1:	85 c0                	test   eax,eax
c00180d3:	74 1b                	je     c00180f0 <SoundCard::getSamples32(int, int*)+0x4c>
c00180d5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180d9:	75 15                	jne    c00180f0 <SoundCard::getSamples32(int, int*)+0x4c>
c00180db:	53                   	push   ebx
c00180dc:	55                   	push   ebp
c00180dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180e1:	50                   	push   eax
c00180e2:	e8 55 03 00 00       	call   c001843c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	39 c6                	cmp    esi,eax
c00180ec:	7d 02                	jge    c00180f0 <SoundCard::getSamples32(int, int*)+0x4c>
c00180ee:	89 c6                	mov    esi,eax
c00180f0:	47                   	inc    edi
c00180f1:	83 ff 20             	cmp    edi,0x20
c00180f4:	75 d4                	jne    c00180ca <SoundCard::getSamples32(int, int*)+0x26>
c00180f6:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180fc:	85 f6                	test   esi,esi
c00180fe:	75 0f                	jne    c001810f <SoundCard::getSamples32(int, int*)+0x6b>
c0018100:	84 c0                	test   al,al
c0018102:	74 1b                	je     c001811f <SoundCard::getSamples32(int, int*)+0x7b>
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018109:	53                   	push   ebx
c001810a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001810d:	eb 0d                	jmp    c001811c <SoundCard::getSamples32(int, int*)+0x78>
c001810f:	84 c0                	test   al,al
c0018111:	75 0c                	jne    c001811f <SoundCard::getSamples32(int, int*)+0x7b>
c0018113:	83 ec 0c             	sub    esp,0xc
c0018116:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018118:	53                   	push   ebx
c0018119:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001811c:	83 c4 10             	add    esp,0x10
c001811f:	83 c4 0c             	add    esp,0xc
c0018122:	89 f0                	mov    eax,esi
c0018124:	5b                   	pop    ebx
c0018125:	5e                   	pop    esi
c0018126:	5f                   	pop    edi
c0018127:	5d                   	pop    ebp
c0018128:	c3                   	ret    
c0018129:	90                   	nop

c001812a <SoundCard::addChannel(SoundPort*)>:
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	31 c0                	xor    eax,eax
c001812f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018133:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001813b:	74 1b                	je     c0018158 <SoundCard::addChannel(SoundPort*)+0x2e>
c001813d:	40                   	inc    eax
c001813e:	83 f8 20             	cmp    eax,0x20
c0018141:	75 f0                	jne    c0018133 <SoundCard::addChannel(SoundPort*)+0x9>
c0018143:	83 ec 0c             	sub    esp,0xc
c0018146:	68 75 f0 01 c0       	push   0xc001f075
c001814b:	e8 97 85 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	83 c8 ff             	or     eax,0xffffffff
c0018156:	eb 0b                	jmp    c0018163 <SoundCard::addChannel(SoundPort*)+0x39>
c0018158:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001815c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018163:	83 c4 0c             	add    esp,0xc
c0018166:	c3                   	ret    
c0018167:	90                   	nop

c0018168 <SoundCard::removeChannel(int)>:
c0018168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001816c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018170:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001817b:	c3                   	ret    

c001817c <SoundPort::SoundPort(int, int, int, int)>:
c001817c:	83 ec 0c             	sub    esp,0xc
c001817f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018183:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018196:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001819a:	89 10                	mov    DWORD PTR [eax],edx
c001819c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181b2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181b7:	75 13                	jne    c00181cc <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00181bf:	05 a0 0f 00 00       	add    eax,0xfa0
c00181c4:	01 c0                	add    eax,eax
c00181c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181ca:	66 90                	xchg   ax,ax
c00181cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181db:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181e9:	c1 e0 02             	shl    eax,0x2
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	50                   	push   eax
c00181f0:	e8 64 fc fe ff       	call   c0007e59 <malloc>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	89 c2                	mov    edx,eax
c00181fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018201:	90                   	nop
c0018202:	83 c4 0c             	add    esp,0xc
c0018205:	c3                   	ret    
c0018206:	66 90                	xchg   ax,ax

c0018208 <SoundPort::~SoundPort()>:
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018212:	85 c0                	test   eax,eax
c0018214:	74 1e                	je     c0018234 <SoundPort::~SoundPort()+0x2c>
c0018216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001821d:	83 ec 0c             	sub    esp,0xc
c0018220:	50                   	push   eax
c0018221:	e8 43 fc fe ff       	call   c0007e69 <free>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018234:	90                   	nop
c0018235:	83 c4 0c             	add    esp,0xc
c0018238:	c3                   	ret    
c0018239:	90                   	nop
c001823a:	66 90                	xchg   ax,ax

c001823c <SoundPort::unpause()>:
c001823c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018240:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018244:	c3                   	ret    
c0018245:	90                   	nop
c0018246:	66 90                	xchg   ax,ax

c0018248 <SoundPort::pause()>:
c0018248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001824c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018250:	c3                   	ret    
c0018251:	90                   	nop
c0018252:	66 90                	xchg   ax,ax

c0018254 <SoundPort::getBufferUsed()>:
c0018254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018258:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001825b:	c3                   	ret    

c001825c <SoundPort::getBufferSize()>:
c001825c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018260:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018263:	c3                   	ret    

c0018264 <SoundPort::buffer16(short*, int)>:
c0018264:	55                   	push   ebp
c0018265:	57                   	push   edi
c0018266:	56                   	push   esi
c0018267:	53                   	push   ebx
c0018268:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001826c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018270:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018273:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018276:	74 68                	je     c00182e0 <SoundPort::buffer16(short*, int)+0x7c>
c0018278:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001827c:	85 c9                	test   ecx,ecx
c001827e:	7e 60                	jle    c00182e0 <SoundPort::buffer16(short*, int)+0x7c>
c0018280:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018284:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018287:	c1 e1 0f             	shl    ecx,0xf
c001828a:	8d 70 01             	lea    esi,[eax+0x1]
c001828d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018290:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018293:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018296:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018299:	74 4d                	je     c00182e8 <SoundPort::buffer16(short*, int)+0x84>
c001829b:	31 f6                	xor    esi,esi
c001829d:	eb 21                	jmp    c00182c0 <SoundPort::buffer16(short*, int)+0x5c>
c001829f:	90                   	nop
c00182a0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182a5:	8d 79 01             	lea    edi,[ecx+0x1]
c00182a8:	c1 e3 0f             	shl    ebx,0xf
c00182ab:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182ae:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182b1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ba:	74 1c                	je     c00182d8 <SoundPort::buffer16(short*, int)+0x74>
c00182bc:	89 c6                	mov    esi,eax
c00182be:	66 90                	xchg   ax,ax
c00182c0:	8d 46 01             	lea    eax,[esi+0x1]
c00182c3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182c7:	75 d7                	jne    c00182a0 <SoundPort::buffer16(short*, int)+0x3c>
c00182c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182cd:	8d 76 00             	lea    esi,[esi+0x0]
c00182d0:	5b                   	pop    ebx
c00182d1:	5e                   	pop    esi
c00182d2:	5f                   	pop    edi
c00182d3:	5d                   	pop    ebp
c00182d4:	c3                   	ret    
c00182d5:	8d 76 00             	lea    esi,[esi+0x0]
c00182d8:	5b                   	pop    ebx
c00182d9:	8d 46 02             	lea    eax,[esi+0x2]
c00182dc:	5e                   	pop    esi
c00182dd:	5f                   	pop    edi
c00182de:	5d                   	pop    ebp
c00182df:	c3                   	ret    
c00182e0:	5b                   	pop    ebx
c00182e1:	31 c0                	xor    eax,eax
c00182e3:	5e                   	pop    esi
c00182e4:	5f                   	pop    edi
c00182e5:	5d                   	pop    ebp
c00182e6:	c3                   	ret    
c00182e7:	90                   	nop
c00182e8:	b8 01 00 00 00       	mov    eax,0x1
c00182ed:	eb e1                	jmp    c00182d0 <SoundPort::buffer16(short*, int)+0x6c>
c00182ef:	90                   	nop

c00182f0 <SoundPort::buffer32(int*, int)>:
c00182f0:	55                   	push   ebp
c00182f1:	57                   	push   edi
c00182f2:	56                   	push   esi
c00182f3:	53                   	push   ebx
c00182f4:	51                   	push   ecx
c00182f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182fd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018300:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018304:	89 04 24             	mov    DWORD PTR [esp],eax
c0018307:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001830a:	74 5c                	je     c0018368 <SoundPort::buffer32(int*, int)+0x78>
c001830c:	85 c0                	test   eax,eax
c001830e:	7e 58                	jle    c0018368 <SoundPort::buffer32(int*, int)+0x78>
c0018310:	8d 71 01             	lea    esi,[ecx+0x1]
c0018313:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018316:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018319:	8b 37                	mov    esi,DWORD PTR [edi]
c001831b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001831e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018321:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018324:	74 4a                	je     c0018370 <SoundPort::buffer32(int*, int)+0x80>
c0018326:	31 f6                	xor    esi,esi
c0018328:	eb 1e                	jmp    c0018348 <SoundPort::buffer32(int*, int)+0x58>
c001832a:	66 90                	xchg   ax,ax
c001832c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001832f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018332:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018335:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018338:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001833c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001833f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018342:	74 18                	je     c001835c <SoundPort::buffer32(int*, int)+0x6c>
c0018344:	89 de                	mov    esi,ebx
c0018346:	66 90                	xchg   ax,ax
c0018348:	8d 5e 01             	lea    ebx,[esi+0x1]
c001834b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001834e:	75 dc                	jne    c001832c <SoundPort::buffer32(int*, int)+0x3c>
c0018350:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018353:	90                   	nop
c0018354:	5a                   	pop    edx
c0018355:	5b                   	pop    ebx
c0018356:	5e                   	pop    esi
c0018357:	5f                   	pop    edi
c0018358:	5d                   	pop    ebp
c0018359:	c3                   	ret    
c001835a:	66 90                	xchg   ax,ax
c001835c:	5a                   	pop    edx
c001835d:	8d 46 02             	lea    eax,[esi+0x2]
c0018360:	5b                   	pop    ebx
c0018361:	5e                   	pop    esi
c0018362:	5f                   	pop    edi
c0018363:	5d                   	pop    ebp
c0018364:	c3                   	ret    
c0018365:	8d 76 00             	lea    esi,[esi+0x0]
c0018368:	5a                   	pop    edx
c0018369:	31 c0                	xor    eax,eax
c001836b:	5b                   	pop    ebx
c001836c:	5e                   	pop    esi
c001836d:	5f                   	pop    edi
c001836e:	5d                   	pop    ebp
c001836f:	c3                   	ret    
c0018370:	b8 01 00 00 00       	mov    eax,0x1
c0018375:	eb dd                	jmp    c0018354 <SoundPort::buffer32(int*, int)+0x64>
c0018377:	90                   	nop

c0018378 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018378:	57                   	push   edi
c0018379:	56                   	push   esi
c001837a:	53                   	push   ebx
c001837b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001837f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018383:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018389:	39 03                	cmp    DWORD PTR [ebx],eax
c001838b:	74 13                	je     c00183a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	68 c8 f0 01 c0       	push   0xc001f0c8
c0018395:	e8 4d 83 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001839a:	83 c4 10             	add    esp,0x10
c001839d:	8d 76 00             	lea    esi,[esi+0x0]
c00183a0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183a6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183a9:	74 11                	je     c00183bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183ab:	83 ec 0c             	sub    esp,0xc
c00183ae:	68 07 f1 01 c0       	push   0xc001f107
c00183b3:	e8 2f 83 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	90                   	nop
c00183bc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183c2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183c5:	74 11                	je     c00183d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183c7:	83 ec 0c             	sub    esp,0xc
c00183ca:	68 07 f1 01 c0       	push   0xc001f107
c00183cf:	e8 13 83 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	90                   	nop
c00183d8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183db:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183df:	7e 07                	jle    c00183e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	85 f6                	test   esi,esi
c00183ea:	7e 2c                	jle    c0018418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f0:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183f3:	31 c9                	xor    ecx,ecx
c00183f5:	01 d7                	add    edi,edx
c00183f7:	90                   	nop
c00183f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183fb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183fe:	85 c0                	test   eax,eax
c0018400:	79 06                	jns    c0018408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018402:	05 ff 7f 00 00       	add    eax,0x7fff
c0018407:	90                   	nop
c0018408:	c1 f8 0f             	sar    eax,0xf
c001840b:	83 c1 04             	add    ecx,0x4
c001840e:	66 01 02             	add    WORD PTR [edx],ax
c0018411:	83 c2 02             	add    edx,0x2
c0018414:	39 d7                	cmp    edi,edx
c0018416:	75 e0                	jne    c00183f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018418:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001841b:	50                   	push   eax
c001841c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001841f:	29 f0                	sub    eax,esi
c0018421:	c1 e0 02             	shl    eax,0x2
c0018424:	50                   	push   eax
c0018425:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018428:	50                   	push   eax
c0018429:	52                   	push   edx
c001842a:	e8 d1 7f fe ff       	call   c0000400 <memmove>
c001842f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	89 f0                	mov    eax,esi
c0018437:	5b                   	pop    ebx
c0018438:	5e                   	pop    esi
c0018439:	5f                   	pop    edi
c001843a:	c3                   	ret    
c001843b:	90                   	nop

c001843c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001843c:	57                   	push   edi
c001843d:	56                   	push   esi
c001843e:	53                   	push   ebx
c001843f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018443:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018447:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001844b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018451:	39 06                	cmp    DWORD PTR [esi],eax
c0018453:	74 13                	je     c0018468 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018455:	83 ec 0c             	sub    esp,0xc
c0018458:	68 e8 f0 01 c0       	push   0xc001f0e8
c001845d:	e8 85 82 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	8d 76 00             	lea    esi,[esi+0x0]
c0018468:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001846e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018471:	74 11                	je     c0018484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018473:	83 ec 0c             	sub    esp,0xc
c0018476:	68 23 f1 01 c0       	push   0xc001f123
c001847b:	e8 67 82 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	90                   	nop
c0018484:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001848a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001848d:	74 11                	je     c00184a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001848f:	83 ec 0c             	sub    esp,0xc
c0018492:	68 23 f1 01 c0       	push   0xc001f123
c0018497:	e8 4b 82 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	90                   	nop
c00184a0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184a3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184a7:	7e 07                	jle    c00184b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	85 ff                	test   edi,edi
c00184b2:	7e 1c                	jle    c00184d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184b4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184bb:	31 c0                	xor    eax,eax
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184c3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184c6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184c9:	83 c0 04             	add    eax,0x4
c00184cc:	39 c1                	cmp    ecx,eax
c00184ce:	75 f0                	jne    c00184c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184d3:	50                   	push   eax
c00184d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184d7:	29 f8                	sub    eax,edi
c00184d9:	c1 e0 02             	shl    eax,0x2
c00184dc:	50                   	push   eax
c00184dd:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184e0:	50                   	push   eax
c00184e1:	52                   	push   edx
c00184e2:	e8 19 7f fe ff       	call   c0000400 <memmove>
c00184e7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	89 f8                	mov    eax,edi
c00184ef:	5b                   	pop    ebx
c00184f0:	5e                   	pop    esi
c00184f1:	5f                   	pop    edi
c00184f2:	c3                   	ret    
c00184f3:	90                   	nop

c00184f4 <PCI::open(int, int, void*)>:
c00184f4:	83 ec 18             	sub    esp,0x18
c00184f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018505:	8b 10                	mov    edx,DWORD PTR [eax]
c0018507:	50                   	push   eax
c0018508:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001850b:	31 c0                	xor    eax,eax
c001850d:	83 c4 1c             	add    esp,0x1c
c0018510:	c3                   	ret    
c0018511:	90                   	nop

c0018512 <PCI::close(int, int, void*)>:
c0018512:	31 c0                	xor    eax,eax
c0018514:	c3                   	ret    
c0018515:	90                   	nop

c0018516 <PCI::PCI()>:
c0018516:	83 ec 0c             	sub    esp,0xc
c0018519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001851d:	83 ec 08             	sub    esp,0x8
c0018520:	68 3f f1 01 c0       	push   0xc001f13f
c0018525:	50                   	push   eax
c0018526:	e8 51 34 ff ff       	call   c000b97c <Bus::Bus(char const*)>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c0018533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018537:	89 10                	mov    DWORD PTR [eax],edx
c0018539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001853d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854b:	a3 e0 47 02 c0       	mov    ds:0xc00247e0,eax
c0018550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018554:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001855a:	31 d2                	xor    edx,edx
c001855c:	88 c2                	mov    dl,al
c001855e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018562:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018573:	31 d2                	xor    edx,edx
c0018575:	88 c2                	mov    dl,al
c0018577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001857b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018584:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001858a:	8d 50 01             	lea    edx,[eax+0x1]
c001858d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018591:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018597:	31 d2                	xor    edx,edx
c0018599:	88 c2                	mov    dl,al
c001859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185a3:	83 c9 c0             	or     ecx,0xffffffc0
c00185a6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185aa:	90                   	nop
c00185ab:	83 c4 0c             	add    esp,0xc
c00185ae:	c3                   	ret    
c00185af:	90                   	nop

c00185b0 <PCI::readBAR8(unsigned int, int)>:
c00185b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b8:	f6 c2 01             	test   dl,0x1
c00185bb:	74 07                	je     c00185c4 <PCI::readBAR8(unsigned int, int)+0x14>
c00185bd:	83 e2 fc             	and    edx,0xfffffffc
c00185c0:	01 c2                	add    edx,eax
c00185c2:	ec                   	in     al,dx
c00185c3:	c3                   	ret    
c00185c4:	83 e2 f0             	and    edx,0xfffffff0
c00185c7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185ca:	c3                   	ret    
c00185cb:	90                   	nop

c00185cc <PCI::readBAR16(unsigned int, int)>:
c00185cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d4:	f6 c2 01             	test   dl,0x1
c00185d7:	74 08                	je     c00185e1 <PCI::readBAR16(unsigned int, int)+0x15>
c00185d9:	83 e2 fc             	and    edx,0xfffffffc
c00185dc:	01 c2                	add    edx,eax
c00185de:	66 ed                	in     ax,dx
c00185e0:	c3                   	ret    
c00185e1:	83 e2 f0             	and    edx,0xfffffff0
c00185e4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185e8:	c3                   	ret    
c00185e9:	90                   	nop

c00185ea <PCI::readBAR32(unsigned int, int)>:
c00185ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185f2:	f6 c2 01             	test   dl,0x1
c00185f5:	74 07                	je     c00185fe <PCI::readBAR32(unsigned int, int)+0x14>
c00185f7:	83 e2 fc             	and    edx,0xfffffffc
c00185fa:	01 c2                	add    edx,eax
c00185fc:	ed                   	in     eax,dx
c00185fd:	c3                   	ret    
c00185fe:	83 e2 f0             	and    edx,0xfffffff0
c0018601:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018604:	c3                   	ret    
c0018605:	90                   	nop

c0018606 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001860a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001860e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018612:	f6 c2 01             	test   dl,0x1
c0018615:	74 07                	je     c001861e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018617:	83 e2 fc             	and    edx,0xfffffffc
c001861a:	01 ca                	add    edx,ecx
c001861c:	ee                   	out    dx,al
c001861d:	c3                   	ret    
c001861e:	83 e2 f0             	and    edx,0xfffffff0
c0018621:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018624:	c3                   	ret    
c0018625:	90                   	nop

c0018626 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001862a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018632:	f6 c2 01             	test   dl,0x1
c0018635:	74 08                	je     c001863f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018637:	83 e2 fc             	and    edx,0xfffffffc
c001863a:	01 ca                	add    edx,ecx
c001863c:	66 ef                	out    dx,ax
c001863e:	c3                   	ret    
c001863f:	83 e2 f0             	and    edx,0xfffffff0
c0018642:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018646:	c3                   	ret    
c0018647:	90                   	nop

c0018648 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001864c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018650:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018654:	f6 c2 01             	test   dl,0x1
c0018657:	74 07                	je     c0018660 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018659:	83 e2 fc             	and    edx,0xfffffffc
c001865c:	01 ca                	add    edx,ecx
c001865e:	ef                   	out    dx,eax
c001865f:	c3                   	ret    
c0018660:	83 e2 f0             	and    edx,0xfffffff0
c0018663:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018666:	c3                   	ret    
c0018667:	90                   	nop

c0018668 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018668:	55                   	push   ebp
c0018669:	57                   	push   edi
c001866a:	56                   	push   esi
c001866b:	53                   	push   ebx
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018673:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018677:	89 f0                	mov    eax,esi
c0018679:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001867d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018681:	3c 07                	cmp    al,0x7
c0018683:	76 10                	jbe    c0018695 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018685:	83 ec 0c             	sub    esp,0xc
c0018688:	68 47 f1 01 c0       	push   0xc001f147
c001868d:	e8 55 80 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0018692:	83 c4 10             	add    esp,0x10
c0018695:	80 fb 0f             	cmp    bl,0xf
c0018698:	76 10                	jbe    c00186aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001869a:	83 ec 0c             	sub    esp,0xc
c001869d:	68 77 f1 01 c0       	push   0xc001f177
c00186a2:	e8 40 80 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00186a7:	83 c4 10             	add    esp,0x10
c00186aa:	8d 04 36             	lea    eax,[esi+esi*1]
c00186ad:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186b2:	83 c8 f0             	or     eax,0xfffffff0
c00186b5:	ee                   	out    dx,al
c00186b6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186bb:	89 e8                	mov    eax,ebp
c00186bd:	ee                   	out    dx,al
c00186be:	83 c4 0c             	add    esp,0xc
c00186c1:	89 d8                	mov    eax,ebx
c00186c3:	66 81 e7 fc 00       	and    di,0xfc
c00186c8:	5b                   	pop    ebx
c00186c9:	c1 e0 08             	shl    eax,0x8
c00186cc:	5e                   	pop    esi
c00186cd:	09 f8                	or     eax,edi
c00186cf:	5f                   	pop    edi
c00186d0:	66 0d 00 c0          	or     ax,0xc000
c00186d4:	5d                   	pop    ebp
c00186d5:	c3                   	ret    

c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186d6:	57                   	push   edi
c00186d7:	56                   	push   esi
c00186d8:	53                   	push   ebx
c00186d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186f3:	83 ff 01             	cmp    edi,0x1
c00186f6:	75 3e                	jne    c0018736 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186f8:	89 de                	mov    esi,ebx
c00186fa:	0f b6 c0             	movzx  eax,al
c00186fd:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018703:	c1 e0 10             	shl    eax,0x10
c0018706:	0f b6 c9             	movzx  ecx,cl
c0018709:	09 f0                	or     eax,esi
c001870b:	c1 e1 08             	shl    ecx,0x8
c001870e:	0f b6 d2             	movzx  edx,dl
c0018711:	09 c8                	or     eax,ecx
c0018713:	c1 e2 0b             	shl    edx,0xb
c0018716:	09 d0                	or     eax,edx
c0018718:	ba f8 0c 00 00       	mov    edx,0xcf8
c001871d:	0d 00 00 00 80       	or     eax,0x80000000
c0018722:	ef                   	out    dx,eax
c0018723:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018728:	ed                   	in     eax,dx
c0018729:	83 e3 02             	and    ebx,0x2
c001872c:	0f b6 cb             	movzx  ecx,bl
c001872f:	c1 e1 03             	shl    ecx,0x3
c0018732:	d3 e8                	shr    eax,cl
c0018734:	eb 43                	jmp    c0018779 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018736:	83 ff 02             	cmp    edi,0x2
c0018739:	75 2c                	jne    c0018767 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	0f b6 c9             	movzx  ecx,cl
c0018741:	0f b6 d2             	movzx  edx,dl
c0018744:	0f b6 fb             	movzx  edi,bl
c0018747:	0f b6 c0             	movzx  eax,al
c001874a:	57                   	push   edi
c001874b:	51                   	push   ecx
c001874c:	52                   	push   edx
c001874d:	50                   	push   eax
c001874e:	56                   	push   esi
c001874f:	e8 14 ff ff ff       	call   c0018668 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018754:	89 c2                	mov    edx,eax
c0018756:	ed                   	in     eax,dx
c0018757:	83 e3 02             	and    ebx,0x2
c001875a:	83 c4 20             	add    esp,0x20
c001875d:	0f b6 cb             	movzx  ecx,bl
c0018760:	c1 e1 03             	shl    ecx,0x3
c0018763:	d3 e8                	shr    eax,cl
c0018765:	eb 12                	jmp    c0018779 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018767:	83 ec 0c             	sub    esp,0xc
c001876a:	68 a7 f1 01 c0       	push   0xc001f1a7
c001876f:	e8 73 7f ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	31 c0                	xor    eax,eax
c0018779:	5b                   	pop    ebx
c001877a:	5e                   	pop    esi
c001877b:	5f                   	pop    edi
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001877e:	83 ec 18             	sub    esp,0x18
c0018781:	6a 00                	push   0x0
c0018783:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018788:	50                   	push   eax
c0018789:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878e:	50                   	push   eax
c001878f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018794:	50                   	push   eax
c0018795:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018799:	e8 38 ff ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001879e:	83 c4 2c             	add    esp,0x2c
c00187a1:	c3                   	ret    

c00187a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187a2:	83 ec 18             	sub    esp,0x18
c00187a5:	6a 0e                	push   0xe
c00187a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ac:	50                   	push   eax
c00187ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b2:	50                   	push   eax
c00187b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b8:	50                   	push   eax
c00187b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187bd:	e8 14 ff ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187c2:	83 c4 2c             	add    esp,0x2c
c00187c5:	0f b6 c0             	movzx  eax,al
c00187c8:	c3                   	ret    
c00187c9:	90                   	nop

c00187ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187ca:	55                   	push   ebp
c00187cb:	57                   	push   edi
c00187cc:	56                   	push   esi
c00187cd:	53                   	push   ebx
c00187ce:	83 ec 18             	sub    esp,0x18
c00187d1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187d6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187db:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187e0:	6a 0a                	push   0xa
c00187e2:	56                   	push   esi
c00187e3:	55                   	push   ebp
c00187e4:	57                   	push   edi
c00187e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187e9:	e8 e8 fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ee:	83 c4 14             	add    esp,0x14
c00187f1:	89 c3                	mov    ebx,eax
c00187f3:	6a 0a                	push   0xa
c00187f5:	0f b6 db             	movzx  ebx,bl
c00187f8:	56                   	push   esi
c00187f9:	55                   	push   ebp
c00187fa:	57                   	push   edi
c00187fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187ff:	e8 d2 fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018804:	83 c4 2c             	add    esp,0x2c
c0018807:	25 00 ff 00 00       	and    eax,0xff00
c001880c:	09 d8                	or     eax,ebx
c001880e:	5b                   	pop    ebx
c001880f:	5e                   	pop    esi
c0018810:	5f                   	pop    edi
c0018811:	5d                   	pop    ebp
c0018812:	c3                   	ret    
c0018813:	90                   	nop

c0018814 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018814:	83 ec 18             	sub    esp,0x18
c0018817:	6a 08                	push   0x8
c0018819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881e:	50                   	push   eax
c001881f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018824:	50                   	push   eax
c0018825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882a:	50                   	push   eax
c001882b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882f:	e8 a2 fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018834:	83 c4 2c             	add    esp,0x2c
c0018837:	0f b6 c4             	movzx  eax,ah
c001883a:	c3                   	ret    
c001883b:	90                   	nop

c001883c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001883c:	83 ec 18             	sub    esp,0x18
c001883f:	6a 08                	push   0x8
c0018841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018846:	50                   	push   eax
c0018847:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884c:	50                   	push   eax
c001884d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018852:	50                   	push   eax
c0018853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018857:	e8 7a fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001885c:	83 c4 2c             	add    esp,0x2c
c001885f:	c3                   	ret    

c0018860 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018860:	83 ec 18             	sub    esp,0x18
c0018863:	6a 3c                	push   0x3c
c0018865:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886a:	50                   	push   eax
c001886b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018870:	50                   	push   eax
c0018871:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018876:	50                   	push   eax
c0018877:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001887b:	e8 56 fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018880:	83 c4 2c             	add    esp,0x2c
c0018883:	c3                   	ret    

c0018884 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018884:	83 ec 18             	sub    esp,0x18
c0018887:	6a 18                	push   0x18
c0018889:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888e:	50                   	push   eax
c001888f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018894:	50                   	push   eax
c0018895:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889a:	50                   	push   eax
c001889b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889f:	e8 32 fe ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a4:	83 c4 2c             	add    esp,0x2c
c00188a7:	0f b6 c4             	movzx  eax,ah
c00188aa:	c3                   	ret    
c00188ab:	90                   	nop

c00188ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188ac:	55                   	push   ebp
c00188ad:	57                   	push   edi
c00188ae:	56                   	push   esi
c00188af:	53                   	push   ebx
c00188b0:	83 ec 28             	sub    esp,0x28
c00188b3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188b7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188bc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188c1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188c6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188cd:	8d 43 12             	lea    eax,[ebx+0x12]
c00188d0:	83 c3 10             	add    ebx,0x10
c00188d3:	0f b6 c0             	movzx  eax,al
c00188d6:	0f b6 db             	movzx  ebx,bl
c00188d9:	50                   	push   eax
c00188da:	51                   	push   ecx
c00188db:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188df:	57                   	push   edi
c00188e0:	55                   	push   ebp
c00188e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188e5:	e8 ec fd ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ea:	83 c4 14             	add    esp,0x14
c00188ed:	89 c6                	mov    esi,eax
c00188ef:	53                   	push   ebx
c00188f0:	c1 e6 10             	shl    esi,0x10
c00188f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188f7:	51                   	push   ecx
c00188f8:	57                   	push   edi
c00188f9:	55                   	push   ebp
c00188fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188fe:	e8 d3 fd ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018903:	83 c4 3c             	add    esp,0x3c
c0018906:	0f b7 c0             	movzx  eax,ax
c0018909:	5b                   	pop    ebx
c001890a:	09 f0                	or     eax,esi
c001890c:	5e                   	pop    esi
c001890d:	5f                   	pop    edi
c001890e:	5d                   	pop    ebp
c001890f:	c3                   	ret    

c0018910 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018910:	55                   	push   ebp
c0018911:	57                   	push   edi
c0018912:	56                   	push   esi
c0018913:	53                   	push   ebx
c0018914:	83 ec 0c             	sub    esp,0xc
c0018917:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001891b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001891f:	89 f5                	mov    ebp,esi
c0018921:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018927:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001892b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001892f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018933:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018937:	83 f9 01             	cmp    ecx,0x1
c001893a:	75 5d                	jne    c0018999 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001893c:	0f b6 c8             	movzx  ecx,al
c001893f:	0f b6 d2             	movzx  edx,dl
c0018942:	c1 e1 10             	shl    ecx,0x10
c0018945:	c1 e2 0b             	shl    edx,0xb
c0018948:	89 f0                	mov    eax,esi
c001894a:	25 fc 00 00 00       	and    eax,0xfc
c001894f:	09 c1                	or     ecx,eax
c0018951:	89 e8                	mov    eax,ebp
c0018953:	0f b6 c0             	movzx  eax,al
c0018956:	c1 e0 08             	shl    eax,0x8
c0018959:	09 c1                	or     ecx,eax
c001895b:	09 d1                	or     ecx,edx
c001895d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018962:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018968:	89 c8                	mov    eax,ecx
c001896a:	ef                   	out    dx,eax
c001896b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018970:	ed                   	in     eax,dx
c0018971:	0f b7 db             	movzx  ebx,bx
c0018974:	83 e6 02             	and    esi,0x2
c0018977:	74 0a                	je     c0018983 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018979:	0f b7 d0             	movzx  edx,ax
c001897c:	c1 e3 10             	shl    ebx,0x10
c001897f:	09 d3                	or     ebx,edx
c0018981:	eb 05                	jmp    c0018988 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018983:	66 31 c0             	xor    ax,ax
c0018986:	09 c3                	or     ebx,eax
c0018988:	ba f8 0c 00 00       	mov    edx,0xcf8
c001898d:	89 c8                	mov    eax,ecx
c001898f:	ef                   	out    dx,eax
c0018990:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018995:	89 d8                	mov    eax,ebx
c0018997:	eb 41                	jmp    c00189da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018999:	83 f9 02             	cmp    ecx,0x2
c001899c:	75 45                	jne    c00189e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001899e:	83 ec 0c             	sub    esp,0xc
c00189a1:	0f b6 d2             	movzx  edx,dl
c00189a4:	89 f1                	mov    ecx,esi
c00189a6:	0f b6 c0             	movzx  eax,al
c00189a9:	0f b6 f1             	movzx  esi,cl
c00189ac:	89 e9                	mov    ecx,ebp
c00189ae:	56                   	push   esi
c00189af:	0f b6 c9             	movzx  ecx,cl
c00189b2:	51                   	push   ecx
c00189b3:	52                   	push   edx
c00189b4:	50                   	push   eax
c00189b5:	57                   	push   edi
c00189b6:	e8 ad fc ff ff       	call   c0018668 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189bb:	89 c2                	mov    edx,eax
c00189bd:	ed                   	in     eax,dx
c00189be:	83 c4 20             	add    esp,0x20
c00189c1:	0f b7 db             	movzx  ebx,bx
c00189c4:	f6 c2 02             	test   dl,0x2
c00189c7:	74 0c                	je     c00189d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189c9:	0f b7 c8             	movzx  ecx,ax
c00189cc:	89 d8                	mov    eax,ebx
c00189ce:	c1 e0 10             	shl    eax,0x10
c00189d1:	09 c8                	or     eax,ecx
c00189d3:	eb 05                	jmp    c00189da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189d5:	66 31 c0             	xor    ax,ax
c00189d8:	09 d8                	or     eax,ebx
c00189da:	ef                   	out    dx,eax
c00189db:	83 c4 0c             	add    esp,0xc
c00189de:	5b                   	pop    ebx
c00189df:	5e                   	pop    esi
c00189e0:	5f                   	pop    edi
c00189e1:	5d                   	pop    ebp
c00189e2:	c3                   	ret    
c00189e3:	c7 44 24 20 a7 f1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f1a7
c00189eb:	83 c4 0c             	add    esp,0xc
c00189ee:	5b                   	pop    ebx
c00189ef:	5e                   	pop    esi
c00189f0:	5f                   	pop    edi
c00189f1:	5d                   	pop    ebp
c00189f2:	e9 f0 7c ff ff       	jmp    c00106e7 <Krnl::panic(char const*)>
c00189f7:	90                   	nop

c00189f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189f8:	55                   	push   ebp
c00189f9:	57                   	push   edi
c00189fa:	56                   	push   esi
c00189fb:	53                   	push   ebx
c00189fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a02:	80 3d ec 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ec,0x0
c0018a09:	0f 85 84 00 00 00    	jne    c0018a93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a0f:	83 ec 0c             	sub    esp,0xc
c0018a12:	68 14 01 00 00       	push   0x114
c0018a17:	e8 3d f4 fe ff       	call   c0007e59 <malloc>
c0018a1c:	83 c4 0c             	add    esp,0xc
c0018a1f:	89 c3                	mov    ebx,eax
c0018a21:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0018a27:	68 ad f1 01 c0       	push   0xc001f1ad
c0018a2c:	50                   	push   eax
c0018a2d:	e8 2c 27 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0018a32:	5a                   	pop    edx
c0018a33:	59                   	pop    ecx
c0018a34:	6a 01                	push   0x1
c0018a36:	53                   	push   ebx
c0018a37:	e8 e2 27 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0018a3c:	83 c4 0c             	add    esp,0xc
c0018a3f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a43:	50                   	push   eax
c0018a44:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a48:	50                   	push   eax
c0018a49:	53                   	push   ebx
c0018a4a:	e8 7b 2a ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0018a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a53:	40                   	inc    eax
c0018a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a57:	e8 fd f3 fe ff       	call   c0007e59 <malloc>
c0018a5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a60:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c0018a65:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a69:	5e                   	pop    esi
c0018a6a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a6c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a70:	51                   	push   ecx
c0018a71:	50                   	push   eax
c0018a72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a76:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a7a:	53                   	push   ebx
c0018a7b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a7e:	83 c4 14             	add    esp,0x14
c0018a81:	53                   	push   ebx
c0018a82:	e8 f5 27 ff ff       	call   c000b27c <File::close()>
c0018a87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	a3 e4 47 02 c0       	mov    ds:0xc00247e4,eax
c0018a93:	a1 e4 47 02 c0       	mov    eax,ds:0xc00247e4
c0018a98:	8b 15 e8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247e8
c0018a9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aa1:	31 ff                	xor    edi,edi
c0018aa3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018aab:	31 f6                	xor    esi,esi
c0018aad:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018ab2:	31 db                	xor    ebx,ebx
c0018ab4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018abc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ac1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ac8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018acc:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018ad3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ad7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ada:	0f 8e 6b 01 00 00    	jle    c0018c4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018ae0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ae3:	d4 40                	aam    0x40
c0018ae5:	d5 39                	aad    0x39
c0018ae7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018aeb:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018aef:	d4 40                	aam    0x40
c0018af1:	d5 39                	aad    0x39
c0018af3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018af7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018afb:	d4 40                	aam    0x40
c0018afd:	d5 39                	aad    0x39
c0018aff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b03:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b07:	d4 40                	aam    0x40
c0018b09:	d5 39                	aad    0x39
c0018b0b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b0f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b13:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b17:	3c 56                	cmp    al,0x56
c0018b19:	74 45                	je     c0018b60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b1b:	d4 40                	aam    0x40
c0018b1d:	d5 39                	aad    0x39
c0018b1f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b22:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b26:	0f b6 c9             	movzx  ecx,cl
c0018b29:	c1 e1 04             	shl    ecx,0x4
c0018b2c:	d4 40                	aam    0x40
c0018b2e:	d5 39                	aad    0x39
c0018b30:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b33:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b37:	0f b6 db             	movzx  ebx,bl
c0018b3a:	09 cb                	or     ebx,ecx
c0018b3c:	c1 e3 04             	shl    ebx,0x4
c0018b3f:	d4 40                	aam    0x40
c0018b41:	d5 39                	aad    0x39
c0018b43:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b46:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b4a:	0f b6 c9             	movzx  ecx,cl
c0018b4d:	09 cb                	or     ebx,ecx
c0018b4f:	c1 e3 04             	shl    ebx,0x4
c0018b52:	89 d9                	mov    ecx,ebx
c0018b54:	d4 40                	aam    0x40
c0018b56:	d5 39                	aad    0x39
c0018b58:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b5b:	0f b6 db             	movzx  ebx,bl
c0018b5e:	09 cb                	or     ebx,ecx
c0018b60:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b64:	80 f9 44             	cmp    cl,0x44
c0018b67:	74 47                	je     c0018bb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b69:	88 c8                	mov    al,cl
c0018b6b:	d4 40                	aam    0x40
c0018b6d:	d5 39                	aad    0x39
c0018b6f:	83 e8 30             	sub    eax,0x30
c0018b72:	0f b6 e8             	movzx  ebp,al
c0018b75:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b79:	c1 e5 04             	shl    ebp,0x4
c0018b7c:	d4 40                	aam    0x40
c0018b7e:	d5 39                	aad    0x39
c0018b80:	83 e8 30             	sub    eax,0x30
c0018b83:	0f b6 f0             	movzx  esi,al
c0018b86:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b8a:	09 ee                	or     esi,ebp
c0018b8c:	c1 e6 04             	shl    esi,0x4
c0018b8f:	d4 40                	aam    0x40
c0018b91:	d5 39                	aad    0x39
c0018b93:	83 e8 30             	sub    eax,0x30
c0018b96:	0f b6 e8             	movzx  ebp,al
c0018b99:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b9d:	09 ee                	or     esi,ebp
c0018b9f:	c1 e6 04             	shl    esi,0x4
c0018ba2:	89 f5                	mov    ebp,esi
c0018ba4:	d4 40                	aam    0x40
c0018ba6:	d5 39                	aad    0x39
c0018ba8:	83 e8 30             	sub    eax,0x30
c0018bab:	0f b6 f0             	movzx  esi,al
c0018bae:	09 ee                	or     esi,ebp
c0018bb0:	83 c7 10             	add    edi,0x10
c0018bb3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bb7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bba:	3c 0a                	cmp    al,0xa
c0018bbc:	74 09                	je     c0018bc7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bbe:	45                   	inc    ebp
c0018bbf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bc2:	75 16                	jne    c0018bda <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bc4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bc7:	3c 0a                	cmp    al,0xa
c0018bc9:	0f 94 c0             	sete   al
c0018bcc:	0f b6 c0             	movzx  eax,al
c0018bcf:	01 c7                	add    edi,eax
c0018bd1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bd6:	75 0c                	jne    c0018be4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bd8:	eb 15                	jmp    c0018bef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bda:	47                   	inc    edi
c0018bdb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bde:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018be2:	eb d3                	jmp    c0018bb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018be4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018be9:	0f 85 e8 fe ff ff    	jne    c0018ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bef:	80 f9 44             	cmp    cl,0x44
c0018bf2:	74 0b                	je     c0018bff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018bf4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018bf9:	0f 85 d8 fe ff ff    	jne    c0018ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bff:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c03:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c07:	c1 e1 04             	shl    ecx,0x4
c0018c0a:	83 e8 30             	sub    eax,0x30
c0018c0d:	09 c8                	or     eax,ecx
c0018c0f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c13:	0f 85 be fe ff ff    	jne    c0018ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c19:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c21:	c1 e1 04             	shl    ecx,0x4
c0018c24:	83 e8 30             	sub    eax,0x30
c0018c27:	09 c8                	or     eax,ecx
c0018c29:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c2d:	0f 85 a4 fe ff ff    	jne    c0018ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c33:	50                   	push   eax
c0018c34:	50                   	push   eax
c0018c35:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c39:	50                   	push   eax
c0018c3a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c41:	e8 da 79 fe ff       	call   c0000620 <strcpy>
c0018c46:	83 c4 10             	add    esp,0x10
c0018c49:	eb 15                	jmp    c0018c60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c4b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c52:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c60:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c67:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c6d:	5b                   	pop    ebx
c0018c6e:	5e                   	pop    esi
c0018c6f:	5f                   	pop    edi
c0018c70:	5d                   	pop    ebp
c0018c71:	c3                   	ret    

c0018c72 <PCI::checkBus(unsigned char)>:
c0018c72:	56                   	push   esi
c0018c73:	53                   	push   ebx
c0018c74:	31 f6                	xor    esi,esi
c0018c76:	51                   	push   ecx
c0018c77:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c7b:	0f b6 c3             	movzx  eax,bl
c0018c7e:	52                   	push   edx
c0018c7f:	56                   	push   esi
c0018c80:	46                   	inc    esi
c0018c81:	50                   	push   eax
c0018c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c86:	e8 f3 02 00 00       	call   c0018f7e <PCI::checkDevice(unsigned char, unsigned char)>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	83 fe 20             	cmp    esi,0x20
c0018c91:	75 e8                	jne    c0018c7b <PCI::checkBus(unsigned char)+0x9>
c0018c93:	58                   	pop    eax
c0018c94:	5b                   	pop    ebx
c0018c95:	5e                   	pop    esi
c0018c96:	c3                   	ret    
c0018c97:	90                   	nop

c0018c98 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c98:	55                   	push   ebp
c0018c99:	57                   	push   edi
c0018c9a:	56                   	push   esi
c0018c9b:	53                   	push   ebx
c0018c9c:	83 ec 1c             	sub    esp,0x1c
c0018c9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018ca3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018ca9:	0f 84 52 01 00 00    	je     c0018e01 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018caf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cb3:	66 81 f9 06 04       	cmp    cx,0x406
c0018cb8:	75 2c                	jne    c0018ce6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cba:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cbf:	50                   	push   eax
c0018cc0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cc5:	50                   	push   eax
c0018cc6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018ccb:	50                   	push   eax
c0018ccc:	56                   	push   esi
c0018ccd:	e8 b2 fb ff ff       	call   c0018884 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cd2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cd6:	0f b6 c0             	movzx  eax,al
c0018cd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cdd:	83 c4 2c             	add    esp,0x2c
c0018ce0:	5b                   	pop    ebx
c0018ce1:	5e                   	pop    esi
c0018ce2:	5f                   	pop    edi
c0018ce3:	5d                   	pop    ebp
c0018ce4:	eb 8c                	jmp    c0018c72 <PCI::checkBus(unsigned char)>
c0018ce6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cea:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018cf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018cf4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018cf8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cfc:	88 d3                	mov    bl,dl
c0018cfe:	85 c0                	test   eax,eax
c0018d00:	74 33                	je     c0018d35 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d02:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d05:	85 d2                	test   edx,edx
c0018d07:	74 28                	je     c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d09:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d0f:	31 ef                	xor    edi,ebp
c0018d11:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d17:	75 18                	jne    c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d1d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d23:	75 0c                	jne    c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d25:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d2b:	0f 84 d0 00 00 00    	je     c0018e01 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d33:	eb c9                	jmp    c0018cfe <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d35:	66 81 f9 01 06       	cmp    cx,0x601
c0018d3a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d3e:	75 19                	jne    c0018d59 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d40:	83 ec 0c             	sub    esp,0xc
c0018d43:	68 64 01 00 00       	push   0x164
c0018d48:	e8 0c f1 fe ff       	call   c0007e59 <malloc>
c0018d4d:	89 c5                	mov    ebp,eax
c0018d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d52:	e8 47 0e 00 00       	call   c0019b9e <SATABus::SATABus()>
c0018d57:	eb 1e                	jmp    c0018d77 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d59:	66 81 f9 01 01       	cmp    cx,0x101
c0018d5e:	75 60                	jne    c0018dc0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	68 70 02 00 00       	push   0x270
c0018d68:	e8 ec f0 fe ff       	call   c0007e59 <malloc>
c0018d6d:	89 c5                	mov    ebp,eax
c0018d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d72:	e8 cb 02 00 00       	call   c0019042 <IDE::IDE()>
c0018d77:	58                   	pop    eax
c0018d78:	5a                   	pop    edx
c0018d79:	55                   	push   ebp
c0018d7a:	56                   	push   esi
c0018d7b:	e8 a8 32 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018d80:	83 ec 1c             	sub    esp,0x1c
c0018d83:	b9 09 00 00 00       	mov    ecx,0x9
c0018d88:	fc                   	cld    
c0018d89:	89 e7                	mov    edi,esp
c0018d8b:	89 de                	mov    esi,ebx
c0018d8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d8f:	55                   	push   ebp
c0018d90:	e8 d9 31 ff ff       	call   c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d98:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d9c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018da4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018dac:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018db4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018db7:	83 c4 4c             	add    esp,0x4c
c0018dba:	5b                   	pop    ebx
c0018dbb:	5e                   	pop    esi
c0018dbc:	5f                   	pop    edi
c0018dbd:	5d                   	pop    ebp
c0018dbe:	ff e0                	jmp    eax
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	68 58 01 00 00       	push   0x158
c0018dc8:	e8 8c f0 fe ff       	call   c0007e59 <malloc>
c0018dcd:	89 c5                	mov    ebp,eax
c0018dcf:	58                   	pop    eax
c0018dd0:	5a                   	pop    edx
c0018dd1:	68 c6 f1 01 c0       	push   0xc001f1c6
c0018dd6:	55                   	push   ebp
c0018dd7:	e8 ea 34 ff ff       	call   c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018ddc:	59                   	pop    ecx
c0018ddd:	5f                   	pop    edi
c0018dde:	55                   	push   ebp
c0018ddf:	56                   	push   esi
c0018de0:	e8 43 32 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018de5:	b9 09 00 00 00       	mov    ecx,0x9
c0018dea:	fc                   	cld    
c0018deb:	89 df                	mov    edi,ebx
c0018ded:	89 de                	mov    esi,ebx
c0018def:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018df1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018df5:	83 c4 2c             	add    esp,0x2c
c0018df8:	5b                   	pop    ebx
c0018df9:	5e                   	pop    esi
c0018dfa:	5f                   	pop    edi
c0018dfb:	5d                   	pop    ebp
c0018dfc:	e9 6d 31 ff ff       	jmp    c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e01:	83 c4 1c             	add    esp,0x1c
c0018e04:	5b                   	pop    ebx
c0018e05:	5e                   	pop    esi
c0018e06:	5f                   	pop    edi
c0018e07:	5d                   	pop    ebp
c0018e08:	c3                   	ret    
c0018e09:	90                   	nop

c0018e0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e0a:	55                   	push   ebp
c0018e0b:	57                   	push   edi
c0018e0c:	56                   	push   esi
c0018e0d:	53                   	push   ebx
c0018e0e:	83 ec 68             	sub    esp,0x68
c0018e11:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e15:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e27:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e30:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e37:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e40:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e45:	6a 0c                	push   0xc
c0018e47:	57                   	push   edi
c0018e48:	53                   	push   ebx
c0018e49:	56                   	push   esi
c0018e4a:	55                   	push   ebp
c0018e4b:	e8 86 f8 ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e50:	83 c4 20             	add    esp,0x20
c0018e53:	57                   	push   edi
c0018e54:	53                   	push   ebx
c0018e55:	56                   	push   esi
c0018e56:	55                   	push   ebp
c0018e57:	e8 6e f9 ff ff       	call   c00187ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e5c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e61:	57                   	push   edi
c0018e62:	53                   	push   ebx
c0018e63:	56                   	push   esi
c0018e64:	55                   	push   ebp
c0018e65:	e8 f6 f9 ff ff       	call   c0018860 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e6a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e6e:	83 c4 14             	add    esp,0x14
c0018e71:	6a 3c                	push   0x3c
c0018e73:	57                   	push   edi
c0018e74:	53                   	push   ebx
c0018e75:	56                   	push   esi
c0018e76:	55                   	push   ebp
c0018e77:	e8 5a f8 ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e7c:	0f b6 c4             	movzx  eax,ah
c0018e7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e83:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e87:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e8b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0018e90:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e96:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ea0:	83 c4 20             	add    esp,0x20
c0018ea3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ea8:	74 30                	je     c0018eda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eaa:	31 c0                	xor    eax,eax
c0018eac:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018eb0:	7e 28                	jle    c0018eda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eb2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eba:	39 cb                	cmp    ebx,ecx
c0018ebc:	75 19                	jne    c0018ed7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ebe:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018ec6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018eca:	75 0b                	jne    c0018ed7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ecc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ed3:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ed7:	40                   	inc    eax
c0018ed8:	eb d2                	jmp    c0018eac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018eda:	31 d2                	xor    edx,edx
c0018edc:	83 ec 0c             	sub    esp,0xc
c0018edf:	57                   	push   edi
c0018ee0:	53                   	push   ebx
c0018ee1:	56                   	push   esi
c0018ee2:	52                   	push   edx
c0018ee3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018ee7:	55                   	push   ebp
c0018ee8:	e8 bf f9 ff ff       	call   c00188ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018eed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ef1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ef5:	42                   	inc    edx
c0018ef6:	83 c4 20             	add    esp,0x20
c0018ef9:	83 fa 06             	cmp    edx,0x6
c0018efc:	75 de                	jne    c0018edc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018efe:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f03:	83 ec 0c             	sub    esp,0xc
c0018f06:	86 e0                	xchg   al,ah
c0018f08:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f0d:	6a 02                	push   0x2
c0018f0f:	57                   	push   edi
c0018f10:	53                   	push   ebx
c0018f11:	56                   	push   esi
c0018f12:	55                   	push   ebp
c0018f13:	e8 be f7 ff ff       	call   c00186d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f18:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f1d:	83 c4 20             	add    esp,0x20
c0018f20:	57                   	push   edi
c0018f21:	53                   	push   ebx
c0018f22:	56                   	push   esi
c0018f23:	55                   	push   ebp
c0018f24:	e8 eb f8 ff ff       	call   c0018814 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f29:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f2d:	57                   	push   edi
c0018f2e:	53                   	push   ebx
c0018f2f:	56                   	push   esi
c0018f30:	55                   	push   ebp
c0018f31:	e8 48 f8 ff ff       	call   c001877e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f36:	b9 09 00 00 00       	mov    ecx,0x9
c0018f3b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f40:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f44:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f48:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f4c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f50:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f54:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f58:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f5c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f60:	83 ec 0c             	sub    esp,0xc
c0018f63:	fc                   	cld    
c0018f64:	89 e7                	mov    edi,esp
c0018f66:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f6c:	55                   	push   ebp
c0018f6d:	e8 26 fd ff ff       	call   c0018c98 <PCI::foundDevice(PCIDeviceInfo)>
c0018f72:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f78:	5b                   	pop    ebx
c0018f79:	5e                   	pop    esi
c0018f7a:	5f                   	pop    edi
c0018f7b:	5d                   	pop    ebp
c0018f7c:	c3                   	ret    
c0018f7d:	90                   	nop

c0018f7e <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f7e:	55                   	push   ebp
c0018f7f:	57                   	push   edi
c0018f80:	56                   	push   esi
c0018f81:	53                   	push   ebx
c0018f82:	83 ec 0c             	sub    esp,0xc
c0018f85:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f89:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f8e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f93:	6a 00                	push   0x0
c0018f95:	56                   	push   esi
c0018f96:	57                   	push   edi
c0018f97:	55                   	push   ebp
c0018f98:	e8 e1 f7 ff ff       	call   c001877e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f9d:	6a 00                	push   0x0
c0018f9f:	56                   	push   esi
c0018fa0:	57                   	push   edi
c0018fa1:	55                   	push   ebp
c0018fa2:	e8 63 fe ff ff       	call   c0018e0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fa7:	83 c4 20             	add    esp,0x20
c0018faa:	6a 00                	push   0x0
c0018fac:	56                   	push   esi
c0018fad:	57                   	push   edi
c0018fae:	55                   	push   ebp
c0018faf:	e8 ee f7 ff ff       	call   c00187a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fb4:	83 c4 10             	add    esp,0x10
c0018fb7:	84 c0                	test   al,al
c0018fb9:	79 27                	jns    c0018fe2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fbb:	bb 01 00 00 00       	mov    ebx,0x1
c0018fc0:	53                   	push   ebx
c0018fc1:	56                   	push   esi
c0018fc2:	57                   	push   edi
c0018fc3:	55                   	push   ebp
c0018fc4:	e8 b5 f7 ff ff       	call   c001877e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fc9:	83 c4 10             	add    esp,0x10
c0018fcc:	66 40                	inc    ax
c0018fce:	74 0c                	je     c0018fdc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fd0:	53                   	push   ebx
c0018fd1:	56                   	push   esi
c0018fd2:	57                   	push   edi
c0018fd3:	55                   	push   ebp
c0018fd4:	e8 31 fe ff ff       	call   c0018e0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	43                   	inc    ebx
c0018fdd:	83 fb 08             	cmp    ebx,0x8
c0018fe0:	75 de                	jne    c0018fc0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fe2:	83 c4 0c             	add    esp,0xc
c0018fe5:	5b                   	pop    ebx
c0018fe6:	5e                   	pop    esi
c0018fe7:	5f                   	pop    edi
c0018fe8:	5d                   	pop    ebp
c0018fe9:	c3                   	ret    

c0018fea <PCI::detect()>:
c0018fea:	56                   	push   esi
c0018feb:	53                   	push   ebx
c0018fec:	53                   	push   ebx
c0018fed:	31 db                	xor    ebx,ebx
c0018fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018ff3:	6a 00                	push   0x0
c0018ff5:	6a 00                	push   0x0
c0018ff7:	6a 00                	push   0x0
c0018ff9:	56                   	push   esi
c0018ffa:	e8 a3 f7 ff ff       	call   c00187a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	a8 80                	test   al,0x80
c0019004:	75 21                	jne    c0019027 <PCI::detect()+0x3d>
c0019006:	51                   	push   ecx
c0019007:	51                   	push   ecx
c0019008:	6a 00                	push   0x0
c001900a:	56                   	push   esi
c001900b:	e8 62 fc ff ff       	call   c0018c72 <PCI::checkBus(unsigned char)>
c0019010:	83 c4 10             	add    esp,0x10
c0019013:	eb 24                	jmp    c0019039 <PCI::detect()+0x4f>
c0019015:	52                   	push   edx
c0019016:	52                   	push   edx
c0019017:	53                   	push   ebx
c0019018:	43                   	inc    ebx
c0019019:	56                   	push   esi
c001901a:	e8 53 fc ff ff       	call   c0018c72 <PCI::checkBus(unsigned char)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	83 fb 08             	cmp    ebx,0x8
c0019025:	74 12                	je     c0019039 <PCI::detect()+0x4f>
c0019027:	53                   	push   ebx
c0019028:	6a 00                	push   0x0
c001902a:	6a 00                	push   0x0
c001902c:	56                   	push   esi
c001902d:	e8 4c f7 ff ff       	call   c001877e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019032:	83 c4 10             	add    esp,0x10
c0019035:	66 40                	inc    ax
c0019037:	74 dc                	je     c0019015 <PCI::detect()+0x2b>
c0019039:	58                   	pop    eax
c001903a:	5b                   	pop    ebx
c001903b:	5e                   	pop    esi
c001903c:	c3                   	ret    
c001903d:	90                   	nop

c001903e <IDE::close(int, int, void*)>:
c001903e:	83 c8 ff             	or     eax,0xffffffff
c0019041:	c3                   	ret    

c0019042 <IDE::IDE()>:
c0019042:	83 ec 0c             	sub    esp,0xc
c0019045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019049:	83 ec 08             	sub    esp,0x8
c001904c:	68 0c f2 01 c0       	push   0xc001f20c
c0019051:	50                   	push   eax
c0019052:	e8 15 33 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c001905f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019063:	89 10                	mov    DWORD PTR [eax],edx
c0019065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019069:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019070:	90                   	nop
c0019071:	83 c4 0c             	add    esp,0xc
c0019074:	c3                   	ret    
c0019075:	90                   	nop

c0019076 <IDE::prepareInterrupt(unsigned char)>:
c0019076:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001907b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001907f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019087:	c3                   	ret    

c0019088 <selectDrive(unsigned char, unsigned char)>:
c0019088:	c3                   	ret    
c0019089:	90                   	nop

c001908a <IDE::getBase(unsigned char)>:
c001908a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001908f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019093:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001909b:	c3                   	ret    

c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001909c:	55                   	push   ebp
c001909d:	57                   	push   edi
c001909e:	56                   	push   esi
c001909f:	53                   	push   ebx
c00190a0:	83 ec 1c             	sub    esp,0x1c
c00190a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190a7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190ab:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190b6:	80 f9 03             	cmp    cl,0x3
c00190b9:	77 51                	ja     c001910c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190bf:	0f b6 f2             	movzx  esi,dl
c00190c2:	0f b6 db             	movzx  ebx,bl
c00190c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190c8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190cc:	83 ca 80             	or     edx,0xffffff80
c00190cf:	0f b6 d2             	movzx  edx,dl
c00190d2:	52                   	push   edx
c00190d3:	6a 0c                	push   0xc
c00190d5:	56                   	push   esi
c00190d6:	57                   	push   edi
c00190d7:	e8 c0 ff ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190dc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190e5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190e9:	ee                   	out    dx,al
c00190ea:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190ef:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190f3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190f7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190fb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019103:	83 c4 2c             	add    esp,0x2c
c0019106:	5b                   	pop    ebx
c0019107:	5e                   	pop    esi
c0019108:	5f                   	pop    edi
c0019109:	5d                   	pop    ebp
c001910a:	eb 90                	jmp    c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001910c:	80 fb 07             	cmp    bl,0x7
c001910f:	77 12                	ja     c0019123 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019111:	0f b6 d2             	movzx  edx,dl
c0019114:	0f b6 db             	movzx  ebx,bl
c0019117:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001911f:	89 da                	mov    edx,ebx
c0019121:	eb 2f                	jmp    c0019152 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019123:	80 fb 0d             	cmp    bl,0xd
c0019126:	77 13                	ja     c001913b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019128:	0f b6 d2             	movzx  edx,dl
c001912b:	0f b6 db             	movzx  ebx,bl
c001912e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019135:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019139:	eb 17                	jmp    c0019152 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001913b:	80 fb 15             	cmp    bl,0x15
c001913e:	77 13                	ja     c0019153 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019140:	0f b6 d2             	movzx  edx,dl
c0019143:	0f b6 db             	movzx  ebx,bl
c0019146:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001914e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019152:	ee                   	out    dx,al
c0019153:	83 c4 1c             	add    esp,0x1c
c0019156:	5b                   	pop    ebx
c0019157:	5e                   	pop    esi
c0019158:	5f                   	pop    edi
c0019159:	5d                   	pop    ebp
c001915a:	c3                   	ret    
c001915b:	90                   	nop

c001915c <IDE::read(unsigned char, unsigned char)>:
c001915c:	55                   	push   ebp
c001915d:	57                   	push   edi
c001915e:	56                   	push   esi
c001915f:	53                   	push   ebx
c0019160:	83 ec 1c             	sub    esp,0x1c
c0019163:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019167:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001916b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001916e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019172:	3c 03                	cmp    al,0x3
c0019174:	77 43                	ja     c00191b9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019176:	0f b6 f2             	movzx  esi,dl
c0019179:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001917c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019180:	83 c8 80             	or     eax,0xffffff80
c0019183:	0f b6 c0             	movzx  eax,al
c0019186:	50                   	push   eax
c0019187:	6a 0c                	push   0xc
c0019189:	56                   	push   esi
c001918a:	57                   	push   edi
c001918b:	e8 0c ff ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019190:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019195:	0f b6 c3             	movzx  eax,bl
c0019198:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001919c:	ec                   	in     al,dx
c001919d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191a1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191a6:	52                   	push   edx
c00191a7:	6a 0c                	push   0xc
c00191a9:	56                   	push   esi
c00191aa:	57                   	push   edi
c00191ab:	e8 ec fe ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191b0:	83 c4 20             	add    esp,0x20
c00191b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191b7:	eb 49                	jmp    c0019202 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191b9:	80 fb 07             	cmp    bl,0x7
c00191bc:	77 12                	ja     c00191d0 <IDE::read(unsigned char, unsigned char)+0x74>
c00191be:	0f b6 d2             	movzx  edx,dl
c00191c1:	0f b6 c3             	movzx  eax,bl
c00191c4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191cc:	89 c2                	mov    edx,eax
c00191ce:	eb 31                	jmp    c0019201 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191d0:	80 fb 0d             	cmp    bl,0xd
c00191d3:	77 13                	ja     c00191e8 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191d5:	0f b6 d2             	movzx  edx,dl
c00191d8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191df:	0f b6 d3             	movzx  edx,bl
c00191e2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191e6:	eb 19                	jmp    c0019201 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191e8:	31 c0                	xor    eax,eax
c00191ea:	80 fb 15             	cmp    bl,0x15
c00191ed:	77 13                	ja     c0019202 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191ef:	0f b6 d2             	movzx  edx,dl
c00191f2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191fa:	0f b6 d3             	movzx  edx,bl
c00191fd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019201:	ec                   	in     al,dx
c0019202:	83 c4 1c             	add    esp,0x1c
c0019205:	5b                   	pop    ebx
c0019206:	5e                   	pop    esi
c0019207:	5f                   	pop    edi
c0019208:	5d                   	pop    ebp
c0019209:	c3                   	ret    

c001920a <IDE::waitInterrupt(unsigned char)>:
c001920a:	57                   	push   edi
c001920b:	56                   	push   esi
c001920c:	31 f6                	xor    esi,esi
c001920e:	53                   	push   ebx
c001920f:	83 ec 10             	sub    esp,0x10
c0019212:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019216:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001921a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001921e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019223:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001922a:	84 db                	test   bl,bl
c001922c:	75 33                	jne    c0019261 <IDE::waitInterrupt(unsigned char)+0x57>
c001922e:	52                   	push   edx
c001922f:	6a 0c                	push   0xc
c0019231:	50                   	push   eax
c0019232:	57                   	push   edi
c0019233:	e8 24 ff ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	a8 01                	test   al,0x1
c001923d:	75 2a                	jne    c0019269 <IDE::waitInterrupt(unsigned char)+0x5f>
c001923f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019245:	75 12                	jne    c0019259 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019247:	83 fe 32             	cmp    esi,0x32
c001924a:	7e 0d                	jle    c0019259 <IDE::waitInterrupt(unsigned char)+0x4f>
c001924c:	83 ec 0c             	sub    esp,0xc
c001924f:	6a 64                	push   0x64
c0019251:	e8 e6 aa ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c0019256:	83 c4 10             	add    esp,0x10
c0019259:	83 fe 3c             	cmp    esi,0x3c
c001925c:	74 0b                	je     c0019269 <IDE::waitInterrupt(unsigned char)+0x5f>
c001925e:	46                   	inc    esi
c001925f:	eb bd                	jmp    c001921e <IDE::waitInterrupt(unsigned char)+0x14>
c0019261:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	88 d8                	mov    al,bl
c001926e:	5b                   	pop    ebx
c001926f:	5e                   	pop    esi
c0019270:	5f                   	pop    edi
c0019271:	c3                   	ret    

c0019272 <ideChannel0IRQHandler(regs*, void*)>:
c0019272:	83 ec 10             	sub    esp,0x10
c0019275:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019279:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019280:	6a 07                	push   0x7
c0019282:	6a 00                	push   0x0
c0019284:	50                   	push   eax
c0019285:	e8 d2 fe ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001928a:	83 c4 1c             	add    esp,0x1c
c001928d:	c3                   	ret    

c001928e <ideChannel1IRQHandler(regs*, void*)>:
c001928e:	83 ec 10             	sub    esp,0x10
c0019291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019295:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001929c:	6a 07                	push   0x7
c001929e:	6a 01                	push   0x1
c00192a0:	50                   	push   eax
c00192a1:	e8 b6 fe ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c00192a6:	83 c4 1c             	add    esp,0x1c
c00192a9:	c3                   	ret    

c00192aa <IDE::enableIRQs(unsigned char, bool)>:
c00192aa:	57                   	push   edi
c00192ab:	56                   	push   esi
c00192ac:	be 04 00 00 00       	mov    esi,0x4
c00192b1:	53                   	push   ebx
c00192b2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192bb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192c0:	0f 94 c0             	sete   al
c00192c3:	01 c0                	add    eax,eax
c00192c5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192cc:	0f b6 c0             	movzx  eax,al
c00192cf:	50                   	push   eax
c00192d0:	6a 0c                	push   0xc
c00192d2:	57                   	push   edi
c00192d3:	53                   	push   ebx
c00192d4:	e8 c3 fd ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	50                   	push   eax
c00192dd:	6a 0c                	push   0xc
c00192df:	57                   	push   edi
c00192e0:	53                   	push   ebx
c00192e1:	e8 76 fe ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	4e                   	dec    esi
c00192ea:	75 f0                	jne    c00192dc <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192ec:	5b                   	pop    ebx
c00192ed:	5e                   	pop    esi
c00192ee:	5f                   	pop    edi
c00192ef:	c3                   	ret    

c00192f0 <IDE::open(int, int, void*)>:
c00192f0:	55                   	push   ebp
c00192f1:	57                   	push   edi
c00192f2:	56                   	push   esi
c00192f3:	53                   	push   ebx
c00192f4:	83 ec 1c             	sub    esp,0x1c
c00192f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192fb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019304:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001930d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019314:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001931b:	0f 85 b0 02 00 00    	jne    c00195d1 <IDE::open(int, int, void*)+0x2e1>
c0019321:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019327:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001932b:	83 e0 7f             	and    eax,0x7f
c001932e:	3c 05                	cmp    al,0x5
c0019330:	74 04                	je     c0019336 <IDE::open(int, int, void*)+0x46>
c0019332:	3c 0f                	cmp    al,0xf
c0019334:	75 32                	jne    c0019368 <IDE::open(int, int, void*)+0x78>
c0019336:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001933c:	83 e0 fc             	and    eax,0xfffffffc
c001933f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019346:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001934c:	83 e0 fc             	and    eax,0xfffffffc
c001934f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019356:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001935c:	83 e0 fc             	and    eax,0xfffffffc
c001935f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019366:	eb 14                	jmp    c001937c <IDE::open(int, int, void*)+0x8c>
c0019368:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019372:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001937c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019383:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001938a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001938e:	89 c6                	mov    esi,eax
c0019390:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019395:	c1 e6 10             	shl    esi,0x10
c0019398:	89 e8                	mov    eax,ebp
c001939a:	89 fa                	mov    edx,edi
c001939c:	c1 e0 0b             	shl    eax,0xb
c001939f:	09 f0                	or     eax,esi
c00193a1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193a8:	c1 e6 08             	shl    esi,0x8
c00193ab:	09 c6                	or     esi,eax
c00193ad:	89 f0                	mov    eax,esi
c00193af:	0d 08 00 00 80       	or     eax,0x80000008
c00193b4:	ef                   	out    dx,eax
c00193b5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193ba:	89 ca                	mov    edx,ecx
c00193bc:	ed                   	in     eax,dx
c00193bd:	c1 e8 10             	shr    eax,0x10
c00193c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00193c5:	0f 84 f5 00 00 00    	je     c00194c0 <IDE::open(int, int, void*)+0x1d0>
c00193cb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193d1:	89 fa                	mov    edx,edi
c00193d3:	89 f0                	mov    eax,esi
c00193d5:	ef                   	out    dx,eax
c00193d6:	b0 fe                	mov    al,0xfe
c00193d8:	89 ca                	mov    edx,ecx
c00193da:	ee                   	out    dx,al
c00193db:	89 f0                	mov    eax,esi
c00193dd:	89 fa                	mov    edx,edi
c00193df:	ef                   	out    dx,eax
c00193e0:	89 ca                	mov    edx,ecx
c00193e2:	ed                   	in     eax,dx
c00193e3:	3c fe                	cmp    al,0xfe
c00193e5:	0f 85 a9 00 00 00    	jne    c0019494 <IDE::open(int, int, void*)+0x1a4>
c00193eb:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c00193f1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193f8:	74 33                	je     c001942d <IDE::open(int, int, void*)+0x13d>
c00193fa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019400:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019404:	40                   	inc    eax
c0019405:	83 ec 0c             	sub    esp,0xc
c0019408:	0f b6 c0             	movzx  eax,al
c001940b:	50                   	push   eax
c001940c:	55                   	push   ebp
c001940d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019411:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019417:	51                   	push   ecx
c0019418:	e8 47 59 ff ff       	call   c000ed64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001941d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019422:	83 c4 1c             	add    esp,0x1c
c0019425:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001942b:	eb 0a                	jmp    c0019437 <IDE::open(int, int, void*)+0x147>
c001942d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019437:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001943e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019445:	c1 e1 10             	shl    ecx,0x10
c0019448:	c1 e0 08             	shl    eax,0x8
c001944b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019450:	09 c1                	or     ecx,eax
c0019452:	89 fa                	mov    edx,edi
c0019454:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001945b:	c1 e0 0b             	shl    eax,0xb
c001945e:	09 c1                	or     ecx,eax
c0019460:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019466:	89 c8                	mov    eax,ecx
c0019468:	ef                   	out    dx,eax
c0019469:	be fc 0c 00 00       	mov    esi,0xcfc
c001946e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019474:	89 f2                	mov    edx,esi
c0019476:	ee                   	out    dx,al
c0019477:	89 c8                	mov    eax,ecx
c0019479:	89 fa                	mov    edx,edi
c001947b:	ef                   	out    dx,eax
c001947c:	89 f2                	mov    edx,esi
c001947e:	ed                   	in     eax,dx
c001947f:	0f b6 c0             	movzx  eax,al
c0019482:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019488:	74 46                	je     c00194d0 <IDE::open(int, int, void*)+0x1e0>
c001948a:	83 ec 0c             	sub    esp,0xc
c001948d:	68 24 f2 01 c0       	push   0xc001f224
c0019492:	eb 34                	jmp    c00194c8 <IDE::open(int, int, void*)+0x1d8>
c0019494:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001949d:	75 17                	jne    c00194b6 <IDE::open(int, int, void*)+0x1c6>
c001949f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194a4:	74 07                	je     c00194ad <IDE::open(int, int, void*)+0x1bd>
c00194a6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194ab:	75 09                	jne    c00194b6 <IDE::open(int, int, void*)+0x1c6>
c00194ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194b4:	eb 1a                	jmp    c00194d0 <IDE::open(int, int, void*)+0x1e0>
c00194b6:	83 ec 0c             	sub    esp,0xc
c00194b9:	68 2c f2 01 c0       	push   0xc001f22c
c00194be:	eb 08                	jmp    c00194c8 <IDE::open(int, int, void*)+0x1d8>
c00194c0:	83 ec 0c             	sub    esp,0xc
c00194c3:	68 5d f2 01 c0       	push   0xc001f25d
c00194c8:	e8 1a 72 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194d7:	79 1a                	jns    c00194f3 <IDE::open(int, int, void*)+0x203>
c00194d9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194df:	83 e0 fc             	and    eax,0xfffffffc
c00194e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194e9:	83 c0 08             	add    eax,0x8
c00194ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f9:	89 c2                	mov    edx,eax
c00194fb:	83 e2 0f             	and    edx,0xf
c00194fe:	66 83 fa 08          	cmp    dx,0x8
c0019502:	75 0a                	jne    c001950e <IDE::open(int, int, void*)+0x21e>
c0019504:	83 e8 02             	sub    eax,0x2
c0019507:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001950e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019514:	89 c2                	mov    edx,eax
c0019516:	83 e2 0f             	and    edx,0xf
c0019519:	66 83 fa 08          	cmp    dx,0x8
c001951d:	75 0a                	jne    c0019529 <IDE::open(int, int, void*)+0x239>
c001951f:	83 e8 02             	sub    eax,0x2
c0019522:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019529:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019530:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019537:	89 d0                	mov    eax,edx
c0019539:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001953c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019540:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019544:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019547:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001954c:	0f b6 c9             	movzx  ecx,cl
c001954f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019556:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019559:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001955d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019561:	8d 50 02             	lea    edx,[eax+0x2]
c0019564:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019569:	0f b6 d2             	movzx  edx,dl
c001956c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019572:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019575:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019579:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001957d:	8d 48 03             	lea    ecx,[eax+0x3]
c0019580:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019585:	0f b6 c9             	movzx  ecx,cl
c0019588:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001958e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019591:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019595:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019599:	8d 50 04             	lea    edx,[eax+0x4]
c001959c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195a2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195a7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195ae:	66 85 f6             	test   si,si
c00195b1:	74 5b                	je     c001960e <IDE::open(int, int, void*)+0x31e>
c00195b3:	0f b6 d2             	movzx  edx,dl
c00195b6:	83 c0 05             	add    eax,0x5
c00195b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195c0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195c4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195cf:	eb 3d                	jmp    c001960e <IDE::open(int, int, void*)+0x31e>
c00195d1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195de:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195e5:	66 05 06 02          	add    ax,0x206
c00195e9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195f0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195f7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195fe:	66 05 06 02          	add    ax,0x206
c0019602:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019609:	e9 e5 fe ff ff       	jmp    c00194f3 <IDE::open(int, int, void*)+0x203>
c001960e:	50                   	push   eax
c001960f:	50                   	push   eax
c0019610:	6a 00                	push   0x0
c0019612:	53                   	push   ebx
c0019613:	e8 5e fa ff ff       	call   c0019076 <IDE::prepareInterrupt(unsigned char)>
c0019618:	5a                   	pop    edx
c0019619:	59                   	pop    ecx
c001961a:	6a 01                	push   0x1
c001961c:	53                   	push   ebx
c001961d:	e8 54 fa ff ff       	call   c0019076 <IDE::prepareInterrupt(unsigned char)>
c0019622:	83 c4 0c             	add    esp,0xc
c0019625:	6a 00                	push   0x0
c0019627:	6a 00                	push   0x0
c0019629:	53                   	push   ebx
c001962a:	e8 7b fc ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c001962f:	83 c4 0c             	add    esp,0xc
c0019632:	6a 00                	push   0x0
c0019634:	6a 01                	push   0x1
c0019636:	53                   	push   ebx
c0019637:	e8 6e fc ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019646:	74 34                	je     c001967c <IDE::open(int, int, void*)+0x38c>
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	53                   	push   ebx
c001964c:	6a 01                	push   0x1
c001964e:	68 72 92 01 c0       	push   0xc0019272
c0019653:	6a 0e                	push   0xe
c0019655:	53                   	push   ebx
c0019656:	e8 79 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001965b:	83 c4 14             	add    esp,0x14
c001965e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019664:	53                   	push   ebx
c0019665:	6a 01                	push   0x1
c0019667:	68 8e 92 01 c0       	push   0xc001928e
c001966c:	6a 0f                	push   0xf
c001966e:	53                   	push   ebx
c001966f:	e8 60 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019674:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001967a:	eb 38                	jmp    c00196b4 <IDE::open(int, int, void*)+0x3c4>
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019689:	53                   	push   ebx
c001968a:	6a 00                	push   0x0
c001968c:	68 72 92 01 c0       	push   0xc0019272
c0019691:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019697:	53                   	push   ebx
c0019698:	e8 37 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001969d:	83 c4 14             	add    esp,0x14
c00196a0:	53                   	push   ebx
c00196a1:	6a 00                	push   0x0
c00196a3:	68 8e 92 01 c0       	push   0xc001928e
c00196a8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196ae:	53                   	push   ebx
c00196af:	e8 20 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196b6:	83 c4 20             	add    esp,0x20
c00196b9:	83 ec 0c             	sub    esp,0xc
c00196bc:	53                   	push   ebx
c00196bd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196c0:	83 c4 0c             	add    esp,0xc
c00196c3:	6a 07                	push   0x7
c00196c5:	6a 00                	push   0x0
c00196c7:	53                   	push   ebx
c00196c8:	e8 8f fa ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c00196cd:	83 c4 0c             	add    esp,0xc
c00196d0:	6a 07                	push   0x7
c00196d2:	6a 01                	push   0x1
c00196d4:	53                   	push   ebx
c00196d5:	e8 82 fa ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c00196da:	83 c4 0c             	add    esp,0xc
c00196dd:	6a 01                	push   0x1
c00196df:	6a 00                	push   0x0
c00196e1:	53                   	push   ebx
c00196e2:	e8 c3 fb ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c00196e7:	83 c4 0c             	add    esp,0xc
c00196ea:	6a 01                	push   0x1
c00196ec:	6a 01                	push   0x1
c00196ee:	53                   	push   ebx
c00196ef:	e8 b6 fb ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c00196f4:	83 c4 2c             	add    esp,0x2c
c00196f7:	31 c0                	xor    eax,eax
c00196f9:	5b                   	pop    ebx
c00196fa:	5e                   	pop    esi
c00196fb:	5f                   	pop    edi
c00196fc:	5d                   	pop    ebp
c00196fd:	c3                   	ret    

c00196fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196fe:	55                   	push   ebp
c00196ff:	57                   	push   edi
c0019700:	56                   	push   esi
c0019701:	53                   	push   ebx
c0019702:	83 ec 1c             	sub    esp,0x1c
c0019705:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019709:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001970d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019710:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019714:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019718:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001971c:	80 fa 03             	cmp    dl,0x3
c001971f:	77 5d                	ja     c001977e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019721:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019729:	0f b6 db             	movzx  ebx,bl
c001972c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001972f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019733:	83 ca 80             	or     edx,0xffffff80
c0019736:	0f b6 d2             	movzx  edx,dl
c0019739:	52                   	push   edx
c001973a:	6a 0c                	push   0xc
c001973c:	53                   	push   ebx
c001973d:	56                   	push   esi
c001973e:	e8 59 f9 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019743:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019748:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001974c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019750:	0f b6 c0             	movzx  eax,al
c0019753:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019757:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019759:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001975e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019762:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019766:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001976a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019772:	83 c4 2c             	add    esp,0x2c
c0019775:	5b                   	pop    ebx
c0019776:	5e                   	pop    esi
c0019777:	5f                   	pop    edi
c0019778:	5d                   	pop    ebp
c0019779:	e9 1e f9 ff ff       	jmp    c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001977e:	3c 07                	cmp    al,0x7
c0019780:	77 10                	ja     c0019792 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019782:	0f b6 db             	movzx  ebx,bl
c0019785:	0f b6 d0             	movzx  edx,al
c0019788:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019790:	eb 2d                	jmp    c00197bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019792:	3c 0d                	cmp    al,0xd
c0019794:	77 13                	ja     c00197a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019796:	0f b6 db             	movzx  ebx,bl
c0019799:	0f b6 c0             	movzx  eax,al
c001979c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197a3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197a7:	eb 16                	jmp    c00197bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197a9:	3c 15                	cmp    al,0x15
c00197ab:	77 14                	ja     c00197c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197ad:	0f b6 db             	movzx  ebx,bl
c00197b0:	0f b6 c0             	movzx  eax,al
c00197b3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197bb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197c1:	83 c4 1c             	add    esp,0x1c
c00197c4:	5b                   	pop    ebx
c00197c5:	5e                   	pop    esi
c00197c6:	5f                   	pop    edi
c00197c7:	5d                   	pop    ebp
c00197c8:	c3                   	ret    
c00197c9:	90                   	nop

c00197ca <IDE::detect()>:
c00197ca:	55                   	push   ebp
c00197cb:	57                   	push   edi
c00197cc:	56                   	push   esi
c00197cd:	53                   	push   ebx
c00197ce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197d4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197db:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197e2:	0f 85 97 02 00 00    	jne    c0019a7f <IDE::detect()+0x2b5>
c00197e8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197ef:	31 f6                	xor    esi,esi
c00197f1:	31 ed                	xor    ebp,ebp
c00197f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197fb:	89 e8                	mov    eax,ebp
c00197fd:	c1 e0 06             	shl    eax,0x6
c0019800:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019808:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001980c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019810:	c1 e0 04             	shl    eax,0x4
c0019813:	83 c8 a0             	or     eax,0xffffffa0
c0019816:	0f b6 c0             	movzx  eax,al
c0019819:	50                   	push   eax
c001981a:	6a 06                	push   0x6
c001981c:	56                   	push   esi
c001981d:	53                   	push   ebx
c001981e:	e8 79 f8 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019823:	83 c4 0c             	add    esp,0xc
c0019826:	6a 0c                	push   0xc
c0019828:	56                   	push   esi
c0019829:	53                   	push   ebx
c001982a:	e8 2d f9 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001982f:	83 c4 0c             	add    esp,0xc
c0019832:	6a 0c                	push   0xc
c0019834:	56                   	push   esi
c0019835:	53                   	push   ebx
c0019836:	e8 21 f9 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001983b:	83 c4 0c             	add    esp,0xc
c001983e:	6a 0c                	push   0xc
c0019840:	56                   	push   esi
c0019841:	53                   	push   ebx
c0019842:	e8 15 f9 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019847:	83 c4 0c             	add    esp,0xc
c001984a:	6a 0c                	push   0xc
c001984c:	56                   	push   esi
c001984d:	53                   	push   ebx
c001984e:	e8 09 f9 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019853:	68 ec 00 00 00       	push   0xec
c0019858:	6a 07                	push   0x7
c001985a:	56                   	push   esi
c001985b:	53                   	push   ebx
c001985c:	e8 3b f8 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019861:	83 c4 1c             	add    esp,0x1c
c0019864:	6a 0c                	push   0xc
c0019866:	56                   	push   esi
c0019867:	53                   	push   ebx
c0019868:	e8 ef f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001986d:	83 c4 0c             	add    esp,0xc
c0019870:	6a 0c                	push   0xc
c0019872:	56                   	push   esi
c0019873:	53                   	push   ebx
c0019874:	e8 e3 f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019879:	83 c4 0c             	add    esp,0xc
c001987c:	6a 0c                	push   0xc
c001987e:	56                   	push   esi
c001987f:	53                   	push   ebx
c0019880:	e8 d7 f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019885:	83 c4 0c             	add    esp,0xc
c0019888:	6a 0c                	push   0xc
c001988a:	56                   	push   esi
c001988b:	53                   	push   ebx
c001988c:	e8 cb f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019891:	83 c4 0c             	add    esp,0xc
c0019894:	6a 0c                	push   0xc
c0019896:	56                   	push   esi
c0019897:	53                   	push   ebx
c0019898:	e8 bf f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001989d:	83 c4 10             	add    esp,0x10
c00198a0:	84 c0                	test   al,al
c00198a2:	0f 84 5f 01 00 00    	je     c0019a07 <IDE::detect()+0x23d>
c00198a8:	31 ff                	xor    edi,edi
c00198aa:	50                   	push   eax
c00198ab:	6a 0c                	push   0xc
c00198ad:	56                   	push   esi
c00198ae:	53                   	push   ebx
c00198af:	e8 a8 f8 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c00198b4:	83 c4 10             	add    esp,0x10
c00198b7:	a8 01                	test   al,0x1
c00198b9:	0f 85 69 01 00 00    	jne    c0019a28 <IDE::detect()+0x25e>
c00198bf:	84 c0                	test   al,al
c00198c1:	78 04                	js     c00198c7 <IDE::detect()+0xfd>
c00198c3:	a8 08                	test   al,0x8
c00198c5:	75 23                	jne    c00198ea <IDE::detect()+0x120>
c00198c7:	47                   	inc    edi
c00198c8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198ce:	7e da                	jle    c00198aa <IDE::detect()+0xe0>
c00198d0:	83 ec 0c             	sub    esp,0xc
c00198d3:	6a 32                	push   0x32
c00198d5:	e8 62 a4 ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c00198da:	83 c4 10             	add    esp,0x10
c00198dd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198e3:	75 c5                	jne    c00198aa <IDE::detect()+0xe0>
c00198e5:	e9 3e 01 00 00       	jmp    c0019a28 <IDE::detect()+0x25e>
c00198ea:	31 c9                	xor    ecx,ecx
c00198ec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198f4:	83 ec 0c             	sub    esp,0xc
c00198f7:	68 80 00 00 00       	push   0x80
c00198fc:	57                   	push   edi
c00198fd:	6a 00                	push   0x0
c00198ff:	56                   	push   esi
c0019900:	53                   	push   ebx
c0019901:	e8 f8 fd ff ff       	call   c00196fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019906:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001990b:	89 e8                	mov    eax,ebp
c001990d:	89 d1                	mov    ecx,edx
c001990f:	c1 e0 06             	shl    eax,0x6
c0019912:	01 d8                	add    eax,ebx
c0019914:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001991b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019922:	89 f2                	mov    edx,esi
c0019924:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001992a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001992e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019934:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019938:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001993f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019947:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001994e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019956:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001995c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019963:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019969:	8d 54 24 58          	lea    edx,[esp+0x58]
c001996d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019971:	83 c4 20             	add    esp,0x20
c0019974:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019977:	83 c0 02             	add    eax,0x2
c001997a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019980:	83 c7 02             	add    edi,0x2
c0019983:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019986:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001998c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019990:	75 e2                	jne    c0019974 <IDE::detect()+0x1aa>
c0019992:	89 e8                	mov    eax,ebp
c0019994:	c1 e0 06             	shl    eax,0x6
c0019997:	01 d8                	add    eax,ebx
c0019999:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001999f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199a6:	66 c1 ea 09          	shr    dx,0x9
c00199aa:	83 e2 01             	and    edx,0x1
c00199ad:	84 c9                	test   cl,cl
c00199af:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199b5:	75 22                	jne    c00199d9 <IDE::detect()+0x20f>
c00199b7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199be:	74 46                	je     c0019a06 <IDE::detect()+0x23c>
c00199c0:	83 ec 0c             	sub    esp,0xc
c00199c3:	68 7c 01 00 00       	push   0x17c
c00199c8:	e8 8c e4 fe ff       	call   c0007e59 <malloc>
c00199cd:	89 c7                	mov    edi,eax
c00199cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d2:	e8 11 05 00 00       	call   c0019ee8 <ATA::ATA()>
c00199d7:	eb 17                	jmp    c00199f0 <IDE::detect()+0x226>
c00199d9:	83 ec 0c             	sub    esp,0xc
c00199dc:	68 84 01 00 00       	push   0x184
c00199e1:	e8 73 e4 fe ff       	call   c0007e59 <malloc>
c00199e6:	89 c7                	mov    edi,eax
c00199e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00199eb:	e8 f0 0a 00 00       	call   c001a4e0 <ATAPI::ATAPI()>
c00199f0:	5a                   	pop    edx
c00199f1:	59                   	pop    ecx
c00199f2:	57                   	push   edi
c00199f3:	53                   	push   ebx
c00199f4:	e8 2f 26 ff ff       	call   c000c028 <Device::addChild(Device*)>
c00199f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00199fb:	53                   	push   ebx
c00199fc:	55                   	push   ebp
c00199fd:	6a 00                	push   0x0
c00199ff:	57                   	push   edi
c0019a00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a03:	83 c4 20             	add    esp,0x20
c0019a06:	45                   	inc    ebp
c0019a07:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a0c:	74 0d                	je     c0019a1b <IDE::detect()+0x251>
c0019a0e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a16:	e9 e0 fd ff ff       	jmp    c00197fb <IDE::detect()+0x31>
c0019a1b:	4e                   	dec    esi
c0019a1c:	74 61                	je     c0019a7f <IDE::detect()+0x2b5>
c0019a1e:	be 01 00 00 00       	mov    esi,0x1
c0019a23:	e9 cb fd ff ff       	jmp    c00197f3 <IDE::detect()+0x29>
c0019a28:	50                   	push   eax
c0019a29:	6a 04                	push   0x4
c0019a2b:	56                   	push   esi
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 2a f7 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019a32:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a36:	83 c4 0c             	add    esp,0xc
c0019a39:	6a 05                	push   0x5
c0019a3b:	56                   	push   esi
c0019a3c:	53                   	push   ebx
c0019a3d:	e8 1a f7 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019a42:	83 c4 10             	add    esp,0x10
c0019a45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a49:	80 fa 14             	cmp    dl,0x14
c0019a4c:	75 04                	jne    c0019a52 <IDE::detect()+0x288>
c0019a4e:	3c eb                	cmp    al,0xeb
c0019a50:	eb 07                	jmp    c0019a59 <IDE::detect()+0x28f>
c0019a52:	3c 96                	cmp    al,0x96
c0019a54:	75 b1                	jne    c0019a07 <IDE::detect()+0x23d>
c0019a56:	80 fa 69             	cmp    dl,0x69
c0019a59:	75 ac                	jne    c0019a07 <IDE::detect()+0x23d>
c0019a5b:	68 a1 00 00 00       	push   0xa1
c0019a60:	6a 07                	push   0x7
c0019a62:	56                   	push   esi
c0019a63:	53                   	push   ebx
c0019a64:	e8 33 f6 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a69:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a70:	e8 c7 a2 ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	b1 01                	mov    cl,0x1
c0019a7a:	e9 6d fe ff ff       	jmp    c00198ec <IDE::detect()+0x122>
c0019a7f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a85:	5b                   	pop    ebx
c0019a86:	5e                   	pop    esi
c0019a87:	5f                   	pop    edi
c0019a88:	5d                   	pop    ebp
c0019a89:	c3                   	ret    

c0019a8a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a8a:	55                   	push   ebp
c0019a8b:	57                   	push   edi
c0019a8c:	56                   	push   esi
c0019a8d:	53                   	push   ebx
c0019a8e:	83 ec 1c             	sub    esp,0x1c
c0019a91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a99:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a9d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019aa1:	88 c3                	mov    bl,al
c0019aa3:	84 c0                	test   al,al
c0019aa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aa9:	0f 84 81 00 00 00    	je     c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aaf:	83 ec 0c             	sub    esp,0xc
c0019ab2:	68 87 f2 01 c0       	push   0xc001f287
c0019ab7:	e8 2c 11 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ac3:	3c 01                	cmp    al,0x1
c0019ac5:	74 63                	je     c0019b2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ac7:	3c 02                	cmp    al,0x2
c0019ac9:	75 53                	jne    c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019acb:	01 f6                	add    esi,esi
c0019acd:	09 ee                	or     esi,ebp
c0019acf:	50                   	push   eax
c0019ad0:	89 f0                	mov    eax,esi
c0019ad2:	6a 01                	push   0x1
c0019ad4:	0f b6 f0             	movzx  esi,al
c0019ad7:	c1 e6 06             	shl    esi,0x6
c0019ada:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ae2:	50                   	push   eax
c0019ae3:	57                   	push   edi
c0019ae4:	e8 73 f6 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	a8 01                	test   al,0x1
c0019aee:	74 02                	je     c0019af2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019af0:	b3 07                	mov    bl,0x7
c0019af2:	a8 02                	test   al,0x2
c0019af4:	74 02                	je     c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019af6:	b3 03                	mov    bl,0x3
c0019af8:	a8 04                	test   al,0x4
c0019afa:	74 02                	je     c0019afe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019afc:	b3 14                	mov    bl,0x14
c0019afe:	a8 08                	test   al,0x8
c0019b00:	74 02                	je     c0019b04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b02:	b3 03                	mov    bl,0x3
c0019b04:	a8 10                	test   al,0x10
c0019b06:	74 02                	je     c0019b0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b08:	b3 15                	mov    bl,0x15
c0019b0a:	a8 20                	test   al,0x20
c0019b0c:	74 02                	je     c0019b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b0e:	b3 03                	mov    bl,0x3
c0019b10:	a8 40                	test   al,0x40
c0019b12:	74 02                	je     c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b14:	b3 16                	mov    bl,0x16
c0019b16:	84 c0                	test   al,al
c0019b18:	79 16                	jns    c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1a:	b3 0d                	mov    bl,0xd
c0019b1c:	eb 12                	jmp    c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1e:	3c 03                	cmp    al,0x3
c0019b20:	74 0c                	je     c0019b2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b22:	3c 04                	cmp    al,0x4
c0019b24:	75 0a                	jne    c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b26:	b3 08                	mov    bl,0x8
c0019b28:	eb 06                	jmp    c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b2a:	b3 13                	mov    bl,0x13
c0019b2c:	eb 02                	jmp    c0019b30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b2e:	b3 17                	mov    bl,0x17
c0019b30:	83 c4 1c             	add    esp,0x1c
c0019b33:	88 d8                	mov    al,bl
c0019b35:	5b                   	pop    ebx
c0019b36:	5e                   	pop    esi
c0019b37:	5f                   	pop    edi
c0019b38:	5d                   	pop    ebp
c0019b39:	c3                   	ret    

c0019b3a <IDE::polling(unsigned char, unsigned int)>:
c0019b3a:	55                   	push   ebp
c0019b3b:	bd 04 00 00 00       	mov    ebp,0x4
c0019b40:	57                   	push   edi
c0019b41:	56                   	push   esi
c0019b42:	53                   	push   ebx
c0019b43:	83 ec 0c             	sub    esp,0xc
c0019b46:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b4a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b4e:	0f b6 f3             	movzx  esi,bl
c0019b51:	52                   	push   edx
c0019b52:	6a 0c                	push   0xc
c0019b54:	56                   	push   esi
c0019b55:	57                   	push   edi
c0019b56:	e8 01 f6 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019b5b:	83 c4 10             	add    esp,0x10
c0019b5e:	4d                   	dec    ebp
c0019b5f:	75 ed                	jne    c0019b4e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b61:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b66:	50                   	push   eax
c0019b67:	6a 0c                	push   0xc
c0019b69:	56                   	push   esi
c0019b6a:	57                   	push   edi
c0019b6b:	e8 ec f5 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019b70:	83 c4 10             	add    esp,0x10
c0019b73:	a8 01                	test   al,0x1
c0019b75:	75 17                	jne    c0019b8e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b77:	a8 20                	test   al,0x20
c0019b79:	75 0f                	jne    c0019b8a <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b7b:	4b                   	dec    ebx
c0019b7c:	74 10                	je     c0019b8e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b7e:	84 c0                	test   al,al
c0019b80:	78 e4                	js     c0019b66 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b82:	a8 08                	test   al,0x8
c0019b84:	74 e0                	je     c0019b66 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b86:	31 c0                	xor    eax,eax
c0019b88:	eb 06                	jmp    c0019b90 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b8a:	b0 01                	mov    al,0x1
c0019b8c:	eb 02                	jmp    c0019b90 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b8e:	b0 02                	mov    al,0x2
c0019b90:	83 c4 0c             	add    esp,0xc
c0019b93:	5b                   	pop    ebx
c0019b94:	5e                   	pop    esi
c0019b95:	5f                   	pop    edi
c0019b96:	5d                   	pop    ebp
c0019b97:	c3                   	ret    

c0019b98 <SATABus::close(int, int, void*)>:
c0019b98:	31 c0                	xor    eax,eax
c0019b9a:	c3                   	ret    
c0019b9b:	90                   	nop

c0019b9c <SATABus::detect()>:
c0019b9c:	c3                   	ret    
c0019b9d:	90                   	nop

c0019b9e <SATABus::SATABus()>:
c0019b9e:	83 ec 0c             	sub    esp,0xc
c0019ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ba5:	83 ec 08             	sub    esp,0x8
c0019ba8:	68 c0 f2 01 c0       	push   0xc001f2c0
c0019bad:	50                   	push   eax
c0019bae:	e8 b9 27 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c0019bb3:	83 c4 10             	add    esp,0x10
c0019bb6:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c0019bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bbf:	89 10                	mov    DWORD PTR [eax],edx
c0019bc1:	83 ec 0c             	sub    esp,0xc
c0019bc4:	6a 50                	push   0x50
c0019bc6:	e8 19 e7 fe ff       	call   c00082e4 <Phys::allocateContiguousPages(int)>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	89 c2                	mov    edx,eax
c0019bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bda:	83 ec 0c             	sub    esp,0xc
c0019bdd:	6a 50                	push   0x50
c0019bdf:	e8 b1 fd fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	89 c2                	mov    edx,eax
c0019be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bed:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019bf3:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0019bf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bfc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c06:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c0c:	83 ec 0c             	sub    esp,0xc
c0019c0f:	6a 03                	push   0x3
c0019c11:	6a 50                	push   0x50
c0019c13:	51                   	push   ecx
c0019c14:	52                   	push   edx
c0019c15:	50                   	push   eax
c0019c16:	e8 09 07 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c1b:	83 c4 20             	add    esp,0x20
c0019c1e:	90                   	nop
c0019c1f:	83 c4 0c             	add    esp,0xc
c0019c22:	c3                   	ret    
c0019c23:	90                   	nop

c0019c24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c28:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c2e:	09 c2                	or     edx,eax
c0019c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c3a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c3c:	31 c0                	xor    eax,eax
c0019c3e:	c1 e9 08             	shr    ecx,0x8
c0019c41:	83 e1 0f             	and    ecx,0xf
c0019c44:	39 c8                	cmp    eax,ecx
c0019c46:	74 0a                	je     c0019c52 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c48:	f6 c2 01             	test   dl,0x1
c0019c4b:	74 08                	je     c0019c55 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c4d:	d1 ea                	shr    edx,1
c0019c4f:	40                   	inc    eax
c0019c50:	eb f2                	jmp    c0019c44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c52:	83 c8 ff             	or     eax,0xffffffff
c0019c55:	c3                   	ret    

c0019c56 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c5a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c5d:	89 c2                	mov    edx,eax
c0019c5f:	c1 ea 08             	shr    edx,0x8
c0019c62:	83 e2 0f             	and    edx,0xf
c0019c65:	fe ca                	dec    dl
c0019c67:	75 31                	jne    c0019c9a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c69:	83 e0 0f             	and    eax,0xf
c0019c6c:	3c 03                	cmp    al,0x3
c0019c6e:	75 2a                	jne    c0019c9a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c70:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c73:	b8 02 00 00 00       	mov    eax,0x2
c0019c78:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c7e:	74 1c                	je     c0019c9c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c80:	b8 04 00 00 00       	mov    eax,0x4
c0019c85:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c8b:	74 0f                	je     c0019c9c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c8d:	31 c0                	xor    eax,eax
c0019c8f:	83 fa 03             	cmp    edx,0x3
c0019c92:	0f 94 c0             	sete   al
c0019c95:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c99:	c3                   	ret    
c0019c9a:	31 c0                	xor    eax,eax
c0019c9c:	c3                   	ret    
c0019c9d:	90                   	nop

c0019c9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ca2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca5:	0f ba e2 0f          	bt     edx,0xf
c0019ca9:	72 f7                	jb     c0019ca2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019cab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cae:	83 ca 10             	or     edx,0x10
c0019cb1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cb4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb7:	83 ca 01             	or     edx,0x1
c0019cba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cbd:	c3                   	ret    

c0019cbe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc5:	83 e2 fe             	and    edx,0xfffffffe
c0019cc8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ccb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cce:	83 e2 ef             	and    edx,0xffffffef
c0019cd1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cd4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd7:	0f ba e2 0e          	bt     edx,0xe
c0019cdb:	72 f7                	jb     c0019cd4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cdd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce0:	0f ba e2 0f          	bt     edx,0xf
c0019ce4:	72 ee                	jb     c0019cd4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ce6:	c3                   	ret    
c0019ce7:	90                   	nop

c0019ce8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019ce8:	55                   	push   ebp
c0019ce9:	57                   	push   edi
c0019cea:	56                   	push   esi
c0019ceb:	53                   	push   ebx
c0019cec:	83 ec 1c             	sub    esp,0x1c
c0019cef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019cf3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cf7:	53                   	push   ebx
c0019cf8:	56                   	push   esi
c0019cf9:	e8 c0 ff ff ff       	call   c0019cbe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cfe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d02:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d08:	83 ec 0c             	sub    esp,0xc
c0019d0b:	c1 e5 0a             	shl    ebp,0xa
c0019d0e:	01 e8                	add    eax,ebp
c0019d10:	89 03                	mov    DWORD PTR [ebx],eax
c0019d12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d14:	68 00 04 00 00       	push   0x400
c0019d19:	6a 00                	push   0x0
c0019d1b:	50                   	push   eax
c0019d1c:	e8 cf 67 fe ff       	call   c00004f0 <memset>
c0019d21:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d2b:	01 e8                	add    eax,ebp
c0019d2d:	83 c4 1c             	add    esp,0x1c
c0019d30:	89 03                	mov    DWORD PTR [ebx],eax
c0019d32:	c1 e2 08             	shl    edx,0x8
c0019d35:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d3c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d42:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d48:	01 f8                	add    eax,edi
c0019d4a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d50:	68 00 01 00 00       	push   0x100
c0019d55:	6a 00                	push   0x0
c0019d57:	50                   	push   eax
c0019d58:	e8 93 67 fe ff       	call   c00004f0 <memset>
c0019d5d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d63:	01 fa                	add    edx,edi
c0019d65:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d69:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d6c:	c1 e7 0d             	shl    edi,0xd
c0019d6f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d76:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d7c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d86:	31 ff                	xor    edi,edi
c0019d88:	83 c4 10             	add    esp,0x10
c0019d8b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d95:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d9b:	83 c5 20             	add    ebp,0x20
c0019d9e:	01 f8                	add    eax,edi
c0019da0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019da3:	52                   	push   edx
c0019da4:	68 00 01 00 00       	push   0x100
c0019da9:	6a 00                	push   0x0
c0019dab:	50                   	push   eax
c0019dac:	e8 3f 67 fe ff       	call   c00004f0 <memset>
c0019db1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dbe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019dc5:	01 f8                	add    eax,edi
c0019dc7:	81 c7 00 01 00 00    	add    edi,0x100
c0019dcd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dd0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dd6:	75 b3                	jne    c0019d8b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dd8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019ddf:	50                   	push   eax
c0019de0:	50                   	push   eax
c0019de1:	53                   	push   ebx
c0019de2:	56                   	push   esi
c0019de3:	e8 b6 fe ff ff       	call   c0019c9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019de8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019def:	83 c4 2c             	add    esp,0x2c
c0019df2:	5b                   	pop    ebx
c0019df3:	5e                   	pop    esi
c0019df4:	5f                   	pop    edi
c0019df5:	5d                   	pop    ebp
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop

c0019df8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019df8:	55                   	push   ebp
c0019df9:	57                   	push   edi
c0019dfa:	56                   	push   esi
c0019dfb:	53                   	push   ebx
c0019dfc:	31 db                	xor    ebx,ebx
c0019dfe:	83 ec 0c             	sub    esp,0xc
c0019e01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e09:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e0c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e12:	74 7a                	je     c0019e8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e18:	89 d8                	mov    eax,ebx
c0019e1a:	c1 e0 07             	shl    eax,0x7
c0019e1d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e24:	55                   	push   ebp
c0019e25:	56                   	push   esi
c0019e26:	e8 2b fe ff ff       	call   c0019c56 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e2b:	5a                   	pop    edx
c0019e2c:	83 f8 01             	cmp    eax,0x1
c0019e2f:	59                   	pop    ecx
c0019e30:	75 21                	jne    c0019e53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e32:	50                   	push   eax
c0019e33:	53                   	push   ebx
c0019e34:	55                   	push   ebp
c0019e35:	56                   	push   esi
c0019e36:	e8 ad fe ff ff       	call   c0019ce8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e3b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e42:	e8 12 e0 fe ff       	call   c0007e59 <malloc>
c0019e47:	89 c5                	mov    ebp,eax
c0019e49:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e4c:	e8 43 0d 00 00       	call   c001ab94 <SATA::SATA()>
c0019e51:	eb 24                	jmp    c0019e77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e53:	83 f8 04             	cmp    eax,0x4
c0019e56:	75 36                	jne    c0019e8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e58:	51                   	push   ecx
c0019e59:	53                   	push   ebx
c0019e5a:	55                   	push   ebp
c0019e5b:	56                   	push   esi
c0019e5c:	e8 87 fe ff ff       	call   c0019ce8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e61:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e68:	e8 ec df fe ff       	call   c0007e59 <malloc>
c0019e6d:	89 c5                	mov    ebp,eax
c0019e6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e72:	e8 79 10 00 00       	call   c001aef0 <SATAPI::SATAPI()>
c0019e77:	58                   	pop    eax
c0019e78:	5a                   	pop    edx
c0019e79:	55                   	push   ebp
c0019e7a:	56                   	push   esi
c0019e7b:	e8 a8 21 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0019e80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e83:	56                   	push   esi
c0019e84:	6a 00                	push   0x0
c0019e86:	53                   	push   ebx
c0019e87:	55                   	push   ebp
c0019e88:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e8b:	83 c4 20             	add    esp,0x20
c0019e8e:	d1 ef                	shr    edi,1
c0019e90:	43                   	inc    ebx
c0019e91:	83 fb 20             	cmp    ebx,0x20
c0019e94:	0f 85 72 ff ff ff    	jne    c0019e0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e9a:	83 c4 0c             	add    esp,0xc
c0019e9d:	5b                   	pop    ebx
c0019e9e:	5e                   	pop    esi
c0019e9f:	5f                   	pop    edi
c0019ea0:	5d                   	pop    ebp
c0019ea1:	c3                   	ret    

c0019ea2 <SATABus::open(int, int, void*)>:
c0019ea2:	83 ec 14             	sub    esp,0x14
c0019ea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ea9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019eaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019eb5:	52                   	push   edx
c0019eb6:	50                   	push   eax
c0019eb7:	e8 3c ff ff ff       	call   c0019df8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019ebc:	31 c0                	xor    eax,eax
c0019ebe:	83 c4 1c             	add    esp,0x1c
c0019ec1:	c3                   	ret    

c0019ec2 <ATA::close(int, int, void*)>:
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ecf:	85 c0                	test   eax,eax
c0019ed1:	74 0c                	je     c0019edf <ATA::close(int, int, void*)+0x1d>
c0019ed3:	83 ec 0c             	sub    esp,0xc
c0019ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ed8:	50                   	push   eax
c0019ed9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019edc:	83 c4 10             	add    esp,0x10
c0019edf:	31 c0                	xor    eax,eax
c0019ee1:	83 c4 0c             	add    esp,0xc
c0019ee4:	c3                   	ret    
c0019ee5:	90                   	nop

c0019ee6 <ATA::powerSaving(PowerSavingLevel)>:
c0019ee6:	c3                   	ret    
c0019ee7:	90                   	nop

c0019ee8 <ATA::ATA()>:
c0019ee8:	83 ec 0c             	sub    esp,0xc
c0019eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eef:	83 ec 04             	sub    esp,0x4
c0019ef2:	68 00 02 00 00       	push   0x200
c0019ef7:	68 b9 f3 01 c0       	push   0xc001f3b9
c0019efc:	50                   	push   eax
c0019efd:	e8 f4 24 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c0019f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f0e:	89 10                	mov    DWORD PTR [eax],edx
c0019f10:	90                   	nop
c0019f11:	83 c4 0c             	add    esp,0xc
c0019f14:	c3                   	ret    
c0019f15:	90                   	nop

c0019f16 <ATA::flush(bool)>:
c0019f16:	53                   	push   ebx
c0019f17:	83 ec 08             	sub    esp,0x8
c0019f1a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f23:	19 c0                	sbb    eax,eax
c0019f25:	83 e0 fd             	and    eax,0xfffffffd
c0019f28:	05 ea 00 00 00       	add    eax,0xea
c0019f2d:	50                   	push   eax
c0019f2e:	6a 07                	push   0x7
c0019f30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f37:	50                   	push   eax
c0019f38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f3e:	e8 59 f1 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f43:	83 c4 0c             	add    esp,0xc
c0019f46:	6a 00                	push   0x0
c0019f48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f4f:	50                   	push   eax
c0019f50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f56:	e8 df fb ff ff       	call   c0019b3a <IDE::polling(unsigned char, unsigned int)>
c0019f5b:	83 c4 18             	add    esp,0x18
c0019f5e:	5b                   	pop    ebx
c0019f5f:	c3                   	ret    

c0019f60 <ATA::readyForCommand()>:
c0019f60:	56                   	push   esi
c0019f61:	53                   	push   ebx
c0019f62:	53                   	push   ebx
c0019f63:	31 db                	xor    ebx,ebx
c0019f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f69:	51                   	push   ecx
c0019f6a:	6a 0c                	push   0xc
c0019f6c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f73:	50                   	push   eax
c0019f74:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f7a:	e8 dd f1 ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c0019f7f:	83 c4 10             	add    esp,0x10
c0019f82:	a8 88                	test   al,0x88
c0019f84:	74 1f                	je     c0019fa5 <ATA::readyForCommand()+0x45>
c0019f86:	43                   	inc    ebx
c0019f87:	83 fb 63             	cmp    ebx,0x63
c0019f8a:	7e dd                	jle    c0019f69 <ATA::readyForCommand()+0x9>
c0019f8c:	83 ec 0c             	sub    esp,0xc
c0019f8f:	6a 0a                	push   0xa
c0019f91:	e8 a6 9d ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c0019f96:	83 c4 10             	add    esp,0x10
c0019f99:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f9f:	75 c8                	jne    c0019f69 <ATA::readyForCommand()+0x9>
c0019fa1:	31 c0                	xor    eax,eax
c0019fa3:	eb 02                	jmp    c0019fa7 <ATA::readyForCommand()+0x47>
c0019fa5:	b0 01                	mov    al,0x1
c0019fa7:	5a                   	pop    edx
c0019fa8:	5b                   	pop    ebx
c0019fa9:	5e                   	pop    esi
c0019faa:	c3                   	ret    
c0019fab:	90                   	nop

c0019fac <ATA::access(unsigned long long, int, void*, bool)>:
c0019fac:	55                   	push   ebp
c0019fad:	57                   	push   edi
c0019fae:	56                   	push   esi
c0019faf:	53                   	push   ebx
c0019fb0:	83 ec 2c             	sub    esp,0x2c
c0019fb3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fb7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fbb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fc3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fc7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fcf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fe3:	c1 e0 06             	shl    eax,0x6
c0019fe6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fee:	74 5d                	je     c001a04d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019ff0:	89 fa                	mov    edx,edi
c0019ff2:	89 f0                	mov    eax,esi
c0019ff4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ff8:	c1 ea 1c             	shr    edx,0x1c
c0019ffb:	89 d1                	mov    ecx,edx
c0019ffd:	09 c1                	or     ecx,eax
c0019fff:	74 25                	je     c001a026 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a001:	31 ed                	xor    ebp,ebp
c001a003:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a00a:	89 fa                	mov    edx,edi
c001a00c:	89 f0                	mov    eax,esi
c001a00e:	0f ad d0             	shrd   eax,edx,cl
c001a011:	d3 ea                	shr    edx,cl
c001a013:	f6 c1 20             	test   cl,0x20
c001a016:	74 02                	je     c001a01a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a018:	89 d0                	mov    eax,edx
c001a01a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a01e:	45                   	inc    ebp
c001a01f:	83 fd 06             	cmp    ebp,0x6
c001a022:	75 df                	jne    c001a003 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a024:	eb 76                	jmp    c001a09c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a026:	89 f0                	mov    eax,esi
c001a028:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a02d:	89 fa                	mov    edx,edi
c001a02f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a036:	0f ac d0 10          	shrd   eax,edx,0x10
c001a03a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a03f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a043:	c1 ee 18             	shr    esi,0x18
c001a046:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a04b:	eb 56                	jmp    c001a0a3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a04d:	6a 00                	push   0x0
c001a04f:	6a 3f                	push   0x3f
c001a051:	57                   	push   edi
c001a052:	56                   	push   esi
c001a053:	e8 58 22 00 00       	call   c001c2b0 <__umoddi3>
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	40                   	inc    eax
c001a05c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a060:	6a 00                	push   0x0
c001a062:	68 f0 03 00 00       	push   0x3f0
c001a067:	57                   	push   edi
c001a068:	56                   	push   esi
c001a069:	e8 42 21 00 00       	call   c001c1b0 <__udivdi3>
c001a06e:	83 c4 10             	add    esp,0x10
c001a071:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a076:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a07d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a082:	6a 00                	push   0x0
c001a084:	6a 3f                	push   0x3f
c001a086:	57                   	push   edi
c001a087:	56                   	push   esi
c001a088:	e8 23 21 00 00       	call   c001c1b0 <__udivdi3>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	89 c6                	mov    esi,eax
c001a092:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a097:	83 e6 0f             	and    esi,0xf
c001a09a:	eb 07                	jmp    c001a0a3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a09c:	31 f6                	xor    esi,esi
c001a09e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0a3:	bf 01 00 00 00       	mov    edi,0x1
c001a0a8:	50                   	push   eax
c001a0a9:	6a 00                	push   0x0
c001a0ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0b2:	50                   	push   eax
c001a0b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b7:	e8 ee f1 ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c001a0bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0bf:	e8 9c fe ff ff       	call   c0019f60 <ATA::readyForCommand()>
c001a0c4:	83 c4 10             	add    esp,0x10
c001a0c7:	84 c0                	test   al,al
c001a0c9:	0f 84 4e 02 00 00    	je     c001a31d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0cf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0d5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0db:	c1 e0 04             	shl    eax,0x4
c001a0de:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0e5:	09 c6                	or     esi,eax
c001a0e7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0ec:	75 05                	jne    c001a0f3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0ee:	83 ce a0             	or     esi,0xffffffa0
c001a0f1:	eb 03                	jmp    c001a0f6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0f3:	83 ce e0             	or     esi,0xffffffe0
c001a0f6:	89 f0                	mov    eax,esi
c001a0f8:	0f b6 f0             	movzx  esi,al
c001a0fb:	56                   	push   esi
c001a0fc:	6a 06                	push   0x6
c001a0fe:	51                   	push   ecx
c001a0ff:	52                   	push   edx
c001a100:	e8 97 ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	6a 00                	push   0x0
c001a10a:	6a 01                	push   0x1
c001a10c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a113:	50                   	push   eax
c001a114:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a11a:	e8 7d ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a127:	75 6e                	jne    c001a197 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a129:	6a 00                	push   0x0
c001a12b:	6a 08                	push   0x8
c001a12d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a134:	50                   	push   eax
c001a135:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a13b:	e8 5c ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a140:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a145:	50                   	push   eax
c001a146:	6a 09                	push   0x9
c001a148:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a14f:	50                   	push   eax
c001a150:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a156:	e8 41 ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a15b:	83 c4 20             	add    esp,0x20
c001a15e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a163:	50                   	push   eax
c001a164:	6a 0a                	push   0xa
c001a166:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16d:	50                   	push   eax
c001a16e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a174:	e8 23 ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a179:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a17e:	50                   	push   eax
c001a17f:	6a 0b                	push   0xb
c001a181:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a188:	50                   	push   eax
c001a189:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18f:	e8 08 ef ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a194:	83 c4 20             	add    esp,0x20
c001a197:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a19c:	50                   	push   eax
c001a19d:	6a 02                	push   0x2
c001a19f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a6:	50                   	push   eax
c001a1a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ad:	e8 ea ee ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1b7:	50                   	push   eax
c001a1b8:	6a 03                	push   0x3
c001a1ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c1:	50                   	push   eax
c001a1c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c8:	e8 cf ee ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cd:	83 c4 20             	add    esp,0x20
c001a1d0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1d5:	50                   	push   eax
c001a1d6:	6a 04                	push   0x4
c001a1d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1df:	50                   	push   eax
c001a1e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e6:	e8 b1 ee ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1f0:	50                   	push   eax
c001a1f1:	6a 05                	push   0x5
c001a1f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fa:	50                   	push   eax
c001a1fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a201:	e8 96 ee ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a206:	83 c4 20             	add    esp,0x20
c001a209:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a20e:	0f 94 c0             	sete   al
c001a211:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a216:	74 09                	je     c001a221 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a218:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a21f:	eb 07                	jmp    c001a228 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a221:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a228:	0f b6 c0             	movzx  eax,al
c001a22b:	50                   	push   eax
c001a22c:	6a 07                	push   0x7
c001a22e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a235:	50                   	push   eax
c001a236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23c:	e8 5b ee ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a241:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a245:	83 c4 10             	add    esp,0x10
c001a248:	85 f6                	test   esi,esi
c001a24a:	0f 84 ae 00 00 00    	je     c001a2fe <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a250:	50                   	push   eax
c001a251:	6a 01                	push   0x1
c001a253:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a25a:	50                   	push   eax
c001a25b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a261:	e8 d4 f8 ff ff       	call   c0019b3a <IDE::polling(unsigned char, unsigned int)>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a26f:	84 c0                	test   al,al
c001a271:	74 20                	je     c001a293 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a273:	0f b6 f8             	movzx  edi,al
c001a276:	0f b6 d2             	movzx  edx,dl
c001a279:	57                   	push   edi
c001a27a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a281:	50                   	push   eax
c001a282:	52                   	push   edx
c001a283:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a289:	e8 fc f7 ff ff       	call   c0019a8a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a28e:	e9 87 00 00 00       	jmp    c001a31a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a293:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a298:	74 33                	je     c001a2cd <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a29a:	31 ed                	xor    ebp,ebp
c001a29c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2a0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2a4:	50                   	push   eax
c001a2a5:	50                   	push   eax
c001a2a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ad:	50                   	push   eax
c001a2ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2b4:	e8 d1 ed ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a2b9:	89 c2                	mov    edx,eax
c001a2bb:	89 f8                	mov    eax,edi
c001a2bd:	66 ef                	out    dx,ax
c001a2bf:	45                   	inc    ebp
c001a2c0:	83 c4 10             	add    esp,0x10
c001a2c3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2c9:	75 d1                	jne    c001a29c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2cb:	eb 23                	jmp    c001a2f0 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2cd:	0f b6 d2             	movzx  edx,dl
c001a2d0:	51                   	push   ecx
c001a2d1:	51                   	push   ecx
c001a2d2:	52                   	push   edx
c001a2d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d9:	e8 ac ed ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a2de:	b9 00 01 00 00       	mov    ecx,0x100
c001a2e3:	89 c2                	mov    edx,eax
c001a2e5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2e9:	fc                   	cld    
c001a2ea:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2f8:	4e                   	dec    esi
c001a2f9:	e9 4a ff ff ff       	jmp    c001a248 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2fe:	31 ff                	xor    edi,edi
c001a300:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a305:	74 16                	je     c001a31d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a307:	50                   	push   eax
c001a308:	50                   	push   eax
c001a309:	31 c0                	xor    eax,eax
c001a30b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a310:	0f 94 c0             	sete   al
c001a313:	50                   	push   eax
c001a314:	53                   	push   ebx
c001a315:	e8 fc fb ff ff       	call   c0019f16 <ATA::flush(bool)>
c001a31a:	83 c4 10             	add    esp,0x10
c001a31d:	83 c4 2c             	add    esp,0x2c
c001a320:	89 f8                	mov    eax,edi
c001a322:	5b                   	pop    ebx
c001a323:	5e                   	pop    esi
c001a324:	5f                   	pop    edi
c001a325:	5d                   	pop    ebp
c001a326:	c3                   	ret    
c001a327:	90                   	nop

c001a328 <ATA::read(unsigned long long, int, void*)>:
c001a328:	57                   	push   edi
c001a329:	b8 04 00 00 00       	mov    eax,0x4
c001a32e:	56                   	push   esi
c001a32f:	53                   	push   ebx
c001a330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a338:	8d 7a ff             	lea    edi,[edx-0x1]
c001a33b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a33f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a343:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a349:	77 25                	ja     c001a370 <ATA::read(unsigned long long, int, void*)+0x48>
c001a34b:	b8 06 00 00 00       	mov    eax,0x6
c001a350:	85 f6                	test   esi,esi
c001a352:	74 1c                	je     c001a370 <ATA::read(unsigned long long, int, void*)+0x48>
c001a354:	50                   	push   eax
c001a355:	50                   	push   eax
c001a356:	6a 00                	push   0x0
c001a358:	56                   	push   esi
c001a359:	52                   	push   edx
c001a35a:	53                   	push   ebx
c001a35b:	51                   	push   ecx
c001a35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a360:	e8 47 fc ff ff       	call   c0019fac <ATA::access(unsigned long long, int, void*, bool)>
c001a365:	83 c4 20             	add    esp,0x20
c001a368:	85 c0                	test   eax,eax
c001a36a:	0f 95 c0             	setne  al
c001a36d:	0f b6 c0             	movzx  eax,al
c001a370:	5b                   	pop    ebx
c001a371:	5e                   	pop    esi
c001a372:	5f                   	pop    edi
c001a373:	c3                   	ret    

c001a374 <ATA::write(unsigned long long, int, void*)>:
c001a374:	57                   	push   edi
c001a375:	b8 04 00 00 00       	mov    eax,0x4
c001a37a:	56                   	push   esi
c001a37b:	53                   	push   ebx
c001a37c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a380:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a384:	8d 7a ff             	lea    edi,[edx-0x1]
c001a387:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a38b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a38f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a395:	77 25                	ja     c001a3bc <ATA::write(unsigned long long, int, void*)+0x48>
c001a397:	b8 06 00 00 00       	mov    eax,0x6
c001a39c:	85 f6                	test   esi,esi
c001a39e:	74 1c                	je     c001a3bc <ATA::write(unsigned long long, int, void*)+0x48>
c001a3a0:	50                   	push   eax
c001a3a1:	50                   	push   eax
c001a3a2:	6a 01                	push   0x1
c001a3a4:	56                   	push   esi
c001a3a5:	52                   	push   edx
c001a3a6:	53                   	push   ebx
c001a3a7:	51                   	push   ecx
c001a3a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ac:	e8 fb fb ff ff       	call   c0019fac <ATA::access(unsigned long long, int, void*, bool)>
c001a3b1:	83 c4 20             	add    esp,0x20
c001a3b4:	85 c0                	test   eax,eax
c001a3b6:	0f 95 c0             	setne  al
c001a3b9:	0f b6 c0             	movzx  eax,al
c001a3bc:	5b                   	pop    ebx
c001a3bd:	5e                   	pop    esi
c001a3be:	5f                   	pop    edi
c001a3bf:	c3                   	ret    

c001a3c0 <ATA::detectCHS()>:
c001a3c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3c4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3ca:	c1 e0 06             	shl    eax,0x6
c001a3cd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3d3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3dd:	c7 44 24 04 10 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f310
c001a3e5:	e9 fd 62 ff ff       	jmp    c00106e7 <Krnl::panic(char const*)>

c001a3ea <ATA::open(int, int, void*)>:
c001a3ea:	53                   	push   ebx
c001a3eb:	83 ec 08             	sub    esp,0x8
c001a3ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3fa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a400:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a406:	c1 e0 06             	shl    eax,0x6
c001a409:	01 d0                	add    eax,edx
c001a40b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a412:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a418:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a41f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a429:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a42f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a436:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a43d:	75 0c                	jne    c001a44b <ATA::open(int, int, void*)+0x61>
c001a43f:	83 ec 0c             	sub    esp,0xc
c001a442:	53                   	push   ebx
c001a443:	e8 78 ff ff ff       	call   c001a3c0 <ATA::detectCHS()>
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a451:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a457:	c1 e0 06             	shl    eax,0x6
c001a45a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a461:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a46b:	d1 e8                	shr    eax,1
c001a46d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a473:	6a 04                	push   0x4
c001a475:	6a 0c                	push   0xc
c001a477:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a47e:	50                   	push   eax
c001a47f:	52                   	push   edx
c001a480:	e8 17 ec ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a485:	90                   	nop
c001a486:	90                   	nop
c001a487:	6a 00                	push   0x0
c001a489:	6a 0c                	push   0xc
c001a48b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a492:	50                   	push   eax
c001a493:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a499:	e8 fe eb ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a49e:	83 c4 14             	add    esp,0x14
c001a4a1:	53                   	push   ebx
c001a4a2:	e8 b7 1f ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001a4a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4aa:	e8 27 30 ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001a4af:	31 c0                	xor    eax,eax
c001a4b1:	83 c4 18             	add    esp,0x18
c001a4b4:	5b                   	pop    ebx
c001a4b5:	c3                   	ret    

c001a4b6 <ATAPI::write(unsigned long long, int, void*)>:
c001a4b6:	b8 03 00 00 00       	mov    eax,0x3
c001a4bb:	c3                   	ret    

c001a4bc <ATAPI::close(int, int, void*)>:
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4c9:	85 c0                	test   eax,eax
c001a4cb:	74 0c                	je     c001a4d9 <ATAPI::close(int, int, void*)+0x1d>
c001a4cd:	83 ec 0c             	sub    esp,0xc
c001a4d0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4d2:	50                   	push   eax
c001a4d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	31 c0                	xor    eax,eax
c001a4db:	83 c4 0c             	add    esp,0xc
c001a4de:	c3                   	ret    
c001a4df:	90                   	nop

c001a4e0 <ATAPI::ATAPI()>:
c001a4e0:	83 ec 0c             	sub    esp,0xc
c001a4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4e7:	83 ec 04             	sub    esp,0x4
c001a4ea:	68 00 08 00 00       	push   0x800
c001a4ef:	68 59 f4 01 c0       	push   0xc001f459
c001a4f4:	50                   	push   eax
c001a4f5:	e8 fc 1e ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4fa:	83 c4 10             	add    esp,0x10
c001a4fd:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001a502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a506:	89 10                	mov    DWORD PTR [eax],edx
c001a508:	90                   	nop
c001a509:	83 c4 0c             	add    esp,0xc
c001a50c:	c3                   	ret    
c001a50d:	90                   	nop

c001a50e <ATAPI::readyForCommand()>:
c001a50e:	56                   	push   esi
c001a50f:	53                   	push   ebx
c001a510:	53                   	push   ebx
c001a511:	31 db                	xor    ebx,ebx
c001a513:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a517:	51                   	push   ecx
c001a518:	6a 0c                	push   0xc
c001a51a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a521:	50                   	push   eax
c001a522:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a528:	e8 2f ec ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	a8 88                	test   al,0x88
c001a532:	74 25                	je     c001a559 <ATAPI::readyForCommand()+0x4b>
c001a534:	43                   	inc    ebx
c001a535:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a53b:	7e da                	jle    c001a517 <ATAPI::readyForCommand()+0x9>
c001a53d:	83 ec 0c             	sub    esp,0xc
c001a540:	68 5e 01 00 00       	push   0x15e
c001a545:	e8 f2 97 ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a553:	75 c2                	jne    c001a517 <ATAPI::readyForCommand()+0x9>
c001a555:	31 c0                	xor    eax,eax
c001a557:	eb 02                	jmp    c001a55b <ATAPI::readyForCommand()+0x4d>
c001a559:	b0 01                	mov    al,0x1
c001a55b:	5a                   	pop    edx
c001a55c:	5b                   	pop    ebx
c001a55d:	5e                   	pop    esi
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a560:	55                   	push   ebp
c001a561:	57                   	push   edi
c001a562:	56                   	push   esi
c001a563:	53                   	push   ebx
c001a564:	83 ec 20             	sub    esp,0x20
c001a567:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a56b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a56f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a573:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a577:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a57b:	6a 01                	push   0x1
c001a57d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a584:	50                   	push   eax
c001a585:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a58b:	e8 1a ed ff ff       	call   c00192aa <IDE::enableIRQs(unsigned char, bool)>
c001a590:	5e                   	pop    esi
c001a591:	58                   	pop    eax
c001a592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a599:	50                   	push   eax
c001a59a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5a0:	e8 d1 ea ff ff       	call   c0019076 <IDE::prepareInterrupt(unsigned char)>
c001a5a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5a8:	e8 61 ff ff ff       	call   c001a50e <ATAPI::readyForCommand()>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	84 c0                	test   al,al
c001a5b2:	75 0a                	jne    c001a5be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5b4:	bb 01 00 00 00       	mov    ebx,0x1
c001a5b9:	e9 57 02 00 00       	jmp    c001a815 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5be:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5c4:	c1 e0 04             	shl    eax,0x4
c001a5c7:	0f b6 c0             	movzx  eax,al
c001a5ca:	50                   	push   eax
c001a5cb:	6a 06                	push   0x6
c001a5cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d4:	50                   	push   eax
c001a5d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5db:	e8 bc ea ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5e0:	6a 00                	push   0x0
c001a5e2:	6a 01                	push   0x1
c001a5e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5eb:	50                   	push   eax
c001a5ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5f2:	e8 a5 ea ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f7:	83 c4 20             	add    esp,0x20
c001a5fa:	0f b6 c3             	movzx  eax,bl
c001a5fd:	0f b6 df             	movzx  ebx,bh
c001a600:	50                   	push   eax
c001a601:	6a 04                	push   0x4
c001a603:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a60a:	50                   	push   eax
c001a60b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a611:	e8 86 ea ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a616:	53                   	push   ebx
c001a617:	6a 05                	push   0x5
c001a619:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a620:	50                   	push   eax
c001a621:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a627:	e8 70 ea ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a62c:	83 c4 20             	add    esp,0x20
c001a62f:	68 a0 00 00 00       	push   0xa0
c001a634:	6a 07                	push   0x7
c001a636:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a63d:	50                   	push   eax
c001a63e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a644:	e8 53 ea ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a649:	83 c4 0c             	add    esp,0xc
c001a64c:	6a 01                	push   0x1
c001a64e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a655:	50                   	push   eax
c001a656:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a65c:	e8 d9 f4 ff ff       	call   c0019b3a <IDE::polling(unsigned char, unsigned int)>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a66a:	84 c0                	test   al,al
c001a66c:	74 23                	je     c001a691 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a66e:	0f b6 d8             	movzx  ebx,al
c001a671:	0f b6 d2             	movzx  edx,dl
c001a674:	53                   	push   ebx
c001a675:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a67c:	50                   	push   eax
c001a67d:	52                   	push   edx
c001a67e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a684:	e8 01 f4 ff ff       	call   c0019a8a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	e9 84 01 00 00       	jmp    c001a815 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a691:	0f b6 d2             	movzx  edx,dl
c001a694:	53                   	push   ebx
c001a695:	53                   	push   ebx
c001a696:	52                   	push   edx
c001a697:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69d:	e8 e8 e9 ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a6a2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6a6:	b9 06 00 00 00       	mov    ecx,0x6
c001a6ab:	89 c2                	mov    edx,eax
c001a6ad:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6b0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6c4:	85 db                	test   ebx,ebx
c001a6c6:	0f 84 ec 00 00 00    	je     c001a7b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6cc:	51                   	push   ecx
c001a6cd:	51                   	push   ecx
c001a6ce:	52                   	push   edx
c001a6cf:	50                   	push   eax
c001a6d0:	e8 35 eb ff ff       	call   c001920a <IDE::waitInterrupt(unsigned char)>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	84 c0                	test   al,al
c001a6da:	0f 84 d4 fe ff ff    	je     c001a5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6e0:	56                   	push   esi
c001a6e1:	56                   	push   esi
c001a6e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e9:	50                   	push   eax
c001a6ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f0:	e8 81 e9 ff ff       	call   c0019076 <IDE::prepareInterrupt(unsigned char)>
c001a6f5:	83 c4 0c             	add    esp,0xc
c001a6f8:	6a 04                	push   0x4
c001a6fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a701:	50                   	push   eax
c001a702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a708:	e8 4f ea ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001a70d:	83 c4 0c             	add    esp,0xc
c001a710:	89 c6                	mov    esi,eax
c001a712:	6a 05                	push   0x5
c001a714:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a71b:	50                   	push   eax
c001a71c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a722:	e8 35 ea ff ff       	call   c001915c <IDE::read(unsigned char, unsigned char)>
c001a727:	89 f1                	mov    ecx,esi
c001a729:	0f b6 c0             	movzx  eax,al
c001a72c:	0f b6 f1             	movzx  esi,cl
c001a72f:	c1 e0 08             	shl    eax,0x8
c001a732:	09 c6                	or     esi,eax
c001a734:	d1 fe                	sar    esi,1
c001a736:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a73a:	83 c4 10             	add    esp,0x10
c001a73d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a742:	74 41                	je     c001a785 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a744:	31 c9                	xor    ecx,ecx
c001a746:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a74c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a753:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a757:	75 0a                	jne    c001a763 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a759:	01 c9                	add    ecx,ecx
c001a75b:	01 cd                	add    ebp,ecx
c001a75d:	4b                   	dec    ebx
c001a75e:	e9 54 ff ff ff       	jmp    c001a6b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a763:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a768:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a76c:	51                   	push   ecx
c001a76d:	51                   	push   ecx
c001a76e:	52                   	push   edx
c001a76f:	50                   	push   eax
c001a770:	e8 15 e9 ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a775:	89 c2                	mov    edx,eax
c001a777:	89 f0                	mov    eax,esi
c001a779:	66 ef                	out    dx,ax
c001a77b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	41                   	inc    ecx
c001a783:	eb c1                	jmp    c001a746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a785:	31 f6                	xor    esi,esi
c001a787:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a78d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a794:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a798:	75 06                	jne    c001a7a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a79a:	01 f6                	add    esi,esi
c001a79c:	01 f5                	add    ebp,esi
c001a79e:	eb bd                	jmp    c001a75d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7a0:	51                   	push   ecx
c001a7a1:	51                   	push   ecx
c001a7a2:	52                   	push   edx
c001a7a3:	50                   	push   eax
c001a7a4:	e8 e1 e8 ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a7a9:	89 c2                	mov    edx,eax
c001a7ab:	66 ed                	in     ax,dx
c001a7ad:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	46                   	inc    esi
c001a7b6:	eb cf                	jmp    c001a787 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7b8:	51                   	push   ecx
c001a7b9:	51                   	push   ecx
c001a7ba:	52                   	push   edx
c001a7bb:	50                   	push   eax
c001a7bc:	e8 49 ea ff ff       	call   c001920a <IDE::waitInterrupt(unsigned char)>
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	84 c0                	test   al,al
c001a7c6:	0f 84 e8 fd ff ff    	je     c001a5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7cc:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7d1:	52                   	push   edx
c001a7d2:	52                   	push   edx
c001a7d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7da:	50                   	push   eax
c001a7db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7e1:	e8 90 e8 ff ff       	call   c0019076 <IDE::prepareInterrupt(unsigned char)>
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	50                   	push   eax
c001a7ea:	50                   	push   eax
c001a7eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7f2:	50                   	push   eax
c001a7f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7f9:	e8 8c e8 ff ff       	call   c001908a <IDE::getBase(unsigned char)>
c001a7fe:	8d 50 07             	lea    edx,[eax+0x7]
c001a801:	ec                   	in     al,dx
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	a8 88                	test   al,0x88
c001a807:	74 0a                	je     c001a813 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a809:	4b                   	dec    ebx
c001a80a:	75 dd                	jne    c001a7e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a80c:	bb 02 00 00 00       	mov    ebx,0x2
c001a811:	eb 02                	jmp    c001a815 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a813:	31 db                	xor    ebx,ebx
c001a815:	83 c4 1c             	add    esp,0x1c
c001a818:	89 d8                	mov    eax,ebx
c001a81a:	5b                   	pop    ebx
c001a81b:	5e                   	pop    esi
c001a81c:	5f                   	pop    edi
c001a81d:	5d                   	pop    ebp
c001a81e:	c3                   	ret    
c001a81f:	90                   	nop

c001a820 <ATAPI::diskRemoved()>:
c001a820:	53                   	push   ebx
c001a821:	83 ec 14             	sub    esp,0x14
c001a824:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a828:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a82f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a835:	e8 1c 2a ff ff       	call   c000d256 <LogicalDisk::unmount()>
c001a83a:	58                   	pop    eax
c001a83b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a841:	e8 56 33 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001a846:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a84c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a850:	83 c4 18             	add    esp,0x18
c001a853:	5b                   	pop    ebx
c001a854:	e9 33 33 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>
c001a859:	90                   	nop

c001a85a <ATAPI::eject()>:
c001a85a:	57                   	push   edi
c001a85b:	b9 03 00 00 00       	mov    ecx,0x3
c001a860:	53                   	push   ebx
c001a861:	83 ec 14             	sub    esp,0x14
c001a864:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a868:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a86c:	fc                   	cld    
c001a86d:	31 c0                	xor    eax,eax
c001a86f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a871:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a876:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a87b:	50                   	push   eax
c001a87c:	50                   	push   eax
c001a87d:	6a 00                	push   0x0
c001a87f:	6a 00                	push   0x0
c001a881:	6a 00                	push   0x0
c001a883:	6a 02                	push   0x2
c001a885:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a889:	50                   	push   eax
c001a88a:	53                   	push   ebx
c001a88b:	e8 d0 fc ff ff       	call   c001a560 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a890:	83 c4 14             	add    esp,0x14
c001a893:	53                   	push   ebx
c001a894:	e8 87 ff ff ff       	call   c001a820 <ATAPI::diskRemoved()>
c001a899:	83 c4 24             	add    esp,0x24
c001a89c:	31 c0                	xor    eax,eax
c001a89e:	5b                   	pop    ebx
c001a89f:	5f                   	pop    edi
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop

c001a8a2 <ATAPI::diskInserted()>:
c001a8a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8ad:	c3                   	ret    

c001a8ae <ATAPI::detectMedia()>:
c001a8ae:	56                   	push   esi
c001a8af:	53                   	push   ebx
c001a8b0:	83 ec 28             	sub    esp,0x28
c001a8b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8b7:	6a 0c                	push   0xc
c001a8b9:	6a 00                	push   0x0
c001a8bb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8bf:	56                   	push   esi
c001a8c0:	e8 2b 5c fe ff       	call   c00004f0 <memset>
c001a8c5:	58                   	pop    eax
c001a8c6:	5a                   	pop    edx
c001a8c7:	6a 00                	push   0x0
c001a8c9:	6a 00                	push   0x0
c001a8cb:	6a 00                	push   0x0
c001a8cd:	6a 00                	push   0x0
c001a8cf:	56                   	push   esi
c001a8d0:	53                   	push   ebx
c001a8d1:	e8 8a fc ff ff       	call   c001a560 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8d6:	83 c4 1c             	add    esp,0x1c
c001a8d9:	6a 0c                	push   0xc
c001a8db:	6a 00                	push   0x0
c001a8dd:	56                   	push   esi
c001a8de:	e8 0d 5c fe ff       	call   c00004f0 <memset>
c001a8e3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8e8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8ed:	59                   	pop    ecx
c001a8ee:	58                   	pop    eax
c001a8ef:	6a 01                	push   0x1
c001a8f1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8f5:	50                   	push   eax
c001a8f6:	6a 00                	push   0x0
c001a8f8:	6a 12                	push   0x12
c001a8fa:	56                   	push   esi
c001a8fb:	53                   	push   ebx
c001a8fc:	e8 5f fc ff ff       	call   c001a560 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a901:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a905:	83 c4 20             	add    esp,0x20
c001a908:	83 e0 7f             	and    eax,0x7f
c001a90b:	3c 70                	cmp    al,0x70
c001a90d:	74 15                	je     c001a924 <ATAPI::detectMedia()+0x76>
c001a90f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a916:	75 0c                	jne    c001a924 <ATAPI::detectMedia()+0x76>
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	53                   	push   ebx
c001a91c:	e8 81 ff ff ff       	call   c001a8a2 <ATAPI::diskInserted()>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a928:	83 e0 0f             	and    eax,0xf
c001a92b:	3c 02                	cmp    al,0x2
c001a92d:	75 1b                	jne    c001a94a <ATAPI::detectMedia()+0x9c>
c001a92f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a934:	75 2d                	jne    c001a963 <ATAPI::detectMedia()+0xb5>
c001a936:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a93d:	74 24                	je     c001a963 <ATAPI::detectMedia()+0xb5>
c001a93f:	83 ec 0c             	sub    esp,0xc
c001a942:	53                   	push   ebx
c001a943:	e8 d8 fe ff ff       	call   c001a820 <ATAPI::diskRemoved()>
c001a948:	eb 16                	jmp    c001a960 <ATAPI::detectMedia()+0xb2>
c001a94a:	84 c0                	test   al,al
c001a94c:	75 15                	jne    c001a963 <ATAPI::detectMedia()+0xb5>
c001a94e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a955:	75 0c                	jne    c001a963 <ATAPI::detectMedia()+0xb5>
c001a957:	83 ec 0c             	sub    esp,0xc
c001a95a:	53                   	push   ebx
c001a95b:	e8 42 ff ff ff       	call   c001a8a2 <ATAPI::diskInserted()>
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	83 c4 24             	add    esp,0x24
c001a966:	5b                   	pop    ebx
c001a967:	5e                   	pop    esi
c001a968:	c3                   	ret    
c001a969:	90                   	nop

c001a96a <ATAPI::open(int, int, void*)>:
c001a96a:	56                   	push   esi
c001a96b:	53                   	push   ebx
c001a96c:	50                   	push   eax
c001a96d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a979:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a97f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a985:	c1 e0 06             	shl    eax,0x6
c001a988:	01 d0                	add    eax,edx
c001a98a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a991:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a997:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a99e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9a8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9ae:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9b5:	6a 04                	push   0x4
c001a9b7:	6a 0c                	push   0xc
c001a9b9:	51                   	push   ecx
c001a9ba:	52                   	push   edx
c001a9bb:	e8 dc e6 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9c0:	90                   	nop
c001a9c1:	90                   	nop
c001a9c2:	6a 00                	push   0x0
c001a9c4:	6a 0c                	push   0xc
c001a9c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9cd:	50                   	push   eax
c001a9ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9d4:	e8 c3 e6 ff ff       	call   c001909c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9d9:	83 c4 14             	add    esp,0x14
c001a9dc:	68 74 01 00 00       	push   0x174
c001a9e1:	e8 73 d4 fe ff       	call   c0007e59 <malloc>
c001a9e6:	83 c4 0c             	add    esp,0xc
c001a9e9:	89 c6                	mov    esi,eax
c001a9eb:	6a 00                	push   0x0
c001a9ed:	68 ff ff ff 7f       	push   0x7fffffff
c001a9f2:	6a 00                	push   0x0
c001a9f4:	6a 00                	push   0x0
c001a9f6:	53                   	push   ebx
c001a9f7:	68 44 f5 01 c0       	push   0xc001f544
c001a9fc:	50                   	push   eax
c001a9fd:	e8 a0 26 ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa02:	83 c4 14             	add    esp,0x14
c001aa05:	56                   	push   esi
c001aa06:	e8 4d 27 ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001aa0b:	5a                   	pop    edx
c001aa0c:	0f be c0             	movsx  eax,al
c001aa0f:	59                   	pop    ecx
c001aa10:	50                   	push   eax
c001aa11:	68 5c f3 01 c0       	push   0xc001f35c
c001aa16:	e8 cd 01 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001aa1b:	58                   	pop    eax
c001aa1c:	5a                   	pop    edx
c001aa1d:	56                   	push   esi
c001aa1e:	53                   	push   ebx
c001aa1f:	e8 04 16 ff ff       	call   c000c028 <Device::addChild(Device*)>
c001aa24:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa2d:	e8 2c 1a ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001aa32:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa3c:	e8 6d fe ff ff       	call   c001a8ae <ATAPI::detectMedia()>
c001aa41:	83 c4 14             	add    esp,0x14
c001aa44:	31 c0                	xor    eax,eax
c001aa46:	5b                   	pop    ebx
c001aa47:	5e                   	pop    esi
c001aa48:	c3                   	ret    
c001aa49:	90                   	nop

c001aa4a <ATAPI::read(unsigned long long, int, void*)>:
c001aa4a:	55                   	push   ebp
c001aa4b:	57                   	push   edi
c001aa4c:	56                   	push   esi
c001aa4d:	53                   	push   ebx
c001aa4e:	83 ec 1c             	sub    esp,0x1c
c001aa51:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa55:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa5d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa64:	74 3c                	je     c001aaa2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa6a:	b9 03 00 00 00       	mov    ecx,0x3
c001aa6f:	fc                   	cld    
c001aa70:	31 c0                	xor    eax,eax
c001aa72:	0f ce                	bswap  esi
c001aa74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa76:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa7b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa7f:	89 e8                	mov    eax,ebp
c001aa81:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa85:	50                   	push   eax
c001aa86:	50                   	push   eax
c001aa87:	55                   	push   ebp
c001aa88:	c1 e5 0b             	shl    ebp,0xb
c001aa8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa8f:	6a 00                	push   0x0
c001aa91:	55                   	push   ebp
c001aa92:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa96:	50                   	push   eax
c001aa97:	53                   	push   ebx
c001aa98:	e8 c3 fa ff ff       	call   c001a560 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa9d:	83 c4 20             	add    esp,0x20
c001aaa0:	eb 1a                	jmp    c001aabc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	53                   	push   ebx
c001aaa6:	e8 03 fe ff ff       	call   c001a8ae <ATAPI::detectMedia()>
c001aaab:	83 c4 10             	add    esp,0x10
c001aaae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aab5:	75 af                	jne    c001aa66 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aab7:	b8 02 00 00 00       	mov    eax,0x2
c001aabc:	83 c4 1c             	add    esp,0x1c
c001aabf:	5b                   	pop    ebx
c001aac0:	5e                   	pop    esi
c001aac1:	5f                   	pop    edi
c001aac2:	5d                   	pop    ebp
c001aac3:	c3                   	ret    

c001aac4 <SATA::close(int, int, void*)>:
c001aac4:	83 ec 0c             	sub    esp,0xc
c001aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aacb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aad1:	85 c0                	test   eax,eax
c001aad3:	74 0c                	je     c001aae1 <SATA::close(int, int, void*)+0x1d>
c001aad5:	83 ec 0c             	sub    esp,0xc
c001aad8:	8b 10                	mov    edx,DWORD PTR [eax]
c001aada:	50                   	push   eax
c001aadb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aade:	83 c4 10             	add    esp,0x10
c001aae1:	31 c0                	xor    eax,eax
c001aae3:	83 c4 0c             	add    esp,0xc
c001aae6:	c3                   	ret    
c001aae7:	90                   	nop

c001aae8 <SATA::powerSaving(PowerSavingLevel)>:
c001aae8:	c3                   	ret    
c001aae9:	90                   	nop

c001aaea <SATA::open(int, int, void*)>:
c001aaea:	56                   	push   esi
c001aaeb:	53                   	push   ebx
c001aaec:	50                   	push   eax
c001aaed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaf5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aaff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab05:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab13:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab1d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab23:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab2a:	e8 f7 d6 fe ff       	call   c0008226 <Phys::allocatePage()>
c001ab2f:	89 c6                	mov    esi,eax
c001ab31:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab37:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab3d:	e8 e4 d6 fe ff       	call   c0008226 <Phys::allocatePage()>
c001ab42:	39 c6                	cmp    esi,eax
c001ab44:	74 10                	je     c001ab56 <SATA::open(int, int, void*)+0x6c>
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	68 a4 f3 01 c0       	push   0xc001f3a4
c001ab4e:	e8 94 5b ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	83 ec 0c             	sub    esp,0xc
c001ab59:	6a 02                	push   0x2
c001ab5b:	e8 35 ee fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001ab60:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab66:	6a 03                	push   0x3
c001ab68:	50                   	push   eax
c001ab69:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab6f:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001ab75:	e8 b0 f4 fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab7a:	83 c4 14             	add    esp,0x14
c001ab7d:	53                   	push   ebx
c001ab7e:	e8 db 18 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001ab83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab86:	e8 4b 29 ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001ab8b:	83 c4 14             	add    esp,0x14
c001ab8e:	31 c0                	xor    eax,eax
c001ab90:	5b                   	pop    ebx
c001ab91:	5e                   	pop    esi
c001ab92:	c3                   	ret    
c001ab93:	90                   	nop

c001ab94 <SATA::SATA()>:
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9b:	83 ec 04             	sub    esp,0x4
c001ab9e:	68 00 02 00 00       	push   0x200
c001aba3:	68 b8 f3 01 c0       	push   0xc001f3b8
c001aba8:	50                   	push   eax
c001aba9:	e8 48 18 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001abb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abba:	89 10                	mov    DWORD PTR [eax],edx
c001abbc:	90                   	nop
c001abbd:	83 c4 0c             	add    esp,0xc
c001abc0:	c3                   	ret    
c001abc1:	90                   	nop

c001abc2 <SATA::access(unsigned long long, int, void*, bool)>:
c001abc2:	55                   	push   ebp
c001abc3:	57                   	push   edi
c001abc4:	56                   	push   esi
c001abc5:	53                   	push   ebx
c001abc6:	83 ec 2c             	sub    esp,0x2c
c001abc9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abcd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abd5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abd9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abdd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abe6:	7e 10                	jle    c001abf8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	68 c8 f3 01 c0       	push   0xc001f3c8
c001abf0:	e8 f2 5a ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abfe:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac0e:	89 d0                	mov    eax,edx
c001ac10:	c1 e0 07             	shl    eax,0x7
c001ac13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac17:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac21:	51                   	push   ecx
c001ac22:	8d 42 02             	lea    eax,[edx+0x2]
c001ac25:	51                   	push   ecx
c001ac26:	c1 e0 07             	shl    eax,0x7
c001ac29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac2d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac31:	50                   	push   eax
c001ac32:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac38:	e8 e7 ef ff ff       	call   c0019c24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac4d:	0f 84 4f 01 00 00    	je     c001ada2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac57:	c1 e0 09             	shl    eax,0x9
c001ac5a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac63:	74 0e                	je     c001ac73 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac65:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac6b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac6f:	89 c1                	mov    ecx,eax
c001ac71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac77:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac7d:	8d 42 02             	lea    eax,[edx+0x2]
c001ac80:	c1 e0 07             	shl    eax,0x7
c001ac83:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac87:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac89:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac8f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac99:	c1 e1 05             	shl    ecx,0x5
c001ac9c:	01 c8                	add    eax,ecx
c001ac9e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001aca2:	83 e1 01             	and    ecx,0x1
c001aca5:	89 ce                	mov    esi,ecx
c001aca7:	8a 08                	mov    cl,BYTE PTR [eax]
c001aca9:	c1 e6 06             	shl    esi,0x6
c001acac:	83 e1 bf             	and    ecx,0xffffffbf
c001acaf:	09 f1                	or     ecx,esi
c001acb1:	88 08                	mov    BYTE PTR [eax],cl
c001acb3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acb5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acbb:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acc1:	89 08                	mov    DWORD PTR [eax],ecx
c001acc3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acc9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001accf:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acd5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001acd8:	50                   	push   eax
c001acd9:	68 90 00 00 00       	push   0x90
c001acde:	6a 00                	push   0x0
c001ace0:	56                   	push   esi
c001ace1:	e8 0a 58 fe ff       	call   c00004f0 <memset>
c001ace6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001acec:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001acf0:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001acf6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001acfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acfe:	83 c4 10             	add    esp,0x10
c001ad01:	48                   	dec    eax
c001ad02:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad07:	89 c1                	mov    ecx,eax
c001ad09:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad0f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad14:	09 c8                	or     eax,ecx
c001ad16:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad1c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad1f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad26:	66 25 00 7f          	and    ax,0x7f00
c001ad2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad2e:	66 0d 27 80          	or     ax,0x8027
c001ad32:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad37:	66 89 06             	mov    WORD PTR [esi],ax
c001ad3a:	19 c0                	sbb    eax,eax
c001ad3c:	83 e0 f0             	and    eax,0xfffffff0
c001ad3f:	83 c0 35             	add    eax,0x35
c001ad42:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad45:	89 e8                	mov    eax,ebp
c001ad47:	c1 e8 10             	shr    eax,0x10
c001ad4a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad4d:	89 e8                	mov    eax,ebp
c001ad4f:	c1 e8 18             	shr    eax,0x18
c001ad52:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad55:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad59:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad60:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad67:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad6b:	89 d6                	mov    esi,edx
c001ad6d:	31 c0                	xor    eax,eax
c001ad6f:	c1 e6 07             	shl    esi,0x7
c001ad72:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad76:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad7c:	80 e1 88             	and    cl,0x88
c001ad7f:	74 0a                	je     c001ad8b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad81:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad86:	74 0a                	je     c001ad92 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad88:	40                   	inc    eax
c001ad89:	eb eb                	jmp    c001ad76 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad8b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad90:	75 17                	jne    c001ada9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad92:	83 ec 0c             	sub    esp,0xc
c001ad95:	68 01 f4 01 c0       	push   0xc001f401
c001ad9a:	e8 49 fe fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001ad9f:	83 c4 10             	add    esp,0x10
c001ada2:	b8 01 00 00 00       	mov    eax,0x1
c001ada7:	eb 5d                	jmp    c001ae06 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ada9:	b8 01 00 00 00       	mov    eax,0x1
c001adae:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001adb2:	c1 e2 07             	shl    edx,0x7
c001adb5:	d3 e0                	shl    eax,cl
c001adb7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001adbb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adc1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adc7:	85 c8                	test   eax,ecx
c001adc9:	74 16                	je     c001ade1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adcb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001add1:	0f ba e1 1e          	bt     ecx,0x1e
c001add5:	73 ea                	jae    c001adc1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001add7:	83 ec 0c             	sub    esp,0xc
c001adda:	68 0f f4 01 c0       	push   0xc001f40f
c001addf:	eb b9                	jmp    c001ad9a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ade1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ade7:	0f ba e0 1e          	bt     eax,0x1e
c001adeb:	72 b5                	jb     c001ada2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001aded:	31 c0                	xor    eax,eax
c001adef:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001adf4:	75 10                	jne    c001ae06 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adf6:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001adfc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae06:	83 c4 2c             	add    esp,0x2c
c001ae09:	5b                   	pop    ebx
c001ae0a:	5e                   	pop    esi
c001ae0b:	5f                   	pop    edi
c001ae0c:	5d                   	pop    ebp
c001ae0d:	c3                   	ret    

c001ae0e <SATA::read(unsigned long long, int, void*)>:
c001ae0e:	57                   	push   edi
c001ae0f:	b8 04 00 00 00       	mov    eax,0x4
c001ae14:	56                   	push   esi
c001ae15:	53                   	push   ebx
c001ae16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae1e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae29:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae2f:	77 25                	ja     c001ae56 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae31:	b8 06 00 00 00       	mov    eax,0x6
c001ae36:	85 f6                	test   esi,esi
c001ae38:	74 1c                	je     c001ae56 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae3a:	50                   	push   eax
c001ae3b:	50                   	push   eax
c001ae3c:	6a 00                	push   0x0
c001ae3e:	56                   	push   esi
c001ae3f:	52                   	push   edx
c001ae40:	53                   	push   ebx
c001ae41:	51                   	push   ecx
c001ae42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae46:	e8 77 fd ff ff       	call   c001abc2 <SATA::access(unsigned long long, int, void*, bool)>
c001ae4b:	83 c4 20             	add    esp,0x20
c001ae4e:	85 c0                	test   eax,eax
c001ae50:	0f 95 c0             	setne  al
c001ae53:	0f b6 c0             	movzx  eax,al
c001ae56:	5b                   	pop    ebx
c001ae57:	5e                   	pop    esi
c001ae58:	5f                   	pop    edi
c001ae59:	c3                   	ret    

c001ae5a <SATA::write(unsigned long long, int, void*)>:
c001ae5a:	55                   	push   ebp
c001ae5b:	b8 04 00 00 00       	mov    eax,0x4
c001ae60:	57                   	push   edi
c001ae61:	56                   	push   esi
c001ae62:	53                   	push   ebx
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae6e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae71:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae75:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae79:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae7f:	77 3d                	ja     c001aebe <SATA::write(unsigned long long, int, void*)+0x64>
c001ae81:	b8 06 00 00 00       	mov    eax,0x6
c001ae86:	85 ed                	test   ebp,ebp
c001ae88:	74 34                	je     c001aebe <SATA::write(unsigned long long, int, void*)+0x64>
c001ae8a:	c1 e3 09             	shl    ebx,0x9
c001ae8d:	01 eb                	add    ebx,ebp
c001ae8f:	89 d6                	mov    esi,edx
c001ae91:	89 cf                	mov    edi,ecx
c001ae93:	83 c6 01             	add    esi,0x1
c001ae96:	83 d7 00             	adc    edi,0x0
c001ae99:	50                   	push   eax
c001ae9a:	50                   	push   eax
c001ae9b:	6a 01                	push   0x1
c001ae9d:	55                   	push   ebp
c001ae9e:	81 c5 00 02 00 00    	add    ebp,0x200
c001aea4:	6a 01                	push   0x1
c001aea6:	51                   	push   ecx
c001aea7:	52                   	push   edx
c001aea8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aeac:	e8 11 fd ff ff       	call   c001abc2 <SATA::access(unsigned long long, int, void*, bool)>
c001aeb1:	83 c4 20             	add    esp,0x20
c001aeb4:	89 f2                	mov    edx,esi
c001aeb6:	89 f9                	mov    ecx,edi
c001aeb8:	39 dd                	cmp    ebp,ebx
c001aeba:	75 d3                	jne    c001ae8f <SATA::write(unsigned long long, int, void*)+0x35>
c001aebc:	31 c0                	xor    eax,eax
c001aebe:	83 c4 0c             	add    esp,0xc
c001aec1:	5b                   	pop    ebx
c001aec2:	5e                   	pop    esi
c001aec3:	5f                   	pop    edi
c001aec4:	5d                   	pop    ebp
c001aec5:	c3                   	ret    

c001aec6 <SATAPI::write(unsigned long long, int, void*)>:
c001aec6:	b8 03 00 00 00       	mov    eax,0x3
c001aecb:	c3                   	ret    

c001aecc <SATAPI::close(int, int, void*)>:
c001aecc:	83 ec 0c             	sub    esp,0xc
c001aecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aed9:	85 c0                	test   eax,eax
c001aedb:	74 0c                	je     c001aee9 <SATAPI::close(int, int, void*)+0x1d>
c001aedd:	83 ec 0c             	sub    esp,0xc
c001aee0:	8b 10                	mov    edx,DWORD PTR [eax]
c001aee2:	50                   	push   eax
c001aee3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	31 c0                	xor    eax,eax
c001aeeb:	83 c4 0c             	add    esp,0xc
c001aeee:	c3                   	ret    
c001aeef:	90                   	nop

c001aef0 <SATAPI::SATAPI()>:
c001aef0:	83 ec 0c             	sub    esp,0xc
c001aef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef7:	83 ec 04             	sub    esp,0x4
c001aefa:	68 00 08 00 00       	push   0x800
c001aeff:	68 58 f4 01 c0       	push   0xc001f458
c001af04:	50                   	push   eax
c001af05:	e8 ec 14 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001af12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af16:	89 10                	mov    DWORD PTR [eax],edx
c001af18:	90                   	nop
c001af19:	83 c4 0c             	add    esp,0xc
c001af1c:	c3                   	ret    
c001af1d:	90                   	nop

c001af1e <SATAPI::diskRemoved()>:
c001af1e:	c3                   	ret    
c001af1f:	90                   	nop

c001af20 <SATAPI::diskInserted()>:
c001af20:	83 ec 18             	sub    esp,0x18
c001af23:	68 64 f4 01 c0       	push   0xc001f464
c001af28:	e8 bb fc fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001af2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af31:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af38:	83 c4 1c             	add    esp,0x1c
c001af3b:	c3                   	ret    

c001af3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af3c:	55                   	push   ebp
c001af3d:	57                   	push   edi
c001af3e:	56                   	push   esi
c001af3f:	53                   	push   ebx
c001af40:	83 ec 38             	sub    esp,0x38
c001af43:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af47:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af4b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af57:	68 7c f4 01 c0       	push   0xc001f47c
c001af5c:	e8 87 fc fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001af61:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af71:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af7b:	c1 e0 07             	shl    eax,0x7
c001af7e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af86:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af90:	58                   	pop    eax
c001af91:	5a                   	pop    edx
c001af92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af96:	8d 58 02             	lea    ebx,[eax+0x2]
c001af99:	c1 e3 07             	shl    ebx,0x7
c001af9c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001afa0:	53                   	push   ebx
c001afa1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afa7:	e8 78 ec ff ff       	call   c0019c24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	b8 01 00 00 00       	mov    eax,0x1
c001afb8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afbd:	0f 84 4c 02 00 00    	je     c001b20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001afc3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afcb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afd1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afdb:	c1 e1 05             	shl    ecx,0x5
c001afde:	01 c8                	add    eax,ecx
c001afe0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afe2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afe8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001afee:	89 08                	mov    DWORD PTR [eax],ecx
c001aff0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aff6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001affc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b002:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b005:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b008:	50                   	push   eax
c001b009:	68 90 00 00 00       	push   0x90
c001b00e:	6a 00                	push   0x0
c001b010:	53                   	push   ebx
c001b011:	e8 da 54 fe ff       	call   c00004f0 <memset>
c001b016:	b9 0c 00 00 00       	mov    ecx,0xc
c001b01b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b01f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b021:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b027:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b02b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b031:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b035:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b039:	48                   	dec    eax
c001b03a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b03f:	89 c1                	mov    ecx,eax
c001b041:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b047:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b04c:	09 c8                	or     eax,ecx
c001b04e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b054:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b057:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b05e:	66 25 00 7f          	and    ax,0x7f00
c001b062:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b066:	66 0d 27 80          	or     ax,0x8027
c001b06a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b06e:	66 89 03             	mov    WORD PTR [ebx],ax
c001b071:	89 d0                	mov    eax,edx
c001b073:	c1 ea 18             	shr    edx,0x18
c001b076:	c1 e8 10             	shr    eax,0x10
c001b079:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b07c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b07f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b083:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b086:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b08a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b08d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b091:	83 c4 10             	add    esp,0x10
c001b094:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b098:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b09c:	31 c0                	xor    eax,eax
c001b09e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0a4:	80 e1 88             	and    cl,0x88
c001b0a7:	74 0a                	je     c001b0b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b0a9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0ae:	74 0a                	je     c001b0ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b0b0:	40                   	inc    eax
c001b0b1:	eb eb                	jmp    c001b09e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b0b3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0b8:	75 16                	jne    c001b0d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	68 96 f4 01 c0       	push   0xc001f496
c001b0c2:	e8 21 fb fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b0c7:	5f                   	pop    edi
c001b0c8:	5d                   	pop    ebp
c001b0c9:	68 ab f4 01 c0       	push   0xc001f4ab
c001b0ce:	eb 4f                	jmp    c001b11f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b0d0:	be 01 00 00 00       	mov    esi,0x1
c001b0d5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b0dd:	d3 e6                	shl    esi,cl
c001b0df:	c1 e7 07             	shl    edi,0x7
c001b0e2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0e8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0ed:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0f1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0f7:	85 c6                	test   esi,eax
c001b0f9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0ff:	0f 84 cb 00 00 00    	je     c001b1d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b105:	0f ba e0 1e          	bt     eax,0x1e
c001b109:	73 2c                	jae    c001b137 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	68 bd f4 01 c0       	push   0xc001f4bd
c001b113:	e8 d0 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b118:	5b                   	pop    ebx
c001b119:	5e                   	pop    esi
c001b11a:	68 d0 f4 01 c0       	push   0xc001f4d0
c001b11f:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b125:	e8 9e dd fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	b8 01 00 00 00       	mov    eax,0x1
c001b132:	e9 d8 00 00 00       	jmp    c001b20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b137:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b13d:	83 f8 0d             	cmp    eax,0xd
c001b140:	77 0a                	ja     c001b14c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b142:	83 ec 0c             	sub    esp,0xc
c001b145:	68 c8 00 00 00       	push   0xc8
c001b14a:	eb 28                	jmp    c001b174 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b14c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b152:	83 f8 0d             	cmp    eax,0xd
c001b155:	77 0a                	ja     c001b161 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	68 58 02 00 00       	push   0x258
c001b15f:	eb 13                	jmp    c001b174 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b161:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b167:	83 f8 06             	cmp    eax,0x6
c001b16a:	77 10                	ja     c001b17c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b16c:	83 ec 0c             	sub    esp,0xc
c001b16f:	68 dc 05 00 00       	push   0x5dc
c001b174:	e8 c3 8b ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c001b179:	83 c4 10             	add    esp,0x10
c001b17c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b180:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b183:	75 06                	jne    c001b18b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b185:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b189:	74 15                	je     c001b1a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b18b:	83 fb 06             	cmp    ebx,0x6
c001b18e:	77 10                	ja     c001b1a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b190:	83 ec 0c             	sub    esp,0xc
c001b193:	68 c4 09 00 00       	push   0x9c4
c001b198:	e8 9f 8b ff ff       	call   c0013d3c <milliTenthSleep(unsigned int)>
c001b19d:	83 c4 10             	add    esp,0x10
c001b1a0:	43                   	inc    ebx
c001b1a1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1a7:	0f 85 44 ff ff ff    	jne    c001b0f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b1ad:	51                   	push   ecx
c001b1ae:	51                   	push   ecx
c001b1af:	68 e1 f4 01 c0       	push   0xc001f4e1
c001b1b4:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b1ba:	e8 09 dd fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b1bf:	c7 04 24 f1 f4 01 c0 	mov    DWORD PTR [esp],0xc001f4f1
c001b1c6:	e8 1d fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b1cb:	e9 5a ff ff ff       	jmp    c001b12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b1d0:	0f ba e0 1e          	bt     eax,0x1e
c001b1d4:	73 19                	jae    c001b1ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b1d6:	83 ec 0c             	sub    esp,0xc
c001b1d9:	68 05 f5 01 c0       	push   0xc001f505
c001b1de:	e8 05 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b1e3:	58                   	pop    eax
c001b1e4:	5a                   	pop    edx
c001b1e5:	68 1a f5 01 c0       	push   0xc001f51a
c001b1ea:	e9 30 ff ff ff       	jmp    c001b11f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1ef:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1f4:	74 17                	je     c001b20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1f6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1fb:	74 10                	je     c001b20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1fd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b203:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b207:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b20b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	83 c4 2c             	add    esp,0x2c
c001b212:	5b                   	pop    ebx
c001b213:	5e                   	pop    esi
c001b214:	5f                   	pop    edi
c001b215:	5d                   	pop    ebp
c001b216:	c3                   	ret    
c001b217:	90                   	nop

c001b218 <SATAPI::eject()>:
c001b218:	57                   	push   edi
c001b219:	b9 03 00 00 00       	mov    ecx,0x3
c001b21e:	83 ec 18             	sub    esp,0x18
c001b221:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b225:	fc                   	cld    
c001b226:	31 c0                	xor    eax,eax
c001b228:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b22a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b22f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b234:	50                   	push   eax
c001b235:	6a 00                	push   0x0
c001b237:	6a 00                	push   0x0
c001b239:	6a 00                	push   0x0
c001b23b:	6a 00                	push   0x0
c001b23d:	6a 02                	push   0x2
c001b23f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b243:	50                   	push   eax
c001b244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b248:	e8 ef fc ff ff       	call   c001af3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b24d:	31 c0                	xor    eax,eax
c001b24f:	83 c4 38             	add    esp,0x38
c001b252:	5f                   	pop    edi
c001b253:	c3                   	ret    

c001b254 <SATAPI::detectMedia()>:
c001b254:	53                   	push   ebx
c001b255:	83 ec 14             	sub    esp,0x14
c001b258:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b25c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b262:	e8 35 29 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001b267:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b26d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b271:	83 c4 18             	add    esp,0x18
c001b274:	5b                   	pop    ebx
c001b275:	e9 12 29 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>

c001b27a <SATAPI::open(int, int, void*)>:
c001b27a:	56                   	push   esi
c001b27b:	53                   	push   ebx
c001b27c:	51                   	push   ecx
c001b27d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b281:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b285:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b28f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b295:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b29f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2a3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b2ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b2b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b2ba:	e8 67 cf fe ff       	call   c0008226 <Phys::allocatePage()>
c001b2bf:	89 c6                	mov    esi,eax
c001b2c1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b2c7:	81 c6 00 10 00 00    	add    esi,0x1000
c001b2cd:	e8 54 cf fe ff       	call   c0008226 <Phys::allocatePage()>
c001b2d2:	39 c6                	cmp    esi,eax
c001b2d4:	74 10                	je     c001b2e6 <SATAPI::open(int, int, void*)+0x6c>
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	68 2d f5 01 c0       	push   0xc001f52d
c001b2de:	e8 04 54 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	6a 02                	push   0x2
c001b2eb:	e8 a5 e6 fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001b2f0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b2f6:	6a 03                	push   0x3
c001b2f8:	50                   	push   eax
c001b2f9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b2ff:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001b305:	e8 20 ed fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b30a:	83 c4 14             	add    esp,0x14
c001b30d:	68 74 01 00 00       	push   0x174
c001b312:	e8 42 cb fe ff       	call   c0007e59 <malloc>
c001b317:	83 c4 0c             	add    esp,0xc
c001b31a:	89 c6                	mov    esi,eax
c001b31c:	6a 00                	push   0x0
c001b31e:	68 ff ff ff 7f       	push   0x7fffffff
c001b323:	6a 00                	push   0x0
c001b325:	6a 00                	push   0x0
c001b327:	53                   	push   ebx
c001b328:	68 43 f5 01 c0       	push   0xc001f543
c001b32d:	50                   	push   eax
c001b32e:	e8 6f 1d ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b333:	83 c4 14             	add    esp,0x14
c001b336:	56                   	push   esi
c001b337:	e8 1c 1e ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001b33c:	5a                   	pop    edx
c001b33d:	0f be c0             	movsx  eax,al
c001b340:	59                   	pop    ecx
c001b341:	50                   	push   eax
c001b342:	68 5c f3 01 c0       	push   0xc001f35c
c001b347:	e8 9c f8 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b34c:	58                   	pop    eax
c001b34d:	5a                   	pop    edx
c001b34e:	56                   	push   esi
c001b34f:	53                   	push   ebx
c001b350:	e8 d3 0c ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b355:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b35b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b35e:	e8 fb 10 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001b363:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b36d:	e8 e2 fe ff ff       	call   c001b254 <SATAPI::detectMedia()>
c001b372:	83 c4 14             	add    esp,0x14
c001b375:	31 c0                	xor    eax,eax
c001b377:	5b                   	pop    ebx
c001b378:	5e                   	pop    esi
c001b379:	c3                   	ret    

c001b37a <SATAPI::read(unsigned long long, int, void*)>:
c001b37a:	57                   	push   edi
c001b37b:	56                   	push   esi
c001b37c:	53                   	push   ebx
c001b37d:	83 ec 3c             	sub    esp,0x3c
c001b380:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b384:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b388:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b38c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b394:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b398:	68 51 f5 01 c0       	push   0xc001f551
c001b39d:	e8 46 f8 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	83 fe 04             	cmp    esi,0x4
c001b3a8:	7e 10                	jle    c001b3ba <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3aa:	83 ec 0c             	sub    esp,0xc
c001b3ad:	68 62 f5 01 c0       	push   0xc001f562
c001b3b2:	e8 30 53 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3c0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3c6:	51                   	push   ecx
c001b3c7:	50                   	push   eax
c001b3c8:	83 c0 02             	add    eax,0x2
c001b3cb:	c1 e0 07             	shl    eax,0x7
c001b3ce:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3d4:	50                   	push   eax
c001b3d5:	52                   	push   edx
c001b3d6:	e8 0d e9 ff ff       	call   c0019ce8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3db:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3df:	b9 03 00 00 00       	mov    ecx,0x3
c001b3e4:	fc                   	cld    
c001b3e5:	31 c0                	xor    eax,eax
c001b3e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3e9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3ee:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3f3:	83 c4 0c             	add    esp,0xc
c001b3f6:	6a 00                	push   0x0
c001b3f8:	6a 00                	push   0x0
c001b3fa:	6a 00                	push   0x0
c001b3fc:	6a 00                	push   0x0
c001b3fe:	6a 02                	push   0x2
c001b400:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b404:	50                   	push   eax
c001b405:	53                   	push   ebx
c001b406:	e8 31 fb ff ff       	call   c001af3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b40b:	83 c4 20             	add    esp,0x20
c001b40e:	85 c0                	test   eax,eax
c001b410:	74 27                	je     c001b439 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b416:	50                   	push   eax
c001b417:	50                   	push   eax
c001b418:	68 8c f5 01 c0       	push   0xc001f58c
c001b41d:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b423:	e8 a0 da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b428:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b42b:	e8 24 fe ff ff       	call   c001b254 <SATAPI::detectMedia()>
c001b430:	58                   	pop    eax
c001b431:	5a                   	pop    edx
c001b432:	68 94 f5 01 c0       	push   0xc001f594
c001b437:	eb 69                	jmp    c001b4a2 <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b439:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b43d:	b9 03 00 00 00       	mov    ecx,0x3
c001b442:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b448:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b44d:	0f c8                	bswap  eax
c001b44f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b453:	89 f0                	mov    eax,esi
c001b455:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b459:	57                   	push   edi
c001b45a:	56                   	push   esi
c001b45b:	c1 e6 0b             	shl    esi,0xb
c001b45e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b46a:	56                   	push   esi
c001b46b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b46f:	50                   	push   eax
c001b470:	53                   	push   ebx
c001b471:	e8 c6 fa ff ff       	call   c001af3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b476:	83 c4 20             	add    esp,0x20
c001b479:	85 c0                	test   eax,eax
c001b47b:	74 37                	je     c001b4b4 <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b47d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b481:	50                   	push   eax
c001b482:	50                   	push   eax
c001b483:	68 9e f5 01 c0       	push   0xc001f59e
c001b488:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b48e:	e8 35 da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b493:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b496:	e8 b9 fd ff ff       	call   c001b254 <SATAPI::detectMedia()>
c001b49b:	5a                   	pop    edx
c001b49c:	59                   	pop    ecx
c001b49d:	68 a6 f5 01 c0       	push   0xc001f5a6
c001b4a2:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b4a8:	e8 1b da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4b4:	83 c4 30             	add    esp,0x30
c001b4b7:	5b                   	pop    ebx
c001b4b8:	5e                   	pop    esi
c001b4b9:	5f                   	pop    edi
c001b4ba:	c3                   	ret    
c001b4bb:	90                   	nop

c001b4bc <IOAPIC::close(int, int, void*)>:
c001b4bc:	b8 00 00 00 00       	mov    eax,0x0
c001b4c1:	c3                   	ret    

c001b4c2 <apicGetBase()>:
c001b4c2:	55                   	push   ebp
c001b4c3:	89 e5                	mov    ebp,esp
c001b4c5:	83 ec 18             	sub    esp,0x18
c001b4c8:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b4d3:	83 e0 08             	and    eax,0x8
c001b4d6:	84 c0                	test   al,al
c001b4d8:	75 07                	jne    c001b4e1 <apicGetBase()+0x1f>
c001b4da:	b8 00 00 00 00       	mov    eax,0x0
c001b4df:	eb 21                	jmp    c001b502 <apicGetBase()+0x40>
c001b4e1:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4e6:	83 ec 08             	sub    esp,0x8
c001b4e9:	6a 1b                	push   0x1b
c001b4eb:	50                   	push   eax
c001b4ec:	e8 a5 bf fe ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c001b4f1:	83 c4 10             	add    esp,0x10
c001b4f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4f7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4fd:	25 00 00 ff ff       	and    eax,0xffff0000
c001b502:	c9                   	leave  
c001b503:	c3                   	ret    

c001b504 <IOAPIC::IOAPIC()>:
c001b504:	83 ec 0c             	sub    esp,0xc
c001b507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50b:	83 ec 08             	sub    esp,0x8
c001b50e:	68 e8 f5 01 c0       	push   0xc001f5e8
c001b513:	50                   	push   eax
c001b514:	e8 a7 0c ff ff       	call   c000c1c0 <Device::Device(char const*)>
c001b519:	83 c4 10             	add    esp,0x10
c001b51c:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001b521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b525:	89 10                	mov    DWORD PTR [eax],edx
c001b527:	90                   	nop
c001b528:	83 c4 0c             	add    esp,0xc
c001b52b:	c3                   	ret    

c001b52c <apicOpen()>:
c001b52c:	55                   	push   ebp
c001b52d:	89 e5                	mov    ebp,esp
c001b52f:	53                   	push   ebx
c001b530:	83 ec 34             	sub    esp,0x34
c001b533:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c001b538:	83 f0 01             	xor    eax,0x1
c001b53b:	84 c0                	test   al,al
c001b53d:	0f 84 9d 00 00 00    	je     c001b5e0 <apicOpen()+0xb4>
c001b543:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b547:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c001b54c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b54f:	0f 83 84 00 00 00    	jae    c001b5d9 <apicOpen()+0xad>
c001b555:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b55c:	83 ec 0c             	sub    esp,0xc
c001b55f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b562:	e8 f2 c8 fe ff       	call   c0007e59 <malloc>
c001b567:	83 c4 10             	add    esp,0x10
c001b56a:	89 c3                	mov    ebx,eax
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	53                   	push   ebx
c001b570:	e8 8f ff ff ff       	call   c001b504 <IOAPIC::IOAPIC()>
c001b575:	83 c4 10             	add    esp,0x10
c001b578:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b57b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b57e:	25 ff 00 00 00       	and    eax,0xff
c001b583:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b586:	89 14 85 20 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7e0],edx
c001b58d:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c001b592:	40                   	inc    eax
c001b593:	a3 00 48 02 c0       	mov    ds:0xc0024800,eax
c001b598:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b59d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5a3:	83 ec 08             	sub    esp,0x8
c001b5a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5a9:	50                   	push   eax
c001b5aa:	e8 79 0a ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b5af:	83 c4 10             	add    esp,0x10
c001b5b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5b7:	83 c0 08             	add    eax,0x8
c001b5ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5bc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5bf:	25 ff 00 00 00       	and    eax,0xff
c001b5c4:	6a 00                	push   0x0
c001b5c6:	6a 00                	push   0x0
c001b5c8:	50                   	push   eax
c001b5c9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5cc:	ff d2                	call   edx
c001b5ce:	83 c4 10             	add    esp,0x10
c001b5d1:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b5d4:	e9 6e ff ff ff       	jmp    c001b547 <apicOpen()+0x1b>
c001b5d9:	c6 05 40 48 02 c0 01 	mov    BYTE PTR ds:0xc0024840,0x1
c001b5e0:	e8 dd fe ff ff       	call   c001b4c2 <apicGetBase()>
c001b5e5:	05 f0 00 00 00       	add    eax,0xf0
c001b5ea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5ed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5f5:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5fc:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b603:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b606:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b609:	89 10                	mov    DWORD PTR [eax],edx
c001b60b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b612:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c001b617:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b61a:	7d 70                	jge    c001b68c <apicOpen()+0x160>
c001b61c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b61f:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b626:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b629:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b62c:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b633:	c1 e8 08             	shr    eax,0x8
c001b636:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b63a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b63d:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b644:	c1 e8 18             	shr    eax,0x18
c001b647:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b64a:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b64e:	75 37                	jne    c001b687 <apicOpen()+0x15b>
c001b650:	e8 6d fe ff ff       	call   c001b4c2 <apicGetBase()>
c001b655:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b659:	75 07                	jne    c001b662 <apicOpen()+0x136>
c001b65b:	ba 60 03 00 00       	mov    edx,0x360
c001b660:	eb 05                	jmp    c001b667 <apicOpen()+0x13b>
c001b662:	ba 50 03 00 00       	mov    edx,0x350
c001b667:	01 d0                	add    eax,edx
c001b669:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b66c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b66f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b671:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b674:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b67b:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b67f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b682:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b685:	89 10                	mov    DWORD PTR [eax],edx
c001b687:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b68a:	eb 86                	jmp    c001b612 <apicOpen()+0xe6>
c001b68c:	90                   	nop
c001b68d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b690:	c9                   	leave  
c001b691:	c3                   	ret    

c001b692 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b692:	55                   	push   ebp
c001b693:	89 e5                	mov    ebp,esp
c001b695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b698:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b69e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6a1:	72 1d                	jb     c001b6c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6af:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6b5:	01 d0                	add    eax,edx
c001b6b7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6ba:	73 04                	jae    c001b6c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6bc:	b0 01                	mov    al,0x1
c001b6be:	eb 02                	jmp    c001b6c2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b6c0:	b0 00                	mov    al,0x0
c001b6c2:	5d                   	pop    ebp
c001b6c3:	c3                   	ret    

c001b6c4 <IOAPIC::read(int)>:
c001b6c4:	55                   	push   ebp
c001b6c5:	89 e5                	mov    ebp,esp
c001b6c7:	83 ec 10             	sub    esp,0x10
c001b6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6d9:	31 d2                	xor    edx,edx
c001b6db:	88 c2                	mov    dl,al
c001b6dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6e0:	89 10                	mov    DWORD PTR [eax],edx
c001b6e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6e5:	83 c0 10             	add    eax,0x10
c001b6e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6ea:	c9                   	leave  
c001b6eb:	c3                   	ret    

c001b6ec <IOAPIC::open(int, int, void*)>:
c001b6ec:	55                   	push   ebp
c001b6ed:	89 e5                	mov    ebp,esp
c001b6ef:	57                   	push   edi
c001b6f0:	56                   	push   esi
c001b6f1:	53                   	push   ebx
c001b6f2:	83 ec 04             	sub    esp,0x4
c001b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b704:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b70a:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c001b711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b714:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b71d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b723:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c001b72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b72d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b736:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b73f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b745:	89 c6                	mov    esi,eax
c001b747:	81 e6 ff 00 00 00    	and    esi,0xff
c001b74d:	89 d0                	mov    eax,edx
c001b74f:	ba 00 00 00 00       	mov    edx,0x0
c001b754:	89 c7                	mov    edi,eax
c001b756:	83 e7 ff             	and    edi,0xffffffff
c001b759:	89 f9                	mov    ecx,edi
c001b75b:	89 d0                	mov    eax,edx
c001b75d:	25 ff 00 00 00       	and    eax,0xff
c001b762:	89 c3                	mov    ebx,eax
c001b764:	89 c8                	mov    eax,ecx
c001b766:	89 da                	mov    edx,ebx
c001b768:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b76b:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b76e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b772:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b776:	83 e0 00             	and    eax,0x0
c001b779:	09 d0                	or     eax,edx
c001b77b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b782:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b788:	8d 50 01             	lea    edx,[eax+0x1]
c001b78b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b78e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b794:	31 d2                	xor    edx,edx
c001b796:	88 c2                	mov    dl,al
c001b798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b79b:	83 c2 08             	add    edx,0x8
c001b79e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7a2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7a8:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b7ae:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b7b2:	6a 01                	push   0x1
c001b7b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7b7:	e8 08 ff ff ff       	call   c001b6c4 <IOAPIC::read(int)>
c001b7bc:	83 c4 08             	add    esp,0x8
c001b7bf:	c1 f8 10             	sar    eax,0x10
c001b7c2:	25 ff 00 00 00       	and    eax,0xff
c001b7c7:	8d 50 01             	lea    edx,[eax+0x1]
c001b7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7cd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b7d3:	b8 00 00 00 00       	mov    eax,0x0
c001b7d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b7db:	5b                   	pop    ebx
c001b7dc:	5e                   	pop    esi
c001b7dd:	5f                   	pop    edi
c001b7de:	5d                   	pop    ebp
c001b7df:	c3                   	ret    

c001b7e0 <IOAPIC::write(int, int)>:
c001b7e0:	55                   	push   ebp
c001b7e1:	89 e5                	mov    ebp,esp
c001b7e3:	83 ec 10             	sub    esp,0x10
c001b7e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7f5:	31 d2                	xor    edx,edx
c001b7f7:	88 c2                	mov    dl,al
c001b7f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7fc:	89 10                	mov    DWORD PTR [eax],edx
c001b7fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b801:	8d 50 10             	lea    edx,[eax+0x10]
c001b804:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b807:	89 02                	mov    DWORD PTR [edx],eax
c001b809:	90                   	nop
c001b80a:	c9                   	leave  
c001b80b:	c3                   	ret    

c001b80c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b80c:	55                   	push   ebp
c001b80d:	89 e5                	mov    ebp,esp
c001b80f:	53                   	push   ebx
c001b810:	83 ec 2c             	sub    esp,0x2c
c001b813:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b816:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b819:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b81c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b81f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b822:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b825:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b828:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b82b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b82e:	88 d8                	mov    al,bl
c001b830:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b833:	88 c8                	mov    al,cl
c001b835:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b838:	88 d0                	mov    al,dl
c001b83a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b83d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b840:	25 ff 00 00 00       	and    eax,0xff
c001b845:	83 c0 08             	add    eax,0x8
c001b848:	01 c0                	add    eax,eax
c001b84a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b84d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b850:	25 ff 00 00 00       	and    eax,0xff
c001b855:	83 c0 08             	add    eax,0x8
c001b858:	01 c0                	add    eax,eax
c001b85a:	40                   	inc    eax
c001b85b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b85e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b861:	50                   	push   eax
c001b862:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b865:	e8 5a fe ff ff       	call   c001b6c4 <IOAPIC::read(int)>
c001b86a:	83 c4 08             	add    esp,0x8
c001b86d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b870:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b877:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b87a:	c1 e0 18             	shl    eax,0x18
c001b87d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b880:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b883:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b886:	52                   	push   edx
c001b887:	50                   	push   eax
c001b888:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b88b:	e8 50 ff ff ff       	call   c001b7e0 <IOAPIC::write(int, int)>
c001b890:	83 c4 0c             	add    esp,0xc
c001b893:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b896:	50                   	push   eax
c001b897:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b89a:	e8 25 fe ff ff       	call   c001b6c4 <IOAPIC::read(int)>
c001b89f:	83 c4 08             	add    esp,0x8
c001b8a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8a5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b8ac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b8b3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b8ba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b8be:	74 09                	je     c001b8c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b8c0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b8c7:	eb 07                	jmp    c001b8d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b8c9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b8d0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b8d4:	74 09                	je     c001b8df <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b8d6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b8dd:	eb 07                	jmp    c001b8e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b8df:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b8e6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8ed:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8f0:	25 ff 00 00 00       	and    eax,0xff
c001b8f5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8fe:	52                   	push   edx
c001b8ff:	50                   	push   eax
c001b900:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b903:	e8 d8 fe ff ff       	call   c001b7e0 <IOAPIC::write(int, int)>
c001b908:	83 c4 0c             	add    esp,0xc
c001b90b:	90                   	nop
c001b90c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b90f:	c9                   	leave  
c001b910:	c3                   	ret    
c001b911:	66 90                	xchg   ax,ax
c001b913:	90                   	nop

c001b914 <APICTimer::close(int, int, void*)>:
c001b914:	b8 00 00 00 00       	mov    eax,0x0
c001b919:	c3                   	ret    
c001b91a:	66 90                	xchg   ax,ax

c001b91c <apicTimerHandler(regs*, void*)>:
c001b91c:	83 ec 0c             	sub    esp,0xc
c001b91f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b923:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b925:	b8 10 27 00 00       	mov    eax,0x2710
c001b92a:	ba 00 00 00 00       	mov    edx,0x0
c001b92f:	f7 f1                	div    ecx
c001b931:	83 ec 0c             	sub    esp,0xc
c001b934:	50                   	push   eax
c001b935:	e8 82 1f ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001b93a:	83 c4 10             	add    esp,0x10
c001b93d:	90                   	nop
c001b93e:	83 c4 0c             	add    esp,0xc
c001b941:	c3                   	ret    
c001b942:	66 90                	xchg   ax,ax

c001b944 <APICTimer::open(int, int, void*)>:
c001b944:	83 ec 0c             	sub    esp,0xc
c001b947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b94d:	83 c0 24             	add    eax,0x24
c001b950:	8b 00                	mov    eax,DWORD PTR [eax]
c001b952:	83 ec 08             	sub    esp,0x8
c001b955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b95d:	ff d0                	call   eax
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b966:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b96a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b978:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b97e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b982:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	51                   	push   ecx
c001b98c:	6a 01                	push   0x1
c001b98e:	68 1c b9 01 c0       	push   0xc001b91c
c001b993:	52                   	push   edx
c001b994:	50                   	push   eax
c001b995:	e8 3a 06 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b99a:	83 c4 20             	add    esp,0x20
c001b99d:	89 c2                	mov    edx,eax
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9a9:	b8 00 00 00 00       	mov    eax,0x0
c001b9ae:	83 c4 0c             	add    esp,0xc
c001b9b1:	c3                   	ret    
c001b9b2:	66 90                	xchg   ax,ax

c001b9b4 <APICTimer::write(int)>:
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	68 1c f6 01 c0       	push   0xc001f61c
c001b9bf:	e8 23 4d ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9d5:	90                   	nop
c001b9d6:	83 c4 0c             	add    esp,0xc
c001b9d9:	c3                   	ret    
c001b9da:	66 90                	xchg   ax,ax

c001b9dc <APICTimer::APICTimer()>:
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e3:	83 ec 08             	sub    esp,0x8
c001b9e6:	68 2c f6 01 c0       	push   0xc001f62c
c001b9eb:	50                   	push   eax
c001b9ec:	e8 ff 1d ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fd:	89 10                	mov    DWORD PTR [eax],edx
c001b9ff:	90                   	nop
c001ba00:	83 c4 0c             	add    esp,0xc
c001ba03:	c3                   	ret    

c001ba04 <PIT::write(int)>:
c001ba04:	83 ec 10             	sub    esp,0x10
c001ba07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba19:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c001ba1e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba23:	99                   	cdq    
c001ba24:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba2c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba33:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba41:	ee                   	out    dx,al
c001ba42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba46:	25 ff 00 00 00       	and    eax,0xff
c001ba4b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba52:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba56:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba5a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba5f:	ee                   	out    dx,al
c001ba60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba64:	c1 f8 08             	sar    eax,0x8
c001ba67:	25 ff 00 00 00       	and    eax,0xff
c001ba6c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba73:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba77:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba7b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba80:	ee                   	out    dx,al
c001ba81:	90                   	nop
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	c3                   	ret    
c001ba86:	66 90                	xchg   ax,ax

c001ba88 <pitHandler(regs*, void*)>:
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	8b 0d 44 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024844
c001ba91:	b8 10 27 00 00       	mov    eax,0x2710
c001ba96:	99                   	cdq    
c001ba97:	f7 f9                	idiv   ecx
c001ba99:	83 ec 0c             	sub    esp,0xc
c001ba9c:	50                   	push   eax
c001ba9d:	e8 1a 1e ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001baa2:	83 c4 10             	add    esp,0x10
c001baa5:	90                   	nop
c001baa6:	83 c4 0c             	add    esp,0xc
c001baa9:	c3                   	ret    
c001baaa:	66 90                	xchg   ax,ax

c001baac <PIT::open(int, int, void*)>:
c001baac:	83 ec 0c             	sub    esp,0xc
c001baaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bab5:	83 c0 24             	add    eax,0x24
c001bab8:	8b 00                	mov    eax,DWORD PTR [eax]
c001baba:	83 ec 08             	sub    esp,0x8
c001babd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bac5:	ff d0                	call   eax
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	6a 00                	push   0x0
c001bad3:	6a 01                	push   0x1
c001bad5:	68 88 ba 01 c0       	push   0xc001ba88
c001bada:	6a 00                	push   0x0
c001badc:	50                   	push   eax
c001badd:	e8 f2 04 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bae2:	83 c4 20             	add    esp,0x20
c001bae5:	89 c2                	mov    edx,eax
c001bae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baeb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001baf1:	b8 00 00 00 00       	mov    eax,0x0
c001baf6:	83 c4 0c             	add    esp,0xc
c001baf9:	c3                   	ret    
c001bafa:	66 90                	xchg   ax,ax

c001bafc <PIT::close(int, int, void*)>:
c001bafc:	83 ec 0c             	sub    esp,0xc
c001baff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb03:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb11:	6a 01                	push   0x1
c001bb13:	68 88 ba 01 c0       	push   0xc001ba88
c001bb18:	6a 00                	push   0x0
c001bb1a:	50                   	push   eax
c001bb1b:	e8 ea 04 ff ff       	call   c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	b8 00 00 00 00       	mov    eax,0x0
c001bb28:	83 c4 0c             	add    esp,0xc
c001bb2b:	c3                   	ret    

c001bb2c <PIT::PIT()>:
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb33:	83 ec 08             	sub    esp,0x8
c001bb36:	68 68 f6 01 c0       	push   0xc001f668
c001bb3b:	50                   	push   eax
c001bb3c:	e8 af 1c ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001bb41:	83 c4 10             	add    esp,0x10
c001bb44:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001bb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4d:	89 10                	mov    DWORD PTR [eax],edx
c001bb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb59:	31 d2                	xor    edx,edx
c001bb5b:	88 c2                	mov    dl,al
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb72:	31 d2                	xor    edx,edx
c001bb74:	88 c2                	mov    dl,al
c001bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb89:	8d 50 01             	lea    edx,[eax+0x1]
c001bb8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb90:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb96:	31 d2                	xor    edx,edx
c001bb98:	88 c2                	mov    dl,al
c001bb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bba2:	83 e1 3f             	and    ecx,0x3f
c001bba5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bba9:	90                   	nop
c001bbaa:	83 c4 0c             	add    esp,0xc
c001bbad:	c3                   	ret    
c001bbae:	66 90                	xchg   ax,ax

c001bbb0 <avxDetect>:
c001bbb0:	b8 01 00 00 00       	mov    eax,0x1
c001bbb5:	0f a2                	cpuid  
c001bbb7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bbbd:	74 15                	je     c001bbd4 <avxDetect.noAVX>
c001bbbf:	b8 01 00 00 00       	mov    eax,0x1
c001bbc4:	0f a2                	cpuid  
c001bbc6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bbcc:	74 06                	je     c001bbd4 <avxDetect.noAVX>
c001bbce:	b8 01 00 00 00       	mov    eax,0x1
c001bbd3:	c3                   	ret    

c001bbd4 <avxDetect.noAVX>:
c001bbd4:	b8 00 00 00 00       	mov    eax,0x0
c001bbd9:	c3                   	ret    

c001bbda <avxSave>:
c001bbda:	53                   	push   ebx
c001bbdb:	52                   	push   edx
c001bbdc:	31 c0                	xor    eax,eax
c001bbde:	48                   	dec    eax
c001bbdf:	89 c2                	mov    edx,eax
c001bbe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbe5:	0f ae 23             	xsave  [ebx]
c001bbe8:	5a                   	pop    edx
c001bbe9:	5b                   	pop    ebx
c001bbea:	c3                   	ret    

c001bbeb <avxLoad>:
c001bbeb:	53                   	push   ebx
c001bbec:	52                   	push   edx
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	48                   	dec    eax
c001bbf0:	89 c2                	mov    edx,eax
c001bbf2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbf6:	0f ae 2b             	xrstor [ebx]
c001bbf9:	5a                   	pop    edx
c001bbfa:	5b                   	pop    ebx
c001bbfb:	c3                   	ret    

c001bbfc <avxInit>:
c001bbfc:	e8 57 02 00 00       	call   c001be58 <sseInit>
c001bc01:	50                   	push   eax
c001bc02:	51                   	push   ecx
c001bc03:	0f 20 e0             	mov    eax,cr4
c001bc06:	0d 00 00 04 00       	or     eax,0x40000
c001bc0b:	0f 22 e0             	mov    cr4,eax
c001bc0e:	31 c9                	xor    ecx,ecx
c001bc10:	0f 01 d0             	xgetbv 
c001bc13:	0d 07 00 00 00       	or     eax,0x7
c001bc18:	0f 01 d1             	xsetbv 
c001bc1b:	59                   	pop    ecx
c001bc1c:	58                   	pop    eax
c001bc1d:	c3                   	ret    

c001bc1e <avxClose>:
c001bc1e:	c3                   	ret    

c001bc1f <wouldSheSayYes>:
c001bc1f:	c3                   	ret    
c001bc20:	49                   	dec    ecx
c001bc21:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc25:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc29:	75 20                	jne    c001bc4b <isr0+0xb>
c001bc2b:	4e                   	dec    esi
c001bc2c:	79 61                	jns    c001bc8f <isr7+0x3>
c001bc2e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc33:	66 90                	xchg   ax,ax
c001bc35:	66 90                	xchg   ax,ax
c001bc37:	66 90                	xchg   ax,ax
c001bc39:	66 90                	xchg   ax,ax
c001bc3b:	66 90                	xchg   ax,ax
c001bc3d:	66 90                	xchg   ax,ax
c001bc3f:	90                   	nop

c001bc40 <isr0>:
c001bc40:	fa                   	cli    
c001bc41:	68 00 00 00 00       	push   0x0
c001bc46:	68 00 00 00 00       	push   0x0
c001bc4b:	e9 44 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc50 <isr1>:
c001bc50:	fa                   	cli    
c001bc51:	6a 00                	push   0x0
c001bc53:	6a 01                	push   0x1
c001bc55:	e9 3a 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc5a <isr2>:
c001bc5a:	fa                   	cli    
c001bc5b:	6a 00                	push   0x0
c001bc5d:	6a 02                	push   0x2
c001bc5f:	e9 30 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc64 <isr3>:
c001bc64:	fa                   	cli    
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 03                	push   0x3
c001bc69:	e9 26 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc6e <isr4>:
c001bc6e:	fa                   	cli    
c001bc6f:	6a 00                	push   0x0
c001bc71:	6a 04                	push   0x4
c001bc73:	e9 1c 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc78 <isr5>:
c001bc78:	fa                   	cli    
c001bc79:	6a 00                	push   0x0
c001bc7b:	6a 05                	push   0x5
c001bc7d:	e9 12 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc82 <isr6>:
c001bc82:	fa                   	cli    
c001bc83:	6a 00                	push   0x0
c001bc85:	6a 06                	push   0x6
c001bc87:	e9 08 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc8c <isr7>:
c001bc8c:	fa                   	cli    
c001bc8d:	6a 00                	push   0x0
c001bc8f:	6a 07                	push   0x7
c001bc91:	e9 fe 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bc96 <isr8>:
c001bc96:	fa                   	cli    
c001bc97:	6a 08                	push   0x8
c001bc99:	e9 f6 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bc9e <isr9>:
c001bc9e:	fa                   	cli    
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 09                	push   0x9
c001bca3:	e9 ec 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bca8 <isr10>:
c001bca8:	fa                   	cli    
c001bca9:	6a 0a                	push   0xa
c001bcab:	e9 e4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcb0 <isr11>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 0b                	push   0xb
c001bcb3:	e9 dc 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcb8 <isr12>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 0c                	push   0xc
c001bcbb:	e9 d4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcc0 <isr13>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 0d                	push   0xd
c001bcc3:	e9 cc 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcc8 <isr14>:
c001bcc8:	fa                   	cli    
c001bcc9:	6a 0e                	push   0xe
c001bccb:	e9 c4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcd0 <isr15>:
c001bcd0:	fa                   	cli    
c001bcd1:	6a 00                	push   0x0
c001bcd3:	6a 0f                	push   0xf
c001bcd5:	e9 ba 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcda <isr16>:
c001bcda:	fa                   	cli    
c001bcdb:	6a 00                	push   0x0
c001bcdd:	6a 10                	push   0x10
c001bcdf:	e9 b0 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bce4 <isr17>:
c001bce4:	fa                   	cli    
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 11                	push   0x11
c001bce9:	e9 a6 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcee <isr18>:
c001bcee:	fa                   	cli    
c001bcef:	6a 00                	push   0x0
c001bcf1:	6a 12                	push   0x12
c001bcf3:	e9 9c 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcf8 <irq3>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 00                	push   0x0
c001bcfb:	6a 23                	push   0x23
c001bcfd:	e9 92 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd02 <irq4>:
c001bd02:	fa                   	cli    
c001bd03:	6a 00                	push   0x0
c001bd05:	6a 24                	push   0x24
c001bd07:	e9 88 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd0c <irq5>:
c001bd0c:	fa                   	cli    
c001bd0d:	6a 00                	push   0x0
c001bd0f:	6a 25                	push   0x25
c001bd11:	e9 7e 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd16 <irq6>:
c001bd16:	fa                   	cli    
c001bd17:	6a 00                	push   0x0
c001bd19:	6a 26                	push   0x26
c001bd1b:	e9 74 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd20 <irq7>:
c001bd20:	fa                   	cli    
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 27                	push   0x27
c001bd25:	e9 6a 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd2a <irq8>:
c001bd2a:	fa                   	cli    
c001bd2b:	6a 00                	push   0x0
c001bd2d:	6a 28                	push   0x28
c001bd2f:	e9 60 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd34 <irq9>:
c001bd34:	fa                   	cli    
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 29                	push   0x29
c001bd39:	e9 56 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd3e <irq10>:
c001bd3e:	fa                   	cli    
c001bd3f:	6a 00                	push   0x0
c001bd41:	6a 2a                	push   0x2a
c001bd43:	e9 4c 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd48 <irq11>:
c001bd48:	fa                   	cli    
c001bd49:	6a 00                	push   0x0
c001bd4b:	6a 2b                	push   0x2b
c001bd4d:	e9 42 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd52 <irq12>:
c001bd52:	fa                   	cli    
c001bd53:	6a 00                	push   0x0
c001bd55:	6a 2c                	push   0x2c
c001bd57:	e9 38 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd5c <irq13>:
c001bd5c:	fa                   	cli    
c001bd5d:	6a 00                	push   0x0
c001bd5f:	6a 2d                	push   0x2d
c001bd61:	e9 2e 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd66 <irq14>:
c001bd66:	fa                   	cli    
c001bd67:	6a 00                	push   0x0
c001bd69:	6a 2e                	push   0x2e
c001bd6b:	e9 24 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd70 <irq15>:
c001bd70:	fa                   	cli    
c001bd71:	6a 00                	push   0x0
c001bd73:	6a 2f                	push   0x2f
c001bd75:	e9 1a 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd7a <irq1>:
c001bd7a:	fa                   	cli    
c001bd7b:	6a 00                	push   0x0
c001bd7d:	6a 21                	push   0x21
c001bd7f:	eb 13                	jmp    c001bd94 <int_common_stub>

c001bd81 <irq2>:
c001bd81:	fa                   	cli    
c001bd82:	6a 00                	push   0x0
c001bd84:	6a 22                	push   0x22
c001bd86:	eb 0c                	jmp    c001bd94 <int_common_stub>

c001bd88 <isr96>:
c001bd88:	6a 00                	push   0x0
c001bd8a:	6a 60                	push   0x60
c001bd8c:	fb                   	sti    
c001bd8d:	eb 05                	jmp    c001bd94 <int_common_stub>

c001bd8f <irq0>:
c001bd8f:	fa                   	cli    
c001bd90:	6a 00                	push   0x0
c001bd92:	6a 20                	push   0x20

c001bd94 <int_common_stub>:
c001bd94:	60                   	pusha  
c001bd95:	1e                   	push   ds
c001bd96:	06                   	push   es
c001bd97:	0f a0                	push   fs
c001bd99:	0f a8                	push   gs
c001bd9b:	66 b8 10 00          	mov    ax,0x10
c001bd9f:	66 8e d8             	mov    ds,ax
c001bda2:	66 8e c0             	mov    es,ax
c001bda5:	66 8e e0             	mov    fs,ax
c001bda8:	66 8e e8             	mov    gs,ax
c001bdab:	54                   	push   esp
c001bdac:	fc                   	cld    
c001bdad:	e8 22 07 ff ff       	call   c000c4d4 <int_handler>
c001bdb2:	81 c4 04 00 00 00    	add    esp,0x4
c001bdb8:	0f a9                	pop    gs
c001bdba:	0f a1                	pop    fs
c001bdbc:	07                   	pop    es
c001bdbd:	1f                   	pop    ds
c001bdbe:	61                   	popa   
c001bdbf:	81 c4 08 00 00 00    	add    esp,0x8
c001bdc5:	cf                   	iret   

c001bdc6 <irq16>:
c001bdc6:	fa                   	cli    
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 30                	push   0x30
c001bdcb:	e9 c4 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdd0 <irq17>:
c001bdd0:	fa                   	cli    
c001bdd1:	6a 00                	push   0x0
c001bdd3:	6a 31                	push   0x31
c001bdd5:	e9 ba ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdda <irq18>:
c001bdda:	fa                   	cli    
c001bddb:	6a 00                	push   0x0
c001bddd:	6a 32                	push   0x32
c001bddf:	e9 b0 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bde4 <irq19>:
c001bde4:	fa                   	cli    
c001bde5:	6a 00                	push   0x0
c001bde7:	6a 33                	push   0x33
c001bde9:	e9 a6 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdee <irq20>:
c001bdee:	fa                   	cli    
c001bdef:	6a 00                	push   0x0
c001bdf1:	6a 34                	push   0x34
c001bdf3:	e9 9c ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdf8 <irq21>:
c001bdf8:	fa                   	cli    
c001bdf9:	6a 00                	push   0x0
c001bdfb:	6a 35                	push   0x35
c001bdfd:	e9 92 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001be02 <irq22>:
c001be02:	fa                   	cli    
c001be03:	6a 00                	push   0x0
c001be05:	6a 36                	push   0x36
c001be07:	e9 88 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001be0c <irq23>:
c001be0c:	fa                   	cli    
c001be0d:	6a 00                	push   0x0
c001be0f:	6a 37                	push   0x37
c001be11:	e9 7e ff ff ff       	jmp    c001bd94 <int_common_stub>
c001be16:	66 90                	xchg   ax,ax
c001be18:	66 90                	xchg   ax,ax
c001be1a:	66 90                	xchg   ax,ax
c001be1c:	66 90                	xchg   ax,ax
c001be1e:	66 90                	xchg   ax,ax

c001be20 <i386GetRDRAND>:
c001be20:	b9 64 00 00 00       	mov    ecx,0x64

c001be25 <retry>:
c001be25:	0f c7 f0             	rdrand eax
c001be28:	72 05                	jb     c001be2f <retry.done>
c001be2a:	e2 f9                	loop   c001be25 <retry>

c001be2c <retry.fail>:
c001be2c:	31 c0                	xor    eax,eax
c001be2e:	c3                   	ret    

c001be2f <retry.done>:
c001be2f:	c3                   	ret    

c001be30 <absolutelyNoChanceInHell>:
c001be30:	b8 01 00 00 00       	mov    eax,0x1
c001be35:	0f a2                	cpuid  
c001be37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be3d:	74 06                	je     c001be45 <sseDetect.noSSE>
c001be3f:	b8 01 00 00 00       	mov    eax,0x1
c001be44:	c3                   	ret    

c001be45 <sseDetect.noSSE>:
c001be45:	31 c0                	xor    eax,eax
c001be47:	c3                   	ret    

c001be48 <sseSave>:
c001be48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4c:	0f ae 00             	fxsave [eax]
c001be4f:	c3                   	ret    

c001be50 <sseLoad>:
c001be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be54:	0f ae 08             	fxrstor [eax]
c001be57:	c3                   	ret    

c001be58 <sseInit>:
c001be58:	e8 42 00 00 00       	call   c001be9f <x87Init>
c001be5d:	0f 20 e0             	mov    eax,cr4
c001be60:	66 0d 00 06          	or     ax,0x600
c001be64:	0f 22 e0             	mov    cr4,eax
c001be67:	c3                   	ret    

c001be68 <sseClose>:
c001be68:	c3                   	ret    
c001be69:	66 90                	xchg   ax,ax
c001be6b:	66 90                	xchg   ax,ax
c001be6d:	66 90                	xchg   ax,ax
c001be6f:	90                   	nop

c001be70 <value_37F>:
c001be70:	7f 03                	jg     c001be75 <value_37A+0x1>

c001be72 <value_37E>:
c001be72:	7e 03                	jle    c001be77 <x87Detect+0x1>

c001be74 <value_37A>:
c001be74:	7a 03                	jp     c001be79 <x87Detect+0x3>

c001be76 <x87Detect>:
c001be76:	b8 01 00 00 00       	mov    eax,0x1
c001be7b:	0f a2                	cpuid  
c001be7d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be83:	74 06                	je     c001be8b <x87Detect.nox87>
c001be85:	b8 01 00 00 00       	mov    eax,0x1
c001be8a:	c3                   	ret    

c001be8b <x87Detect.nox87>:
c001be8b:	b8 00 00 00 00       	mov    eax,0x0
c001be90:	c3                   	ret    

c001be91 <x87Save>:
c001be91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be95:	dd 30                	fnsave [eax]
c001be97:	c3                   	ret    

c001be98 <x87Load>:
c001be98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9c:	dd 20                	frstor [eax]
c001be9e:	c3                   	ret    

c001be9f <x87Init>:
c001be9f:	0f 20 c0             	mov    eax,cr0
c001bea2:	66 25 fb ff          	and    ax,0xfffb
c001bea6:	66 0d 22 00          	or     ax,0x22
c001beaa:	0f 22 c0             	mov    cr0,eax
c001bead:	db e3                	fninit 
c001beaf:	0f 06                	clts   
c001beb1:	d9 2d 74 be 01 c0    	fldcw  WORD PTR ds:0xc001be74
c001beb7:	c3                   	ret    

c001beb8 <x87Close>:
c001beb8:	c3                   	ret    
c001beb9:	66 90                	xchg   ax,ax
c001bebb:	90                   	nop

c001bebc <__do_global_ctors_aux>:
c001bebc:	a1 6c ce 01 c0       	mov    eax,ds:0xc001ce6c
c001bec1:	83 f8 ff             	cmp    eax,0xffffffff
c001bec4:	74 1a                	je     c001bee0 <__do_global_ctors_aux+0x24>
c001bec6:	55                   	push   ebp
c001bec7:	89 e5                	mov    ebp,esp
c001bec9:	53                   	push   ebx
c001beca:	52                   	push   edx
c001becb:	bb 6c ce 01 c0       	mov    ebx,0xc001ce6c
c001bed0:	ff d0                	call   eax
c001bed2:	83 eb 04             	sub    ebx,0x4
c001bed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bed7:	83 f8 ff             	cmp    eax,0xffffffff
c001beda:	75 f4                	jne    c001bed0 <__do_global_ctors_aux+0x14>
c001bedc:	58                   	pop    eax
c001bedd:	5b                   	pop    ebx
c001bede:	5d                   	pop    ebp
c001bedf:	c3                   	ret    
c001bee0:	c3                   	ret    
c001bee1:	66 90                	xchg   ax,ax
c001bee3:	90                   	nop

c001bee4 <__divdi3>:
c001bee4:	55                   	push   ebp
c001bee5:	57                   	push   edi
c001bee6:	56                   	push   esi
c001bee7:	53                   	push   ebx
c001bee8:	83 ec 1c             	sub    esp,0x1c
c001beeb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001beef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bef3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bef6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001befa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001befe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf02:	85 db                	test   ebx,ebx
c001bf04:	0f 88 8e 00 00 00    	js     c001bf98 <__divdi3+0xb4>
c001bf0a:	89 dd                	mov    ebp,ebx
c001bf0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf14:	89 d3                	mov    ebx,edx
c001bf16:	85 d2                	test   edx,edx
c001bf18:	79 0d                	jns    c001bf27 <__divdi3+0x43>
c001bf1a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf1e:	f7 d8                	neg    eax
c001bf20:	83 d2 00             	adc    edx,0x0
c001bf23:	f7 da                	neg    edx
c001bf25:	89 d3                	mov    ebx,edx
c001bf27:	89 c7                	mov    edi,eax
c001bf29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf2c:	85 db                	test   ebx,ebx
c001bf2e:	75 48                	jne    c001bf78 <__divdi3+0x94>
c001bf30:	39 ef                	cmp    edi,ebp
c001bf32:	76 24                	jbe    c001bf58 <__divdi3+0x74>
c001bf34:	89 ea                	mov    edx,ebp
c001bf36:	f7 f7                	div    edi
c001bf38:	89 c1                	mov    ecx,eax
c001bf3a:	31 f6                	xor    esi,esi
c001bf3c:	89 c8                	mov    eax,ecx
c001bf3e:	89 f2                	mov    edx,esi
c001bf40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf44:	85 c9                	test   ecx,ecx
c001bf46:	74 07                	je     c001bf4f <__divdi3+0x6b>
c001bf48:	f7 d8                	neg    eax
c001bf4a:	83 d2 00             	adc    edx,0x0
c001bf4d:	f7 da                	neg    edx
c001bf4f:	83 c4 1c             	add    esp,0x1c
c001bf52:	5b                   	pop    ebx
c001bf53:	5e                   	pop    esi
c001bf54:	5f                   	pop    edi
c001bf55:	5d                   	pop    ebp
c001bf56:	c3                   	ret    
c001bf57:	90                   	nop
c001bf58:	85 ff                	test   edi,edi
c001bf5a:	75 0b                	jne    c001bf67 <__divdi3+0x83>
c001bf5c:	b8 01 00 00 00       	mov    eax,0x1
c001bf61:	31 d2                	xor    edx,edx
c001bf63:	f7 f3                	div    ebx
c001bf65:	89 c7                	mov    edi,eax
c001bf67:	31 d2                	xor    edx,edx
c001bf69:	89 e8                	mov    eax,ebp
c001bf6b:	f7 f7                	div    edi
c001bf6d:	89 c6                	mov    esi,eax
c001bf6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf72:	f7 f7                	div    edi
c001bf74:	89 c1                	mov    ecx,eax
c001bf76:	eb c4                	jmp    c001bf3c <__divdi3+0x58>
c001bf78:	39 eb                	cmp    ebx,ebp
c001bf7a:	77 3c                	ja     c001bfb8 <__divdi3+0xd4>
c001bf7c:	0f bd f3             	bsr    esi,ebx
c001bf7f:	83 f6 1f             	xor    esi,0x1f
c001bf82:	75 40                	jne    c001bfc4 <__divdi3+0xe0>
c001bf84:	39 eb                	cmp    ebx,ebp
c001bf86:	72 09                	jb     c001bf91 <__divdi3+0xad>
c001bf88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf8b:	0f 87 97 00 00 00    	ja     c001c028 <__divdi3+0x144>
c001bf91:	b9 01 00 00 00       	mov    ecx,0x1
c001bf96:	eb a4                	jmp    c001bf3c <__divdi3+0x58>
c001bf98:	f7 d9                	neg    ecx
c001bf9a:	83 d3 00             	adc    ebx,0x0
c001bf9d:	f7 db                	neg    ebx
c001bf9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bfa2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bfa6:	89 dd                	mov    ebp,ebx
c001bfa8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bfb0:	e9 5f ff ff ff       	jmp    c001bf14 <__divdi3+0x30>
c001bfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb8:	31 f6                	xor    esi,esi
c001bfba:	31 c9                	xor    ecx,ecx
c001bfbc:	e9 7b ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	b8 20 00 00 00       	mov    eax,0x20
c001bfc9:	29 f0                	sub    eax,esi
c001bfcb:	89 f1                	mov    ecx,esi
c001bfcd:	d3 e3                	shl    ebx,cl
c001bfcf:	89 fa                	mov    edx,edi
c001bfd1:	88 c1                	mov    cl,al
c001bfd3:	d3 ea                	shr    edx,cl
c001bfd5:	09 da                	or     edx,ebx
c001bfd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bfdb:	89 f1                	mov    ecx,esi
c001bfdd:	d3 e7                	shl    edi,cl
c001bfdf:	89 eb                	mov    ebx,ebp
c001bfe1:	88 c1                	mov    cl,al
c001bfe3:	d3 eb                	shr    ebx,cl
c001bfe5:	89 f1                	mov    ecx,esi
c001bfe7:	d3 e5                	shl    ebp,cl
c001bfe9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bfec:	88 c1                	mov    cl,al
c001bfee:	d3 ea                	shr    edx,cl
c001bff0:	09 d5                	or     ebp,edx
c001bff2:	89 e8                	mov    eax,ebp
c001bff4:	89 da                	mov    edx,ebx
c001bff6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bffa:	89 d3                	mov    ebx,edx
c001bffc:	89 c5                	mov    ebp,eax
c001bffe:	f7 e7                	mul    edi
c001c000:	39 d3                	cmp    ebx,edx
c001c002:	72 18                	jb     c001c01c <__divdi3+0x138>
c001c004:	74 0a                	je     c001c010 <__divdi3+0x12c>
c001c006:	89 e9                	mov    ecx,ebp
c001c008:	31 f6                	xor    esi,esi
c001c00a:	e9 2d ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c00f:	90                   	nop
c001c010:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c013:	89 f1                	mov    ecx,esi
c001c015:	d3 e7                	shl    edi,cl
c001c017:	39 c7                	cmp    edi,eax
c001c019:	73 eb                	jae    c001c006 <__divdi3+0x122>
c001c01b:	90                   	nop
c001c01c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c01f:	31 f6                	xor    esi,esi
c001c021:	e9 16 ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c026:	66 90                	xchg   ax,ax
c001c028:	31 c9                	xor    ecx,ecx
c001c02a:	e9 0d ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c02f:	90                   	nop

c001c030 <__moddi3>:
c001c030:	55                   	push   ebp
c001c031:	57                   	push   edi
c001c032:	56                   	push   esi
c001c033:	53                   	push   ebx
c001c034:	83 ec 2c             	sub    esp,0x2c
c001c037:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c03b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c03f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c043:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c047:	85 db                	test   ebx,ebx
c001c049:	0f 88 85 00 00 00    	js     c001c0d4 <__moddi3+0xa4>
c001c04f:	89 de                	mov    esi,ebx
c001c051:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c059:	89 d7                	mov    edi,edx
c001c05b:	85 d2                	test   edx,edx
c001c05d:	79 09                	jns    c001c068 <__moddi3+0x38>
c001c05f:	f7 d8                	neg    eax
c001c061:	83 d2 00             	adc    edx,0x0
c001c064:	f7 da                	neg    edx
c001c066:	89 d7                	mov    edi,edx
c001c068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c06c:	89 cd                	mov    ebp,ecx
c001c06e:	85 ff                	test   edi,edi
c001c070:	75 52                	jne    c001c0c4 <__moddi3+0x94>
c001c072:	89 c3                	mov    ebx,eax
c001c074:	39 f0                	cmp    eax,esi
c001c076:	76 24                	jbe    c001c09c <__moddi3+0x6c>
c001c078:	89 c8                	mov    eax,ecx
c001c07a:	89 f2                	mov    edx,esi
c001c07c:	f7 f3                	div    ebx
c001c07e:	89 d6                	mov    esi,edx
c001c080:	89 f0                	mov    eax,esi
c001c082:	31 d2                	xor    edx,edx
c001c084:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c088:	85 c9                	test   ecx,ecx
c001c08a:	74 07                	je     c001c093 <__moddi3+0x63>
c001c08c:	f7 d8                	neg    eax
c001c08e:	83 d2 00             	adc    edx,0x0
c001c091:	f7 da                	neg    edx
c001c093:	83 c4 2c             	add    esp,0x2c
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	5f                   	pop    edi
c001c099:	5d                   	pop    ebp
c001c09a:	c3                   	ret    
c001c09b:	90                   	nop
c001c09c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0a0:	85 db                	test   ebx,ebx
c001c0a2:	75 0d                	jne    c001c0b1 <__moddi3+0x81>
c001c0a4:	b8 01 00 00 00       	mov    eax,0x1
c001c0a9:	31 d2                	xor    edx,edx
c001c0ab:	f7 f7                	div    edi
c001c0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0b1:	89 f0                	mov    eax,esi
c001c0b3:	31 d2                	xor    edx,edx
c001c0b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0b9:	f7 f7                	div    edi
c001c0bb:	89 e8                	mov    eax,ebp
c001c0bd:	f7 f7                	div    edi
c001c0bf:	89 d6                	mov    esi,edx
c001c0c1:	eb bd                	jmp    c001c080 <__moddi3+0x50>
c001c0c3:	90                   	nop
c001c0c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0c8:	39 f7                	cmp    edi,esi
c001c0ca:	76 20                	jbe    c001c0ec <__moddi3+0xbc>
c001c0cc:	89 c8                	mov    eax,ecx
c001c0ce:	89 f2                	mov    edx,esi
c001c0d0:	eb b2                	jmp    c001c084 <__moddi3+0x54>
c001c0d2:	66 90                	xchg   ax,ax
c001c0d4:	f7 d9                	neg    ecx
c001c0d6:	83 d3 00             	adc    ebx,0x0
c001c0d9:	f7 db                	neg    ebx
c001c0db:	89 de                	mov    esi,ebx
c001c0dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c0e5:	e9 6f ff ff ff       	jmp    c001c059 <__moddi3+0x29>
c001c0ea:	66 90                	xchg   ax,ax
c001c0ec:	0f bd c7             	bsr    eax,edi
c001c0ef:	83 f0 1f             	xor    eax,0x1f
c001c0f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0f6:	75 24                	jne    c001c11c <__moddi3+0xec>
c001c0f8:	39 f7                	cmp    edi,esi
c001c0fa:	72 06                	jb     c001c102 <__moddi3+0xd2>
c001c0fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c100:	77 0c                	ja     c001c10e <__moddi3+0xde>
c001c102:	89 e9                	mov    ecx,ebp
c001c104:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c108:	19 fe                	sbb    esi,edi
c001c10a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c112:	89 f2                	mov    edx,esi
c001c114:	e9 6b ff ff ff       	jmp    c001c084 <__moddi3+0x54>
c001c119:	8d 76 00             	lea    esi,[esi+0x0]
c001c11c:	b8 20 00 00 00       	mov    eax,0x20
c001c121:	89 c2                	mov    edx,eax
c001c123:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c127:	29 da                	sub    edx,ebx
c001c129:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c12d:	88 d9                	mov    cl,bl
c001c12f:	d3 e7                	shl    edi,cl
c001c131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c135:	88 d1                	mov    cl,dl
c001c137:	d3 e8                	shr    eax,cl
c001c139:	09 c7                	or     edi,eax
c001c13b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c13f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c143:	89 d8                	mov    eax,ebx
c001c145:	88 d9                	mov    cl,bl
c001c147:	d3 e7                	shl    edi,cl
c001c149:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c14d:	89 f3                	mov    ebx,esi
c001c14f:	88 d1                	mov    cl,dl
c001c151:	d3 eb                	shr    ebx,cl
c001c153:	89 c7                	mov    edi,eax
c001c155:	88 c1                	mov    cl,al
c001c157:	d3 e6                	shl    esi,cl
c001c159:	89 e8                	mov    eax,ebp
c001c15b:	88 d1                	mov    cl,dl
c001c15d:	d3 e8                	shr    eax,cl
c001c15f:	09 f0                	or     eax,esi
c001c161:	89 f9                	mov    ecx,edi
c001c163:	d3 e5                	shl    ebp,cl
c001c165:	89 da                	mov    edx,ebx
c001c167:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c16b:	89 d3                	mov    ebx,edx
c001c16d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c171:	89 c6                	mov    esi,eax
c001c173:	89 d1                	mov    ecx,edx
c001c175:	39 d3                	cmp    ebx,edx
c001c177:	72 27                	jb     c001c1a0 <__moddi3+0x170>
c001c179:	74 21                	je     c001c19c <__moddi3+0x16c>
c001c17b:	29 f5                	sub    ebp,esi
c001c17d:	19 cb                	sbb    ebx,ecx
c001c17f:	89 de                	mov    esi,ebx
c001c181:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c185:	d3 e6                	shl    esi,cl
c001c187:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c18b:	89 f9                	mov    ecx,edi
c001c18d:	d3 ed                	shr    ebp,cl
c001c18f:	09 ee                	or     esi,ebp
c001c191:	89 f0                	mov    eax,esi
c001c193:	d3 eb                	shr    ebx,cl
c001c195:	89 da                	mov    edx,ebx
c001c197:	e9 e8 fe ff ff       	jmp    c001c084 <__moddi3+0x54>
c001c19c:	39 c5                	cmp    ebp,eax
c001c19e:	73 db                	jae    c001c17b <__moddi3+0x14b>
c001c1a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1a8:	89 d1                	mov    ecx,edx
c001c1aa:	89 c6                	mov    esi,eax
c001c1ac:	eb cd                	jmp    c001c17b <__moddi3+0x14b>
c001c1ae:	66 90                	xchg   ax,ax

c001c1b0 <__udivdi3>:
c001c1b0:	55                   	push   ebp
c001c1b1:	57                   	push   edi
c001c1b2:	56                   	push   esi
c001c1b3:	53                   	push   ebx
c001c1b4:	83 ec 1c             	sub    esp,0x1c
c001c1b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1c7:	85 d2                	test   edx,edx
c001c1c9:	75 41                	jne    c001c20c <__udivdi3+0x5c>
c001c1cb:	39 f7                	cmp    edi,esi
c001c1cd:	76 15                	jbe    c001c1e4 <__udivdi3+0x34>
c001c1cf:	89 e8                	mov    eax,ebp
c001c1d1:	89 f2                	mov    edx,esi
c001c1d3:	f7 f7                	div    edi
c001c1d5:	31 db                	xor    ebx,ebx
c001c1d7:	89 da                	mov    edx,ebx
c001c1d9:	83 c4 1c             	add    esp,0x1c
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e4:	89 f9                	mov    ecx,edi
c001c1e6:	85 ff                	test   edi,edi
c001c1e8:	75 0b                	jne    c001c1f5 <__udivdi3+0x45>
c001c1ea:	b8 01 00 00 00       	mov    eax,0x1
c001c1ef:	31 d2                	xor    edx,edx
c001c1f1:	f7 f7                	div    edi
c001c1f3:	89 c1                	mov    ecx,eax
c001c1f5:	31 d2                	xor    edx,edx
c001c1f7:	89 f0                	mov    eax,esi
c001c1f9:	f7 f1                	div    ecx
c001c1fb:	89 c3                	mov    ebx,eax
c001c1fd:	89 e8                	mov    eax,ebp
c001c1ff:	f7 f1                	div    ecx
c001c201:	89 da                	mov    edx,ebx
c001c203:	83 c4 1c             	add    esp,0x1c
c001c206:	5b                   	pop    ebx
c001c207:	5e                   	pop    esi
c001c208:	5f                   	pop    edi
c001c209:	5d                   	pop    ebp
c001c20a:	c3                   	ret    
c001c20b:	90                   	nop
c001c20c:	39 f2                	cmp    edx,esi
c001c20e:	77 1c                	ja     c001c22c <__udivdi3+0x7c>
c001c210:	0f bd da             	bsr    ebx,edx
c001c213:	83 f3 1f             	xor    ebx,0x1f
c001c216:	75 24                	jne    c001c23c <__udivdi3+0x8c>
c001c218:	39 f2                	cmp    edx,esi
c001c21a:	72 08                	jb     c001c224 <__udivdi3+0x74>
c001c21c:	39 ef                	cmp    edi,ebp
c001c21e:	0f 87 84 00 00 00    	ja     c001c2a8 <__udivdi3+0xf8>
c001c224:	b8 01 00 00 00       	mov    eax,0x1
c001c229:	eb ac                	jmp    c001c1d7 <__udivdi3+0x27>
c001c22b:	90                   	nop
c001c22c:	31 db                	xor    ebx,ebx
c001c22e:	31 c0                	xor    eax,eax
c001c230:	89 da                	mov    edx,ebx
c001c232:	83 c4 1c             	add    esp,0x1c
c001c235:	5b                   	pop    ebx
c001c236:	5e                   	pop    esi
c001c237:	5f                   	pop    edi
c001c238:	5d                   	pop    ebp
c001c239:	c3                   	ret    
c001c23a:	66 90                	xchg   ax,ax
c001c23c:	b8 20 00 00 00       	mov    eax,0x20
c001c241:	29 d8                	sub    eax,ebx
c001c243:	88 d9                	mov    cl,bl
c001c245:	d3 e2                	shl    edx,cl
c001c247:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c24b:	89 fa                	mov    edx,edi
c001c24d:	88 c1                	mov    cl,al
c001c24f:	d3 ea                	shr    edx,cl
c001c251:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c255:	09 d1                	or     ecx,edx
c001c257:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c25b:	88 d9                	mov    cl,bl
c001c25d:	d3 e7                	shl    edi,cl
c001c25f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c263:	89 f7                	mov    edi,esi
c001c265:	88 c1                	mov    cl,al
c001c267:	d3 ef                	shr    edi,cl
c001c269:	88 d9                	mov    cl,bl
c001c26b:	d3 e6                	shl    esi,cl
c001c26d:	89 ea                	mov    edx,ebp
c001c26f:	88 c1                	mov    cl,al
c001c271:	d3 ea                	shr    edx,cl
c001c273:	09 d6                	or     esi,edx
c001c275:	89 f0                	mov    eax,esi
c001c277:	89 fa                	mov    edx,edi
c001c279:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c27d:	89 d7                	mov    edi,edx
c001c27f:	89 c6                	mov    esi,eax
c001c281:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c285:	39 d7                	cmp    edi,edx
c001c287:	72 13                	jb     c001c29c <__udivdi3+0xec>
c001c289:	74 09                	je     c001c294 <__udivdi3+0xe4>
c001c28b:	89 f0                	mov    eax,esi
c001c28d:	31 db                	xor    ebx,ebx
c001c28f:	e9 43 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c294:	88 d9                	mov    cl,bl
c001c296:	d3 e5                	shl    ebp,cl
c001c298:	39 c5                	cmp    ebp,eax
c001c29a:	73 ef                	jae    c001c28b <__udivdi3+0xdb>
c001c29c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c29f:	31 db                	xor    ebx,ebx
c001c2a1:	e9 31 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	31 c0                	xor    eax,eax
c001c2aa:	e9 28 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c2af:	90                   	nop

c001c2b0 <__umoddi3>:
c001c2b0:	55                   	push   ebp
c001c2b1:	57                   	push   edi
c001c2b2:	56                   	push   esi
c001c2b3:	53                   	push   ebx
c001c2b4:	83 ec 1c             	sub    esp,0x1c
c001c2b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c2c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2c7:	89 da                	mov    edx,ebx
c001c2c9:	85 c0                	test   eax,eax
c001c2cb:	75 37                	jne    c001c304 <__umoddi3+0x54>
c001c2cd:	39 df                	cmp    edi,ebx
c001c2cf:	76 13                	jbe    c001c2e4 <__umoddi3+0x34>
c001c2d1:	89 f0                	mov    eax,esi
c001c2d3:	f7 f7                	div    edi
c001c2d5:	89 d0                	mov    eax,edx
c001c2d7:	31 d2                	xor    edx,edx
c001c2d9:	83 c4 1c             	add    esp,0x1c
c001c2dc:	5b                   	pop    ebx
c001c2dd:	5e                   	pop    esi
c001c2de:	5f                   	pop    edi
c001c2df:	5d                   	pop    ebp
c001c2e0:	c3                   	ret    
c001c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e4:	89 fd                	mov    ebp,edi
c001c2e6:	85 ff                	test   edi,edi
c001c2e8:	75 0b                	jne    c001c2f5 <__umoddi3+0x45>
c001c2ea:	b8 01 00 00 00       	mov    eax,0x1
c001c2ef:	31 d2                	xor    edx,edx
c001c2f1:	f7 f7                	div    edi
c001c2f3:	89 c5                	mov    ebp,eax
c001c2f5:	89 d8                	mov    eax,ebx
c001c2f7:	31 d2                	xor    edx,edx
c001c2f9:	f7 f5                	div    ebp
c001c2fb:	89 f0                	mov    eax,esi
c001c2fd:	f7 f5                	div    ebp
c001c2ff:	89 d0                	mov    eax,edx
c001c301:	eb d4                	jmp    c001c2d7 <__umoddi3+0x27>
c001c303:	90                   	nop
c001c304:	89 f1                	mov    ecx,esi
c001c306:	39 d8                	cmp    eax,ebx
c001c308:	76 0a                	jbe    c001c314 <__umoddi3+0x64>
c001c30a:	89 f0                	mov    eax,esi
c001c30c:	83 c4 1c             	add    esp,0x1c
c001c30f:	5b                   	pop    ebx
c001c310:	5e                   	pop    esi
c001c311:	5f                   	pop    edi
c001c312:	5d                   	pop    ebp
c001c313:	c3                   	ret    
c001c314:	0f bd e8             	bsr    ebp,eax
c001c317:	83 f5 1f             	xor    ebp,0x1f
c001c31a:	75 1c                	jne    c001c338 <__umoddi3+0x88>
c001c31c:	39 d8                	cmp    eax,ebx
c001c31e:	72 04                	jb     c001c324 <__umoddi3+0x74>
c001c320:	39 f7                	cmp    edi,esi
c001c322:	77 08                	ja     c001c32c <__umoddi3+0x7c>
c001c324:	89 da                	mov    edx,ebx
c001c326:	29 fe                	sub    esi,edi
c001c328:	19 c2                	sbb    edx,eax
c001c32a:	89 f1                	mov    ecx,esi
c001c32c:	89 c8                	mov    eax,ecx
c001c32e:	83 c4 1c             	add    esp,0x1c
c001c331:	5b                   	pop    ebx
c001c332:	5e                   	pop    esi
c001c333:	5f                   	pop    edi
c001c334:	5d                   	pop    ebp
c001c335:	c3                   	ret    
c001c336:	66 90                	xchg   ax,ax
c001c338:	ba 20 00 00 00       	mov    edx,0x20
c001c33d:	29 ea                	sub    edx,ebp
c001c33f:	89 e9                	mov    ecx,ebp
c001c341:	d3 e0                	shl    eax,cl
c001c343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c347:	89 f8                	mov    eax,edi
c001c349:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c34d:	88 d1                	mov    cl,dl
c001c34f:	d3 e8                	shr    eax,cl
c001c351:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c355:	09 c1                	or     ecx,eax
c001c357:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c35b:	89 e9                	mov    ecx,ebp
c001c35d:	d3 e7                	shl    edi,cl
c001c35f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c363:	89 d8                	mov    eax,ebx
c001c365:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c369:	88 d1                	mov    cl,dl
c001c36b:	d3 e8                	shr    eax,cl
c001c36d:	89 c7                	mov    edi,eax
c001c36f:	89 e9                	mov    ecx,ebp
c001c371:	d3 e3                	shl    ebx,cl
c001c373:	89 f0                	mov    eax,esi
c001c375:	88 d1                	mov    cl,dl
c001c377:	d3 e8                	shr    eax,cl
c001c379:	09 d8                	or     eax,ebx
c001c37b:	89 e9                	mov    ecx,ebp
c001c37d:	d3 e6                	shl    esi,cl
c001c37f:	89 f3                	mov    ebx,esi
c001c381:	89 fa                	mov    edx,edi
c001c383:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c387:	89 d1                	mov    ecx,edx
c001c389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c38d:	89 c6                	mov    esi,eax
c001c38f:	89 d7                	mov    edi,edx
c001c391:	39 d1                	cmp    ecx,edx
c001c393:	72 27                	jb     c001c3bc <__umoddi3+0x10c>
c001c395:	74 21                	je     c001c3b8 <__umoddi3+0x108>
c001c397:	89 ca                	mov    edx,ecx
c001c399:	29 f3                	sub    ebx,esi
c001c39b:	19 fa                	sbb    edx,edi
c001c39d:	89 d0                	mov    eax,edx
c001c39f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3a3:	d3 e0                	shl    eax,cl
c001c3a5:	89 e9                	mov    ecx,ebp
c001c3a7:	d3 eb                	shr    ebx,cl
c001c3a9:	09 d8                	or     eax,ebx
c001c3ab:	d3 ea                	shr    edx,cl
c001c3ad:	83 c4 1c             	add    esp,0x1c
c001c3b0:	5b                   	pop    ebx
c001c3b1:	5e                   	pop    esi
c001c3b2:	5f                   	pop    edi
c001c3b3:	5d                   	pop    ebp
c001c3b4:	c3                   	ret    
c001c3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3b8:	39 c3                	cmp    ebx,eax
c001c3ba:	73 db                	jae    c001c397 <__umoddi3+0xe7>
c001c3bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c3c4:	89 d7                	mov    edi,edx
c001c3c6:	89 c6                	mov    esi,eax
c001c3c8:	eb cd                	jmp    c001c397 <__umoddi3+0xe7>

Disassembly of section .init:

c001c3ca <_init>:
c001c3ca:	55                   	push   ebp
c001c3cb:	89 e5                	mov    ebp,esp
c001c3cd:	e8 46 3d fe ff       	call   c0000118 <frame_dummy>
c001c3d2:	e8 e5 fa ff ff       	call   c001bebc <__do_global_ctors_aux>
c001c3d7:	5d                   	pop    ebp
c001c3d8:	c3                   	ret    

Disassembly of section .fini:

c001c3d9 <_fini>:
c001c3d9:	55                   	push   ebp
c001c3da:	89 e5                	mov    ebp,esp
c001c3dc:	e8 c7 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c3e1:	5d                   	pop    ebp
c001c3e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c3e4 <Computer::~Computer()>:
c001c3e4:	83 ec 0c             	sub    esp,0xc
c001c3e7:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c001c3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f0:	89 10                	mov    DWORD PTR [eax],edx
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	50                   	push   eax
c001c3fa:	e8 2b fb fe ff       	call   c000bf2a <Device::~Device()>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	90                   	nop
c001c403:	83 c4 0c             	add    esp,0xc
c001c406:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c408 <Computer::~Computer()>:
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	83 ec 0c             	sub    esp,0xc
c001c40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c412:	e8 cd ff ff ff       	call   c001c3e4 <Computer::~Computer()>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	83 ec 08             	sub    esp,0x8
c001c41d:	68 70 01 00 00       	push   0x170
c001c422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c426:	e8 c7 e6 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	83 c4 0c             	add    esp,0xc
c001c431:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c432 <idleCommon()>:
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	fa                   	cli    
c001c436:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001c43c:	e8 fb 75 ff ff       	call   c0013a3c <schedule()>
c001c441:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001c446:	48                   	dec    eax
c001c447:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001c44c:	75 01                	jne    c001c44f <idleCommon()+0x1d>
c001c44e:	fb                   	sti    
c001c44f:	83 c4 0c             	add    esp,0xc
c001c452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c454 <LinkedList<UnixFile>::~LinkedList()>:
c001c454:	90                   	nop
c001c455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c456 <LinkedList<UnixFile>::LinkedList()>:
c001c456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c45a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c464:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c48f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c496:	90                   	nop
c001c497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4a0:	75 10                	jne    c001c4b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	68 34 d9 01 c0       	push   0xc001d934
c001c4aa:	e8 38 42 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b8:	85 c0                	test   eax,eax
c001c4ba:	74 34                	je     c001c4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	74 29                	je     c001c4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4ee:	eb 65                	jmp    c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f6:	85 c0                	test   eax,eax
c001c4f8:	75 4b                	jne    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c501:	85 c0                	test   eax,eax
c001c503:	75 40                	jne    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c50d:	89 10                	mov    DWORD PTR [eax],edx
c001c50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c521:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52f:	85 c0                	test   eax,eax
c001c531:	74 22                	je     c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c533:	83 ec 0c             	sub    esp,0xc
c001c536:	68 56 d9 01 c0       	push   0xc001d956
c001c53b:	e8 a7 41 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	eb 10                	jmp    c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	68 60 d9 01 c0       	push   0xc001d960
c001c54d:	e8 95 41 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c552:	83 c4 10             	add    esp,0x10
c001c555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c559:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55c:	8d 50 01             	lea    edx,[eax+0x1]
c001c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c563:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c566:	90                   	nop
c001c567:	83 c4 0c             	add    esp,0xc
c001c56a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c56c <LinkedList<UnixFile>::getFirstElement()>:
c001c56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c570:	8b 00                	mov    eax,DWORD PTR [eax]
c001c572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c574 <LinkedList<UnixFile>::removeFirst()>:
c001c574:	83 ec 0c             	sub    esp,0xc
c001c577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c57d:	85 c0                	test   eax,eax
c001c57f:	75 12                	jne    c001c593 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	68 6c d9 01 c0       	push   0xc001d96c
c001c589:	e8 59 41 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	eb 7e                	jmp    c001c611 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c597:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c59a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59d:	85 c0                	test   eax,eax
c001c59f:	74 10                	je     c001c5b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c5a9:	e8 39 41 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ba:	85 c0                	test   eax,eax
c001c5bc:	75 33                	jne    c001c5f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5da:	83 f8 01             	cmp    eax,0x1
c001c5dd:	74 21                	je     c001c600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5df:	83 ec 0c             	sub    esp,0xc
c001c5e2:	68 90 d9 01 c0       	push   0xc001d990
c001c5e7:	e8 fb 40 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	eb 0f                	jmp    c001c600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fe:	89 10                	mov    DWORD PTR [eax],edx
c001c600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c607:	8d 50 ff             	lea    edx,[eax-0x1]
c001c60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c616 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c61a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c61e <DriverlessDevice::~DriverlessDevice()>:
c001c61e:	ba fc df 01 c0       	mov    edx,0xc001dffc
c001c623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c627:	89 10                	mov    DWORD PTR [eax],edx
c001c629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62d:	50                   	push   eax
c001c62e:	e8 f7 f8 fe ff       	call   c000bf2a <Device::~Device()>
c001c633:	83 c4 04             	add    esp,0x4
c001c636:	90                   	nop
c001c637:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c638 <DriverlessDevice::~DriverlessDevice()>:
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	83 ec 0c             	sub    esp,0xc
c001c63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c642:	e8 d7 ff ff ff       	call   c001c61e <DriverlessDevice::~DriverlessDevice()>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	83 ec 08             	sub    esp,0x8
c001c64d:	68 58 01 00 00       	push   0x158
c001c652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c656:	e8 97 e4 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c65b:	83 c4 10             	add    esp,0x10
c001c65e:	83 c4 0c             	add    esp,0xc
c001c661:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c662 <LinkedList<Device>::addElement(Device*)>:
c001c662:	83 ec 0c             	sub    esp,0xc
c001c665:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c66a:	75 10                	jne    c001c67c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c66c:	83 ec 0c             	sub    esp,0xc
c001c66f:	68 34 d9 01 c0       	push   0xc001d934
c001c674:	e8 6e 40 ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c680:	8b 00                	mov    eax,DWORD PTR [eax]
c001c682:	85 c0                	test   eax,eax
c001c684:	74 3a                	je     c001c6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c68d:	85 c0                	test   eax,eax
c001c68f:	74 2f                	je     c001c6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c695:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c69c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6be:	eb 68                	jmp    c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6c6:	85 c0                	test   eax,eax
c001c6c8:	75 4e                	jne    c001c718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d1:	85 c0                	test   eax,eax
c001c6d3:	75 43                	jne    c001c718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6dd:	89 10                	mov    DWORD PTR [eax],edx
c001c6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c702:	85 c0                	test   eax,eax
c001c704:	74 22                	je     c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	68 56 d9 01 c0       	push   0xc001d956
c001c70e:	e8 d4 3f ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	eb 10                	jmp    c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	68 60 d9 01 c0       	push   0xc001d960
c001c720:	e8 c2 3f ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c72f:	8d 50 01             	lea    edx,[eax+0x1]
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c739:	90                   	nop
c001c73a:	83 c4 0c             	add    esp,0xc
c001c73d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c73e <LinkedList<Device>::LinkedList()>:
c001c73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c74c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c757:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c77e:	90                   	nop
c001c77f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c784:	8b 00                	mov    eax,DWORD PTR [eax]
c001c786:	85 c0                	test   eax,eax
c001c788:	75 0e                	jne    c001c798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c791:	85 c0                	test   eax,eax
c001c793:	75 03                	jne    c001c798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c795:	b0 01                	mov    al,0x1
c001c797:	c3                   	ret    
c001c798:	b0 00                	mov    al,0x0
c001c79a:	90                   	nop
c001c79b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ad:	85 c0                	test   eax,eax
c001c7af:	75 17                	jne    c001c7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7b1:	83 ec 0c             	sub    esp,0xc
c001c7b4:	68 6c d9 01 c0       	push   0xc001d96c
c001c7b9:	e8 29 3f ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c7be:	83 c4 10             	add    esp,0x10
c001c7c1:	e9 92 00 00 00       	jmp    c001c858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7d2:	85 c0                	test   eax,eax
c001c7d4:	0f 95 c0             	setne  al
c001c7d7:	84 c0                	test   al,al
c001c7d9:	74 11                	je     c001c7ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c7db:	83 ec 0c             	sub    esp,0xc
c001c7de:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c7e3:	e8 ff 3e ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	90                   	nop
c001c7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	0f 94 c0             	sete   al
c001c7fa:	84 c0                	test   al,al
c001c7fc:	74 36                	je     c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c802:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c817:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c81a:	83 f8 01             	cmp    eax,0x1
c001c81d:	74 25                	je     c001c844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	68 90 d9 01 c0       	push   0xc001d990
c001c827:	e8 bb 3e ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c82c:	83 c4 10             	add    esp,0x10
c001c82f:	eb 13                	jmp    c001c844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c831:	8d 76 00             	lea    esi,[esi+0x0]
c001c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c838:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	89 10                	mov    DWORD PTR [eax],edx
c001c843:	90                   	nop
c001c844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c848:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c84b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	83 c4 0c             	add    esp,0xc
c001c85b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c864:	75 12                	jne    c001c878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c866:	83 ec 0c             	sub    esp,0xc
c001c869:	68 34 d9 01 c0       	push   0xc001d934
c001c86e:	e8 74 3e ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	66 90                	xchg   ax,ax
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c87e:	85 c0                	test   eax,eax
c001c880:	74 36                	je     c001c8b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c889:	85 c0                	test   eax,eax
c001c88b:	74 2b                	je     c001c8b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c894:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c898:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8b4:	eb 6a                	jmp    c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8b6:	66 90                	xchg   ax,ax
c001c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8be:	85 c0                	test   eax,eax
c001c8c0:	75 4e                	jne    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	75 43                	jne    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8d5:	89 10                	mov    DWORD PTR [eax],edx
c001c8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8f7:	85 c0                	test   eax,eax
c001c8f9:	74 25                	je     c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8fb:	83 ec 0c             	sub    esp,0xc
c001c8fe:	68 56 d9 01 c0       	push   0xc001d956
c001c903:	e8 df 3d ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c908:	83 c4 10             	add    esp,0x10
c001c90b:	eb 13                	jmp    c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c90d:	8d 76 00             	lea    esi,[esi+0x0]
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	68 60 d9 01 c0       	push   0xc001d960
c001c918:	e8 ca 3d ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c927:	8d 50 01             	lea    edx,[eax+0x1]
c001c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c931:	90                   	nop
c001c932:	83 c4 0c             	add    esp,0xc
c001c935:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c938 <ACPI::~ACPI()>:
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	89 10                	mov    DWORD PTR [eax],edx
c001c946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94a:	83 ec 0c             	sub    esp,0xc
c001c94d:	50                   	push   eax
c001c94e:	e8 d7 f5 fe ff       	call   c000bf2a <Device::~Device()>
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	90                   	nop
c001c957:	83 c4 0c             	add    esp,0xc
c001c95a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c95c <ACPI::~ACPI()>:
c001c95c:	83 ec 0c             	sub    esp,0xc
c001c95f:	83 ec 0c             	sub    esp,0xc
c001c962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c966:	e8 cd ff ff ff       	call   c001c938 <ACPI::~ACPI()>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	83 ec 08             	sub    esp,0x8
c001c971:	68 64 12 00 00       	push   0x1264
c001c976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c97a:	e8 73 e1 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c97f:	83 c4 10             	add    esp,0x10
c001c982:	83 c4 0c             	add    esp,0xc
c001c985:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c988 <LinkedList<Device>::~LinkedList()>:
c001c988:	90                   	nop
c001c989:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c98c <LinkedList<Device>::isEmpty()>:
c001c98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	85 c0                	test   eax,eax
c001c994:	75 0e                	jne    c001c9a4 <LinkedList<Device>::isEmpty()+0x18>
c001c996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	75 03                	jne    c001c9a4 <LinkedList<Device>::isEmpty()+0x18>
c001c9a1:	b0 01                	mov    al,0x1
c001c9a3:	c3                   	ret    
c001c9a4:	b0 00                	mov    al,0x0
c001c9a6:	90                   	nop
c001c9a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9a8 <LinkedList<Device>::getFirstElement()>:
c001c9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9b0 <LinkedList<Device>::removeFirst()>:
c001c9b0:	83 ec 0c             	sub    esp,0xc
c001c9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9b9:	85 c0                	test   eax,eax
c001c9bb:	75 17                	jne    c001c9d4 <LinkedList<Device>::removeFirst()+0x24>
c001c9bd:	83 ec 0c             	sub    esp,0xc
c001c9c0:	68 6c d9 01 c0       	push   0xc001d96c
c001c9c5:	e8 1d 3d ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	e9 92 00 00 00       	jmp    c001ca64 <LinkedList<Device>::removeFirst()+0xb4>
c001c9d2:	66 90                	xchg   ax,ax
c001c9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9e1:	85 c0                	test   eax,eax
c001c9e3:	74 13                	je     c001c9f8 <LinkedList<Device>::removeFirst()+0x48>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c9ed:	e8 f5 3c ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001c9f2:	83 c4 10             	add    esp,0x10
c001c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca04:	85 c0                	test   eax,eax
c001ca06:	75 34                	jne    c001ca3c <LinkedList<Device>::removeFirst()+0x8c>
c001ca08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca24:	83 f8 01             	cmp    eax,0x1
c001ca27:	74 27                	je     c001ca50 <LinkedList<Device>::removeFirst()+0xa0>
c001ca29:	83 ec 0c             	sub    esp,0xc
c001ca2c:	68 90 d9 01 c0       	push   0xc001d990
c001ca31:	e8 b1 3c ff ff       	call   c00106e7 <Krnl::panic(char const*)>
c001ca36:	83 c4 10             	add    esp,0x10
c001ca39:	eb 15                	jmp    c001ca50 <LinkedList<Device>::removeFirst()+0xa0>
c001ca3b:	90                   	nop
c001ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca42:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4c:	89 10                	mov    DWORD PTR [eax],edx
c001ca4e:	66 90                	xchg   ax,ax
c001ca50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca57:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca61:	8d 76 00             	lea    esi,[esi+0x0]
c001ca64:	83 c4 0c             	add    esp,0xc
c001ca67:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca68 <CPU::~CPU()>:
c001ca68:	83 ec 0c             	sub    esp,0xc
c001ca6b:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c001ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca74:	89 10                	mov    DWORD PTR [eax],edx
c001ca76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7a:	83 ec 0c             	sub    esp,0xc
c001ca7d:	50                   	push   eax
c001ca7e:	e8 a7 f4 fe ff       	call   c000bf2a <Device::~Device()>
c001ca83:	83 c4 10             	add    esp,0x10
c001ca86:	90                   	nop
c001ca87:	83 c4 0c             	add    esp,0xc
c001ca8a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca8c <CPU::~CPU()>:
c001ca8c:	83 ec 0c             	sub    esp,0xc
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca96:	e8 cd ff ff ff       	call   c001ca68 <CPU::~CPU()>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 ec 08             	sub    esp,0x8
c001caa1:	68 94 11 00 00       	push   0x1194
c001caa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caaa:	e8 43 e0 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001caaf:	83 c4 10             	add    esp,0x10
c001cab2:	83 c4 0c             	add    esp,0xc
c001cab5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cab8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cab8:	90                   	nop
c001cab9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cabc <ThreadControlBlock::ThreadControlBlock()>:
c001cabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cacb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001caf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb03:	90                   	nop
c001cb04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb48:	90                   	nop
c001cb49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb53:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb54 <PCI::~PCI()>:
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c001cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb60:	89 10                	mov    DWORD PTR [eax],edx
c001cb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	50                   	push   eax
c001cb6a:	e8 45 ee fe ff       	call   c000b9b4 <Bus::~Bus()>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	90                   	nop
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb78 <PCI::~PCI()>:
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	83 ec 0c             	sub    esp,0xc
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 cd ff ff ff       	call   c001cb54 <PCI::~PCI()>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 ec 08             	sub    esp,0x8
c001cb8d:	68 5c 01 00 00       	push   0x15c
c001cb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb96:	e8 57 df fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	83 c4 0c             	add    esp,0xc
c001cba1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cba2 <IDE::~IDE()>:
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c001cbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbae:	89 10                	mov    DWORD PTR [eax],edx
c001cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	50                   	push   eax
c001cbb8:	e8 e7 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	90                   	nop
c001cbc1:	83 c4 0c             	add    esp,0xc
c001cbc4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cbc6 <IDE::~IDE()>:
c001cbc6:	83 ec 0c             	sub    esp,0xc
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd0:	e8 cd ff ff ff       	call   c001cba2 <IDE::~IDE()>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	83 ec 08             	sub    esp,0x8
c001cbdb:	68 70 02 00 00       	push   0x270
c001cbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe4:	e8 09 df fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	83 c4 0c             	add    esp,0xc
c001cbef:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cbf0 <SATABus::~SATABus()>:
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c001cbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfc:	89 10                	mov    DWORD PTR [eax],edx
c001cbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	50                   	push   eax
c001cc06:	e8 99 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	90                   	nop
c001cc0f:	83 c4 0c             	add    esp,0xc
c001cc12:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc14 <SATABus::~SATABus()>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1e:	e8 cd ff ff ff       	call   c001cbf0 <SATABus::~SATABus()>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	83 ec 08             	sub    esp,0x8
c001cc29:	68 64 01 00 00       	push   0x164
c001cc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc32:	e8 bb de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	83 c4 0c             	add    esp,0xc
c001cc3d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc3e <ATA::~ATA()>:
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c001cc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4a:	89 10                	mov    DWORD PTR [eax],edx
c001cc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	50                   	push   eax
c001cc54:	e8 2d f8 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	90                   	nop
c001cc5d:	83 c4 0c             	add    esp,0xc
c001cc60:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc62 <ATA::~ATA()>:
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	83 ec 0c             	sub    esp,0xc
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	e8 cd ff ff ff       	call   c001cc3e <ATA::~ATA()>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 ec 08             	sub    esp,0x8
c001cc77:	68 7c 01 00 00       	push   0x17c
c001cc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc80:	e8 6d de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	83 c4 0c             	add    esp,0xc
c001cc8b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc8c <ATAPI::~ATAPI()>:
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001cc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc98:	89 10                	mov    DWORD PTR [eax],edx
c001cc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	50                   	push   eax
c001cca2:	e8 df f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	90                   	nop
c001ccab:	83 c4 0c             	add    esp,0xc
c001ccae:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ccb0 <ATAPI::~ATAPI()>:
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 cd ff ff ff       	call   c001cc8c <ATAPI::~ATAPI()>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 ec 08             	sub    esp,0x8
c001ccc5:	68 84 01 00 00       	push   0x184
c001ccca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccce:	e8 1f de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ccda <SATA::~SATA()>:
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	89 10                	mov    DWORD PTR [eax],edx
c001cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	50                   	push   eax
c001ccf0:	e8 91 f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	90                   	nop
c001ccf9:	83 c4 0c             	add    esp,0xc
c001ccfc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ccfe <SATA::~SATA()>:
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 cd ff ff ff       	call   c001ccda <SATA::~SATA()>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 ec 08             	sub    esp,0x8
c001cd13:	68 7c 01 00 00       	push   0x17c
c001cd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1c:	e8 d1 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	83 c4 0c             	add    esp,0xc
c001cd27:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd28 <SATAPI::~SATAPI()>:
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd34:	89 10                	mov    DWORD PTR [eax],edx
c001cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	50                   	push   eax
c001cd3e:	e8 43 f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	90                   	nop
c001cd47:	83 c4 0c             	add    esp,0xc
c001cd4a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd4c <SATAPI::~SATAPI()>:
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd56:	e8 cd ff ff ff       	call   c001cd28 <SATAPI::~SATAPI()>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	83 ec 08             	sub    esp,0x8
c001cd61:	68 84 01 00 00       	push   0x184
c001cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd6a:	e8 83 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	83 c4 0c             	add    esp,0xc
c001cd75:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd76 <IOAPIC::~IOAPIC()>:
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001cd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd82:	89 10                	mov    DWORD PTR [eax],edx
c001cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	50                   	push   eax
c001cd8c:	e8 99 f1 fe ff       	call   c000bf2a <Device::~Device()>
c001cd91:	83 c4 10             	add    esp,0x10
c001cd94:	90                   	nop
c001cd95:	83 c4 0c             	add    esp,0xc
c001cd98:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd9a <IOAPIC::~IOAPIC()>:
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda4:	e8 cd ff ff ff       	call   c001cd76 <IOAPIC::~IOAPIC()>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	83 ec 08             	sub    esp,0x8
c001cdaf:	68 68 01 00 00       	push   0x168
c001cdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb8:	e8 35 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cdbd:	83 c4 10             	add    esp,0x10
c001cdc0:	83 c4 0c             	add    esp,0xc
c001cdc3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cdc4 <APICTimer::~APICTimer()>:
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd0:	89 10                	mov    DWORD PTR [eax],edx
c001cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	50                   	push   eax
c001cdda:	e8 49 0a ff ff       	call   c000d828 <Timer::~Timer()>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	90                   	nop
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cde8 <APICTimer::~APICTimer()>:
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	83 ec 0c             	sub    esp,0xc
c001cdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf2:	e8 cd ff ff ff       	call   c001cdc4 <APICTimer::~APICTimer()>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	83 ec 08             	sub    esp,0x8
c001cdfd:	68 60 01 00 00       	push   0x160
c001ce02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce06:	e8 e7 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	83 c4 0c             	add    esp,0xc
c001ce11:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce14 <PIT::~PIT()>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce20:	89 10                	mov    DWORD PTR [eax],edx
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	50                   	push   eax
c001ce2a:	e8 f9 09 ff ff       	call   c000d828 <Timer::~Timer()>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	90                   	nop
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce38 <PIT::~PIT()>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	83 ec 0c             	sub    esp,0xc
c001ce3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce42:	e8 cd ff ff ff       	call   c001ce14 <PIT::~PIT()>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 ec 08             	sub    esp,0x8
c001ce4d:	68 5c 01 00 00       	push   0x15c
c001ce52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce56:	e8 97 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 c4 0c             	add    esp,0xc
c001ce61:	c3                   	ret    
