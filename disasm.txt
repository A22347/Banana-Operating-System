
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 78 00 00       	call   c00078d5 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 1d 02 c0       	mov    eax,0xc0021da8
c0000025:	3d a8 1d 02 c0       	cmp    eax,0xc0021da8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 1d 02 c0       	push   0xc0021da8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 1d 02 c0       	mov    eax,0xc0021da8
c0000051:	2d a8 1d 02 c0       	sub    eax,0xc0021da8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 1d 02 c0       	push   0xc0021da8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 88 ec 01 c0       	mov    ebx,0xc001ec88
c0000097:	81 eb 84 ec 01 c0    	sub    ebx,0xc001ec84
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 84 ec 01 c0       	mov    esi,0xc001ec84
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 1d 02 c0       	push   0xc0021da8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 a8 1d 02 c0       	push   0xc0021da8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 93 42 01 00       	call   c0014540 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 67 a1 00 00       	call   c000a42c <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 71 42 01 00       	call   c0014540 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5a 47 01 00       	call   c0014a48 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 95 4d 01 00       	call   c001508c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 29 01 01 00       	jmp    c00104a8 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1d                	je     c00003af <memcmp+0x2f>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 cb                	cmp    bl,cl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 d9                	cmp    cl,bl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	40                   	inc    eax
c00003aa:	42                   	inc    edx
c00003ab:	39 f0                	cmp    eax,esi
c00003ad:	75 f1                	jne    c00003a0 <memcmp+0x20>
c00003af:	31 c0                	xor    eax,eax
c00003b1:	5b                   	pop    ebx
c00003b2:	5e                   	pop    esi
c00003b3:	c3                   	ret    
c00003b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	89 e5                	mov    ebp,esp
c00003d3:	57                   	push   edi
c00003d4:	56                   	push   esi
c00003d5:	53                   	push   ebx
c00003d6:	83 e4 e0             	and    esp,0xffffffe0
c00003d9:	83 ec 20             	sub    esp,0x20
c00003dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003df:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00003e2:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
c00003e5:	0f 83 95 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003eb:	85 c9                	test   ecx,ecx
c00003ed:	74 7f                	je     c000046e <memmove+0x9e>
c00003ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00003f2:	8d 58 20             	lea    ebx,[eax+0x20]
c00003f5:	39 da                	cmp    edx,ebx
c00003f7:	8d 5a 20             	lea    ebx,[edx+0x20]
c00003fa:	0f 93 c0             	setae  al
c00003fd:	39 5d 08             	cmp    DWORD PTR [ebp+0x8],ebx
c0000400:	0f 93 c3             	setae  bl
c0000403:	08 d8                	or     al,bl
c0000405:	0f 84 25 01 00 00    	je     c0000530 <memmove+0x160>
c000040b:	8d 59 ff             	lea    ebx,[ecx-0x1]
c000040e:	83 fb 1e             	cmp    ebx,0x1e
c0000411:	0f 86 19 01 00 00    	jbe    c0000530 <memmove+0x160>
c0000417:	89 cf                	mov    edi,ecx
c0000419:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000041c:	89 d3                	mov    ebx,edx
c000041e:	83 e7 e0             	and    edi,0xffffffe0
c0000421:	01 d7                	add    edi,edx
c0000423:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000430:	c5 fe 6f 03          	vmovdqu ymm0,YMMWORD PTR [ebx]
c0000434:	83 c3 20             	add    ebx,0x20
c0000437:	83 c6 20             	add    esi,0x20
c000043a:	c5 fe 7f 46 e0       	vmovdqu YMMWORD PTR [esi-0x20],ymm0
c000043f:	39 df                	cmp    edi,ebx
c0000441:	75 ed                	jne    c0000430 <memmove+0x60>
c0000443:	89 ce                	mov    esi,ecx
c0000445:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000448:	83 e6 e0             	and    esi,0xffffffe0
c000044b:	01 f3                	add    ebx,esi
c000044d:	01 f2                	add    edx,esi
c000044f:	39 f1                	cmp    ecx,esi
c0000451:	74 18                	je     c000046b <memmove+0x9b>
c0000453:	03 4d 08             	add    ecx,DWORD PTR [ebp+0x8]
c0000456:	8d 76 00             	lea    esi,[esi+0x0]
c0000459:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000460:	8a 02                	mov    al,BYTE PTR [edx]
c0000462:	43                   	inc    ebx
c0000463:	42                   	inc    edx
c0000464:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000467:	39 d9                	cmp    ecx,ebx
c0000469:	75 f5                	jne    c0000460 <memmove+0x90>
c000046b:	c5 f8 77             	vzeroupper 
c000046e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000471:	8d 65 f4             	lea    esp,[ebp-0xc]
c0000474:	5b                   	pop    ebx
c0000475:	5e                   	pop    esi
c0000476:	5f                   	pop    edi
c0000477:	5d                   	pop    ebp
c0000478:	c3                   	ret    
c0000479:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000480:	76 ec                	jbe    c000046e <memmove+0x9e>
c0000482:	8d 71 ff             	lea    esi,[ecx-0x1]
c0000485:	85 c9                	test   ecx,ecx
c0000487:	74 e5                	je     c000046e <memmove+0x9e>
c0000489:	8d 79 e0             	lea    edi,[ecx-0x20]
c000048c:	8d 04 3a             	lea    eax,[edx+edi*1]
c000048f:	03 7d 08             	add    edi,DWORD PTR [ebp+0x8]
c0000492:	89 fb                	mov    ebx,edi
c0000494:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0000498:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000049b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000049f:	01 cf                	add    edi,ecx
c00004a1:	39 f8                	cmp    eax,edi
c00004a3:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c00004a6:	0f 93 44 24 1f       	setae  BYTE PTR [esp+0x1f]
c00004ab:	39 fb                	cmp    ebx,edi
c00004ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00004b1:	0f 93 c3             	setae  bl
c00004b4:	08 c3                	or     bl,al
c00004b6:	0f 84 94 00 00 00    	je     c0000550 <memmove+0x180>
c00004bc:	83 fe 1e             	cmp    esi,0x1e
c00004bf:	0f 86 8b 00 00 00    	jbe    c0000550 <memmove+0x180>
c00004c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00004c9:	89 cf                	mov    edi,ecx
c00004cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00004cf:	83 e7 e0             	and    edi,0xffffffe0
c00004d2:	89 d8                	mov    eax,ebx
c00004d4:	29 f8                	sub    eax,edi
c00004d6:	89 c7                	mov    edi,eax
c00004d8:	90                   	nop
c00004d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004e0:	c5 fe 6f 0b          	vmovdqu ymm1,YMMWORD PTR [ebx]
c00004e4:	83 eb 20             	sub    ebx,0x20
c00004e7:	83 ee 20             	sub    esi,0x20
c00004ea:	c5 fe 7f 4e 20       	vmovdqu YMMWORD PTR [esi+0x20],ymm1
c00004ef:	39 fb                	cmp    ebx,edi
c00004f1:	75 ed                	jne    c00004e0 <memmove+0x110>
c00004f3:	89 ce                	mov    esi,ecx
c00004f5:	89 cb                	mov    ebx,ecx
c00004f7:	83 e6 e0             	and    esi,0xffffffe0
c00004fa:	29 f3                	sub    ebx,esi
c00004fc:	39 f1                	cmp    ecx,esi
c00004fe:	0f 84 67 ff ff ff    	je     c000046b <memmove+0x9b>
c0000504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000507:	8d 7a ff             	lea    edi,[edx-0x1]
c000050a:	8d 50 ff             	lea    edx,[eax-0x1]
c000050d:	8d 76 00             	lea    esi,[esi+0x0]
c0000510:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0000513:	88 04 1a             	mov    BYTE PTR [edx+ebx*1],al
c0000516:	4b                   	dec    ebx
c0000517:	75 f7                	jne    c0000510 <memmove+0x140>
c0000519:	c5 f8 77             	vzeroupper 
c000051c:	e9 4d ff ff ff       	jmp    c000046e <memmove+0x9e>
c0000521:	eb 0d                	jmp    c0000530 <memmove+0x160>
c0000523:	90                   	nop
c0000524:	90                   	nop
c0000525:	90                   	nop
c0000526:	90                   	nop
c0000527:	90                   	nop
c0000528:	90                   	nop
c0000529:	90                   	nop
c000052a:	90                   	nop
c000052b:	90                   	nop
c000052c:	90                   	nop
c000052d:	90                   	nop
c000052e:	90                   	nop
c000052f:	90                   	nop
c0000530:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000533:	01 d1                	add    ecx,edx
c0000535:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000539:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000540:	8a 02                	mov    al,BYTE PTR [edx]
c0000542:	42                   	inc    edx
c0000543:	43                   	inc    ebx
c0000544:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000547:	39 ca                	cmp    edx,ecx
c0000549:	75 f5                	jne    c0000540 <memmove+0x170>
c000054b:	e9 1e ff ff ff       	jmp    c000046e <memmove+0x9e>
c0000550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000553:	8d 7a ff             	lea    edi,[edx-0x1]
c0000556:	8d 50 ff             	lea    edx,[eax-0x1]
c0000559:	eb 06                	jmp    c0000561 <memmove+0x191>
c000055b:	90                   	nop
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000560:	4e                   	dec    esi
c0000561:	8a 04 0f             	mov    al,BYTE PTR [edi+ecx*1]
c0000564:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0000567:	89 f1                	mov    ecx,esi
c0000569:	85 f6                	test   esi,esi
c000056b:	75 f3                	jne    c0000560 <memmove+0x190>
c000056d:	e9 fc fe ff ff       	jmp    c000046e <memmove+0x9e>
c0000572:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000579:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000580 <memset>:
c0000580:	53                   	push   ebx
c0000581:	83 ec 08             	sub    esp,0x8
c0000584:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000058c:	85 c0                	test   eax,eax
c000058e:	74 13                	je     c00005a3 <memset+0x23>
c0000590:	83 ec 04             	sub    esp,0x4
c0000593:	50                   	push   eax
c0000594:	0f be 44 24 1c       	movsx  eax,BYTE PTR [esp+0x1c]
c0000599:	50                   	push   eax
c000059a:	53                   	push   ebx
c000059b:	e8 e0 ff ff ff       	call   c0000580 <memset>
c00005a0:	83 c4 10             	add    esp,0x10
c00005a3:	83 c4 08             	add    esp,0x8
c00005a6:	89 d8                	mov    eax,ebx
c00005a8:	5b                   	pop    ebx
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strlen>:
c00005b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00005b4:	31 c0                	xor    eax,eax
c00005b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00005b9:	74 15                	je     c00005d0 <strlen+0x20>
c00005bb:	90                   	nop
c00005bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005c0:	40                   	inc    eax
c00005c1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00005c5:	75 f9                	jne    c00005c0 <strlen+0x10>
c00005c7:	c3                   	ret    
c00005c8:	90                   	nop
c00005c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00005d0:	c3                   	ret    
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop

c00005e0 <strpbrk>:
c00005e0:	57                   	push   edi
c00005e1:	56                   	push   esi
c00005e2:	53                   	push   ebx
c00005e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005eb:	8a 18                	mov    bl,BYTE PTR [eax]
c00005ed:	84 db                	test   bl,bl
c00005ef:	74 31                	je     c0000622 <strpbrk+0x42>
c00005f1:	0f b6 37             	movzx  esi,BYTE PTR [edi]
c00005f4:	89 f2                	mov    edx,esi
c00005f6:	84 d2                	test   dl,dl
c00005f8:	74 21                	je     c000061b <strpbrk+0x3b>
c00005fa:	38 da                	cmp    dl,bl
c00005fc:	74 26                	je     c0000624 <strpbrk+0x44>
c00005fe:	89 fa                	mov    edx,edi
c0000600:	eb 12                	jmp    c0000614 <strpbrk+0x34>
c0000602:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000609:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000610:	38 d9                	cmp    cl,bl
c0000612:	74 10                	je     c0000624 <strpbrk+0x44>
c0000614:	42                   	inc    edx
c0000615:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000617:	84 c9                	test   cl,cl
c0000619:	75 f5                	jne    c0000610 <strpbrk+0x30>
c000061b:	40                   	inc    eax
c000061c:	8a 18                	mov    bl,BYTE PTR [eax]
c000061e:	84 db                	test   bl,bl
c0000620:	75 d2                	jne    c00005f4 <strpbrk+0x14>
c0000622:	31 c0                	xor    eax,eax
c0000624:	5b                   	pop    ebx
c0000625:	5e                   	pop    esi
c0000626:	5f                   	pop    edi
c0000627:	c3                   	ret    
c0000628:	90                   	nop
c0000629:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000630 <strtok>:
c0000630:	56                   	push   esi
c0000631:	53                   	push   ebx
c0000632:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000636:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000063a:	85 db                	test   ebx,ebx
c000063c:	75 07                	jne    c0000645 <strtok+0x15>
c000063e:	eb 30                	jmp    c0000670 <strtok+0x40>
c0000640:	43                   	inc    ebx
c0000641:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000645:	56                   	push   esi
c0000646:	53                   	push   ebx
c0000647:	e8 94 ff ff ff       	call   c00005e0 <strpbrk>
c000064c:	5a                   	pop    edx
c000064d:	59                   	pop    ecx
c000064e:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c0000653:	39 d8                	cmp    eax,ebx
c0000655:	74 e9                	je     c0000640 <strtok+0x10>
c0000657:	85 c0                	test   eax,eax
c0000659:	74 1f                	je     c000067a <strtok+0x4a>
c000065b:	8d 50 01             	lea    edx,[eax+0x1]
c000065e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000661:	89 d8                	mov    eax,ebx
c0000663:	5b                   	pop    ebx
c0000664:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c000066a:	5e                   	pop    esi
c000066b:	c3                   	ret    
c000066c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000670:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c0000676:	85 db                	test   ebx,ebx
c0000678:	75 cb                	jne    c0000645 <strtok+0x15>
c000067a:	31 c0                	xor    eax,eax
c000067c:	5b                   	pop    ebx
c000067d:	5e                   	pop    esi
c000067e:	c3                   	ret    
c000067f:	90                   	nop

c0000680 <strcpy>:
c0000680:	53                   	push   ebx
c0000681:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000689:	8a 11                	mov    dl,BYTE PTR [ecx]
c000068b:	89 c3                	mov    ebx,eax
c000068d:	84 d2                	test   dl,dl
c000068f:	74 19                	je     c00006aa <strcpy+0x2a>
c0000691:	eb 0d                	jmp    c00006a0 <strcpy+0x20>
c0000693:	90                   	nop
c0000694:	90                   	nop
c0000695:	90                   	nop
c0000696:	90                   	nop
c0000697:	90                   	nop
c0000698:	90                   	nop
c0000699:	90                   	nop
c000069a:	90                   	nop
c000069b:	90                   	nop
c000069c:	90                   	nop
c000069d:	90                   	nop
c000069e:	90                   	nop
c000069f:	90                   	nop
c00006a0:	41                   	inc    ecx
c00006a1:	88 13                	mov    BYTE PTR [ebx],dl
c00006a3:	43                   	inc    ebx
c00006a4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00006a6:	84 d2                	test   dl,dl
c00006a8:	75 f6                	jne    c00006a0 <strcpy+0x20>
c00006aa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006ad:	5b                   	pop    ebx
c00006ae:	c3                   	ret    
c00006af:	90                   	nop

c00006b0 <strncpy>:
c00006b0:	55                   	push   ebp
c00006b1:	57                   	push   edi
c00006b2:	56                   	push   esi
c00006b3:	53                   	push   ebx
c00006b4:	83 ec 0c             	sub    esp,0xc
c00006b7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00006bb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00006bf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00006c3:	85 c9                	test   ecx,ecx
c00006c5:	74 4a                	je     c0000711 <strncpy+0x61>
c00006c7:	0f b6 7d 00          	movzx  edi,BYTE PTR [ebp+0x0]
c00006cb:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ce:	8d 56 01             	lea    edx,[esi+0x1]
c00006d1:	89 fb                	mov    ebx,edi
c00006d3:	88 1e                	mov    BYTE PTR [esi],bl
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 47                	je     c0000720 <strncpy+0x70>
c00006d9:	85 c0                	test   eax,eax
c00006db:	74 34                	je     c0000711 <strncpy+0x61>
c00006dd:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006e0:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006e3:	8d 56 02             	lea    edx,[esi+0x2]
c00006e6:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006e9:	88 5e 01             	mov    BYTE PTR [esi+0x1],bl
c00006ec:	84 db                	test   bl,bl
c00006ee:	75 1d                	jne    c000070d <strncpy+0x5d>
c00006f0:	eb 2e                	jmp    c0000720 <strncpy+0x70>
c00006f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000700:	41                   	inc    ecx
c0000701:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000704:	42                   	inc    edx
c0000705:	48                   	dec    eax
c0000706:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000709:	84 db                	test   bl,bl
c000070b:	74 13                	je     c0000720 <strncpy+0x70>
c000070d:	85 c0                	test   eax,eax
c000070f:	75 ef                	jne    c0000700 <strncpy+0x50>
c0000711:	83 c4 0c             	add    esp,0xc
c0000714:	89 f0                	mov    eax,esi
c0000716:	5b                   	pop    ebx
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000720:	85 c0                	test   eax,eax
c0000722:	74 ed                	je     c0000711 <strncpy+0x61>
c0000724:	83 ec 04             	sub    esp,0x4
c0000727:	50                   	push   eax
c0000728:	6a 00                	push   0x0
c000072a:	52                   	push   edx
c000072b:	e8 50 fe ff ff       	call   c0000580 <memset>
c0000730:	83 c4 10             	add    esp,0x10
c0000733:	89 f0                	mov    eax,esi
c0000735:	83 c4 0c             	add    esp,0xc
c0000738:	5b                   	pop    ebx
c0000739:	5e                   	pop    esi
c000073a:	5f                   	pop    edi
c000073b:	5d                   	pop    ebp
c000073c:	c3                   	ret    
c000073d:	8d 76 00             	lea    esi,[esi+0x0]

c0000740 <strcmp>:
c0000740:	56                   	push   esi
c0000741:	53                   	push   ebx
c0000742:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000074a:	8a 16                	mov    dl,BYTE PTR [esi]
c000074c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000074f:	38 d1                	cmp    cl,dl
c0000751:	75 1d                	jne    c0000770 <strcmp+0x30>
c0000753:	84 c9                	test   cl,cl
c0000755:	74 29                	je     c0000780 <strcmp+0x40>
c0000757:	b8 01 00 00 00       	mov    eax,0x1
c000075c:	eb 07                	jmp    c0000765 <strcmp+0x25>
c000075e:	66 90                	xchg   ax,ax
c0000760:	40                   	inc    eax
c0000761:	84 d2                	test   dl,dl
c0000763:	74 1b                	je     c0000780 <strcmp+0x40>
c0000765:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000768:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000076c:	38 ca                	cmp    dl,cl
c000076e:	74 f0                	je     c0000760 <strcmp+0x20>
c0000770:	0f b6 c2             	movzx  eax,dl
c0000773:	5b                   	pop    ebx
c0000774:	5e                   	pop    esi
c0000775:	29 c8                	sub    eax,ecx
c0000777:	c3                   	ret    
c0000778:	90                   	nop
c0000779:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000780:	31 c0                	xor    eax,eax
c0000782:	5b                   	pop    ebx
c0000783:	5e                   	pop    esi
c0000784:	c3                   	ret    
c0000785:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000790 <strchr>:
c0000790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000794:	8a 10                	mov    dl,BYTE PTR [eax]
c0000796:	84 d2                	test   dl,dl
c0000798:	74 21                	je     c00007bb <strchr+0x2b>
c000079a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000079e:	38 ca                	cmp    dl,cl
c00007a0:	75 12                	jne    c00007b4 <strchr+0x24>
c00007a2:	eb 1a                	jmp    c00007be <strchr+0x2e>
c00007a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00007b0:	38 ca                	cmp    dl,cl
c00007b2:	74 09                	je     c00007bd <strchr+0x2d>
c00007b4:	40                   	inc    eax
c00007b5:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b7:	84 d2                	test   dl,dl
c00007b9:	75 f5                	jne    c00007b0 <strchr+0x20>
c00007bb:	31 c0                	xor    eax,eax
c00007bd:	c3                   	ret    
c00007be:	c3                   	ret    
c00007bf:	90                   	nop

c00007c0 <strncmp>:
c00007c0:	57                   	push   edi
c00007c1:	56                   	push   esi
c00007c2:	53                   	push   ebx
c00007c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00007c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007cf:	85 ff                	test   edi,edi
c00007d1:	74 30                	je     c0000803 <strncmp+0x43>
c00007d3:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d5:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
c00007d8:	38 d3                	cmp    bl,dl
c00007da:	75 34                	jne    c0000810 <strncmp+0x50>
c00007dc:	8d 46 01             	lea    eax,[esi+0x1]
c00007df:	84 db                	test   bl,bl
c00007e1:	74 20                	je     c0000803 <strncmp+0x43>
c00007e3:	01 fe                	add    esi,edi
c00007e5:	eb 17                	jmp    c00007fe <strncmp+0x3e>
c00007e7:	89 f6                	mov    esi,esi
c00007e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007f0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007f2:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
c00007f5:	38 da                	cmp    dl,bl
c00007f7:	75 17                	jne    c0000810 <strncmp+0x50>
c00007f9:	40                   	inc    eax
c00007fa:	84 d2                	test   dl,dl
c00007fc:	74 05                	je     c0000803 <strncmp+0x43>
c00007fe:	41                   	inc    ecx
c00007ff:	39 c6                	cmp    esi,eax
c0000801:	75 ed                	jne    c00007f0 <strncmp+0x30>
c0000803:	5b                   	pop    ebx
c0000804:	31 c0                	xor    eax,eax
c0000806:	5e                   	pop    esi
c0000807:	5f                   	pop    edi
c0000808:	c3                   	ret    
c0000809:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000810:	0f b6 c2             	movzx  eax,dl
c0000813:	29 d8                	sub    eax,ebx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	5f                   	pop    edi
c0000818:	c3                   	ret    
c0000819:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000820 <strcat>:
c0000820:	56                   	push   esi
c0000821:	53                   	push   ebx
c0000822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000826:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000082a:	89 c3                	mov    ebx,eax
c000082c:	eb 04                	jmp    c0000832 <strcat+0x12>
c000082e:	66 90                	xchg   ax,ax
c0000830:	89 d3                	mov    ebx,edx
c0000832:	8d 53 01             	lea    edx,[ebx+0x1]
c0000835:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000839:	75 f5                	jne    c0000830 <strcat+0x10>
c000083b:	31 d2                	xor    edx,edx
c000083d:	8d 76 00             	lea    esi,[esi+0x0]
c0000840:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000843:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000846:	42                   	inc    edx
c0000847:	84 c9                	test   cl,cl
c0000849:	75 f5                	jne    c0000840 <strcat+0x20>
c000084b:	5b                   	pop    ebx
c000084c:	5e                   	pop    esi
c000084d:	c3                   	ret    
c000084e:	66 90                	xchg   ax,ax

c0000850 <strncat>:
c0000850:	56                   	push   esi
c0000851:	53                   	push   ebx
c0000852:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000085a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000085e:	85 f6                	test   esi,esi
c0000860:	74 2e                	je     c0000890 <strncat+0x40>
c0000862:	89 c2                	mov    edx,eax
c0000864:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000086a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000870:	42                   	inc    edx
c0000871:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000875:	75 f9                	jne    c0000870 <strncat+0x20>
c0000877:	01 ce                	add    esi,ecx
c0000879:	eb 0a                	jmp    c0000885 <strncat+0x35>
c000087b:	90                   	nop
c000087c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000880:	39 f1                	cmp    ecx,esi
c0000882:	74 1c                	je     c00008a0 <strncat+0x50>
c0000884:	42                   	inc    edx
c0000885:	41                   	inc    ecx
c0000886:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000889:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000088c:	84 db                	test   bl,bl
c000088e:	75 f0                	jne    c0000880 <strncat+0x30>
c0000890:	5b                   	pop    ebx
c0000891:	5e                   	pop    esi
c0000892:	c3                   	ret    
c0000893:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008a0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <strstr>:
c00008b0:	57                   	push   edi
c00008b1:	56                   	push   esi
c00008b2:	53                   	push   ebx
c00008b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008bb:	57                   	push   edi
c00008bc:	e8 ef fc ff ff       	call   c00005b0 <strlen>
c00008c1:	59                   	pop    ecx
c00008c2:	89 c6                	mov    esi,eax
c00008c4:	85 c0                	test   eax,eax
c00008c6:	75 18                	jne    c00008e0 <strstr+0x30>
c00008c8:	eb 36                	jmp    c0000900 <strstr+0x50>
c00008ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008d0:	56                   	push   esi
c00008d1:	57                   	push   edi
c00008d2:	53                   	push   ebx
c00008d3:	e8 a8 fa ff ff       	call   c0000380 <memcmp>
c00008d8:	83 c4 0c             	add    esp,0xc
c00008db:	85 c0                	test   eax,eax
c00008dd:	74 21                	je     c0000900 <strstr+0x50>
c00008df:	43                   	inc    ebx
c00008e0:	53                   	push   ebx
c00008e1:	e8 ca fc ff ff       	call   c00005b0 <strlen>
c00008e6:	5a                   	pop    edx
c00008e7:	39 f0                	cmp    eax,esi
c00008e9:	73 e5                	jae    c00008d0 <strstr+0x20>
c00008eb:	5b                   	pop    ebx
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5e                   	pop    esi
c00008ef:	5f                   	pop    edi
c00008f0:	c3                   	ret    
c00008f1:	eb 0d                	jmp    c0000900 <strstr+0x50>
c00008f3:	90                   	nop
c00008f4:	90                   	nop
c00008f5:	90                   	nop
c00008f6:	90                   	nop
c00008f7:	90                   	nop
c00008f8:	90                   	nop
c00008f9:	90                   	nop
c00008fa:	90                   	nop
c00008fb:	90                   	nop
c00008fc:	90                   	nop
c00008fd:	90                   	nop
c00008fe:	90                   	nop
c00008ff:	90                   	nop
c0000900:	89 d8                	mov    eax,ebx
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	5f                   	pop    edi
c0000905:	c3                   	ret    
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <toupper>:
c0000910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000914:	0f b6 c8             	movzx  ecx,al
c0000917:	8d 50 e0             	lea    edx,[eax-0x20]
c000091a:	f6 81 a0 ec 01 c0 02 	test   BYTE PTR [ecx-0x3ffe1360],0x2
c0000921:	0f 45 c2             	cmovne eax,edx
c0000924:	c3                   	ret    
c0000925:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <tolower>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 c8             	movzx  ecx,al
c0000937:	8d 50 20             	lea    edx,[eax+0x20]
c000093a:	f6 81 a0 ec 01 c0 01 	test   BYTE PTR [ecx-0x3ffe1360],0x1
c0000941:	0f 45 c2             	cmovne eax,edx
c0000944:	c3                   	ret    
c0000945:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000950 <simple_strtoul>:
c0000950:	55                   	push   ebp
c0000951:	57                   	push   edi
c0000952:	56                   	push   esi
c0000953:	53                   	push   ebx
c0000954:	83 ec 08             	sub    esp,0x8
c0000957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000095b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000095f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000963:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000966:	f6 82 a0 ec 01 c0 08 	test   BYTE PTR [edx-0x3ffe1360],0x8
c000096d:	75 11                	jne    c0000980 <simple_strtoul+0x30>
c000096f:	89 d0                	mov    eax,edx
c0000971:	eb 1c                	jmp    c000098f <simple_strtoul+0x3f>
c0000973:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000979:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000980:	43                   	inc    ebx
c0000981:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000984:	89 d0                	mov    eax,edx
c0000986:	f6 82 a0 ec 01 c0 08 	test   BYTE PTR [edx-0x3ffe1360],0x8
c000098d:	75 f1                	jne    c0000980 <simple_strtoul+0x30>
c000098f:	3c 09                	cmp    al,0x9
c0000991:	74 ed                	je     c0000980 <simple_strtoul+0x30>
c0000993:	3c 2d                	cmp    al,0x2d
c0000995:	0f 84 45 01 00 00    	je     c0000ae0 <simple_strtoul+0x190>
c000099b:	3c 2b                	cmp    al,0x2b
c000099d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009a5:	0f 94 c0             	sete   al
c00009a8:	0f b6 c0             	movzx  eax,al
c00009ab:	01 c3                	add    ebx,eax
c00009ad:	85 ed                	test   ebp,ebp
c00009af:	0f 85 cb 00 00 00    	jne    c0000a80 <simple_strtoul+0x130>
c00009b5:	8a 13                	mov    dl,BYTE PTR [ebx]
c00009b7:	bd 0a 00 00 00       	mov    ebp,0xa
c00009bc:	80 fa 30             	cmp    dl,0x30
c00009bf:	0f 84 77 01 00 00    	je     c0000b3c <simple_strtoul+0x1ec>
c00009c5:	84 d2                	test   dl,dl
c00009c7:	0f 84 43 01 00 00    	je     c0000b10 <simple_strtoul+0x1c0>
c00009cd:	31 ff                	xor    edi,edi
c00009cf:	31 f6                	xor    esi,esi
c00009d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d8:	eb 30                	jmp    c0000a0a <simple_strtoul+0xba>
c00009da:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e0:	83 e9 30             	sub    ecx,0x30
c00009e3:	39 e9                	cmp    ecx,ebp
c00009e5:	73 59                	jae    c0000a40 <simple_strtoul+0xf0>
c00009e7:	89 c8                	mov    eax,ecx
c00009e9:	31 d2                	xor    edx,edx
c00009eb:	f7 d0                	not    eax
c00009ed:	f7 f5                	div    ebp
c00009ef:	39 f0                	cmp    eax,esi
c00009f1:	0f 82 d9 00 00 00    	jb     c0000ad0 <simple_strtoul+0x180>
c00009f7:	0f af f5             	imul   esi,ebp
c00009fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a01:	01 ce                	add    esi,ecx
c0000a03:	43                   	inc    ebx
c0000a04:	8a 13                	mov    dl,BYTE PTR [ebx]
c0000a06:	84 d2                	test   dl,dl
c0000a08:	74 36                	je     c0000a40 <simple_strtoul+0xf0>
c0000a0a:	0f b6 ca             	movzx  ecx,dl
c0000a0d:	f6 81 a0 ec 01 c0 04 	test   BYTE PTR [ecx-0x3ffe1360],0x4
c0000a14:	75 ca                	jne    c00009e0 <simple_strtoul+0x90>
c0000a16:	0f be d2             	movsx  edx,dl
c0000a19:	52                   	push   edx
c0000a1a:	e8 f1 fe ff ff       	call   c0000910 <toupper>
c0000a1f:	59                   	pop    ecx
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 a0 ec 01 c0 01 	test   BYTE PTR [edx-0x3ffe1360],0x1
c0000a2a:	74 14                	je     c0000a40 <simple_strtoul+0xf0>
c0000a2c:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a2f:	39 e9                	cmp    ecx,ebp
c0000a31:	72 b4                	jb     c00009e7 <simple_strtoul+0x97>
c0000a33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000a44:	85 d2                	test   edx,edx
c0000a46:	74 11                	je     c0000a59 <simple_strtoul+0x109>
c0000a48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a4b:	09 f0                	or     eax,esi
c0000a4d:	0f 84 9d 00 00 00    	je     c0000af0 <simple_strtoul+0x1a0>
c0000a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a57:	89 18                	mov    DWORD PTR [eax],ebx
c0000a59:	83 ff 01             	cmp    edi,0x1
c0000a5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000a61:	0f 44 f0             	cmove  esi,eax
c0000a64:	89 f0                	mov    eax,esi
c0000a66:	f7 d8                	neg    eax
c0000a68:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a6d:	0f 44 f0             	cmove  esi,eax
c0000a70:	83 c4 08             	add    esp,0x8
c0000a73:	5b                   	pop    ebx
c0000a74:	89 f0                	mov    eax,esi
c0000a76:	5e                   	pop    esi
c0000a77:	5f                   	pop    edi
c0000a78:	5d                   	pop    ebp
c0000a79:	c3                   	ret    
c0000a7a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a80:	8d 45 fe             	lea    eax,[ebp-0x2]
c0000a83:	83 f8 22             	cmp    eax,0x22
c0000a86:	0f 87 84 00 00 00    	ja     c0000b10 <simple_strtoul+0x1c0>
c0000a8c:	8a 13                	mov    dl,BYTE PTR [ebx]
c0000a8e:	83 fd 08             	cmp    ebp,0x8
c0000a91:	0f 84 cb 00 00 00    	je     c0000b62 <simple_strtoul+0x212>
c0000a97:	83 fd 10             	cmp    ebp,0x10
c0000a9a:	0f 85 25 ff ff ff    	jne    c00009c5 <simple_strtoul+0x75>
c0000aa0:	bd 10 00 00 00       	mov    ebp,0x10
c0000aa5:	80 fa 30             	cmp    dl,0x30
c0000aa8:	0f 85 17 ff ff ff    	jne    c00009c5 <simple_strtoul+0x75>
c0000aae:	0f be 43 01          	movsx  eax,BYTE PTR [ebx+0x1]
c0000ab2:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab5:	50                   	push   eax
c0000ab6:	e8 75 fe ff ff       	call   c0000930 <tolower>
c0000abb:	5e                   	pop    esi
c0000abc:	83 f8 78             	cmp    eax,0x78
c0000abf:	0f 84 b7 00 00 00    	je     c0000b7c <simple_strtoul+0x22c>
c0000ac5:	43                   	inc    ebx
c0000ac6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ac9:	e9 f7 fe ff ff       	jmp    c00009c5 <simple_strtoul+0x75>
c0000ace:	66 90                	xchg   ax,ax
c0000ad0:	bf 01 00 00 00       	mov    edi,0x1
c0000ad5:	31 f6                	xor    esi,esi
c0000ad7:	e9 27 ff ff ff       	jmp    c0000a03 <simple_strtoul+0xb3>
c0000adc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae0:	43                   	inc    ebx
c0000ae1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ae9:	e9 bf fe ff ff       	jmp    c00009ad <simple_strtoul+0x5d>
c0000aee:	66 90                	xchg   ax,ax
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	74 41                	je     c0000b35 <simple_strtoul+0x1e5>
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afc:	89 30                	mov    DWORD PTR [eax],esi
c0000afe:	31 f6                	xor    esi,esi
c0000b00:	e9 54 ff ff ff       	jmp    c0000a59 <simple_strtoul+0x109>
c0000b05:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	31 f6                	xor    esi,esi
c0000b16:	85 c0                	test   eax,eax
c0000b18:	0f 84 46 ff ff ff    	je     c0000a64 <simple_strtoul+0x114>
c0000b1e:	85 db                	test   ebx,ebx
c0000b20:	b8 00 00 00 00       	mov    eax,0x0
c0000b25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b29:	0f 45 44 24 1c       	cmovne eax,DWORD PTR [esp+0x1c]
c0000b2e:	89 07                	mov    DWORD PTR [edi],eax
c0000b30:	e9 2f ff ff ff       	jmp    c0000a64 <simple_strtoul+0x114>
c0000b35:	31 f6                	xor    esi,esi
c0000b37:	e9 17 ff ff ff       	jmp    c0000a53 <simple_strtoul+0x103>
c0000b3c:	0f be 43 01          	movsx  eax,BYTE PTR [ebx+0x1]
c0000b40:	88 04 24             	mov    BYTE PTR [esp],al
c0000b43:	50                   	push   eax
c0000b44:	e8 e7 fd ff ff       	call   c0000930 <tolower>
c0000b49:	5f                   	pop    edi
c0000b4a:	83 f8 78             	cmp    eax,0x78
c0000b4d:	74 22                	je     c0000b71 <simple_strtoul+0x221>
c0000b4f:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b52:	43                   	inc    ebx
c0000b53:	80 fa 30             	cmp    dl,0x30
c0000b56:	74 13                	je     c0000b6b <simple_strtoul+0x21b>
c0000b58:	bd 08 00 00 00       	mov    ebp,0x8
c0000b5d:	e9 63 fe ff ff       	jmp    c00009c5 <simple_strtoul+0x75>
c0000b62:	80 fa 30             	cmp    dl,0x30
c0000b65:	0f 85 5a fe ff ff    	jne    c00009c5 <simple_strtoul+0x75>
c0000b6b:	8a 53 01             	mov    dl,BYTE PTR [ebx+0x1]
c0000b6e:	43                   	inc    ebx
c0000b6f:	eb e7                	jmp    c0000b58 <simple_strtoul+0x208>
c0000b71:	8a 53 02             	mov    dl,BYTE PTR [ebx+0x2]
c0000b74:	83 c3 02             	add    ebx,0x2
c0000b77:	e9 24 ff ff ff       	jmp    c0000aa0 <simple_strtoul+0x150>
c0000b7c:	8a 53 02             	mov    dl,BYTE PTR [ebx+0x2]
c0000b7f:	83 c3 02             	add    ebx,0x2
c0000b82:	e9 3e fe ff ff       	jmp    c00009c5 <simple_strtoul+0x75>

c0000b87 <largebin_index>:
c0000b87:	89 c2                	mov    edx,eax
c0000b89:	c1 ea 08             	shr    edx,0x8
c0000b8c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b92:	77 13                	ja     c0000ba7 <largebin_index+0x20>
c0000b94:	0f bd d2             	bsr    edx,edx
c0000b97:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b9a:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
c0000b9f:	83 e0 03             	and    eax,0x3
c0000ba2:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000ba6:	c3                   	ret    
c0000ba7:	b8 5f 00 00 00       	mov    eax,0x5f
c0000bac:	c3                   	ret    

c0000bad <malloc_init_state>:
c0000bad:	8d 50 34             	lea    edx,[eax+0x34]
c0000bb0:	53                   	push   ebx
c0000bb1:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000bb7:	89 d1                	mov    ecx,edx
c0000bb9:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000bbc:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000bbf:	83 c2 08             	add    edx,0x8
c0000bc2:	39 da                	cmp    edx,ebx
c0000bc4:	75 f3                	jne    c0000bb9 <malloc_init_state+0xc>
c0000bc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bc8:	5b                   	pop    ebx
c0000bc9:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bd6:	83 e2 03             	and    edx,0x3
c0000bd9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000be3:	83 ca 48             	or     edx,0x48
c0000be6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bed:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bf7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c01:	89 10                	mov    DWORD PTR [eax],edx
c0000c03:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c0d:	c3                   	ret    

c0000c0e <malloc_consolidate>:
c0000c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c10:	85 d2                	test   edx,edx
c0000c12:	0f 84 d8 00 00 00    	je     c0000cf0 <malloc_consolidate+0xe2>
c0000c18:	55                   	push   ebp
c0000c19:	83 e2 fd             	and    edx,0xfffffffd
c0000c1c:	89 c5                	mov    ebp,eax
c0000c1e:	57                   	push   edi
c0000c1f:	8d 78 34             	lea    edi,[eax+0x34]
c0000c22:	56                   	push   esi
c0000c23:	53                   	push   ebx
c0000c24:	83 ec 10             	sub    esp,0x10
c0000c27:	89 10                	mov    DWORD PTR [eax],edx
c0000c29:	c1 ea 03             	shr    edx,0x3
c0000c2c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c30:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c34:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c38:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c3b:	85 d2                	test   edx,edx
c0000c3d:	0f 84 98 00 00 00    	je     c0000cdb <malloc_consolidate+0xcd>
c0000c43:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c4a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c4d:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c54:	89 f9                	mov    ecx,edi
c0000c56:	83 e1 fe             	and    ecx,0xfffffffe
c0000c59:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c5c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c5f:	83 e3 fc             	and    ebx,0xfffffffc
c0000c62:	83 e7 01             	and    edi,0x1
c0000c65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c68:	75 14                	jne    c0000c7e <malloc_consolidate+0x70>
c0000c6a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c6c:	29 fa                	sub    edx,edi
c0000c6e:	01 f9                	add    ecx,edi
c0000c70:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c73:	89 fb                	mov    ebx,edi
c0000c75:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c78:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c7b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c7e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c81:	74 40                	je     c0000cc3 <malloc_consolidate+0xb5>
c0000c83:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c89:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c8d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c90:	83 e7 01             	and    edi,0x1
c0000c93:	75 0e                	jne    c0000ca3 <malloc_consolidate+0x95>
c0000c95:	01 d9                	add    ecx,ebx
c0000c97:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c9a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c9d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ca0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000ca3:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000ca6:	89 ce                	mov    esi,ecx
c0000ca8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000cab:	83 ce 01             	or     esi,0x1
c0000cae:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000cb1:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000cb4:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000cb8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000cbb:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000cbe:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000cc1:	eb 0c                	jmp    c0000ccf <malloc_consolidate+0xc1>
c0000cc3:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000cc6:	83 c9 01             	or     ecx,0x1
c0000cc9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ccc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ccf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cd3:	85 d2                	test   edx,edx
c0000cd5:	0f 85 6f ff ff ff    	jne    c0000c4a <malloc_consolidate+0x3c>
c0000cdb:	83 c5 04             	add    ebp,0x4
c0000cde:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ce2:	0f 85 50 ff ff ff    	jne    c0000c38 <malloc_consolidate+0x2a>
c0000ce8:	83 c4 10             	add    esp,0x10
c0000ceb:	5b                   	pop    ebx
c0000cec:	5e                   	pop    esi
c0000ced:	5f                   	pop    edi
c0000cee:	5d                   	pop    ebp
c0000cef:	c3                   	ret    
c0000cf0:	e9 b8 fe ff ff       	jmp    c0000bad <malloc_init_state>

c0000cf5 <dlfree>:
c0000cf5:	57                   	push   edi
c0000cf6:	56                   	push   esi
c0000cf7:	53                   	push   ebx
c0000cf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cfc:	85 db                	test   ebx,ebx
c0000cfe:	0f 84 e2 00 00 00    	je     c0000de6 <dlfree+0xf1>
c0000d04:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d07:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000d0d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d10:	89 f0                	mov    eax,esi
c0000d12:	83 e0 fc             	and    eax,0xfffffffc
c0000d15:	39 c1                	cmp    ecx,eax
c0000d17:	72 24                	jb     c0000d3d <dlfree+0x48>
c0000d19:	c1 e8 03             	shr    eax,0x3
c0000d1c:	83 c9 03             	or     ecx,0x3
c0000d1f:	83 e8 02             	sub    eax,0x2
c0000d22:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000d28:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000d2f:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d31:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000d38:	e9 a9 00 00 00       	jmp    c0000de6 <dlfree+0xf1>
c0000d3d:	83 e6 02             	and    esi,0x2
c0000d40:	0f 85 a0 00 00 00    	jne    c0000de6 <dlfree+0xf1>
c0000d46:	83 c9 01             	or     ecx,0x1
c0000d49:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d4c:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000d52:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d55:	83 e1 fc             	and    ecx,0xfffffffc
c0000d58:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d5c:	75 13                	jne    c0000d71 <dlfree+0x7c>
c0000d5e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d61:	29 da                	sub    edx,ebx
c0000d63:	01 d8                	add    eax,ebx
c0000d65:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d68:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d6b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d6e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d71:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d77:	74 40                	je     c0000db9 <dlfree+0xc4>
c0000d79:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d7d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d80:	80 e3 01             	and    bl,0x1
c0000d83:	75 0e                	jne    c0000d93 <dlfree+0x9e>
c0000d85:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d88:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d8b:	01 c8                	add    eax,ecx
c0000d8d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d90:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d93:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d99:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000da0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000da3:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000da9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000dac:	89 c1                	mov    ecx,eax
c0000dae:	83 c9 01             	or     ecx,0x1
c0000db1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000db4:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000db7:	eb 10                	jmp    c0000dc9 <dlfree+0xd4>
c0000db9:	01 c8                	add    eax,ecx
c0000dbb:	89 c1                	mov    ecx,eax
c0000dbd:	83 c9 01             	or     ecx,0x1
c0000dc0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000dc3:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000dc9:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000dce:	76 16                	jbe    c0000de6 <dlfree+0xf1>
c0000dd0:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000dd7:	74 0d                	je     c0000de6 <dlfree+0xf1>
c0000dd9:	5b                   	pop    ebx
c0000dda:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000ddf:	5e                   	pop    esi
c0000de0:	5f                   	pop    edi
c0000de1:	e9 28 fe ff ff       	jmp    c0000c0e <malloc_consolidate>
c0000de6:	5b                   	pop    ebx
c0000de7:	5e                   	pop    esi
c0000de8:	5f                   	pop    edi
c0000de9:	c3                   	ret    

c0000dea <sYSMALLOc>:
c0000dea:	55                   	push   ebp
c0000deb:	57                   	push   edi
c0000dec:	56                   	push   esi
c0000ded:	53                   	push   ebx
c0000dee:	89 d3                	mov    ebx,edx
c0000df0:	83 ec 2c             	sub    esp,0x2c
c0000df3:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000df9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dfd:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e04:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e07:	74 1f                	je     c0000e28 <sYSMALLOc+0x3e>
c0000e09:	89 d0                	mov    eax,edx
c0000e0b:	e8 fe fd ff ff       	call   c0000c0e <malloc_consolidate>
c0000e10:	83 ec 0c             	sub    esp,0xc
c0000e13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000e17:	83 e8 07             	sub    eax,0x7
c0000e1a:	50                   	push   eax
c0000e1b:	e8 33 02 00 00       	call   c0001053 <dlmalloc>
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	e9 23 02 00 00       	jmp    c000104b <sYSMALLOc+0x261>
c0000e28:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e2f:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000e35:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000e38:	83 c0 10             	add    eax,0x10
c0000e3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e3f:	01 c2                	add    edx,eax
c0000e41:	83 e5 fc             	and    ebp,0xfffffffc
c0000e44:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e4b:	74 02                	je     c0000e4f <sYSMALLOc+0x65>
c0000e4d:	29 ea                	sub    edx,ebp
c0000e4f:	f7 d9                	neg    ecx
c0000e51:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000e55:	21 ca                	and    edx,ecx
c0000e57:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000e5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000e5f:	7f 07                	jg     c0000e68 <sYSMALLOc+0x7e>
c0000e61:	31 c0                	xor    eax,eax
c0000e63:	e9 e3 01 00 00       	jmp    c000104b <sYSMALLOc+0x261>
c0000e68:	83 ec 0c             	sub    esp,0xc
c0000e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e6f:	e8 df 68 00 00       	call   c0007753 <sbrk>
c0000e74:	83 c4 10             	add    esp,0x10
c0000e77:	89 c6                	mov    esi,eax
c0000e79:	83 f8 ff             	cmp    eax,0xffffffff
c0000e7c:	74 e3                	je     c0000e61 <sYSMALLOc+0x77>
c0000e7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000e82:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000e85:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000e8b:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e91:	39 c2                	cmp    edx,eax
c0000e93:	75 11                	jne    c0000ea6 <sYSMALLOc+0xbc>
c0000e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e99:	01 e8                	add    eax,ebp
c0000e9b:	83 c8 01             	or     eax,0x1
c0000e9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ea1:	e9 93 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x14f>
c0000ea6:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000eac:	a8 01                	test   al,0x1
c0000eae:	0f 84 73 01 00 00    	je     c0001027 <sYSMALLOc+0x23d>
c0000eb4:	85 ed                	test   ebp,ebp
c0000eb6:	74 12                	je     c0000eca <sYSMALLOc+0xe0>
c0000eb8:	39 f2                	cmp    edx,esi
c0000eba:	76 0e                	jbe    c0000eca <sYSMALLOc+0xe0>
c0000ebc:	83 e0 fe             	and    eax,0xfffffffe
c0000ebf:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000ec5:	e9 5d 01 00 00       	jmp    c0001027 <sYSMALLOc+0x23d>
c0000eca:	85 ed                	test   ebp,ebp
c0000ecc:	74 0c                	je     c0000eda <sYSMALLOc+0xf0>
c0000ece:	89 f0                	mov    eax,esi
c0000ed0:	29 d0                	sub    eax,edx
c0000ed2:	01 c1                	add    ecx,eax
c0000ed4:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000eda:	89 f2                	mov    edx,esi
c0000edc:	83 e2 07             	and    edx,0x7
c0000edf:	0f 84 b1 00 00 00    	je     c0000f96 <sYSMALLOc+0x1ac>
c0000ee5:	b8 08 00 00 00       	mov    eax,0x8
c0000eea:	29 d0                	sub    eax,edx
c0000eec:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000eef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ef3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ef7:	01 e8                	add    eax,ebp
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000eff:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f03:	01 f2                	add    edx,esi
c0000f05:	01 d1                	add    ecx,edx
c0000f07:	29 d0                	sub    eax,edx
c0000f09:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f0d:	01 c1                	add    ecx,eax
c0000f0f:	51                   	push   ecx
c0000f10:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f14:	e8 3a 68 00 00       	call   c0007753 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000f20:	83 f8 ff             	cmp    eax,0xffffffff
c0000f23:	75 7c                	jne    c0000fa1 <sYSMALLOc+0x1b7>
c0000f25:	83 ec 0c             	sub    esp,0xc
c0000f28:	6a 00                	push   0x0
c0000f2a:	e8 24 68 00 00       	call   c0007753 <sbrk>
c0000f2f:	83 c4 10             	add    esp,0x10
c0000f32:	31 c9                	xor    ecx,ecx
c0000f34:	83 f8 ff             	cmp    eax,0xffffffff
c0000f37:	75 7e                	jne    c0000fb7 <sYSMALLOc+0x1cd>
c0000f39:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f3f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f45:	73 06                	jae    c0000f4d <sYSMALLOc+0x163>
c0000f47:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f4d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f53:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000f59:	73 06                	jae    c0000f61 <sYSMALLOc+0x177>
c0000f5b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000f61:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f64:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000f67:	83 e2 fc             	and    edx,0xfffffffc
c0000f6a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000f6e:	0f 87 ed fe ff ff    	ja     c0000e61 <sYSMALLOc+0x77>
c0000f74:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000f78:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f7b:	29 fa                	sub    edx,edi
c0000f7d:	83 c0 08             	add    eax,0x8
c0000f80:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f83:	89 fb                	mov    ebx,edi
c0000f85:	83 ca 01             	or     edx,0x1
c0000f88:	83 cb 01             	or     ebx,0x1
c0000f8b:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f91:	e9 b5 00 00 00       	jmp    c000104b <sYSMALLOc+0x261>
c0000f96:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f9a:	31 c0                	xor    eax,eax
c0000f9c:	e9 52 ff ff ff       	jmp    c0000ef3 <sYSMALLOc+0x109>
c0000fa1:	39 c6                	cmp    esi,eax
c0000fa3:	76 12                	jbe    c0000fb7 <sYSMALLOc+0x1cd>
c0000fa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fa9:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fb0:	01 f0                	add    eax,esi
c0000fb2:	e9 7b ff ff ff       	jmp    c0000f32 <sYSMALLOc+0x148>
c0000fb7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fbb:	29 f0                	sub    eax,esi
c0000fbd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000fc0:	01 c8                	add    eax,ecx
c0000fc2:	83 c8 01             	or     eax,0x1
c0000fc5:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000fc8:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000fce:	85 ed                	test   ebp,ebp
c0000fd0:	0f 84 63 ff ff ff    	je     c0000f39 <sYSMALLOc+0x14f>
c0000fd6:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000fd9:	83 e0 f8             	and    eax,0xfffffff8
c0000fdc:	89 c2                	mov    edx,eax
c0000fde:	83 ca 01             	or     edx,0x1
c0000fe1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000fe4:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fec:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ff4:	83 f8 0f             	cmp    eax,0xf
c0000ff7:	0f 86 3c ff ff ff    	jbe    c0000f39 <sYSMALLOc+0x14f>
c0000ffd:	83 ec 0c             	sub    esp,0xc
c0001000:	83 c7 08             	add    edi,0x8
c0001003:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001009:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001013:	57                   	push   edi
c0001014:	e8 dc fc ff ff       	call   c0000cf5 <dlfree>
c0001019:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000101f:	83 c4 10             	add    esp,0x10
c0001022:	e9 12 ff ff ff       	jmp    c0000f39 <sYSMALLOc+0x14f>
c0001027:	83 ec 0c             	sub    esp,0xc
c000102a:	6a 00                	push   0x0
c000102c:	e8 22 67 00 00       	call   c0007753 <sbrk>
c0001031:	89 c2                	mov    edx,eax
c0001033:	29 f2                	sub    edx,esi
c0001035:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001039:	83 c4 10             	add    esp,0x10
c000103c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001042:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0001046:	e9 e7 fe ff ff       	jmp    c0000f32 <sYSMALLOc+0x148>
c000104b:	83 c4 2c             	add    esp,0x2c
c000104e:	5b                   	pop    ebx
c000104f:	5e                   	pop    esi
c0001050:	5f                   	pop    edi
c0001051:	5d                   	pop    ebp
c0001052:	c3                   	ret    

c0001053 <dlmalloc>:
c0001053:	55                   	push   ebp
c0001054:	57                   	push   edi
c0001055:	56                   	push   esi
c0001056:	53                   	push   ebx
c0001057:	83 ec 1c             	sub    esp,0x1c
c000105a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000105e:	83 f8 df             	cmp    eax,0xffffffdf
c0001061:	0f 87 6f 03 00 00    	ja     c00013d6 <dlmalloc+0x383>
c0001067:	83 c0 0b             	add    eax,0xb
c000106a:	be 10 00 00 00       	mov    esi,0x10
c000106f:	83 f8 0f             	cmp    eax,0xf
c0001072:	76 05                	jbe    c0001079 <dlmalloc+0x26>
c0001074:	83 e0 f8             	and    eax,0xfffffff8
c0001077:	89 c6                	mov    esi,eax
c0001079:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c000107f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001085:	75 17                	jne    c000109e <dlmalloc+0x4b>
c0001087:	85 ff                	test   edi,edi
c0001089:	0f 85 04 03 00 00    	jne    c0001393 <dlmalloc+0x340>
c000108f:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001094:	e8 75 fb ff ff       	call   c0000c0e <malloc_consolidate>
c0001099:	e9 f5 02 00 00       	jmp    c0001393 <dlmalloc+0x340>
c000109e:	39 f7                	cmp    edi,esi
c00010a0:	72 1f                	jb     c00010c1 <dlmalloc+0x6e>
c00010a2:	89 f2                	mov    edx,esi
c00010a4:	c1 ea 03             	shr    edx,0x3
c00010a7:	83 ea 02             	sub    edx,0x2
c00010aa:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c00010b1:	85 c0                	test   eax,eax
c00010b3:	74 0c                	je     c00010c1 <dlmalloc+0x6e>
c00010b5:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00010b8:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c00010bf:	eb 2c                	jmp    c00010ed <dlmalloc+0x9a>
c00010c1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010c7:	77 2c                	ja     c00010f5 <dlmalloc+0xa2>
c00010c9:	89 f5                	mov    ebp,esi
c00010cb:	c1 ed 03             	shr    ebp,0x3
c00010ce:	8d 14 ed 34 31 02 c0 	lea    edx,[ebp*8-0x3ffdcecc]
c00010d5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010d8:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010db:	39 c3                	cmp    ebx,eax
c00010dd:	74 2e                	je     c000110d <dlmalloc+0xba>
c00010df:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010e2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010e7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ea:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010ed:	83 c0 08             	add    eax,0x8
c00010f0:	e9 e3 02 00 00       	jmp    c00013d8 <dlmalloc+0x385>
c00010f5:	89 f0                	mov    eax,esi
c00010f7:	e8 8b fa ff ff       	call   c0000b87 <largebin_index>
c00010fc:	83 e7 02             	and    edi,0x2
c00010ff:	89 c5                	mov    ebp,eax
c0001101:	74 0a                	je     c000110d <dlmalloc+0xba>
c0001103:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001108:	e8 01 fb ff ff       	call   c0000c0e <malloc_consolidate>
c000110d:	8d 46 10             	lea    eax,[esi+0x10]
c0001110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001114:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c000111a:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c0001120:	0f 84 1a 01 00 00    	je     c0001240 <dlmalloc+0x1ed>
c0001126:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001129:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000112c:	83 e7 fc             	and    edi,0xfffffffc
c000112f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001135:	77 4c                	ja     c0001183 <dlmalloc+0x130>
c0001137:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c000113c:	75 45                	jne    c0001183 <dlmalloc+0x130>
c000113e:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c0001144:	75 3d                	jne    c0001183 <dlmalloc+0x130>
c0001146:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000114a:	73 37                	jae    c0001183 <dlmalloc+0x130>
c000114c:	89 fa                	mov    edx,edi
c000114e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001151:	29 f2                	sub    edx,esi
c0001153:	83 ce 01             	or     esi,0x1
c0001156:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c000115b:	89 d1                	mov    ecx,edx
c000115d:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001162:	83 c9 01             	or     ecx,0x1
c0001165:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c000116a:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001171:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001178:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000117b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000117e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001181:	eb 15                	jmp    c0001198 <dlmalloc+0x145>
c0001183:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001188:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c000118f:	39 fe                	cmp    esi,edi
c0001191:	75 0d                	jne    c00011a0 <dlmalloc+0x14d>
c0001193:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001198:	8d 43 08             	lea    eax,[ebx+0x8]
c000119b:	e9 38 02 00 00       	jmp    c00013d8 <dlmalloc+0x385>
c00011a0:	89 f8                	mov    eax,edi
c00011a2:	81 ff ff 00 00 00    	cmp    edi,0xff
c00011a8:	77 19                	ja     c00011c3 <dlmalloc+0x170>
c00011aa:	c1 e8 03             	shr    eax,0x3
c00011ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00011b0:	83 c2 0d             	add    edx,0xd
c00011b3:	8d 0c 95 f8 30 02 c0 	lea    ecx,[edx*4-0x3ffdcf08]
c00011ba:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c00011c1:	eb 4e                	jmp    c0001211 <dlmalloc+0x1be>
c00011c3:	e8 bf f9 ff ff       	call   c0000b87 <largebin_index>
c00011c8:	8d 14 00             	lea    edx,[eax+eax*1]
c00011cb:	83 c2 0d             	add    edx,0xd
c00011ce:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c00011d5:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c00011dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00011e0:	83 e9 08             	sub    ecx,0x8
c00011e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00011e7:	89 d1                	mov    ecx,edx
c00011e9:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00011ed:	74 22                	je     c0001211 <dlmalloc+0x1be>
c00011ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00011f3:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
c00011f6:	39 79 04             	cmp    DWORD PTR [ecx+0x4],edi
c00011f9:	77 12                	ja     c000120d <dlmalloc+0x1ba>
c00011fb:	83 cf 01             	or     edi,0x1
c00011fe:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001201:	76 05                	jbe    c0001208 <dlmalloc+0x1b5>
c0001203:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001206:	eb f6                	jmp    c00011fe <dlmalloc+0x1ab>
c0001208:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000120b:	eb 04                	jmp    c0001211 <dlmalloc+0x1be>
c000120d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0001211:	89 c7                	mov    edi,eax
c0001213:	c1 ff 05             	sar    edi,0x5
c0001216:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000121a:	bf 01 00 00 00       	mov    edi,0x1
c000121f:	c4 e2 79 f7 c7       	shlx   eax,edi,eax
c0001224:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001228:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c000122f:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0001232:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001235:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001238:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000123b:	e9 d4 fe ff ff       	jmp    c0001114 <dlmalloc+0xc1>
c0001240:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001246:	76 74                	jbe    c00012bc <dlmalloc+0x269>
c0001248:	8d 04 ed 34 31 02 c0 	lea    eax,[ebp*8-0x3ffdcecc]
c000124f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001252:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001255:	39 ca                	cmp    edx,ecx
c0001257:	74 63                	je     c00012bc <dlmalloc+0x269>
c0001259:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000125c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000125f:	83 e3 fc             	and    ebx,0xfffffffc
c0001262:	39 de                	cmp    esi,ebx
c0001264:	77 52                	ja     c00012b8 <dlmalloc+0x265>
c0001266:	89 df                	mov    edi,ebx
c0001268:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000126b:	01 d3                	add    ebx,edx
c000126d:	29 f7                	sub    edi,esi
c000126f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001272:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001275:	8d 42 08             	lea    eax,[edx+0x8]
c0001278:	83 ff 0f             	cmp    edi,0xf
c000127b:	77 09                	ja     c0001286 <dlmalloc+0x233>
c000127d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001281:	e9 52 01 00 00       	jmp    c00013d8 <dlmalloc+0x385>
c0001286:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001289:	83 ce 01             	or     esi,0x1
c000128c:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001292:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c0001298:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c000129f:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c00012a6:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00012a9:	89 fa                	mov    edx,edi
c00012ab:	83 ca 01             	or     edx,0x1
c00012ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00012b1:	89 3b                	mov    DWORD PTR [ebx],edi
c00012b3:	e9 20 01 00 00       	jmp    c00013d8 <dlmalloc+0x385>
c00012b8:	89 c2                	mov    edx,eax
c00012ba:	eb 99                	jmp    c0001255 <dlmalloc+0x202>
c00012bc:	8d 55 01             	lea    edx,[ebp+0x1]
c00012bf:	b8 01 00 00 00       	mov    eax,0x1
c00012c4:	89 d3                	mov    ebx,edx
c00012c6:	8d 0c d5 2c 31 02 c0 	lea    ecx,[edx*8-0x3ffdced4]
c00012cd:	c4 e2 69 f7 c0       	shlx   eax,eax,edx
c00012d2:	c1 eb 05             	shr    ebx,0x5
c00012d5:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00012dc:	39 f8                	cmp    eax,edi
c00012de:	77 04                	ja     c00012e4 <dlmalloc+0x291>
c00012e0:	85 c0                	test   eax,eax
c00012e2:	75 26                	jne    c000130a <dlmalloc+0x2b7>
c00012e4:	43                   	inc    ebx
c00012e5:	83 fb 02             	cmp    ebx,0x2
c00012e8:	0f 87 a5 00 00 00    	ja     c0001393 <dlmalloc+0x340>
c00012ee:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00012f5:	85 ff                	test   edi,edi
c00012f7:	74 eb                	je     c00012e4 <dlmalloc+0x291>
c00012f9:	89 d8                	mov    eax,ebx
c00012fb:	c1 e0 06             	shl    eax,0x6
c00012fe:	8d 0c 85 2c 31 02 c0 	lea    ecx,[eax*4-0x3ffdced4]
c0001305:	b8 01 00 00 00       	mov    eax,0x1
c000130a:	85 f8                	test   eax,edi
c000130c:	75 07                	jne    c0001315 <dlmalloc+0x2c2>
c000130e:	83 c1 08             	add    ecx,0x8
c0001311:	01 c0                	add    eax,eax
c0001313:	eb f5                	jmp    c000130a <dlmalloc+0x2b7>
c0001315:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
c0001318:	39 d1                	cmp    ecx,edx
c000131a:	75 13                	jne    c000132f <dlmalloc+0x2dc>
c000131c:	c4 e2 78 f2 ff       	andn   edi,eax,edi
c0001321:	83 c1 08             	add    ecx,0x8
c0001324:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c000132b:	01 c0                	add    eax,eax
c000132d:	eb ad                	jmp    c00012dc <dlmalloc+0x289>
c000132f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001332:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0001335:	83 e0 fc             	and    eax,0xfffffffc
c0001338:	89 79 0c             	mov    DWORD PTR [ecx+0xc],edi
c000133b:	89 c3                	mov    ebx,eax
c000133d:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0001340:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0001343:	8d 42 08             	lea    eax,[edx+0x8]
c0001346:	29 f3                	sub    ebx,esi
c0001348:	83 fb 0f             	cmp    ebx,0xf
c000134b:	77 09                	ja     c0001356 <dlmalloc+0x303>
c000134d:	83 49 04 01          	or     DWORD PTR [ecx+0x4],0x1
c0001351:	e9 82 00 00 00       	jmp    c00013d8 <dlmalloc+0x385>
c0001356:	8d 3c 32             	lea    edi,[edx+esi*1]
c0001359:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c000135f:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c0001365:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c000136c:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c0001373:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001379:	77 06                	ja     c0001381 <dlmalloc+0x32e>
c000137b:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001381:	83 ce 01             	or     esi,0x1
c0001384:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001387:	89 da                	mov    edx,ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000138f:	89 19                	mov    DWORD PTR [ecx],ebx
c0001391:	eb 45                	jmp    c00013d8 <dlmalloc+0x385>
c0001393:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001398:	8d 4e 10             	lea    ecx,[esi+0x10]
c000139b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000139e:	83 e2 fc             	and    edx,0xfffffffc
c00013a1:	39 d1                	cmp    ecx,edx
c00013a3:	77 1e                	ja     c00013c3 <dlmalloc+0x370>
c00013a5:	89 f3                	mov    ebx,esi
c00013a7:	29 f2                	sub    edx,esi
c00013a9:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00013ac:	83 cb 01             	or     ebx,0x1
c00013af:	83 ca 01             	or     edx,0x1
c00013b2:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c00013b8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013bb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013be:	e9 2a fd ff ff       	jmp    c00010ed <dlmalloc+0x9a>
c00013c3:	83 c4 1c             	add    esp,0x1c
c00013c6:	89 f0                	mov    eax,esi
c00013c8:	ba 00 31 02 c0       	mov    edx,0xc0023100
c00013cd:	5b                   	pop    ebx
c00013ce:	5e                   	pop    esi
c00013cf:	5f                   	pop    edi
c00013d0:	5d                   	pop    ebp
c00013d1:	e9 14 fa ff ff       	jmp    c0000dea <sYSMALLOc>
c00013d6:	31 c0                	xor    eax,eax
c00013d8:	83 c4 1c             	add    esp,0x1c
c00013db:	5b                   	pop    ebx
c00013dc:	5e                   	pop    esi
c00013dd:	5f                   	pop    edi
c00013de:	5d                   	pop    ebp
c00013df:	c3                   	ret    

c00013e0 <iALLOc>:
c00013e0:	55                   	push   ebp
c00013e1:	89 c5                	mov    ebp,eax
c00013e3:	57                   	push   edi
c00013e4:	56                   	push   esi
c00013e5:	53                   	push   ebx
c00013e6:	83 ec 2c             	sub    esp,0x2c
c00013e9:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00013f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00013fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001400:	75 0a                	jne    c000140c <iALLOc+0x2c>
c0001402:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001407:	e8 02 f8 ff ff       	call   c0000c0e <malloc_consolidate>
c000140c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001411:	74 0b                	je     c000141e <iALLOc+0x3e>
c0001413:	31 c9                	xor    ecx,ecx
c0001415:	85 ed                	test   ebp,ebp
c0001417:	75 33                	jne    c000144c <iALLOc+0x6c>
c0001419:	e9 5a 01 00 00       	jmp    c0001578 <iALLOc+0x198>
c000141e:	85 ed                	test   ebp,ebp
c0001420:	75 14                	jne    c0001436 <iALLOc+0x56>
c0001422:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000142a:	83 c4 2c             	add    esp,0x2c
c000142d:	5b                   	pop    ebx
c000142e:	5e                   	pop    esi
c000142f:	5f                   	pop    edi
c0001430:	5d                   	pop    ebp
c0001431:	e9 1d fc ff ff       	jmp    c0001053 <dlmalloc>
c0001436:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000143d:	b9 10 00 00 00       	mov    ecx,0x10
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 05                	jbe    c000144c <iALLOc+0x6c>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 c1                	mov    ecx,eax
c000144c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0001450:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0001455:	75 07                	jne    c000145e <iALLOc+0x7e>
c0001457:	8d 3c a8             	lea    edi,[eax+ebp*4]
c000145a:	31 f6                	xor    esi,esi
c000145c:	eb 38                	jmp    c0001496 <iALLOc+0xb6>
c000145e:	8b 00                	mov    eax,DWORD PTR [eax]
c0001460:	ba 10 00 00 00       	mov    edx,0x10
c0001465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001469:	83 c0 0b             	add    eax,0xb
c000146c:	83 f8 0f             	cmp    eax,0xf
c000146f:	76 05                	jbe    c0001476 <iALLOc+0x96>
c0001471:	83 e0 f8             	and    eax,0xfffffff8
c0001474:	89 c2                	mov    edx,eax
c0001476:	89 d6                	mov    esi,edx
c0001478:	0f af f5             	imul   esi,ebp
c000147b:	eb 1f                	jmp    c000149c <iALLOc+0xbc>
c000147d:	8b 10                	mov    edx,DWORD PTR [eax]
c000147f:	bb 10 00 00 00       	mov    ebx,0x10
c0001484:	83 c2 0b             	add    edx,0xb
c0001487:	83 fa 0f             	cmp    edx,0xf
c000148a:	76 05                	jbe    c0001491 <iALLOc+0xb1>
c000148c:	83 e2 f8             	and    edx,0xfffffff8
c000148f:	89 d3                	mov    ebx,edx
c0001491:	01 de                	add    esi,ebx
c0001493:	83 c0 04             	add    eax,0x4
c0001496:	39 c7                	cmp    edi,eax
c0001498:	75 e3                	jne    c000147d <iALLOc+0x9d>
c000149a:	31 d2                	xor    edx,edx
c000149c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00014a0:	8d 44 0e f9          	lea    eax,[esi+ecx*1-0x7]
c00014a4:	83 ec 0c             	sub    esp,0xc
c00014a7:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c00014ad:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00014b1:	50                   	push   eax
c00014b2:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c00014bc:	e8 92 fb ff ff       	call   c0001053 <dlmalloc>
c00014c1:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c00014c7:	83 c4 10             	add    esp,0x10
c00014ca:	85 c0                	test   eax,eax
c00014cc:	0f 84 9e 00 00 00    	je     c0001570 <iALLOc+0x190>
c00014d2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014d5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00014dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014e0:	83 e3 fc             	and    ebx,0xfffffffc
c00014e3:	f6 44 24 14 02       	test   BYTE PTR [esp+0x14],0x2
c00014e8:	74 1e                	je     c0001508 <iALLOc+0x128>
c00014ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00014ee:	52                   	push   edx
c00014ef:	89 da                	mov    edx,ebx
c00014f1:	29 ca                	sub    edx,ecx
c00014f3:	89 d1                	mov    ecx,edx
c00014f5:	83 e9 04             	sub    ecx,0x4
c00014f8:	51                   	push   ecx
c00014f9:	6a 00                	push   0x0
c00014fb:	50                   	push   eax
c00014fc:	e8 7f f0 ff ff       	call   c0000580 <memset>
c0001501:	83 c4 10             	add    esp,0x10
c0001504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001508:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000150d:	75 14                	jne    c0001523 <iALLOc+0x143>
c000150f:	8d 04 37             	lea    eax,[edi+esi*1]
c0001512:	29 f3                	sub    ebx,esi
c0001514:	8d 48 08             	lea    ecx,[eax+0x8]
c0001517:	83 cb 01             	or     ebx,0x1
c000151a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000151e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001521:	89 f3                	mov    ebx,esi
c0001523:	31 c0                	xor    eax,eax
c0001525:	4d                   	dec    ebp
c0001526:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000152a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000152d:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001530:	39 c5                	cmp    ebp,eax
c0001532:	74 34                	je     c0001568 <iALLOc+0x188>
c0001534:	89 d1                	mov    ecx,edx
c0001536:	85 d2                	test   edx,edx
c0001538:	75 1f                	jne    c0001559 <iALLOc+0x179>
c000153a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000153e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0001541:	89 ce                	mov    esi,ecx
c0001543:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0001547:	b9 10 00 00 00       	mov    ecx,0x10
c000154c:	83 c6 0b             	add    esi,0xb
c000154f:	83 fe 0f             	cmp    esi,0xf
c0001552:	76 05                	jbe    c0001559 <iALLOc+0x179>
c0001554:	83 e6 f8             	and    esi,0xfffffff8
c0001557:	89 f1                	mov    ecx,esi
c0001559:	89 ce                	mov    esi,ecx
c000155b:	29 cb                	sub    ebx,ecx
c000155d:	40                   	inc    eax
c000155e:	83 ce 01             	or     esi,0x1
c0001561:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001564:	01 cf                	add    edi,ecx
c0001566:	eb be                	jmp    c0001526 <iALLOc+0x146>
c0001568:	83 cb 01             	or     ebx,0x1
c000156b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000156e:	eb 08                	jmp    c0001578 <iALLOc+0x198>
c0001570:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000157c:	83 c4 2c             	add    esp,0x2c
c000157f:	5b                   	pop    ebx
c0001580:	5e                   	pop    esi
c0001581:	5f                   	pop    edi
c0001582:	5d                   	pop    ebp
c0001583:	c3                   	ret    

c0001584 <dlrealloc>:
c0001584:	55                   	push   ebp
c0001585:	57                   	push   edi
c0001586:	56                   	push   esi
c0001587:	53                   	push   ebx
c0001588:	83 ec 1c             	sub    esp,0x1c
c000158b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000158f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001593:	85 db                	test   ebx,ebx
c0001595:	75 10                	jne    c00015a7 <dlrealloc+0x23>
c0001597:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000159b:	83 c4 1c             	add    esp,0x1c
c000159e:	5b                   	pop    ebx
c000159f:	5e                   	pop    esi
c00015a0:	5f                   	pop    edi
c00015a1:	5d                   	pop    ebp
c00015a2:	e9 ac fa ff ff       	jmp    c0001053 <dlmalloc>
c00015a7:	83 f8 df             	cmp    eax,0xffffffdf
c00015aa:	76 07                	jbe    c00015b3 <dlrealloc+0x2f>
c00015ac:	31 db                	xor    ebx,ebx
c00015ae:	e9 6b 01 00 00       	jmp    c000171e <dlrealloc+0x19a>
c00015b3:	83 c0 0b             	add    eax,0xb
c00015b6:	bd 10 00 00 00       	mov    ebp,0x10
c00015bb:	83 f8 0f             	cmp    eax,0xf
c00015be:	76 05                	jbe    c00015c5 <dlrealloc+0x41>
c00015c0:	83 e0 f8             	and    eax,0xfffffff8
c00015c3:	89 c5                	mov    ebp,eax
c00015c5:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015cb:	89 ce                	mov    esi,ecx
c00015cd:	83 e6 fc             	and    esi,0xfffffffc
c00015d0:	f6 c1 02             	test   cl,0x2
c00015d3:	75 d7                	jne    c00015ac <dlrealloc+0x28>
c00015d5:	39 f5                	cmp    ebp,esi
c00015d7:	0f 86 04 01 00 00    	jbe    c00016e1 <dlrealloc+0x15d>
c00015dd:	8d 14 37             	lea    edx,[edi+esi*1]
c00015e0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00015e3:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c00015e9:	75 33                	jne    c000161e <dlrealloc+0x9a>
c00015eb:	83 e0 fc             	and    eax,0xfffffffc
c00015ee:	01 f0                	add    eax,esi
c00015f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f4:	8d 45 10             	lea    eax,[ebp+0x10]
c00015f7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00015fb:	77 49                	ja     c0001646 <dlrealloc+0xc2>
c00015fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001601:	83 e1 01             	and    ecx,0x1
c0001604:	01 ef                	add    edi,ebp
c0001606:	09 e9                	or     ecx,ebp
c0001608:	29 e8                	sub    eax,ebp
c000160a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000160d:	83 c8 01             	or     eax,0x1
c0001610:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c0001616:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001619:	e9 00 01 00 00       	jmp    c000171e <dlrealloc+0x19a>
c000161e:	89 c1                	mov    ecx,eax
c0001620:	83 e1 fe             	and    ecx,0xfffffffe
c0001623:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c0001628:	75 1c                	jne    c0001646 <dlrealloc+0xc2>
c000162a:	83 e0 fc             	and    eax,0xfffffffc
c000162d:	01 f0                	add    eax,esi
c000162f:	39 c5                	cmp    ebp,eax
c0001631:	77 13                	ja     c0001646 <dlrealloc+0xc2>
c0001633:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001636:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001639:	89 c6                	mov    esi,eax
c000163b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000163e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001641:	e9 9b 00 00 00       	jmp    c00016e1 <dlrealloc+0x15d>
c0001646:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000164a:	8d 45 f9             	lea    eax,[ebp-0x7]
c000164d:	83 ec 0c             	sub    esp,0xc
c0001650:	50                   	push   eax
c0001651:	e8 fd f9 ff ff       	call   c0001053 <dlmalloc>
c0001656:	83 c4 10             	add    esp,0x10
c0001659:	85 c0                	test   eax,eax
c000165b:	0f 84 4b ff ff ff    	je     c00015ac <dlrealloc+0x28>
c0001661:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001665:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001668:	39 ca                	cmp    edx,ecx
c000166a:	75 0a                	jne    c0001676 <dlrealloc+0xf2>
c000166c:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000166f:	83 e0 fc             	and    eax,0xfffffffc
c0001672:	01 c6                	add    esi,eax
c0001674:	eb 6b                	jmp    c00016e1 <dlrealloc+0x15d>
c0001676:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001679:	83 f9 27             	cmp    ecx,0x27
c000167c:	76 08                	jbe    c0001686 <dlrealloc+0x102>
c000167e:	89 de                	mov    esi,ebx
c0001680:	89 c7                	mov    edi,eax
c0001682:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001684:	eb 43                	jmp    c00016c9 <dlrealloc+0x145>
c0001686:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001688:	89 10                	mov    DWORD PTR [eax],edx
c000168a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000168d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001690:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001693:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001696:	83 f9 13             	cmp    ecx,0x13
c0001699:	76 2e                	jbe    c00016c9 <dlrealloc+0x145>
c000169b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000169e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00016a1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00016a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00016a7:	83 f9 1b             	cmp    ecx,0x1b
c00016aa:	76 1d                	jbe    c00016c9 <dlrealloc+0x145>
c00016ac:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00016af:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016b2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016b8:	83 f9 23             	cmp    ecx,0x23
c00016bb:	76 0c                	jbe    c00016c9 <dlrealloc+0x145>
c00016bd:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016c0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016c3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016cd:	83 ec 0c             	sub    esp,0xc
c00016d0:	53                   	push   ebx
c00016d1:	e8 1f f6 ff ff       	call   c0000cf5 <dlfree>
c00016d6:	83 c4 10             	add    esp,0x10
c00016d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016dd:	89 c3                	mov    ebx,eax
c00016df:	eb 3d                	jmp    c000171e <dlrealloc+0x19a>
c00016e1:	89 f2                	mov    edx,esi
c00016e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016e9:	29 ea                	sub    edx,ebp
c00016eb:	83 e1 01             	and    ecx,0x1
c00016ee:	83 fa 0f             	cmp    edx,0xf
c00016f1:	77 0b                	ja     c00016fe <dlrealloc+0x17a>
c00016f3:	09 ce                	or     esi,ecx
c00016f5:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016f8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016fc:	eb 20                	jmp    c000171e <dlrealloc+0x19a>
c00016fe:	01 ef                	add    edi,ebp
c0001700:	83 ca 01             	or     edx,0x1
c0001703:	09 cd                	or     ebp,ecx
c0001705:	83 ec 0c             	sub    esp,0xc
c0001708:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000170b:	83 c7 08             	add    edi,0x8
c000170e:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001711:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001715:	57                   	push   edi
c0001716:	e8 da f5 ff ff       	call   c0000cf5 <dlfree>
c000171b:	83 c4 10             	add    esp,0x10
c000171e:	83 c4 1c             	add    esp,0x1c
c0001721:	89 d8                	mov    eax,ebx
c0001723:	5b                   	pop    ebx
c0001724:	5e                   	pop    esi
c0001725:	5f                   	pop    edi
c0001726:	5d                   	pop    ebp
c0001727:	c3                   	ret    

c0001728 <dlmemalign>:
c0001728:	55                   	push   ebp
c0001729:	57                   	push   edi
c000172a:	56                   	push   esi
c000172b:	53                   	push   ebx
c000172c:	83 ec 0c             	sub    esp,0xc
c000172f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001737:	83 fa 08             	cmp    edx,0x8
c000173a:	77 10                	ja     c000174c <dlmemalign+0x24>
c000173c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001740:	83 c4 0c             	add    esp,0xc
c0001743:	5b                   	pop    ebx
c0001744:	5e                   	pop    esi
c0001745:	5f                   	pop    edi
c0001746:	5d                   	pop    ebp
c0001747:	e9 07 f9 ff ff       	jmp    c0001053 <dlmalloc>
c000174c:	bf 10 00 00 00       	mov    edi,0x10
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	76 13                	jbe    c0001769 <dlmemalign+0x41>
c0001756:	c4 e2 70 f3 ca       	blsr   ecx,edx
c000175b:	75 04                	jne    c0001761 <dlmemalign+0x39>
c000175d:	89 d7                	mov    edi,edx
c000175f:	eb 08                	jmp    c0001769 <dlmemalign+0x41>
c0001761:	39 d7                	cmp    edi,edx
c0001763:	73 04                	jae    c0001769 <dlmemalign+0x41>
c0001765:	01 ff                	add    edi,edi
c0001767:	eb f8                	jmp    c0001761 <dlmemalign+0x39>
c0001769:	83 f8 df             	cmp    eax,0xffffffdf
c000176c:	76 07                	jbe    c0001775 <dlmemalign+0x4d>
c000176e:	31 c0                	xor    eax,eax
c0001770:	e9 ce 00 00 00       	jmp    c0001843 <dlmemalign+0x11b>
c0001775:	83 c0 0b             	add    eax,0xb
c0001778:	bd 10 00 00 00       	mov    ebp,0x10
c000177d:	83 f8 0f             	cmp    eax,0xf
c0001780:	76 05                	jbe    c0001787 <dlmemalign+0x5f>
c0001782:	83 e0 f8             	and    eax,0xfffffff8
c0001785:	89 c5                	mov    ebp,eax
c0001787:	83 ec 0c             	sub    esp,0xc
c000178a:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000178e:	50                   	push   eax
c000178f:	e8 bf f8 ff ff       	call   c0001053 <dlmalloc>
c0001794:	83 c4 10             	add    esp,0x10
c0001797:	89 c1                	mov    ecx,eax
c0001799:	85 c0                	test   eax,eax
c000179b:	74 d1                	je     c000176e <dlmemalign+0x46>
c000179d:	31 d2                	xor    edx,edx
c000179f:	8d 70 f8             	lea    esi,[eax-0x8]
c00017a2:	f7 f7                	div    edi
c00017a4:	85 d2                	test   edx,edx
c00017a6:	74 62                	je     c000180a <dlmemalign+0xe2>
c00017a8:	89 f8                	mov    eax,edi
c00017aa:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00017ae:	f7 d8                	neg    eax
c00017b0:	21 c3                	and    ebx,eax
c00017b2:	83 eb 08             	sub    ebx,0x8
c00017b5:	89 d8                	mov    eax,ebx
c00017b7:	29 f0                	sub    eax,esi
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	77 02                	ja     c00017c0 <dlmemalign+0x98>
c00017be:	01 fb                	add    ebx,edi
c00017c0:	89 d8                	mov    eax,ebx
c00017c2:	29 f0                	sub    eax,esi
c00017c4:	89 c6                	mov    esi,eax
c00017c6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c9:	89 c2                	mov    edx,eax
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	29 f2                	sub    edx,esi
c00017d0:	a8 02                	test   al,0x2
c00017d2:	74 10                	je     c00017e4 <dlmemalign+0xbc>
c00017d4:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017d7:	83 ca 02             	or     edx,0x2
c00017da:	8d 43 08             	lea    eax,[ebx+0x8]
c00017dd:	89 33                	mov    DWORD PTR [ebx],esi
c00017df:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017e2:	eb 5f                	jmp    c0001843 <dlmemalign+0x11b>
c00017e4:	89 d0                	mov    eax,edx
c00017e6:	83 ec 0c             	sub    esp,0xc
c00017e9:	83 c8 01             	or     eax,0x1
c00017ec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ef:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017f4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017f7:	83 e0 01             	and    eax,0x1
c00017fa:	09 f0                	or     eax,esi
c00017fc:	89 de                	mov    esi,ebx
c00017fe:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001801:	51                   	push   ecx
c0001802:	e8 ee f4 ff ff       	call   c0000cf5 <dlfree>
c0001807:	83 c4 10             	add    esp,0x10
c000180a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180d:	a8 02                	test   al,0x2
c000180f:	75 2f                	jne    c0001840 <dlmemalign+0x118>
c0001811:	83 e0 fc             	and    eax,0xfffffffc
c0001814:	8d 55 10             	lea    edx,[ebp+0x10]
c0001817:	39 c2                	cmp    edx,eax
c0001819:	73 25                	jae    c0001840 <dlmemalign+0x118>
c000181b:	29 e8                	sub    eax,ebp
c000181d:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	83 c8 01             	or     eax,0x1
c0001826:	83 c2 08             	add    edx,0x8
c0001829:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000182c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000182f:	83 e0 01             	and    eax,0x1
c0001832:	09 c5                	or     ebp,eax
c0001834:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001837:	52                   	push   edx
c0001838:	e8 b8 f4 ff ff       	call   c0000cf5 <dlfree>
c000183d:	83 c4 10             	add    esp,0x10
c0001840:	8d 46 08             	lea    eax,[esi+0x8]
c0001843:	83 c4 0c             	add    esp,0xc
c0001846:	5b                   	pop    ebx
c0001847:	5e                   	pop    esi
c0001848:	5f                   	pop    edi
c0001849:	5d                   	pop    ebp
c000184a:	c3                   	ret    

c000184b <dlcalloc>:
c000184b:	53                   	push   ebx
c000184c:	83 ec 14             	sub    esp,0x14
c000184f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001853:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001858:	50                   	push   eax
c0001859:	e8 f5 f7 ff ff       	call   c0001053 <dlmalloc>
c000185e:	83 c4 10             	add    esp,0x10
c0001861:	89 c3                	mov    ebx,eax
c0001863:	85 c0                	test   eax,eax
c0001865:	74 77                	je     c00018de <dlcalloc+0x93>
c0001867:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000186a:	89 d0                	mov    eax,edx
c000186c:	83 e0 fc             	and    eax,0xfffffffc
c000186f:	80 e2 02             	and    dl,0x2
c0001872:	75 5a                	jne    c00018ce <dlcalloc+0x83>
c0001874:	83 e8 04             	sub    eax,0x4
c0001877:	83 f8 27             	cmp    eax,0x27
c000187a:	76 03                	jbe    c000187f <dlcalloc+0x34>
c000187c:	51                   	push   ecx
c000187d:	eb 53                	jmp    c00018d2 <dlcalloc+0x87>
c000187f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001885:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000188c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001893:	83 f8 13             	cmp    eax,0x13
c0001896:	76 46                	jbe    c00018de <dlcalloc+0x93>
c0001898:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000189f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00018a6:	83 f8 1b             	cmp    eax,0x1b
c00018a9:	76 33                	jbe    c00018de <dlcalloc+0x93>
c00018ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00018b2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018b9:	83 f8 23             	cmp    eax,0x23
c00018bc:	76 20                	jbe    c00018de <dlcalloc+0x93>
c00018be:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018c5:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018cc:	eb 10                	jmp    c00018de <dlcalloc+0x93>
c00018ce:	52                   	push   edx
c00018cf:	83 e8 08             	sub    eax,0x8
c00018d2:	50                   	push   eax
c00018d3:	6a 00                	push   0x0
c00018d5:	53                   	push   ebx
c00018d6:	e8 a5 ec ff ff       	call   c0000580 <memset>
c00018db:	83 c4 10             	add    esp,0x10
c00018de:	83 c4 08             	add    esp,0x8
c00018e1:	89 d8                	mov    eax,ebx
c00018e3:	5b                   	pop    ebx
c00018e4:	c3                   	ret    

c00018e5 <dlcfree>:
c00018e5:	e9 0b f4 ff ff       	jmp    c0000cf5 <dlfree>

c00018ea <dlindependent_calloc>:
c00018ea:	83 ec 28             	sub    esp,0x28
c00018ed:	b9 03 00 00 00       	mov    ecx,0x3
c00018f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001902:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001906:	e8 d5 fa ff ff       	call   c00013e0 <iALLOc>
c000190b:	83 c4 2c             	add    esp,0x2c
c000190e:	c3                   	ret    

c000190f <dlindependent_comalloc>:
c000190f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001917:	31 c9                	xor    ecx,ecx
c0001919:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000191d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001921:	e9 ba fa ff ff       	jmp    c00013e0 <iALLOc>

c0001926 <dlvalloc>:
c0001926:	83 ec 0c             	sub    esp,0xc
c0001929:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001930:	75 0a                	jne    c000193c <dlvalloc+0x16>
c0001932:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001937:	e8 d2 f2 ff ff       	call   c0000c0e <malloc_consolidate>
c000193c:	50                   	push   eax
c000193d:	50                   	push   eax
c000193e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001942:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c0001948:	e8 db fd ff ff       	call   c0001728 <dlmemalign>
c000194d:	83 c4 1c             	add    esp,0x1c
c0001950:	c3                   	ret    

c0001951 <dlpvalloc>:
c0001951:	83 ec 0c             	sub    esp,0xc
c0001954:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000195b:	75 0a                	jne    c0001967 <dlpvalloc+0x16>
c000195d:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001962:	e8 a7 f2 ff ff       	call   c0000c0e <malloc_consolidate>
c0001967:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c000196c:	52                   	push   edx
c000196d:	52                   	push   edx
c000196e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001972:	89 c1                	mov    ecx,eax
c0001974:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001978:	f7 d9                	neg    ecx
c000197a:	21 ca                	and    edx,ecx
c000197c:	52                   	push   edx
c000197d:	50                   	push   eax
c000197e:	e8 a5 fd ff ff       	call   c0001728 <dlmemalign>
c0001983:	83 c4 1c             	add    esp,0x1c
c0001986:	c3                   	ret    

c0001987 <dlmalloc_trim>:
c0001987:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000198c:	e8 7d f2 ff ff       	call   c0000c0e <malloc_consolidate>
c0001991:	31 c0                	xor    eax,eax
c0001993:	c3                   	ret    

c0001994 <dlmalloc_usable_size>:
c0001994:	53                   	push   ebx
c0001995:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001999:	31 c0                	xor    eax,eax
c000199b:	85 c9                	test   ecx,ecx
c000199d:	74 24                	je     c00019c3 <dlmalloc_usable_size+0x2f>
c000199f:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00019a2:	f6 c2 02             	test   dl,0x2
c00019a5:	74 08                	je     c00019af <dlmalloc_usable_size+0x1b>
c00019a7:	83 e2 fc             	and    edx,0xfffffffc
c00019aa:	8d 42 f8             	lea    eax,[edx-0x8]
c00019ad:	eb 14                	jmp    c00019c3 <dlmalloc_usable_size+0x2f>
c00019af:	89 d3                	mov    ebx,edx
c00019b1:	31 c0                	xor    eax,eax
c00019b3:	83 e3 fe             	and    ebx,0xfffffffe
c00019b6:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019bb:	74 06                	je     c00019c3 <dlmalloc_usable_size+0x2f>
c00019bd:	83 e2 fc             	and    edx,0xfffffffc
c00019c0:	8d 42 fc             	lea    eax,[edx-0x4]
c00019c3:	5b                   	pop    ebx
c00019c4:	c3                   	ret    

c00019c5 <dlmallinfo>:
c00019c5:	55                   	push   ebp
c00019c6:	57                   	push   edi
c00019c7:	56                   	push   esi
c00019c8:	53                   	push   ebx
c00019c9:	83 ec 08             	sub    esp,0x8
c00019cc:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c00019d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019d7:	75 0a                	jne    c00019e3 <dlmallinfo+0x1e>
c00019d9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00019de:	e8 2b f2 ff ff       	call   c0000c0e <malloc_consolidate>
c00019e3:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c00019e8:	31 ed                	xor    ebp,ebp
c00019ea:	31 c9                	xor    ecx,ecx
c00019ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019ef:	83 e0 fc             	and    eax,0xfffffffc
c00019f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019f6:	31 c0                	xor    eax,eax
c00019f8:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c00019ff:	85 d2                	test   edx,edx
c0001a01:	74 0e                	je     c0001a11 <dlmallinfo+0x4c>
c0001a03:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a06:	45                   	inc    ebp
c0001a07:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a0a:	83 e6 fc             	and    esi,0xfffffffc
c0001a0d:	01 f1                	add    ecx,esi
c0001a0f:	eb ee                	jmp    c00019ff <dlmallinfo+0x3a>
c0001a11:	40                   	inc    eax
c0001a12:	83 f8 0a             	cmp    eax,0xa
c0001a15:	75 e1                	jne    c00019f8 <dlmallinfo+0x33>
c0001a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a1b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a22:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a25:	b8 34 31 02 c0       	mov    eax,0xc0023134
c0001a2a:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a2d:	39 f0                	cmp    eax,esi
c0001a2f:	74 10                	je     c0001a41 <dlmallinfo+0x7c>
c0001a31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a34:	ff 04 24             	inc    DWORD PTR [esp]
c0001a37:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a3a:	83 e7 fc             	and    edi,0xfffffffc
c0001a3d:	01 fa                	add    edx,edi
c0001a3f:	eb ec                	jmp    c0001a2d <dlmallinfo+0x68>
c0001a41:	83 c0 08             	add    eax,0x8
c0001a44:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c0001a49:	75 df                	jne    c0001a2a <dlmallinfo+0x65>
c0001a4b:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a51:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001a56:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a59:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a5c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a5f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a62:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a68:	89 03                	mov    DWORD PTR [ebx],eax
c0001a6a:	29 d0                	sub    eax,edx
c0001a6c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a6f:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a82:	89 d8                	mov    eax,ebx
c0001a84:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a8a:	83 c4 08             	add    esp,0x8
c0001a8d:	5b                   	pop    ebx
c0001a8e:	5e                   	pop    esi
c0001a8f:	5f                   	pop    edi
c0001a90:	5d                   	pop    ebp
c0001a91:	c2 04 00             	ret    0x4

c0001a94 <dlmalloc_stats>:
c0001a94:	83 ec 30             	sub    esp,0x30
c0001a97:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a9b:	50                   	push   eax
c0001a9c:	e8 24 ff ff ff       	call   c00019c5 <dlmallinfo>
c0001aa1:	83 c4 30             	add    esp,0x30
c0001aa4:	c3                   	ret    

c0001aa5 <dlmallopt>:
c0001aa5:	56                   	push   esi
c0001aa6:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001aab:	53                   	push   ebx
c0001aac:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ab4:	e8 55 f1 ff ff       	call   c0000c0e <malloc_consolidate>
c0001ab9:	8d 46 04             	lea    eax,[esi+0x4]
c0001abc:	83 f8 05             	cmp    eax,0x5
c0001abf:	77 67                	ja     c0001b28 <dlmallopt+0x83>
c0001ac1:	ff 24 85 a4 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe125c]
c0001ac8:	83 fb 50             	cmp    ebx,0x50
c0001acb:	77 5b                	ja     c0001b28 <dlmallopt+0x83>
c0001acd:	ba 08 00 00 00       	mov    edx,0x8
c0001ad2:	85 db                	test   ebx,ebx
c0001ad4:	74 12                	je     c0001ae8 <dlmallopt+0x43>
c0001ad6:	83 c3 0b             	add    ebx,0xb
c0001ad9:	ba 10 00 00 00       	mov    edx,0x10
c0001ade:	83 fb 0f             	cmp    ebx,0xf
c0001ae1:	76 05                	jbe    c0001ae8 <dlmallopt+0x43>
c0001ae3:	89 da                	mov    edx,ebx
c0001ae5:	83 e2 f8             	and    edx,0xfffffff8
c0001ae8:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001aed:	83 e0 03             	and    eax,0x3
c0001af0:	09 d0                	or     eax,edx
c0001af2:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001af7:	eb 31                	jmp    c0001b2a <dlmallopt+0x85>
c0001af9:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001aff:	eb 06                	jmp    c0001b07 <dlmallopt+0x62>
c0001b01:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001b07:	be 01 00 00 00       	mov    esi,0x1
c0001b0c:	eb 1c                	jmp    c0001b2a <dlmallopt+0x85>
c0001b0e:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001b14:	eb f1                	jmp    c0001b07 <dlmallopt+0x62>
c0001b16:	31 f6                	xor    esi,esi
c0001b18:	85 db                	test   ebx,ebx
c0001b1a:	75 0e                	jne    c0001b2a <dlmallopt+0x85>
c0001b1c:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001b26:	eb df                	jmp    c0001b07 <dlmallopt+0x62>
c0001b28:	31 f6                	xor    esi,esi
c0001b2a:	89 f0                	mov    eax,esi
c0001b2c:	5b                   	pop    ebx
c0001b2d:	5e                   	pop    esi
c0001b2e:	c3                   	ret    
c0001b2f:	90                   	nop

c0001b30 <isblank>:
c0001b30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b35:	74 09                	je     c0001b40 <isblank+0x10>
c0001b37:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b3c:	75 0a                	jne    c0001b48 <isblank+0x18>
c0001b3e:	66 90                	xchg   ax,ax
c0001b40:	b8 01 00 00 00       	mov    eax,0x1
c0001b45:	c3                   	ret    
c0001b46:	66 90                	xchg   ax,ax
c0001b48:	b8 00 00 00 00       	mov    eax,0x0
c0001b4d:	c3                   	ret    
c0001b4e:	66 90                	xchg   ax,ax

c0001b50 <iscntrl>:
c0001b50:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b55:	7e 09                	jle    c0001b60 <iscntrl+0x10>
c0001b57:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b5c:	75 0a                	jne    c0001b68 <iscntrl+0x18>
c0001b5e:	66 90                	xchg   ax,ax
c0001b60:	b8 01 00 00 00       	mov    eax,0x1
c0001b65:	c3                   	ret    
c0001b66:	66 90                	xchg   ax,ax
c0001b68:	b8 00 00 00 00       	mov    eax,0x0
c0001b6d:	c3                   	ret    
c0001b6e:	66 90                	xchg   ax,ax

c0001b70 <isdigit>:
c0001b70:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b75:	7e 0d                	jle    c0001b84 <isdigit+0x14>
c0001b77:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b7c:	7f 06                	jg     c0001b84 <isdigit+0x14>
c0001b7e:	b8 01 00 00 00       	mov    eax,0x1
c0001b83:	c3                   	ret    
c0001b84:	b8 00 00 00 00       	mov    eax,0x0
c0001b89:	c3                   	ret    
c0001b8a:	66 90                	xchg   ax,ax

c0001b8c <islower>:
c0001b8c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b91:	7e 0d                	jle    c0001ba0 <islower+0x14>
c0001b93:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b98:	7f 06                	jg     c0001ba0 <islower+0x14>
c0001b9a:	b8 01 00 00 00       	mov    eax,0x1
c0001b9f:	c3                   	ret    
c0001ba0:	b8 00 00 00 00       	mov    eax,0x0
c0001ba5:	c3                   	ret    
c0001ba6:	66 90                	xchg   ax,ax

c0001ba8 <isspace>:
c0001ba8:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bad:	7c 19                	jl     c0001bc8 <isspace+0x20>
c0001baf:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001bb4:	7e 0a                	jle    c0001bc0 <isspace+0x18>
c0001bb6:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bbb:	75 0b                	jne    c0001bc8 <isspace+0x20>
c0001bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0001bc0:	b8 01 00 00 00       	mov    eax,0x1
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax
c0001bc8:	b8 00 00 00 00       	mov    eax,0x0
c0001bcd:	c3                   	ret    
c0001bce:	66 90                	xchg   ax,ax

c0001bd0 <isupper>:
c0001bd0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001bd5:	7e 0d                	jle    c0001be4 <isupper+0x14>
c0001bd7:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001bdc:	7f 06                	jg     c0001be4 <isupper+0x14>
c0001bde:	b8 01 00 00 00       	mov    eax,0x1
c0001be3:	c3                   	ret    
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <isalpha>:
c0001bec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bf0:	e8 db ff ff ff       	call   c0001bd0 <isupper>
c0001bf5:	83 c4 04             	add    esp,0x4
c0001bf8:	85 c0                	test   eax,eax
c0001bfa:	75 10                	jne    c0001c0c <isalpha+0x20>
c0001bfc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c00:	e8 87 ff ff ff       	call   c0001b8c <islower>
c0001c05:	83 c4 04             	add    esp,0x4
c0001c08:	85 c0                	test   eax,eax
c0001c0a:	74 08                	je     c0001c14 <isalpha+0x28>
c0001c0c:	b8 01 00 00 00       	mov    eax,0x1
c0001c11:	c3                   	ret    
c0001c12:	66 90                	xchg   ax,ax
c0001c14:	b8 00 00 00 00       	mov    eax,0x0
c0001c19:	c3                   	ret    
c0001c1a:	66 90                	xchg   ax,ax

c0001c1c <isalnum>:
c0001c1c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c20:	e8 c7 ff ff ff       	call   c0001bec <isalpha>
c0001c25:	83 c4 04             	add    esp,0x4
c0001c28:	85 c0                	test   eax,eax
c0001c2a:	75 10                	jne    c0001c3c <isalnum+0x20>
c0001c2c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c30:	e8 3b ff ff ff       	call   c0001b70 <isdigit>
c0001c35:	83 c4 04             	add    esp,0x4
c0001c38:	85 c0                	test   eax,eax
c0001c3a:	74 08                	je     c0001c44 <isalnum+0x28>
c0001c3c:	b8 01 00 00 00       	mov    eax,0x1
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax
c0001c44:	b8 00 00 00 00       	mov    eax,0x0
c0001c49:	c3                   	ret    
c0001c4a:	66 90                	xchg   ax,ax

c0001c4c <ispunct>:
c0001c4c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c50:	e8 c7 ff ff ff       	call   c0001c1c <isalnum>
c0001c55:	83 c4 04             	add    esp,0x4
c0001c58:	85 c0                	test   eax,eax
c0001c5a:	75 28                	jne    c0001c84 <ispunct+0x38>
c0001c5c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c60:	e8 43 ff ff ff       	call   c0001ba8 <isspace>
c0001c65:	83 c4 04             	add    esp,0x4
c0001c68:	85 c0                	test   eax,eax
c0001c6a:	75 18                	jne    c0001c84 <ispunct+0x38>
c0001c6c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c70:	e8 db fe ff ff       	call   c0001b50 <iscntrl>
c0001c75:	83 c4 04             	add    esp,0x4
c0001c78:	85 c0                	test   eax,eax
c0001c7a:	75 08                	jne    c0001c84 <ispunct+0x38>
c0001c7c:	b8 01 00 00 00       	mov    eax,0x1
c0001c81:	c3                   	ret    
c0001c82:	66 90                	xchg   ax,ax
c0001c84:	b8 00 00 00 00       	mov    eax,0x0
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax

c0001c8c <isgraph>:
c0001c8c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c90:	e8 87 ff ff ff       	call   c0001c1c <isalnum>
c0001c95:	83 c4 04             	add    esp,0x4
c0001c98:	85 c0                	test   eax,eax
c0001c9a:	75 10                	jne    c0001cac <isgraph+0x20>
c0001c9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ca0:	e8 a7 ff ff ff       	call   c0001c4c <ispunct>
c0001ca5:	83 c4 04             	add    esp,0x4
c0001ca8:	85 c0                	test   eax,eax
c0001caa:	74 08                	je     c0001cb4 <isgraph+0x28>
c0001cac:	b8 01 00 00 00       	mov    eax,0x1
c0001cb1:	c3                   	ret    
c0001cb2:	66 90                	xchg   ax,ax
c0001cb4:	b8 00 00 00 00       	mov    eax,0x0
c0001cb9:	c3                   	ret    
c0001cba:	66 90                	xchg   ax,ax

c0001cbc <isprint>:
c0001cbc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc0:	e8 c7 ff ff ff       	call   c0001c8c <isgraph>
c0001cc5:	83 c4 04             	add    esp,0x4
c0001cc8:	85 c0                	test   eax,eax
c0001cca:	75 08                	jne    c0001cd4 <isprint+0x18>
c0001ccc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cd1:	75 09                	jne    c0001cdc <isprint+0x20>
c0001cd3:	90                   	nop
c0001cd4:	b8 01 00 00 00       	mov    eax,0x1
c0001cd9:	c3                   	ret    
c0001cda:	66 90                	xchg   ax,ax
c0001cdc:	b8 00 00 00 00       	mov    eax,0x0
c0001ce1:	c3                   	ret    
c0001ce2:	66 90                	xchg   ax,ax

c0001ce4 <isxdigit>:
c0001ce4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ce8:	e8 83 fe ff ff       	call   c0001b70 <isdigit>
c0001ced:	83 c4 04             	add    esp,0x4
c0001cf0:	85 c0                	test   eax,eax
c0001cf2:	75 20                	jne    c0001d14 <isxdigit+0x30>
c0001cf4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cf9:	7e 09                	jle    c0001d04 <isxdigit+0x20>
c0001cfb:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d00:	7e 12                	jle    c0001d14 <isxdigit+0x30>
c0001d02:	66 90                	xchg   ax,ax
c0001d04:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d09:	7e 11                	jle    c0001d1c <isxdigit+0x38>
c0001d0b:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d10:	7f 0a                	jg     c0001d1c <isxdigit+0x38>
c0001d12:	66 90                	xchg   ax,ax
c0001d14:	b8 01 00 00 00       	mov    eax,0x1
c0001d19:	c3                   	ret    
c0001d1a:	66 90                	xchg   ax,ax
c0001d1c:	b8 00 00 00 00       	mov    eax,0x0
c0001d21:	c3                   	ret    

c0001d22 <disk_status>:
c0001d22:	31 c0                	xor    eax,eax
c0001d24:	c3                   	ret    

c0001d25 <disk_initialize>:
c0001d25:	31 c0                	xor    eax,eax
c0001d27:	c3                   	ret    

c0001d28 <disk_read>:
c0001d28:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2d:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d39:	e9 fa 66 01 00       	jmp    c0018438 <fatWrapperReadDisk>

c0001d3e <disk_write>:
c0001d3e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d43:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d4f:	e9 24 67 01 00       	jmp    c0018478 <fatWrapperWriteDisk>

c0001d54 <disk_ioctl>:
c0001d54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d5d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d62:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d6e:	e9 45 67 01 00       	jmp    c00184b8 <fatWrapperIoctl>

c0001d73 <ld_word>:
c0001d73:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d77:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d7a:	c1 e2 08             	shl    edx,0x8
c0001d7d:	09 d0                	or     eax,edx
c0001d7f:	c3                   	ret    

c0001d80 <ld_dword>:
c0001d80:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d84:	89 d1                	mov    ecx,edx
c0001d86:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d8d:	c1 e1 08             	shl    ecx,0x8
c0001d90:	09 ca                	or     edx,ecx
c0001d92:	c1 e2 08             	shl    edx,0x8
c0001d95:	09 d0                	or     eax,edx
c0001d97:	c3                   	ret    

c0001d98 <st_word>:
c0001d98:	66 89 10             	mov    WORD PTR [eax],dx
c0001d9b:	c3                   	ret    

c0001d9c <st_dword>:
c0001d9c:	89 10                	mov    DWORD PTR [eax],edx
c0001d9e:	c3                   	ret    

c0001d9f <mem_cpy>:
c0001d9f:	85 c9                	test   ecx,ecx
c0001da1:	74 10                	je     c0001db3 <mem_cpy+0x14>
c0001da3:	57                   	push   edi
c0001da4:	01 c1                	add    ecx,eax
c0001da6:	89 c7                	mov    edi,eax
c0001da8:	56                   	push   esi
c0001da9:	89 d6                	mov    esi,edx
c0001dab:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001dac:	39 f9                	cmp    ecx,edi
c0001dae:	75 fb                	jne    c0001dab <mem_cpy+0xc>
c0001db0:	5e                   	pop    esi
c0001db1:	5f                   	pop    edi
c0001db2:	c3                   	ret    
c0001db3:	c3                   	ret    

c0001db4 <mem_set>:
c0001db4:	01 c1                	add    ecx,eax
c0001db6:	40                   	inc    eax
c0001db7:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001dba:	39 c8                	cmp    eax,ecx
c0001dbc:	75 f8                	jne    c0001db6 <mem_set+0x2>
c0001dbe:	c3                   	ret    

c0001dbf <mem_cmp>:
c0001dbf:	57                   	push   edi
c0001dc0:	56                   	push   esi
c0001dc1:	89 c6                	mov    esi,eax
c0001dc3:	53                   	push   ebx
c0001dc4:	46                   	inc    esi
c0001dc5:	42                   	inc    edx
c0001dc6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001dca:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001dce:	29 fb                	sub    ebx,edi
c0001dd0:	89 cf                	mov    edi,ecx
c0001dd2:	29 f7                	sub    edi,esi
c0001dd4:	01 c7                	add    edi,eax
c0001dd6:	74 04                	je     c0001ddc <mem_cmp+0x1d>
c0001dd8:	85 db                	test   ebx,ebx
c0001dda:	74 e8                	je     c0001dc4 <mem_cmp+0x5>
c0001ddc:	89 d8                	mov    eax,ebx
c0001dde:	5b                   	pop    ebx
c0001ddf:	5e                   	pop    esi
c0001de0:	5f                   	pop    edi
c0001de1:	c3                   	ret    

c0001de2 <chk_chr>:
c0001de2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001de5:	84 c9                	test   cl,cl
c0001de7:	74 07                	je     c0001df0 <chk_chr+0xe>
c0001de9:	39 d1                	cmp    ecx,edx
c0001deb:	74 03                	je     c0001df0 <chk_chr+0xe>
c0001ded:	40                   	inc    eax
c0001dee:	eb f2                	jmp    c0001de2 <chk_chr>
c0001df0:	89 c8                	mov    eax,ecx
c0001df2:	c3                   	ret    

c0001df3 <dbc_1st>:
c0001df3:	31 c0                	xor    eax,eax
c0001df5:	c3                   	ret    

c0001df6 <dbc_2nd>:
c0001df6:	31 c0                	xor    eax,eax
c0001df8:	c3                   	ret    

c0001df9 <tchar2uni>:
c0001df9:	55                   	push   ebp
c0001dfa:	89 c5                	mov    ebp,eax
c0001dfc:	57                   	push   edi
c0001dfd:	56                   	push   esi
c0001dfe:	53                   	push   ebx
c0001dff:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e01:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e03:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e06:	84 c9                	test   cl,cl
c0001e08:	78 0a                	js     c0001e14 <tchar2uni+0x1b>
c0001e0a:	0f b6 d1             	movzx  edx,cl
c0001e0d:	89 f3                	mov    ebx,esi
c0001e0f:	e9 a1 00 00 00       	jmp    c0001eb5 <tchar2uni+0xbc>
c0001e14:	88 ca                	mov    dl,cl
c0001e16:	83 e2 e0             	and    edx,0xffffffe0
c0001e19:	80 fa c0             	cmp    dl,0xc0
c0001e1c:	75 0c                	jne    c0001e2a <tchar2uni+0x31>
c0001e1e:	89 ca                	mov    edx,ecx
c0001e20:	b9 01 00 00 00       	mov    ecx,0x1
c0001e25:	83 e2 1f             	and    edx,0x1f
c0001e28:	eb 2e                	jmp    c0001e58 <tchar2uni+0x5f>
c0001e2a:	88 ca                	mov    dl,cl
c0001e2c:	83 e2 f0             	and    edx,0xfffffff0
c0001e2f:	80 fa e0             	cmp    dl,0xe0
c0001e32:	75 0c                	jne    c0001e40 <tchar2uni+0x47>
c0001e34:	89 ca                	mov    edx,ecx
c0001e36:	b9 02 00 00 00       	mov    ecx,0x2
c0001e3b:	83 e2 0f             	and    edx,0xf
c0001e3e:	eb 18                	jmp    c0001e58 <tchar2uni+0x5f>
c0001e40:	89 cf                	mov    edi,ecx
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	83 e7 f8             	and    edi,0xfffffff8
c0001e48:	89 f8                	mov    eax,edi
c0001e4a:	3c f0                	cmp    al,0xf0
c0001e4c:	75 6f                	jne    c0001ebd <tchar2uni+0xc4>
c0001e4e:	89 ca                	mov    edx,ecx
c0001e50:	b9 03 00 00 00       	mov    ecx,0x3
c0001e55:	83 e2 07             	and    edx,0x7
c0001e58:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e5c:	46                   	inc    esi
c0001e5d:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e60:	89 cf                	mov    edi,ecx
c0001e62:	83 e7 c0             	and    edi,0xffffffc0
c0001e65:	89 f8                	mov    eax,edi
c0001e67:	3c 80                	cmp    al,0x80
c0001e69:	75 4f                	jne    c0001eba <tchar2uni+0xc1>
c0001e6b:	c1 e2 06             	shl    edx,0x6
c0001e6e:	83 e1 3f             	and    ecx,0x3f
c0001e71:	09 ca                	or     edx,ecx
c0001e73:	39 de                	cmp    esi,ebx
c0001e75:	75 e5                	jne    c0001e5c <tchar2uni+0x63>
c0001e77:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e7d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e83:	76 35                	jbe    c0001eba <tchar2uni+0xc1>
c0001e85:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e88:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e8e:	77 2a                	ja     c0001eba <tchar2uni+0xc1>
c0001e90:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e96:	76 1d                	jbe    c0001eb5 <tchar2uni+0xbc>
c0001e98:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e9e:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ea4:	c1 e1 06             	shl    ecx,0x6
c0001ea7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ead:	09 ca                	or     edx,ecx
c0001eaf:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001eb5:	89 5d 00             	mov    DWORD PTR [ebp+0x0],ebx
c0001eb8:	eb 03                	jmp    c0001ebd <tchar2uni+0xc4>
c0001eba:	83 ca ff             	or     edx,0xffffffff
c0001ebd:	5b                   	pop    ebx
c0001ebe:	89 d0                	mov    eax,edx
c0001ec0:	5e                   	pop    esi
c0001ec1:	5f                   	pop    edi
c0001ec2:	5d                   	pop    ebp
c0001ec3:	c3                   	ret    

c0001ec4 <put_utf>:
c0001ec4:	83 f8 7f             	cmp    eax,0x7f
c0001ec7:	53                   	push   ebx
c0001ec8:	89 c3                	mov    ebx,eax
c0001eca:	b0 00                	mov    al,0x0
c0001ecc:	77 11                	ja     c0001edf <put_utf+0x1b>
c0001ece:	85 c9                	test   ecx,ecx
c0001ed0:	0f 84 e5 00 00 00    	je     c0001fbb <put_utf+0xf7>
c0001ed6:	88 1a                	mov    BYTE PTR [edx],bl
c0001ed8:	b0 01                	mov    al,0x1
c0001eda:	e9 dc 00 00 00       	jmp    c0001fbb <put_utf+0xf7>
c0001edf:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ee5:	77 23                	ja     c0001f0a <put_utf+0x46>
c0001ee7:	83 f9 01             	cmp    ecx,0x1
c0001eea:	0f 86 cb 00 00 00    	jbe    c0001fbb <put_utf+0xf7>
c0001ef0:	89 d8                	mov    eax,ebx
c0001ef2:	83 e3 3f             	and    ebx,0x3f
c0001ef5:	c1 e8 06             	shr    eax,0x6
c0001ef8:	83 cb 80             	or     ebx,0xffffff80
c0001efb:	83 c8 c0             	or     eax,0xffffffc0
c0001efe:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f01:	88 02                	mov    BYTE PTR [edx],al
c0001f03:	b0 02                	mov    al,0x2
c0001f05:	e9 b1 00 00 00       	jmp    c0001fbb <put_utf+0xf7>
c0001f0a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f10:	77 40                	ja     c0001f52 <put_utf+0x8e>
c0001f12:	83 f9 02             	cmp    ecx,0x2
c0001f15:	0f 86 a0 00 00 00    	jbe    c0001fbb <put_utf+0xf7>
c0001f1b:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f21:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f27:	0f 86 8e 00 00 00    	jbe    c0001fbb <put_utf+0xf7>
c0001f2d:	89 d8                	mov    eax,ebx
c0001f2f:	c1 e8 0c             	shr    eax,0xc
c0001f32:	83 c8 e0             	or     eax,0xffffffe0
c0001f35:	88 02                	mov    BYTE PTR [edx],al
c0001f37:	89 d8                	mov    eax,ebx
c0001f39:	83 e3 3f             	and    ebx,0x3f
c0001f3c:	c1 e8 06             	shr    eax,0x6
c0001f3f:	83 cb 80             	or     ebx,0xffffff80
c0001f42:	83 e0 3f             	and    eax,0x3f
c0001f45:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f48:	83 c8 80             	or     eax,0xffffff80
c0001f4b:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f4e:	b0 03                	mov    al,0x3
c0001f50:	eb 69                	jmp    c0001fbb <put_utf+0xf7>
c0001f52:	83 f9 03             	cmp    ecx,0x3
c0001f55:	76 64                	jbe    c0001fbb <put_utf+0xf7>
c0001f57:	89 d9                	mov    ecx,ebx
c0001f59:	0f b7 c3             	movzx  eax,bx
c0001f5c:	66 31 c9             	xor    cx,cx
c0001f5f:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f65:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f6b:	c1 e9 06             	shr    ecx,0x6
c0001f6e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f74:	77 43                	ja     c0001fb9 <put_utf+0xf5>
c0001f76:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f7c:	77 3b                	ja     c0001fb9 <put_utf+0xf5>
c0001f7e:	09 cb                	or     ebx,ecx
c0001f80:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f86:	89 d8                	mov    eax,ebx
c0001f88:	c1 e8 12             	shr    eax,0x12
c0001f8b:	83 c8 f0             	or     eax,0xfffffff0
c0001f8e:	88 02                	mov    BYTE PTR [edx],al
c0001f90:	89 d8                	mov    eax,ebx
c0001f92:	c1 e8 0c             	shr    eax,0xc
c0001f95:	83 e0 3f             	and    eax,0x3f
c0001f98:	83 c8 80             	or     eax,0xffffff80
c0001f9b:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	83 e3 3f             	and    ebx,0x3f
c0001fa3:	c1 e8 06             	shr    eax,0x6
c0001fa6:	83 cb 80             	or     ebx,0xffffff80
c0001fa9:	83 e0 3f             	and    eax,0x3f
c0001fac:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001faf:	83 c8 80             	or     eax,0xffffff80
c0001fb2:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001fb5:	b0 04                	mov    al,0x4
c0001fb7:	eb 02                	jmp    c0001fbb <put_utf+0xf7>
c0001fb9:	31 c0                	xor    eax,eax
c0001fbb:	5b                   	pop    ebx
c0001fbc:	c3                   	ret    

c0001fbd <clst2sect>:
c0001fbd:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001fc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001fc3:	83 ea 02             	sub    edx,0x2
c0001fc6:	39 ca                	cmp    edx,ecx
c0001fc8:	76 0d                	jbe    c0001fd7 <clst2sect+0x1a>
c0001fca:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001fce:	0f af d1             	imul   edx,ecx
c0001fd1:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001fd4:	89 d0                	mov    eax,edx
c0001fd6:	c3                   	ret    
c0001fd7:	31 c0                	xor    eax,eax
c0001fd9:	c3                   	ret    

c0001fda <pick_lfn>:
c0001fda:	55                   	push   ebp
c0001fdb:	57                   	push   edi
c0001fdc:	56                   	push   esi
c0001fdd:	89 d6                	mov    esi,edx
c0001fdf:	53                   	push   ebx
c0001fe0:	89 c3                	mov    ebx,eax
c0001fe2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe5:	e8 89 fd ff ff       	call   c0001d73 <ld_word>
c0001fea:	66 85 c0             	test   ax,ax
c0001fed:	74 04                	je     c0001ff3 <pick_lfn+0x19>
c0001fef:	31 c0                	xor    eax,eax
c0001ff1:	eb 5c                	jmp    c000204f <pick_lfn+0x75>
c0001ff3:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001ff6:	bd 01 00 00 00       	mov    ebp,0x1
c0001ffb:	31 ff                	xor    edi,edi
c0001ffd:	83 e1 bf             	and    ecx,0xffffffbf
c0002000:	49                   	dec    ecx
c0002001:	6b c9 0d             	imul   ecx,ecx,0xd
c0002004:	0f b6 87 00 ef 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1100]
c000200b:	01 f0                	add    eax,esi
c000200d:	e8 61 fd ff ff       	call   c0001d73 <ld_word>
c0002012:	66 85 ed             	test   bp,bp
c0002015:	74 11                	je     c0002028 <pick_lfn+0x4e>
c0002017:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000201d:	77 d0                	ja     c0001fef <pick_lfn+0x15>
c000201f:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0002023:	89 c5                	mov    ebp,eax
c0002025:	41                   	inc    ecx
c0002026:	eb 04                	jmp    c000202c <pick_lfn+0x52>
c0002028:	66 40                	inc    ax
c000202a:	75 c3                	jne    c0001fef <pick_lfn+0x15>
c000202c:	47                   	inc    edi
c000202d:	83 ff 0d             	cmp    edi,0xd
c0002030:	75 d2                	jne    c0002004 <pick_lfn+0x2a>
c0002032:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002035:	74 13                	je     c000204a <pick_lfn+0x70>
c0002037:	66 85 ed             	test   bp,bp
c000203a:	74 0e                	je     c000204a <pick_lfn+0x70>
c000203c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002042:	77 ab                	ja     c0001fef <pick_lfn+0x15>
c0002044:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000204a:	b8 01 00 00 00       	mov    eax,0x1
c000204f:	5b                   	pop    ebx
c0002050:	5e                   	pop    esi
c0002051:	5f                   	pop    edi
c0002052:	5d                   	pop    ebp
c0002053:	c3                   	ret    

c0002054 <put_lfn>:
c0002054:	55                   	push   ebp
c0002055:	31 ed                	xor    ebp,ebp
c0002057:	57                   	push   edi
c0002058:	89 d7                	mov    edi,edx
c000205a:	56                   	push   esi
c000205b:	31 f6                	xor    esi,esi
c000205d:	53                   	push   ebx
c000205e:	83 ec 08             	sub    esp,0x8
c0002061:	89 04 24             	mov    DWORD PTR [esp],eax
c0002064:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002068:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000206e:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002071:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002074:	31 d2                	xor    edx,edx
c0002076:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000207a:	e8 19 fd ff ff       	call   c0001d98 <st_word>
c000207f:	0f b6 d9             	movzx  ebx,cl
c0002082:	4b                   	dec    ebx
c0002083:	6b db 0d             	imul   ebx,ebx,0xd
c0002086:	66 83 fe ff          	cmp    si,0xffff
c000208a:	74 08                	je     c0002094 <put_lfn+0x40>
c000208c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208f:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002093:	43                   	inc    ebx
c0002094:	0f b6 85 00 ef 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1100]
c000209b:	0f b7 d6             	movzx  edx,si
c000209e:	01 f8                	add    eax,edi
c00020a0:	e8 f3 fc ff ff       	call   c0001d98 <st_word>
c00020a5:	66 85 f6             	test   si,si
c00020a8:	75 03                	jne    c00020ad <put_lfn+0x59>
c00020aa:	83 ce ff             	or     esi,0xffffffff
c00020ad:	45                   	inc    ebp
c00020ae:	83 fd 0d             	cmp    ebp,0xd
c00020b1:	75 d3                	jne    c0002086 <put_lfn+0x32>
c00020b3:	66 46                	inc    si
c00020b5:	74 0a                	je     c00020c1 <put_lfn+0x6d>
c00020b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00020ba:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00020bf:	75 09                	jne    c00020ca <put_lfn+0x76>
c00020c1:	88 c8                	mov    al,cl
c00020c3:	83 c8 40             	or     eax,0x40
c00020c6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00020ca:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020ce:	88 07                	mov    BYTE PTR [edi],al
c00020d0:	83 c4 08             	add    esp,0x8
c00020d3:	5b                   	pop    ebx
c00020d4:	5e                   	pop    esi
c00020d5:	5f                   	pop    edi
c00020d6:	5d                   	pop    ebp
c00020d7:	c3                   	ret    

c00020d8 <gen_numname>:
c00020d8:	57                   	push   edi
c00020d9:	89 cf                	mov    edi,ecx
c00020db:	b9 0b 00 00 00       	mov    ecx,0xb
c00020e0:	56                   	push   esi
c00020e1:	89 c6                	mov    esi,eax
c00020e3:	53                   	push   ebx
c00020e4:	83 ec 10             	sub    esp,0x10
c00020e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020eb:	e8 af fc ff ff       	call   c0001d9f <mem_cpy>
c00020f0:	83 fb 05             	cmp    ebx,0x5
c00020f3:	76 2d                	jbe    c0002122 <gen_numname+0x4a>
c00020f5:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020f8:	66 85 c0             	test   ax,ax
c00020fb:	74 25                	je     c0002122 <gen_numname+0x4a>
c00020fd:	83 c7 02             	add    edi,0x2
c0002100:	ba 10 00 00 00       	mov    edx,0x10
c0002105:	89 c1                	mov    ecx,eax
c0002107:	01 db                	add    ebx,ebx
c0002109:	66 d1 e8             	shr    ax,1
c000210c:	83 e1 01             	and    ecx,0x1
c000210f:	01 cb                	add    ebx,ecx
c0002111:	0f ba e3 10          	bt     ebx,0x10
c0002115:	73 06                	jae    c000211d <gen_numname+0x45>
c0002117:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000211d:	4a                   	dec    edx
c000211e:	75 e5                	jne    c0002105 <gen_numname+0x2d>
c0002120:	eb d3                	jmp    c00020f5 <gen_numname+0x1d>
c0002122:	b8 07 00 00 00       	mov    eax,0x7
c0002127:	88 d9                	mov    cl,bl
c0002129:	83 e1 0f             	and    ecx,0xf
c000212c:	8d 51 30             	lea    edx,[ecx+0x30]
c000212f:	80 fa 39             	cmp    dl,0x39
c0002132:	76 03                	jbe    c0002137 <gen_numname+0x5f>
c0002134:	8d 51 37             	lea    edx,[ecx+0x37]
c0002137:	8d 48 ff             	lea    ecx,[eax-0x1]
c000213a:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000213e:	89 da                	mov    edx,ebx
c0002140:	c1 ea 04             	shr    edx,0x4
c0002143:	83 fb 0f             	cmp    ebx,0xf
c0002146:	76 06                	jbe    c000214e <gen_numname+0x76>
c0002148:	89 c8                	mov    eax,ecx
c000214a:	89 d3                	mov    ebx,edx
c000214c:	eb d9                	jmp    c0002127 <gen_numname+0x4f>
c000214e:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002153:	31 d2                	xor    edx,edx
c0002155:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002158:	8d 04 16             	lea    eax,[esi+edx*1]
c000215b:	39 ca                	cmp    edx,ecx
c000215d:	73 18                	jae    c0002177 <gen_numname+0x9f>
c000215f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002162:	3c 20                	cmp    al,0x20
c0002164:	74 11                	je     c0002177 <gen_numname+0x9f>
c0002166:	e8 88 fc ff ff       	call   c0001df3 <dbc_1st>
c000216b:	85 c0                	test   eax,eax
c000216d:	74 05                	je     c0002174 <gen_numname+0x9c>
c000216f:	39 d3                	cmp    ebx,edx
c0002171:	74 04                	je     c0002177 <gen_numname+0x9f>
c0002173:	42                   	inc    edx
c0002174:	42                   	inc    edx
c0002175:	eb e1                	jmp    c0002158 <gen_numname+0x80>
c0002177:	b0 20                	mov    al,0x20
c0002179:	83 f9 07             	cmp    ecx,0x7
c000217c:	77 05                	ja     c0002183 <gen_numname+0xab>
c000217e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002182:	41                   	inc    ecx
c0002183:	42                   	inc    edx
c0002184:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002188:	83 fa 07             	cmp    edx,0x7
c000218b:	76 ea                	jbe    c0002177 <gen_numname+0x9f>
c000218d:	83 c4 10             	add    esp,0x10
c0002190:	5b                   	pop    ebx
c0002191:	5e                   	pop    esi
c0002192:	5f                   	pop    edi
c0002193:	c3                   	ret    

c0002194 <sum_sfn>:
c0002194:	31 c9                	xor    ecx,ecx
c0002196:	31 d2                	xor    edx,edx
c0002198:	d0 ca                	ror    dl,1
c000219a:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000219d:	41                   	inc    ecx
c000219e:	83 f9 0b             	cmp    ecx,0xb
c00021a1:	75 f5                	jne    c0002198 <sum_sfn+0x4>
c00021a3:	88 d0                	mov    al,dl
c00021a5:	c3                   	ret    

c00021a6 <get_ldnumber>:
c00021a6:	55                   	push   ebp
c00021a7:	57                   	push   edi
c00021a8:	56                   	push   esi
c00021a9:	53                   	push   ebx
c00021aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00021ac:	83 cb ff             	or     ebx,0xffffffff
c00021af:	85 d2                	test   edx,edx
c00021b1:	74 3e                	je     c00021f1 <get_ldnumber+0x4b>
c00021b3:	89 c5                	mov    ebp,eax
c00021b5:	89 d1                	mov    ecx,edx
c00021b7:	41                   	inc    ecx
c00021b8:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c00021bc:	89 f3                	mov    ebx,esi
c00021be:	80 fb 1f             	cmp    bl,0x1f
c00021c1:	76 05                	jbe    c00021c8 <get_ldnumber+0x22>
c00021c3:	80 fb 3a             	cmp    bl,0x3a
c00021c6:	75 ef                	jne    c00021b7 <get_ldnumber+0x11>
c00021c8:	89 f0                	mov    eax,esi
c00021ca:	31 db                	xor    ebx,ebx
c00021cc:	3c 3a                	cmp    al,0x3a
c00021ce:	75 21                	jne    c00021f1 <get_ldnumber+0x4b>
c00021d0:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00021d3:	83 cb ff             	or     ebx,0xffffffff
c00021d6:	8d 7e d0             	lea    edi,[esi-0x30]
c00021d9:	89 f8                	mov    eax,edi
c00021db:	3c 09                	cmp    al,0x9
c00021dd:	77 12                	ja     c00021f1 <get_ldnumber+0x4b>
c00021df:	83 c2 02             	add    edx,0x2
c00021e2:	39 d1                	cmp    ecx,edx
c00021e4:	75 0b                	jne    c00021f1 <get_ldnumber+0x4b>
c00021e6:	89 f0                	mov    eax,esi
c00021e8:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00021eb:	0f be d8             	movsx  ebx,al
c00021ee:	83 eb 30             	sub    ebx,0x30
c00021f1:	89 d8                	mov    eax,ebx
c00021f3:	5b                   	pop    ebx
c00021f4:	5e                   	pop    esi
c00021f5:	5f                   	pop    edi
c00021f6:	5d                   	pop    ebp
c00021f7:	c3                   	ret    

c00021f8 <validate>:
c00021f8:	56                   	push   esi
c00021f9:	89 d6                	mov    esi,edx
c00021fb:	53                   	push   ebx
c00021fc:	51                   	push   ecx
c00021fd:	85 c0                	test   eax,eax
c00021ff:	75 09                	jne    c000220a <validate+0x12>
c0002201:	b8 09 00 00 00       	mov    eax,0x9
c0002206:	31 c9                	xor    ecx,ecx
c0002208:	eb 2f                	jmp    c0002239 <validate+0x41>
c000220a:	89 c3                	mov    ebx,eax
c000220c:	8b 00                	mov    eax,DWORD PTR [eax]
c000220e:	85 c0                	test   eax,eax
c0002210:	74 ef                	je     c0002201 <validate+0x9>
c0002212:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002215:	74 ea                	je     c0002201 <validate+0x9>
c0002217:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000221b:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000221f:	75 e0                	jne    c0002201 <validate+0x9>
c0002221:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002225:	83 ec 0c             	sub    esp,0xc
c0002228:	50                   	push   eax
c0002229:	e8 f4 fa ff ff       	call   c0001d22 <disk_status>
c000222e:	83 c4 10             	add    esp,0x10
c0002231:	a8 01                	test   al,0x1
c0002233:	75 cc                	jne    c0002201 <validate+0x9>
c0002235:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002237:	31 c0                	xor    eax,eax
c0002239:	89 0e                	mov    DWORD PTR [esi],ecx
c000223b:	5a                   	pop    edx
c000223c:	5b                   	pop    ebx
c000223d:	5e                   	pop    esi
c000223e:	c3                   	ret    

c000223f <sync_window>:
c000223f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002243:	74 58                	je     c000229d <sync_window+0x5e>
c0002245:	56                   	push   esi
c0002246:	8d 70 34             	lea    esi,[eax+0x34]
c0002249:	53                   	push   ebx
c000224a:	89 c3                	mov    ebx,eax
c000224c:	51                   	push   ecx
c000224d:	6a 01                	push   0x1
c000224f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002252:	56                   	push   esi
c0002253:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002257:	50                   	push   eax
c0002258:	e8 e1 fa ff ff       	call   c0001d3e <disk_write>
c000225d:	83 c4 10             	add    esp,0x10
c0002260:	ba 01 00 00 00       	mov    edx,0x1
c0002265:	85 c0                	test   eax,eax
c0002267:	75 2e                	jne    c0002297 <sync_window+0x58>
c0002269:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000226c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000226f:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002273:	89 c1                	mov    ecx,eax
c0002275:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002278:	39 d1                	cmp    ecx,edx
c000227a:	73 19                	jae    c0002295 <sync_window+0x56>
c000227c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002280:	75 13                	jne    c0002295 <sync_window+0x56>
c0002282:	01 d0                	add    eax,edx
c0002284:	6a 01                	push   0x1
c0002286:	50                   	push   eax
c0002287:	56                   	push   esi
c0002288:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000228c:	50                   	push   eax
c000228d:	e8 ac fa ff ff       	call   c0001d3e <disk_write>
c0002292:	83 c4 10             	add    esp,0x10
c0002295:	31 d2                	xor    edx,edx
c0002297:	89 d0                	mov    eax,edx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    
c000229d:	31 d2                	xor    edx,edx
c000229f:	89 d0                	mov    eax,edx
c00022a1:	c3                   	ret    

c00022a2 <move_window>:
c00022a2:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00022a5:	74 3a                	je     c00022e1 <move_window+0x3f>
c00022a7:	56                   	push   esi
c00022a8:	89 d6                	mov    esi,edx
c00022aa:	53                   	push   ebx
c00022ab:	89 c3                	mov    ebx,eax
c00022ad:	51                   	push   ecx
c00022ae:	e8 8c ff ff ff       	call   c000223f <sync_window>
c00022b3:	85 c0                	test   eax,eax
c00022b5:	75 2d                	jne    c00022e4 <move_window+0x42>
c00022b7:	8d 43 34             	lea    eax,[ebx+0x34]
c00022ba:	6a 01                	push   0x1
c00022bc:	56                   	push   esi
c00022bd:	50                   	push   eax
c00022be:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00022c2:	50                   	push   eax
c00022c3:	e8 60 fa ff ff       	call   c0001d28 <disk_read>
c00022c8:	83 c4 10             	add    esp,0x10
c00022cb:	89 c2                	mov    edx,eax
c00022cd:	31 c0                	xor    eax,eax
c00022cf:	85 d2                	test   edx,edx
c00022d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00022d6:	0f 45 f2             	cmovne esi,edx
c00022d9:	0f 95 c0             	setne  al
c00022dc:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00022df:	eb 03                	jmp    c00022e4 <move_window+0x42>
c00022e1:	31 c0                	xor    eax,eax
c00022e3:	c3                   	ret    
c00022e4:	5a                   	pop    edx
c00022e5:	5b                   	pop    ebx
c00022e6:	5e                   	pop    esi
c00022e7:	c3                   	ret    

c00022e8 <check_fs>:
c00022e8:	53                   	push   ebx
c00022e9:	89 c3                	mov    ebx,eax
c00022eb:	83 ec 08             	sub    esp,0x8
c00022ee:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022f2:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022f9:	e8 a4 ff ff ff       	call   c00022a2 <move_window>
c00022fe:	ba 04 00 00 00       	mov    edx,0x4
c0002303:	85 c0                	test   eax,eax
c0002305:	75 68                	jne    c000236f <check_fs+0x87>
c0002307:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000230d:	e8 61 fa ff ff       	call   c0001d73 <ld_word>
c0002312:	ba 03 00 00 00       	mov    edx,0x3
c0002317:	66 3d 55 aa          	cmp    ax,0xaa55
c000231b:	75 52                	jne    c000236f <check_fs+0x87>
c000231d:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002320:	8d 50 18             	lea    edx,[eax+0x18]
c0002323:	80 fa 01             	cmp    dl,0x1
c0002326:	76 09                	jbe    c0002331 <check_fs+0x49>
c0002328:	ba 02 00 00 00       	mov    edx,0x2
c000232d:	3c eb                	cmp    al,0xeb
c000232f:	75 3e                	jne    c000236f <check_fs+0x87>
c0002331:	ba ac 10 02 c0       	mov    edx,0xc00210ac
c0002336:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002339:	b9 03 00 00 00       	mov    ecx,0x3
c000233e:	e8 7c fa ff ff       	call   c0001dbf <mem_cmp>
c0002343:	31 d2                	xor    edx,edx
c0002345:	85 c0                	test   eax,eax
c0002347:	74 26                	je     c000236f <check_fs+0x87>
c0002349:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c000234e:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002354:	b9 05 00 00 00       	mov    ecx,0x5
c0002359:	e8 61 fa ff ff       	call   c0001dbf <mem_cmp>
c000235e:	31 d2                	xor    edx,edx
c0002360:	85 c0                	test   eax,eax
c0002362:	74 0b                	je     c000236f <check_fs+0x87>
c0002364:	31 d2                	xor    edx,edx
c0002366:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000236a:	0f 95 c2             	setne  dl
c000236d:	01 d2                	add    edx,edx
c000236f:	83 c4 08             	add    esp,0x8
c0002372:	89 d0                	mov    eax,edx
c0002374:	5b                   	pop    ebx
c0002375:	c3                   	ret    

c0002376 <find_volume>:
c0002376:	55                   	push   ebp
c0002377:	57                   	push   edi
c0002378:	56                   	push   esi
c0002379:	89 c6                	mov    esi,eax
c000237b:	53                   	push   ebx
c000237c:	89 d3                	mov    ebx,edx
c000237e:	31 d2                	xor    edx,edx
c0002380:	83 ec 2c             	sub    esp,0x2c
c0002383:	e8 60 ff ff ff       	call   c00022e8 <check_fs>
c0002388:	85 db                	test   ebx,ebx
c000238a:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c000238f:	83 f8 02             	cmp    eax,0x2
c0002392:	74 09                	je     c000239d <find_volume+0x27>
c0002394:	77 5d                	ja     c00023f3 <find_volume+0x7d>
c0002396:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000239b:	75 56                	jne    c00023f3 <find_volume+0x7d>
c000239d:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00023a3:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c00023a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023ad:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00023b1:	89 f8                	mov    eax,edi
c00023b3:	83 c5 04             	add    ebp,0x4
c00023b6:	83 c7 10             	add    edi,0x10
c00023b9:	e8 c2 f9 ff ff       	call   c0001d80 <ld_dword>
c00023be:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00023c1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023c5:	75 ea                	jne    c00023b1 <find_volume+0x3b>
c00023c7:	83 fb 01             	cmp    ebx,0x1
c00023ca:	83 d3 ff             	adc    ebx,0xffffffff
c00023cd:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00023d1:	b8 03 00 00 00       	mov    eax,0x3
c00023d6:	85 d2                	test   edx,edx
c00023d8:	74 07                	je     c00023e1 <find_volume+0x6b>
c00023da:	89 f0                	mov    eax,esi
c00023dc:	e8 07 ff ff ff       	call   c00022e8 <check_fs>
c00023e1:	83 f8 01             	cmp    eax,0x1
c00023e4:	76 0d                	jbe    c00023f3 <find_volume+0x7d>
c00023e6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00023eb:	74 06                	je     c00023f3 <find_volume+0x7d>
c00023ed:	43                   	inc    ebx
c00023ee:	83 fb 03             	cmp    ebx,0x3
c00023f1:	76 da                	jbe    c00023cd <find_volume+0x57>
c00023f3:	83 c4 2c             	add    esp,0x2c
c00023f6:	5b                   	pop    ebx
c00023f7:	5e                   	pop    esi
c00023f8:	5f                   	pop    edi
c00023f9:	5d                   	pop    ebp
c00023fa:	c3                   	ret    

c00023fb <mount_volume>:
c00023fb:	55                   	push   ebp
c00023fc:	89 d5                	mov    ebp,edx
c00023fe:	57                   	push   edi
c00023ff:	56                   	push   esi
c0002400:	be 0b 00 00 00       	mov    esi,0xb
c0002405:	53                   	push   ebx
c0002406:	83 ec 2c             	sub    esp,0x2c
c0002409:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000240f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002413:	e8 8e fd ff ff       	call   c00021a6 <get_ldnumber>
c0002418:	85 c0                	test   eax,eax
c000241a:	0f 88 d4 02 00 00    	js     c00026f4 <mount_volume+0x2f9>
c0002420:	8b 1c 85 a0 34 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdcb60]
c0002427:	89 c7                	mov    edi,eax
c0002429:	be 0c 00 00 00       	mov    esi,0xc
c000242e:	85 db                	test   ebx,ebx
c0002430:	0f 84 be 02 00 00    	je     c00026f4 <mount_volume+0x2f9>
c0002436:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000243a:	89 5d 00             	mov    DWORD PTR [ebp+0x0],ebx
c000243d:	89 cd                	mov    ebp,ecx
c000243f:	83 e5 fe             	and    ebp,0xfffffffe
c0002442:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0002445:	74 32                	je     c0002479 <mount_volume+0x7e>
c0002447:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244b:	83 ec 0c             	sub    esp,0xc
c000244e:	50                   	push   eax
c000244f:	e8 ce f8 ff ff       	call   c0001d22 <disk_status>
c0002454:	83 c4 10             	add    esp,0x10
c0002457:	a8 01                	test   al,0x1
c0002459:	75 1e                	jne    c0002479 <mount_volume+0x7e>
c000245b:	89 e9                	mov    ecx,ebp
c000245d:	31 f6                	xor    esi,esi
c000245f:	84 c9                	test   cl,cl
c0002461:	0f 84 8d 02 00 00    	je     c00026f4 <mount_volume+0x2f9>
c0002467:	a8 04                	test   al,0x4
c0002469:	0f 84 85 02 00 00    	je     c00026f4 <mount_volume+0x2f9>
c000246f:	be 0a 00 00 00       	mov    esi,0xa
c0002474:	e9 7b 02 00 00       	jmp    c00026f4 <mount_volume+0x2f9>
c0002479:	89 f8                	mov    eax,edi
c000247b:	83 ec 0c             	sub    esp,0xc
c000247e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0002481:	be 03 00 00 00       	mov    esi,0x3
c0002486:	0f b6 f8             	movzx  edi,al
c0002489:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000248c:	57                   	push   edi
c000248d:	e8 93 f8 ff ff       	call   c0001d25 <disk_initialize>
c0002492:	83 c4 10             	add    esp,0x10
c0002495:	a8 01                	test   al,0x1
c0002497:	0f 85 57 02 00 00    	jne    c00026f4 <mount_volume+0x2f9>
c000249d:	89 ea                	mov    edx,ebp
c000249f:	84 d2                	test   dl,dl
c00024a1:	74 04                	je     c00024a7 <mount_volume+0xac>
c00024a3:	a8 04                	test   al,0x4
c00024a5:	75 c8                	jne    c000246f <mount_volume+0x74>
c00024a7:	31 d2                	xor    edx,edx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	be 01 00 00 00       	mov    esi,0x1
c00024b0:	e8 c1 fe ff ff       	call   c0002376 <find_volume>
c00024b5:	83 f8 04             	cmp    eax,0x4
c00024b8:	0f 84 36 02 00 00    	je     c00026f4 <mount_volume+0x2f9>
c00024be:	83 f8 01             	cmp    eax,0x1
c00024c1:	76 0a                	jbe    c00024cd <mount_volume+0xd2>
c00024c3:	be 0d 00 00 00       	mov    esi,0xd
c00024c8:	e9 27 02 00 00       	jmp    c00026f4 <mount_volume+0x2f9>
c00024cd:	8d 43 3f             	lea    eax,[ebx+0x3f]
c00024d0:	e8 9e f8 ff ff       	call   c0001d73 <ld_word>
c00024d5:	66 3d 00 02          	cmp    ax,0x200
c00024d9:	75 e8                	jne    c00024c3 <mount_volume+0xc8>
c00024db:	8d 43 4a             	lea    eax,[ebx+0x4a]
c00024de:	e8 90 f8 ff ff       	call   c0001d73 <ld_word>
c00024e3:	0f b7 f8             	movzx  edi,ax
c00024e6:	85 ff                	test   edi,edi
c00024e8:	75 0a                	jne    c00024f4 <mount_volume+0xf9>
c00024ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00024ed:	e8 8e f8 ff ff       	call   c0001d80 <ld_dword>
c00024f2:	89 c7                	mov    edi,eax
c00024f4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f7:	8b 6b 44             	mov    ebp,DWORD PTR [ebx+0x44]
c00024fa:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00024fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002501:	89 e8                	mov    eax,ebp
c0002503:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002506:	8d 45 ff             	lea    eax,[ebp-0x1]
c0002509:	3c 01                	cmp    al,0x1
c000250b:	77 b6                	ja     c00024c3 <mount_volume+0xc8>
c000250d:	0f b6 53 41          	movzx  edx,BYTE PTR [ebx+0x41]
c0002511:	66 89 53 0a          	mov    WORD PTR [ebx+0xa],dx
c0002515:	66 85 d2             	test   dx,dx
c0002518:	74 a9                	je     c00024c3 <mount_volume+0xc8>
c000251a:	0f b6 f2             	movzx  esi,dl
c000251d:	c4 e2 78 f3 ce       	blsr   eax,esi
c0002522:	75 9f                	jne    c00024c3 <mount_volume+0xc8>
c0002524:	8d 43 45             	lea    eax,[ebx+0x45]
c0002527:	e8 47 f8 ff ff       	call   c0001d73 <ld_word>
c000252c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0002531:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002535:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000253a:	75 87                	jne    c00024c3 <mount_volume+0xc8>
c000253c:	8d 43 47             	lea    eax,[ebx+0x47]
c000253f:	e8 2f f8 ff ff       	call   c0001d73 <ld_word>
c0002544:	0f b7 d0             	movzx  edx,ax
c0002547:	85 d2                	test   edx,edx
c0002549:	75 0a                	jne    c0002555 <mount_volume+0x15a>
c000254b:	8d 43 54             	lea    eax,[ebx+0x54]
c000254e:	e8 2d f8 ff ff       	call   c0001d80 <ld_dword>
c0002553:	89 c2                	mov    edx,eax
c0002555:	8d 43 42             	lea    eax,[ebx+0x42]
c0002558:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000255c:	e8 12 f8 ff ff       	call   c0001d73 <ld_word>
c0002561:	66 85 c0             	test   ax,ax
c0002564:	0f 84 59 ff ff ff    	je     c00024c3 <mount_volume+0xc8>
c000256a:	89 e9                	mov    ecx,ebp
c000256c:	0f b7 c0             	movzx  eax,ax
c000256f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002573:	0f b6 e9             	movzx  ebp,cl
c0002576:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000257a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000257e:	0f af ef             	imul   ebp,edi
c0002581:	66 c1 e9 04          	shr    cx,0x4
c0002585:	0f b7 c9             	movzx  ecx,cx
c0002588:	01 e9                	add    ecx,ebp
c000258a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000258e:	01 c1                	add    ecx,eax
c0002590:	39 ca                	cmp    edx,ecx
c0002592:	0f 82 2b ff ff ff    	jb     c00024c3 <mount_volume+0xc8>
c0002598:	29 ca                	sub    edx,ecx
c000259a:	89 d0                	mov    eax,edx
c000259c:	89 d5                	mov    ebp,edx
c000259e:	31 d2                	xor    edx,edx
c00025a0:	f7 f6                	div    esi
c00025a2:	39 f5                	cmp    ebp,esi
c00025a4:	0f 82 19 ff ff ff    	jb     c00024c3 <mount_volume+0xc8>
c00025aa:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025af:	0f 87 0e ff ff ff    	ja     c00024c3 <mount_volume+0xc8>
c00025b5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025ba:	0f 86 25 01 00 00    	jbe    c00026e5 <mount_volume+0x2ea>
c00025c0:	be 03 00 00 00       	mov    esi,0x3
c00025c5:	8d 68 02             	lea    ebp,[eax+0x2]
c00025c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cc:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c00025d0:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
c00025d3:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00025d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00025da:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025de:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00025e1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00025e4:	83 fe 03             	cmp    esi,0x3
c00025e7:	75 25                	jne    c000260e <mount_volume+0x213>
c00025e9:	8d 43 5e             	lea    eax,[ebx+0x5e]
c00025ec:	e8 82 f7 ff ff       	call   c0001d73 <ld_word>
c00025f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00025f5:	66 09 c1             	or     cx,ax
c00025f8:	0f 85 c5 fe ff ff    	jne    c00024c3 <mount_volume+0xc8>
c00025fe:	8d 43 60             	lea    eax,[ebx+0x60]
c0002601:	c1 e5 02             	shl    ebp,0x2
c0002604:	e8 77 f7 ff ff       	call   c0001d80 <ld_dword>
c0002609:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000260c:	eb 28                	jmp    c0002636 <mount_volume+0x23b>
c000260e:	66 83 7c 24 0c 00    	cmp    WORD PTR [esp+0xc],0x0
c0002614:	0f 84 a9 fe ff ff    	je     c00024c3 <mount_volume+0xc8>
c000261a:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c000261e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002622:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
c0002626:	83 e5 01             	and    ebp,0x1
c0002629:	d1 ea                	shr    edx,1
c000262b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000262e:	01 d5                	add    ebp,edx
c0002630:	83 fe 02             	cmp    esi,0x2
c0002633:	0f 44 e9             	cmove  ebp,ecx
c0002636:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000263c:	c1 ed 09             	shr    ebp,0x9
c000263f:	39 fd                	cmp    ebp,edi
c0002641:	0f 87 7c fe ff ff    	ja     c00024c3 <mount_volume+0xc8>
c0002647:	c7 43 14 ff ff ff ff 	mov    DWORD PTR [ebx+0x14],0xffffffff
c000264e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0002655:	c6 43 04 80          	mov    BYTE PTR [ebx+0x4],0x80
c0002659:	83 fe 03             	cmp    esi,0x3
c000265c:	75 6e                	jne    c00026cc <mount_volume+0x2d1>
c000265e:	8d 43 64             	lea    eax,[ebx+0x64]
c0002661:	e8 0d f7 ff ff       	call   c0001d73 <ld_word>
c0002666:	66 48                	dec    ax
c0002668:	75 62                	jne    c00026cc <mount_volume+0x2d1>
c000266a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000266e:	89 d8                	mov    eax,ebx
c0002670:	42                   	inc    edx
c0002671:	e8 2c fc ff ff       	call   c00022a2 <move_window>
c0002676:	85 c0                	test   eax,eax
c0002678:	75 52                	jne    c00026cc <mount_volume+0x2d1>
c000267a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000267e:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002684:	e8 ea f6 ff ff       	call   c0001d73 <ld_word>
c0002689:	66 3d 55 aa          	cmp    ax,0xaa55
c000268d:	75 3d                	jne    c00026cc <mount_volume+0x2d1>
c000268f:	8d 43 34             	lea    eax,[ebx+0x34]
c0002692:	e8 e9 f6 ff ff       	call   c0001d80 <ld_dword>
c0002697:	3d 52 52 61 41       	cmp    eax,0x41615252
c000269c:	75 2e                	jne    c00026cc <mount_volume+0x2d1>
c000269e:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c00026a4:	e8 d7 f6 ff ff       	call   c0001d80 <ld_dword>
c00026a9:	3d 72 72 41 61       	cmp    eax,0x61417272
c00026ae:	75 1c                	jne    c00026cc <mount_volume+0x2d1>
c00026b0:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c00026b6:	e8 c5 f6 ff ff       	call   c0001d80 <ld_dword>
c00026bb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00026be:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c00026c4:	e8 b7 f6 ff ff       	call   c0001d80 <ld_dword>
c00026c9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00026cc:	89 f0                	mov    eax,esi
c00026ce:	31 f6                	xor    esi,esi
c00026d0:	88 03                	mov    BYTE PTR [ebx],al
c00026d2:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c00026d8:	40                   	inc    eax
c00026d9:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c00026df:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00026e3:	eb 0f                	jmp    c00026f4 <mount_volume+0x2f9>
c00026e5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00026ea:	19 f6                	sbb    esi,esi
c00026ec:	83 c6 02             	add    esi,0x2
c00026ef:	e9 d1 fe ff ff       	jmp    c00025c5 <mount_volume+0x1ca>
c00026f4:	83 c4 2c             	add    esp,0x2c
c00026f7:	89 f0                	mov    eax,esi
c00026f9:	5b                   	pop    ebx
c00026fa:	5e                   	pop    esi
c00026fb:	5f                   	pop    edi
c00026fc:	5d                   	pop    ebp
c00026fd:	c3                   	ret    

c00026fe <put_fat>:
c00026fe:	55                   	push   ebp
c00026ff:	bd 02 00 00 00       	mov    ebp,0x2
c0002704:	57                   	push   edi
c0002705:	56                   	push   esi
c0002706:	53                   	push   ebx
c0002707:	83 ec 1c             	sub    esp,0x1c
c000270a:	83 fa 01             	cmp    edx,0x1
c000270d:	0f 86 31 01 00 00    	jbe    c0002844 <put_fat+0x146>
c0002713:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002716:	0f 86 28 01 00 00    	jbe    c0002844 <put_fat+0x146>
c000271c:	89 c6                	mov    esi,eax
c000271e:	8a 00                	mov    al,BYTE PTR [eax]
c0002720:	89 cf                	mov    edi,ecx
c0002722:	89 d3                	mov    ebx,edx
c0002724:	3c 02                	cmp    al,0x2
c0002726:	0f 84 ac 00 00 00    	je     c00027d8 <put_fat+0xda>
c000272c:	3c 03                	cmp    al,0x3
c000272e:	0f 84 d1 00 00 00    	je     c0002805 <put_fat+0x107>
c0002734:	fe c8                	dec    al
c0002736:	0f 85 08 01 00 00    	jne    c0002844 <put_fat+0x146>
c000273c:	89 d1                	mov    ecx,edx
c000273e:	89 f0                	mov    eax,esi
c0002740:	d1 e9                	shr    ecx,1
c0002742:	01 d1                	add    ecx,edx
c0002744:	89 ca                	mov    edx,ecx
c0002746:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000274a:	c1 ea 09             	shr    edx,0x9
c000274d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002750:	e8 4d fb ff ff       	call   c00022a2 <move_window>
c0002755:	89 c5                	mov    ebp,eax
c0002757:	85 c0                	test   eax,eax
c0002759:	0f 85 e5 00 00 00    	jne    c0002844 <put_fat+0x146>
c000275f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002763:	8d 46 34             	lea    eax,[esi+0x34]
c0002766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000276a:	8d 41 01             	lea    eax,[ecx+0x1]
c000276d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002773:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000277b:	89 f8                	mov    eax,edi
c000277d:	83 e3 01             	and    ebx,0x1
c0002780:	74 0c                	je     c000278e <put_fat+0x90>
c0002782:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002784:	89 f8                	mov    eax,edi
c0002786:	c1 e0 04             	shl    eax,0x4
c0002789:	83 e2 0f             	and    edx,0xf
c000278c:	09 d0                	or     eax,edx
c000278e:	88 01                	mov    BYTE PTR [ecx],al
c0002790:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002794:	89 f0                	mov    eax,esi
c0002796:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000279a:	c1 ea 09             	shr    edx,0x9
c000279d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027a0:	e8 fd fa ff ff       	call   c00022a2 <move_window>
c00027a5:	89 c5                	mov    ebp,eax
c00027a7:	85 c0                	test   eax,eax
c00027a9:	0f 85 95 00 00 00    	jne    c0002844 <put_fat+0x146>
c00027af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027b3:	25 ff 01 00 00       	and    eax,0x1ff
c00027b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027bc:	85 db                	test   ebx,ebx
c00027be:	74 07                	je     c00027c7 <put_fat+0xc9>
c00027c0:	c1 ef 04             	shr    edi,0x4
c00027c3:	89 f9                	mov    ecx,edi
c00027c5:	eb 0d                	jmp    c00027d4 <put_fat+0xd6>
c00027c7:	8a 08                	mov    cl,BYTE PTR [eax]
c00027c9:	c1 ef 08             	shr    edi,0x8
c00027cc:	83 e7 0f             	and    edi,0xf
c00027cf:	83 e1 f0             	and    ecx,0xfffffff0
c00027d2:	09 f9                	or     ecx,edi
c00027d4:	88 08                	mov    BYTE PTR [eax],cl
c00027d6:	eb 27                	jmp    c00027ff <put_fat+0x101>
c00027d8:	c1 ea 08             	shr    edx,0x8
c00027db:	89 f0                	mov    eax,esi
c00027dd:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027e0:	e8 bd fa ff ff       	call   c00022a2 <move_window>
c00027e5:	89 c5                	mov    ebp,eax
c00027e7:	85 c0                	test   eax,eax
c00027e9:	75 59                	jne    c0002844 <put_fat+0x146>
c00027eb:	01 db                	add    ebx,ebx
c00027ed:	0f b7 d7             	movzx  edx,di
c00027f0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027f6:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027fa:	e8 99 f5 ff ff       	call   c0001d98 <st_word>
c00027ff:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002803:	eb 3f                	jmp    c0002844 <put_fat+0x146>
c0002805:	c1 ea 07             	shr    edx,0x7
c0002808:	89 f0                	mov    eax,esi
c000280a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000280d:	e8 90 fa ff ff       	call   c00022a2 <move_window>
c0002812:	89 c5                	mov    ebp,eax
c0002814:	85 c0                	test   eax,eax
c0002816:	75 2c                	jne    c0002844 <put_fat+0x146>
c0002818:	c1 e3 02             	shl    ebx,0x2
c000281b:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002821:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002827:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c000282b:	89 d8                	mov    eax,ebx
c000282d:	e8 4e f5 ff ff       	call   c0001d80 <ld_dword>
c0002832:	25 00 00 00 f0       	and    eax,0xf0000000
c0002837:	09 f8                	or     eax,edi
c0002839:	89 c2                	mov    edx,eax
c000283b:	89 d8                	mov    eax,ebx
c000283d:	e8 5a f5 ff ff       	call   c0001d9c <st_dword>
c0002842:	eb bb                	jmp    c00027ff <put_fat+0x101>
c0002844:	83 c4 1c             	add    esp,0x1c
c0002847:	89 e8                	mov    eax,ebp
c0002849:	5b                   	pop    ebx
c000284a:	5e                   	pop    esi
c000284b:	5f                   	pop    edi
c000284c:	5d                   	pop    ebp
c000284d:	c3                   	ret    

c000284e <dir_clear>:
c000284e:	55                   	push   ebp
c000284f:	57                   	push   edi
c0002850:	56                   	push   esi
c0002851:	89 c6                	mov    esi,eax
c0002853:	53                   	push   ebx
c0002854:	89 d3                	mov    ebx,edx
c0002856:	83 ec 1c             	sub    esp,0x1c
c0002859:	e8 e1 f9 ff ff       	call   c000223f <sync_window>
c000285e:	85 c0                	test   eax,eax
c0002860:	0f 85 bf 00 00 00    	jne    c0002925 <dir_clear+0xd7>
c0002866:	89 da                	mov    edx,ebx
c0002868:	89 f0                	mov    eax,esi
c000286a:	e8 4e f7 ff ff       	call   c0001fbd <clst2sect>
c000286f:	31 d2                	xor    edx,edx
c0002871:	b9 00 02 00 00       	mov    ecx,0x200
c0002876:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002879:	89 c5                	mov    ebp,eax
c000287b:	8d 46 34             	lea    eax,[esi+0x34]
c000287e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002882:	e8 2d f5 ff ff       	call   c0001db4 <mem_set>
c0002887:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000288b:	b8 00 80 00 00       	mov    eax,0x8000
c0002890:	c1 e3 09             	shl    ebx,0x9
c0002893:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002899:	0f 47 d8             	cmova  ebx,eax
c000289c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00028a2:	76 16                	jbe    c00028ba <dir_clear+0x6c>
c00028a4:	83 ec 0c             	sub    esp,0xc
c00028a7:	53                   	push   ebx
c00028a8:	e8 f7 31 00 00       	call   c0005aa4 <ff_memalloc>
c00028ad:	83 c4 10             	add    esp,0x10
c00028b0:	89 c7                	mov    edi,eax
c00028b2:	85 c0                	test   eax,eax
c00028b4:	75 76                	jne    c000292c <dir_clear+0xde>
c00028b6:	d1 eb                	shr    ebx,1
c00028b8:	eb e2                	jmp    c000289c <dir_clear+0x4e>
c00028ba:	31 db                	xor    ebx,ebx
c00028bc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c0:	39 d8                	cmp    eax,ebx
c00028c2:	76 53                	jbe    c0002917 <dir_clear+0xc9>
c00028c4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028c7:	6a 01                	push   0x1
c00028c9:	50                   	push   eax
c00028ca:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00028d2:	50                   	push   eax
c00028d3:	e8 66 f4 ff ff       	call   c0001d3e <disk_write>
c00028d8:	83 c4 10             	add    esp,0x10
c00028db:	85 c0                	test   eax,eax
c00028dd:	75 38                	jne    c0002917 <dir_clear+0xc9>
c00028df:	43                   	inc    ebx
c00028e0:	eb da                	jmp    c00028bc <dir_clear+0x6e>
c00028e2:	52                   	push   edx
c00028e3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028ea:	50                   	push   eax
c00028eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028ef:	57                   	push   edi
c00028f0:	50                   	push   eax
c00028f1:	e8 48 f4 ff ff       	call   c0001d3e <disk_write>
c00028f6:	83 c4 10             	add    esp,0x10
c00028f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028fd:	85 c0                	test   eax,eax
c00028ff:	75 0a                	jne    c000290b <dir_clear+0xbd>
c0002901:	01 d3                	add    ebx,edx
c0002903:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002907:	39 d8                	cmp    eax,ebx
c0002909:	77 d7                	ja     c00028e2 <dir_clear+0x94>
c000290b:	83 ec 0c             	sub    esp,0xc
c000290e:	57                   	push   edi
c000290f:	e8 a8 31 00 00       	call   c0005abc <ff_memfree>
c0002914:	83 c4 10             	add    esp,0x10
c0002917:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000291b:	39 d8                	cmp    eax,ebx
c000291d:	0f 95 c0             	setne  al
c0002920:	0f b6 c0             	movzx  eax,al
c0002923:	eb 19                	jmp    c000293e <dir_clear+0xf0>
c0002925:	b8 01 00 00 00       	mov    eax,0x1
c000292a:	eb 12                	jmp    c000293e <dir_clear+0xf0>
c000292c:	89 d9                	mov    ecx,ebx
c000292e:	31 d2                	xor    edx,edx
c0002930:	e8 7f f4 ff ff       	call   c0001db4 <mem_set>
c0002935:	89 da                	mov    edx,ebx
c0002937:	31 db                	xor    ebx,ebx
c0002939:	c1 ea 09             	shr    edx,0x9
c000293c:	eb c5                	jmp    c0002903 <dir_clear+0xb5>
c000293e:	83 c4 1c             	add    esp,0x1c
c0002941:	5b                   	pop    ebx
c0002942:	5e                   	pop    esi
c0002943:	5f                   	pop    edi
c0002944:	5d                   	pop    ebp
c0002945:	c3                   	ret    

c0002946 <create_name>:
c0002946:	55                   	push   ebp
c0002947:	57                   	push   edi
c0002948:	89 d7                	mov    edi,edx
c000294a:	56                   	push   esi
c000294b:	31 f6                	xor    esi,esi
c000294d:	53                   	push   ebx
c000294e:	83 ec 3c             	sub    esp,0x3c
c0002951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002955:	8b 02                	mov    eax,DWORD PTR [edx]
c0002957:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000295b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000295f:	8b 00                	mov    eax,DWORD PTR [eax]
c0002961:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002968:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000296c:	e8 88 f4 ff ff       	call   c0001df9 <tchar2uni>
c0002971:	89 c3                	mov    ebx,eax
c0002973:	83 f8 ff             	cmp    eax,0xffffffff
c0002976:	75 0a                	jne    c0002982 <create_name+0x3c>
c0002978:	b8 06 00 00 00       	mov    eax,0x6
c000297d:	e9 86 02 00 00       	jmp    c0002c08 <create_name+0x2c2>
c0002982:	3d ff ff 00 00       	cmp    eax,0xffff
c0002987:	76 0c                	jbe    c0002995 <create_name+0x4f>
c0002989:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000298d:	c1 e8 10             	shr    eax,0x10
c0002990:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002994:	46                   	inc    esi
c0002995:	89 d8                	mov    eax,ebx
c0002997:	66 83 fb 1f          	cmp    bx,0x1f
c000299b:	76 36                	jbe    c00029d3 <create_name+0x8d>
c000299d:	66 83 fb 2f          	cmp    bx,0x2f
c00029a1:	74 30                	je     c00029d3 <create_name+0x8d>
c00029a3:	66 83 fb 5c          	cmp    bx,0x5c
c00029a7:	74 39                	je     c00029e2 <create_name+0x9c>
c00029a9:	66 83 fb 7f          	cmp    bx,0x7f
c00029ad:	77 11                	ja     c00029c0 <create_name+0x7a>
c00029af:	0f b7 d3             	movzx  edx,bx
c00029b2:	b8 c2 ed 01 c0       	mov    eax,0xc001edc2
c00029b7:	e8 26 f4 ff ff       	call   c0001de2 <chk_chr>
c00029bc:	85 c0                	test   eax,eax
c00029be:	75 b8                	jne    c0002978 <create_name+0x32>
c00029c0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00029c6:	77 b0                	ja     c0002978 <create_name+0x32>
c00029c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029cc:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c00029d0:	46                   	inc    esi
c00029d1:	eb 95                	jmp    c0002968 <create_name+0x22>
c00029d3:	b3 04                	mov    bl,0x4
c00029d5:	66 83 f8 1f          	cmp    ax,0x1f
c00029d9:	76 19                	jbe    c00029f4 <create_name+0xae>
c00029db:	eb 05                	jmp    c00029e2 <create_name+0x9c>
c00029dd:	40                   	inc    eax
c00029de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029e6:	8a 10                	mov    dl,BYTE PTR [eax]
c00029e8:	80 fa 2f             	cmp    dl,0x2f
c00029eb:	74 f0                	je     c00029dd <create_name+0x97>
c00029ed:	80 fa 5c             	cmp    dl,0x5c
c00029f0:	74 eb                	je     c00029dd <create_name+0x97>
c00029f2:	31 db                	xor    ebx,ebx
c00029f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029f8:	89 07                	mov    DWORD PTR [edi],eax
c00029fa:	85 f6                	test   esi,esi
c00029fc:	74 18                	je     c0002a16 <create_name+0xd0>
c00029fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a02:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0002a07:	66 83 f8 20          	cmp    ax,0x20
c0002a0b:	74 06                	je     c0002a13 <create_name+0xcd>
c0002a0d:	66 83 f8 2e          	cmp    ax,0x2e
c0002a11:	75 03                	jne    c0002a16 <create_name+0xd0>
c0002a13:	4e                   	dec    esi
c0002a14:	eb e4                	jmp    c00029fa <create_name+0xb4>
c0002a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a1a:	31 ed                	xor    ebp,ebp
c0002a1c:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002a22:	85 f6                	test   esi,esi
c0002a24:	0f 84 4e ff ff ff    	je     c0002978 <create_name+0x32>
c0002a2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a2e:	8d 55 01             	lea    edx,[ebp+0x1]
c0002a31:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0002a35:	66 83 f8 20          	cmp    ax,0x20
c0002a39:	75 04                	jne    c0002a3f <create_name+0xf9>
c0002a3b:	89 d5                	mov    ebp,edx
c0002a3d:	eb eb                	jmp    c0002a2a <create_name+0xe4>
c0002a3f:	85 ed                	test   ebp,ebp
c0002a41:	75 06                	jne    c0002a49 <create_name+0x103>
c0002a43:	66 83 f8 2e          	cmp    ax,0x2e
c0002a47:	75 08                	jne    c0002a51 <create_name+0x10b>
c0002a49:	83 cb 03             	or     ebx,0x3
c0002a4c:	eb 03                	jmp    c0002a51 <create_name+0x10b>
c0002a4e:	4e                   	dec    esi
c0002a4f:	74 0c                	je     c0002a5d <create_name+0x117>
c0002a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a55:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a5b:	75 f1                	jne    c0002a4e <create_name+0x108>
c0002a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a61:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a66:	ba 20 00 00 00       	mov    edx,0x20
c0002a6b:	31 ff                	xor    edi,edi
c0002a6d:	83 c0 20             	add    eax,0x20
c0002a70:	e8 3f f3 ff ff       	call   c0001db4 <mem_set>
c0002a75:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002a7d:	31 c9                	xor    ecx,ecx
c0002a7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a8e:	66 85 ed             	test   bp,bp
c0002a91:	0f 84 21 01 00 00    	je     c0002bb8 <create_name+0x272>
c0002a97:	66 83 fd 20          	cmp    bp,0x20
c0002a9b:	74 0c                	je     c0002aa9 <create_name+0x163>
c0002a9d:	66 83 fd 2e          	cmp    bp,0x2e
c0002aa1:	75 0f                	jne    c0002ab2 <create_name+0x16c>
c0002aa3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002aa7:	74 09                	je     c0002ab2 <create_name+0x16c>
c0002aa9:	83 cb 03             	or     ebx,0x3
c0002aac:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0002ab0:	eb cd                	jmp    c0002a7f <create_name+0x139>
c0002ab2:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002ab6:	73 06                	jae    c0002abe <create_name+0x178>
c0002ab8:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002abc:	75 38                	jne    c0002af6 <create_name+0x1b0>
c0002abe:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002ac3:	75 08                	jne    c0002acd <create_name+0x187>
c0002ac5:	83 cb 03             	or     ebx,0x3
c0002ac8:	e9 eb 00 00 00       	jmp    c0002bb8 <create_name+0x272>
c0002acd:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ad1:	74 0d                	je     c0002ae0 <create_name+0x19a>
c0002ad3:	83 cb 03             	or     ebx,0x3
c0002ad6:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ada:	0f 87 d8 00 00 00    	ja     c0002bb8 <create_name+0x272>
c0002ae0:	c1 e7 02             	shl    edi,0x2
c0002ae3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002ae7:	b9 08 00 00 00       	mov    ecx,0x8
c0002aec:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002af4:	eb b6                	jmp    c0002aac <create_name+0x166>
c0002af6:	66 83 fd 7f          	cmp    bp,0x7f
c0002afa:	76 6c                	jbe    c0002b68 <create_name+0x222>
c0002afc:	88 da                	mov    dl,bl
c0002afe:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b02:	83 ca 02             	or     edx,0x2
c0002b05:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002b09:	50                   	push   eax
c0002b0a:	50                   	push   eax
c0002b0b:	68 b5 01 00 00       	push   0x1b5
c0002b10:	55                   	push   ebp
c0002b11:	e8 be 2f 00 00       	call   c0005ad4 <ff_uni2oem>
c0002b16:	83 c4 10             	add    esp,0x10
c0002b19:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002b1d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002b21:	a8 80                	test   al,0x80
c0002b23:	89 c5                	mov    ebp,eax
c0002b25:	74 0c                	je     c0002b33 <create_name+0x1ed>
c0002b27:	83 e5 7f             	and    ebp,0x7f
c0002b2a:	0f b6 ad 80 ee 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1180]
c0002b31:	eb 2e                	jmp    c0002b61 <create_name+0x21b>
c0002b33:	66 3d ff 00          	cmp    ax,0xff
c0002b37:	76 28                	jbe    c0002b61 <create_name+0x21b>
c0002b39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b3d:	48                   	dec    eax
c0002b3e:	39 c8                	cmp    eax,ecx
c0002b40:	77 0c                	ja     c0002b4e <create_name+0x208>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002b49:	e9 5e ff ff ff       	jmp    c0002aac <create_name+0x166>
c0002b4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002b52:	89 e8                	mov    eax,ebp
c0002b54:	66 c1 e8 08          	shr    ax,0x8
c0002b58:	88 44 0b 20          	mov    BYTE PTR [ebx+ecx*1+0x20],al
c0002b5c:	41                   	inc    ecx
c0002b5d:	88 d3                	mov    bl,dl
c0002b5f:	eb 47                	jmp    c0002ba8 <create_name+0x262>
c0002b61:	88 d3                	mov    bl,dl
c0002b63:	66 85 ed             	test   bp,bp
c0002b66:	74 19                	je     c0002b81 <create_name+0x23b>
c0002b68:	0f b7 d5             	movzx  edx,bp
c0002b6b:	b8 cb ed 01 c0       	mov    eax,0xc001edcb
c0002b70:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b74:	e8 69 f2 ff ff       	call   c0001de2 <chk_chr>
c0002b79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b7d:	85 c0                	test   eax,eax
c0002b7f:	74 0a                	je     c0002b8b <create_name+0x245>
c0002b81:	83 cb 03             	or     ebx,0x3
c0002b84:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b89:	eb 1d                	jmp    c0002ba8 <create_name+0x262>
c0002b8b:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b8e:	66 83 f8 19          	cmp    ax,0x19
c0002b92:	77 05                	ja     c0002b99 <create_name+0x253>
c0002b94:	83 cf 02             	or     edi,0x2
c0002b97:	eb 0f                	jmp    c0002ba8 <create_name+0x262>
c0002b99:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b9c:	66 83 f8 19          	cmp    ax,0x19
c0002ba0:	77 06                	ja     c0002ba8 <create_name+0x262>
c0002ba2:	83 cf 01             	or     edi,0x1
c0002ba5:	83 ed 20             	sub    ebp,0x20
c0002ba8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bac:	89 e8                	mov    eax,ebp
c0002bae:	88 44 0a 20          	mov    BYTE PTR [edx+ecx*1+0x20],al
c0002bb2:	41                   	inc    ecx
c0002bb3:	e9 f4 fe ff ff       	jmp    c0002aac <create_name+0x166>
c0002bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bbc:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002bc0:	75 04                	jne    c0002bc6 <create_name+0x280>
c0002bc2:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002bc6:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002bcb:	75 03                	jne    c0002bd0 <create_name+0x28a>
c0002bcd:	c1 e7 02             	shl    edi,0x2
c0002bd0:	89 f8                	mov    eax,edi
c0002bd2:	83 e0 0c             	and    eax,0xc
c0002bd5:	3c 0c                	cmp    al,0xc
c0002bd7:	74 09                	je     c0002be2 <create_name+0x29c>
c0002bd9:	89 f8                	mov    eax,edi
c0002bdb:	83 e0 03             	and    eax,0x3
c0002bde:	3c 03                	cmp    al,0x3
c0002be0:	75 05                	jne    c0002be7 <create_name+0x2a1>
c0002be2:	83 cb 02             	or     ebx,0x2
c0002be5:	eb 18                	jmp    c0002bff <create_name+0x2b9>
c0002be7:	f6 c3 02             	test   bl,0x2
c0002bea:	75 13                	jne    c0002bff <create_name+0x2b9>
c0002bec:	f7 c7 01 00 00 00    	test   edi,0x1
c0002bf2:	74 03                	je     c0002bf7 <create_name+0x2b1>
c0002bf4:	83 cb 10             	or     ebx,0x10
c0002bf7:	83 e7 04             	and    edi,0x4
c0002bfa:	74 03                	je     c0002bff <create_name+0x2b9>
c0002bfc:	83 cb 08             	or     ebx,0x8
c0002bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c03:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c06:	31 c0                	xor    eax,eax
c0002c08:	83 c4 3c             	add    esp,0x3c
c0002c0b:	5b                   	pop    ebx
c0002c0c:	5e                   	pop    esi
c0002c0d:	5f                   	pop    edi
c0002c0e:	5d                   	pop    ebp
c0002c0f:	c3                   	ret    

c0002c10 <cmp_lfn>:
c0002c10:	55                   	push   ebp
c0002c11:	89 c5                	mov    ebp,eax
c0002c13:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002c16:	57                   	push   edi
c0002c17:	56                   	push   esi
c0002c18:	89 d6                	mov    esi,edx
c0002c1a:	53                   	push   ebx
c0002c1b:	83 ec 1c             	sub    esp,0x1c
c0002c1e:	e8 50 f1 ff ff       	call   c0001d73 <ld_word>
c0002c23:	66 85 c0             	test   ax,ax
c0002c26:	74 07                	je     c0002c2f <cmp_lfn+0x1f>
c0002c28:	31 c0                	xor    eax,eax
c0002c2a:	e9 90 00 00 00       	jmp    c0002cbf <cmp_lfn+0xaf>
c0002c2f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0002c31:	b9 01 00 00 00       	mov    ecx,0x1
c0002c36:	31 ff                	xor    edi,edi
c0002c38:	83 e3 3f             	and    ebx,0x3f
c0002c3b:	4b                   	dec    ebx
c0002c3c:	6b db 0d             	imul   ebx,ebx,0xd
c0002c3f:	0f b6 87 00 ef 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1100]
c0002c46:	01 f0                	add    eax,esi
c0002c48:	e8 26 f1 ff ff       	call   c0001d73 <ld_word>
c0002c4d:	89 c2                	mov    edx,eax
c0002c4f:	66 85 c9             	test   cx,cx
c0002c52:	74 45                	je     c0002c99 <cmp_lfn+0x89>
c0002c54:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c5a:	77 cc                	ja     c0002c28 <cmp_lfn+0x18>
c0002c5c:	83 ec 0c             	sub    esp,0xc
c0002c5f:	0f b7 c0             	movzx  eax,ax
c0002c62:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002c66:	50                   	push   eax
c0002c67:	e8 70 2f 00 00       	call   c0005bdc <ff_wtoupper>
c0002c6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002c70:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002c77:	0f b7 44 5d 00       	movzx  eax,WORD PTR [ebp+ebx*2+0x0]
c0002c7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c7f:	e8 58 2f 00 00       	call   c0005bdc <ff_wtoupper>
c0002c84:	83 c4 10             	add    esp,0x10
c0002c87:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0002c8b:	75 9b                	jne    c0002c28 <cmp_lfn+0x18>
c0002c8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c91:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002c95:	89 d1                	mov    ecx,edx
c0002c97:	eb 04                	jmp    c0002c9d <cmp_lfn+0x8d>
c0002c99:	66 42                	inc    dx
c0002c9b:	75 8b                	jne    c0002c28 <cmp_lfn+0x18>
c0002c9d:	47                   	inc    edi
c0002c9e:	83 ff 0d             	cmp    edi,0xd
c0002ca1:	75 9c                	jne    c0002c3f <cmp_lfn+0x2f>
c0002ca3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002ca6:	74 12                	je     c0002cba <cmp_lfn+0xaa>
c0002ca8:	66 85 c9             	test   cx,cx
c0002cab:	74 0d                	je     c0002cba <cmp_lfn+0xaa>
c0002cad:	31 c0                	xor    eax,eax
c0002caf:	66 83 7c 5d 00 00    	cmp    WORD PTR [ebp+ebx*2+0x0],0x0
c0002cb5:	0f 94 c0             	sete   al
c0002cb8:	eb 05                	jmp    c0002cbf <cmp_lfn+0xaf>
c0002cba:	b8 01 00 00 00       	mov    eax,0x1
c0002cbf:	83 c4 1c             	add    esp,0x1c
c0002cc2:	5b                   	pop    ebx
c0002cc3:	5e                   	pop    esi
c0002cc4:	5f                   	pop    edi
c0002cc5:	5d                   	pop    ebp
c0002cc6:	c3                   	ret    

c0002cc7 <sync_fs>:
c0002cc7:	56                   	push   esi
c0002cc8:	53                   	push   ebx
c0002cc9:	53                   	push   ebx
c0002cca:	89 c3                	mov    ebx,eax
c0002ccc:	e8 6e f5 ff ff       	call   c000223f <sync_window>
c0002cd1:	85 c0                	test   eax,eax
c0002cd3:	0f 85 9a 00 00 00    	jne    c0002d73 <sync_fs+0xac>
c0002cd9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cdc:	75 7b                	jne    c0002d59 <sync_fs+0x92>
c0002cde:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ce2:	75 75                	jne    c0002d59 <sync_fs+0x92>
c0002ce4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ce7:	b9 00 02 00 00       	mov    ecx,0x200
c0002cec:	31 d2                	xor    edx,edx
c0002cee:	89 f0                	mov    eax,esi
c0002cf0:	e8 bf f0 ff ff       	call   c0001db4 <mem_set>
c0002cf5:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002d00:	e8 93 f0 ff ff       	call   c0001d98 <st_word>
c0002d05:	ba 52 52 61 41       	mov    edx,0x41615252
c0002d0a:	89 f0                	mov    eax,esi
c0002d0c:	e8 8b f0 ff ff       	call   c0001d9c <st_dword>
c0002d11:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002d17:	ba 72 72 41 61       	mov    edx,0x61417272
c0002d1c:	e8 7b f0 ff ff       	call   c0001d9c <st_dword>
c0002d21:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d24:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d2a:	e8 6d f0 ff ff       	call   c0001d9c <st_dword>
c0002d2f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d32:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d38:	e8 5f f0 ff ff       	call   c0001d9c <st_dword>
c0002d3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d40:	6a 01                	push   0x1
c0002d42:	40                   	inc    eax
c0002d43:	50                   	push   eax
c0002d44:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d47:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d4b:	56                   	push   esi
c0002d4c:	50                   	push   eax
c0002d4d:	e8 ec ef ff ff       	call   c0001d3e <disk_write>
c0002d52:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d56:	83 c4 10             	add    esp,0x10
c0002d59:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d5d:	51                   	push   ecx
c0002d5e:	6a 00                	push   0x0
c0002d60:	6a 00                	push   0x0
c0002d62:	50                   	push   eax
c0002d63:	e8 ec ef ff ff       	call   c0001d54 <disk_ioctl>
c0002d68:	83 c4 10             	add    esp,0x10
c0002d6b:	85 c0                	test   eax,eax
c0002d6d:	0f 95 c0             	setne  al
c0002d70:	0f b6 c0             	movzx  eax,al
c0002d73:	5a                   	pop    edx
c0002d74:	5b                   	pop    ebx
c0002d75:	5e                   	pop    esi
c0002d76:	c3                   	ret    

c0002d77 <create_partition>:
c0002d77:	55                   	push   ebp
c0002d78:	0f b6 c0             	movzx  eax,al
c0002d7b:	57                   	push   edi
c0002d7c:	56                   	push   esi
c0002d7d:	53                   	push   ebx
c0002d7e:	83 ec 40             	sub    esp,0x40
c0002d81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d85:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d89:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d8d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d91:	50                   	push   eax
c0002d92:	6a 01                	push   0x1
c0002d94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002d98:	e8 b7 ef ff ff       	call   c0001d54 <disk_ioctl>
c0002d9d:	83 c4 10             	add    esp,0x10
c0002da0:	85 c0                	test   eax,eax
c0002da2:	0f 85 71 01 00 00    	jne    c0002f19 <create_partition+0x1a2>
c0002da8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dac:	b9 05 00 00 00       	mov    ecx,0x5
c0002db1:	be 08 00 00 00       	mov    esi,0x8
c0002db6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002dba:	89 f0                	mov    eax,esi
c0002dbc:	31 d2                	xor    edx,edx
c0002dbe:	0f b6 d8             	movzx  ebx,al
c0002dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dc5:	f7 f3                	div    ebx
c0002dc7:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002dcc:	76 0a                	jbe    c0002dd8 <create_partition+0x61>
c0002dce:	01 f6                	add    esi,esi
c0002dd0:	49                   	dec    ecx
c0002dd1:	75 e7                	jne    c0002dba <create_partition+0x43>
c0002dd3:	be ff ff ff ff       	mov    esi,0xffffffff
c0002dd8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ddc:	b9 00 02 00 00       	mov    ecx,0x200
c0002de1:	31 d2                	xor    edx,edx
c0002de3:	e8 cc ef ff ff       	call   c0001db4 <mem_set>
c0002de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dec:	b9 64 00 00 00       	mov    ecx,0x64
c0002df1:	31 d2                	xor    edx,edx
c0002df3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002dfb:	f7 f1                	div    ecx
c0002dfd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002e06:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e0a:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002e10:	89 f0                	mov    eax,esi
c0002e12:	0f b6 c0             	movzx  eax,al
c0002e15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e19:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002e1e:	0f 96 c2             	setbe  dl
c0002e21:	85 c9                	test   ecx,ecx
c0002e23:	0f 95 c0             	setne  al
c0002e26:	84 c2                	test   dl,al
c0002e28:	0f 84 ba 00 00 00    	je     c0002ee8 <create_partition+0x171>
c0002e2e:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002e32:	0f 83 b0 00 00 00    	jae    c0002ee8 <create_partition+0x171>
c0002e38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e3c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002e40:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e43:	83 fe 64             	cmp    esi,0x64
c0002e46:	77 0d                	ja     c0002e55 <create_partition+0xde>
c0002e48:	74 07                	je     c0002e51 <create_partition+0xda>
c0002e4a:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e4f:	eb 04                	jmp    c0002e55 <create_partition+0xde>
c0002e51:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e55:	89 ca                	mov    edx,ecx
c0002e57:	31 c0                	xor    eax,eax
c0002e59:	01 f2                	add    edx,esi
c0002e5b:	0f 92 c0             	setb   al
c0002e5e:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e62:	77 04                	ja     c0002e68 <create_partition+0xf1>
c0002e64:	85 c0                	test   eax,eax
c0002e66:	74 08                	je     c0002e70 <create_partition+0xf9>
c0002e68:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e6c:	29 ce                	sub    esi,ecx
c0002e6e:	eb 04                	jmp    c0002e74 <create_partition+0xfd>
c0002e70:	85 f6                	test   esi,esi
c0002e72:	74 74                	je     c0002ee8 <create_partition+0x171>
c0002e74:	89 ca                	mov    edx,ecx
c0002e76:	89 d8                	mov    eax,ebx
c0002e78:	bf 3f 00 00 00       	mov    edi,0x3f
c0002e7d:	e8 1a ef ff ff       	call   c0001d9c <st_dword>
c0002e82:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e85:	89 f2                	mov    edx,esi
c0002e87:	83 c3 10             	add    ebx,0x10
c0002e8a:	e8 0d ef ff ff       	call   c0001d9c <st_dword>
c0002e8f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e93:	31 d2                	xor    edx,edx
c0002e95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002e99:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e9c:	89 c8                	mov    eax,ecx
c0002e9e:	01 f1                	add    ecx,esi
c0002ea0:	f7 f7                	div    edi
c0002ea2:	89 d5                	mov    ebp,edx
c0002ea4:	31 d2                	xor    edx,edx
c0002ea6:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002eaa:	45                   	inc    ebp
c0002eab:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002eae:	89 c2                	mov    edx,eax
c0002eb0:	c1 ea 02             	shr    edx,0x2
c0002eb3:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eb6:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eb9:	83 e2 c0             	and    edx,0xffffffc0
c0002ebc:	09 ea                	or     edx,ebp
c0002ebe:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ec1:	31 d2                	xor    edx,edx
c0002ec3:	f7 f7                	div    edi
c0002ec5:	89 d6                	mov    esi,edx
c0002ec7:	31 d2                	xor    edx,edx
c0002ec9:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002ecd:	46                   	inc    esi
c0002ece:	89 c7                	mov    edi,eax
c0002ed0:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ed3:	c1 ef 02             	shr    edi,0x2
c0002ed6:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed9:	83 e7 c0             	and    edi,0xffffffc0
c0002edc:	09 fe                	or     esi,edi
c0002ede:	89 f2                	mov    edx,esi
c0002ee0:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ee3:	e9 31 ff ff ff       	jmp    c0002e19 <create_partition+0xa2>
c0002ee8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eec:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ef1:	05 fe 01 00 00       	add    eax,0x1fe
c0002ef6:	e8 9d ee ff ff       	call   c0001d98 <st_word>
c0002efb:	6a 01                	push   0x1
c0002efd:	6a 00                	push   0x0
c0002eff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002f03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f07:	e8 32 ee ff ff       	call   c0001d3e <disk_write>
c0002f0c:	83 c4 10             	add    esp,0x10
c0002f0f:	85 c0                	test   eax,eax
c0002f11:	0f 95 c0             	setne  al
c0002f14:	0f b6 c0             	movzx  eax,al
c0002f17:	eb 05                	jmp    c0002f1e <create_partition+0x1a7>
c0002f19:	b8 01 00 00 00       	mov    eax,0x1
c0002f1e:	83 c4 3c             	add    esp,0x3c
c0002f21:	5b                   	pop    ebx
c0002f22:	5e                   	pop    esi
c0002f23:	5f                   	pop    edi
c0002f24:	5d                   	pop    ebp
c0002f25:	c3                   	ret    

c0002f26 <get_fileinfo>:
c0002f26:	55                   	push   ebp
c0002f27:	57                   	push   edi
c0002f28:	56                   	push   esi
c0002f29:	53                   	push   ebx
c0002f2a:	83 ec 1c             	sub    esp,0x1c
c0002f2d:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f2f:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f33:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f37:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f3b:	0f 84 c5 01 00 00    	je     c0003106 <get_fileinfo+0x1e0>
c0002f41:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f45:	89 d3                	mov    ebx,edx
c0002f47:	89 c6                	mov    esi,eax
c0002f49:	74 6e                	je     c0002fb9 <get_fileinfo+0x93>
c0002f4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f53:	31 ed                	xor    ebp,ebp
c0002f55:	31 ff                	xor    edi,edi
c0002f57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f62:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f66:	66 85 d2             	test   dx,dx
c0002f69:	74 3e                	je     c0002fa9 <get_fileinfo+0x83>
c0002f6b:	66 85 ed             	test   bp,bp
c0002f6e:	75 0c                	jne    c0002f7c <get_fileinfo+0x56>
c0002f70:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f76:	66 3d ff 07          	cmp    ax,0x7ff
c0002f7a:	76 22                	jbe    c0002f9e <get_fileinfo+0x78>
c0002f7c:	89 e8                	mov    eax,ebp
c0002f7e:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f83:	c1 e0 10             	shl    eax,0x10
c0002f86:	29 f9                	sub    ecx,edi
c0002f88:	09 d0                	or     eax,edx
c0002f8a:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f8e:	e8 31 ef ff ff       	call   c0001ec4 <put_utf>
c0002f93:	84 c0                	test   al,al
c0002f95:	74 10                	je     c0002fa7 <get_fileinfo+0x81>
c0002f97:	0f b6 c0             	movzx  eax,al
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	01 c7                	add    edi,eax
c0002f9e:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002fa3:	89 d5                	mov    ebp,edx
c0002fa5:	eb b0                	jmp    c0002f57 <get_fileinfo+0x31>
c0002fa7:	31 ff                	xor    edi,edi
c0002fa9:	66 85 ed             	test   bp,bp
c0002fac:	b8 00 00 00 00       	mov    eax,0x0
c0002fb1:	0f 45 f8             	cmovne edi,eax
c0002fb4:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002fb9:	31 ff                	xor    edi,edi
c0002fbb:	31 c9                	xor    ecx,ecx
c0002fbd:	83 f9 0a             	cmp    ecx,0xa
c0002fc0:	0f 87 ad 00 00 00    	ja     c0003073 <get_fileinfo+0x14d>
c0002fc6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc9:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002fcc:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fd0:	66 83 fa 20          	cmp    dx,0x20
c0002fd4:	0f 84 92 00 00 00    	je     c000306c <get_fileinfo+0x146>
c0002fda:	66 83 fa 05          	cmp    dx,0x5
c0002fde:	75 05                	jne    c0002fe5 <get_fileinfo+0xbf>
c0002fe0:	ba e5 00 00 00       	mov    edx,0xe5
c0002fe5:	83 fd 09             	cmp    ebp,0x9
c0002fe8:	75 0b                	jne    c0002ff5 <get_fileinfo+0xcf>
c0002fea:	83 ff 0b             	cmp    edi,0xb
c0002fed:	77 06                	ja     c0002ff5 <get_fileinfo+0xcf>
c0002fef:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002ff4:	47                   	inc    edi
c0002ff5:	0f b7 c2             	movzx  eax,dx
c0002ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ffc:	e8 f2 ed ff ff       	call   c0001df3 <dbc_1st>
c0003001:	85 c0                	test   eax,eax
c0003003:	74 2f                	je     c0003034 <get_fileinfo+0x10e>
c0003005:	83 fd 08             	cmp    ebp,0x8
c0003008:	74 2a                	je     c0003034 <get_fileinfo+0x10e>
c000300a:	83 fd 0b             	cmp    ebp,0xb
c000300d:	74 25                	je     c0003034 <get_fileinfo+0x10e>
c000300f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003012:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003016:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000301a:	e8 d7 ed ff ff       	call   c0001df6 <dbc_2nd>
c000301f:	85 c0                	test   eax,eax
c0003021:	74 11                	je     c0003034 <get_fileinfo+0x10e>
c0003023:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003027:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000302c:	8d 69 02             	lea    ebp,[ecx+0x2]
c000302f:	c1 e2 08             	shl    edx,0x8
c0003032:	09 c2                	or     edx,eax
c0003034:	0f b7 d2             	movzx  edx,dx
c0003037:	50                   	push   eax
c0003038:	50                   	push   eax
c0003039:	68 b5 01 00 00       	push   0x1b5
c000303e:	52                   	push   edx
c000303f:	e8 28 2b 00 00       	call   c0005b6c <ff_oem2uni>
c0003044:	83 c4 10             	add    esp,0x10
c0003047:	66 85 c0             	test   ax,ax
c000304a:	75 04                	jne    c0003050 <get_fileinfo+0x12a>
c000304c:	31 ff                	xor    edi,edi
c000304e:	eb 23                	jmp    c0003073 <get_fileinfo+0x14d>
c0003050:	b9 0c 00 00 00       	mov    ecx,0xc
c0003055:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003059:	0f b7 c0             	movzx  eax,ax
c000305c:	29 f9                	sub    ecx,edi
c000305e:	e8 61 ee ff ff       	call   c0001ec4 <put_utf>
c0003063:	84 c0                	test   al,al
c0003065:	74 e5                	je     c000304c <get_fileinfo+0x126>
c0003067:	0f b6 c0             	movzx  eax,al
c000306a:	01 c7                	add    edi,eax
c000306c:	89 e9                	mov    ecx,ebp
c000306e:	e9 4a ff ff ff       	jmp    c0002fbd <get_fileinfo+0x97>
c0003073:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003078:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000307c:	75 54                	jne    c00030d2 <get_fileinfo+0x1ac>
c000307e:	85 ff                	test   edi,edi
c0003080:	75 0b                	jne    c000308d <get_fileinfo+0x167>
c0003082:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003086:	ba 01 00 00 00       	mov    edx,0x1
c000308b:	eb 33                	jmp    c00030c0 <get_fileinfo+0x19a>
c000308d:	b1 08                	mov    cl,0x8
c000308f:	31 d2                	xor    edx,edx
c0003091:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003097:	84 c0                	test   al,al
c0003099:	74 25                	je     c00030c0 <get_fileinfo+0x19a>
c000309b:	66 83 f8 2e          	cmp    ax,0x2e
c000309f:	74 16                	je     c00030b7 <get_fileinfo+0x191>
c00030a1:	8d 78 bf             	lea    edi,[eax-0x41]
c00030a4:	66 83 ff 19          	cmp    di,0x19
c00030a8:	77 0f                	ja     c00030b9 <get_fileinfo+0x193>
c00030aa:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00030ad:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c00030b0:	74 07                	je     c00030b9 <get_fileinfo+0x193>
c00030b2:	83 c0 20             	add    eax,0x20
c00030b5:	eb 02                	jmp    c00030b9 <get_fileinfo+0x193>
c00030b7:	b1 10                	mov    cl,0x10
c00030b9:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00030bd:	42                   	inc    edx
c00030be:	eb d1                	jmp    c0003091 <get_fileinfo+0x16b>
c00030c0:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00030c5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030c8:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00030cc:	75 04                	jne    c00030d2 <get_fileinfo+0x1ac>
c00030ce:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030d2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030d5:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030d8:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030db:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030de:	83 c0 1c             	add    eax,0x1c
c00030e1:	e8 9a ec ff ff       	call   c0001d80 <ld_dword>
c00030e6:	89 03                	mov    DWORD PTR [ebx],eax
c00030e8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030eb:	83 c0 16             	add    eax,0x16
c00030ee:	e8 80 ec ff ff       	call   c0001d73 <ld_word>
c00030f3:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	83 c0 18             	add    eax,0x18
c00030fd:	e8 71 ec ff ff       	call   c0001d73 <ld_word>
c0003102:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003106:	83 c4 1c             	add    esp,0x1c
c0003109:	5b                   	pop    ebx
c000310a:	5e                   	pop    esi
c000310b:	5f                   	pop    edi
c000310c:	5d                   	pop    ebp
c000310d:	c3                   	ret    

c000310e <ld_clust.isra.0>:
c000310e:	56                   	push   esi
c000310f:	89 c6                	mov    esi,eax
c0003111:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003114:	53                   	push   ebx
c0003115:	89 d3                	mov    ebx,edx
c0003117:	e8 57 ec ff ff       	call   c0001d73 <ld_word>
c000311c:	0f b7 c8             	movzx  ecx,ax
c000311f:	89 f0                	mov    eax,esi
c0003121:	3c 03                	cmp    al,0x3
c0003123:	75 0d                	jne    c0003132 <ld_clust.isra.0+0x24>
c0003125:	8d 43 14             	lea    eax,[ebx+0x14]
c0003128:	e8 46 ec ff ff       	call   c0001d73 <ld_word>
c000312d:	c1 e0 10             	shl    eax,0x10
c0003130:	09 c1                	or     ecx,eax
c0003132:	89 c8                	mov    eax,ecx
c0003134:	5b                   	pop    ebx
c0003135:	5e                   	pop    esi
c0003136:	c3                   	ret    

c0003137 <st_clust.isra.1>:
c0003137:	56                   	push   esi
c0003138:	89 c6                	mov    esi,eax
c000313a:	53                   	push   ebx
c000313b:	89 d3                	mov    ebx,edx
c000313d:	0f b7 d1             	movzx  edx,cx
c0003140:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003143:	e8 50 ec ff ff       	call   c0001d98 <st_word>
c0003148:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000314b:	75 0f                	jne    c000315c <st_clust.isra.1+0x25>
c000314d:	c1 e9 10             	shr    ecx,0x10
c0003150:	8d 43 14             	lea    eax,[ebx+0x14]
c0003153:	5b                   	pop    ebx
c0003154:	5e                   	pop    esi
c0003155:	89 ca                	mov    edx,ecx
c0003157:	e9 3c ec ff ff       	jmp    c0001d98 <st_word>
c000315c:	5b                   	pop    ebx
c000315d:	5e                   	pop    esi
c000315e:	c3                   	ret    

c000315f <get_fat.isra.2>:
c000315f:	b9 01 00 00 00       	mov    ecx,0x1
c0003164:	83 fa 01             	cmp    edx,0x1
c0003167:	0f 86 f2 00 00 00    	jbe    c000325f <get_fat.isra.2+0x100>
c000316d:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003170:	0f 83 e9 00 00 00    	jae    c000325f <get_fat.isra.2+0x100>
c0003176:	55                   	push   ebp
c0003177:	57                   	push   edi
c0003178:	56                   	push   esi
c0003179:	89 c6                	mov    esi,eax
c000317b:	53                   	push   ebx
c000317c:	89 d3                	mov    ebx,edx
c000317e:	83 ec 0c             	sub    esp,0xc
c0003181:	8a 00                	mov    al,BYTE PTR [eax]
c0003183:	3c 02                	cmp    al,0x2
c0003185:	74 79                	je     c0003200 <get_fat.isra.2+0xa1>
c0003187:	3c 03                	cmp    al,0x3
c0003189:	0f 84 98 00 00 00    	je     c0003227 <get_fat.isra.2+0xc8>
c000318f:	fe c8                	dec    al
c0003191:	0f 85 be 00 00 00    	jne    c0003255 <get_fat.isra.2+0xf6>
c0003197:	89 d7                	mov    edi,edx
c0003199:	89 f0                	mov    eax,esi
c000319b:	d1 ef                	shr    edi,1
c000319d:	01 d7                	add    edi,edx
c000319f:	89 fa                	mov    edx,edi
c00031a1:	c1 ea 09             	shr    edx,0x9
c00031a4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00031a7:	e8 f6 f0 ff ff       	call   c00022a2 <move_window>
c00031ac:	85 c0                	test   eax,eax
c00031ae:	74 08                	je     c00031b8 <get_fat.isra.2+0x59>
c00031b0:	83 c9 ff             	or     ecx,0xffffffff
c00031b3:	e9 9d 00 00 00       	jmp    c0003255 <get_fat.isra.2+0xf6>
c00031b8:	8d 6f 01             	lea    ebp,[edi+0x1]
c00031bb:	89 f0                	mov    eax,esi
c00031bd:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00031c3:	89 ea                	mov    edx,ebp
c00031c5:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00031ca:	c1 ea 09             	shr    edx,0x9
c00031cd:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00031d0:	e8 cd f0 ff ff       	call   c00022a2 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	75 d7                	jne    c00031b0 <get_fat.isra.2+0x51>
c00031d9:	89 f8                	mov    eax,edi
c00031db:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031e1:	0f b6 f8             	movzx  edi,al
c00031e4:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00031e9:	c1 e0 08             	shl    eax,0x8
c00031ec:	09 f8                	or     eax,edi
c00031ee:	89 c1                	mov    ecx,eax
c00031f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031f6:	80 e3 01             	and    bl,0x1
c00031f9:	74 5a                	je     c0003255 <get_fat.isra.2+0xf6>
c00031fb:	c1 e8 04             	shr    eax,0x4
c00031fe:	eb 53                	jmp    c0003253 <get_fat.isra.2+0xf4>
c0003200:	c1 ea 08             	shr    edx,0x8
c0003203:	89 f0                	mov    eax,esi
c0003205:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003208:	e8 95 f0 ff ff       	call   c00022a2 <move_window>
c000320d:	85 c0                	test   eax,eax
c000320f:	75 9f                	jne    c00031b0 <get_fat.isra.2+0x51>
c0003211:	01 db                	add    ebx,ebx
c0003213:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003219:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000321d:	e8 51 eb ff ff       	call   c0001d73 <ld_word>
c0003222:	0f b7 c8             	movzx  ecx,ax
c0003225:	eb 2e                	jmp    c0003255 <get_fat.isra.2+0xf6>
c0003227:	c1 ea 07             	shr    edx,0x7
c000322a:	89 f0                	mov    eax,esi
c000322c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000322f:	e8 6e f0 ff ff       	call   c00022a2 <move_window>
c0003234:	85 c0                	test   eax,eax
c0003236:	0f 85 74 ff ff ff    	jne    c00031b0 <get_fat.isra.2+0x51>
c000323c:	c1 e3 02             	shl    ebx,0x2
c000323f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003245:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003249:	e8 32 eb ff ff       	call   c0001d80 <ld_dword>
c000324e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003253:	89 c1                	mov    ecx,eax
c0003255:	83 c4 0c             	add    esp,0xc
c0003258:	89 c8                	mov    eax,ecx
c000325a:	5b                   	pop    ebx
c000325b:	5e                   	pop    esi
c000325c:	5f                   	pop    edi
c000325d:	5d                   	pop    ebp
c000325e:	c3                   	ret    
c000325f:	89 c8                	mov    eax,ecx
c0003261:	c3                   	ret    

c0003262 <dir_sdi>:
c0003262:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003268:	0f 87 b6 00 00 00    	ja     c0003324 <dir_sdi+0xc2>
c000326e:	55                   	push   ebp
c000326f:	57                   	push   edi
c0003270:	56                   	push   esi
c0003271:	53                   	push   ebx
c0003272:	89 d3                	mov    ebx,edx
c0003274:	83 ec 1c             	sub    esp,0x1c
c0003277:	f6 c2 1f             	test   dl,0x1f
c000327a:	74 0a                	je     c0003286 <dir_sdi+0x24>
c000327c:	b8 02 00 00 00       	mov    eax,0x2
c0003281:	e9 96 00 00 00       	jmp    c000331c <dir_sdi+0xba>
c0003286:	89 c6                	mov    esi,eax
c0003288:	8b 28                	mov    ebp,DWORD PTR [eax]
c000328a:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000328d:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003290:	85 ff                	test   edi,edi
c0003292:	75 21                	jne    c00032b5 <dir_sdi+0x53>
c0003294:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003298:	76 07                	jbe    c00032a1 <dir_sdi+0x3f>
c000329a:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c000329d:	85 c0                	test   eax,eax
c000329f:	75 12                	jne    c00032b3 <dir_sdi+0x51>
c00032a1:	89 da                	mov    edx,ebx
c00032a3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00032a7:	c1 ea 05             	shr    edx,0x5
c00032aa:	39 c2                	cmp    edx,eax
c00032ac:	73 ce                	jae    c000327c <dir_sdi+0x1a>
c00032ae:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00032b1:	eb 3c                	jmp    c00032ef <dir_sdi+0x8d>
c00032b3:	89 c7                	mov    edi,eax
c00032b5:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00032b9:	c1 e1 09             	shl    ecx,0x9
c00032bc:	39 cb                	cmp    ebx,ecx
c00032be:	72 26                	jb     c00032e6 <dir_sdi+0x84>
c00032c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00032c2:	89 fa                	mov    edx,edi
c00032c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032c8:	e8 92 fe ff ff       	call   c000315f <get_fat.isra.2>
c00032cd:	89 c7                	mov    edi,eax
c00032cf:	83 f8 ff             	cmp    eax,0xffffffff
c00032d2:	74 43                	je     c0003317 <dir_sdi+0xb5>
c00032d4:	83 f8 01             	cmp    eax,0x1
c00032d7:	76 a3                	jbe    c000327c <dir_sdi+0x1a>
c00032d9:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00032dc:	76 9e                	jbe    c000327c <dir_sdi+0x1a>
c00032de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032e2:	29 cb                	sub    ebx,ecx
c00032e4:	eb d6                	jmp    c00032bc <dir_sdi+0x5a>
c00032e6:	89 fa                	mov    edx,edi
c00032e8:	89 e8                	mov    eax,ebp
c00032ea:	e8 ce ec ff ff       	call   c0001fbd <clst2sect>
c00032ef:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032f2:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032f5:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00032f8:	85 d2                	test   edx,edx
c00032fa:	74 80                	je     c000327c <dir_sdi+0x1a>
c00032fc:	89 d8                	mov    eax,ebx
c00032fe:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003304:	c1 e8 09             	shr    eax,0x9
c0003307:	01 d0                	add    eax,edx
c0003309:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000330c:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003310:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003313:	31 c0                	xor    eax,eax
c0003315:	eb 05                	jmp    c000331c <dir_sdi+0xba>
c0003317:	b8 01 00 00 00       	mov    eax,0x1
c000331c:	83 c4 1c             	add    esp,0x1c
c000331f:	5b                   	pop    ebx
c0003320:	5e                   	pop    esi
c0003321:	5f                   	pop    edi
c0003322:	5d                   	pop    ebp
c0003323:	c3                   	ret    
c0003324:	b8 02 00 00 00       	mov    eax,0x2
c0003329:	c3                   	ret    

c000332a <create_chain>:
c000332a:	55                   	push   ebp
c000332b:	57                   	push   edi
c000332c:	89 d7                	mov    edi,edx
c000332e:	56                   	push   esi
c000332f:	53                   	push   ebx
c0003330:	83 ec 1c             	sub    esp,0x1c
c0003333:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003339:	85 d2                	test   edx,edx
c000333b:	75 0e                	jne    c000334b <create_chain+0x21>
c000333d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0003340:	85 ed                	test   ebp,ebp
c0003342:	74 32                	je     c0003376 <create_chain+0x4c>
c0003344:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0003347:	77 32                	ja     c000337b <create_chain+0x51>
c0003349:	eb 2b                	jmp    c0003376 <create_chain+0x4c>
c000334b:	89 d8                	mov    eax,ebx
c000334d:	e8 0d fe ff ff       	call   c000315f <get_fat.isra.2>
c0003352:	83 f8 01             	cmp    eax,0x1
c0003355:	77 0a                	ja     c0003361 <create_chain+0x37>
c0003357:	b8 01 00 00 00       	mov    eax,0x1
c000335c:	e9 ee 00 00 00       	jmp    c000344f <create_chain+0x125>
c0003361:	83 f8 ff             	cmp    eax,0xffffffff
c0003364:	0f 84 e2 00 00 00    	je     c000344c <create_chain+0x122>
c000336a:	89 fd                	mov    ebp,edi
c000336c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000336f:	76 0a                	jbe    c000337b <create_chain+0x51>
c0003371:	e9 d9 00 00 00       	jmp    c000344f <create_chain+0x125>
c0003376:	bd 01 00 00 00       	mov    ebp,0x1
c000337b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000337f:	75 07                	jne    c0003388 <create_chain+0x5e>
c0003381:	31 c0                	xor    eax,eax
c0003383:	e9 c7 00 00 00       	jmp    c000344f <create_chain+0x125>
c0003388:	39 fd                	cmp    ebp,edi
c000338a:	75 44                	jne    c00033d0 <create_chain+0xa6>
c000338c:	8d 75 01             	lea    esi,[ebp+0x1]
c000338f:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003392:	77 05                	ja     c0003399 <create_chain+0x6f>
c0003394:	be 02 00 00 00       	mov    esi,0x2
c0003399:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000339d:	89 f2                	mov    edx,esi
c000339f:	8b 00                	mov    eax,DWORD PTR [eax]
c00033a1:	e8 b9 fd ff ff       	call   c000315f <get_fat.isra.2>
c00033a6:	83 f8 01             	cmp    eax,0x1
c00033a9:	0f 84 a0 00 00 00    	je     c000344f <create_chain+0x125>
c00033af:	83 f8 ff             	cmp    eax,0xffffffff
c00033b2:	0f 84 97 00 00 00    	je     c000344f <create_chain+0x125>
c00033b8:	85 c0                	test   eax,eax
c00033ba:	74 10                	je     c00033cc <create_chain+0xa2>
c00033bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00033bf:	83 f8 01             	cmp    eax,0x1
c00033c2:	76 0c                	jbe    c00033d0 <create_chain+0xa6>
c00033c4:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00033c7:	0f 47 e8             	cmova  ebp,eax
c00033ca:	eb 04                	jmp    c00033d0 <create_chain+0xa6>
c00033cc:	85 f6                	test   esi,esi
c00033ce:	75 36                	jne    c0003406 <create_chain+0xdc>
c00033d0:	89 ee                	mov    esi,ebp
c00033d2:	46                   	inc    esi
c00033d3:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00033d6:	77 0a                	ja     c00033e2 <create_chain+0xb8>
c00033d8:	83 fd 01             	cmp    ebp,0x1
c00033db:	76 a4                	jbe    c0003381 <create_chain+0x57>
c00033dd:	be 02 00 00 00       	mov    esi,0x2
c00033e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00033e6:	89 f2                	mov    edx,esi
c00033e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00033ea:	e8 70 fd ff ff       	call   c000315f <get_fat.isra.2>
c00033ef:	85 c0                	test   eax,eax
c00033f1:	74 13                	je     c0003406 <create_chain+0xdc>
c00033f3:	83 f8 01             	cmp    eax,0x1
c00033f6:	74 57                	je     c000344f <create_chain+0x125>
c00033f8:	83 f8 ff             	cmp    eax,0xffffffff
c00033fb:	74 52                	je     c000344f <create_chain+0x125>
c00033fd:	39 ee                	cmp    esi,ebp
c00033ff:	75 d1                	jne    c00033d2 <create_chain+0xa8>
c0003401:	e9 7b ff ff ff       	jmp    c0003381 <create_chain+0x57>
c0003406:	83 c9 ff             	or     ecx,0xffffffff
c0003409:	89 f2                	mov    edx,esi
c000340b:	89 d8                	mov    eax,ebx
c000340d:	e8 ec f2 ff ff       	call   c00026fe <put_fat>
c0003412:	85 c0                	test   eax,eax
c0003414:	75 0f                	jne    c0003425 <create_chain+0xfb>
c0003416:	85 ff                	test   edi,edi
c0003418:	74 0b                	je     c0003425 <create_chain+0xfb>
c000341a:	89 f1                	mov    ecx,esi
c000341c:	89 fa                	mov    edx,edi
c000341e:	89 d8                	mov    eax,ebx
c0003420:	e8 d9 f2 ff ff       	call   c00026fe <put_fat>
c0003425:	85 c0                	test   eax,eax
c0003427:	75 1c                	jne    c0003445 <create_chain+0x11b>
c0003429:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000342c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000342f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003432:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003435:	39 d0                	cmp    eax,edx
c0003437:	77 04                	ja     c000343d <create_chain+0x113>
c0003439:	48                   	dec    eax
c000343a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000343d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003441:	89 f0                	mov    eax,esi
c0003443:	eb 0a                	jmp    c000344f <create_chain+0x125>
c0003445:	48                   	dec    eax
c0003446:	0f 85 0b ff ff ff    	jne    c0003357 <create_chain+0x2d>
c000344c:	83 c8 ff             	or     eax,0xffffffff
c000344f:	83 c4 1c             	add    esp,0x1c
c0003452:	5b                   	pop    ebx
c0003453:	5e                   	pop    esi
c0003454:	5f                   	pop    edi
c0003455:	5d                   	pop    ebp
c0003456:	c3                   	ret    

c0003457 <remove_chain>:
c0003457:	55                   	push   ebp
c0003458:	57                   	push   edi
c0003459:	56                   	push   esi
c000345a:	89 d6                	mov    esi,edx
c000345c:	53                   	push   ebx
c000345d:	83 ec 0c             	sub    esp,0xc
c0003460:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003462:	83 fa 01             	cmp    edx,0x1
c0003465:	76 65                	jbe    c00034cc <remove_chain+0x75>
c0003467:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000346a:	76 60                	jbe    c00034cc <remove_chain+0x75>
c000346c:	89 c5                	mov    ebp,eax
c000346e:	89 ca                	mov    edx,ecx
c0003470:	85 c9                	test   ecx,ecx
c0003472:	74 0e                	je     c0003482 <remove_chain+0x2b>
c0003474:	83 c9 ff             	or     ecx,0xffffffff
c0003477:	89 d8                	mov    eax,ebx
c0003479:	e8 80 f2 ff ff       	call   c00026fe <put_fat>
c000347e:	85 c0                	test   eax,eax
c0003480:	75 56                	jne    c00034d8 <remove_chain+0x81>
c0003482:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003485:	89 f2                	mov    edx,esi
c0003487:	e8 d3 fc ff ff       	call   c000315f <get_fat.isra.2>
c000348c:	89 c7                	mov    edi,eax
c000348e:	85 c0                	test   eax,eax
c0003490:	75 04                	jne    c0003496 <remove_chain+0x3f>
c0003492:	31 c0                	xor    eax,eax
c0003494:	eb 42                	jmp    c00034d8 <remove_chain+0x81>
c0003496:	83 f8 01             	cmp    eax,0x1
c0003499:	74 31                	je     c00034cc <remove_chain+0x75>
c000349b:	83 f8 ff             	cmp    eax,0xffffffff
c000349e:	74 33                	je     c00034d3 <remove_chain+0x7c>
c00034a0:	31 c9                	xor    ecx,ecx
c00034a2:	89 f2                	mov    edx,esi
c00034a4:	89 d8                	mov    eax,ebx
c00034a6:	e8 53 f2 ff ff       	call   c00026fe <put_fat>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	75 29                	jne    c00034d8 <remove_chain+0x81>
c00034af:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00034b2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00034b5:	8d 4a fe             	lea    ecx,[edx-0x2]
c00034b8:	39 c8                	cmp    eax,ecx
c00034ba:	73 08                	jae    c00034c4 <remove_chain+0x6d>
c00034bc:	40                   	inc    eax
c00034bd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034c1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034c4:	89 fe                	mov    esi,edi
c00034c6:	39 fa                	cmp    edx,edi
c00034c8:	77 b8                	ja     c0003482 <remove_chain+0x2b>
c00034ca:	eb c6                	jmp    c0003492 <remove_chain+0x3b>
c00034cc:	b8 02 00 00 00       	mov    eax,0x2
c00034d1:	eb 05                	jmp    c00034d8 <remove_chain+0x81>
c00034d3:	b8 01 00 00 00       	mov    eax,0x1
c00034d8:	83 c4 0c             	add    esp,0xc
c00034db:	5b                   	pop    ebx
c00034dc:	5e                   	pop    esi
c00034dd:	5f                   	pop    edi
c00034de:	5d                   	pop    ebp
c00034df:	c3                   	ret    

c00034e0 <dir_next>:
c00034e0:	55                   	push   ebp
c00034e1:	57                   	push   edi
c00034e2:	56                   	push   esi
c00034e3:	53                   	push   ebx
c00034e4:	83 ec 1c             	sub    esp,0x1c
c00034e7:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00034ea:	8b 38                	mov    edi,DWORD PTR [eax]
c00034ec:	83 c6 20             	add    esi,0x20
c00034ef:	81 fe ff ff 1f 00    	cmp    esi,0x1fffff
c00034f5:	76 07                	jbe    c00034fe <dir_next+0x1e>
c00034f7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034fe:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
c0003501:	bd 04 00 00 00       	mov    ebp,0x4
c0003506:	85 c9                	test   ecx,ecx
c0003508:	0f 84 cb 00 00 00    	je     c00035d9 <dir_next+0xf9>
c000350e:	89 c3                	mov    ebx,eax
c0003510:	89 f0                	mov    eax,esi
c0003512:	89 d5                	mov    ebp,edx
c0003514:	25 ff 01 00 00       	and    eax,0x1ff
c0003519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351d:	0f 85 a6 00 00 00    	jne    c00035c9 <dir_next+0xe9>
c0003523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003526:	41                   	inc    ecx
c0003527:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000352a:	85 d2                	test   edx,edx
c000352c:	75 22                	jne    c0003550 <dir_next+0x70>
c000352e:	89 f2                	mov    edx,esi
c0003530:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003534:	c1 ea 05             	shr    edx,0x5
c0003537:	39 c2                	cmp    edx,eax
c0003539:	0f 82 8a 00 00 00    	jb     c00035c9 <dir_next+0xe9>
c000353f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003546:	bd 04 00 00 00       	mov    ebp,0x4
c000354b:	e9 89 00 00 00       	jmp    c00035d9 <dir_next+0xf9>
c0003550:	0f b7 47 0a          	movzx  eax,WORD PTR [edi+0xa]
c0003554:	89 f1                	mov    ecx,esi
c0003556:	c1 e9 09             	shr    ecx,0x9
c0003559:	48                   	dec    eax
c000355a:	85 c8                	test   eax,ecx
c000355c:	75 6b                	jne    c00035c9 <dir_next+0xe9>
c000355e:	89 f8                	mov    eax,edi
c0003560:	e8 fa fb ff ff       	call   c000315f <get_fat.isra.2>
c0003565:	89 c1                	mov    ecx,eax
c0003567:	83 f8 01             	cmp    eax,0x1
c000356a:	77 07                	ja     c0003573 <dir_next+0x93>
c000356c:	bd 02 00 00 00       	mov    ebp,0x2
c0003571:	eb 66                	jmp    c00035d9 <dir_next+0xf9>
c0003573:	83 f8 ff             	cmp    eax,0xffffffff
c0003576:	75 07                	jne    c000357f <dir_next+0x9f>
c0003578:	bd 01 00 00 00       	mov    ebp,0x1
c000357d:	eb 5a                	jmp    c00035d9 <dir_next+0xf9>
c000357f:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003582:	77 36                	ja     c00035ba <dir_next+0xda>
c0003584:	85 ed                	test   ebp,ebp
c0003586:	74 b7                	je     c000353f <dir_next+0x5f>
c0003588:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000358b:	89 d8                	mov    eax,ebx
c000358d:	bd 07 00 00 00       	mov    ebp,0x7
c0003592:	e8 93 fd ff ff       	call   c000332a <create_chain>
c0003597:	85 c0                	test   eax,eax
c0003599:	74 3e                	je     c00035d9 <dir_next+0xf9>
c000359b:	83 f8 01             	cmp    eax,0x1
c000359e:	74 cc                	je     c000356c <dir_next+0x8c>
c00035a0:	83 f8 ff             	cmp    eax,0xffffffff
c00035a3:	74 d3                	je     c0003578 <dir_next+0x98>
c00035a5:	89 c2                	mov    edx,eax
c00035a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ab:	89 f8                	mov    eax,edi
c00035ad:	e8 9c f2 ff ff       	call   c000284e <dir_clear>
c00035b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b6:	85 c0                	test   eax,eax
c00035b8:	75 be                	jne    c0003578 <dir_next+0x98>
c00035ba:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00035bd:	89 ca                	mov    edx,ecx
c00035bf:	89 f8                	mov    eax,edi
c00035c1:	e8 f7 e9 ff ff       	call   c0001fbd <clst2sect>
c00035c6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035cd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00035d0:	31 ed                	xor    ebp,ebp
c00035d2:	8d 44 07 34          	lea    eax,[edi+eax*1+0x34]
c00035d6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035d9:	83 c4 1c             	add    esp,0x1c
c00035dc:	89 e8                	mov    eax,ebp
c00035de:	5b                   	pop    ebx
c00035df:	5e                   	pop    esi
c00035e0:	5f                   	pop    edi
c00035e1:	5d                   	pop    ebp
c00035e2:	c3                   	ret    

c00035e3 <dir_alloc>:
c00035e3:	55                   	push   ebp
c00035e4:	57                   	push   edi
c00035e5:	89 d7                	mov    edi,edx
c00035e7:	31 d2                	xor    edx,edx
c00035e9:	56                   	push   esi
c00035ea:	53                   	push   ebx
c00035eb:	89 c3                	mov    ebx,eax
c00035ed:	83 ec 0c             	sub    esp,0xc
c00035f0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035f2:	e8 6b fc ff ff       	call   c0003262 <dir_sdi>
c00035f7:	85 c0                	test   eax,eax
c00035f9:	75 37                	jne    c0003632 <dir_alloc+0x4f>
c00035fb:	31 ed                	xor    ebp,ebp
c00035fd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003600:	89 f0                	mov    eax,esi
c0003602:	e8 9b ec ff ff       	call   c00022a2 <move_window>
c0003607:	85 c0                	test   eax,eax
c0003609:	75 27                	jne    c0003632 <dir_alloc+0x4f>
c000360b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000360e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003610:	80 fa e5             	cmp    dl,0xe5
c0003613:	74 04                	je     c0003619 <dir_alloc+0x36>
c0003615:	84 d2                	test   dl,dl
c0003617:	75 07                	jne    c0003620 <dir_alloc+0x3d>
c0003619:	45                   	inc    ebp
c000361a:	39 fd                	cmp    ebp,edi
c000361c:	75 04                	jne    c0003622 <dir_alloc+0x3f>
c000361e:	eb 1c                	jmp    c000363c <dir_alloc+0x59>
c0003620:	31 ed                	xor    ebp,ebp
c0003622:	ba 01 00 00 00       	mov    edx,0x1
c0003627:	89 d8                	mov    eax,ebx
c0003629:	e8 b2 fe ff ff       	call   c00034e0 <dir_next>
c000362e:	85 c0                	test   eax,eax
c0003630:	74 cb                	je     c00035fd <dir_alloc+0x1a>
c0003632:	83 f8 04             	cmp    eax,0x4
c0003635:	75 05                	jne    c000363c <dir_alloc+0x59>
c0003637:	b8 07 00 00 00       	mov    eax,0x7
c000363c:	83 c4 0c             	add    esp,0xc
c000363f:	5b                   	pop    ebx
c0003640:	5e                   	pop    esi
c0003641:	5f                   	pop    edi
c0003642:	5d                   	pop    ebp
c0003643:	c3                   	ret    

c0003644 <dir_read>:
c0003644:	55                   	push   ebp
c0003645:	57                   	push   edi
c0003646:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364b:	56                   	push   esi
c000364c:	be 04 00 00 00       	mov    esi,0x4
c0003651:	53                   	push   ebx
c0003652:	89 c3                	mov    ebx,eax
c0003654:	83 ec 1c             	sub    esp,0x1c
c0003657:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003659:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000365d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003662:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003665:	85 d2                	test   edx,edx
c0003667:	0f 84 d8 00 00 00    	je     c0003745 <dir_read+0x101>
c000366d:	89 e8                	mov    eax,ebp
c000366f:	e8 2e ec ff ff       	call   c00022a2 <move_window>
c0003674:	89 c6                	mov    esi,eax
c0003676:	85 c0                	test   eax,eax
c0003678:	0f 85 d2 00 00 00    	jne    c0003750 <dir_read+0x10c>
c000367e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003681:	8a 08                	mov    cl,BYTE PTR [eax]
c0003683:	84 c9                	test   cl,cl
c0003685:	0f 84 c0 00 00 00    	je     c000374b <dir_read+0x107>
c000368b:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000368e:	83 e2 3f             	and    edx,0x3f
c0003691:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0003695:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c0003698:	80 f9 e5             	cmp    cl,0xe5
c000369b:	0f 84 8a 00 00 00    	je     c000372b <dir_read+0xe7>
c00036a1:	80 f9 2e             	cmp    cl,0x2e
c00036a4:	0f 84 81 00 00 00    	je     c000372b <dir_read+0xe7>
c00036aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00036ae:	83 e2 1f             	and    edx,0x1f
c00036b1:	83 fa 08             	cmp    edx,0x8
c00036b4:	0f 94 c2             	sete   dl
c00036b7:	0f b6 d2             	movzx  edx,dl
c00036ba:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00036be:	75 6b                	jne    c000372b <dir_read+0xe7>
c00036c0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036c5:	75 46                	jne    c000370d <dir_read+0xc9>
c00036c7:	f6 c1 40             	test   cl,0x40
c00036ca:	74 12                	je     c00036de <dir_read+0x9a>
c00036cc:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c00036cf:	83 e1 bf             	and    ecx,0xffffffbf
c00036d2:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c00036d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00036d9:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c00036dc:	eb 06                	jmp    c00036e4 <dir_read+0xa0>
c00036de:	89 fa                	mov    edx,edi
c00036e0:	38 ca                	cmp    dl,cl
c00036e2:	75 47                	jne    c000372b <dir_read+0xe7>
c00036e4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e9:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c00036ed:	38 50 0d             	cmp    BYTE PTR [eax+0xd],dl
c00036f0:	75 3e                	jne    c0003730 <dir_read+0xec>
c00036f2:	89 c2                	mov    edx,eax
c00036f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036fb:	e8 da e8 ff ff       	call   c0001fda <pick_lfn>
c0003700:	85 c0                	test   eax,eax
c0003702:	74 2c                	je     c0003730 <dir_read+0xec>
c0003704:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003708:	8d 79 ff             	lea    edi,[ecx-0x1]
c000370b:	eb 23                	jmp    c0003730 <dir_read+0xec>
c000370d:	89 f9                	mov    ecx,edi
c000370f:	84 c9                	test   cl,cl
c0003711:	75 0f                	jne    c0003722 <dir_read+0xde>
c0003713:	e8 7c ea ff ff       	call   c0002194 <sum_sfn>
c0003718:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000371c:	75 04                	jne    c0003722 <dir_read+0xde>
c000371e:	31 f6                	xor    esi,esi
c0003720:	eb 35                	jmp    c0003757 <dir_read+0x113>
c0003722:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003729:	eb 2c                	jmp    c0003757 <dir_read+0x113>
c000372b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003730:	31 d2                	xor    edx,edx
c0003732:	89 d8                	mov    eax,ebx
c0003734:	e8 a7 fd ff ff       	call   c00034e0 <dir_next>
c0003739:	89 c6                	mov    esi,eax
c000373b:	85 c0                	test   eax,eax
c000373d:	0f 84 1f ff ff ff    	je     c0003662 <dir_read+0x1e>
c0003743:	eb 0b                	jmp    c0003750 <dir_read+0x10c>
c0003745:	85 f6                	test   esi,esi
c0003747:	74 d5                	je     c000371e <dir_read+0xda>
c0003749:	eb 05                	jmp    c0003750 <dir_read+0x10c>
c000374b:	be 04 00 00 00       	mov    esi,0x4
c0003750:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	89 f0                	mov    eax,esi
c000375c:	5b                   	pop    ebx
c000375d:	5e                   	pop    esi
c000375e:	5f                   	pop    edi
c000375f:	5d                   	pop    ebp
c0003760:	c3                   	ret    

c0003761 <dir_remove>:
c0003761:	57                   	push   edi
c0003762:	56                   	push   esi
c0003763:	53                   	push   ebx
c0003764:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003767:	89 c3                	mov    ebx,eax
c0003769:	8b 30                	mov    esi,DWORD PTR [eax]
c000376b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000376e:	83 fa ff             	cmp    edx,0xffffffff
c0003771:	74 09                	je     c000377c <dir_remove+0x1b>
c0003773:	e8 ea fa ff ff       	call   c0003262 <dir_sdi>
c0003778:	85 c0                	test   eax,eax
c000377a:	75 34                	jne    c00037b0 <dir_remove+0x4f>
c000377c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000377f:	89 f0                	mov    eax,esi
c0003781:	e8 1c eb ff ff       	call   c00022a2 <move_window>
c0003786:	85 c0                	test   eax,eax
c0003788:	75 1c                	jne    c00037a6 <dir_remove+0x45>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003790:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003794:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003797:	73 17                	jae    c00037b0 <dir_remove+0x4f>
c0003799:	31 d2                	xor    edx,edx
c000379b:	89 d8                	mov    eax,ebx
c000379d:	e8 3e fd ff ff       	call   c00034e0 <dir_next>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	74 d6                	je     c000377c <dir_remove+0x1b>
c00037a6:	83 f8 04             	cmp    eax,0x4
c00037a9:	75 05                	jne    c00037b0 <dir_remove+0x4f>
c00037ab:	b8 02 00 00 00       	mov    eax,0x2
c00037b0:	5b                   	pop    ebx
c00037b1:	5e                   	pop    esi
c00037b2:	5f                   	pop    edi
c00037b3:	c3                   	ret    

c00037b4 <dir_find>:
c00037b4:	55                   	push   ebp
c00037b5:	31 d2                	xor    edx,edx
c00037b7:	57                   	push   edi
c00037b8:	56                   	push   esi
c00037b9:	53                   	push   ebx
c00037ba:	89 c3                	mov    ebx,eax
c00037bc:	83 ec 1c             	sub    esp,0x1c
c00037bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00037c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037c5:	89 d8                	mov    eax,ebx
c00037c7:	e8 96 fa ff ff       	call   c0003262 <dir_sdi>
c00037cc:	89 c6                	mov    esi,eax
c00037ce:	85 c0                	test   eax,eax
c00037d0:	0f 85 02 01 00 00    	jne    c00038d8 <dir_find+0x124>
c00037d6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037dd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037e2:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037e7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ee:	e8 af ea ff ff       	call   c00022a2 <move_window>
c00037f3:	89 c6                	mov    esi,eax
c00037f5:	85 c0                	test   eax,eax
c00037f7:	0f 85 db 00 00 00    	jne    c00038d8 <dir_find+0x124>
c00037fd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003800:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003803:	84 c9                	test   cl,cl
c0003805:	0f 84 c8 00 00 00    	je     c00038d3 <dir_find+0x11f>
c000380b:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000380e:	88 d0                	mov    al,dl
c0003810:	83 e0 3f             	and    eax,0x3f
c0003813:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003816:	80 f9 e5             	cmp    cl,0xe5
c0003819:	0f 84 93 00 00 00    	je     c00038b2 <dir_find+0xfe>
c000381f:	80 e2 08             	and    dl,0x8
c0003822:	74 0a                	je     c000382e <dir_find+0x7a>
c0003824:	3c 0f                	cmp    al,0xf
c0003826:	0f 85 86 00 00 00    	jne    c00038b2 <dir_find+0xfe>
c000382c:	eb 04                	jmp    c0003832 <dir_find+0x7e>
c000382e:	3c 0f                	cmp    al,0xf
c0003830:	75 54                	jne    c0003886 <dir_find+0xd2>
c0003832:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003836:	0f 85 82 00 00 00    	jne    c00038be <dir_find+0x10a>
c000383c:	f6 c1 40             	test   cl,0x40
c000383f:	74 12                	je     c0003853 <dir_find+0x9f>
c0003841:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003844:	83 e1 bf             	and    ecx,0xffffffbf
c0003847:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000384b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000384e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003851:	eb 06                	jmp    c0003859 <dir_find+0xa5>
c0003853:	89 f8                	mov    eax,edi
c0003855:	38 c8                	cmp    al,cl
c0003857:	75 60                	jne    c00038b9 <dir_find+0x105>
c0003859:	bf ff ff ff ff       	mov    edi,0xffffffff
c000385e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003862:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003865:	75 57                	jne    c00038be <dir_find+0x10a>
c0003867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000386b:	89 ea                	mov    edx,ebp
c000386d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0003871:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003874:	e8 97 f3 ff ff       	call   c0002c10 <cmp_lfn>
c0003879:	85 c0                	test   eax,eax
c000387b:	74 41                	je     c00038be <dir_find+0x10a>
c000387d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003881:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003884:	eb 38                	jmp    c00038be <dir_find+0x10a>
c0003886:	89 f8                	mov    eax,edi
c0003888:	84 c0                	test   al,al
c000388a:	75 0d                	jne    c0003899 <dir_find+0xe5>
c000388c:	89 e8                	mov    eax,ebp
c000388e:	e8 01 e9 ff ff       	call   c0002194 <sum_sfn>
c0003893:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003897:	74 3f                	je     c00038d8 <dir_find+0x124>
c0003899:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000389d:	75 13                	jne    c00038b2 <dir_find+0xfe>
c000389f:	8d 53 20             	lea    edx,[ebx+0x20]
c00038a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00038a7:	89 e8                	mov    eax,ebp
c00038a9:	e8 11 e5 ff ff       	call   c0001dbf <mem_cmp>
c00038ae:	85 c0                	test   eax,eax
c00038b0:	74 26                	je     c00038d8 <dir_find+0x124>
c00038b2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038b9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038be:	31 d2                	xor    edx,edx
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 19 fc ff ff       	call   c00034e0 <dir_next>
c00038c7:	89 c6                	mov    esi,eax
c00038c9:	85 c0                	test   eax,eax
c00038cb:	0f 84 16 ff ff ff    	je     c00037e7 <dir_find+0x33>
c00038d1:	eb 05                	jmp    c00038d8 <dir_find+0x124>
c00038d3:	be 04 00 00 00       	mov    esi,0x4
c00038d8:	83 c4 1c             	add    esp,0x1c
c00038db:	89 f0                	mov    eax,esi
c00038dd:	5b                   	pop    ebx
c00038de:	5e                   	pop    esi
c00038df:	5f                   	pop    edi
c00038e0:	5d                   	pop    ebp
c00038e1:	c3                   	ret    

c00038e2 <follow_path>:
c00038e2:	56                   	push   esi
c00038e3:	53                   	push   ebx
c00038e4:	89 c3                	mov    ebx,eax
c00038e6:	83 ec 14             	sub    esp,0x14
c00038e9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038f3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038f5:	80 fa 2f             	cmp    dl,0x2f
c00038f8:	75 07                	jne    c0003901 <follow_path+0x1f>
c00038fa:	40                   	inc    eax
c00038fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038ff:	eb ee                	jmp    c00038ef <follow_path+0xd>
c0003901:	80 fa 5c             	cmp    dl,0x5c
c0003904:	74 f4                	je     c00038fa <follow_path+0x18>
c0003906:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000390d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003910:	77 3e                	ja     c0003950 <follow_path+0x6e>
c0003912:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003916:	31 d2                	xor    edx,edx
c0003918:	89 d8                	mov    eax,ebx
c000391a:	e8 43 f9 ff ff       	call   c0003262 <dir_sdi>
c000391f:	eb 57                	jmp    c0003978 <follow_path+0x96>
c0003921:	89 d8                	mov    eax,ebx
c0003923:	e8 8c fe ff ff       	call   c00037b4 <dir_find>
c0003928:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000392b:	85 c0                	test   eax,eax
c000392d:	75 32                	jne    c0003961 <follow_path+0x7f>
c000392f:	80 e2 04             	and    dl,0x4
c0003932:	75 44                	jne    c0003978 <follow_path+0x96>
c0003934:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003938:	74 39                	je     c0003973 <follow_path+0x91>
c000393a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000393d:	25 ff 01 00 00       	and    eax,0x1ff
c0003942:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003946:	8a 06                	mov    al,BYTE PTR [esi]
c0003948:	e8 c1 f7 ff ff       	call   c000310e <ld_clust.isra.0>
c000394d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003950:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003954:	89 d8                	mov    eax,ebx
c0003956:	e8 eb ef ff ff       	call   c0002946 <create_name>
c000395b:	85 c0                	test   eax,eax
c000395d:	74 c2                	je     c0003921 <follow_path+0x3f>
c000395f:	eb 17                	jmp    c0003978 <follow_path+0x96>
c0003961:	83 f8 04             	cmp    eax,0x4
c0003964:	75 12                	jne    c0003978 <follow_path+0x96>
c0003966:	80 e2 04             	and    dl,0x4
c0003969:	ba 05 00 00 00       	mov    edx,0x5
c000396e:	0f 44 c2             	cmove  eax,edx
c0003971:	eb 05                	jmp    c0003978 <follow_path+0x96>
c0003973:	b8 05 00 00 00       	mov    eax,0x5
c0003978:	83 c4 14             	add    esp,0x14
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	c3                   	ret    

c000397e <dir_register>:
c000397e:	55                   	push   ebp
c000397f:	57                   	push   edi
c0003980:	56                   	push   esi
c0003981:	be 06 00 00 00       	mov    esi,0x6
c0003986:	53                   	push   ebx
c0003987:	83 ec 2c             	sub    esp,0x2c
c000398a:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c000398e:	0f 85 68 01 00 00    	jne    c0003afc <dir_register+0x17e>
c0003994:	8b 38                	mov    edi,DWORD PTR [eax]
c0003996:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000399a:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000399d:	31 ff                	xor    edi,edi
c000399f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00039a4:	74 03                	je     c00039a9 <dir_register+0x2b>
c00039a6:	47                   	inc    edi
c00039a7:	eb f6                	jmp    c000399f <dir_register+0x21>
c00039a9:	89 c3                	mov    ebx,eax
c00039ab:	8d 40 20             	lea    eax,[eax+0x20]
c00039ae:	b9 0c 00 00 00       	mov    ecx,0xc
c00039b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039b7:	89 c2                	mov    edx,eax
c00039b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00039bd:	e8 dd e3 ff ff       	call   c0001d9f <mem_cpy>
c00039c2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039c7:	74 4c                	je     c0003a15 <dir_register+0x97>
c00039c9:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039cd:	bd 01 00 00 00       	mov    ebp,0x1
c00039d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039d6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00039d9:	55                   	push   ebp
c00039da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00039de:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039e2:	e8 f1 e6 ff ff       	call   c00020d8 <gen_numname>
c00039e7:	58                   	pop    eax
c00039e8:	89 d8                	mov    eax,ebx
c00039ea:	e8 c5 fd ff ff       	call   c00037b4 <dir_find>
c00039ef:	89 c6                	mov    esi,eax
c00039f1:	85 c0                	test   eax,eax
c00039f3:	75 10                	jne    c0003a05 <dir_register+0x87>
c00039f5:	45                   	inc    ebp
c00039f6:	83 fd 64             	cmp    ebp,0x64
c00039f9:	75 d7                	jne    c00039d2 <dir_register+0x54>
c00039fb:	be 07 00 00 00       	mov    esi,0x7
c0003a00:	e9 f7 00 00 00       	jmp    c0003afc <dir_register+0x17e>
c0003a05:	83 f8 04             	cmp    eax,0x4
c0003a08:	0f 85 ee 00 00 00    	jne    c0003afc <dir_register+0x17e>
c0003a0e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003a12:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003a15:	bd 01 00 00 00       	mov    ebp,0x1
c0003a1a:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003a1f:	74 0f                	je     c0003a30 <dir_register+0xb2>
c0003a21:	8d 47 0c             	lea    eax,[edi+0xc]
c0003a24:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a29:	31 d2                	xor    edx,edx
c0003a2b:	f7 f1                	div    ecx
c0003a2d:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a30:	89 ea                	mov    edx,ebp
c0003a32:	89 d8                	mov    eax,ebx
c0003a34:	e8 aa fb ff ff       	call   c00035e3 <dir_alloc>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	0f 85 b9 00 00 00    	jne    c0003afc <dir_register+0x17e>
c0003a43:	89 ef                	mov    edi,ebp
c0003a45:	4f                   	dec    edi
c0003a46:	74 6e                	je     c0003ab6 <dir_register+0x138>
c0003a48:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a4b:	89 f8                	mov    eax,edi
c0003a4d:	c1 e0 05             	shl    eax,0x5
c0003a50:	29 c2                	sub    edx,eax
c0003a52:	89 d8                	mov    eax,ebx
c0003a54:	e8 09 f8 ff ff       	call   c0003262 <dir_sdi>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	0f 85 99 00 00 00    	jne    c0003afc <dir_register+0x17e>
c0003a63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a67:	e8 28 e7 ff ff       	call   c0002194 <sum_sfn>
c0003a6c:	0f b6 e8             	movzx  ebp,al
c0003a6f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a76:	e8 27 e8 ff ff       	call   c00022a2 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 7b                	jne    c0003afc <dir_register+0x17e>
c0003a81:	89 f8                	mov    eax,edi
c0003a83:	83 ec 0c             	sub    esp,0xc
c0003a86:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a89:	0f b6 c8             	movzx  ecx,al
c0003a8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003a90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a93:	55                   	push   ebp
c0003a94:	e8 bb e5 ff ff       	call   c0002054 <put_lfn>
c0003a99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003a9d:	31 d2                	xor    edx,edx
c0003a9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003aa3:	89 d8                	mov    eax,ebx
c0003aa5:	e8 36 fa ff ff       	call   c00034e0 <dir_next>
c0003aaa:	83 c4 10             	add    esp,0x10
c0003aad:	89 c6                	mov    esi,eax
c0003aaf:	85 c0                	test   eax,eax
c0003ab1:	75 49                	jne    c0003afc <dir_register+0x17e>
c0003ab3:	4f                   	dec    edi
c0003ab4:	75 b9                	jne    c0003a6f <dir_register+0xf1>
c0003ab6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003abd:	e8 e0 e7 ff ff       	call   c00022a2 <move_window>
c0003ac2:	89 c6                	mov    esi,eax
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	75 34                	jne    c0003afc <dir_register+0x17e>
c0003ac8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003acb:	b9 20 00 00 00       	mov    ecx,0x20
c0003ad0:	31 d2                	xor    edx,edx
c0003ad2:	e8 dd e2 ff ff       	call   c0001db4 <mem_set>
c0003ad7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ada:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003ade:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae3:	e8 b7 e2 ff ff       	call   c0001d9f <mem_cpy>
c0003ae8:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aeb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aee:	83 e0 18             	and    eax,0x18
c0003af1:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003af4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003af8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003afc:	83 c4 2c             	add    esp,0x2c
c0003aff:	89 f0                	mov    eax,esi
c0003b01:	5b                   	pop    ebx
c0003b02:	5e                   	pop    esi
c0003b03:	5f                   	pop    edi
c0003b04:	5d                   	pop    ebp
c0003b05:	c3                   	ret    

c0003b06 <f_mount>:
c0003b06:	53                   	push   ebx
c0003b07:	83 ec 18             	sub    esp,0x18
c0003b0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003b0e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003b12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003b1a:	e8 87 e6 ff ff       	call   c00021a6 <get_ldnumber>
c0003b1f:	89 c2                	mov    edx,eax
c0003b21:	b8 0b 00 00 00       	mov    eax,0xb
c0003b26:	85 d2                	test   edx,edx
c0003b28:	78 39                	js     c0003b63 <f_mount+0x5d>
c0003b2a:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003b31:	85 c0                	test   eax,eax
c0003b33:	74 03                	je     c0003b38 <f_mount+0x32>
c0003b35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	74 03                	je     c0003b43 <f_mount+0x3d>
c0003b40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b47:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003b4e:	31 c0                	xor    eax,eax
c0003b50:	84 db                	test   bl,bl
c0003b52:	74 0f                	je     c0003b63 <f_mount+0x5d>
c0003b54:	31 c9                	xor    ecx,ecx
c0003b56:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b5e:	e8 98 e8 ff ff       	call   c00023fb <mount_volume>
c0003b63:	83 c4 18             	add    esp,0x18
c0003b66:	5b                   	pop    ebx
c0003b67:	c3                   	ret    

c0003b68 <f_open>:
c0003b68:	55                   	push   ebp
c0003b69:	b8 09 00 00 00       	mov    eax,0x9
c0003b6e:	57                   	push   edi
c0003b6f:	56                   	push   esi
c0003b70:	53                   	push   ebx
c0003b71:	83 ec 5c             	sub    esp,0x5c
c0003b74:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b78:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b7c:	85 db                	test   ebx,ebx
c0003b7e:	0f 84 b2 02 00 00    	je     c0003e36 <f_open+0x2ce>
c0003b84:	89 fe                	mov    esi,edi
c0003b86:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b8a:	83 e6 3f             	and    esi,0x3f
c0003b8d:	89 f0                	mov    eax,esi
c0003b8f:	0f b6 c8             	movzx  ecx,al
c0003b92:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b96:	e8 60 e8 ff ff       	call   c00023fb <mount_volume>
c0003b9b:	85 c0                	test   eax,eax
c0003b9d:	0f 85 8d 02 00 00    	jne    c0003e30 <f_open+0x2c8>
c0003ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba7:	83 ec 0c             	sub    esp,0xc
c0003baa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bae:	68 00 02 00 00       	push   0x200
c0003bb3:	e8 ec 1e 00 00       	call   c0005aa4 <ff_memalloc>
c0003bb8:	83 c4 10             	add    esp,0x10
c0003bbb:	89 c5                	mov    ebp,eax
c0003bbd:	b8 11 00 00 00       	mov    eax,0x11
c0003bc2:	85 ed                	test   ebp,ebp
c0003bc4:	0f 84 6c 02 00 00    	je     c0003e36 <f_open+0x2ce>
c0003bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bce:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003bd2:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003bd5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bd9:	e8 04 fd ff ff       	call   c00038e2 <follow_path>
c0003bde:	85 c0                	test   eax,eax
c0003be0:	75 0d                	jne    c0003bef <f_open+0x87>
c0003be2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003be7:	ba 06 00 00 00       	mov    edx,0x6
c0003bec:	0f 48 c2             	cmovs  eax,edx
c0003bef:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bf5:	0f 84 de 00 00 00    	je     c0003cd9 <f_open+0x171>
c0003bfb:	85 c0                	test   eax,eax
c0003bfd:	74 1e                	je     c0003c1d <f_open+0xb5>
c0003bff:	83 f8 04             	cmp    eax,0x4
c0003c02:	0f 85 10 02 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003c08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c0c:	83 ce 08             	or     esi,0x8
c0003c0f:	e8 6a fd ff ff       	call   c000397e <dir_register>
c0003c14:	85 c0                	test   eax,eax
c0003c16:	74 2f                	je     c0003c47 <f_open+0xdf>
c0003c18:	e9 fb 01 00 00       	jmp    c0003e18 <f_open+0x2b0>
c0003c1d:	b8 07 00 00 00       	mov    eax,0x7
c0003c22:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003c27:	0f 85 eb 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003c2d:	b8 08 00 00 00       	mov    eax,0x8
c0003c32:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c38:	0f 85 da 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003c3e:	83 e7 08             	and    edi,0x8
c0003c41:	0f 84 bf 00 00 00    	je     c0003d06 <f_open+0x19e>
c0003c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c4f:	8a 00                	mov    al,BYTE PTR [eax]
c0003c51:	89 ca                	mov    edx,ecx
c0003c53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c57:	e8 b2 f4 ff ff       	call   c000310e <ld_clust.isra.0>
c0003c5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c60:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c65:	89 c7                	mov    edi,eax
c0003c67:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c6a:	e8 2d e1 ff ff       	call   c0001d9c <st_dword>
c0003c6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c73:	31 c9                	xor    ecx,ecx
c0003c75:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c81:	e8 b1 f4 ff ff       	call   c0003137 <st_clust.isra.1>
c0003c86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c8a:	31 d2                	xor    edx,edx
c0003c8c:	83 c0 1c             	add    eax,0x1c
c0003c8f:	e8 08 e1 ff ff       	call   c0001d9c <st_dword>
c0003c94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c9c:	85 ff                	test   edi,edi
c0003c9e:	74 66                	je     c0003d06 <f_open+0x19e>
c0003ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ca4:	31 c9                	xor    ecx,ecx
c0003ca6:	89 fa                	mov    edx,edi
c0003ca8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003caf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cb3:	e8 9f f7 ff ff       	call   c0003457 <remove_chain>
c0003cb8:	85 c0                	test   eax,eax
c0003cba:	0f 85 58 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003cc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc8:	4f                   	dec    edi
c0003cc9:	e8 d4 e5 ff ff       	call   c00022a2 <move_window>
c0003cce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003cd2:	85 c0                	test   eax,eax
c0003cd4:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cd7:	eb 27                	jmp    c0003d00 <f_open+0x198>
c0003cd9:	85 c0                	test   eax,eax
c0003cdb:	0f 85 37 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003ce1:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ce5:	b8 04 00 00 00       	mov    eax,0x4
c0003cea:	f6 c2 10             	test   dl,0x10
c0003ced:	0f 85 25 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003cf3:	83 e7 02             	and    edi,0x2
c0003cf6:	74 0e                	je     c0003d06 <f_open+0x19e>
c0003cf8:	b8 07 00 00 00       	mov    eax,0x7
c0003cfd:	80 e2 01             	and    dl,0x1
c0003d00:	0f 85 12 01 00 00    	jne    c0003e18 <f_open+0x2b0>
c0003d06:	f7 c6 08 00 00 00    	test   esi,0x8
c0003d0c:	74 03                	je     c0003d11 <f_open+0x1a9>
c0003d0e:	83 ce 40             	or     esi,0x40
c0003d11:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d15:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003d19:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003d1c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003d1f:	89 fa                	mov    edx,edi
c0003d21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003d25:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003d28:	8a 01                	mov    al,BYTE PTR [ecx]
c0003d2a:	e8 df f3 ff ff       	call   c000310e <ld_clust.isra.0>
c0003d2f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d32:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d35:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003d38:	e8 43 e0 ff ff       	call   c0001d80 <ld_dword>
c0003d3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d41:	31 d2                	xor    edx,edx
c0003d43:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d46:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d48:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003d51:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d55:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d59:	89 f0                	mov    eax,esi
c0003d5b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d5e:	89 f8                	mov    eax,edi
c0003d60:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d67:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d6e:	e8 41 e0 ff ff       	call   c0001db4 <mem_set>
c0003d73:	83 e6 20             	and    esi,0x20
c0003d76:	75 07                	jne    c0003d7f <f_open+0x217>
c0003d78:	31 c0                	xor    eax,eax
c0003d7a:	e9 99 00 00 00       	jmp    c0003e18 <f_open+0x2b0>
c0003d7f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003d82:	85 f6                	test   esi,esi
c0003d84:	74 f2                	je     c0003d78 <f_open+0x210>
c0003d86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d8a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d8d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003d90:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003d94:	31 c0                	xor    eax,eax
c0003d96:	c1 e1 09             	shl    ecx,0x9
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 2b                	jne    c0003dc8 <f_open+0x260>
c0003d9d:	39 ce                	cmp    esi,ecx
c0003d9f:	76 27                	jbe    c0003dc8 <f_open+0x260>
c0003da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003da3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003da7:	e8 b3 f3 ff ff       	call   c000315f <get_fat.isra.2>
c0003dac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	83 fa 01             	cmp    edx,0x1
c0003dba:	76 08                	jbe    c0003dc4 <f_open+0x25c>
c0003dbc:	31 c0                	xor    eax,eax
c0003dbe:	83 fa ff             	cmp    edx,0xffffffff
c0003dc1:	0f 94 c0             	sete   al
c0003dc4:	29 ce                	sub    esi,ecx
c0003dc6:	eb d1                	jmp    c0003d99 <f_open+0x231>
c0003dc8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	75 49                	jne    c0003e18 <f_open+0x2b0>
c0003dcf:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003dd5:	74 a1                	je     c0003d78 <f_open+0x210>
c0003dd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ddb:	89 c8                	mov    eax,ecx
c0003ddd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003de1:	e8 d7 e1 ff ff       	call   c0001fbd <clst2sect>
c0003de6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003dea:	89 c2                	mov    edx,eax
c0003dec:	b8 02 00 00 00       	mov    eax,0x2
c0003df1:	85 d2                	test   edx,edx
c0003df3:	74 23                	je     c0003e18 <f_open+0x2b0>
c0003df5:	89 f0                	mov    eax,esi
c0003df7:	c1 e8 09             	shr    eax,0x9
c0003dfa:	01 d0                	add    eax,edx
c0003dfc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dff:	6a 01                	push   0x1
c0003e01:	50                   	push   eax
c0003e02:	57                   	push   edi
c0003e03:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003e07:	50                   	push   eax
c0003e08:	e8 1b df ff ff       	call   c0001d28 <disk_read>
c0003e0d:	83 c4 10             	add    esp,0x10
c0003e10:	85 c0                	test   eax,eax
c0003e12:	0f 95 c0             	setne  al
c0003e15:	0f b6 c0             	movzx  eax,al
c0003e18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e1c:	83 ec 0c             	sub    esp,0xc
c0003e1f:	55                   	push   ebp
c0003e20:	e8 97 1c 00 00       	call   c0005abc <ff_memfree>
c0003e25:	83 c4 10             	add    esp,0x10
c0003e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e2c:	85 c0                	test   eax,eax
c0003e2e:	74 06                	je     c0003e36 <f_open+0x2ce>
c0003e30:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e36:	83 c4 5c             	add    esp,0x5c
c0003e39:	5b                   	pop    ebx
c0003e3a:	5e                   	pop    esi
c0003e3b:	5f                   	pop    edi
c0003e3c:	5d                   	pop    ebp
c0003e3d:	c3                   	ret    

c0003e3e <f_read>:
c0003e3e:	55                   	push   ebp
c0003e3f:	57                   	push   edi
c0003e40:	56                   	push   esi
c0003e41:	53                   	push   ebx
c0003e42:	83 ec 2c             	sub    esp,0x2c
c0003e45:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e49:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e51:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e5b:	89 d8                	mov    eax,ebx
c0003e5d:	e8 96 e3 ff ff       	call   c00021f8 <validate>
c0003e62:	89 c5                	mov    ebp,eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 a4 01 00 00    	jne    c0004010 <f_read+0x1d2>
c0003e6c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e70:	85 ed                	test   ebp,ebp
c0003e72:	0f 85 98 01 00 00    	jne    c0004010 <f_read+0x1d2>
c0003e78:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e7c:	0f 84 89 01 00 00    	je     c000400b <f_read+0x1cd>
c0003e82:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e85:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e88:	39 f0                	cmp    eax,esi
c0003e8a:	0f 46 f0             	cmovbe esi,eax
c0003e8d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003e91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0003e96:	0f 84 74 01 00 00    	je     c0004010 <f_read+0x1d2>
c0003e9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e9f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003ea4:	0f 85 24 01 00 00    	jne    c0003fce <f_read+0x190>
c0003eaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003eae:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003eb2:	89 c2                	mov    edx,eax
c0003eb4:	c1 ea 09             	shr    edx,0x9
c0003eb7:	4f                   	dec    edi
c0003eb8:	21 d7                	and    edi,edx
c0003eba:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003ebe:	75 3c                	jne    c0003efc <f_read+0xbe>
c0003ec0:	85 c0                	test   eax,eax
c0003ec2:	75 05                	jne    c0003ec9 <f_read+0x8b>
c0003ec4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003ec7:	eb 0a                	jmp    c0003ed3 <f_read+0x95>
c0003ec9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ecc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ece:	e8 8c f2 ff ff       	call   c000315f <get_fat.isra.2>
c0003ed3:	83 f8 01             	cmp    eax,0x1
c0003ed6:	77 0e                	ja     c0003ee6 <f_read+0xa8>
c0003ed8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003edc:	bd 02 00 00 00       	mov    ebp,0x2
c0003ee1:	e9 2a 01 00 00       	jmp    c0004010 <f_read+0x1d2>
c0003ee6:	83 f8 ff             	cmp    eax,0xffffffff
c0003ee9:	75 0e                	jne    c0003ef9 <f_read+0xbb>
c0003eeb:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003eef:	bd 01 00 00 00       	mov    ebp,0x1
c0003ef4:	e9 17 01 00 00       	jmp    c0004010 <f_read+0x1d2>
c0003ef9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003efc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f00:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f03:	89 c8                	mov    eax,ecx
c0003f05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f09:	e8 af e0 ff ff       	call   c0001fbd <clst2sect>
c0003f0e:	85 c0                	test   eax,eax
c0003f10:	74 c6                	je     c0003ed8 <f_read+0x9a>
c0003f12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003f16:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003f1e:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003f21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f25:	76 5a                	jbe    c0003f81 <f_read+0x143>
c0003f27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003f2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f2f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003f33:	c1 ee 09             	shr    esi,0x9
c0003f36:	01 f2                	add    edx,esi
c0003f38:	39 c2                	cmp    edx,eax
c0003f3a:	76 06                	jbe    c0003f42 <f_read+0x104>
c0003f3c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003f40:	89 c6                	mov    esi,eax
c0003f42:	56                   	push   esi
c0003f43:	57                   	push   edi
c0003f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003f48:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f4c:	50                   	push   eax
c0003f4d:	e8 d6 dd ff ff       	call   c0001d28 <disk_read>
c0003f52:	83 c4 10             	add    esp,0x10
c0003f55:	85 c0                	test   eax,eax
c0003f57:	75 92                	jne    c0003eeb <f_read+0xad>
c0003f59:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5d:	79 1d                	jns    c0003f7c <f_read+0x13e>
c0003f5f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f62:	29 f8                	sub    eax,edi
c0003f64:	39 f0                	cmp    eax,esi
c0003f66:	73 14                	jae    c0003f7c <f_read+0x13e>
c0003f68:	c1 e0 09             	shl    eax,0x9
c0003f6b:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f6e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f72:	b9 00 02 00 00       	mov    ecx,0x200
c0003f77:	e8 23 de ff ff       	call   c0001d9f <mem_cpy>
c0003f7c:	c1 e6 09             	shl    esi,0x9
c0003f7f:	eb 74                	jmp    c0003ff5 <f_read+0x1b7>
c0003f81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f84:	39 f8                	cmp    eax,edi
c0003f86:	74 43                	je     c0003fcb <f_read+0x18d>
c0003f88:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8c:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f8f:	79 1d                	jns    c0003fae <f_read+0x170>
c0003f91:	6a 01                	push   0x1
c0003f93:	50                   	push   eax
c0003f94:	56                   	push   esi
c0003f95:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f99:	50                   	push   eax
c0003f9a:	e8 9f dd ff ff       	call   c0001d3e <disk_write>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	85 c0                	test   eax,eax
c0003fa4:	0f 85 41 ff ff ff    	jne    c0003eeb <f_read+0xad>
c0003faa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fae:	6a 01                	push   0x1
c0003fb0:	57                   	push   edi
c0003fb1:	56                   	push   esi
c0003fb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fba:	50                   	push   eax
c0003fbb:	e8 68 dd ff ff       	call   c0001d28 <disk_read>
c0003fc0:	83 c4 10             	add    esp,0x10
c0003fc3:	85 c0                	test   eax,eax
c0003fc5:	0f 85 20 ff ff ff    	jne    c0003eeb <f_read+0xad>
c0003fcb:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0003fce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd1:	be 00 02 00 00       	mov    esi,0x200
c0003fd6:	25 ff 01 00 00       	and    eax,0x1ff
c0003fdb:	29 c6                	sub    esi,eax
c0003fdd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0003fe1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe5:	0f 46 74 24 04       	cmovbe esi,DWORD PTR [esp+0x4]
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	89 f1                	mov    ecx,esi
c0003ff0:	e8 aa dd ff ff       	call   c0001d9f <mem_cpy>
c0003ff5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff9:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0003ffd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004001:	01 30                	add    DWORD PTR [eax],esi
c0004003:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004006:	e9 86 fe ff ff       	jmp    c0003e91 <f_read+0x53>
c000400b:	bd 07 00 00 00       	mov    ebp,0x7
c0004010:	83 c4 2c             	add    esp,0x2c
c0004013:	89 e8                	mov    eax,ebp
c0004015:	5b                   	pop    ebx
c0004016:	5e                   	pop    esi
c0004017:	5f                   	pop    edi
c0004018:	5d                   	pop    ebp
c0004019:	c3                   	ret    

c000401a <f_write>:
c000401a:	55                   	push   ebp
c000401b:	57                   	push   edi
c000401c:	56                   	push   esi
c000401d:	53                   	push   ebx
c000401e:	83 ec 2c             	sub    esp,0x2c
c0004021:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004025:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004029:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000402d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004031:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004037:	89 d8                	mov    eax,ebx
c0004039:	e8 ba e1 ff ff       	call   c00021f8 <validate>
c000403e:	89 c5                	mov    ebp,eax
c0004040:	85 c0                	test   eax,eax
c0004042:	0f 85 fe 01 00 00    	jne    c0004246 <f_write+0x22c>
c0004048:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000404c:	85 ed                	test   ebp,ebp
c000404e:	0f 85 f2 01 00 00    	jne    c0004246 <f_write+0x22c>
c0004054:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004058:	0f 84 e3 01 00 00    	je     c0004241 <f_write+0x227>
c000405e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004061:	89 c1                	mov    ecx,eax
c0004063:	01 f9                	add    ecx,edi
c0004065:	0f 83 e7 00 00 00    	jae    c0004152 <f_write+0x138>
c000406b:	f7 d0                	not    eax
c000406d:	89 c7                	mov    edi,eax
c000406f:	e9 de 00 00 00       	jmp    c0004152 <f_write+0x138>
c0004074:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004077:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000407d:	0f 85 92 01 00 00    	jne    c0004215 <f_write+0x1fb>
c0004083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004087:	89 d1                	mov    ecx,edx
c0004089:	c1 e9 09             	shr    ecx,0x9
c000408c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004090:	48                   	dec    eax
c0004091:	21 c8                	and    eax,ecx
c0004093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004097:	0f 84 bf 00 00 00    	je     c000415c <f_write+0x142>
c000409d:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040a1:	0f 88 14 01 00 00    	js     c00041bb <f_write+0x1a1>
c00040a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00040ab:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040ae:	89 c8                	mov    eax,ecx
c00040b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040b4:	e8 04 df ff ff       	call   c0001fbd <clst2sect>
c00040b9:	85 c0                	test   eax,eax
c00040bb:	0f 84 c4 00 00 00    	je     c0004185 <f_write+0x16b>
c00040c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00040c5:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c00040cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00040d3:	0f 86 09 01 00 00    	jbe    c00041e2 <f_write+0x1c8>
c00040d9:	89 fe                	mov    esi,edi
c00040db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040e3:	c1 ee 09             	shr    esi,0x9
c00040e6:	01 f2                	add    edx,esi
c00040e8:	39 c2                	cmp    edx,eax
c00040ea:	76 06                	jbe    c00040f2 <f_write+0xd8>
c00040ec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040f0:	89 c6                	mov    esi,eax
c00040f2:	56                   	push   esi
c00040f3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00040f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ff:	50                   	push   eax
c0004100:	e8 39 dc ff ff       	call   c0001d3e <disk_write>
c0004105:	83 c4 10             	add    esp,0x10
c0004108:	85 c0                	test   eax,eax
c000410a:	0f 85 88 00 00 00    	jne    c0004198 <f_write+0x17e>
c0004110:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004113:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0004117:	39 f2                	cmp    edx,esi
c0004119:	73 18                	jae    c0004133 <f_write+0x119>
c000411b:	c1 e2 09             	shl    edx,0x9
c000411e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004121:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004125:	b9 00 02 00 00       	mov    ecx,0x200
c000412a:	e8 70 dc ff ff       	call   c0001d9f <mem_cpy>
c000412f:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004133:	c1 e6 09             	shl    esi,0x9
c0004136:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000413a:	29 f7                	sub    edi,esi
c000413c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004140:	01 30                	add    DWORD PTR [eax],esi
c0004142:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004145:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004148:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000414b:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000414f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004152:	85 ff                	test   edi,edi
c0004154:	0f 85 1a ff ff ff    	jne    c0004074 <f_write+0x5a>
c000415a:	eb 1b                	jmp    c0004177 <f_write+0x15d>
c000415c:	85 d2                	test   edx,edx
c000415e:	75 09                	jne    c0004169 <f_write+0x14f>
c0004160:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004163:	85 c0                	test   eax,eax
c0004165:	75 19                	jne    c0004180 <f_write+0x166>
c0004167:	eb 03                	jmp    c000416c <f_write+0x152>
c0004169:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 b7 f1 ff ff       	call   c000332a <create_chain>
c0004173:	85 c0                	test   eax,eax
c0004175:	75 09                	jne    c0004180 <f_write+0x166>
c0004177:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000417b:	e9 c6 00 00 00       	jmp    c0004246 <f_write+0x22c>
c0004180:	83 f8 01             	cmp    eax,0x1
c0004183:	75 0e                	jne    c0004193 <f_write+0x179>
c0004185:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004189:	bd 02 00 00 00       	mov    ebp,0x2
c000418e:	e9 b3 00 00 00       	jmp    c0004246 <f_write+0x22c>
c0004193:	83 f8 ff             	cmp    eax,0xffffffff
c0004196:	75 0e                	jne    c00041a6 <f_write+0x18c>
c0004198:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000419c:	bd 01 00 00 00       	mov    ebp,0x1
c00041a1:	e9 a0 00 00 00       	jmp    c0004246 <f_write+0x22c>
c00041a6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00041aa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041ad:	0f 85 ea fe ff ff    	jne    c000409d <f_write+0x83>
c00041b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041b6:	e9 e2 fe ff ff       	jmp    c000409d <f_write+0x83>
c00041bb:	8d 43 28             	lea    eax,[ebx+0x28]
c00041be:	6a 01                	push   0x1
c00041c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041c3:	50                   	push   eax
c00041c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041cc:	50                   	push   eax
c00041cd:	e8 6c db ff ff       	call   c0001d3e <disk_write>
c00041d2:	83 c4 10             	add    esp,0x10
c00041d5:	85 c0                	test   eax,eax
c00041d7:	75 bf                	jne    c0004198 <f_write+0x17e>
c00041d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041dd:	e9 c5 fe ff ff       	jmp    c00040a7 <f_write+0x8d>
c00041e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00041e6:	39 43 1c             	cmp    DWORD PTR [ebx+0x1c],eax
c00041e9:	74 23                	je     c000420e <f_write+0x1f4>
c00041eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ee:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041f1:	76 1b                	jbe    c000420e <f_write+0x1f4>
c00041f3:	8d 43 28             	lea    eax,[ebx+0x28]
c00041f6:	6a 01                	push   0x1
c00041f8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00041fc:	50                   	push   eax
c00041fd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004201:	50                   	push   eax
c0004202:	e8 21 db ff ff       	call   c0001d28 <disk_read>
c0004207:	83 c4 10             	add    esp,0x10
c000420a:	85 c0                	test   eax,eax
c000420c:	75 8a                	jne    c0004198 <f_write+0x17e>
c000420e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004212:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004215:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004218:	be 00 02 00 00       	mov    esi,0x200
c000421d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004221:	25 ff 01 00 00       	and    eax,0x1ff
c0004226:	29 c6                	sub    esi,eax
c0004228:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000422c:	39 f7                	cmp    edi,esi
c000422e:	0f 46 f7             	cmovbe esi,edi
c0004231:	89 f1                	mov    ecx,esi
c0004233:	e8 67 db ff ff       	call   c0001d9f <mem_cpy>
c0004238:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c000423c:	e9 f5 fe ff ff       	jmp    c0004136 <f_write+0x11c>
c0004241:	bd 07 00 00 00       	mov    ebp,0x7
c0004246:	83 c4 2c             	add    esp,0x2c
c0004249:	89 e8                	mov    eax,ebp
c000424b:	5b                   	pop    ebx
c000424c:	5e                   	pop    esi
c000424d:	5f                   	pop    edi
c000424e:	5d                   	pop    ebp
c000424f:	c3                   	ret    

c0004250 <f_sync>:
c0004250:	56                   	push   esi
c0004251:	53                   	push   ebx
c0004252:	83 ec 14             	sub    esp,0x14
c0004255:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004259:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000425d:	89 d8                	mov    eax,ebx
c000425f:	e8 94 df ff ff       	call   c00021f8 <validate>
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 93 00 00 00    	jne    c00042ff <f_sync+0xaf>
c000426c:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000426f:	f6 c2 40             	test   dl,0x40
c0004272:	0f 84 87 00 00 00    	je     c00042ff <f_sync+0xaf>
c0004278:	84 d2                	test   dl,dl
c000427a:	79 29                	jns    c00042a5 <f_sync+0x55>
c000427c:	8d 43 28             	lea    eax,[ebx+0x28]
c000427f:	6a 01                	push   0x1
c0004281:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004284:	50                   	push   eax
c0004285:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004289:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000428d:	50                   	push   eax
c000428e:	e8 ab da ff ff       	call   c0001d3e <disk_write>
c0004293:	83 c4 10             	add    esp,0x10
c0004296:	89 c2                	mov    edx,eax
c0004298:	b8 01 00 00 00       	mov    eax,0x1
c000429d:	85 d2                	test   edx,edx
c000429f:	75 5e                	jne    c00042ff <f_sync+0xaf>
c00042a1:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00042a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042ac:	e8 f1 df ff ff       	call   c00022a2 <move_window>
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4a                	jne    c00042ff <f_sync+0xaf>
c00042b5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042b8:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042bc:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042bf:	89 f2                	mov    edx,esi
c00042c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042c3:	e8 6f ee ff ff       	call   c0003137 <st_clust.isra.1>
c00042c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042cb:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042ce:	e8 c9 da ff ff       	call   c0001d9c <st_dword>
c00042d3:	8d 46 16             	lea    eax,[esi+0x16]
c00042d6:	ba 00 00 21 50       	mov    edx,0x50210000
c00042db:	e8 bc da ff ff       	call   c0001d9c <st_dword>
c00042e0:	8d 46 12             	lea    eax,[esi+0x12]
c00042e3:	31 d2                	xor    edx,edx
c00042e5:	e8 ae da ff ff       	call   c0001d98 <st_word>
c00042ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042ee:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042f6:	e8 cc e9 ff ff       	call   c0002cc7 <sync_fs>
c00042fb:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ff:	83 c4 14             	add    esp,0x14
c0004302:	5b                   	pop    ebx
c0004303:	5e                   	pop    esi
c0004304:	c3                   	ret    

c0004305 <f_close>:
c0004305:	53                   	push   ebx
c0004306:	83 ec 24             	sub    esp,0x24
c0004309:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000430d:	53                   	push   ebx
c000430e:	e8 3d ff ff ff       	call   c0004250 <f_sync>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	85 c0                	test   eax,eax
c0004318:	75 15                	jne    c000432f <f_close+0x2a>
c000431a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 d3 de ff ff       	call   c00021f8 <validate>
c0004325:	85 c0                	test   eax,eax
c0004327:	75 06                	jne    c000432f <f_close+0x2a>
c0004329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000432f:	83 c4 18             	add    esp,0x18
c0004332:	5b                   	pop    ebx
c0004333:	c3                   	ret    

c0004334 <f_lseek>:
c0004334:	55                   	push   ebp
c0004335:	57                   	push   edi
c0004336:	56                   	push   esi
c0004337:	53                   	push   ebx
c0004338:	83 ec 2c             	sub    esp,0x2c
c000433b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000433f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004343:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 aa de ff ff       	call   c00021f8 <validate>
c000434e:	89 c5                	mov    ebp,eax
c0004350:	85 c0                	test   eax,eax
c0004352:	0f 85 78 01 00 00    	jne    c00044d0 <f_lseek+0x19c>
c0004358:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000435c:	85 ed                	test   ebp,ebp
c000435e:	0f 85 6c 01 00 00    	jne    c00044d0 <f_lseek+0x19c>
c0004364:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004367:	39 f0                	cmp    eax,esi
c0004369:	73 07                	jae    c0004372 <f_lseek+0x3e>
c000436b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000436f:	0f 44 f0             	cmove  esi,eax
c0004372:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004375:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000437c:	85 f6                	test   esi,esi
c000437e:	75 07                	jne    c0004387 <f_lseek+0x53>
c0004380:	31 f6                	xor    esi,esi
c0004382:	e9 e2 00 00 00       	jmp    c0004469 <f_lseek+0x135>
c0004387:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000438b:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000438f:	c1 e7 09             	shl    edi,0x9
c0004392:	85 c9                	test   ecx,ecx
c0004394:	74 28                	je     c00043be <f_lseek+0x8a>
c0004396:	8d 46 ff             	lea    eax,[esi-0x1]
c0004399:	31 d2                	xor    edx,edx
c000439b:	49                   	dec    ecx
c000439c:	f7 f7                	div    edi
c000439e:	31 d2                	xor    edx,edx
c00043a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00043a4:	89 c8                	mov    eax,ecx
c00043a6:	f7 f7                	div    edi
c00043a8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00043ac:	72 10                	jb     c00043be <f_lseek+0x8a>
c00043ae:	89 f8                	mov    eax,edi
c00043b0:	f7 d8                	neg    eax
c00043b2:	21 c1                	and    ecx,eax
c00043b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043b7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043ba:	29 ce                	sub    esi,ecx
c00043bc:	eb 3c                	jmp    c00043fa <f_lseek+0xc6>
c00043be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043c1:	85 c0                	test   eax,eax
c00043c3:	75 32                	jne    c00043f7 <f_lseek+0xc3>
c00043c5:	31 d2                	xor    edx,edx
c00043c7:	89 d8                	mov    eax,ebx
c00043c9:	e8 5c ef ff ff       	call   c000332a <create_chain>
c00043ce:	83 f8 01             	cmp    eax,0x1
c00043d1:	75 0e                	jne    c00043e1 <f_lseek+0xad>
c00043d3:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043d7:	bd 02 00 00 00       	mov    ebp,0x2
c00043dc:	e9 ef 00 00 00       	jmp    c00044d0 <f_lseek+0x19c>
c00043e1:	83 f8 ff             	cmp    eax,0xffffffff
c00043e4:	75 0e                	jne    c00043f4 <f_lseek+0xc0>
c00043e6:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ea:	bd 01 00 00 00       	mov    ebp,0x1
c00043ef:	e9 dc 00 00 00       	jmp    c00044d0 <f_lseek+0x19c>
c00043f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	85 c0                	test   eax,eax
c00043fc:	74 82                	je     c0004380 <f_lseek+0x4c>
c00043fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004401:	39 fe                	cmp    esi,edi
c0004403:	76 3d                	jbe    c0004442 <f_lseek+0x10e>
c0004405:	01 fa                	add    edx,edi
c0004407:	29 fe                	sub    esi,edi
c0004409:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000440c:	89 c2                	mov    edx,eax
c000440e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004412:	74 0d                	je     c0004421 <f_lseek+0xed>
c0004414:	89 d8                	mov    eax,ebx
c0004416:	e8 0f ef ff ff       	call   c000332a <create_chain>
c000441b:	85 c0                	test   eax,eax
c000441d:	75 09                	jne    c0004428 <f_lseek+0xf4>
c000441f:	eb 1f                	jmp    c0004440 <f_lseek+0x10c>
c0004421:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004423:	e8 37 ed ff ff       	call   c000315f <get_fat.isra.2>
c0004428:	83 f8 ff             	cmp    eax,0xffffffff
c000442b:	74 b9                	je     c00043e6 <f_lseek+0xb2>
c000442d:	83 f8 01             	cmp    eax,0x1
c0004430:	76 a1                	jbe    c00043d3 <f_lseek+0x9f>
c0004432:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004436:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004439:	76 98                	jbe    c00043d3 <f_lseek+0x9f>
c000443b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000443e:	eb be                	jmp    c00043fe <f_lseek+0xca>
c0004440:	31 f6                	xor    esi,esi
c0004442:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004445:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000444b:	0f 84 2f ff ff ff    	je     c0004380 <f_lseek+0x4c>
c0004451:	89 c2                	mov    edx,eax
c0004453:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004457:	e8 61 db ff ff       	call   c0001fbd <clst2sect>
c000445c:	85 c0                	test   eax,eax
c000445e:	0f 84 6f ff ff ff    	je     c00043d3 <f_lseek+0x9f>
c0004464:	c1 ee 09             	shr    esi,0x9
c0004467:	01 c6                	add    esi,eax
c0004469:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000446c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000446f:	76 07                	jbe    c0004478 <f_lseek+0x144>
c0004471:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004475:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004478:	a9 ff 01 00 00       	test   eax,0x1ff
c000447d:	74 51                	je     c00044d0 <f_lseek+0x19c>
c000447f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004482:	39 f0                	cmp    eax,esi
c0004484:	74 4a                	je     c00044d0 <f_lseek+0x19c>
c0004486:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000448a:	8d 7b 28             	lea    edi,[ebx+0x28]
c000448d:	79 21                	jns    c00044b0 <f_lseek+0x17c>
c000448f:	6a 01                	push   0x1
c0004491:	50                   	push   eax
c0004492:	57                   	push   edi
c0004493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004497:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000449b:	50                   	push   eax
c000449c:	e8 9d d8 ff ff       	call   c0001d3e <disk_write>
c00044a1:	83 c4 10             	add    esp,0x10
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 3a ff ff ff    	jne    c00043e6 <f_lseek+0xb2>
c00044ac:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00044b0:	6a 01                	push   0x1
c00044b2:	56                   	push   esi
c00044b3:	57                   	push   edi
c00044b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044bc:	50                   	push   eax
c00044bd:	e8 66 d8 ff ff       	call   c0001d28 <disk_read>
c00044c2:	83 c4 10             	add    esp,0x10
c00044c5:	85 c0                	test   eax,eax
c00044c7:	0f 85 19 ff ff ff    	jne    c00043e6 <f_lseek+0xb2>
c00044cd:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044d0:	83 c4 2c             	add    esp,0x2c
c00044d3:	89 e8                	mov    eax,ebp
c00044d5:	5b                   	pop    ebx
c00044d6:	5e                   	pop    esi
c00044d7:	5f                   	pop    edi
c00044d8:	5d                   	pop    ebp
c00044d9:	c3                   	ret    

c00044da <f_opendir>:
c00044da:	56                   	push   esi
c00044db:	b8 09 00 00 00       	mov    eax,0x9
c00044e0:	53                   	push   ebx
c00044e1:	83 ec 24             	sub    esp,0x24
c00044e4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044e8:	85 db                	test   ebx,ebx
c00044ea:	0f 84 af 00 00 00    	je     c000459f <f_opendir+0xc5>
c00044f0:	31 c9                	xor    ecx,ecx
c00044f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044f6:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044fa:	e8 fc de ff ff       	call   c00023fb <mount_volume>
c00044ff:	85 c0                	test   eax,eax
c0004501:	0f 85 92 00 00 00    	jne    c0004599 <f_opendir+0xbf>
c0004507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000450b:	83 ec 0c             	sub    esp,0xc
c000450e:	89 03                	mov    DWORD PTR [ebx],eax
c0004510:	68 00 02 00 00       	push   0x200
c0004515:	e8 8a 15 00 00       	call   c0005aa4 <ff_memalloc>
c000451a:	83 c4 10             	add    esp,0x10
c000451d:	89 c6                	mov    esi,eax
c000451f:	b8 11 00 00 00       	mov    eax,0x11
c0004524:	85 f6                	test   esi,esi
c0004526:	74 77                	je     c000459f <f_opendir+0xc5>
c0004528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000452c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004530:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004533:	89 d8                	mov    eax,ebx
c0004535:	e8 a8 f3 ff ff       	call   c00038e2 <follow_path>
c000453a:	85 c0                	test   eax,eax
c000453c:	75 37                	jne    c0004575 <f_opendir+0x9b>
c000453e:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c0004542:	78 1c                	js     c0004560 <f_opendir+0x86>
c0004544:	b8 05 00 00 00       	mov    eax,0x5
c0004549:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000454d:	74 26                	je     c0004575 <f_opendir+0x9b>
c000454f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004553:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004556:	8a 00                	mov    al,BYTE PTR [eax]
c0004558:	e8 b1 eb ff ff       	call   c000310e <ld_clust.isra.0>
c000455d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004560:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004564:	31 d2                	xor    edx,edx
c0004566:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000456a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000456e:	89 d8                	mov    eax,ebx
c0004570:	e8 ed ec ff ff       	call   c0003262 <dir_sdi>
c0004575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004579:	83 ec 0c             	sub    esp,0xc
c000457c:	56                   	push   esi
c000457d:	e8 3a 15 00 00       	call   c0005abc <ff_memfree>
c0004582:	83 c4 10             	add    esp,0x10
c0004585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004589:	83 f8 04             	cmp    eax,0x4
c000458c:	74 06                	je     c0004594 <f_opendir+0xba>
c000458e:	85 c0                	test   eax,eax
c0004590:	74 0d                	je     c000459f <f_opendir+0xc5>
c0004592:	eb 05                	jmp    c0004599 <f_opendir+0xbf>
c0004594:	b8 05 00 00 00       	mov    eax,0x5
c0004599:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000459f:	83 c4 24             	add    esp,0x24
c00045a2:	5b                   	pop    ebx
c00045a3:	5e                   	pop    esi
c00045a4:	c3                   	ret    

c00045a5 <f_closedir>:
c00045a5:	53                   	push   ebx
c00045a6:	83 ec 18             	sub    esp,0x18
c00045a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045ad:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045b1:	89 d8                	mov    eax,ebx
c00045b3:	e8 40 dc ff ff       	call   c00021f8 <validate>
c00045b8:	85 c0                	test   eax,eax
c00045ba:	75 06                	jne    c00045c2 <f_closedir+0x1d>
c00045bc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045c2:	83 c4 18             	add    esp,0x18
c00045c5:	5b                   	pop    ebx
c00045c6:	c3                   	ret    

c00045c7 <f_readdir>:
c00045c7:	57                   	push   edi
c00045c8:	56                   	push   esi
c00045c9:	53                   	push   ebx
c00045ca:	83 ec 20             	sub    esp,0x20
c00045cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045d9:	89 d8                	mov    eax,ebx
c00045db:	e8 18 dc ff ff       	call   c00021f8 <validate>
c00045e0:	85 c0                	test   eax,eax
c00045e2:	75 6e                	jne    c0004652 <f_readdir+0x8b>
c00045e4:	85 ff                	test   edi,edi
c00045e6:	75 0b                	jne    c00045f3 <f_readdir+0x2c>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	89 d8                	mov    eax,ebx
c00045ec:	e8 71 ec ff ff       	call   c0003262 <dir_sdi>
c00045f1:	eb 5f                	jmp    c0004652 <f_readdir+0x8b>
c00045f3:	83 ec 0c             	sub    esp,0xc
c00045f6:	68 00 02 00 00       	push   0x200
c00045fb:	e8 a4 14 00 00       	call   c0005aa4 <ff_memalloc>
c0004600:	83 c4 10             	add    esp,0x10
c0004603:	89 c6                	mov    esi,eax
c0004605:	b8 11 00 00 00       	mov    eax,0x11
c000460a:	85 f6                	test   esi,esi
c000460c:	74 44                	je     c0004652 <f_readdir+0x8b>
c000460e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004612:	31 d2                	xor    edx,edx
c0004614:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004617:	89 d8                	mov    eax,ebx
c0004619:	e8 26 f0 ff ff       	call   c0003644 <dir_read>
c000461e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004623:	75 19                	jne    c000463e <f_readdir+0x77>
c0004625:	89 fa                	mov    edx,edi
c0004627:	89 d8                	mov    eax,ebx
c0004629:	e8 f8 e8 ff ff       	call   c0002f26 <get_fileinfo>
c000462e:	31 d2                	xor    edx,edx
c0004630:	89 d8                	mov    eax,ebx
c0004632:	e8 a9 ee ff ff       	call   c00034e0 <dir_next>
c0004637:	83 f8 04             	cmp    eax,0x4
c000463a:	75 02                	jne    c000463e <f_readdir+0x77>
c000463c:	31 c0                	xor    eax,eax
c000463e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	56                   	push   esi
c0004646:	e8 71 14 00 00       	call   c0005abc <ff_memfree>
c000464b:	83 c4 10             	add    esp,0x10
c000464e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004652:	83 c4 20             	add    esp,0x20
c0004655:	5b                   	pop    ebx
c0004656:	5e                   	pop    esi
c0004657:	5f                   	pop    edi
c0004658:	c3                   	ret    

c0004659 <f_stat>:
c0004659:	57                   	push   edi
c000465a:	31 c9                	xor    ecx,ecx
c000465c:	56                   	push   esi
c000465d:	53                   	push   ebx
c000465e:	83 ec 30             	sub    esp,0x30
c0004661:	89 e2                	mov    edx,esp
c0004663:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004667:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000466b:	e8 8b dd ff ff       	call   c00023fb <mount_volume>
c0004670:	89 c3                	mov    ebx,eax
c0004672:	85 c0                	test   eax,eax
c0004674:	75 59                	jne    c00046cf <f_stat+0x76>
c0004676:	83 ec 0c             	sub    esp,0xc
c0004679:	bb 11 00 00 00       	mov    ebx,0x11
c000467e:	68 00 02 00 00       	push   0x200
c0004683:	e8 1c 14 00 00       	call   c0005aa4 <ff_memalloc>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	89 c6                	mov    esi,eax
c000468d:	85 c0                	test   eax,eax
c000468f:	74 3e                	je     c00046cf <f_stat+0x76>
c0004691:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004694:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004698:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000469b:	89 e0                	mov    eax,esp
c000469d:	e8 40 f2 ff ff       	call   c00038e2 <follow_path>
c00046a2:	89 c3                	mov    ebx,eax
c00046a4:	85 c0                	test   eax,eax
c00046a6:	75 1b                	jne    c00046c3 <f_stat+0x6a>
c00046a8:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00046ad:	78 0f                	js     c00046be <f_stat+0x65>
c00046af:	85 ff                	test   edi,edi
c00046b1:	74 10                	je     c00046c3 <f_stat+0x6a>
c00046b3:	89 fa                	mov    edx,edi
c00046b5:	89 e0                	mov    eax,esp
c00046b7:	e8 6a e8 ff ff       	call   c0002f26 <get_fileinfo>
c00046bc:	eb 05                	jmp    c00046c3 <f_stat+0x6a>
c00046be:	bb 06 00 00 00       	mov    ebx,0x6
c00046c3:	83 ec 0c             	sub    esp,0xc
c00046c6:	56                   	push   esi
c00046c7:	e8 f0 13 00 00       	call   c0005abc <ff_memfree>
c00046cc:	83 c4 10             	add    esp,0x10
c00046cf:	83 c4 30             	add    esp,0x30
c00046d2:	89 d8                	mov    eax,ebx
c00046d4:	5b                   	pop    ebx
c00046d5:	5e                   	pop    esi
c00046d6:	5f                   	pop    edi
c00046d7:	c3                   	ret    

c00046d8 <f_getfree>:
c00046d8:	55                   	push   ebp
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	57                   	push   edi
c00046dc:	56                   	push   esi
c00046dd:	53                   	push   ebx
c00046de:	83 ec 2c             	sub    esp,0x2c
c00046e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046e5:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046e9:	e8 0d dd ff ff       	call   c00023fb <mount_volume>
c00046ee:	89 c6                	mov    esi,eax
c00046f0:	85 c0                	test   eax,eax
c00046f2:	0f 85 d8 00 00 00    	jne    c00047d0 <f_getfree+0xf8>
c00046f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00046fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004700:	89 18                	mov    DWORD PTR [eax],ebx
c0004702:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004705:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004708:	8d 57 fe             	lea    edx,[edi-0x2]
c000470b:	39 d0                	cmp    eax,edx
c000470d:	77 0b                	ja     c000471a <f_getfree+0x42>
c000470f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004713:	89 01                	mov    DWORD PTR [ecx],eax
c0004715:	e9 b6 00 00 00       	jmp    c00047d0 <f_getfree+0xf8>
c000471a:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c000471d:	75 29                	jne    c0004748 <f_getfree+0x70>
c000471f:	bf 02 00 00 00       	mov    edi,0x2
c0004724:	31 ed                	xor    ebp,ebp
c0004726:	89 fa                	mov    edx,edi
c0004728:	89 d8                	mov    eax,ebx
c000472a:	e8 30 ea ff ff       	call   c000315f <get_fat.isra.2>
c000472f:	83 f8 ff             	cmp    eax,0xffffffff
c0004732:	74 7b                	je     c00047af <f_getfree+0xd7>
c0004734:	83 f8 01             	cmp    eax,0x1
c0004737:	74 7d                	je     c00047b6 <f_getfree+0xde>
c0004739:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000473d:	83 d5 00             	adc    ebp,0x0
c0004740:	47                   	inc    edi
c0004741:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004744:	77 e0                	ja     c0004726 <f_getfree+0x4e>
c0004746:	eb 77                	jmp    c00047bf <f_getfree+0xe7>
c0004748:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c000474b:	31 ed                	xor    ebp,ebp
c000474d:	31 db                	xor    ebx,ebx
c000474f:	85 db                	test   ebx,ebx
c0004751:	75 18                	jne    c000476b <f_getfree+0x93>
c0004753:	8d 42 01             	lea    eax,[edx+0x1]
c0004756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000475a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475e:	e8 3f db ff ff       	call   c00022a2 <move_window>
c0004763:	85 c0                	test   eax,eax
c0004765:	75 56                	jne    c00047bd <f_getfree+0xe5>
c0004767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000476b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000476f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004773:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004776:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c000477a:	75 11                	jne    c000478d <f_getfree+0xb5>
c000477c:	e8 f2 d5 ff ff       	call   c0001d73 <ld_word>
c0004781:	66 83 f8 01          	cmp    ax,0x1
c0004785:	83 d5 00             	adc    ebp,0x0
c0004788:	83 c3 02             	add    ebx,0x2
c000478b:	eb 13                	jmp    c00047a0 <f_getfree+0xc8>
c000478d:	e8 ee d5 ff ff       	call   c0001d80 <ld_dword>
c0004792:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004797:	83 f8 01             	cmp    eax,0x1
c000479a:	83 d5 00             	adc    ebp,0x0
c000479d:	83 c3 04             	add    ebx,0x4
c00047a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00047a4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00047aa:	4f                   	dec    edi
c00047ab:	75 a2                	jne    c000474f <f_getfree+0x77>
c00047ad:	eb 10                	jmp    c00047bf <f_getfree+0xe7>
c00047af:	be 01 00 00 00       	mov    esi,0x1
c00047b4:	eb 09                	jmp    c00047bf <f_getfree+0xe7>
c00047b6:	be 02 00 00 00       	mov    esi,0x2
c00047bb:	eb 02                	jmp    c00047bf <f_getfree+0xe7>
c00047bd:	89 c6                	mov    esi,eax
c00047bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047c3:	89 28                	mov    DWORD PTR [eax],ebp
c00047c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047c9:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047cd:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c00047d0:	83 c4 2c             	add    esp,0x2c
c00047d3:	89 f0                	mov    eax,esi
c00047d5:	5b                   	pop    ebx
c00047d6:	5e                   	pop    esi
c00047d7:	5f                   	pop    edi
c00047d8:	5d                   	pop    ebp
c00047d9:	c3                   	ret    

c00047da <f_truncate>:
c00047da:	56                   	push   esi
c00047db:	53                   	push   ebx
c00047dc:	83 ec 14             	sub    esp,0x14
c00047df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 0a da ff ff       	call   c00021f8 <validate>
c00047ee:	89 c6                	mov    esi,eax
c00047f0:	85 c0                	test   eax,eax
c00047f2:	0f 85 be 00 00 00    	jne    c00048b6 <f_truncate+0xdc>
c00047f8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047fc:	85 f6                	test   esi,esi
c00047fe:	0f 85 b2 00 00 00    	jne    c00048b6 <f_truncate+0xdc>
c0004804:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004808:	0f 84 a3 00 00 00    	je     c00048b1 <f_truncate+0xd7>
c000480e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004811:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004814:	0f 83 9c 00 00 00    	jae    c00048b6 <f_truncate+0xdc>
c000481a:	85 c0                	test   eax,eax
c000481c:	75 15                	jne    c0004833 <f_truncate+0x59>
c000481e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004821:	31 c9                	xor    ecx,ecx
c0004823:	89 d8                	mov    eax,ebx
c0004825:	e8 2d ec ff ff       	call   c0003457 <remove_chain>
c000482a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004831:	eb 35                	jmp    c0004868 <f_truncate+0x8e>
c0004833:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004838:	e8 22 e9 ff ff       	call   c000315f <get_fat.isra.2>
c000483d:	89 c2                	mov    edx,eax
c000483f:	b8 01 00 00 00       	mov    eax,0x1
c0004844:	83 fa ff             	cmp    edx,0xffffffff
c0004847:	74 1f                	je     c0004868 <f_truncate+0x8e>
c0004849:	b8 02 00 00 00       	mov    eax,0x2
c000484e:	83 fa 01             	cmp    edx,0x1
c0004851:	74 15                	je     c0004868 <f_truncate+0x8e>
c0004853:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004857:	31 c0                	xor    eax,eax
c0004859:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c000485c:	76 0a                	jbe    c0004868 <f_truncate+0x8e>
c000485e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004861:	89 d8                	mov    eax,ebx
c0004863:	e8 ef eb ff ff       	call   c0003457 <remove_chain>
c0004868:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000486b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000486e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004871:	83 ca 40             	or     edx,0x40
c0004874:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004877:	85 c0                	test   eax,eax
c0004879:	75 2f                	jne    c00048aa <f_truncate+0xd0>
c000487b:	84 d2                	test   dl,dl
c000487d:	79 37                	jns    c00048b6 <f_truncate+0xdc>
c000487f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004882:	6a 01                	push   0x1
c0004884:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004887:	50                   	push   eax
c0004888:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000488c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004890:	50                   	push   eax
c0004891:	e8 a8 d4 ff ff       	call   c0001d3e <disk_write>
c0004896:	83 c4 10             	add    esp,0x10
c0004899:	85 c0                	test   eax,eax
c000489b:	75 08                	jne    c00048a5 <f_truncate+0xcb>
c000489d:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00048a1:	31 f6                	xor    esi,esi
c00048a3:	eb 11                	jmp    c00048b6 <f_truncate+0xdc>
c00048a5:	b8 01 00 00 00       	mov    eax,0x1
c00048aa:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00048ad:	89 c6                	mov    esi,eax
c00048af:	eb 05                	jmp    c00048b6 <f_truncate+0xdc>
c00048b1:	be 07 00 00 00       	mov    esi,0x7
c00048b6:	83 c4 14             	add    esp,0x14
c00048b9:	89 f0                	mov    eax,esi
c00048bb:	5b                   	pop    ebx
c00048bc:	5e                   	pop    esi
c00048bd:	c3                   	ret    

c00048be <f_unlink>:
c00048be:	55                   	push   ebp
c00048bf:	b9 02 00 00 00       	mov    ecx,0x2
c00048c4:	57                   	push   edi
c00048c5:	56                   	push   esi
c00048c6:	53                   	push   ebx
c00048c7:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048d1:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048d8:	e8 1e db ff ff       	call   c00023fb <mount_volume>
c00048dd:	85 c0                	test   eax,eax
c00048df:	0f 85 ee 00 00 00    	jne    c00049d3 <f_unlink+0x115>
c00048e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048e9:	83 ec 0c             	sub    esp,0xc
c00048ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048f0:	68 00 02 00 00       	push   0x200
c00048f5:	e8 aa 11 00 00       	call   c0005aa4 <ff_memalloc>
c00048fa:	83 c4 10             	add    esp,0x10
c00048fd:	89 c3                	mov    ebx,eax
c00048ff:	b8 11 00 00 00       	mov    eax,0x11
c0004904:	85 db                	test   ebx,ebx
c0004906:	0f 84 c7 00 00 00    	je     c00049d3 <f_unlink+0x115>
c000490c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004910:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004917:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000491a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491e:	e8 bf ef ff ff       	call   c00038e2 <follow_path>
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 94 00 00 00    	jne    c00049bf <f_unlink+0x101>
c000492b:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004930:	b8 06 00 00 00       	mov    eax,0x6
c0004935:	0f 88 84 00 00 00    	js     c00049bf <f_unlink+0x101>
c000493b:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004940:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004946:	74 07                	je     c000494f <f_unlink+0x91>
c0004948:	b8 07 00 00 00       	mov    eax,0x7
c000494d:	eb 70                	jmp    c00049bf <f_unlink+0x101>
c000494f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004953:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004957:	8a 07                	mov    al,BYTE PTR [edi]
c0004959:	e8 b0 e7 ff ff       	call   c000310e <ld_clust.isra.0>
c000495e:	83 e5 10             	and    ebp,0x10
c0004961:	89 c6                	mov    esi,eax
c0004963:	75 20                	jne    c0004985 <f_unlink+0xc7>
c0004965:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004969:	e8 f3 ed ff ff       	call   c0003761 <dir_remove>
c000496e:	85 c0                	test   eax,eax
c0004970:	75 40                	jne    c00049b2 <f_unlink+0xf4>
c0004972:	85 f6                	test   esi,esi
c0004974:	74 3c                	je     c00049b2 <f_unlink+0xf4>
c0004976:	31 c9                	xor    ecx,ecx
c0004978:	89 f2                	mov    edx,esi
c000497a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000497e:	e8 d4 ea ff ff       	call   c0003457 <remove_chain>
c0004983:	eb 2d                	jmp    c00049b2 <f_unlink+0xf4>
c0004985:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004989:	31 d2                	xor    edx,edx
c000498b:	8d 44 24 50          	lea    eax,[esp+0x50]
c000498f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004993:	e8 ca e8 ff ff       	call   c0003262 <dir_sdi>
c0004998:	85 c0                	test   eax,eax
c000499a:	75 23                	jne    c00049bf <f_unlink+0x101>
c000499c:	31 d2                	xor    edx,edx
c000499e:	8d 44 24 50          	lea    eax,[esp+0x50]
c00049a2:	e8 9d ec ff ff       	call   c0003644 <dir_read>
c00049a7:	85 c0                	test   eax,eax
c00049a9:	74 9d                	je     c0004948 <f_unlink+0x8a>
c00049ab:	83 f8 04             	cmp    eax,0x4
c00049ae:	75 0f                	jne    c00049bf <f_unlink+0x101>
c00049b0:	eb b3                	jmp    c0004965 <f_unlink+0xa7>
c00049b2:	85 c0                	test   eax,eax
c00049b4:	75 09                	jne    c00049bf <f_unlink+0x101>
c00049b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ba:	e8 08 e3 ff ff       	call   c0002cc7 <sync_fs>
c00049bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049c3:	83 ec 0c             	sub    esp,0xc
c00049c6:	53                   	push   ebx
c00049c7:	e8 f0 10 00 00       	call   c0005abc <ff_memfree>
c00049cc:	83 c4 10             	add    esp,0x10
c00049cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049d9:	5b                   	pop    ebx
c00049da:	5e                   	pop    esi
c00049db:	5f                   	pop    edi
c00049dc:	5d                   	pop    ebp
c00049dd:	c3                   	ret    

c00049de <f_mkdir>:
c00049de:	57                   	push   edi
c00049df:	b9 02 00 00 00       	mov    ecx,0x2
c00049e4:	56                   	push   esi
c00049e5:	53                   	push   ebx
c00049e6:	83 ec 50             	sub    esp,0x50
c00049e9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ed:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049f1:	e8 05 da ff ff       	call   c00023fb <mount_volume>
c00049f6:	89 c3                	mov    ebx,eax
c00049f8:	85 c0                	test   eax,eax
c00049fa:	0f 85 70 01 00 00    	jne    c0004b70 <f_mkdir+0x192>
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 ec 0c             	sub    esp,0xc
c0004a07:	bb 11 00 00 00       	mov    ebx,0x11
c0004a0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a10:	68 00 02 00 00       	push   0x200
c0004a15:	e8 8a 10 00 00       	call   c0005aa4 <ff_memalloc>
c0004a1a:	83 c4 10             	add    esp,0x10
c0004a1d:	89 c7                	mov    edi,eax
c0004a1f:	85 c0                	test   eax,eax
c0004a21:	0f 84 49 01 00 00    	je     c0004b70 <f_mkdir+0x192>
c0004a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a2b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a2f:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a32:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a36:	e8 a7 ee ff ff       	call   c00038e2 <follow_path>
c0004a3b:	89 c3                	mov    ebx,eax
c0004a3d:	85 c0                	test   eax,eax
c0004a3f:	74 3e                	je     c0004a7f <f_mkdir+0xa1>
c0004a41:	83 f8 04             	cmp    eax,0x4
c0004a44:	75 3e                	jne    c0004a84 <f_mkdir+0xa6>
c0004a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a4a:	31 d2                	xor    edx,edx
c0004a4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a50:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a54:	e8 d1 e8 ff ff       	call   c000332a <create_chain>
c0004a59:	89 c6                	mov    esi,eax
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	74 0c                	je     c0004a6b <f_mkdir+0x8d>
c0004a5f:	bb 02 00 00 00       	mov    ebx,0x2
c0004a64:	83 f8 01             	cmp    eax,0x1
c0004a67:	74 07                	je     c0004a70 <f_mkdir+0x92>
c0004a69:	eb 2a                	jmp    c0004a95 <f_mkdir+0xb7>
c0004a6b:	bb 07 00 00 00       	mov    ebx,0x7
c0004a70:	31 c9                	xor    ecx,ecx
c0004a72:	89 f2                	mov    edx,esi
c0004a74:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a78:	e8 da e9 ff ff       	call   c0003457 <remove_chain>
c0004a7d:	eb 05                	jmp    c0004a84 <f_mkdir+0xa6>
c0004a7f:	bb 08 00 00 00       	mov    ebx,0x8
c0004a84:	83 ec 0c             	sub    esp,0xc
c0004a87:	57                   	push   edi
c0004a88:	e8 2f 10 00 00       	call   c0005abc <ff_memfree>
c0004a8d:	83 c4 10             	add    esp,0x10
c0004a90:	e9 db 00 00 00       	jmp    c0004b70 <f_mkdir+0x192>
c0004a95:	bb 01 00 00 00       	mov    ebx,0x1
c0004a9a:	83 f8 ff             	cmp    eax,0xffffffff
c0004a9d:	74 d1                	je     c0004a70 <f_mkdir+0x92>
c0004a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa3:	89 f2                	mov    edx,esi
c0004aa5:	e8 a4 dd ff ff       	call   c000284e <dir_clear>
c0004aaa:	89 c3                	mov    ebx,eax
c0004aac:	85 c0                	test   eax,eax
c0004aae:	75 c0                	jne    c0004a70 <f_mkdir+0x92>
c0004ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ab9:	ba 20 00 00 00       	mov    edx,0x20
c0004abe:	83 c0 34             	add    eax,0x34
c0004ac1:	e8 ee d2 ff ff       	call   c0001db4 <mem_set>
c0004ac6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aca:	ba 00 00 21 50       	mov    edx,0x50210000
c0004acf:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ad3:	83 c0 4a             	add    eax,0x4a
c0004ad6:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004ada:	e8 bd d2 ff ff       	call   c0001d9c <st_dword>
c0004adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae3:	89 f1                	mov    ecx,esi
c0004ae5:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae8:	e8 4a e6 ff ff       	call   c0003137 <st_clust.isra.1>
c0004aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af1:	b9 20 00 00 00       	mov    ecx,0x20
c0004af6:	8d 50 34             	lea    edx,[eax+0x34]
c0004af9:	83 c0 54             	add    eax,0x54
c0004afc:	e8 9e d2 ff ff       	call   c0001d9f <mem_cpy>
c0004b01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b05:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004b09:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004b0d:	8d 50 54             	lea    edx,[eax+0x54]
c0004b10:	e8 22 e6 ff ff       	call   c0003137 <st_clust.isra.1>
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b21:	e8 58 ee ff ff       	call   c000397e <dir_register>
c0004b26:	89 c3                	mov    ebx,eax
c0004b28:	85 c0                	test   eax,eax
c0004b2a:	0f 85 40 ff ff ff    	jne    c0004a70 <f_mkdir+0x92>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b39:	83 c0 16             	add    eax,0x16
c0004b3c:	e8 5b d2 ff ff       	call   c0001d9c <st_dword>
c0004b41:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b49:	89 f1                	mov    ecx,esi
c0004b4b:	e8 e7 e5 ff ff       	call   c0003137 <st_clust.isra.1>
c0004b50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b54:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b64:	e8 5e e1 ff ff       	call   c0002cc7 <sync_fs>
c0004b69:	89 c3                	mov    ebx,eax
c0004b6b:	e9 14 ff ff ff       	jmp    c0004a84 <f_mkdir+0xa6>
c0004b70:	83 c4 50             	add    esp,0x50
c0004b73:	89 d8                	mov    eax,ebx
c0004b75:	5b                   	pop    ebx
c0004b76:	5e                   	pop    esi
c0004b77:	5f                   	pop    edi
c0004b78:	c3                   	ret    

c0004b79 <f_rename>:
c0004b79:	57                   	push   edi
c0004b7a:	56                   	push   esi
c0004b7b:	53                   	push   ebx
c0004b7c:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b82:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b89:	e8 18 d6 ff ff       	call   c00021a6 <get_ldnumber>
c0004b8e:	b9 02 00 00 00       	mov    ecx,0x2
c0004b93:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b97:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b9e:	e8 58 d8 ff ff       	call   c00023fb <mount_volume>
c0004ba3:	85 c0                	test   eax,eax
c0004ba5:	0f 85 7d 01 00 00    	jne    c0004d28 <f_rename+0x1af>
c0004bab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004baf:	83 ec 0c             	sub    esp,0xc
c0004bb2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004bb6:	68 00 02 00 00       	push   0x200
c0004bbb:	e8 e4 0e 00 00       	call   c0005aa4 <ff_memalloc>
c0004bc0:	83 c4 10             	add    esp,0x10
c0004bc3:	89 c3                	mov    ebx,eax
c0004bc5:	b8 11 00 00 00       	mov    eax,0x11
c0004bca:	85 db                	test   ebx,ebx
c0004bcc:	0f 84 56 01 00 00    	je     c0004d28 <f_rename+0x1af>
c0004bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd6:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bdd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004be0:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004be4:	e8 f9 ec ff ff       	call   c00038e2 <follow_path>
c0004be9:	85 c0                	test   eax,eax
c0004beb:	0f 85 23 01 00 00    	jne    c0004d14 <f_rename+0x19b>
c0004bf1:	b8 06 00 00 00       	mov    eax,0x6
c0004bf6:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bfb:	0f 85 13 01 00 00    	jne    c0004d14 <f_rename+0x19b>
c0004c01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004c05:	b9 20 00 00 00       	mov    ecx,0x20
c0004c0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c0e:	e8 8c d1 ff ff       	call   c0001d9f <mem_cpy>
c0004c13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1b:	b9 30 00 00 00       	mov    ecx,0x30
c0004c20:	e8 7a d1 ff ff       	call   c0001d9f <mem_cpy>
c0004c25:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c2c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c30:	e8 ad ec ff ff       	call   c00038e2 <follow_path>
c0004c35:	85 c0                	test   eax,eax
c0004c37:	75 20                	jne    c0004c59 <f_rename+0xe0>
c0004c39:	b8 08 00 00 00       	mov    eax,0x8
c0004c3e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c42:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c46:	0f 85 c8 00 00 00    	jne    c0004d14 <f_rename+0x19b>
c0004c4c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c50:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c57:	eb 03                	jmp    c0004c5c <f_rename+0xe3>
c0004c59:	83 f8 04             	cmp    eax,0x4
c0004c5c:	0f 85 b2 00 00 00    	jne    c0004d14 <f_rename+0x19b>
c0004c62:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c66:	e8 13 ed ff ff       	call   c000397e <dir_register>
c0004c6b:	85 c0                	test   eax,eax
c0004c6d:	0f 85 a1 00 00 00    	jne    c0004d14 <f_rename+0x19b>
c0004c73:	8b b4 24 8c 00 00 00 	mov    esi,DWORD PTR [esp+0x8c]
c0004c7a:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c7e:	b9 13 00 00 00       	mov    ecx,0x13
c0004c83:	8d 46 0d             	lea    eax,[esi+0xd]
c0004c86:	e8 14 d1 ff ff       	call   c0001d9f <mem_cpy>
c0004c8b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c8f:	88 c2                	mov    dl,al
c0004c91:	83 ca 20             	or     edx,0x20
c0004c94:	a8 10                	test   al,0x10
c0004c96:	0f 44 c2             	cmove  eax,edx
c0004c99:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ca0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ca4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0004ca8:	74 54                	je     c0004cfe <f_rename+0x185>
c0004caa:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004cae:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004cb2:	74 4a                	je     c0004cfe <f_rename+0x185>
c0004cb4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004cb8:	89 f2                	mov    edx,esi
c0004cba:	8a 07                	mov    al,BYTE PTR [edi]
c0004cbc:	e8 4d e4 ff ff       	call   c000310e <ld_clust.isra.0>
c0004cc1:	89 c2                	mov    edx,eax
c0004cc3:	89 f8                	mov    eax,edi
c0004cc5:	e8 f3 d2 ff ff       	call   c0001fbd <clst2sect>
c0004cca:	89 c2                	mov    edx,eax
c0004ccc:	b8 02 00 00 00       	mov    eax,0x2
c0004cd1:	85 d2                	test   edx,edx
c0004cd3:	74 3f                	je     c0004d14 <f_rename+0x19b>
c0004cd5:	89 f8                	mov    eax,edi
c0004cd7:	e8 c6 d5 ff ff       	call   c00022a2 <move_window>
c0004cdc:	85 c0                	test   eax,eax
c0004cde:	75 34                	jne    c0004d14 <f_rename+0x19b>
c0004ce0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce4:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ce8:	75 14                	jne    c0004cfe <f_rename+0x185>
c0004cea:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cee:	8d 50 54             	lea    edx,[eax+0x54]
c0004cf1:	e8 41 e4 ff ff       	call   c0003137 <st_clust.isra.1>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cfe:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d02:	e8 5a ea ff ff       	call   c0003761 <dir_remove>
c0004d07:	85 c0                	test   eax,eax
c0004d09:	75 09                	jne    c0004d14 <f_rename+0x19b>
c0004d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0f:	e8 b3 df ff ff       	call   c0002cc7 <sync_fs>
c0004d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d18:	83 ec 0c             	sub    esp,0xc
c0004d1b:	53                   	push   ebx
c0004d1c:	e8 9b 0d 00 00       	call   c0005abc <ff_memfree>
c0004d21:	83 c4 10             	add    esp,0x10
c0004d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d28:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d2e:	5b                   	pop    ebx
c0004d2f:	5e                   	pop    esi
c0004d30:	5f                   	pop    edi
c0004d31:	c3                   	ret    

c0004d32 <f_chmod>:
c0004d32:	57                   	push   edi
c0004d33:	b9 02 00 00 00       	mov    ecx,0x2
c0004d38:	56                   	push   esi
c0004d39:	53                   	push   ebx
c0004d3a:	83 ec 50             	sub    esp,0x50
c0004d3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d45:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d49:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d4d:	e8 a9 d6 ff ff       	call   c00023fb <mount_volume>
c0004d52:	85 c0                	test   eax,eax
c0004d54:	75 7e                	jne    c0004dd4 <f_chmod+0xa2>
c0004d56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d5a:	83 ec 0c             	sub    esp,0xc
c0004d5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d61:	68 00 02 00 00       	push   0x200
c0004d66:	e8 39 0d 00 00       	call   c0005aa4 <ff_memalloc>
c0004d6b:	83 c4 10             	add    esp,0x10
c0004d6e:	89 c6                	mov    esi,eax
c0004d70:	b8 11 00 00 00       	mov    eax,0x11
c0004d75:	85 f6                	test   esi,esi
c0004d77:	74 5b                	je     c0004dd4 <f_chmod+0xa2>
c0004d79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d81:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d84:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d88:	e8 55 eb ff ff       	call   c00038e2 <follow_path>
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	75 2f                	jne    c0004dc0 <f_chmod+0x8e>
c0004d91:	b8 06 00 00 00       	mov    eax,0x6
c0004d96:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d9b:	75 23                	jne    c0004dc0 <f_chmod+0x8e>
c0004d9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004da1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004da4:	21 fb                	and    ebx,edi
c0004da6:	83 e3 27             	and    ebx,0x27
c0004da9:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004dac:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004daf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004db7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbb:	e8 07 df ff ff       	call   c0002cc7 <sync_fs>
c0004dc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004dc4:	83 ec 0c             	sub    esp,0xc
c0004dc7:	56                   	push   esi
c0004dc8:	e8 ef 0c 00 00       	call   c0005abc <ff_memfree>
c0004dcd:	83 c4 10             	add    esp,0x10
c0004dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dd4:	83 c4 50             	add    esp,0x50
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	c3                   	ret    

c0004ddb <f_utime>:
c0004ddb:	56                   	push   esi
c0004ddc:	b9 02 00 00 00       	mov    ecx,0x2
c0004de1:	53                   	push   ebx
c0004de2:	83 ec 54             	sub    esp,0x54
c0004de5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004de9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ded:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004df1:	e8 05 d6 ff ff       	call   c00023fb <mount_volume>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	0f 85 85 00 00 00    	jne    c0004e83 <f_utime+0xa8>
c0004dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e02:	83 ec 0c             	sub    esp,0xc
c0004e05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e09:	68 00 02 00 00       	push   0x200
c0004e0e:	e8 91 0c 00 00       	call   c0005aa4 <ff_memalloc>
c0004e13:	83 c4 10             	add    esp,0x10
c0004e16:	89 c3                	mov    ebx,eax
c0004e18:	b8 11 00 00 00       	mov    eax,0x11
c0004e1d:	85 db                	test   ebx,ebx
c0004e1f:	74 62                	je     c0004e83 <f_utime+0xa8>
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e29:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e30:	e8 ad ea ff ff       	call   c00038e2 <follow_path>
c0004e35:	85 c0                	test   eax,eax
c0004e37:	75 36                	jne    c0004e6f <f_utime+0x94>
c0004e39:	b8 06 00 00 00       	mov    eax,0x6
c0004e3e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e43:	75 2a                	jne    c0004e6f <f_utime+0x94>
c0004e45:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e49:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e4d:	c1 e2 10             	shl    edx,0x10
c0004e50:	09 c2                	or     edx,eax
c0004e52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e56:	83 c0 16             	add    eax,0x16
c0004e59:	e8 3e cf ff ff       	call   c0001d9c <st_dword>
c0004e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e62:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e6a:	e8 58 de ff ff       	call   c0002cc7 <sync_fs>
c0004e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e73:	83 ec 0c             	sub    esp,0xc
c0004e76:	53                   	push   ebx
c0004e77:	e8 40 0c 00 00       	call   c0005abc <ff_memfree>
c0004e7c:	83 c4 10             	add    esp,0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	83 c4 54             	add    esp,0x54
c0004e86:	5b                   	pop    ebx
c0004e87:	5e                   	pop    esi
c0004e88:	c3                   	ret    

c0004e89 <f_getlabel>:
c0004e89:	55                   	push   ebp
c0004e8a:	31 c9                	xor    ecx,ecx
c0004e8c:	57                   	push   edi
c0004e8d:	56                   	push   esi
c0004e8e:	53                   	push   ebx
c0004e8f:	83 ec 5c             	sub    esp,0x5c
c0004e92:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e96:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e9a:	e8 5c d5 ff ff       	call   c00023fb <mount_volume>
c0004e9f:	89 c3                	mov    ebx,eax
c0004ea1:	85 c0                	test   eax,eax
c0004ea3:	0f 85 df 00 00 00    	jne    c0004f88 <f_getlabel+0xff>
c0004ea9:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004eae:	0f 84 d4 00 00 00    	je     c0004f88 <f_getlabel+0xff>
c0004eb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eb8:	31 d2                	xor    edx,edx
c0004eba:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ec2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ec6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eca:	e8 93 e3 ff ff       	call   c0003262 <dir_sdi>
c0004ecf:	89 c3                	mov    ebx,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 a1 00 00 00    	jne    c0004f7a <f_getlabel+0xf1>
c0004ed9:	ba 01 00 00 00       	mov    edx,0x1
c0004ede:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee2:	e8 5d e7 ff ff       	call   c0003644 <dir_read>
c0004ee7:	89 c3                	mov    ebx,eax
c0004ee9:	85 c0                	test   eax,eax
c0004eeb:	0f 85 89 00 00 00    	jne    c0004f7a <f_getlabel+0xf1>
c0004ef1:	31 f6                	xor    esi,esi
c0004ef3:	31 c9                	xor    ecx,ecx
c0004ef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ef9:	8d 79 01             	lea    edi,[ecx+0x1]
c0004efc:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004f01:	89 d0                	mov    eax,edx
c0004f03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f07:	e8 e7 ce ff ff       	call   c0001df3 <dbc_1st>
c0004f0c:	85 c0                	test   eax,eax
c0004f0e:	74 16                	je     c0004f26 <f_getlabel+0x9d>
c0004f10:	83 ff 0b             	cmp    edi,0xb
c0004f13:	74 11                	je     c0004f26 <f_getlabel+0x9d>
c0004f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f19:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f1e:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f21:	c1 e0 08             	shl    eax,0x8
c0004f24:	09 c2                	or     edx,eax
c0004f26:	0f b7 d2             	movzx  edx,dx
c0004f29:	50                   	push   eax
c0004f2a:	50                   	push   eax
c0004f2b:	68 b5 01 00 00       	push   0x1b5
c0004f30:	52                   	push   edx
c0004f31:	e8 36 0c 00 00       	call   c0005b6c <ff_oem2uni>
c0004f36:	83 c4 10             	add    esp,0x10
c0004f39:	66 85 c0             	test   ax,ax
c0004f3c:	74 25                	je     c0004f63 <f_getlabel+0xda>
c0004f3e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f42:	0f b7 c0             	movzx  eax,ax
c0004f45:	b9 04 00 00 00       	mov    ecx,0x4
c0004f4a:	01 f2                	add    edx,esi
c0004f4c:	e8 73 cf ff ff       	call   c0001ec4 <put_utf>
c0004f51:	84 c0                	test   al,al
c0004f53:	74 0e                	je     c0004f63 <f_getlabel+0xda>
c0004f55:	0f b6 c0             	movzx  eax,al
c0004f58:	01 c6                	add    esi,eax
c0004f5a:	83 ff 0b             	cmp    edi,0xb
c0004f5d:	74 06                	je     c0004f65 <f_getlabel+0xdc>
c0004f5f:	89 f9                	mov    ecx,edi
c0004f61:	eb 92                	jmp    c0004ef5 <f_getlabel+0x6c>
c0004f63:	31 f6                	xor    esi,esi
c0004f65:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c0004f69:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0004f6c:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c0004f70:	74 16                	je     c0004f88 <f_getlabel+0xff>
c0004f72:	4e                   	dec    esi
c0004f73:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0004f76:	74 f1                	je     c0004f69 <f_getlabel+0xe0>
c0004f78:	eb 0e                	jmp    c0004f88 <f_getlabel+0xff>
c0004f7a:	83 fb 04             	cmp    ebx,0x4
c0004f7d:	75 09                	jne    c0004f88 <f_getlabel+0xff>
c0004f7f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f83:	31 db                	xor    ebx,ebx
c0004f85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f88:	85 db                	test   ebx,ebx
c0004f8a:	75 48                	jne    c0004fd4 <f_getlabel+0x14b>
c0004f8c:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f91:	74 41                	je     c0004fd4 <f_getlabel+0x14b>
c0004f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f97:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f9a:	e8 03 d3 ff ff       	call   c00022a2 <move_window>
c0004f9f:	89 c3                	mov    ebx,eax
c0004fa1:	85 c0                	test   eax,eax
c0004fa3:	75 2f                	jne    c0004fd4 <f_getlabel+0x14b>
c0004fa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004fa9:	b8 43 00 00 00       	mov    eax,0x43
c0004fae:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004fb0:	80 f9 03             	cmp    cl,0x3
c0004fb3:	74 10                	je     c0004fc5 <f_getlabel+0x13c>
c0004fb5:	80 f9 04             	cmp    cl,0x4
c0004fb8:	b8 64 00 00 00       	mov    eax,0x64
c0004fbd:	b9 27 00 00 00       	mov    ecx,0x27
c0004fc2:	0f 45 c1             	cmovne eax,ecx
c0004fc5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fc9:	e8 b2 cd ff ff       	call   c0001d80 <ld_dword>
c0004fce:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fd2:	89 07                	mov    DWORD PTR [edi],eax
c0004fd4:	83 c4 5c             	add    esp,0x5c
c0004fd7:	89 d8                	mov    eax,ebx
c0004fd9:	5b                   	pop    ebx
c0004fda:	5e                   	pop    esi
c0004fdb:	5f                   	pop    edi
c0004fdc:	5d                   	pop    ebp
c0004fdd:	c3                   	ret    

c0004fde <f_setlabel>:
c0004fde:	56                   	push   esi
c0004fdf:	b9 02 00 00 00       	mov    ecx,0x2
c0004fe4:	53                   	push   ebx
c0004fe5:	83 ec 54             	sub    esp,0x54
c0004fe8:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fec:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ff0:	e8 06 d4 ff ff       	call   c00023fb <mount_volume>
c0004ff5:	89 c6                	mov    esi,eax
c0004ff7:	85 c0                	test   eax,eax
c0004ff9:	0f 85 67 01 00 00    	jne    c0005166 <f_setlabel+0x188>
c0004fff:	b9 0b 00 00 00       	mov    ecx,0xb
c0005004:	ba 20 00 00 00       	mov    edx,0x20
c0005009:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000500d:	31 db                	xor    ebx,ebx
c000500f:	e8 a0 cd ff ff       	call   c0001db4 <mem_set>
c0005014:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005018:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000501b:	76 5b                	jbe    c0005078 <f_setlabel+0x9a>
c000501d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005021:	e8 d3 cd ff ff       	call   c0001df9 <tchar2uni>
c0005026:	3d ff ff 00 00       	cmp    eax,0xffff
c000502b:	76 0a                	jbe    c0005037 <f_setlabel+0x59>
c000502d:	be 06 00 00 00       	mov    esi,0x6
c0005032:	e9 2f 01 00 00       	jmp    c0005166 <f_setlabel+0x188>
c0005037:	83 ec 0c             	sub    esp,0xc
c000503a:	50                   	push   eax
c000503b:	e8 9c 0b 00 00       	call   c0005bdc <ff_wtoupper>
c0005040:	5a                   	pop    edx
c0005041:	59                   	pop    ecx
c0005042:	68 b5 01 00 00       	push   0x1b5
c0005047:	50                   	push   eax
c0005048:	e8 87 0a 00 00       	call   c0005ad4 <ff_uni2oem>
c000504d:	83 c4 10             	add    esp,0x10
c0005050:	89 c6                	mov    esi,eax
c0005052:	66 85 c0             	test   ax,ax
c0005055:	74 d6                	je     c000502d <f_setlabel+0x4f>
c0005057:	0f b7 d0             	movzx  edx,ax
c000505a:	b8 50 ee 01 c0       	mov    eax,0xc001ee50
c000505f:	e8 7e cd ff ff       	call   c0001de2 <chk_chr>
c0005064:	85 c0                	test   eax,eax
c0005066:	75 c5                	jne    c000502d <f_setlabel+0x4f>
c0005068:	66 81 fe ff 00       	cmp    si,0xff
c000506d:	0f 87 c9 00 00 00    	ja     c000513c <f_setlabel+0x15e>
c0005073:	e9 e4 00 00 00       	jmp    c000515c <f_setlabel+0x17e>
c0005078:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000507d:	74 ae                	je     c000502d <f_setlabel+0x4f>
c000507f:	85 db                	test   ebx,ebx
c0005081:	74 0e                	je     c0005091 <f_setlabel+0xb3>
c0005083:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005088:	8d 43 ff             	lea    eax,[ebx-0x1]
c000508b:	75 04                	jne    c0005091 <f_setlabel+0xb3>
c000508d:	89 c3                	mov    ebx,eax
c000508f:	eb ee                	jmp    c000507f <f_setlabel+0xa1>
c0005091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005095:	31 d2                	xor    edx,edx
c0005097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000509f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00050a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a7:	e8 b6 e1 ff ff       	call   c0003262 <dir_sdi>
c00050ac:	89 c6                	mov    esi,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 b0 00 00 00    	jne    c0005166 <f_setlabel+0x188>
c00050b6:	ba 01 00 00 00       	mov    edx,0x1
c00050bb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050bf:	e8 80 e5 ff ff       	call   c0003644 <dir_read>
c00050c4:	85 c0                	test   eax,eax
c00050c6:	75 18                	jne    c00050e0 <f_setlabel+0x102>
c00050c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 0b                	je     c00050db <f_setlabel+0xfd>
c00050d0:	b9 0b 00 00 00       	mov    ecx,0xb
c00050d5:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d9:	eb 47                	jmp    c0005122 <f_setlabel+0x144>
c00050db:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050de:	eb 47                	jmp    c0005127 <f_setlabel+0x149>
c00050e0:	83 f8 04             	cmp    eax,0x4
c00050e3:	75 53                	jne    c0005138 <f_setlabel+0x15a>
c00050e5:	85 db                	test   ebx,ebx
c00050e7:	74 7d                	je     c0005166 <f_setlabel+0x188>
c00050e9:	ba 01 00 00 00       	mov    edx,0x1
c00050ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050f2:	e8 ec e4 ff ff       	call   c00035e3 <dir_alloc>
c00050f7:	89 c6                	mov    esi,eax
c00050f9:	85 c0                	test   eax,eax
c00050fb:	75 69                	jne    c0005166 <f_setlabel+0x188>
c00050fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005101:	b9 20 00 00 00       	mov    ecx,0x20
c0005106:	31 d2                	xor    edx,edx
c0005108:	e8 a7 cc ff ff       	call   c0001db4 <mem_set>
c000510d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005111:	b9 0b 00 00 00       	mov    ecx,0xb
c0005116:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000511a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000511e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005122:	e8 78 cc ff ff       	call   c0001d9f <mem_cpy>
c0005127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000512b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005133:	e8 8f db ff ff       	call   c0002cc7 <sync_fs>
c0005138:	89 c6                	mov    esi,eax
c000513a:	eb 2a                	jmp    c0005166 <f_setlabel+0x188>
c000513c:	83 fb 09             	cmp    ebx,0x9
c000513f:	0f 87 e8 fe ff ff    	ja     c000502d <f_setlabel+0x4f>
c0005145:	89 f0                	mov    eax,esi
c0005147:	66 c1 e8 08          	shr    ax,0x8
c000514b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000514f:	43                   	inc    ebx
c0005150:	89 f0                	mov    eax,esi
c0005152:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005156:	43                   	inc    ebx
c0005157:	e9 b8 fe ff ff       	jmp    c0005014 <f_setlabel+0x36>
c000515c:	83 fb 0a             	cmp    ebx,0xa
c000515f:	76 ef                	jbe    c0005150 <f_setlabel+0x172>
c0005161:	e9 c7 fe ff ff       	jmp    c000502d <f_setlabel+0x4f>
c0005166:	83 c4 54             	add    esp,0x54
c0005169:	89 f0                	mov    eax,esi
c000516b:	5b                   	pop    ebx
c000516c:	5e                   	pop    esi
c000516d:	c3                   	ret    

c000516e <f_expand>:
c000516e:	55                   	push   ebp
c000516f:	57                   	push   edi
c0005170:	56                   	push   esi
c0005171:	53                   	push   ebx
c0005172:	83 ec 2c             	sub    esp,0x2c
c0005175:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005179:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005185:	89 d8                	mov    eax,ebx
c0005187:	e8 6c d0 ff ff       	call   c00021f8 <validate>
c000518c:	89 c6                	mov    esi,eax
c000518e:	85 c0                	test   eax,eax
c0005190:	0f 85 2e 01 00 00    	jne    c00052c4 <f_expand+0x156>
c0005196:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c000519a:	85 f6                	test   esi,esi
c000519c:	0f 85 22 01 00 00    	jne    c00052c4 <f_expand+0x156>
c00051a2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00051a7:	75 0a                	jne    c00051b3 <f_expand+0x45>
c00051a9:	be 07 00 00 00       	mov    esi,0x7
c00051ae:	e9 11 01 00 00       	jmp    c00052c4 <f_expand+0x156>
c00051b3:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00051b7:	75 f0                	jne    c00051a9 <f_expand+0x3b>
c00051b9:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051bd:	74 ea                	je     c00051a9 <f_expand+0x3b>
c00051bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00051c3:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c00051c7:	c1 e7 09             	shl    edi,0x9
c00051ca:	8d 47 ff             	lea    eax,[edi-0x1]
c00051cd:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051d1:	0f 95 c0             	setne  al
c00051d4:	31 d2                	xor    edx,edx
c00051d6:	0f b6 c0             	movzx  eax,al
c00051d9:	89 c5                	mov    ebp,eax
c00051db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051df:	f7 f7                	div    edi
c00051e1:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c00051e4:	01 e8                	add    eax,ebp
c00051e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051ea:	83 ff 01             	cmp    edi,0x1
c00051ed:	76 05                	jbe    c00051f4 <f_expand+0x86>
c00051ef:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c00051f2:	77 05                	ja     c00051f9 <f_expand+0x8b>
c00051f4:	bf 02 00 00 00       	mov    edi,0x2
c00051f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051fc:	89 fd                	mov    ebp,edi
c00051fe:	31 c9                	xor    ecx,ecx
c0005200:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005202:	89 ea                	mov    edx,ebp
c0005204:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005208:	45                   	inc    ebp
c0005209:	e8 51 df ff ff       	call   c000315f <get_fat.isra.2>
c000520e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005216:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005219:	77 05                	ja     c0005220 <f_expand+0xb2>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	83 f8 01             	cmp    eax,0x1
c0005223:	74 20                	je     c0005245 <f_expand+0xd7>
c0005225:	83 f8 ff             	cmp    eax,0xffffffff
c0005228:	74 22                	je     c000524c <f_expand+0xde>
c000522a:	85 c0                	test   eax,eax
c000522c:	75 09                	jne    c0005237 <f_expand+0xc9>
c000522e:	41                   	inc    ecx
c000522f:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005233:	75 07                	jne    c000523c <f_expand+0xce>
c0005235:	eb 1c                	jmp    c0005253 <f_expand+0xe5>
c0005237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000523a:	31 c9                	xor    ecx,ecx
c000523c:	39 fd                	cmp    ebp,edi
c000523e:	75 c0                	jne    c0005200 <f_expand+0x92>
c0005240:	e9 64 ff ff ff       	jmp    c00051a9 <f_expand+0x3b>
c0005245:	be 02 00 00 00       	mov    esi,0x2
c000524a:	eb 78                	jmp    c00052c4 <f_expand+0x156>
c000524c:	be 01 00 00 00       	mov    esi,0x1
c0005251:	eb 71                	jmp    c00052c4 <f_expand+0x156>
c0005253:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005258:	74 2b                	je     c0005285 <f_expand+0x117>
c000525a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000525d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005261:	85 ed                	test   ebp,ebp
c0005263:	74 24                	je     c0005289 <f_expand+0x11b>
c0005265:	83 c9 ff             	or     ecx,0xffffffff
c0005268:	83 fd 01             	cmp    ebp,0x1
c000526b:	74 03                	je     c0005270 <f_expand+0x102>
c000526d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005274:	89 fa                	mov    edx,edi
c0005276:	e8 83 d4 ff ff       	call   c00026fe <put_fat>
c000527b:	85 c0                	test   eax,eax
c000527d:	75 43                	jne    c00052c2 <f_expand+0x154>
c000527f:	89 f8                	mov    eax,edi
c0005281:	4d                   	dec    ebp
c0005282:	47                   	inc    edi
c0005283:	eb dc                	jmp    c0005261 <f_expand+0xf3>
c0005285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005288:	48                   	dec    eax
c0005289:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000528d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005292:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005295:	74 2d                	je     c00052c4 <f_expand+0x156>
c0005297:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000529a:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000529e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052a8:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00052ab:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00052ae:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00052b1:	39 c8                	cmp    eax,ecx
c00052b3:	77 0f                	ja     c00052c4 <f_expand+0x156>
c00052b5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052b9:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052bd:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052c0:	eb 02                	jmp    c00052c4 <f_expand+0x156>
c00052c2:	89 c6                	mov    esi,eax
c00052c4:	83 c4 2c             	add    esp,0x2c
c00052c7:	89 f0                	mov    eax,esi
c00052c9:	5b                   	pop    ebx
c00052ca:	5e                   	pop    esi
c00052cb:	5f                   	pop    edi
c00052cc:	5d                   	pop    ebp
c00052cd:	c3                   	ret    

c00052ce <f_mkfs>:
c00052ce:	55                   	push   ebp
c00052cf:	57                   	push   edi
c00052d0:	56                   	push   esi
c00052d1:	be 0b 00 00 00       	mov    esi,0xb
c00052d6:	53                   	push   ebx
c00052d7:	83 ec 4c             	sub    esp,0x4c
c00052da:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052de:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052e2:	e8 bf ce ff ff       	call   c00021a6 <get_ldnumber>
c00052e7:	85 c0                	test   eax,eax
c00052e9:	0f 88 a8 07 00 00    	js     c0005a97 <f_mkfs+0x7c9>
c00052ef:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052f6:	85 d2                	test   edx,edx
c00052f8:	74 03                	je     c00052fd <f_mkfs+0x2f>
c00052fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052fd:	85 db                	test   ebx,ebx
c00052ff:	75 05                	jne    c0005306 <f_mkfs+0x38>
c0005301:	bb 40 ee 01 c0       	mov    ebx,0xc001ee40
c0005306:	0f b6 c0             	movzx  eax,al
c0005309:	83 ec 0c             	sub    esp,0xc
c000530c:	be 03 00 00 00       	mov    esi,0x3
c0005311:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005319:	e8 07 ca ff ff       	call   c0001d25 <disk_initialize>
c000531e:	83 c4 10             	add    esp,0x10
c0005321:	a8 01                	test   al,0x1
c0005323:	0f 85 6e 07 00 00    	jne    c0005a97 <f_mkfs+0x7c9>
c0005329:	be 0a 00 00 00       	mov    esi,0xa
c000532e:	a8 04                	test   al,0x4
c0005330:	0f 85 61 07 00 00    	jne    c0005a97 <f_mkfs+0x7c9>
c0005336:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005339:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000533d:	85 c0                	test   eax,eax
c000533f:	75 20                	jne    c0005361 <f_mkfs+0x93>
c0005341:	51                   	push   ecx
c0005342:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005346:	50                   	push   eax
c0005347:	6a 03                	push   0x3
c0005349:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000534d:	e8 02 ca ff ff       	call   c0001d54 <disk_ioctl>
c0005352:	83 c4 10             	add    esp,0x10
c0005355:	85 c0                	test   eax,eax
c0005357:	74 08                	je     c0005361 <f_mkfs+0x93>
c0005359:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005361:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005365:	8d 42 ff             	lea    eax,[edx-0x1]
c0005368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000536d:	77 04                	ja     c0005373 <f_mkfs+0xa5>
c000536f:	85 c2                	test   edx,eax
c0005371:	74 08                	je     c000537b <f_mkfs+0xad>
c0005373:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000537b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000537e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005382:	48                   	dec    eax
c0005383:	0f b6 7c 24 2d       	movzx  edi,BYTE PTR [esp+0x2d]
c0005388:	3c 02                	cmp    al,0x2
c000538a:	b0 01                	mov    al,0x1
c000538c:	0f 43 f8             	cmovae edi,eax
c000538f:	89 f8                	mov    eax,edi
c0005391:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005395:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005398:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000539c:	48                   	dec    eax
c000539d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00053a2:	77 15                	ja     c00053b9 <f_mkfs+0xeb>
c00053a4:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00053a9:	b8 00 02 00 00       	mov    eax,0x200
c00053ae:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c00053b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053b7:	eb 08                	jmp    c00053c1 <f_mkfs+0xf3>
c00053b9:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00053c1:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00053c4:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00053ca:	77 0f                	ja     c00053db <f_mkfs+0x10d>
c00053cc:	c4 e2 78 f3 cf       	blsr   eax,edi
c00053d1:	b8 00 00 00 00       	mov    eax,0x0
c00053d6:	0f 45 f8             	cmovne edi,eax
c00053d9:	eb 02                	jmp    c00053dd <f_mkfs+0x10f>
c00053db:	31 ff                	xor    edi,edi
c00053dd:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053e5:	77 0a                	ja     c00053f1 <f_mkfs+0x123>
c00053e7:	be 11 00 00 00       	mov    esi,0x11
c00053ec:	e9 a6 06 00 00       	jmp    c0005a97 <f_mkfs+0x7c9>
c00053f1:	8b 33                	mov    esi,DWORD PTR [ebx]
c00053f3:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00053f7:	85 db                	test   ebx,ebx
c00053f9:	75 1b                	jne    c0005416 <f_mkfs+0x148>
c00053fb:	83 ec 0c             	sub    esp,0xc
c00053fe:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005402:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005407:	50                   	push   eax
c0005408:	e8 97 06 00 00       	call   c0005aa4 <ff_memalloc>
c000540d:	83 c4 10             	add    esp,0x10
c0005410:	89 c3                	mov    ebx,eax
c0005412:	85 c0                	test   eax,eax
c0005414:	74 d1                	je     c00053e7 <f_mkfs+0x119>
c0005416:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c000541e:	52                   	push   edx
c000541f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0005423:	50                   	push   eax
c0005424:	6a 01                	push   0x1
c0005426:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000542a:	e8 25 c9 ff ff       	call   c0001d54 <disk_ioctl>
c000542f:	83 c4 10             	add    esp,0x10
c0005432:	85 c0                	test   eax,eax
c0005434:	0f 85 00 06 00 00    	jne    c0005a3a <f_mkfs+0x76c>
c000543a:	89 f0                	mov    eax,esi
c000543c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005444:	24 08                	and    al,0x8
c0005446:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000544a:	75 18                	jne    c0005464 <f_mkfs+0x196>
c000544c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005450:	83 f8 3f             	cmp    eax,0x3f
c0005453:	76 0f                	jbe    c0005464 <f_mkfs+0x196>
c0005455:	83 e8 3f             	sub    eax,0x3f
c0005458:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005460:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005464:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005468:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000546c:	83 f8 7f             	cmp    eax,0x7f
c000546f:	0f 86 4a 02 00 00    	jbe    c00056bf <f_mkfs+0x3f1>
c0005475:	b9 80 00 00 00       	mov    ecx,0x80
c000547a:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005480:	77 05                	ja     c0005487 <f_mkfs+0x1b9>
c0005482:	c1 ef 09             	shr    edi,0x9
c0005485:	89 f9                	mov    ecx,edi
c0005487:	89 f0                	mov    eax,esi
c0005489:	83 e0 01             	and    eax,0x1
c000548c:	83 e6 02             	and    esi,0x2
c000548f:	89 f2                	mov    edx,esi
c0005491:	88 54 24 2e          	mov    BYTE PTR [esp+0x2e],dl
c0005495:	74 0a                	je     c00054a1 <f_mkfs+0x1d3>
c0005497:	84 c0                	test   al,al
c0005499:	0f 84 42 01 00 00    	je     c00055e1 <f_mkfs+0x313>
c000549f:	eb 38                	jmp    c00054d9 <f_mkfs+0x20b>
c00054a1:	be 13 00 00 00       	mov    esi,0x13
c00054a6:	84 c0                	test   al,al
c00054a8:	75 2f                	jne    c00054d9 <f_mkfs+0x20b>
c00054aa:	e9 a5 05 00 00       	jmp    c0005a54 <f_mkfs+0x786>
c00054af:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00054b4:	0f 85 fe 01 00 00    	jne    c00056b8 <f_mkfs+0x3ea>
c00054ba:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00054bf:	0f 86 d7 01 00 00    	jbe    c000569c <f_mkfs+0x3ce>
c00054c5:	85 c9                	test   ecx,ecx
c00054c7:	0f 85 9c 05 00 00    	jne    c0005a69 <f_mkfs+0x79b>
c00054cd:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00054d0:	83 f9 40             	cmp    ecx,0x40
c00054d3:	0f 87 a0 05 00 00    	ja     c0005a79 <f_mkfs+0x7ab>
c00054d9:	89 cf                	mov    edi,ecx
c00054db:	85 c9                	test   ecx,ecx
c00054dd:	75 1d                	jne    c00054fc <f_mkfs+0x22e>
c00054df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00054e3:	ba 20 ee 01 c0       	mov    edx,0xc001ee20
c00054e8:	bf 01 00 00 00       	mov    edi,0x1
c00054ed:	c1 ee 0c             	shr    esi,0xc
c00054f0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054f3:	66 85 c0             	test   ax,ax
c00054f6:	0f 85 55 01 00 00    	jne    c0005651 <f_mkfs+0x383>
c00054fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005500:	31 d2                	xor    edx,edx
c0005502:	f7 f7                	div    edi
c0005504:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005509:	0f 86 54 01 00 00    	jbe    c0005663 <f_mkfs+0x395>
c000550f:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005514:	83 c0 02             	add    eax,0x2
c0005517:	01 c0                	add    eax,eax
c0005519:	05 ff 01 00 00       	add    eax,0x1ff
c000551e:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c0005526:	c1 e8 09             	shr    eax,0x9
c0005529:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000552d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005531:	c1 e0 05             	shl    eax,0x5
c0005534:	c1 e8 09             	shr    eax,0x9
c0005537:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000553b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005540:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0005544:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005548:	0f af 6c 24 24       	imul   ebp,DWORD PTR [esp+0x24]
c000554d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005551:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005555:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005559:	01 c5                	add    ebp,eax
c000555b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000555f:	03 6c 24 28          	add    ebp,DWORD PTR [esp+0x28]
c0005563:	8d 74 28 ff          	lea    esi,[eax+ebp*1-0x1]
c0005567:	f7 d8                	neg    eax
c0005569:	21 c6                	and    esi,eax
c000556b:	29 ee                	sub    esi,ebp
c000556d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005572:	0f 85 fe 00 00 00    	jne    c0005676 <f_mkfs+0x3a8>
c0005578:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c000557c:	01 74 24 1c          	add    DWORD PTR [esp+0x1c],esi
c0005580:	89 f8                	mov    eax,edi
c0005582:	c1 e0 04             	shl    eax,0x4
c0005585:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005589:	01 c5                	add    ebp,eax
c000558b:	39 6c 24 18          	cmp    DWORD PTR [esp+0x18],ebp
c000558f:	0f 82 2a 01 00 00    	jb     c00056bf <f_mkfs+0x3f1>
c0005595:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005599:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000559d:	31 d2                	xor    edx,edx
c000559f:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00055a3:	89 c5                	mov    ebp,eax
c00055a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055a9:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
c00055ae:	29 c5                	sub    ebp,eax
c00055b0:	89 e8                	mov    eax,ebp
c00055b2:	f7 f7                	div    edi
c00055b4:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00055b9:	89 c5                	mov    ebp,eax
c00055bb:	0f 85 ee fe ff ff    	jne    c00054af <f_mkfs+0x1e1>
c00055c1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00055c6:	0f 87 02 01 00 00    	ja     c00056ce <f_mkfs+0x400>
c00055cc:	85 c9                	test   ecx,ecx
c00055ce:	0f 85 eb 00 00 00    	jne    c00056bf <f_mkfs+0x3f1>
c00055d4:	83 ff 01             	cmp    edi,0x1
c00055d7:	0f 86 e2 00 00 00    	jbe    c00056bf <f_mkfs+0x3f1>
c00055dd:	d1 ef                	shr    edi,1
c00055df:	89 f9                	mov    ecx,edi
c00055e1:	89 ce                	mov    esi,ecx
c00055e3:	85 c9                	test   ecx,ecx
c00055e5:	75 26                	jne    c000560d <f_mkfs+0x33f>
c00055e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00055eb:	ba 30 ee 01 c0       	mov    edx,0xc001ee30
c00055f0:	b9 01 00 00 00       	mov    ecx,0x1
c00055f5:	c1 ee 11             	shr    esi,0x11
c00055f8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055fb:	66 85 c0             	test   ax,ax
c00055fe:	74 0b                	je     c000560b <f_mkfs+0x33d>
c0005600:	83 c2 02             	add    edx,0x2
c0005603:	39 f0                	cmp    eax,esi
c0005605:	77 04                	ja     c000560b <f_mkfs+0x33d>
c0005607:	01 c9                	add    ecx,ecx
c0005609:	eb ed                	jmp    c00055f8 <f_mkfs+0x32a>
c000560b:	31 f6                	xor    esi,esi
c000560d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005611:	31 d2                	xor    edx,edx
c0005613:	f7 f1                	div    ecx
c0005615:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000561c:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005621:	c1 ea 09             	shr    edx,0x9
c0005624:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005628:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000562d:	0f 87 8c 00 00 00    	ja     c00056bf <f_mkfs+0x3f1>
c0005633:	89 cf                	mov    edi,ecx
c0005635:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000563d:	89 f1                	mov    ecx,esi
c000563f:	c7 44 24 20 20 00 00 00 	mov    DWORD PTR [esp+0x20],0x20
c0005647:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000564c:	e9 ea fe ff ff       	jmp    c000553b <f_mkfs+0x26d>
c0005651:	83 c2 02             	add    edx,0x2
c0005654:	39 f0                	cmp    eax,esi
c0005656:	0f 87 a0 fe ff ff    	ja     c00054fc <f_mkfs+0x22e>
c000565c:	01 ff                	add    edi,edi
c000565e:	e9 8d fe ff ff       	jmp    c00054f0 <f_mkfs+0x222>
c0005663:	8d 04 40             	lea    eax,[eax+eax*2]
c0005666:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000566b:	40                   	inc    eax
c000566c:	d1 e8                	shr    eax,1
c000566e:	83 c0 03             	add    eax,0x3
c0005671:	e9 a3 fe ff ff       	jmp    c0005519 <f_mkfs+0x24b>
c0005676:	89 f0                	mov    eax,esi
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 74 24 24          	div    DWORD PTR [esp+0x24]
c000567e:	85 d2                	test   edx,edx
c0005680:	74 09                	je     c000568b <f_mkfs+0x3bd>
c0005682:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005686:	4e                   	dec    esi
c0005687:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000568b:	89 f0                	mov    eax,esi
c000568d:	31 d2                	xor    edx,edx
c000568f:	f7 74 24 24          	div    DWORD PTR [esp+0x24]
c0005693:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0005697:	e9 e4 fe ff ff       	jmp    c0005580 <f_mkfs+0x2b2>
c000569c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00056a1:	77 2b                	ja     c00056ce <f_mkfs+0x400>
c00056a3:	85 c9                	test   ecx,ecx
c00056a5:	75 18                	jne    c00056bf <f_mkfs+0x3f1>
c00056a7:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00056aa:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00056b0:	0f 86 23 fe ff ff    	jbe    c00054d9 <f_mkfs+0x20b>
c00056b6:	eb 07                	jmp    c00056bf <f_mkfs+0x3f1>
c00056b8:	3d f5 0f 00 00       	cmp    eax,0xff5
c00056bd:	76 0a                	jbe    c00056c9 <f_mkfs+0x3fb>
c00056bf:	be 0e 00 00 00       	mov    esi,0xe
c00056c4:	e9 8b 03 00 00       	jmp    c0005a54 <f_mkfs+0x786>
c00056c9:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	b9 00 02 00 00       	mov    ecx,0x200
c00056d5:	89 d8                	mov    eax,ebx
c00056d7:	e8 d8 c6 ff ff       	call   c0001db4 <mem_set>
c00056dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00056e1:	ba d2 ed 01 c0       	mov    edx,0xc001edd2
c00056e6:	89 d8                	mov    eax,ebx
c00056e8:	e8 b2 c6 ff ff       	call   c0001d9f <mem_cpy>
c00056ed:	8d 43 0b             	lea    eax,[ebx+0xb]
c00056f0:	ba 00 02 00 00       	mov    edx,0x200
c00056f5:	e8 9e c6 ff ff       	call   c0001d98 <st_word>
c00056fa:	89 f8                	mov    eax,edi
c00056fc:	0f b7 54 24 20       	movzx  edx,WORD PTR [esp+0x20]
c0005701:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005704:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005707:	e8 8c c6 ff ff       	call   c0001d98 <st_word>
c000570c:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005710:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005715:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005718:	b8 00 00 00 00       	mov    eax,0x0
c000571d:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c0005722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005726:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572a:	8d 43 11             	lea    eax,[ebx+0x11]
c000572d:	e8 66 c6 ff ff       	call   c0001d98 <st_word>
c0005732:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005736:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000573c:	77 0a                	ja     c0005748 <f_mkfs+0x47a>
c000573e:	8d 43 13             	lea    eax,[ebx+0x13]
c0005741:	e8 52 c6 ff ff       	call   c0001d98 <st_word>
c0005746:	eb 08                	jmp    c0005750 <f_mkfs+0x482>
c0005748:	8d 43 20             	lea    eax,[ebx+0x20]
c000574b:	e8 4c c6 ff ff       	call   c0001d9c <st_dword>
c0005750:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005754:	8d 43 18             	lea    eax,[ebx+0x18]
c0005757:	ba 3f 00 00 00       	mov    edx,0x3f
c000575c:	e8 37 c6 ff ff       	call   c0001d98 <st_word>
c0005761:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005764:	ba ff 00 00 00       	mov    edx,0xff
c0005769:	e8 2a c6 ff ff       	call   c0001d98 <st_word>
c000576e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005772:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005775:	e8 22 c6 ff ff       	call   c0001d9c <st_dword>
c000577a:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000577f:	75 57                	jne    c00057d8 <f_mkfs+0x50a>
c0005781:	8d 43 43             	lea    eax,[ebx+0x43]
c0005784:	ba 00 00 21 50       	mov    edx,0x50210000
c0005789:	e8 0e c6 ff ff       	call   c0001d9c <st_dword>
c000578e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005792:	8d 43 24             	lea    eax,[ebx+0x24]
c0005795:	e8 02 c6 ff ff       	call   c0001d9c <st_dword>
c000579a:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000579d:	ba 02 00 00 00       	mov    edx,0x2
c00057a2:	e8 f5 c5 ff ff       	call   c0001d9c <st_dword>
c00057a7:	8d 43 30             	lea    eax,[ebx+0x30]
c00057aa:	ba 01 00 00 00       	mov    edx,0x1
c00057af:	e8 e4 c5 ff ff       	call   c0001d98 <st_word>
c00057b4:	8d 43 32             	lea    eax,[ebx+0x32]
c00057b7:	ba 06 00 00 00       	mov    edx,0x6
c00057bc:	e8 d7 c5 ff ff       	call   c0001d98 <st_word>
c00057c1:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c00057c5:	8d 43 47             	lea    eax,[ebx+0x47]
c00057c8:	b9 13 00 00 00       	mov    ecx,0x13
c00057cd:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c00057d1:	ba de ed 01 c0       	mov    edx,0xc001edde
c00057d6:	eb 2f                	jmp    c0005807 <f_mkfs+0x539>
c00057d8:	8d 43 27             	lea    eax,[ebx+0x27]
c00057db:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e0:	e8 b7 c5 ff ff       	call   c0001d9c <st_dword>
c00057e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00057ea:	8d 43 16             	lea    eax,[ebx+0x16]
c00057ed:	e8 a6 c5 ff ff       	call   c0001d98 <st_word>
c00057f2:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c00057f6:	8d 43 2b             	lea    eax,[ebx+0x2b]
c00057f9:	b9 13 00 00 00       	mov    ecx,0x13
c00057fe:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005802:	ba f2 ed 01 c0       	mov    edx,0xc001edf2
c0005807:	e8 93 c5 ff ff       	call   c0001d9f <mem_cpy>
c000580c:	8d b3 fe 01 00 00    	lea    esi,[ebx+0x1fe]
c0005812:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005817:	89 f0                	mov    eax,esi
c0005819:	e8 7a c5 ff ff       	call   c0001d98 <st_word>
c000581e:	6a 01                	push   0x1
c0005820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005824:	53                   	push   ebx
c0005825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005829:	e8 10 c5 ff ff       	call   c0001d3e <disk_write>
c000582e:	83 c4 10             	add    esp,0x10
c0005831:	85 c0                	test   eax,eax
c0005833:	0f 85 01 02 00 00    	jne    c0005a3a <f_mkfs+0x76c>
c0005839:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000583e:	0f 85 94 00 00 00    	jne    c00058d8 <f_mkfs+0x60a>
c0005844:	6a 01                	push   0x1
c0005846:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000584a:	83 c0 06             	add    eax,0x6
c000584d:	50                   	push   eax
c000584e:	53                   	push   ebx
c000584f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005853:	e8 e6 c4 ff ff       	call   c0001d3e <disk_write>
c0005858:	b9 00 02 00 00       	mov    ecx,0x200
c000585d:	31 d2                	xor    edx,edx
c000585f:	89 d8                	mov    eax,ebx
c0005861:	e8 4e c5 ff ff       	call   c0001db4 <mem_set>
c0005866:	ba 52 52 61 41       	mov    edx,0x41615252
c000586b:	89 d8                	mov    eax,ebx
c000586d:	e8 2a c5 ff ff       	call   c0001d9c <st_dword>
c0005872:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005878:	ba 72 72 41 61       	mov    edx,0x61417272
c000587d:	e8 1a c5 ff ff       	call   c0001d9c <st_dword>
c0005882:	8d 55 ff             	lea    edx,[ebp-0x1]
c0005885:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c000588b:	e8 0c c5 ff ff       	call   c0001d9c <st_dword>
c0005890:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005896:	ba 02 00 00 00       	mov    edx,0x2
c000589b:	e8 fc c4 ff ff       	call   c0001d9c <st_dword>
c00058a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 ec c4 ff ff       	call   c0001d98 <st_word>
c00058ac:	6a 01                	push   0x1
c00058ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00058b2:	83 c0 07             	add    eax,0x7
c00058b5:	50                   	push   eax
c00058b6:	53                   	push   ebx
c00058b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00058bb:	e8 7e c4 ff ff       	call   c0001d3e <disk_write>
c00058c0:	83 c4 20             	add    esp,0x20
c00058c3:	6a 01                	push   0x1
c00058c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058c9:	40                   	inc    eax
c00058ca:	50                   	push   eax
c00058cb:	53                   	push   ebx
c00058cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00058d0:	e8 69 c4 ff ff       	call   c0001d3e <disk_write>
c00058d5:	83 c4 10             	add    esp,0x10
c00058d8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058dc:	31 d2                	xor    edx,edx
c00058de:	b0 09                	mov    al,0x9
c00058e0:	c4 e2 7b f7 6c 24 6c 	shrx   ebp,DWORD PTR [esp+0x6c],eax
c00058e7:	89 d8                	mov    eax,ebx
c00058e9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058ef:	e8 c0 c4 ff ff       	call   c0001db4 <mem_set>
c00058f4:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058f9:	ba f8 ff ff 00       	mov    edx,0xfffff8
c00058fe:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c0005903:	0f 44 c2             	cmove  eax,edx
c0005906:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000590e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005912:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005917:	75 21                	jne    c000593a <f_mkfs+0x66c>
c0005919:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 77 c4 ff ff       	call   c0001d9c <st_dword>
c0005925:	8d 43 04             	lea    eax,[ebx+0x4]
c0005928:	83 ca ff             	or     edx,0xffffffff
c000592b:	e8 6c c4 ff ff       	call   c0001d9c <st_dword>
c0005930:	8d 43 08             	lea    eax,[ebx+0x8]
c0005933:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005938:	eb 06                	jmp    c0005940 <f_mkfs+0x672>
c000593a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000593e:	89 d8                	mov    eax,ebx
c0005940:	e8 57 c4 ff ff       	call   c0001d9c <st_dword>
c0005945:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005949:	39 ee                	cmp    esi,ebp
c000594b:	89 e8                	mov    eax,ebp
c000594d:	0f 46 c6             	cmovbe eax,esi
c0005950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005954:	50                   	push   eax
c0005955:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005959:	53                   	push   ebx
c000595a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000595e:	e8 db c3 ff ff       	call   c0001d3e <disk_write>
c0005963:	83 c4 10             	add    esp,0x10
c0005966:	85 c0                	test   eax,eax
c0005968:	0f 85 cc 00 00 00    	jne    c0005a3a <f_mkfs+0x76c>
c000596e:	b9 00 02 00 00       	mov    ecx,0x200
c0005973:	31 d2                	xor    edx,edx
c0005975:	89 d8                	mov    eax,ebx
c0005977:	e8 38 c4 ff ff       	call   c0001db4 <mem_set>
c000597c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005980:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005984:	29 ce                	sub    esi,ecx
c0005986:	75 c1                	jne    c0005949 <f_mkfs+0x67b>
c0005988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000598c:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005994:	40                   	inc    eax
c0005995:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0005999:	0f 87 73 ff ff ff    	ja     c0005912 <f_mkfs+0x644>
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	0f 45 7c 24 28       	cmovne edi,DWORD PTR [esp+0x28]
c00059a9:	39 ef                	cmp    edi,ebp
c00059ab:	89 ee                	mov    esi,ebp
c00059ad:	0f 46 f7             	cmovbe esi,edi
c00059b0:	56                   	push   esi
c00059b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00059b5:	53                   	push   ebx
c00059b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00059ba:	e8 7f c3 ff ff       	call   c0001d3e <disk_write>
c00059bf:	83 c4 10             	add    esp,0x10
c00059c2:	85 c0                	test   eax,eax
c00059c4:	75 74                	jne    c0005a3a <f_mkfs+0x76c>
c00059c6:	01 74 24 1c          	add    DWORD PTR [esp+0x1c],esi
c00059ca:	29 f7                	sub    edi,esi
c00059cc:	75 db                	jne    c00059a9 <f_mkfs+0x6db>
c00059ce:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059d3:	b1 0c                	mov    cl,0xc
c00059d5:	74 18                	je     c00059ef <f_mkfs+0x721>
c00059d7:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059df:	b1 06                	mov    cl,0x6
c00059e1:	77 0c                	ja     c00059ef <f_mkfs+0x721>
c00059e3:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059e8:	0f 94 c1             	sete   cl
c00059eb:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ef:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059f4:	75 2d                	jne    c0005a23 <f_mkfs+0x755>
c00059f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059fa:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0005a02:	83 ec 0c             	sub    esp,0xc
c0005a05:	0f b6 c9             	movzx  ecx,cl
c0005a08:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005a0c:	53                   	push   ebx
c0005a0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a11:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a15:	e8 5d d3 ff ff       	call   c0002d77 <create_partition>
c0005a1a:	83 c4 10             	add    esp,0x10
c0005a1d:	89 c6                	mov    esi,eax
c0005a1f:	85 c0                	test   eax,eax
c0005a21:	75 31                	jne    c0005a54 <f_mkfs+0x786>
c0005a23:	50                   	push   eax
c0005a24:	31 f6                	xor    esi,esi
c0005a26:	6a 00                	push   0x0
c0005a28:	6a 00                	push   0x0
c0005a2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a2e:	e8 21 c3 ff ff       	call   c0001d54 <disk_ioctl>
c0005a33:	83 c4 10             	add    esp,0x10
c0005a36:	85 c0                	test   eax,eax
c0005a38:	74 1a                	je     c0005a54 <f_mkfs+0x786>
c0005a3a:	83 7c 24 68 00       	cmp    DWORD PTR [esp+0x68],0x0
c0005a3f:	75 0c                	jne    c0005a4d <f_mkfs+0x77f>
c0005a41:	83 ec 0c             	sub    esp,0xc
c0005a44:	53                   	push   ebx
c0005a45:	e8 72 00 00 00       	call   c0005abc <ff_memfree>
c0005a4a:	83 c4 10             	add    esp,0x10
c0005a4d:	be 01 00 00 00       	mov    esi,0x1
c0005a52:	eb 43                	jmp    c0005a97 <f_mkfs+0x7c9>
c0005a54:	83 7c 24 68 00       	cmp    DWORD PTR [esp+0x68],0x0
c0005a59:	75 3c                	jne    c0005a97 <f_mkfs+0x7c9>
c0005a5b:	83 ec 0c             	sub    esp,0xc
c0005a5e:	53                   	push   ebx
c0005a5f:	e8 58 00 00 00       	call   c0005abc <ff_memfree>
c0005a64:	83 c4 10             	add    esp,0x10
c0005a67:	eb 2e                	jmp    c0005a97 <f_mkfs+0x7c9>
c0005a69:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a6e:	0f 85 6d fb ff ff    	jne    c00055e1 <f_mkfs+0x313>
c0005a74:	e9 46 fc ff ff       	jmp    c00056bf <f_mkfs+0x3f1>
c0005a79:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a7e:	0f 85 63 fb ff ff    	jne    c00055e7 <f_mkfs+0x319>
c0005a84:	89 cf                	mov    edi,ecx
c0005a86:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a8c:	0f 86 6a fa ff ff    	jbe    c00054fc <f_mkfs+0x22e>
c0005a92:	e9 28 fc ff ff       	jmp    c00056bf <f_mkfs+0x3f1>
c0005a97:	83 c4 4c             	add    esp,0x4c
c0005a9a:	89 f0                	mov    eax,esi
c0005a9c:	5b                   	pop    ebx
c0005a9d:	5e                   	pop    esi
c0005a9e:	5f                   	pop    edi
c0005a9f:	5d                   	pop    ebp
c0005aa0:	c3                   	ret    
c0005aa1:	66 90                	xchg   ax,ax
c0005aa3:	90                   	nop

c0005aa4 <ff_memalloc>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 c8 1d 00 00       	call   c000787b <malloc>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	83 c4 0c             	add    esp,0xc
c0005ab9:	c3                   	ret    
c0005aba:	66 90                	xchg   ax,ax

c0005abc <ff_memfree>:
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	83 ec 0c             	sub    esp,0xc
c0005ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ac6:	e8 c0 1d 00 00       	call   c000788b <free>
c0005acb:	83 c4 10             	add    esp,0x10
c0005ace:	90                   	nop
c0005acf:	83 c4 0c             	add    esp,0xc
c0005ad2:	c3                   	ret    
c0005ad3:	90                   	nop

c0005ad4 <ff_uni2oem>:
c0005ad4:	83 ec 14             	sub    esp,0x14
c0005ad7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005adb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005adf:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae6:	c7 44 24 0c 20 f2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f220
c0005aee:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005af3:	77 0b                	ja     c0005b00 <ff_uni2oem+0x2c>
c0005af5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005af9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005afe:	eb 60                	jmp    c0005b60 <ff_uni2oem+0x8c>
c0005b00:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005b08:	77 56                	ja     c0005b60 <ff_uni2oem+0x8c>
c0005b0a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b10:	75 4e                	jne    c0005b60 <ff_uni2oem+0x8c>
c0005b12:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b19:	eb 0d                	jmp    c0005b28 <ff_uni2oem+0x54>
c0005b1b:	90                   	nop
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	40                   	inc    eax
c0005b22:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b27:	90                   	nop
c0005b28:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b2e:	77 1c                	ja     c0005b4c <ff_uni2oem+0x78>
c0005b30:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005b35:	8d 14 00             	lea    edx,[eax+eax*1]
c0005b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b3c:	01 d0                	add    eax,edx
c0005b3e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b41:	0f b7 c0             	movzx  eax,ax
c0005b44:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b48:	75 d2                	jne    c0005b1c <ff_uni2oem+0x48>
c0005b4a:	66 90                	xchg   ax,ax
c0005b4c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b51:	66 83 e8 80          	sub    ax,0xff80
c0005b55:	66 25 ff 00          	and    ax,0xff
c0005b59:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b5e:	66 90                	xchg   ax,ax
c0005b60:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b65:	83 c4 14             	add    esp,0x14
c0005b68:	c3                   	ret    
c0005b69:	8d 76 00             	lea    esi,[esi+0x0]

c0005b6c <ff_oem2uni>:
c0005b6c:	83 ec 18             	sub    esp,0x18
c0005b6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b77:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b7c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b80:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b87:	c7 44 24 10 20 f2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f220
c0005b8f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b95:	77 0d                	ja     c0005ba4 <ff_oem2uni+0x38>
c0005b97:	66 8b 44 24 04       	mov    ax,WORD PTR [esp+0x4]
c0005b9c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba1:	eb 2d                	jmp    c0005bd0 <ff_oem2uni+0x64>
c0005ba3:	90                   	nop
c0005ba4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005baa:	75 24                	jne    c0005bd0 <ff_oem2uni+0x64>
c0005bac:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005bb3:	77 1b                	ja     c0005bd0 <ff_oem2uni+0x64>
c0005bb5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005bba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bbf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bc6:	01 d0                	add    eax,edx
c0005bc8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bcb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bd0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bd5:	83 c4 18             	add    esp,0x18
c0005bd8:	c3                   	ret    
c0005bd9:	8d 76 00             	lea    esi,[esi+0x0]

c0005bdc <ff_wtoupper>:
c0005bdc:	83 ec 10             	sub    esp,0x10
c0005bdf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005be7:	0f 87 4f 01 00 00    	ja     c0005d3c <ff_wtoupper+0x160>
c0005bed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bf1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bf6:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bfd:	77 09                	ja     c0005c08 <ff_wtoupper+0x2c>
c0005bff:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0005c04:	eb 0a                	jmp    c0005c10 <ff_wtoupper+0x34>
c0005c06:	66 90                	xchg   ax,ax
c0005c08:	b8 60 ef 01 c0       	mov    eax,0xc001ef60
c0005c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0005c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c18:	8d 50 02             	lea    edx,[eax+0x2]
c0005c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c22:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c27:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c2d:	0f 84 fd 00 00 00    	je     c0005d30 <ff_wtoupper+0x154>
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c3d:	0f 82 ed 00 00 00    	jb     c0005d30 <ff_wtoupper+0x154>
c0005c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c47:	8d 50 02             	lea    edx,[eax+0x2]
c0005c4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c51:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	66 c1 e8 08          	shr    ax,0x8
c0005c5f:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c64:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c6b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005c70:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005c75:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005c7a:	01 ca                	add    edx,ecx
c0005c7c:	39 d0                	cmp    eax,edx
c0005c7e:	0f 8d 8c 00 00 00    	jge    c0005d10 <ff_wtoupper+0x134>
c0005c84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c89:	83 f8 08             	cmp    eax,0x8
c0005c8c:	0f 87 9a 00 00 00    	ja     c0005d2c <ff_wtoupper+0x150>
c0005c92:	8b 04 85 20 ef 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe10e0]
c0005c99:	ff e0                	jmp    eax
c0005c9b:	90                   	nop
c0005c9c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ca1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ca6:	29 c2                	sub    edx,eax
c0005ca8:	89 d0                	mov    eax,edx
c0005caa:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cb1:	01 d0                	add    eax,edx
c0005cb3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cb6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cbb:	eb 4f                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0005cc0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cc5:	66 2b 44 24 08       	sub    ax,WORD PTR [esp+0x8]
c0005cca:	83 e0 01             	and    eax,0x1
c0005ccd:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cd2:	eb 38                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cd4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cda:	eb 30                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cdc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005ce2:	eb 28                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005ce4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cea:	eb 20                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cec:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cf2:	eb 18                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cf4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cfa:	eb 10                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005cfc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d02:	eb 08                	jmp    c0005d0c <ff_wtoupper+0x130>
c0005d04:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d0b:	90                   	nop
c0005d0c:	eb 1e                	jmp    c0005d2c <ff_wtoupper+0x150>
c0005d0e:	66 90                	xchg   ax,ax
c0005d10:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d16:	0f 85 f8 fe ff ff    	jne    c0005c14 <ff_wtoupper+0x38>
c0005d1c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d21:	01 c0                	add    eax,eax
c0005d23:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d27:	e9 e8 fe ff ff       	jmp    c0005c14 <ff_wtoupper+0x38>
c0005d2c:	90                   	nop
c0005d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0005d30:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	89 d7                	mov    edi,edx
c0005d49:	56                   	push   esi
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	89 de                	mov    esi,ebx
c0005d51:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 df                	mov    edi,ebx
c0005d98:	89 de                	mov    esi,ebx
c0005d9a:	83 e7 3f             	and    edi,0x3f
c0005d9d:	c1 fe 06             	sar    esi,0x6
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 c0 03             	add    eax,0x3
c0005dc6:	83 cb e0             	or     ebx,0xffffffe0
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	5e                   	pop    esi
c0005ddf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bgrad_cache>:
c0005e15:	83 fa 0e             	cmp    edx,0xe
c0005e18:	77 16                	ja     c0005e30 <bgrad_cache+0x1b>
c0005e1a:	53                   	push   ebx
c0005e1b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e1e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e22:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e25:	42                   	inc    edx
c0005e26:	83 fa 0f             	cmp    edx,0xf
c0005e29:	75 f3                	jne    c0005e1e <bgrad_cache+0x9>
c0005e2b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e2e:	5b                   	pop    ebx
c0005e2f:	c3                   	ret    
c0005e30:	c3                   	ret    

c0005e31 <ucscompare>:
c0005e31:	55                   	push   ebp
c0005e32:	57                   	push   edi
c0005e33:	89 c7                	mov    edi,eax
c0005e35:	56                   	push   esi
c0005e36:	89 d6                	mov    esi,edx
c0005e38:	31 d2                	xor    edx,edx
c0005e3a:	53                   	push   ebx
c0005e3b:	83 ec 1c             	sub    esp,0x1c
c0005e3e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e42:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e47:	c1 e3 08             	shl    ebx,0x8
c0005e4a:	09 c3                	or     ebx,eax
c0005e4c:	39 ca                	cmp    edx,ecx
c0005e4e:	7d 42                	jge    c0005e92 <ucscompare+0x61>
c0005e50:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e54:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e5d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e61:	c1 e0 08             	shl    eax,0x8
c0005e64:	09 e8                	or     eax,ebp
c0005e66:	83 f8 3b             	cmp    eax,0x3b
c0005e69:	74 27                	je     c0005e92 <ucscompare+0x61>
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	50                   	push   eax
c0005e6f:	e8 bc aa ff ff       	call   c0000930 <tolower>
c0005e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e77:	89 c5                	mov    ebp,eax
c0005e79:	e8 b2 aa ff ff       	call   c0000930 <tolower>
c0005e7e:	83 c4 10             	add    esp,0x10
c0005e81:	39 c5                	cmp    ebp,eax
c0005e83:	75 20                	jne    c0005ea5 <ucscompare+0x74>
c0005e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e8d:	83 c2 02             	add    edx,0x2
c0005e90:	eb ac                	jmp    c0005e3e <ucscompare+0xd>
c0005e92:	83 fb 2f             	cmp    ebx,0x2f
c0005e95:	0f 95 c2             	setne  dl
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	85 db                	test   ebx,ebx
c0005e9c:	0f 95 c0             	setne  al
c0005e9f:	21 d0                	and    eax,edx
c0005ea1:	f7 d8                	neg    eax
c0005ea3:	eb 03                	jmp    c0005ea8 <ucscompare+0x77>
c0005ea5:	83 c8 ff             	or     eax,0xffffffff
c0005ea8:	83 c4 1c             	add    esp,0x1c
c0005eab:	5b                   	pop    ebx
c0005eac:	5e                   	pop    esi
c0005ead:	5f                   	pop    edi
c0005eae:	5d                   	pop    ebp
c0005eaf:	c3                   	ret    

c0005eb0 <fncompare>:
c0005eb0:	55                   	push   ebp
c0005eb1:	57                   	push   edi
c0005eb2:	89 c7                	mov    edi,eax
c0005eb4:	56                   	push   esi
c0005eb5:	89 ce                	mov    esi,ecx
c0005eb7:	53                   	push   ebx
c0005eb8:	31 db                	xor    ebx,ebx
c0005eba:	83 ec 1c             	sub    esp,0x1c
c0005ebd:	39 d3                	cmp    ebx,edx
c0005ebf:	7d 43                	jge    c0005f04 <fncompare+0x54>
c0005ec1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005ec5:	3c 3b                	cmp    al,0x3b
c0005ec7:	74 3b                	je     c0005f04 <fncompare+0x54>
c0005ec9:	3c 2e                	cmp    al,0x2e
c0005ecb:	75 0e                	jne    c0005edb <fncompare+0x2b>
c0005ecd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ed0:	39 d9                	cmp    ecx,ebx
c0005ed2:	74 30                	je     c0005f04 <fncompare+0x54>
c0005ed4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ed9:	74 29                	je     c0005f04 <fncompare+0x54>
c0005edb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edf:	83 ec 0c             	sub    esp,0xc
c0005ee2:	50                   	push   eax
c0005ee3:	e8 48 aa ff ff       	call   c0000930 <tolower>
c0005ee8:	89 c5                	mov    ebp,eax
c0005eea:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ef1:	e8 3a aa ff ff       	call   c0000930 <tolower>
c0005ef6:	83 c4 10             	add    esp,0x10
c0005ef9:	39 c5                	cmp    ebp,eax
c0005efb:	75 1d                	jne    c0005f1a <fncompare+0x6a>
c0005efd:	43                   	inc    ebx
c0005efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f02:	eb b9                	jmp    c0005ebd <fncompare+0xd>
c0005f04:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f07:	80 fa 2f             	cmp    dl,0x2f
c0005f0a:	0f 95 c1             	setne  cl
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	84 d2                	test   dl,dl
c0005f11:	0f 95 c0             	setne  al
c0005f14:	21 c8                	and    eax,ecx
c0005f16:	f7 d8                	neg    eax
c0005f18:	eb 03                	jmp    c0005f1d <fncompare+0x6d>
c0005f1a:	83 c8 ff             	or     eax,0xffffffff
c0005f1d:	83 c4 1c             	add    esp,0x1c
c0005f20:	5b                   	pop    ebx
c0005f21:	5e                   	pop    esi
c0005f22:	5f                   	pop    edi
c0005f23:	5d                   	pop    ebp
c0005f24:	c3                   	ret    

c0005f25 <bclear_cache>:
c0005f25:	83 ec 18             	sub    esp,0x18
c0005f28:	68 20 f3 01 c0       	push   0xc001f320
c0005f2d:	e8 02 2e 01 00       	call   c0018d34 <iso_kprintf>
c0005f32:	83 c4 10             	add    esp,0x10
c0005f35:	31 c0                	xor    eax,eax
c0005f37:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f3e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f44:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f4b:	40                   	inc    eax
c0005f4c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f52:	83 f8 10             	cmp    eax,0x10
c0005f55:	75 e0                	jne    c0005f37 <bclear_cache+0x12>
c0005f57:	83 c4 0c             	add    esp,0xc
c0005f5a:	c3                   	ret    

c0005f5b <bclear>:
c0005f5b:	eb c8                	jmp    c0005f25 <bclear_cache>

c0005f5d <iso_break_all>:
c0005f5d:	83 ec 18             	sub    esp,0x18
c0005f60:	68 2e f3 01 c0       	push   0xc001f32e
c0005f65:	e8 ca 2d 01 00       	call   c0018d34 <iso_kprintf>
c0005f6a:	83 c4 10             	add    esp,0x10
c0005f6d:	31 c0                	xor    eax,eax
c0005f6f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f79:	05 94 00 00 00       	add    eax,0x94
c0005f7e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f83:	75 ea                	jne    c0005f6f <iso_break_all+0x12>
c0005f85:	83 c4 0c             	add    esp,0xc
c0005f88:	c3                   	ret    

c0005f89 <isoReadDiscSector>:
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f93:	50                   	push   eax
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa0:	e8 33 2d 01 00       	call   c0018cd8 <isoReadDiscSectorHelper>
c0005fa5:	83 c4 1c             	add    esp,0x1c
c0005fa8:	c3                   	ret    

c0005fa9 <bread_cache>:
c0005fa9:	55                   	push   ebp
c0005faa:	57                   	push   edi
c0005fab:	89 d7                	mov    edi,edx
c0005fad:	ba 0f 00 00 00       	mov    edx,0xf
c0005fb2:	56                   	push   esi
c0005fb3:	89 c6                	mov    esi,eax
c0005fb5:	53                   	push   ebx
c0005fb6:	83 ec 0c             	sub    esp,0xc
c0005fb9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fbc:	39 38                	cmp    DWORD PTR [eax],edi
c0005fbe:	74 3c                	je     c0005ffc <bread_cache+0x53>
c0005fc0:	4a                   	dec    edx
c0005fc1:	83 fa ff             	cmp    edx,0xffffffff
c0005fc4:	75 f3                	jne    c0005fb9 <bread_cache+0x10>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fcb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fce:	74 08                	je     c0005fd8 <bread_cache+0x2f>
c0005fd0:	43                   	inc    ebx
c0005fd1:	83 fb 10             	cmp    ebx,0x10
c0005fd4:	75 f2                	jne    c0005fc8 <bread_cache+0x1f>
c0005fd6:	31 db                	xor    ebx,ebx
c0005fd8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fdb:	50                   	push   eax
c0005fdc:	6a 01                	push   0x1
c0005fde:	57                   	push   edi
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	83 c0 04             	add    eax,0x4
c0005fe5:	50                   	push   eax
c0005fe6:	e8 9e ff ff ff       	call   c0005f89 <isoReadDiscSector>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	83 c9 ff             	or     ecx,0xffffffff
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	78 13                	js     c0006008 <bread_cache+0x5f>
c0005ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff8:	89 da                	mov    edx,ebx
c0005ffa:	89 38                	mov    DWORD PTR [eax],edi
c0005ffc:	89 f0                	mov    eax,esi
c0005ffe:	e8 12 fe ff ff       	call   c0005e15 <bgrad_cache>
c0006003:	b9 0f 00 00 00       	mov    ecx,0xf
c0006008:	83 c4 0c             	add    esp,0xc
c000600b:	89 c8                	mov    eax,ecx
c000600d:	5b                   	pop    ebx
c000600e:	5e                   	pop    esi
c000600f:	5f                   	pop    edi
c0006010:	5d                   	pop    ebp
c0006011:	c3                   	ret    

c0006012 <biread>:
c0006012:	89 c2                	mov    edx,eax
c0006014:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006019:	eb 8e                	jmp    c0005fa9 <bread_cache>

c000601b <bdread>:
c000601b:	89 c2                	mov    edx,eax
c000601d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006022:	eb 85                	jmp    c0005fa9 <bread_cache>

c0006024 <strnicmp>:
c0006024:	55                   	push   ebp
c0006025:	57                   	push   edi
c0006026:	31 ff                	xor    edi,edi
c0006028:	56                   	push   esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 0c             	sub    esp,0xc
c000602d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006031:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006035:	74 42                	je     c0006079 <strnicmp+0x55>
c0006037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000603b:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000603f:	84 c0                	test   al,al
c0006041:	74 36                	je     c0006079 <strnicmp+0x55>
c0006043:	8a 14 3e             	mov    dl,BYTE PTR [esi+edi*1]
c0006046:	84 d2                	test   dl,dl
c0006048:	74 2f                	je     c0006079 <strnicmp+0x55>
c000604a:	38 d0                	cmp    al,dl
c000604c:	8d 6f 01             	lea    ebp,[edi+0x1]
c000604f:	75 04                	jne    c0006055 <strnicmp+0x31>
c0006051:	89 ef                	mov    edi,ebp
c0006053:	eb dc                	jmp    c0006031 <strnicmp+0xd>
c0006055:	83 ec 0c             	sub    esp,0xc
c0006058:	50                   	push   eax
c0006059:	e8 d2 a8 ff ff       	call   c0000930 <tolower>
c000605e:	89 c3                	mov    ebx,eax
c0006060:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006064:	89 ef                	mov    edi,ebp
c0006066:	89 04 24             	mov    DWORD PTR [esp],eax
c0006069:	e8 c2 a8 ff ff       	call   c0000930 <tolower>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	29 c3                	sub    ebx,eax
c0006073:	89 d8                	mov    eax,ebx
c0006075:	74 ba                	je     c0006031 <strnicmp+0xd>
c0006077:	eb 02                	jmp    c000607b <strnicmp+0x57>
c0006079:	31 c0                	xor    eax,eax
c000607b:	83 c4 0c             	add    esp,0xc
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	5d                   	pop    ebp
c0006082:	c3                   	ret    

c0006083 <find_object>:
c0006083:	55                   	push   ebp
c0006084:	57                   	push   edi
c0006085:	89 c7                	mov    edi,eax
c0006087:	56                   	push   esi
c0006088:	53                   	push   ebx
c0006089:	89 d3                	mov    ebx,edx
c000608b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006091:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006098:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000609f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00060a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00060a7:	74 0b                	je     c00060b4 <find_object+0x31>
c00060a9:	89 fa                	mov    edx,edi
c00060ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060af:	e8 90 fc ff ff       	call   c0005d44 <utf2ucs>
c00060b4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060c0:	7e 11                	jle    c00060d3 <find_object+0x50>
c00060c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c6:	e8 47 ff ff ff       	call   c0006012 <biread>
c00060cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060cf:	85 c0                	test   eax,eax
c00060d1:	79 07                	jns    c00060da <find_object+0x57>
c00060d3:	31 db                	xor    ebx,ebx
c00060d5:	e9 53 01 00 00       	jmp    c000622d <find_object+0x1aa>
c00060da:	31 ed                	xor    ebp,ebp
c00060dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060e0:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e7:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00060eb:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00060ee:	89 f0                	mov    eax,esi
c00060f0:	84 c0                	test   al,al
c00060f2:	75 0e                	jne    c0006102 <find_object+0x7f>
c00060f4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00060f8:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006100:	eb b9                	jmp    c00060bb <find_object+0x38>
c0006102:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006106:	8b 0d b4 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eb4
c000610c:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0006110:	85 c9                	test   ecx,ecx
c0006112:	74 2b                	je     c000613f <find_object+0xbc>
c0006114:	89 d1                	mov    ecx,edx
c0006116:	8d 43 21             	lea    eax,[ebx+0x21]
c0006119:	8d 54 24 20          	lea    edx,[esp+0x20]
c000611d:	e8 0f fd ff ff       	call   c0005e31 <ucscompare>
c0006122:	85 c0                	test   eax,eax
c0006124:	0f 84 d5 00 00 00    	je     c00061ff <find_object+0x17c>
c000612a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000612d:	01 c5                	add    ebp,eax
c000612f:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006135:	7f bd                	jg     c00060f4 <find_object+0x71>
c0006137:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c000613b:	7f 9f                	jg     c00060dc <find_object+0x59>
c000613d:	eb b5                	jmp    c00060f4 <find_object+0x71>
c000613f:	89 f0                	mov    eax,esi
c0006141:	0f b6 f0             	movzx  esi,al
c0006144:	29 d6                	sub    esi,edx
c0006146:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000614a:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000614f:	74 05                	je     c0006156 <find_object+0xd3>
c0006151:	83 ee 21             	sub    esi,0x21
c0006154:	eb 6a                	jmp    c00061c0 <find_object+0x13d>
c0006156:	42                   	inc    edx
c0006157:	83 ee 22             	sub    esi,0x22
c000615a:	eb 64                	jmp    c00061c0 <find_object+0x13d>
c000615c:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000615f:	48                   	dec    eax
c0006160:	3c 01                	cmp    al,0x1
c0006162:	77 61                	ja     c00061c5 <find_object+0x142>
c0006164:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006168:	50                   	push   eax
c0006169:	6a 02                	push   0x2
c000616b:	68 3d f3 01 c0       	push   0xc001f33d
c0006170:	52                   	push   edx
c0006171:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006175:	e8 46 a6 ff ff       	call   c00007c0 <strncmp>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006181:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006185:	85 c0                	test   eax,eax
c0006187:	75 2f                	jne    c00061b8 <find_object+0x135>
c0006189:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000618d:	50                   	push   eax
c000618e:	8d 42 05             	lea    eax,[edx+0x5]
c0006191:	83 e9 05             	sub    ecx,0x5
c0006194:	51                   	push   ecx
c0006195:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006199:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000619d:	50                   	push   eax
c000619e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061a2:	50                   	push   eax
c00061a3:	e8 08 a5 ff ff       	call   c00006b0 <strncpy>
c00061a8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00061ac:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00061b1:	83 c4 10             	add    esp,0x10
c00061b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b8:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00061bc:	29 c6                	sub    esi,eax
c00061be:	01 c2                	add    edx,eax
c00061c0:	83 fe 03             	cmp    esi,0x3
c00061c3:	7f 97                	jg     c000615c <find_object+0xd9>
c00061c5:	85 c9                	test   ecx,ecx
c00061c7:	7e 40                	jle    c0006209 <find_object+0x186>
c00061c9:	51                   	push   ecx
c00061ca:	51                   	push   ecx
c00061cb:	6a 2f                	push   0x2f
c00061cd:	57                   	push   edi
c00061ce:	e8 bd a5 ff ff       	call   c0000790 <strchr>
c00061d3:	83 c4 10             	add    esp,0x10
c00061d6:	85 c0                	test   eax,eax
c00061d8:	74 04                	je     c00061de <find_object+0x15b>
c00061da:	29 f8                	sub    eax,edi
c00061dc:	eb 0c                	jmp    c00061ea <find_object+0x167>
c00061de:	83 ec 0c             	sub    esp,0xc
c00061e1:	57                   	push   edi
c00061e2:	e8 c9 a3 ff ff       	call   c00005b0 <strlen>
c00061e7:	83 c4 10             	add    esp,0x10
c00061ea:	52                   	push   edx
c00061eb:	50                   	push   eax
c00061ec:	57                   	push   edi
c00061ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061f1:	50                   	push   eax
c00061f2:	e8 2d fe ff ff       	call   c0006024 <strnicmp>
c00061f7:	83 c4 10             	add    esp,0x10
c00061fa:	e9 23 ff ff ff       	jmp    c0006122 <find_object+0x9f>
c00061ff:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006203:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006207:	eb 1e                	jmp    c0006227 <find_object+0x1a4>
c0006209:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000620d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006210:	89 f9                	mov    ecx,edi
c0006212:	e8 99 fc ff ff       	call   c0005eb0 <fncompare>
c0006217:	85 c0                	test   eax,eax
c0006219:	0f 85 0b ff ff ff    	jne    c000612a <find_object+0xa7>
c000621f:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006223:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006227:	0f 85 fd fe ff ff    	jne    c000612a <find_object+0xa7>
c000622d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006233:	89 d8                	mov    eax,ebx
c0006235:	5b                   	pop    ebx
c0006236:	5e                   	pop    esi
c0006237:	5f                   	pop    edi
c0006238:	5d                   	pop    ebp
c0006239:	c3                   	ret    

c000623a <find_object_path>:
c000623a:	55                   	push   ebp
c000623b:	57                   	push   edi
c000623c:	89 d7                	mov    edi,edx
c000623e:	56                   	push   esi
c000623f:	89 c6                	mov    esi,eax
c0006241:	53                   	push   ebx
c0006242:	89 cb                	mov    ebx,ecx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	50                   	push   eax
c0006249:	6a 2f                	push   0x2f
c000624b:	56                   	push   esi
c000624c:	e8 3f a5 ff ff       	call   c0000790 <strchr>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	89 c5                	mov    ebp,eax
c0006256:	85 c0                	test   eax,eax
c0006258:	74 3a                	je     c0006294 <find_object_path+0x5a>
c000625a:	39 ee                	cmp    esi,ebp
c000625c:	74 31                	je     c000628f <find_object_path+0x55>
c000625e:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006261:	e8 ad fb ff ff       	call   c0005e13 <iso_733>
c0006266:	89 c2                	mov    edx,eax
c0006268:	8d 43 02             	lea    eax,[ebx+0x2]
c000626b:	e8 a3 fb ff ff       	call   c0005e13 <iso_733>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	52                   	push   edx
c0006274:	89 c1                	mov    ecx,eax
c0006276:	ba 01 00 00 00       	mov    edx,0x1
c000627b:	89 f0                	mov    eax,esi
c000627d:	e8 01 fe ff ff       	call   c0006083 <find_object>
c0006282:	83 c4 10             	add    esp,0x10
c0006285:	89 c3                	mov    ebx,eax
c0006287:	85 c0                	test   eax,eax
c0006289:	75 04                	jne    c000628f <find_object_path+0x55>
c000628b:	31 db                	xor    ebx,ebx
c000628d:	eb 36                	jmp    c00062c5 <find_object_path+0x8b>
c000628f:	8d 75 01             	lea    esi,[ebp+0x1]
c0006292:	eb b3                	jmp    c0006247 <find_object_path+0xd>
c0006294:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006297:	74 28                	je     c00062c1 <find_object_path+0x87>
c0006299:	8d 43 0a             	lea    eax,[ebx+0xa]
c000629c:	e8 72 fb ff ff       	call   c0005e13 <iso_733>
c00062a1:	89 c2                	mov    edx,eax
c00062a3:	8d 43 02             	lea    eax,[ebx+0x2]
c00062a6:	e8 68 fb ff ff       	call   c0005e13 <iso_733>
c00062ab:	83 ec 0c             	sub    esp,0xc
c00062ae:	52                   	push   edx
c00062af:	89 c1                	mov    ecx,eax
c00062b1:	89 fa                	mov    edx,edi
c00062b3:	89 f0                	mov    eax,esi
c00062b5:	e8 c9 fd ff ff       	call   c0006083 <find_object>
c00062ba:	83 c4 10             	add    esp,0x10
c00062bd:	89 c3                	mov    ebx,eax
c00062bf:	eb 04                	jmp    c00062c5 <find_object_path+0x8b>
c00062c1:	85 ff                	test   edi,edi
c00062c3:	74 c6                	je     c000628b <find_object_path+0x51>
c00062c5:	83 c4 0c             	add    esp,0xc
c00062c8:	89 d8                	mov    eax,ebx
c00062ca:	5b                   	pop    ebx
c00062cb:	5e                   	pop    esi
c00062cc:	5f                   	pop    edi
c00062cd:	5d                   	pop    ebp
c00062ce:	c3                   	ret    

c00062cf <stricmp>:
c00062cf:	57                   	push   edi
c00062d0:	56                   	push   esi
c00062d1:	31 f6                	xor    esi,esi
c00062d3:	53                   	push   ebx
c00062d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e3:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062e7:	46                   	inc    esi
c00062e8:	50                   	push   eax
c00062e9:	e8 22 a6 ff ff       	call   c0000910 <toupper>
c00062ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f1:	e8 3a a6 ff ff       	call   c0000930 <tolower>
c00062f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f9:	89 c3                	mov    ebx,eax
c00062fb:	e8 10 a6 ff ff       	call   c0000910 <toupper>
c0006300:	89 04 24             	mov    DWORD PTR [esp],eax
c0006303:	e8 28 a6 ff ff       	call   c0000930 <tolower>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	39 c3                	cmp    ebx,eax
c000630d:	75 04                	jne    c0006313 <stricmp+0x44>
c000630f:	85 db                	test   ebx,ebx
c0006311:	75 c1                	jne    c00062d4 <stricmp+0x5>
c0006313:	29 c3                	sub    ebx,eax
c0006315:	89 d8                	mov    eax,ebx
c0006317:	5b                   	pop    ebx
c0006318:	5e                   	pop    esi
c0006319:	5f                   	pop    edi
c000631a:	c3                   	ret    

c000631b <iso_open>:
c000631b:	57                   	push   edi
c000631c:	31 c0                	xor    eax,eax
c000631e:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c0006323:	56                   	push   esi
c0006324:	53                   	push   ebx
c0006325:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000632a:	0f 95 c0             	setne  al
c000632d:	89 c2                	mov    edx,eax
c000632f:	89 c6                	mov    esi,eax
c0006331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006335:	e8 00 ff ff ff       	call   c000623a <find_object_path>
c000633a:	83 ca ff             	or     edx,0xffffffff
c000633d:	85 c0                	test   eax,eax
c000633f:	74 5e                	je     c000639f <iso_open+0x84>
c0006341:	89 c1                	mov    ecx,eax
c0006343:	31 d2                	xor    edx,edx
c0006345:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000634b:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c0006352:	75 42                	jne    c0006396 <iso_open+0x7b>
c0006354:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c000635e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c000636c:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c0006372:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006375:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c000637f:	e8 8f fa ff ff       	call   c0005e13 <iso_733>
c0006384:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c000638e:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c0006394:	eb 09                	jmp    c000639f <iso_open+0x84>
c0006396:	42                   	inc    edx
c0006397:	83 fa 10             	cmp    edx,0x10
c000639a:	75 a9                	jne    c0006345 <iso_open+0x2a>
c000639c:	83 ca ff             	or     edx,0xffffffff
c000639f:	5b                   	pop    ebx
c00063a0:	89 d0                	mov    eax,edx
c00063a2:	5e                   	pop    esi
c00063a3:	5f                   	pop    edi
c00063a4:	c3                   	ret    

c00063a5 <iso_close>:
c00063a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a9:	83 f8 0f             	cmp    eax,0xf
c00063ac:	7f 10                	jg     c00063be <iso_close+0x19>
c00063ae:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063b4:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063be:	e9 62 fb ff ff       	jmp    c0005f25 <bclear_cache>

c00063c3 <iso_read>:
c00063c3:	55                   	push   ebp
c00063c4:	57                   	push   edi
c00063c5:	56                   	push   esi
c00063c6:	53                   	push   ebx
c00063c7:	83 ec 1c             	sub    esp,0x1c
c00063ca:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063ce:	83 fd 0f             	cmp    ebp,0xf
c00063d1:	7e 0a                	jle    c00063dd <iso_read+0x1a>
c00063d3:	83 c8 ff             	or     eax,0xffffffff
c00063d6:	89 c2                	mov    edx,eax
c00063d8:	e9 f4 00 00 00       	jmp    c00064d1 <iso_read+0x10e>
c00063dd:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063e3:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063ea:	74 e7                	je     c00063d3 <iso_read+0x10>
c00063ec:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063f2:	85 d2                	test   edx,edx
c00063f4:	75 dd                	jne    c00063d3 <iso_read+0x10>
c00063f6:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063fb:	0f 84 cd 00 00 00    	je     c00064ce <iso_read+0x10b>
c0006401:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c0006407:	8b 9d 4c 35 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdcab4]
c000640d:	29 c3                	sub    ebx,eax
c000640f:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006413:	89 d9                	mov    ecx,ebx
c0006415:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000641a:	85 c9                	test   ecx,ecx
c000641c:	0f 84 ac 00 00 00    	je     c00064ce <iso_read+0x10b>
c0006422:	89 c6                	mov    esi,eax
c0006424:	bb 00 08 00 00       	mov    ebx,0x800
c0006429:	c1 e8 0b             	shr    eax,0xb
c000642c:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006432:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006438:	29 f3                	sub    ebx,esi
c000643a:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006440:	75 3f                	jne    c0006481 <iso_read+0xbe>
c0006442:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006448:	7e 37                	jle    c0006481 <iso_read+0xbe>
c000644a:	be 20 00 00 00       	mov    esi,0x20
c000644f:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006455:	7f 05                	jg     c000645c <iso_read+0x99>
c0006457:	89 ce                	mov    esi,ecx
c0006459:	c1 fe 0b             	sar    esi,0xb
c000645c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006460:	89 f3                	mov    ebx,esi
c0006462:	52                   	push   edx
c0006463:	c1 e3 0b             	shl    ebx,0xb
c0006466:	56                   	push   esi
c0006467:	50                   	push   eax
c0006468:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000646c:	e8 18 fb ff ff       	call   c0005f89 <isoReadDiscSector>
c0006471:	83 c4 10             	add    esp,0x10
c0006474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006478:	85 c0                	test   eax,eax
c000647a:	7f 3d                	jg     c00064b9 <iso_read+0xf6>
c000647c:	e9 52 ff ff ff       	jmp    c00063d3 <iso_read+0x10>
c0006481:	39 d9                	cmp    ecx,ebx
c0006483:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006487:	0f 4e d9             	cmovle ebx,ecx
c000648a:	e8 8c fb ff ff       	call   c000601b <bdread>
c000648f:	85 c0                	test   eax,eax
c0006491:	0f 88 3c ff ff ff    	js     c00063d3 <iso_read+0x10>
c0006497:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c000649e:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00064a8:	25 ff 07 00 00       	and    eax,0x7ff
c00064ad:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064b1:	89 d9                	mov    ecx,ebx
c00064b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b9:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064bd:	01 da                	add    edx,ebx
c00064bf:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064c5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064c9:	e9 28 ff ff ff       	jmp    c00063f6 <iso_read+0x33>
c00064ce:	89 d0                	mov    eax,edx
c00064d0:	99                   	cdq    
c00064d1:	83 c4 1c             	add    esp,0x1c
c00064d4:	5b                   	pop    ebx
c00064d5:	5e                   	pop    esi
c00064d6:	5f                   	pop    edi
c00064d7:	5d                   	pop    ebp
c00064d8:	c3                   	ret    

c00064d9 <iso_seek>:
c00064d9:	55                   	push   ebp
c00064da:	83 c8 ff             	or     eax,0xffffffff
c00064dd:	57                   	push   edi
c00064de:	89 c2                	mov    edx,eax
c00064e0:	56                   	push   esi
c00064e1:	53                   	push   ebx
c00064e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064e6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064ee:	83 fe 0f             	cmp    esi,0xf
c00064f1:	7f 65                	jg     c0006558 <iso_seek+0x7f>
c00064f3:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f9:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c0006500:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c0006506:	74 50                	je     c0006558 <iso_seek+0x7f>
c0006508:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000650f:	75 47                	jne    c0006558 <iso_seek+0x7f>
c0006511:	83 fb 01             	cmp    ebx,0x1
c0006514:	74 0e                	je     c0006524 <iso_seek+0x4b>
c0006516:	83 fb 02             	cmp    ebx,0x2
c0006519:	74 0e                	je     c0006529 <iso_seek+0x50>
c000651b:	85 db                	test   ebx,ebx
c000651d:	75 39                	jne    c0006558 <iso_seek+0x7f>
c000651f:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006522:	eb 0d                	jmp    c0006531 <iso_seek+0x58>
c0006524:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006527:	eb 08                	jmp    c0006531 <iso_seek+0x58>
c0006529:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000652c:	01 f8                	add    eax,edi
c000652e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006531:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006537:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c000653d:	05 40 35 02 c0       	add    eax,0xc0023540
c0006542:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006545:	76 03                	jbe    c000654a <iso_seek+0x71>
c0006547:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000654a:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006550:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c0006556:	31 d2                	xor    edx,edx
c0006558:	5b                   	pop    ebx
c0006559:	5e                   	pop    esi
c000655a:	5f                   	pop    edi
c000655b:	5d                   	pop    ebp
c000655c:	c3                   	ret    

c000655d <iso_tell>:
c000655d:	53                   	push   ebx
c000655e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006562:	83 c8 ff             	or     eax,0xffffffff
c0006565:	89 c2                	mov    edx,eax
c0006567:	83 f9 0f             	cmp    ecx,0xf
c000656a:	7f 20                	jg     c000658c <iso_tell+0x2f>
c000656c:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006572:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006579:	74 11                	je     c000658c <iso_tell+0x2f>
c000657b:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c0006582:	75 08                	jne    c000658c <iso_tell+0x2f>
c0006584:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c000658a:	31 d2                	xor    edx,edx
c000658c:	5b                   	pop    ebx
c000658d:	c3                   	ret    

c000658e <iso_total>:
c000658e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006592:	83 c8 ff             	or     eax,0xffffffff
c0006595:	83 fa 0f             	cmp    edx,0xf
c0006598:	7f 1e                	jg     c00065b8 <iso_total+0x2a>
c000659a:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00065a0:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c00065a7:	74 0f                	je     c00065b8 <iso_total+0x2a>
c00065a9:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065b0:	75 06                	jne    c00065b8 <iso_total+0x2a>
c00065b2:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b8:	c3                   	ret    

c00065b9 <fn_postprocess>:
c00065b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065bd:	89 d0                	mov    eax,edx
c00065bf:	8a 08                	mov    cl,BYTE PTR [eax]
c00065c1:	84 c9                	test   cl,cl
c00065c3:	74 08                	je     c00065cd <fn_postprocess+0x14>
c00065c5:	80 f9 3b             	cmp    cl,0x3b
c00065c8:	74 03                	je     c00065cd <fn_postprocess+0x14>
c00065ca:	40                   	inc    eax
c00065cb:	eb f2                	jmp    c00065bf <fn_postprocess+0x6>
c00065cd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065d0:	39 d0                	cmp    eax,edx
c00065d2:	76 0a                	jbe    c00065de <fn_postprocess+0x25>
c00065d4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d8:	75 04                	jne    c00065de <fn_postprocess+0x25>
c00065da:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065de:	c3                   	ret    

c00065df <iso_readdir>:
c00065df:	55                   	push   ebp
c00065e0:	57                   	push   edi
c00065e1:	56                   	push   esi
c00065e2:	53                   	push   ebx
c00065e3:	83 ec 1c             	sub    esp,0x1c
c00065e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065ea:	83 fb 0f             	cmp    ebx,0xf
c00065ed:	7f 28                	jg     c0006617 <iso_readdir+0x38>
c00065ef:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065f5:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fc:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c0006602:	74 13                	je     c0006617 <iso_readdir+0x38>
c0006604:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006608:	74 0d                	je     c0006617 <iso_readdir+0x38>
c000660a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006611:	0f 84 b1 00 00 00    	je     c00066c8 <iso_readdir+0xe9>
c0006617:	83 ec 0c             	sub    esp,0xc
c000661a:	68 40 f3 01 c0       	push   0xc001f340
c000661f:	e8 10 27 01 00       	call   c0018d34 <iso_kprintf>
c0006624:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006627:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662d:	e8 1e 27 01 00       	call   c0018d50 <iso_kprintfd>
c0006632:	c7 04 24 45 f3 01 c0 	mov    DWORD PTR [esp],0xc001f345
c0006639:	e8 f6 26 01 00       	call   c0018d34 <iso_kprintf>
c000663e:	5d                   	pop    ebp
c000663f:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c0006645:	e8 06 27 01 00       	call   c0018d50 <iso_kprintfd>
c000664a:	c7 04 24 4b f3 01 c0 	mov    DWORD PTR [esp],0xc001f34b
c0006651:	e8 de 26 01 00       	call   c0018d34 <iso_kprintf>
c0006656:	58                   	pop    eax
c0006657:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c000665d:	e8 ee 26 01 00       	call   c0018d50 <iso_kprintfd>
c0006662:	c7 04 24 51 f3 01 c0 	mov    DWORD PTR [esp],0xc001f351
c0006669:	e8 c6 26 01 00       	call   c0018d34 <iso_kprintf>
c000666e:	58                   	pop    eax
c000666f:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c0006675:	e8 d6 26 01 00       	call   c0018d50 <iso_kprintfd>
c000667a:	83 c4 10             	add    esp,0x10
c000667d:	eb 42                	jmp    c00066c1 <iso_readdir+0xe2>
c000667f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006682:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006689:	89 d1                	mov    ecx,edx
c000668b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006691:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006695:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006698:	75 35                	jne    c00066cf <iso_readdir+0xf0>
c000669a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00066a0:	81 c2 00 08 00 00    	add    edx,0x800
c00066a6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066ac:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066af:	73 1e                	jae    c00066cf <iso_readdir+0xf0>
c00066b1:	89 d0                	mov    eax,edx
c00066b3:	c1 e8 0b             	shr    eax,0xb
c00066b6:	03 07                	add    eax,DWORD PTR [edi]
c00066b8:	e8 55 f9 ff ff       	call   c0006012 <biread>
c00066bd:	85 c0                	test   eax,eax
c00066bf:	79 be                	jns    c000667f <iso_readdir+0xa0>
c00066c1:	31 c0                	xor    eax,eax
c00066c3:	e9 78 01 00 00       	jmp    c0006840 <iso_readdir+0x261>
c00066c8:	31 f6                	xor    esi,esi
c00066ca:	83 c8 ff             	or     eax,0xffffffff
c00066cd:	eb da                	jmp    c00066a9 <iso_readdir+0xca>
c00066cf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066d5:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066db:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066e1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066e4:	73 db                	jae    c00066c1 <iso_readdir+0xe2>
c00066e6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066ea:	75 34                	jne    c0006720 <iso_readdir+0x141>
c00066ec:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066f0:	75 2e                	jne    c0006720 <iso_readdir+0x141>
c00066f2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066f5:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066fc:	01 f9                	add    ecx,edi
c00066fe:	89 c8                	mov    eax,ecx
c0006700:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006703:	25 ff 07 00 00       	and    eax,0x7ff
c0006708:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000670d:	01 c8                	add    eax,ecx
c000670f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006712:	25 ff 07 00 00       	and    eax,0x7ff
c0006717:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000671b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000671e:	74 a1                	je     c00066c1 <iso_readdir+0xe2>
c0006720:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006726:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000672a:	8d 56 21             	lea    edx,[esi+0x21]
c000672d:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006734:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006738:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000673e:	74 0c                	je     c000674c <iso_readdir+0x16d>
c0006740:	89 e8                	mov    eax,ebp
c0006742:	e8 1f f6 ff ff       	call   c0005d66 <ucs2utfn>
c0006747:	e9 aa 00 00 00       	jmp    c00067f6 <iso_readdir+0x217>
c000674c:	57                   	push   edi
c000674d:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006753:	51                   	push   ecx
c0006754:	52                   	push   edx
c0006755:	55                   	push   ebp
c0006756:	e8 55 9f ff ff       	call   c00006b0 <strncpy>
c000675b:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000675f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006762:	c6 84 07 58 35 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdcaa8],0x0
c000676a:	e8 4a fe ff ff       	call   c00065b9 <fn_postprocess>
c000676f:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006773:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006776:	83 c4 10             	add    esp,0x10
c0006779:	89 d0                	mov    eax,edx
c000677b:	29 d1                	sub    ecx,edx
c000677d:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006781:	a8 01                	test   al,0x1
c0006783:	74 05                	je     c000678a <iso_readdir+0x1ab>
c0006785:	83 e9 21             	sub    ecx,0x21
c0006788:	eb 04                	jmp    c000678e <iso_readdir+0x1af>
c000678a:	47                   	inc    edi
c000678b:	83 e9 22             	sub    ecx,0x22
c000678e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006798:	83 f9 03             	cmp    ecx,0x3
c000679b:	7e 59                	jle    c00067f6 <iso_readdir+0x217>
c000679d:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00067a0:	48                   	dec    eax
c00067a1:	3c 01                	cmp    al,0x1
c00067a3:	77 51                	ja     c00067f6 <iso_readdir+0x217>
c00067a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067a9:	52                   	push   edx
c00067aa:	6a 02                	push   0x2
c00067ac:	68 3d f3 01 c0       	push   0xc001f33d
c00067b1:	57                   	push   edi
c00067b2:	e8 09 a0 ff ff       	call   c00007c0 <strncmp>
c00067b7:	83 c4 10             	add    esp,0x10
c00067ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00067be:	85 c0                	test   eax,eax
c00067c0:	75 2a                	jne    c00067ec <iso_readdir+0x20d>
c00067c2:	50                   	push   eax
c00067c3:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067c7:	83 e8 05             	sub    eax,0x5
c00067ca:	50                   	push   eax
c00067cb:	8d 47 05             	lea    eax,[edi+0x5]
c00067ce:	50                   	push   eax
c00067cf:	55                   	push   ebp
c00067d0:	e8 db 9e ff ff       	call   c00006b0 <strncpy>
c00067d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00067d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067dd:	83 c4 10             	add    esp,0x10
c00067e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00067e4:	c6 84 10 53 35 02 c0 00 	mov    BYTE PTR [eax+edx*1-0x3ffdcaad],0x0
c00067ec:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067f0:	29 c1                	sub    ecx,eax
c00067f2:	01 c7                	add    edi,eax
c00067f4:	eb a2                	jmp    c0006798 <iso_readdir+0x1b9>
c00067f6:	83 c8 ff             	or     eax,0xffffffff
c00067f9:	c5 f9 6e c0          	vmovd  xmm0,eax
c00067fd:	c4 e3 79 22 c0 01    	vpinsrd xmm0,xmm0,eax,0x1
c0006803:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006807:	75 14                	jne    c000681d <iso_readdir+0x23e>
c0006809:	8d 46 0a             	lea    eax,[esi+0xa]
c000680c:	e8 02 f6 ff ff       	call   c0005e13 <iso_733>
c0006811:	31 d2                	xor    edx,edx
c0006813:	c5 f9 6e c0          	vmovd  xmm0,eax
c0006817:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000681d:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006823:	c5 f9 d6 83 50 35 02 c0 	vmovq  QWORD PTR [ebx-0x3ffdcab0],xmm0
c000682b:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006831:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006834:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006837:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000683b:	05 50 35 02 c0       	add    eax,0xc0023550
c0006840:	83 c4 1c             	add    esp,0x1c
c0006843:	5b                   	pop    ebx
c0006844:	5e                   	pop    esi
c0006845:	5f                   	pop    edi
c0006846:	5d                   	pop    ebp
c0006847:	c3                   	ret    

c0006848 <iso_reset>:
c0006848:	83 ec 18             	sub    esp,0x18
c000684b:	68 5a f3 01 c0       	push   0xc001f35a
c0006850:	e8 df 24 01 00       	call   c0018d34 <iso_kprintf>
c0006855:	e8 03 f7 ff ff       	call   c0005f5d <iso_break_all>
c000685a:	e8 fc f6 ff ff       	call   c0005f5b <bclear>
c000685f:	31 c0                	xor    eax,eax
c0006861:	83 c4 1c             	add    esp,0x1c
c0006864:	c3                   	ret    

c0006865 <init_percd>:
c0006865:	57                   	push   edi
c0006866:	56                   	push   esi
c0006867:	53                   	push   ebx
c0006868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000686c:	bb 01 00 00 00       	mov    ebx,0x1
c0006871:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c0006876:	e8 cd ff ff ff       	call   c0006848 <iso_reset>
c000687b:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c0006885:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c000688a:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c000688e:	e8 7f f7 ff ff       	call   c0006012 <biread>
c0006893:	89 c6                	mov    esi,eax
c0006895:	85 c0                	test   eax,eax
c0006897:	0f 88 ba 00 00 00    	js     c0006957 <init_percd+0xf2>
c000689d:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00068a4:	52                   	push   edx
c00068a5:	6a 06                	push   0x6
c00068a7:	83 c0 04             	add    eax,0x4
c00068aa:	68 65 f3 01 c0       	push   0xc001f365
c00068af:	50                   	push   eax
c00068b0:	e8 cb 9a ff ff       	call   c0000380 <memcmp>
c00068b5:	83 c4 10             	add    esp,0x10
c00068b8:	85 c0                	test   eax,eax
c00068ba:	74 08                	je     c00068c4 <init_percd+0x5f>
c00068bc:	43                   	inc    ebx
c00068bd:	83 fb 04             	cmp    ebx,0x4
c00068c0:	75 c3                	jne    c0006885 <init_percd+0x20>
c00068c2:	eb 1a                	jmp    c00068de <init_percd+0x79>
c00068c4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068cb:	83 c0 5c             	add    eax,0x5c
c00068ce:	e8 11 f5 ff ff       	call   c0005de4 <isjoliet>
c00068d3:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068d8:	85 c0                	test   eax,eax
c00068da:	74 e0                	je     c00068bc <init_percd+0x57>
c00068dc:	eb 3e                	jmp    c000691c <init_percd+0xb7>
c00068de:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068e5:	75 35                	jne    c000691c <init_percd+0xb7>
c00068e7:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068ec:	83 c0 10             	add    eax,0x10
c00068ef:	e8 1e f7 ff ff       	call   c0006012 <biread>
c00068f4:	89 c6                	mov    esi,eax
c00068f6:	85 c0                	test   eax,eax
c00068f8:	78 5f                	js     c0006959 <init_percd+0xf4>
c00068fa:	50                   	push   eax
c00068fb:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c0006902:	83 cb ff             	or     ebx,0xffffffff
c0006905:	6a 06                	push   0x6
c0006907:	83 c0 04             	add    eax,0x4
c000690a:	68 6c f3 01 c0       	push   0xc001f36c
c000690f:	50                   	push   eax
c0006910:	e8 6b 9a ff ff       	call   c0000380 <memcmp>
c0006915:	83 c4 10             	add    esp,0x10
c0006918:	85 c0                	test   eax,eax
c000691a:	75 3d                	jne    c0006959 <init_percd+0xf4>
c000691c:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006923:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c0006928:	b9 22 00 00 00       	mov    ecx,0x22
c000692d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006933:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006935:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c000693a:	31 db                	xor    ebx,ebx
c000693c:	e8 d2 f4 ff ff       	call   c0005e13 <iso_733>
c0006941:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0006946:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c000694b:	e8 c3 f4 ff ff       	call   c0005e13 <iso_733>
c0006950:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0006955:	eb 02                	jmp    c0006959 <init_percd+0xf4>
c0006957:	89 c3                	mov    ebx,eax
c0006959:	89 d8                	mov    eax,ebx
c000695b:	5b                   	pop    ebx
c000695c:	5e                   	pop    esi
c000695d:	5f                   	pop    edi
c000695e:	c3                   	ret    

c000695f <iso_ioctl>:
c000695f:	83 ec 18             	sub    esp,0x18
c0006962:	68 73 f3 01 c0       	push   0xc001f373
c0006967:	e8 c8 23 01 00       	call   c0018d34 <iso_kprintf>
c000696c:	e8 d7 fe ff ff       	call   c0006848 <iso_reset>
c0006971:	31 c0                	xor    eax,eax
c0006973:	83 c4 1c             	add    esp,0x1c
c0006976:	c3                   	ret    

c0006977 <fs_iso9660_init>:
c0006977:	53                   	push   ebx
c0006978:	31 db                	xor    ebx,ebx
c000697a:	83 ec 14             	sub    esp,0x14
c000697d:	68 7e f3 01 c0       	push   0xc001f37e
c0006982:	e8 ad 23 01 00       	call   c0018d34 <iso_kprintf>
c0006987:	83 c4 0c             	add    esp,0xc
c000698a:	68 40 09 00 00       	push   0x940
c000698f:	6a 00                	push   0x0
c0006991:	68 40 35 02 c0       	push   0xc0023540
c0006996:	e8 e5 9b ff ff       	call   c0000580 <memset>
c000699b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069a2:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c00069ac:	e8 ca 0e 00 00       	call   c000787b <malloc>
c00069b1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069b8:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069bd:	e8 b9 0e 00 00       	call   c000787b <malloc>
c00069c2:	83 c4 10             	add    esp,0x10
c00069c5:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069ca:	83 ec 0c             	sub    esp,0xc
c00069cd:	68 04 08 00 00       	push   0x804
c00069d2:	e8 a4 0e 00 00       	call   c000787b <malloc>
c00069d7:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069de:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e4:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069eb:	e8 8b 0e 00 00       	call   c000787b <malloc>
c00069f0:	83 c4 10             	add    esp,0x10
c00069f3:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069fa:	43                   	inc    ebx
c00069fb:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006a01:	83 fb 10             	cmp    ebx,0x10
c0006a04:	75 c4                	jne    c00069ca <fs_iso9660_init+0x53>
c0006a06:	83 c4 08             	add    esp,0x8
c0006a09:	31 c0                	xor    eax,eax
c0006a0b:	5b                   	pop    ebx
c0006a0c:	c3                   	ret    

c0006a0d <fs_iso9660_shutdown>:
c0006a0d:	53                   	push   ebx
c0006a0e:	31 db                	xor    ebx,ebx
c0006a10:	83 ec 08             	sub    esp,0x8
c0006a13:	83 ec 0c             	sub    esp,0xc
c0006a16:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a1d:	e8 69 0e 00 00       	call   c000788b <free>
c0006a22:	58                   	pop    eax
c0006a23:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a2a:	43                   	inc    ebx
c0006a2b:	e8 5b 0e 00 00       	call   c000788b <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	83 fb 10             	cmp    ebx,0x10
c0006a36:	75 db                	jne    c0006a13 <fs_iso9660_shutdown+0x6>
c0006a38:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a3d:	85 c0                	test   eax,eax
c0006a3f:	74 0c                	je     c0006a4d <fs_iso9660_shutdown+0x40>
c0006a41:	83 ec 0c             	sub    esp,0xc
c0006a44:	50                   	push   eax
c0006a45:	e8 41 0e 00 00       	call   c000788b <free>
c0006a4a:	83 c4 10             	add    esp,0x10
c0006a4d:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a52:	85 c0                	test   eax,eax
c0006a54:	74 0c                	je     c0006a62 <fs_iso9660_shutdown+0x55>
c0006a56:	83 ec 0c             	sub    esp,0xc
c0006a59:	50                   	push   eax
c0006a5a:	e8 2c 0e 00 00       	call   c000788b <free>
c0006a5f:	83 c4 10             	add    esp,0x10
c0006a62:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a6c:	31 c0                	xor    eax,eax
c0006a6e:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a78:	83 c4 08             	add    esp,0x8
c0006a7b:	5b                   	pop    ebx
c0006a7c:	c3                   	ret    
c0006a7d:	90                   	nop

c0006a7e <Computer::close(int, int, void*)>:
c0006a7e:	57                   	push   edi
c0006a7f:	56                   	push   esi
c0006a80:	53                   	push   ebx
c0006a81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a8d:	83 ec 0c             	sub    esp,0xc
c0006a90:	ff b3 68 01 00 00    	push   DWORD PTR [ebx+0x168]
c0006a96:	e8 3b 51 00 00       	call   c000bbd6 <Device::closeAll()>
c0006a9b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006aa1:	83 c4 10             	add    esp,0x10
c0006aa4:	8b 10                	mov    edx,DWORD PTR [eax]
c0006aa6:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006aaa:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006ab2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006ab6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aba:	5b                   	pop    ebx
c0006abb:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006abe:	5e                   	pop    esi
c0006abf:	5f                   	pop    edi
c0006ac0:	ff e0                	jmp    eax

c0006ac2 <Krnl::firstTask()>:
c0006ac2:	53                   	push   ebx
c0006ac3:	83 ec 14             	sub    esp,0x14
c0006ac6:	fb                   	sti    
c0006ac7:	68 8f f3 01 c0       	push   0xc001f38f
c0006acc:	e8 48 93 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006ad1:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ad8:	e8 9e 0d 00 00       	call   c000787b <malloc>
c0006add:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ae4:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0006aea:	89 c3                	mov    ebx,eax
c0006aec:	68 a8 f3 01 c0       	push   0xc001f3a8
c0006af1:	6a 01                	push   0x1
c0006af3:	50                   	push   eax
c0006af4:	e8 7b dd 00 00       	call   c0014874 <Process::Process(bool, char const*, Process*, char**)>
c0006af9:	83 c4 20             	add    esp,0x20
c0006afc:	68 ff 00 00 00       	push   0xff
c0006b01:	6a 00                	push   0x0
c0006b03:	68 d9 72 00 c0       	push   0xc00072d9
c0006b08:	53                   	push   ebx
c0006b09:	e8 8a df 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c0006b0e:	6a 7a                	push   0x7a
c0006b10:	6a 00                	push   0x0
c0006b12:	68 c0 54 01 c0       	push   0xc00154c0
c0006b17:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0006b1d:	e8 76 df 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c0006b22:	83 c4 20             	add    esp,0x20
c0006b25:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b2c:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b31:	e8 41 9b 00 00       	call   c0010677 <KeInitRand()>
c0006b36:	83 ec 0c             	sub    esp,0xc
c0006b39:	68 a4 f4 01 c0       	push   0xc001f4a4
c0006b3e:	e8 d6 92 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006b43:	e8 55 ed 00 00       	call   c001589d <Vm::initialise8086()>
c0006b48:	e8 b1 3e 00 00       	call   c000a9fe <Fs::initVFS()>
c0006b4d:	c7 04 24 b5 f3 01 c0 	mov    DWORD PTR [esp],0xc001f3b5
c0006b54:	e8 c0 92 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006b59:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b5e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b64:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b66:	6a 00                	push   0x0
c0006b68:	6a 00                	push   0x0
c0006b6a:	6a 00                	push   0x0
c0006b6c:	50                   	push   eax
c0006b6d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b70:	83 c4 14             	add    esp,0x14
c0006b73:	68 a4 f4 01 c0       	push   0xc001f4a4
c0006b78:	e8 9c 92 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006b7d:	e8 70 97 00 00       	call   c00102f2 <Krnl::loadSystemEnv()>
c0006b82:	e8 fb 99 00 00       	call   c0010582 <Krnl::setupPowerManager()>
c0006b87:	83 c4 0c             	add    esp,0xc
c0006b8a:	6a 3a                	push   0x3a
c0006b8c:	68 cf f3 01 c0       	push   0xc001f3cf
c0006b91:	68 d8 f3 01 c0       	push   0xc001f3d8
c0006b96:	e8 ee bf 00 00       	call   c0012b89 <Reg::readIntWithDefault(char*, char*, int)>
c0006b9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b9e:	e8 5d 49 00 00       	call   c000b500 <User::loadClockSettings(int)>
c0006ba3:	c7 04 24 c8 f4 01 c0 	mov    DWORD PTR [esp],0xc001f4c8
c0006baa:	e8 6a 92 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006baf:	58                   	pop    eax
c0006bb0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006bb5:	ff b0 68 01 00 00    	push   DWORD PTR [eax+0x168]
c0006bbb:	e8 14 50 00 00       	call   c000bbd4 <Device::loadDriversForAll()>
c0006bc0:	c7 04 24 e0 f3 01 c0 	mov    DWORD PTR [esp],0xc001f3e0
c0006bc7:	e8 4d 92 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006bcc:	5a                   	pop    edx
c0006bcd:	59                   	pop    ecx
c0006bce:	6a 01                	push   0x1
c0006bd0:	68 f1 f3 01 c0       	push   0xc001f3f1
c0006bd5:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bdb:	e8 bd d6 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c0006be0:	5a                   	pop    edx
c0006be1:	59                   	pop    ecx
c0006be2:	53                   	push   ebx
c0006be3:	50                   	push   eax
c0006be4:	e8 f4 d8 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	83 ec 0c             	sub    esp,0xc
c0006bef:	6a 02                	push   0x2
c0006bf1:	e8 ba e2 00 00       	call   c0014eb0 <blockTask(TaskState)>
c0006bf6:	83 c4 10             	add    esp,0x10
c0006bf9:	eb f1                	jmp    c0006bec <Krnl::firstTask()+0x12a>
c0006bfb:	90                   	nop

c0006bfc <Computer::Computer()>:
c0006bfc:	83 ec 0c             	sub    esp,0xc
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	83 ec 08             	sub    esp,0x8
c0006c06:	68 0d f4 01 c0       	push   0xc001f40d
c0006c0b:	50                   	push   eax
c0006c0c:	e8 3f 50 00 00       	call   c000bc50 <Device::Device(char const*)>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	ba 14 f5 01 c0       	mov    edx,0xc001f514
c0006c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1d:	89 10                	mov    DWORD PTR [eax],edx
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c31:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c45:	83 ca 04             	or     edx,0x4
c0006c48:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c58:	0f b6 c0             	movzx  eax,al
c0006c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c5f:	66 c7 44 82 04 70 00 	mov    WORD PTR [edx+eax*4+0x4],0x70
c0006c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c70:	0f b6 c0             	movzx  eax,al
c0006c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c77:	c6 44 82 06 02       	mov    BYTE PTR [edx+eax*4+0x6],0x2
c0006c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c86:	8d 50 01             	lea    edx,[eax+0x1]
c0006c89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c8d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c93:	0f b6 c0             	movzx  eax,al
c0006c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9a:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c0006c9e:	83 e1 3f             	and    ecx,0x3f
c0006ca1:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c0006ca5:	90                   	nop
c0006ca6:	83 c4 0c             	add    esp,0xc
c0006ca9:	c3                   	ret    

c0006caa <Computer::setBootMessage(char const*)>:
c0006caa:	c3                   	ret    
c0006cab:	90                   	nop

c0006cac <Computer::detectFeatures()>:
c0006cac:	55                   	push   ebp
c0006cad:	57                   	push   edi
c0006cae:	56                   	push   esi
c0006caf:	53                   	push   ebx
c0006cb0:	83 ec 1c             	sub    esp,0x1c
c0006cb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006cb7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cc1:	e8 33 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cc6:	85 c0                	test   eax,eax
c0006cc8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cce:	0f 95 c2             	setne  dl
c0006cd1:	01 d2                	add    edx,edx
c0006cd3:	83 e0 fd             	and    eax,0xfffffffd
c0006cd6:	09 d0                	or     eax,edx
c0006cd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cde:	a8 02                	test   al,0x2
c0006ce0:	75 46                	jne    c0006d28 <Computer::detectFeatures()+0x7c>
c0006ce2:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ce9:	74 07                	je     c0006cf2 <Computer::detectFeatures()+0x46>
c0006ceb:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cf2:	e8 8f 6f 01 00       	call   c001dc86 <x87Detect>
c0006cf7:	83 e0 01             	and    eax,0x1
c0006cfa:	c1 e0 04             	shl    eax,0x4
c0006cfd:	88 c2                	mov    dl,al
c0006cff:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d05:	83 e0 ef             	and    eax,0xffffffef
c0006d08:	09 d0                	or     eax,edx
c0006d0a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d10:	a8 10                	test   al,0x10
c0006d12:	0f 85 2b 01 00 00    	jne    c0006e43 <Computer::detectFeatures()+0x197>
c0006d18:	84 c0                	test   al,al
c0006d1a:	0f 88 46 01 00 00    	js     c0006e66 <Computer::detectFeatures()+0x1ba>
c0006d20:	83 c4 1c             	add    esp,0x1c
c0006d23:	5b                   	pop    ebx
c0006d24:	5e                   	pop    esi
c0006d25:	5f                   	pop    edi
c0006d26:	5d                   	pop    ebp
c0006d27:	c3                   	ret    
c0006d28:	83 ec 0c             	sub    esp,0xc
c0006d2b:	6a 20                	push   0x20
c0006d2d:	e8 14 86 00 00       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c0006d32:	83 e0 01             	and    eax,0x1
c0006d35:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d3c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d42:	83 e0 f7             	and    eax,0xfffffff7
c0006d45:	09 d0                	or     eax,edx
c0006d47:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d4d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d54:	e8 ed 85 00 00       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c0006d59:	83 e0 01             	and    eax,0x1
c0006d5c:	88 c2                	mov    dl,al
c0006d5e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d64:	83 e0 fe             	and    eax,0xfffffffe
c0006d67:	09 d0                	or     eax,edx
c0006d69:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d6f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d76:	e8 cb 85 00 00       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c0006d7b:	c1 e0 07             	shl    eax,0x7
c0006d7e:	88 c2                	mov    dl,al
c0006d80:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d86:	83 e0 7f             	and    eax,0x7f
c0006d89:	09 d0                	or     eax,edx
c0006d8b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d91:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d98:	e8 a9 85 00 00       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c0006d9d:	83 c4 10             	add    esp,0x10
c0006da0:	83 e0 01             	and    eax,0x1
c0006da3:	c1 e0 05             	shl    eax,0x5
c0006da6:	88 c2                	mov    dl,al
c0006da8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dae:	83 e0 df             	and    eax,0xffffffdf
c0006db1:	09 d0                	or     eax,edx
c0006db3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db9:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006dc3:	0f 84 c3 00 00 00    	je     c0006e8c <Computer::detectFeatures()+0x1e0>
c0006dc9:	83 e0 fe             	and    eax,0xfffffffe
c0006dcc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dd2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	83 e2 09             	and    edx,0x9
c0006ddd:	80 fa 01             	cmp    dl,0x1
c0006de0:	75 09                	jne    c0006deb <Computer::detectFeatures()+0x13f>
c0006de2:	83 e0 fe             	and    eax,0xfffffffe
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006df2:	50                   	push   eax
c0006df3:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006df7:	55                   	push   ebp
c0006df8:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006dfc:	57                   	push   edi
c0006dfd:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006e01:	56                   	push   esi
c0006e02:	68 00 00 00 80       	push   0x80000000
c0006e07:	e8 b6 84 00 00       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e0c:	83 c4 20             	add    esp,0x20
c0006e0f:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e1a:	0f 86 c2 fe ff ff    	jbe    c0006ce2 <Computer::detectFeatures()+0x36>
c0006e20:	83 ec 0c             	sub    esp,0xc
c0006e23:	50                   	push   eax
c0006e24:	55                   	push   ebp
c0006e25:	57                   	push   edi
c0006e26:	56                   	push   esi
c0006e27:	68 01 00 00 80       	push   0x80000001
c0006e2c:	e8 91 84 00 00       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e31:	83 c4 20             	add    esp,0x20
c0006e34:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e3e:	e9 9f fe ff ff       	jmp    c0006ce2 <Computer::detectFeatures()+0x36>
c0006e43:	e8 f8 6d 01 00       	call   c001dc40 <absolutelyNoChanceInHell>
c0006e48:	88 c2                	mov    dl,al
c0006e4a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e50:	c1 e2 07             	shl    edx,0x7
c0006e53:	83 e0 7f             	and    eax,0x7f
c0006e56:	09 d0                	or     eax,edx
c0006e58:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e5e:	84 c0                	test   al,al
c0006e60:	0f 89 ba fe ff ff    	jns    c0006d20 <Computer::detectFeatures()+0x74>
c0006e66:	e8 45 6a 01 00       	call   c001d8b0 <avxDetect>
c0006e6b:	83 e0 01             	and    eax,0x1
c0006e6e:	c1 e0 05             	shl    eax,0x5
c0006e71:	88 c2                	mov    dl,al
c0006e73:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e79:	83 e0 df             	and    eax,0xffffffdf
c0006e7c:	09 d0                	or     eax,edx
c0006e7e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e84:	83 c4 1c             	add    esp,0x1c
c0006e87:	5b                   	pop    ebx
c0006e88:	5e                   	pop    esi
c0006e89:	5f                   	pop    edi
c0006e8a:	5d                   	pop    ebp
c0006e8b:	c3                   	ret    
c0006e8c:	83 ec 0c             	sub    esp,0xc
c0006e8f:	68 00 02 00 00       	push   0x200
c0006e94:	e8 ad 84 00 00       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c0006e99:	83 c4 10             	add    esp,0x10
c0006e9c:	83 e0 01             	and    eax,0x1
c0006e9f:	88 c2                	mov    dl,al
c0006ea1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ea7:	83 e0 fe             	and    eax,0xfffffffe
c0006eaa:	09 d0                	or     eax,edx
c0006eac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eb2:	e9 1b ff ff ff       	jmp    c0006dd2 <Computer::detectFeatures()+0x126>
c0006eb7:	90                   	nop

c0006eb8 <Computer::displayFeatures()>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::rdmsr(unsigned int)>:
c0006eba:	83 ec 0c             	sub    esp,0xc
c0006ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ec8:	74 0a                	je     c0006ed4 <Computer::rdmsr(unsigned int)+0x1a>
c0006eca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ece:	0f 32                	rdmsr  
c0006ed0:	83 c4 0c             	add    esp,0xc
c0006ed3:	c3                   	ret    
c0006ed4:	83 ec 0c             	sub    esp,0xc
c0006ed7:	68 16 f4 01 c0       	push   0xc001f416
c0006edc:	e8 dc 95 00 00       	call   c00104bd <KePanic(char const*)>
c0006ee1:	83 c4 10             	add    esp,0x10
c0006ee4:	eb e4                	jmp    c0006eca <Computer::rdmsr(unsigned int)+0x10>

c0006ee6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ee6:	57                   	push   edi
c0006ee7:	56                   	push   esi
c0006ee8:	83 ec 04             	sub    esp,0x4
c0006eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ef3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ef7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006efe:	74 10                	je     c0006f10 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0006f00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	89 fa                	mov    edx,edi
c0006f08:	0f 30                	wrmsr  
c0006f0a:	83 c4 04             	add    esp,0x4
c0006f0d:	5e                   	pop    esi
c0006f0e:	5f                   	pop    edi
c0006f0f:	c3                   	ret    
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	68 1c f4 01 c0       	push   0xc001f41c
c0006f18:	e8 a0 95 00 00       	call   c00104bd <KePanic(char const*)>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	eb de                	jmp    c0006f00 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0006f22 <Computer::shutdown()>:
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f29:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f2b:	6a 00                	push   0x0
c0006f2d:	6a 00                	push   0x0
c0006f2f:	6a 00                	push   0x0
c0006f31:	50                   	push   eax
c0006f32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f35:	83 c4 1c             	add    esp,0x1c
c0006f38:	c3                   	ret    
c0006f39:	90                   	nop

c0006f3a <Computer::restart()>:
c0006f3a:	83 ec 0c             	sub    esp,0xc
c0006f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f41:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f43:	6a 00                	push   0x0
c0006f45:	6a 00                	push   0x0
c0006f47:	6a 01                	push   0x1
c0006f49:	50                   	push   eax
c0006f4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f4d:	83 c4 1c             	add    esp,0x1c
c0006f50:	c3                   	ret    
c0006f51:	90                   	nop

c0006f52 <Computer::sleep()>:
c0006f52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f56:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f60:	e9 13 7e 00 00       	jmp    c000ed78 <ACPI::sleep()>
c0006f65:	90                   	nop

c0006f66 <Computer::nmiEnabled()>:
c0006f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f6a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f70:	c3                   	ret    
c0006f71:	90                   	nop

c0006f72 <Computer::readCMOS(unsigned char)>:
c0006f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f76:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f7d:	19 c0                	sbb    eax,eax
c0006f7f:	83 e0 80             	and    eax,0xffffff80
c0006f82:	0a 44 24 08          	or     al,BYTE PTR [esp+0x8]
c0006f86:	e6 70                	out    0x70,al
c0006f88:	e4 71                	in     al,0x71
c0006f8a:	c3                   	ret    
c0006f8b:	90                   	nop

c0006f8c <Computer::enableNMI(bool)>:
c0006f8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f94:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f9a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006fa2:	eb ce                	jmp    c0006f72 <Computer::readCMOS(unsigned char)>

c0006fa4 <Computer::open(int, int, void*)>:
c0006fa4:	56                   	push   esi
c0006fa5:	53                   	push   ebx
c0006fa6:	83 ec 10             	sub    esp,0x10
c0006fa9:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006fb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006fb4:	68 22 f4 01 c0       	push   0xc001f422
c0006fb9:	0f 94 05 e0 18 02 c0 	sete   BYTE PTR ds:0xc00218e0
c0006fc0:	e8 54 8e 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0006fc5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fcc:	e8 aa 08 00 00       	call   c000787b <malloc>
c0006fd1:	89 c6                	mov    esi,eax
c0006fd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fd6:	e8 35 79 00 00       	call   c000e910 <ACPI::ACPI()>
c0006fdb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fe1:	58                   	pop    eax
c0006fe2:	5a                   	pop    edx
c0006fe3:	56                   	push   esi
c0006fe4:	53                   	push   ebx
c0006fe5:	e8 ce 4a 00 00       	call   c000bab8 <Device::addChild(Device*)>
c0006fea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fed:	e8 ba fc ff ff       	call   c0006cac <Computer::detectFeatures()>
c0006ff2:	59                   	pop    ecx
c0006ff3:	5e                   	pop    esi
c0006ff4:	6a 01                	push   0x1
c0006ff6:	53                   	push   ebx
c0006ff7:	e8 90 ff ff ff       	call   c0006f8c <Computer::enableNMI(bool)>
c0006ffc:	c7 04 24 3a f4 01 c0 	mov    DWORD PTR [esp],0xc001f43a
c0007003:	e8 11 8e 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c0007008:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000700f:	e8 67 08 00 00       	call   c000787b <malloc>
c0007014:	89 c6                	mov    esi,eax
c0007016:	89 04 24             	mov    DWORD PTR [esp],eax
c0007019:	e8 e0 83 00 00       	call   c000f3fe <CPU::CPU()>
c000701e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007024:	58                   	pop    eax
c0007025:	5a                   	pop    edx
c0007026:	56                   	push   esi
c0007027:	53                   	push   ebx
c0007028:	e8 8b 4a 00 00       	call   c000bab8 <Device::addChild(Device*)>
c000702d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007033:	8b 10                	mov    edx,DWORD PTR [eax]
c0007035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007039:	6a 00                	push   0x0
c000703b:	6a 00                	push   0x0
c000703d:	50                   	push   eax
c000703e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007041:	83 c4 14             	add    esp,0x14
c0007044:	68 e8 f4 01 c0       	push   0xc001f4e8
c0007049:	e8 cb 8d 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000704e:	e8 c6 f9 00 00       	call   c0016a19 <HalInitialiseCoprocessor()>
c0007053:	c7 04 24 54 f4 01 c0 	mov    DWORD PTR [esp],0xc001f454
c000705a:	e8 ba 8d 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000705f:	c7 04 24 c2 6a 00 c0 	mov    DWORD PTR [esp],0xc0006ac2
c0007066:	e8 3d db 00 00       	call   c0014ba8 <setupMultitasking(void (*)())>
c000706b:	83 c4 14             	add    esp,0x14
c000706e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007073:	5b                   	pop    ebx
c0007074:	5e                   	pop    esi
c0007075:	c3                   	ret    

c0007076 <Computer::disableNMI()>:
c0007076:	6a 00                	push   0x0
c0007078:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000707c:	e8 0b ff ff ff       	call   c0006f8c <Computer::enableNMI(bool)>
c0007081:	58                   	pop    eax
c0007082:	5a                   	pop    edx
c0007083:	c3                   	ret    

c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000708f:	19 c0                	sbb    eax,eax
c0007091:	83 e0 80             	and    eax,0xffffff80
c0007094:	0a 44 24 08          	or     al,BYTE PTR [esp+0x8]
c0007098:	e6 70                	out    0x70,al
c000709a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000709e:	e6 71                	out    0x71,al
c00070a0:	c3                   	ret    
c00070a1:	90                   	nop

c00070a2 <Computer::handleNMI()>:
c00070a2:	56                   	push   esi
c00070a3:	53                   	push   ebx
c00070a4:	83 ec 10             	sub    esp,0x10
c00070a7:	e4 92                	in     al,0x92
c00070a9:	89 c6                	mov    esi,eax
c00070ab:	e4 61                	in     al,0x61
c00070ad:	68 6f f4 01 c0       	push   0xc001f46f
c00070b2:	88 c3                	mov    bl,al
c00070b4:	e8 b0 35 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00070b9:	83 c4 10             	add    esp,0x10
c00070bc:	83 e6 10             	and    esi,0x10
c00070bf:	75 0f                	jne    c00070d0 <Computer::handleNMI()+0x2e>
c00070c1:	f6 c3 40             	test   bl,0x40
c00070c4:	75 1f                	jne    c00070e5 <Computer::handleNMI()+0x43>
c00070c6:	84 db                	test   bl,bl
c00070c8:	78 2f                	js     c00070f9 <Computer::handleNMI()+0x57>
c00070ca:	83 c4 04             	add    esp,0x4
c00070cd:	5b                   	pop    ebx
c00070ce:	5e                   	pop    esi
c00070cf:	c3                   	ret    
c00070d0:	83 ec 0c             	sub    esp,0xc
c00070d3:	68 80 f4 01 c0       	push   0xc001f480
c00070d8:	e8 e0 93 00 00       	call   c00104bd <KePanic(char const*)>
c00070dd:	83 c4 10             	add    esp,0x10
c00070e0:	f6 c3 40             	test   bl,0x40
c00070e3:	74 e1                	je     c00070c6 <Computer::handleNMI()+0x24>
c00070e5:	83 ec 0c             	sub    esp,0xc
c00070e8:	68 8d f4 01 c0       	push   0xc001f48d
c00070ed:	e8 cb 93 00 00       	call   c00104bd <KePanic(char const*)>
c00070f2:	83 c4 10             	add    esp,0x10
c00070f5:	84 db                	test   bl,bl
c00070f7:	79 d1                	jns    c00070ca <Computer::handleNMI()+0x28>
c00070f9:	c7 44 24 10 97 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f497
c0007101:	83 c4 04             	add    esp,0x4
c0007104:	5b                   	pop    ebx
c0007105:	5e                   	pop    esi
c0007106:	e9 b2 93 00 00       	jmp    c00104bd <KePanic(char const*)>
c000710b:	90                   	nop

c000710c <GDTEntry::setBase(unsigned int)>:
c000710c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007110:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007114:	89 c1                	mov    ecx,eax
c0007116:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000711a:	c1 e8 18             	shr    eax,0x18
c000711d:	c1 e9 10             	shr    ecx,0x10
c0007120:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007123:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007126:	c3                   	ret    
c0007127:	90                   	nop

c0007128 <GDTEntry::setLimit(unsigned int)>:
c0007128:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000712c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007130:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007133:	66 89 01             	mov    WORD PTR [ecx],ax
c0007136:	c1 e8 10             	shr    eax,0x10
c0007139:	83 e0 0f             	and    eax,0xf
c000713c:	83 e2 f0             	and    edx,0xfffffff0
c000713f:	09 d0                	or     eax,edx
c0007141:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007144:	c3                   	ret    
c0007145:	90                   	nop

c0007146 <GDT::GDT()>:
c0007146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000714a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000715a:	90                   	nop
c000715b:	c3                   	ret    

c000715c <GDT::addEntry(GDTEntry)>:
c000715c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007160:	c5 fa 7e 44 24 08    	vmovq  xmm0,QWORD PTR [esp+0x8]
c0007166:	8b 02                	mov    eax,DWORD PTR [edx]
c0007168:	8d 48 01             	lea    ecx,[eax+0x1]
c000716b:	c5 f9 d6 44 c2 04    	vmovq  QWORD PTR [edx+eax*8+0x4],xmm0
c0007171:	c1 e0 03             	shl    eax,0x3
c0007174:	89 0a                	mov    DWORD PTR [edx],ecx
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <GDT::getNumberOfEntries()>:
c0007178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717c:	8b 00                	mov    eax,DWORD PTR [eax]
c000717e:	c3                   	ret    
c000717f:	90                   	nop

c0007180 <GDT::flush()>:
c0007180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007184:	8b 10                	mov    edx,DWORD PTR [eax]
c0007186:	83 c0 04             	add    eax,0x4
c0007189:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c000718e:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007195:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c000719c:	e9 b9 91 ff ff       	jmp    c000035a <loadGDT>
c00071a1:	90                   	nop

c00071a2 <GDT::setup()>:
c00071a2:	57                   	push   edi
c00071a3:	56                   	push   esi
c00071a4:	53                   	push   ebx
c00071a5:	83 ec 30             	sub    esp,0x30
c00071a8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071b2:	56                   	push   esi
c00071b3:	e8 54 ff ff ff       	call   c000710c <GDTEntry::setBase(unsigned int)>
c00071b8:	6a 00                	push   0x0
c00071ba:	56                   	push   esi
c00071bb:	e8 68 ff ff ff       	call   c0007128 <GDTEntry::setLimit(unsigned int)>
c00071c0:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071c8:	6a 00                	push   0x0
c00071ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071ce:	56                   	push   esi
c00071cf:	e8 38 ff ff ff       	call   c000710c <GDTEntry::setBase(unsigned int)>
c00071d4:	68 ff ff ff 00       	push   0xffffff
c00071d9:	56                   	push   esi
c00071da:	e8 49 ff ff ff       	call   c0007128 <GDTEntry::setLimit(unsigned int)>
c00071df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071ec:	c5 f9 6e c6          	vmovd  xmm0,esi
c00071f0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071f4:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071f9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071fd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007201:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007205:	c5 fa 7e 4c 24 38    	vmovq  xmm1,QWORD PTR [esp+0x38]
c000720b:	89 f8                	mov    eax,edi
c000720d:	89 fa                	mov    edx,edi
c000720f:	80 e4 f7             	and    ah,0xf7
c0007212:	80 ce 60             	or     dh,0x60
c0007215:	c5 f9 d6 4c 24 40    	vmovq  QWORD PTR [esp+0x40],xmm1
c000721b:	c4 e3 79 22 c0 01    	vpinsrd xmm0,xmm0,eax,0x1
c0007221:	89 c7                	mov    edi,eax
c0007223:	80 cc 60             	or     ah,0x60
c0007226:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000722a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000722e:	83 c4 20             	add    esp,0x20
c0007231:	6a 00                	push   0x0
c0007233:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007237:	50                   	push   eax
c0007238:	e8 cf fe ff ff       	call   c000710c <GDTEntry::setBase(unsigned int)>
c000723d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007242:	c5 f9 d6 44 24 30    	vmovq  QWORD PTR [esp+0x30],xmm0
c0007248:	6a 00                	push   0x0
c000724a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000724e:	50                   	push   eax
c000724f:	e8 b8 fe ff ff       	call   c000710c <GDTEntry::setBase(unsigned int)>
c0007254:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007259:	83 c4 0c             	add    esp,0xc
c000725c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007264:	53                   	push   ebx
c0007265:	e8 f2 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c000726a:	83 c4 0c             	add    esp,0xc
c000726d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007275:	53                   	push   ebx
c0007276:	e8 e1 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c000727b:	83 c4 0c             	add    esp,0xc
c000727e:	57                   	push   edi
c000727f:	56                   	push   esi
c0007280:	53                   	push   ebx
c0007281:	e8 d6 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c0007286:	83 c4 0c             	add    esp,0xc
c0007289:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000728d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007291:	53                   	push   ebx
c0007292:	e8 c5 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c0007297:	83 c4 0c             	add    esp,0xc
c000729a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000729e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00072a2:	53                   	push   ebx
c00072a3:	e8 b4 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072b3:	53                   	push   ebx
c00072b4:	e8 a3 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c00072b9:	83 c4 0c             	add    esp,0xc
c00072bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072c4:	53                   	push   ebx
c00072c5:	e8 92 fe ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c00072ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072cd:	e8 ae fe ff ff       	call   c0007180 <GDT::flush()>
c00072d2:	83 c4 40             	add    esp,0x40
c00072d5:	5b                   	pop    ebx
c00072d6:	5e                   	pop    esi
c00072d7:	5f                   	pop    edi
c00072d8:	c3                   	ret    

c00072d9 <idleFunction(void*)>:
c00072d9:	83 ec 0c             	sub    esp,0xc
c00072dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072e1:	48                   	dec    eax
c00072e2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072e7:	75 01                	jne    c00072ea <idleFunction(void*)+0x11>
c00072e9:	fb                   	sti    
c00072ea:	e8 09 f4 00 00       	call   c00166f8 <HalSystemIdle()>
c00072ef:	e8 4e 6f 01 00       	call   c001e242 <idleCommon()>
c00072f4:	eb f4                	jmp    c00072ea <idleFunction(void*)+0x11>
c00072f6:	66 90                	xchg   ax,ax

c00072f8 <IDTEntry::IDTEntry(bool)>:
c00072f8:	83 ec 04             	sub    esp,0x4
c00072fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ff:	88 04 24             	mov    BYTE PTR [esp],al
c0007302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007306:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000730c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007310:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 f0             	and    edx,0xfffffff0
c000731e:	83 ca 0e             	or     edx,0xe
c0007321:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007328:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732b:	83 e2 ef             	and    edx,0xffffffef
c000732e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007331:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007335:	74 05                	je     c000733c <IDTEntry::IDTEntry(bool)+0x44>
c0007337:	b2 03                	mov    dl,0x3
c0007339:	eb 05                	jmp    c0007340 <IDTEntry::IDTEntry(bool)+0x48>
c000733b:	90                   	nop
c000733c:	b2 00                	mov    dl,0x0
c000733e:	66 90                	xchg   ax,ax
c0007340:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007344:	83 e2 03             	and    edx,0x3
c0007347:	88 d1                	mov    cl,dl
c0007349:	c1 e1 05             	shl    ecx,0x5
c000734c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734f:	83 e2 9f             	and    edx,0xffffff9f
c0007352:	09 ca                	or     edx,ecx
c0007354:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007357:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000735e:	83 ca 80             	or     edx,0xffffff80
c0007361:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007364:	90                   	nop
c0007365:	83 c4 04             	add    esp,0x4
c0007368:	c3                   	ret    
c0007369:	90                   	nop

c000736a <IDTEntry::setOffset(unsigned int)>:
c000736a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000736e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007372:	66 89 02             	mov    WORD PTR [edx],ax
c0007375:	c1 e8 10             	shr    eax,0x10
c0007378:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000737c:	c3                   	ret    
c000737d:	90                   	nop
c000737e:	66 90                	xchg   ax,ax

c0007380 <IDT::IDT()>:
c0007380:	90                   	nop
c0007381:	c3                   	ret    

c0007382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007386:	83 c0 30             	add    eax,0x30
c0007389:	c3                   	ret    

c000738a <IDT::addEntry(IDTEntry, int)>:
c000738a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007392:	c5 fa 7e 44 24 08    	vmovq  xmm0,QWORD PTR [esp+0x8]
c0007398:	c5 f9 d6 04 d0       	vmovq  QWORD PTR [eax+edx*8],xmm0
c000739d:	c3                   	ret    

c000739e <IDT::addEntry(int, void (*)(), bool)>:
c000739e:	53                   	push   ebx
c000739f:	83 ec 18             	sub    esp,0x18
c00073a2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00073a7:	50                   	push   eax
c00073a8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073ac:	53                   	push   ebx
c00073ad:	e8 46 ff ff ff       	call   c00072f8 <IDTEntry::IDTEntry(bool)>
c00073b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00073b6:	53                   	push   ebx
c00073b7:	e8 ae ff ff ff       	call   c000736a <IDTEntry::setOffset(unsigned int)>
c00073bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00073cc:	e8 b9 ff ff ff       	call   c000738a <IDT::addEntry(IDTEntry, int)>
c00073d1:	83 c4 38             	add    esp,0x38
c00073d4:	5b                   	pop    ebx
c00073d5:	c3                   	ret    

c00073d6 <IDT::flush()>:
c00073d6:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e3:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073e8:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073ef:	c3                   	ret    

c00073f0 <IDT::setup()>:
c00073f0:	57                   	push   edi
c00073f1:	56                   	push   esi
c00073f2:	53                   	push   ebx
c00073f3:	83 ec 10             	sub    esp,0x10
c00073f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073fa:	6a 00                	push   0x0
c00073fc:	68 40 d9 01 c0       	push   0xc001d940
c0007401:	6a 00                	push   0x0
c0007403:	53                   	push   ebx
c0007404:	e8 95 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 50 d9 01 c0       	push   0xc001d950
c0007410:	6a 01                	push   0x1
c0007412:	53                   	push   ebx
c0007413:	e8 86 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 5a d9 01 c0       	push   0xc001d95a
c0007422:	6a 02                	push   0x2
c0007424:	53                   	push   ebx
c0007425:	e8 74 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 64 d9 01 c0       	push   0xc001d964
c0007431:	6a 03                	push   0x3
c0007433:	53                   	push   ebx
c0007434:	e8 65 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 6e d9 01 c0       	push   0xc001d96e
c0007443:	6a 04                	push   0x4
c0007445:	53                   	push   ebx
c0007446:	e8 53 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 78 d9 01 c0       	push   0xc001d978
c0007452:	6a 05                	push   0x5
c0007454:	53                   	push   ebx
c0007455:	e8 44 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 82 d9 01 c0       	push   0xc001d982
c0007464:	6a 06                	push   0x6
c0007466:	53                   	push   ebx
c0007467:	e8 32 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 00                	push   0x0
c000746e:	68 8c d9 01 c0       	push   0xc001d98c
c0007473:	6a 07                	push   0x7
c0007475:	53                   	push   ebx
c0007476:	e8 23 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 96 d9 01 c0       	push   0xc001d996
c0007485:	6a 08                	push   0x8
c0007487:	53                   	push   ebx
c0007488:	e8 11 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 9e d9 01 c0       	push   0xc001d99e
c0007494:	6a 09                	push   0x9
c0007496:	53                   	push   ebx
c0007497:	e8 02 ff ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 a8 d9 01 c0       	push   0xc001d9a8
c00074a6:	6a 0a                	push   0xa
c00074a8:	53                   	push   ebx
c00074a9:	e8 f0 fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 b0 d9 01 c0       	push   0xc001d9b0
c00074b5:	6a 0b                	push   0xb
c00074b7:	53                   	push   ebx
c00074b8:	e8 e1 fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 b8 d9 01 c0       	push   0xc001d9b8
c00074c7:	6a 0c                	push   0xc
c00074c9:	53                   	push   ebx
c00074ca:	e8 cf fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 c0 d9 01 c0       	push   0xc001d9c0
c00074d6:	6a 0d                	push   0xd
c00074d8:	53                   	push   ebx
c00074d9:	e8 c0 fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 da d9 01 c0       	push   0xc001d9da
c00074e8:	6a 0e                	push   0xe
c00074ea:	53                   	push   ebx
c00074eb:	e8 ae fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 e2 d9 01 c0       	push   0xc001d9e2
c00074f7:	6a 0f                	push   0xf
c00074f9:	53                   	push   ebx
c00074fa:	e8 9f fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 ec d9 01 c0       	push   0xc001d9ec
c0007509:	6a 10                	push   0x10
c000750b:	53                   	push   ebx
c000750c:	e8 8d fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 f6 d9 01 c0       	push   0xc001d9f6
c0007518:	6a 11                	push   0x11
c000751a:	53                   	push   ebx
c000751b:	e8 7e fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 00 da 01 c0       	push   0xc001da00
c000752a:	6a 12                	push   0x12
c000752c:	53                   	push   ebx
c000752d:	e8 6c fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 01                	push   0x1
c0007534:	68 9a da 01 c0       	push   0xc001da9a
c0007539:	6a 60                	push   0x60
c000753b:	53                   	push   ebx
c000753c:	e8 5d fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 a1 da 01 c0       	push   0xc001daa1
c000754b:	6a 20                	push   0x20
c000754d:	53                   	push   ebx
c000754e:	e8 4b fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 8c da 01 c0       	push   0xc001da8c
c000755a:	6a 21                	push   0x21
c000755c:	53                   	push   ebx
c000755d:	e8 3c fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 93 da 01 c0       	push   0xc001da93
c000756c:	6a 22                	push   0x22
c000756e:	53                   	push   ebx
c000756f:	e8 2a fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 0a da 01 c0       	push   0xc001da0a
c000757b:	6a 23                	push   0x23
c000757d:	53                   	push   ebx
c000757e:	e8 1b fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 14 da 01 c0       	push   0xc001da14
c000758d:	6a 24                	push   0x24
c000758f:	53                   	push   ebx
c0007590:	e8 09 fe ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 1e da 01 c0       	push   0xc001da1e
c000759c:	6a 25                	push   0x25
c000759e:	53                   	push   ebx
c000759f:	e8 fa fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 28 da 01 c0       	push   0xc001da28
c00075ae:	6a 26                	push   0x26
c00075b0:	53                   	push   ebx
c00075b1:	e8 e8 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 32 da 01 c0       	push   0xc001da32
c00075bd:	6a 27                	push   0x27
c00075bf:	53                   	push   ebx
c00075c0:	e8 d9 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 3c da 01 c0       	push   0xc001da3c
c00075cf:	6a 28                	push   0x28
c00075d1:	53                   	push   ebx
c00075d2:	e8 c7 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 46 da 01 c0       	push   0xc001da46
c00075de:	6a 29                	push   0x29
c00075e0:	53                   	push   ebx
c00075e1:	e8 b8 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 50 da 01 c0       	push   0xc001da50
c00075f0:	6a 2a                	push   0x2a
c00075f2:	53                   	push   ebx
c00075f3:	e8 a6 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 5a da 01 c0       	push   0xc001da5a
c00075ff:	6a 2b                	push   0x2b
c0007601:	53                   	push   ebx
c0007602:	e8 97 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 20             	add    esp,0x20
c000760a:	6a 00                	push   0x0
c000760c:	68 64 da 01 c0       	push   0xc001da64
c0007611:	6a 2c                	push   0x2c
c0007613:	53                   	push   ebx
c0007614:	e8 85 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007619:	6a 00                	push   0x0
c000761b:	68 6e da 01 c0       	push   0xc001da6e
c0007620:	6a 2d                	push   0x2d
c0007622:	53                   	push   ebx
c0007623:	e8 76 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007628:	83 c4 20             	add    esp,0x20
c000762b:	6a 00                	push   0x0
c000762d:	68 78 da 01 c0       	push   0xc001da78
c0007632:	6a 2e                	push   0x2e
c0007634:	53                   	push   ebx
c0007635:	e8 64 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000763a:	6a 00                	push   0x0
c000763c:	68 82 da 01 c0       	push   0xc001da82
c0007641:	6a 2f                	push   0x2f
c0007643:	53                   	push   ebx
c0007644:	e8 55 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c0007649:	83 c4 20             	add    esp,0x20
c000764c:	6a 00                	push   0x0
c000764e:	68 dc db 01 c0       	push   0xc001dbdc
c0007653:	6a 30                	push   0x30
c0007655:	53                   	push   ebx
c0007656:	e8 43 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 e6 db 01 c0       	push   0xc001dbe6
c0007662:	6a 31                	push   0x31
c0007664:	53                   	push   ebx
c0007665:	e8 34 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 f0 db 01 c0       	push   0xc001dbf0
c0007674:	6a 32                	push   0x32
c0007676:	53                   	push   ebx
c0007677:	e8 22 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 fa db 01 c0       	push   0xc001dbfa
c0007683:	6a 33                	push   0x33
c0007685:	53                   	push   ebx
c0007686:	e8 13 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 04 dc 01 c0       	push   0xc001dc04
c0007695:	6a 34                	push   0x34
c0007697:	53                   	push   ebx
c0007698:	e8 01 fd ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 0e dc 01 c0       	push   0xc001dc0e
c00076a4:	6a 35                	push   0x35
c00076a6:	53                   	push   ebx
c00076a7:	e8 f2 fc ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 18 dc 01 c0       	push   0xc001dc18
c00076b6:	6a 36                	push   0x36
c00076b8:	53                   	push   ebx
c00076b9:	e8 e0 fc ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 22 dc 01 c0       	push   0xc001dc22
c00076c5:	6a 37                	push   0x37
c00076c7:	53                   	push   ebx
c00076c8:	e8 d1 fc ff ff       	call   c000739e <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 1c             	add    esp,0x1c
c00076d0:	6a 03                	push   0x3
c00076d2:	6a 02                	push   0x2
c00076d4:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076da:	e8 a1 24 00 00       	call   c0009b80 <VAS::allocatePages(int, int)>
c00076df:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076e6:	89 c6                	mov    esi,eax
c00076e8:	e8 8e 01 00 00       	call   c000787b <malloc>
c00076ed:	81 c6 00 20 00 00    	add    esi,0x2000
c00076f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076f6:	89 c7                	mov    edi,eax
c00076f8:	e8 03 16 00 00       	call   c0008d00 <TSS::TSS()>
c00076fd:	83 c4 0c             	add    esp,0xc
c0007700:	68 96 d9 01 c0       	push   0xc001d996
c0007705:	56                   	push   esi
c0007706:	57                   	push   edi
c0007707:	e8 38 16 00 00       	call   c0008d44 <TSS::setup(unsigned long, unsigned long)>
c000770c:	89 c6                	mov    esi,eax
c000770e:	58                   	pop    eax
c000770f:	5a                   	pop    edx
c0007710:	6a 00                	push   0x0
c0007712:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007716:	50                   	push   eax
c0007717:	e8 dc fb ff ff       	call   c00072f8 <IDTEntry::IDTEntry(bool)>
c000771c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007720:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007725:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000772c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007732:	80 ce 05             	or     dh,0x5
c0007735:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007739:	c5 fa 7e 44 24 18    	vmovq  xmm0,QWORD PTR [esp+0x18]
c000773f:	c5 f9 d6 43 40       	vmovq  QWORD PTR [ebx+0x40],xmm0
c0007744:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007747:	e8 8a fc ff ff       	call   c00073d6 <IDT::flush()>
c000774c:	83 c4 20             	add    esp,0x20
c000774f:	5b                   	pop    ebx
c0007750:	5e                   	pop    esi
c0007751:	5f                   	pop    edi
c0007752:	c3                   	ret    

c0007753 <sbrk>:
c0007753:	55                   	push   ebp
c0007754:	57                   	push   edi
c0007755:	56                   	push   esi
c0007756:	53                   	push   ebx
c0007757:	83 ec 1c             	sub    esp,0x1c
c000775a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000775e:	85 c0                	test   eax,eax
c0007760:	74 66                	je     c00077c8 <sbrk+0x75>
c0007762:	78 6b                	js     c00077cf <sbrk+0x7c>
c0007764:	8b 15 d4 18 02 c0    	mov    edx,DWORD PTR ds:0xc00218d4
c000776a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000776e:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0007774:	05 ff 0f 00 00       	add    eax,0xfff
c0007779:	0f 48 c5             	cmovs  eax,ebp
c000777c:	c1 f8 0c             	sar    eax,0xc
c000777f:	89 c5                	mov    ebp,eax
c0007781:	bb 00 00 00 00       	mov    ebx,0x0
c0007786:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000778c:	8b 3d d4 18 02 c0    	mov    edi,DWORD PTR ds:0xc00218d4
c0007792:	e8 c9 03 00 00       	call   c0007b60 <Phys::allocatePage()>
c0007797:	68 01 04 00 00       	push   0x401
c000779c:	57                   	push   edi
c000779d:	50                   	push   eax
c000779e:	56                   	push   esi
c000779f:	e8 d6 22 00 00       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c00077a4:	81 05 d4 18 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00218d4,0x1000
c00077ae:	43                   	inc    ebx
c00077af:	83 c4 10             	add    esp,0x10
c00077b2:	39 dd                	cmp    ebp,ebx
c00077b4:	75 d0                	jne    c0007786 <sbrk+0x33>
c00077b6:	0f 20 d8             	mov    eax,cr3
c00077b9:	0f 22 d8             	mov    cr3,eax
c00077bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077c0:	83 c4 1c             	add    esp,0x1c
c00077c3:	5b                   	pop    ebx
c00077c4:	5e                   	pop    esi
c00077c5:	5f                   	pop    edi
c00077c6:	5d                   	pop    ebp
c00077c7:	c3                   	ret    
c00077c8:	a1 d4 18 02 c0       	mov    eax,ds:0xc00218d4
c00077cd:	eb f1                	jmp    c00077c0 <sbrk+0x6d>
c00077cf:	83 ec 08             	sub    esp,0x8
c00077d2:	50                   	push   eax
c00077d3:	68 38 f5 01 c0       	push   0xc001f538
c00077d8:	e8 8c 2e 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00077dd:	83 c4 10             	add    esp,0x10
c00077e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077e5:	eb d9                	jmp    c00077c0 <sbrk+0x6d>

c00077e7 <mmap>:
c00077e7:	83 ec 18             	sub    esp,0x18
c00077ea:	68 68 f5 01 c0       	push   0xc001f568
c00077ef:	e8 c9 8c 00 00       	call   c00104bd <KePanic(char const*)>
c00077f4:	b8 00 00 00 00       	mov    eax,0x0
c00077f9:	83 c4 1c             	add    esp,0x1c
c00077fc:	c3                   	ret    

c00077fd <munmap>:
c00077fd:	83 ec 18             	sub    esp,0x18
c0007800:	68 6d f5 01 c0       	push   0xc001f56d
c0007805:	e8 b3 8c 00 00       	call   c00104bd <KePanic(char const*)>
c000780a:	b8 00 00 00 00       	mov    eax,0x0
c000780f:	83 c4 1c             	add    esp,0x1c
c0007812:	c3                   	ret    

c0007813 <liballoc_lock()>:
c0007813:	fa                   	cli    
c0007814:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000781a:	b8 00 00 00 00       	mov    eax,0x0
c000781f:	c3                   	ret    

c0007820 <liballoc_unlock()>:
c0007820:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007825:	48                   	dec    eax
c0007826:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000782b:	75 01                	jne    c000782e <liballoc_unlock()+0xe>
c000782d:	fb                   	sti    
c000782e:	b8 00 00 00 00       	mov    eax,0x0
c0007833:	c3                   	ret    

c0007834 <liballoc_alloc(int)>:
c0007834:	83 ec 10             	sub    esp,0x10
c0007837:	6a 01                	push   0x1
c0007839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007843:	e8 38 23 00 00       	call   c0009b80 <VAS::allocatePages(int, int)>
c0007848:	83 c4 1c             	add    esp,0x1c
c000784b:	c3                   	ret    

c000784c <liballoc_free(void*, int)>:
c000784c:	83 ec 14             	sub    esp,0x14
c000784f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007853:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007859:	e8 74 1f 00 00       	call   c00097d2 <VAS::freeAllocatedPages(unsigned long)>
c000785e:	b8 00 00 00 00       	mov    eax,0x0
c0007863:	83 c4 1c             	add    esp,0x1c
c0007866:	c3                   	ret    

c0007867 <realloc>:
c0007867:	83 ec 14             	sub    esp,0x14
c000786a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007872:	e8 0d 9d ff ff       	call   c0001584 <dlrealloc>
c0007877:	83 c4 1c             	add    esp,0x1c
c000787a:	c3                   	ret    

c000787b <malloc>:
c000787b:	83 ec 18             	sub    esp,0x18
c000787e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007882:	e8 cc 97 ff ff       	call   c0001053 <dlmalloc>
c0007887:	83 c4 1c             	add    esp,0x1c
c000788a:	c3                   	ret    

c000788b <free>:
c000788b:	83 ec 18             	sub    esp,0x18
c000788e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007892:	e8 5e 94 ff ff       	call   c0000cf5 <dlfree>
c0007897:	83 c4 1c             	add    esp,0x1c
c000789a:	c3                   	ret    

c000789b <rfree>:
c000789b:	83 ec 18             	sub    esp,0x18
c000789e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00078a2:	e8 4e 94 ff ff       	call   c0000cf5 <dlfree>
c00078a7:	83 c4 1c             	add    esp,0x1c
c00078aa:	c3                   	ret    

c00078ab <calloc>:
c00078ab:	56                   	push   esi
c00078ac:	53                   	push   ebx
c00078ad:	83 ec 10             	sub    esp,0x10
c00078b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078b4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b9:	53                   	push   ebx
c00078ba:	e8 bc ff ff ff       	call   c000787b <malloc>
c00078bf:	89 c6                	mov    esi,eax
c00078c1:	83 c4 0c             	add    esp,0xc
c00078c4:	53                   	push   ebx
c00078c5:	6a 00                	push   0x0
c00078c7:	50                   	push   eax
c00078c8:	e8 b3 8c ff ff       	call   c0000580 <memset>
c00078cd:	89 f0                	mov    eax,esi
c00078cf:	83 c4 14             	add    esp,0x14
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	c3                   	ret    

c00078d5 <KeEntryPoint>:
c00078d5:	57                   	push   edi
c00078d6:	bf f9 03 00 00       	mov    edi,0x3f9
c00078db:	56                   	push   esi
c00078dc:	31 f6                	xor    esi,esi
c00078de:	89 fa                	mov    edx,edi
c00078e0:	53                   	push   ebx
c00078e1:	83 ec 2c             	sub    esp,0x2c
c00078e4:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e9:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078ee:	89 f0                	mov    eax,esi
c00078f0:	ee                   	out    dx,al
c00078f1:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078f6:	b0 80                	mov    al,0x80
c00078f8:	89 da                	mov    edx,ebx
c00078fa:	ee                   	out    dx,al
c00078fb:	b1 03                	mov    cl,0x3
c00078fd:	ba f8 03 00 00       	mov    edx,0x3f8
c0007902:	88 c8                	mov    al,cl
c0007904:	ee                   	out    dx,al
c0007905:	89 f0                	mov    eax,esi
c0007907:	89 fa                	mov    edx,edi
c0007909:	ee                   	out    dx,al
c000790a:	88 c8                	mov    al,cl
c000790c:	89 da                	mov    edx,ebx
c000790e:	ee                   	out    dx,al
c000790f:	b0 c7                	mov    al,0xc7
c0007911:	ba fa 03 00 00       	mov    edx,0x3fa
c0007916:	ee                   	out    dx,al
c0007917:	b0 0b                	mov    al,0xb
c0007919:	ba fc 03 00 00       	mov    edx,0x3fc
c000791e:	ee                   	out    dx,al
c000791f:	68 74 f5 01 c0       	push   0xc001f574
c0007924:	e8 40 2d 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0007929:	e8 7d 84 00 00       	call   c000fdab <KeDisplaySplashScreen()>
c000792e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007933:	05 ff 0f 00 00       	add    eax,0xfff
c0007938:	25 00 f0 ff ff       	and    eax,0xfffff000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	e8 71 03 00 00       	call   c0007cb6 <Phys::physicalMemorySetup(unsigned int)>
c0007945:	e8 3e 1c 00 00       	call   c0009588 <Virt::virtualMemorySetup()>
c000794a:	58                   	pop    eax
c000794b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000794f:	53                   	push   ebx
c0007950:	e8 fb 1e 00 00       	call   c0009850 <VAS::VAS()>
c0007955:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c000795b:	e8 7a 68 01 00       	call   c001e1da <_init>
c0007960:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007967:	e8 0f ff ff ff       	call   c000787b <malloc>
c000796c:	89 c6                	mov    esi,eax
c000796e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007971:	e8 86 f2 ff ff       	call   c0006bfc <Computer::Computer()>
c0007976:	6a 00                	push   0x0
c0007978:	6a 00                	push   0x0
c000797a:	6a 00                	push   0x0
c000797c:	56                   	push   esi
c000797d:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007983:	e8 1c f6 ff ff       	call   c0006fa4 <Computer::open(int, int, void*)>
c0007988:	83 c4 14             	add    esp,0x14
c000798b:	53                   	push   ebx
c000798c:	e8 85 1f 00 00       	call   c0009916 <VAS::~VAS()>
c0007991:	83 c4 30             	add    esp,0x30
c0007994:	5b                   	pop    ebx
c0007995:	5e                   	pop    esi
c0007996:	5f                   	pop    edi
c0007997:	c3                   	ret    

c0007998 <Phys::allocateDMA(unsigned long)>:
c0007998:	55                   	push   ebp
c0007999:	31 ed                	xor    ebp,ebp
c000799b:	57                   	push   edi
c000799c:	56                   	push   esi
c000799d:	31 f6                	xor    esi,esi
c000799f:	53                   	push   ebx
c00079a0:	31 db                	xor    ebx,ebx
c00079a2:	83 ec 1c             	sub    esp,0x1c
c00079a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079a9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ae:	c1 e8 0c             	shr    eax,0xc
c00079b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00079b5:	31 c0                	xor    eax,eax
c00079b7:	eb 19                	jmp    c00079d2 <Phys::allocateDMA(unsigned long)+0x3a>
c00079b9:	85 c0                	test   eax,eax
c00079bb:	8d 78 01             	lea    edi,[eax+0x1]
c00079be:	0f 44 eb             	cmove  ebp,ebx
c00079c1:	0f 44 f3             	cmove  esi,ebx
c00079c4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00079c8:	74 33                	je     c00079fd <Phys::allocateDMA(unsigned long)+0x65>
c00079ca:	89 f8                	mov    eax,edi
c00079cc:	43                   	inc    ebx
c00079cd:	83 fb 0f             	cmp    ebx,0xf
c00079d0:	7f 11                	jg     c00079e3 <Phys::allocateDMA(unsigned long)+0x4b>
c00079d2:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079d9:	74 de                	je     c00079b9 <Phys::allocateDMA(unsigned long)+0x21>
c00079db:	31 c0                	xor    eax,eax
c00079dd:	43                   	inc    ebx
c00079de:	83 fb 0f             	cmp    ebx,0xf
c00079e1:	7e ef                	jle    c00079d2 <Phys::allocateDMA(unsigned long)+0x3a>
c00079e3:	83 ec 0c             	sub    esp,0xc
c00079e6:	68 8c f5 01 c0       	push   0xc001f58c
c00079eb:	e8 cd 8a 00 00       	call   c00104bd <KePanic(char const*)>
c00079f0:	83 c4 10             	add    esp,0x10
c00079f3:	31 c0                	xor    eax,eax
c00079f5:	83 c4 1c             	add    esp,0x1c
c00079f8:	5b                   	pop    ebx
c00079f9:	5e                   	pop    esi
c00079fa:	5f                   	pop    edi
c00079fb:	5d                   	pop    ebp
c00079fc:	c3                   	ret    
c00079fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a01:	89 f2                	mov    edx,esi
c0007a03:	c1 fa 04             	sar    edx,0x4
c0007a06:	01 f1                	add    ecx,esi
c0007a08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007a0c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a0f:	49                   	dec    ecx
c0007a10:	0f 48 ca             	cmovs  ecx,edx
c0007a13:	c1 f9 04             	sar    ecx,0x4
c0007a16:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007a1a:	74 06                	je     c0007a22 <Phys::allocateDMA(unsigned long)+0x8a>
c0007a1c:	89 eb                	mov    ebx,ebp
c0007a1e:	31 c0                	xor    eax,eax
c0007a20:	eb bb                	jmp    c00079dd <Phys::allocateDMA(unsigned long)+0x45>
c0007a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007a26:	85 d2                	test   edx,edx
c0007a28:	74 15                	je     c0007a3f <Phys::allocateDMA(unsigned long)+0xa7>
c0007a2a:	8d 96 ec 3e 02 c0    	lea    edx,[esi-0x3ffdc114]
c0007a30:	8d 84 06 ed 3e 02 c0 	lea    eax,[esi+eax*1-0x3ffdc113]
c0007a37:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a3a:	42                   	inc    edx
c0007a3b:	39 d0                	cmp    eax,edx
c0007a3d:	75 f8                	jne    c0007a37 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a43:	01 05 e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,eax
c0007a49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	74 17                	je     c0007a68 <Phys::allocateDMA(unsigned long)+0xd0>
c0007a51:	83 ec 0c             	sub    esp,0xc
c0007a54:	68 8c f5 01 c0       	push   0xc001f58c
c0007a59:	e8 5f 8a 00 00       	call   c00104bd <KePanic(char const*)>
c0007a5e:	83 c4 10             	add    esp,0x10
c0007a61:	89 f8                	mov    eax,edi
c0007a63:	e9 64 ff ff ff       	jmp    c00079cc <Phys::allocateDMA(unsigned long)+0x34>
c0007a68:	89 f0                	mov    eax,esi
c0007a6a:	c1 e0 0c             	shl    eax,0xc
c0007a6d:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c0007a72:	eb 81                	jmp    c00079f5 <Phys::allocateDMA(unsigned long)+0x5d>

c0007a74 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a78:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a82:	c1 ea 0c             	shr    edx,0xc
c0007a85:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a8b:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a90:	c1 e8 0c             	shr    eax,0xc
c0007a93:	85 d2                	test   edx,edx
c0007a95:	74 0f                	je     c0007aa6 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a97:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a9c:	01 c2                	add    edx,eax
c0007a9e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007aa1:	40                   	inc    eax
c0007aa2:	39 d0                	cmp    eax,edx
c0007aa4:	75 f8                	jne    c0007a9e <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007aa6:	c3                   	ret    

c0007aa7 <Phys::setPageState(unsigned long, bool)>:
c0007aa7:	56                   	push   esi
c0007aa8:	8b 35 d8 18 02 c0    	mov    esi,DWORD PTR ds:0xc00218d8
c0007aae:	ba 01 00 00 00       	mov    edx,0x1
c0007ab3:	53                   	push   ebx
c0007ab4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007abc:	89 c8                	mov    eax,ecx
c0007abe:	83 e1 07             	and    ecx,0x7
c0007ac1:	c1 e8 03             	shr    eax,0x3
c0007ac4:	c4 e2 71 f7 d2       	shlx   edx,edx,ecx
c0007ac9:	f7 d2                	not    edx
c0007acb:	c4 e2 71 f7 db       	shlx   ebx,ebx,ecx
c0007ad0:	01 c6                	add    esi,eax
c0007ad2:	20 16                	and    BYTE PTR [esi],dl
c0007ad4:	03 05 d8 18 02 c0    	add    eax,DWORD PTR ds:0xc00218d8
c0007ada:	08 18                	or     BYTE PTR [eax],bl
c0007adc:	5b                   	pop    ebx
c0007add:	5e                   	pop    esi
c0007ade:	c3                   	ret    

c0007adf <Phys::getPageState(unsigned long)>:
c0007adf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae3:	8b 0d d8 18 02 c0    	mov    ecx,DWORD PTR ds:0xc00218d8
c0007ae9:	89 c2                	mov    edx,eax
c0007aeb:	83 e0 07             	and    eax,0x7
c0007aee:	c1 ea 03             	shr    edx,0x3
c0007af1:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
c0007af5:	c4 e2 7a f7 c2       	sarx   eax,edx,eax
c0007afa:	83 e0 01             	and    eax,0x1
c0007afd:	c3                   	ret    

c0007afe <Phys::freePage(unsigned long)>:
c0007afe:	53                   	push   ebx
c0007aff:	83 ec 08             	sub    esp,0x8
c0007b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b06:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007b0c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b12:	76 3a                	jbe    c0007b4e <Phys::freePage(unsigned long)+0x50>
c0007b14:	c1 e8 0c             	shr    eax,0xc
c0007b17:	50                   	push   eax
c0007b18:	89 c3                	mov    ebx,eax
c0007b1a:	e8 c0 ff ff ff       	call   c0007adf <Phys::getPageState(unsigned long)>
c0007b1f:	5a                   	pop    edx
c0007b20:	84 c0                	test   al,al
c0007b22:	74 19                	je     c0007b3d <Phys::freePage(unsigned long)+0x3f>
c0007b24:	83 ec 08             	sub    esp,0x8
c0007b27:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b2d:	6a 00                	push   0x0
c0007b2f:	53                   	push   ebx
c0007b30:	e8 72 ff ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007b35:	83 c4 10             	add    esp,0x10
c0007b38:	83 c4 08             	add    esp,0x8
c0007b3b:	5b                   	pop    ebx
c0007b3c:	c3                   	ret    
c0007b3d:	c7 44 24 10 31 f6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f631
c0007b45:	83 c4 08             	add    esp,0x8
c0007b48:	5b                   	pop    ebx
c0007b49:	e9 6f 89 00 00       	jmp    c00104bd <KePanic(char const*)>
c0007b4e:	68 00 10 00 00       	push   0x1000
c0007b53:	50                   	push   eax
c0007b54:	e8 1b ff ff ff       	call   c0007a74 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b59:	59                   	pop    ecx
c0007b5a:	5b                   	pop    ebx
c0007b5b:	83 c4 08             	add    esp,0x8
c0007b5e:	5b                   	pop    ebx
c0007b5f:	c3                   	ret    

c0007b60 <Phys::allocatePage()>:
c0007b60:	56                   	push   esi
c0007b61:	53                   	push   ebx
c0007b62:	83 ec 14             	sub    esp,0x14
c0007b65:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b6b:	89 f3                	mov    ebx,esi
c0007b6d:	eb 0a                	jmp    c0007b79 <Phys::allocatePage()+0x19>
c0007b6f:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b75:	39 de                	cmp    esi,ebx
c0007b77:	74 24                	je     c0007b9d <Phys::allocatePage()+0x3d>
c0007b79:	53                   	push   ebx
c0007b7a:	e8 60 ff ff ff       	call   c0007adf <Phys::getPageState(unsigned long)>
c0007b7f:	5a                   	pop    edx
c0007b80:	84 c0                	test   al,al
c0007b82:	74 5e                	je     c0007be2 <Phys::allocatePage()+0x82>
c0007b84:	43                   	inc    ebx
c0007b85:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b8b:	75 e2                	jne    c0007b6f <Phys::allocatePage()+0xf>
c0007b8d:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b97:	31 db                	xor    ebx,ebx
c0007b99:	39 de                	cmp    esi,ebx
c0007b9b:	75 dc                	jne    c0007b79 <Phys::allocatePage()+0x19>
c0007b9d:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007ba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ba9:	83 ec 0c             	sub    esp,0xc
c0007bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007baf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0007bb5:	e8 a0 27 00 00       	call   c000a35a <VAS::scanForEviction()>
c0007bba:	83 c4 10             	add    esp,0x10
c0007bbd:	85 c0                	test   eax,eax
c0007bbf:	75 42                	jne    c0007c03 <Phys::allocatePage()+0xa3>
c0007bc1:	83 ec 0c             	sub    esp,0xc
c0007bc4:	68 b4 f5 01 c0       	push   0xc001f5b4
c0007bc9:	e8 ef 88 00 00       	call   c00104bd <KePanic(char const*)>
c0007bce:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bd4:	83 c4 10             	add    esp,0x10
c0007bd7:	53                   	push   ebx
c0007bd8:	e8 02 ff ff ff       	call   c0007adf <Phys::getPageState(unsigned long)>
c0007bdd:	5a                   	pop    edx
c0007bde:	84 c0                	test   al,al
c0007be0:	75 a2                	jne    c0007b84 <Phys::allocatePage()+0x24>
c0007be2:	6a 01                	push   0x1
c0007be4:	53                   	push   ebx
c0007be5:	e8 bd fe ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007bea:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007bf0:	5a                   	pop    edx
c0007bf1:	b0 0c                	mov    al,0xc
c0007bf3:	59                   	pop    ecx
c0007bf4:	c4 e2 79 f7 05 d8 3e 02 c0 	shlx   eax,DWORD PTR ds:0xc0023ed8,eax
c0007bfd:	83 c4 14             	add    esp,0x14
c0007c00:	5b                   	pop    ebx
c0007c01:	5e                   	pop    esi
c0007c02:	c3                   	ret    
c0007c03:	83 ec 08             	sub    esp,0x8
c0007c06:	89 c2                	mov    edx,eax
c0007c08:	6a 01                	push   0x1
c0007c0a:	c1 ea 0c             	shr    edx,0xc
c0007c0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c11:	52                   	push   edx
c0007c12:	e8 90 fe ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007c17:	83 c4 10             	add    esp,0x10
c0007c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c1e:	eb dd                	jmp    c0007bfd <Phys::allocatePage()+0x9d>

c0007c20 <Phys::allocateContiguousPages(int)>:
c0007c20:	57                   	push   edi
c0007c21:	56                   	push   esi
c0007c22:	53                   	push   ebx
c0007c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c27:	fa                   	cli    
c0007c28:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c2e:	31 db                	xor    ebx,ebx
c0007c30:	85 db                	test   ebx,ebx
c0007c32:	75 11                	jne    c0007c45 <Phys::allocateContiguousPages(int)+0x25>
c0007c34:	e8 27 ff ff ff       	call   c0007b60 <Phys::allocatePage()>
c0007c39:	89 c7                	mov    edi,eax
c0007c3b:	83 fe 01             	cmp    esi,0x1
c0007c3e:	74 21                	je     c0007c61 <Phys::allocateContiguousPages(int)+0x41>
c0007c40:	bb 01 00 00 00       	mov    ebx,0x1
c0007c45:	e8 16 ff ff ff       	call   c0007b60 <Phys::allocatePage()>
c0007c4a:	89 da                	mov    edx,ebx
c0007c4c:	c1 e2 0c             	shl    edx,0xc
c0007c4f:	01 fa                	add    edx,edi
c0007c51:	39 c2                	cmp    edx,eax
c0007c53:	74 20                	je     c0007c75 <Phys::allocateContiguousPages(int)+0x55>
c0007c55:	bb 01 00 00 00       	mov    ebx,0x1
c0007c5a:	89 c7                	mov    edi,eax
c0007c5c:	83 fe 01             	cmp    esi,0x1
c0007c5f:	75 e4                	jne    c0007c45 <Phys::allocateContiguousPages(int)+0x25>
c0007c61:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c66:	48                   	dec    eax
c0007c67:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c6c:	75 01                	jne    c0007c6f <Phys::allocateContiguousPages(int)+0x4f>
c0007c6e:	fb                   	sti    
c0007c6f:	89 f8                	mov    eax,edi
c0007c71:	5b                   	pop    ebx
c0007c72:	5e                   	pop    esi
c0007c73:	5f                   	pop    edi
c0007c74:	c3                   	ret    
c0007c75:	43                   	inc    ebx
c0007c76:	39 f3                	cmp    ebx,esi
c0007c78:	75 b6                	jne    c0007c30 <Phys::allocateContiguousPages(int)+0x10>
c0007c7a:	eb e5                	jmp    c0007c61 <Phys::allocateContiguousPages(int)+0x41>

c0007c7c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c7c:	56                   	push   esi
c0007c7d:	53                   	push   ebx
c0007c7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c82:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c88:	73 06                	jae    c0007c90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c8a:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c90:	c1 eb 0c             	shr    ebx,0xc
c0007c93:	b0 0c                	mov    al,0xc
c0007c95:	c4 e2 7b f7 44 24 0c 	shrx   eax,DWORD PTR [esp+0xc],eax
c0007c9c:	39 d8                	cmp    eax,ebx
c0007c9e:	73 13                	jae    c0007cb3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x37>
c0007ca0:	6a 00                	push   0x0
c0007ca2:	8d 70 01             	lea    esi,[eax+0x1]
c0007ca5:	50                   	push   eax
c0007ca6:	e8 fc fd ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007cab:	5a                   	pop    edx
c0007cac:	89 f0                	mov    eax,esi
c0007cae:	59                   	pop    ecx
c0007caf:	39 f3                	cmp    ebx,esi
c0007cb1:	75 ed                	jne    c0007ca0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x24>
c0007cb3:	5b                   	pop    ebx
c0007cb4:	5e                   	pop    esi
c0007cb5:	c3                   	ret    

c0007cb6 <Phys::physicalMemorySetup(unsigned int)>:
c0007cb6:	55                   	push   ebp
c0007cb7:	57                   	push   edi
c0007cb8:	56                   	push   esi
c0007cb9:	53                   	push   ebx
c0007cba:	31 db                	xor    ebx,ebx
c0007cbc:	83 ec 50             	sub    esp,0x50
c0007cbf:	6a 10                	push   0x10
c0007cc1:	6a 00                	push   0x0
c0007cc3:	68 ec 3e 02 c0       	push   0xc0023eec
c0007cc8:	e8 b3 88 ff ff       	call   c0000580 <memset>
c0007ccd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0007cd1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cd6:	05 00 10 00 00       	add    eax,0x1000
c0007cdb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0007cdf:	5a                   	pop    edx
c0007ce0:	59                   	pop    ecx
c0007ce1:	50                   	push   eax
c0007ce2:	68 47 f6 01 c0       	push   0xc001f647
c0007ce7:	e8 7d 29 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0007cec:	83 c4 10             	add    esp,0x10
c0007cef:	83 ec 08             	sub    esp,0x8
c0007cf2:	6a 01                	push   0x1
c0007cf4:	53                   	push   ebx
c0007cf5:	43                   	inc    ebx
c0007cf6:	e8 ac fd ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007cfb:	83 c4 10             	add    esp,0x10
c0007cfe:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d04:	75 e9                	jne    c0007cef <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007d06:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007d0d:	66 85 c0             	test   ax,ax
c0007d10:	0f 84 b5 01 00 00    	je     c0007ecb <Phys::physicalMemorySetup(unsigned int)+0x215>
c0007d16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007d1a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007d27:	eb 70                	jmp    c0007d99 <Phys::physicalMemorySetup(unsigned int)+0xe3>
c0007d29:	39 f9                	cmp    ecx,edi
c0007d2b:	89 c6                	mov    esi,eax
c0007d2d:	1b 74 24 20          	sbb    esi,DWORD PTR [esp+0x20]
c0007d31:	0f 83 72 01 00 00    	jae    c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x1f3>
c0007d37:	c5 f9 7e d2          	vmovd  edx,xmm2
c0007d3b:	bf 00 00 0a 00       	mov    edi,0xa0000
c0007d40:	c4 e3 79 16 d1 01    	vpextrd ecx,xmm2,0x1
c0007d46:	39 d7                	cmp    edi,edx
c0007d48:	19 c8                	sbb    eax,ecx
c0007d4a:	73 0c                	jae    c0007d58 <Phys::physicalMemorySetup(unsigned int)+0xa2>
c0007d4c:	c5 f9 6f 15 90 f6 01 c0 	vmovdqa xmm2,XMMWORD PTR ds:0xc001f690
c0007d54:	c5 f9 7e d2          	vmovd  edx,xmm2
c0007d58:	c5 f9 6f 0d a0 f6 01 c0 	vmovdqa xmm1,XMMWORD PTR ds:0xc001f6a0
c0007d60:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007d65:	c5 e9 d4 c9          	vpaddq xmm1,xmm2,xmm1
c0007d69:	c5 f9 7e cf          	vmovd  edi,xmm1
c0007d6d:	c4 e3 79 16 ce 01    	vpextrd esi,xmm1,0x1
c0007d73:	39 f8                	cmp    eax,edi
c0007d75:	b8 00 00 00 00       	mov    eax,0x0
c0007d7a:	19 f0                	sbb    eax,esi
c0007d7c:	0f 82 09 02 00 00    	jb     c0007f8b <Phys::physicalMemorySetup(unsigned int)+0x2d5>
c0007d82:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0007d86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007d8a:	83 c3 18             	add    ebx,0x18
c0007d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d91:	39 d0                	cmp    eax,edx
c0007d93:	0f 84 42 01 00 00    	je     c0007edb <Phys::physicalMemorySetup(unsigned int)+0x225>
c0007d99:	c5 fa 7e 03          	vmovq  xmm0,QWORD PTR [ebx]
c0007d9d:	c5 fa 7e 4b 08       	vmovq  xmm1,QWORD PTR [ebx+0x8]
c0007da2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007da5:	c5 f9 d4 d1          	vpaddq xmm2,xmm0,xmm1
c0007da9:	c5 f9 d6 4c 24 18    	vmovq  QWORD PTR [esp+0x18],xmm1
c0007daf:	c5 f9 7e c5          	vmovd  ebp,xmm0
c0007db3:	c4 e3 79 16 44 24 24 01 	vpextrd DWORD PTR [esp+0x24],xmm0,0x1
c0007dbb:	c5 f9 d6 44 24 08    	vmovq  QWORD PTR [esp+0x8],xmm0
c0007dc1:	c4 e3 79 16 54 24 20 01 	vpextrd DWORD PTR [esp+0x20],xmm2,0x1
c0007dc9:	c5 f9 7e d7          	vmovd  edi,xmm2
c0007dcd:	c4 e3 79 16 4c 24 38 01 	vpextrd DWORD PTR [esp+0x38],xmm1,0x1
c0007dd5:	c5 f9 d6 14 24       	vmovq  QWORD PTR [esp],xmm2
c0007dda:	c5 f9 7e 54 24 2c    	vmovd  DWORD PTR [esp+0x2c],xmm2
c0007de0:	c5 f9 7e 44 24 28    	vmovd  DWORD PTR [esp+0x28],xmm0
c0007de6:	c5 f9 7e 4c 24 34    	vmovd  DWORD PTR [esp+0x34],xmm1
c0007dec:	52                   	push   edx
c0007ded:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007df1:	57                   	push   edi
c0007df2:	55                   	push   ebp
c0007df3:	68 e4 f5 01 c0       	push   0xc001f5e4
c0007df8:	e8 6c 28 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0007dfd:	c5 fa 7e 54 24 10    	vmovq  xmm2,QWORD PTR [esp+0x10]
c0007e03:	c5 fa 7e 44 24 18    	vmovq  xmm0,QWORD PTR [esp+0x18]
c0007e09:	83 c4 10             	add    esp,0x10
c0007e0c:	c5 e9 eb c0          	vpor   xmm0,xmm2,xmm0
c0007e10:	c5 f9 73 d0 20       	vpsrlq xmm0,xmm0,0x20
c0007e15:	c5 f9 7e c1          	vmovd  ecx,xmm0
c0007e19:	c4 e3 79 16 c0 01    	vpextrd eax,xmm0,0x1
c0007e1f:	09 c8                	or     eax,ecx
c0007e21:	0f 85 b4 00 00 00    	jne    c0007edb <Phys::physicalMemorySetup(unsigned int)+0x225>
c0007e27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007e2b:	c5 fa 7e 4c 24 18    	vmovq  xmm1,QWORD PTR [esp+0x18]
c0007e31:	83 fa 01             	cmp    edx,0x1
c0007e34:	75 13                	jne    c0007e49 <Phys::physicalMemorySetup(unsigned int)+0x193>
c0007e36:	b9 00 00 08 00       	mov    ecx,0x80000
c0007e3b:	89 c6                	mov    esi,eax
c0007e3d:	39 e9                	cmp    ecx,ebp
c0007e3f:	1b 74 24 24          	sbb    esi,DWORD PTR [esp+0x24]
c0007e43:	0f 83 e0 fe ff ff    	jae    c0007d29 <Phys::physicalMemorySetup(unsigned int)+0x73>
c0007e49:	83 fa 01             	cmp    edx,0x1
c0007e4c:	0f 85 30 ff ff ff    	jne    c0007d82 <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e52:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007e56:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007e5a:	31 d2                	xor    edx,edx
c0007e5c:	39 f7                	cmp    edi,esi
c0007e5e:	c5 f9 6e c6          	vmovd  xmm0,esi
c0007e62:	89 f0                	mov    eax,esi
c0007e64:	19 d1                	sbb    ecx,edx
c0007e66:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0007e6c:	0f 82 10 ff ff ff    	jb     c0007d82 <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e72:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0007e77:	3b 4c 24 34          	cmp    ecx,DWORD PTR [esp+0x34]
c0007e7b:	b9 00 00 00 00       	mov    ecx,0x0
c0007e80:	1b 4c 24 38          	sbb    ecx,DWORD PTR [esp+0x38]
c0007e84:	0f 83 f8 fe ff ff    	jae    c0007d82 <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e8e:	39 c5                	cmp    ebp,eax
c0007e90:	19 d6                	sbb    esi,edx
c0007e92:	0f 83 ff 00 00 00    	jae    c0007f97 <Phys::physicalMemorySetup(unsigned int)+0x2e1>
c0007e98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007e9c:	c5 e9 fb c8          	vpsubq xmm1,xmm2,xmm0
c0007ea0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ea4:	e9 ee 00 00 00       	jmp    c0007f97 <Phys::physicalMemorySetup(unsigned int)+0x2e1>
c0007ea9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007ead:	31 d2                	xor    edx,edx
c0007eaf:	c5 f9 6e c6          	vmovd  xmm0,esi
c0007eb3:	39 f7                	cmp    edi,esi
c0007eb5:	89 f0                	mov    eax,esi
c0007eb7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007ebb:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0007ec1:	19 d6                	sbb    esi,edx
c0007ec3:	0f 82 b9 fe ff ff    	jb     c0007d82 <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007ec9:	eb a7                	jmp    c0007e72 <Phys::physicalMemorySetup(unsigned int)+0x1bc>
c0007ecb:	83 ec 0c             	sub    esp,0xc
c0007ece:	68 5f f6 01 c0       	push   0xc001f65f
c0007ed3:	e8 e5 85 00 00       	call   c00104bd <KePanic(char const*)>
c0007ed8:	83 c4 10             	add    esp,0x10
c0007edb:	83 ec 08             	sub    esp,0x8
c0007ede:	bb 60 00 00 00       	mov    ebx,0x60
c0007ee3:	6a 00                	push   0x0
c0007ee5:	6a 06                	push   0x6
c0007ee7:	e8 bb fb ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007eec:	58                   	pop    eax
c0007eed:	5a                   	pop    edx
c0007eee:	6a 00                	push   0x0
c0007ef0:	6a 07                	push   0x7
c0007ef2:	e8 b0 fb ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007ef7:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007efe:	83 c4 10             	add    esp,0x10
c0007f01:	83 ec 08             	sub    esp,0x8
c0007f04:	6a 00                	push   0x0
c0007f06:	53                   	push   ebx
c0007f07:	43                   	inc    ebx
c0007f08:	e8 9a fb ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007f0d:	83 c4 10             	add    esp,0x10
c0007f10:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007f16:	75 e9                	jne    c0007f01 <Phys::physicalMemorySetup(unsigned int)+0x24b>
c0007f18:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f1d:	bb 40 01 00 00       	mov    ebx,0x140
c0007f22:	83 c0 20             	add    eax,0x20
c0007f25:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f2a:	eb 22                	jmp    c0007f4e <Phys::physicalMemorySetup(unsigned int)+0x298>
c0007f2c:	83 ec 08             	sub    esp,0x8
c0007f2f:	6a 00                	push   0x0
c0007f31:	53                   	push   ebx
c0007f32:	43                   	inc    ebx
c0007f33:	e8 6f fb ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007f38:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f3d:	83 c4 10             	add    esp,0x10
c0007f40:	40                   	inc    eax
c0007f41:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f46:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f4c:	74 07                	je     c0007f55 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0007f4e:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f53:	7e d7                	jle    c0007f2c <Phys::physicalMemorySetup(unsigned int)+0x276>
c0007f55:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f5a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f5f:	7f 22                	jg     c0007f83 <Phys::physicalMemorySetup(unsigned int)+0x2cd>
c0007f61:	83 ec 08             	sub    esp,0x8
c0007f64:	6a 00                	push   0x0
c0007f66:	53                   	push   ebx
c0007f67:	43                   	inc    ebx
c0007f68:	e8 3a fb ff ff       	call   c0007aa7 <Phys::setPageState(unsigned long, bool)>
c0007f6d:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f72:	83 c4 10             	add    esp,0x10
c0007f75:	40                   	inc    eax
c0007f76:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f7b:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f81:	75 d7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0007f83:	83 c4 4c             	add    esp,0x4c
c0007f86:	5b                   	pop    ebx
c0007f87:	5e                   	pop    esi
c0007f88:	5f                   	pop    edi
c0007f89:	5d                   	pop    ebp
c0007f8a:	c3                   	ret    
c0007f8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007f8f:	c7 44 24 28 00 00 08 00 	mov    DWORD PTR [esp+0x28],0x80000
c0007f97:	c5 f9 d6 0c 24       	vmovq  QWORD PTR [esp],xmm1
c0007f9c:	83 ec 04             	sub    esp,0x4
c0007f9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0007fa3:	57                   	push   edi
c0007fa4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007fa8:	56                   	push   esi
c0007fa9:	68 08 f6 01 c0       	push   0xc001f608
c0007fae:	e8 b6 26 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0007fb3:	59                   	pop    ecx
c0007fb4:	5d                   	pop    ebp
c0007fb5:	57                   	push   edi
c0007fb6:	56                   	push   esi
c0007fb7:	e8 c0 fc ff ff       	call   c0007c7c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007fbc:	c5 fa 7e 4c 24 10    	vmovq  xmm1,QWORD PTR [esp+0x10]
c0007fc2:	83 c4 0c             	add    esp,0xc
c0007fc5:	c5 f1 73 d1 0c       	vpsrlq xmm1,xmm1,0xc
c0007fca:	c5 f9 7e c8          	vmovd  eax,xmm1
c0007fce:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007fd4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007fdb:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007fe0:	52                   	push   edx
c0007fe1:	50                   	push   eax
c0007fe2:	68 6d f6 01 c0       	push   0xc001f66d
c0007fe7:	e8 7d 26 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	e9 8e fd ff ff       	jmp    c0007d82 <Phys::physicalMemorySetup(unsigned int)+0xcc>

c0007ff4 <Pipe::isAtty()>:
c0007ff4:	31 c0                	xor    eax,eax
c0007ff6:	c3                   	ret    
c0007ff7:	90                   	nop

c0007ff8 <Pipe::~Pipe()>:
c0007ff8:	83 ec 0c             	sub    esp,0xc
c0007ffb:	ba f4 f6 01 c0       	mov    edx,0xc001f6f4
c0008000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008004:	89 10                	mov    DWORD PTR [eax],edx
c0008006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000800a:	83 ec 0c             	sub    esp,0xc
c000800d:	50                   	push   eax
c000800e:	e8 49 11 00 00       	call   c000915c <UnixFile::~UnixFile()>
c0008013:	83 c4 10             	add    esp,0x10
c0008016:	90                   	nop
c0008017:	83 c4 0c             	add    esp,0xc
c000801a:	c3                   	ret    
c000801b:	90                   	nop

c000801c <Pipe::~Pipe()>:
c000801c:	83 ec 0c             	sub    esp,0xc
c000801f:	83 ec 0c             	sub    esp,0xc
c0008022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008026:	e8 cd ff ff ff       	call   c0007ff8 <Pipe::~Pipe()>
c000802b:	83 c4 10             	add    esp,0x10
c000802e:	83 ec 08             	sub    esp,0x8
c0008031:	6a 20                	push   0x20
c0008033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008037:	e8 38 25 00 00       	call   c000a574 <operator delete(void*, unsigned long)>
c000803c:	83 c4 10             	add    esp,0x10
c000803f:	83 c4 0c             	add    esp,0xc
c0008042:	c3                   	ret    
c0008043:	90                   	nop

c0008044 <Pipe::write(unsigned long long, void*, int*)>:
c0008044:	55                   	push   ebp
c0008045:	57                   	push   edi
c0008046:	56                   	push   esi
c0008047:	53                   	push   ebx
c0008048:	83 ec 1c             	sub    esp,0x1c
c000804b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000804f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008053:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008057:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000805a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000805d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008064:	89 ce                	mov    esi,ecx
c0008066:	89 cf                	mov    edi,ecx
c0008068:	c1 ff 1f             	sar    edi,0x1f
c000806b:	01 c6                	add    esi,eax
c000806d:	89 d8                	mov    eax,ebx
c000806f:	11 d7                	adc    edi,edx
c0008071:	99                   	cdq    
c0008072:	39 f3                	cmp    ebx,esi
c0008074:	89 d0                	mov    eax,edx
c0008076:	19 f8                	sbb    eax,edi
c0008078:	b8 01 00 00 00       	mov    eax,0x1
c000807d:	72 76                	jb     c00080f5 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000807f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008082:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008086:	01 c8                	add    eax,ecx
c0008088:	99                   	cdq    
c0008089:	f7 fb                	idiv   ebx
c000808b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000808e:	29 d3                	sub    ebx,edx
c0008090:	89 de                	mov    esi,ebx
c0008092:	c1 fb 1f             	sar    ebx,0x1f
c0008095:	39 f0                	cmp    eax,esi
c0008097:	19 df                	sbb    edi,ebx
c0008099:	bb 00 00 00 00       	mov    ebx,0x0
c000809e:	72 04                	jb     c00080a4 <Pipe::write(unsigned long long, void*, int*)+0x60>
c00080a0:	89 c3                	mov    ebx,eax
c00080a2:	29 f3                	sub    ebx,esi
c00080a4:	89 c7                	mov    edi,eax
c00080a6:	29 df                	sub    edi,ebx
c00080a8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080ac:	74 0f                	je     c00080bd <Pipe::write(unsigned long long, void*, int*)+0x79>
c00080ae:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
c00080b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00080b5:	89 d7                	mov    edi,edx
c00080b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080bd:	85 db                	test   ebx,ebx
c00080bf:	74 0f                	je     c00080d0 <Pipe::write(unsigned long long, void*, int*)+0x8c>
c00080c1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00080c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00080c8:	89 d9                	mov    ecx,ebx
c00080ca:	03 74 24 3c          	add    esi,DWORD PTR [esp+0x3c]
c00080ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080d0:	01 45 14             	add    DWORD PTR [ebp+0x14],eax
c00080d3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080d8:	75 10                	jne    c00080ea <Pipe::write(unsigned long long, void*, int*)+0xa6>
c00080da:	83 ec 0c             	sub    esp,0xc
c00080dd:	68 b0 f6 01 c0       	push   0xc001f6b0
c00080e2:	e8 d6 83 00 00       	call   c00104bd <KePanic(char const*)>
c00080e7:	83 c4 10             	add    esp,0x10
c00080ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080f1:	89 10                	mov    DWORD PTR [eax],edx
c00080f3:	31 c0                	xor    eax,eax
c00080f5:	83 c4 1c             	add    esp,0x1c
c00080f8:	5b                   	pop    ebx
c00080f9:	5e                   	pop    esi
c00080fa:	5f                   	pop    edi
c00080fb:	5d                   	pop    ebp
c00080fc:	c3                   	ret    
c00080fd:	90                   	nop

c00080fe <Pipe::read(unsigned long long, void*, int*)>:
c00080fe:	55                   	push   ebp
c00080ff:	57                   	push   edi
c0008100:	56                   	push   esi
c0008101:	53                   	push   ebx
c0008102:	83 ec 1c             	sub    esp,0x1c
c0008105:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008109:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000810d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008111:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008114:	89 c8                	mov    eax,ecx
c0008116:	99                   	cdq    
c0008117:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000811b:	74 24                	je     c0008141 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000811d:	39 f9                	cmp    ecx,edi
c000811f:	89 d1                	mov    ecx,edx
c0008121:	19 f1                	sbb    ecx,esi
c0008123:	73 1c                	jae    c0008141 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008125:	fa                   	cli    
c0008126:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000812c:	e8 8f cb 00 00       	call   c0014cc0 <schedule()>
c0008131:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0008136:	48                   	dec    eax
c0008137:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000813c:	75 d3                	jne    c0008111 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000813e:	fb                   	sti    
c000813f:	eb d0                	jmp    c0008111 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008141:	39 f8                	cmp    eax,edi
c0008143:	89 d1                	mov    ecx,edx
c0008145:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008149:	19 f1                	sbb    ecx,esi
c000814b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000814f:	73 08                	jae    c0008159 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008151:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008159:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000815c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000815f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0008163:	29 f7                	sub    edi,esi
c0008165:	89 f8                	mov    eax,edi
c0008167:	99                   	cdq    
c0008168:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000816c:	89 d0                	mov    eax,edx
c000816e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008172:	19 c2                	sbb    edx,eax
c0008174:	89 f8                	mov    eax,edi
c0008176:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000817b:	89 ea                	mov    edx,ebp
c000817d:	29 c2                	sub    edx,eax
c000817f:	85 c0                	test   eax,eax
c0008181:	74 0b                	je     c000818e <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008183:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008186:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000818a:	89 c1                	mov    ecx,eax
c000818c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000818e:	85 d2                	test   edx,edx
c0008190:	74 0d                	je     c000819f <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008192:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008196:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008199:	89 d1                	mov    ecx,edx
c000819b:	89 c7                	mov    edi,eax
c000819d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000819f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00081a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00081a5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00081a8:	89 f7                	mov    edi,esi
c00081aa:	99                   	cdq    
c00081ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00081af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00081b3:	c1 ff 1f             	sar    edi,0x1f
c00081b6:	57                   	push   edi
c00081b7:	56                   	push   esi
c00081b8:	52                   	push   edx
c00081b9:	50                   	push   eax
c00081ba:	e8 01 5f 01 00       	call   c001e0c0 <__umoddi3>
c00081bf:	83 c4 10             	add    esp,0x10
c00081c2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00081c7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00081ca:	75 10                	jne    c00081dc <Pipe::read(unsigned long long, void*, int*)+0xde>
c00081cc:	83 ec 0c             	sub    esp,0xc
c00081cf:	68 cd f6 01 c0       	push   0xc001f6cd
c00081d4:	e8 e4 82 00 00       	call   c00104bd <KePanic(char const*)>
c00081d9:	83 c4 10             	add    esp,0x10
c00081dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00081e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081e4:	89 10                	mov    DWORD PTR [eax],edx
c00081e6:	83 c4 1c             	add    esp,0x1c
c00081e9:	31 c0                	xor    eax,eax
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    

c00081f0 <Pipe::Pipe(int)>:
c00081f0:	83 ec 0c             	sub    esp,0xc
c00081f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f7:	83 ec 08             	sub    esp,0x8
c00081fa:	6a 00                	push   0x0
c00081fc:	50                   	push   eax
c00081fd:	e8 78 0d 00 00       	call   c0008f7a <UnixFile::UnixFile(int)>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	ba f4 f6 01 c0       	mov    edx,0xc001f6f4
c000820a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000820e:	89 10                	mov    DWORD PTR [eax],edx
c0008210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008214:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008218:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000821b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008231:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008235:	83 ec 0c             	sub    esp,0xc
c0008238:	50                   	push   eax
c0008239:	e8 3d f6 ff ff       	call   c000787b <malloc>
c000823e:	83 c4 10             	add    esp,0x10
c0008241:	89 c2                	mov    edx,eax
c0008243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008247:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008252:	90                   	nop
c0008253:	83 c4 0c             	add    esp,0xc
c0008256:	c3                   	ret    
c0008257:	90                   	nop

c0008258 <VgaText::isAtty()>:
c0008258:	b0 01                	mov    al,0x1
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <VgaText::~VgaText()>:
c000825c:	83 ec 0c             	sub    esp,0xc
c000825f:	ba 3c f7 01 c0       	mov    edx,0xc001f73c
c0008264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008268:	89 10                	mov    DWORD PTR [eax],edx
c000826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000826e:	83 ec 0c             	sub    esp,0xc
c0008271:	50                   	push   eax
c0008272:	e8 e5 0e 00 00       	call   c000915c <UnixFile::~UnixFile()>
c0008277:	83 c4 10             	add    esp,0x10
c000827a:	90                   	nop
c000827b:	83 c4 0c             	add    esp,0xc
c000827e:	c3                   	ret    
c000827f:	90                   	nop

c0008280 <VgaText::~VgaText()>:
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	83 ec 0c             	sub    esp,0xc
c0008286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000828a:	e8 cd ff ff ff       	call   c000825c <VgaText::~VgaText()>
c000828f:	83 c4 10             	add    esp,0x10
c0008292:	83 ec 08             	sub    esp,0x8
c0008295:	68 84 01 00 00       	push   0x184
c000829a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829e:	e8 d1 22 00 00       	call   c000a574 <operator delete(void*, unsigned long)>
c00082a3:	83 c4 10             	add    esp,0x10
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <VgaText::read(unsigned long long, void*, int*)>:
c00082aa:	83 ec 10             	sub    esp,0x10
c00082ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082b9:	e8 23 46 00 00       	call   c000c8e1 <readKeyboard(VgaText*, char*, unsigned long)>
c00082be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082c2:	89 02                	mov    DWORD PTR [edx],eax
c00082c4:	31 c0                	xor    eax,eax
c00082c6:	83 c4 1c             	add    esp,0x1c
c00082c9:	c3                   	ret    

c00082ca <setTerminalScrollLock(bool)>:
c00082ca:	c3                   	ret    

c00082cb <doTerminalCycle()>:
c00082cb:	c3                   	ret    

c00082cc <addToTerminalCycle(VgaText*)>:
c00082cc:	c3                   	ret    

c00082cd <scrollTerminalScrollLock(int)>:
c00082cd:	c3                   	ret    

c00082ce <VgaText::updateTitle()>:
c00082ce:	c3                   	ret    
c00082cf:	90                   	nop

c00082d0 <VgaText::load()>:
c00082d0:	c3                   	ret    
c00082d1:	90                   	nop

c00082d2 <VgaText::updateCursor()>:
c00082d2:	83 ec 14             	sub    esp,0x14
c00082d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00082dc:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00082df:	e8 c8 f5 00 00       	call   c00178ac <HalConsoleCursorUpdate(int, int)>
c00082e4:	83 c4 1c             	add    esp,0x1c
c00082e7:	c3                   	ret    

c00082e8 <VgaText::doANSI_SGR(int)>:
c00082e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082f0:	85 d2                	test   edx,edx
c00082f2:	75 0b                	jne    c00082ff <VgaText::doANSI_SGR(int)+0x17>
c00082f4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00082f7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082fa:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00082fd:	eb 59                	jmp    c0008358 <VgaText::doANSI_SGR(int)+0x70>
c00082ff:	83 fa 07             	cmp    edx,0x7
c0008302:	75 0b                	jne    c000830f <VgaText::doANSI_SGR(int)+0x27>
c0008304:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008307:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000830a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000830d:	eb 49                	jmp    c0008358 <VgaText::doANSI_SGR(int)+0x70>
c000830f:	83 fa 1b             	cmp    edx,0x1b
c0008312:	74 e0                	je     c00082f4 <VgaText::doANSI_SGR(int)+0xc>
c0008314:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008317:	83 f9 07             	cmp    ecx,0x7
c000831a:	77 09                	ja     c0008325 <VgaText::doANSI_SGR(int)+0x3d>
c000831c:	8b 14 8d 00 19 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde700]
c0008323:	eb 20                	jmp    c0008345 <VgaText::doANSI_SGR(int)+0x5d>
c0008325:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008328:	83 f9 07             	cmp    ecx,0x7
c000832b:	77 09                	ja     c0008336 <VgaText::doANSI_SGR(int)+0x4e>
c000832d:	8b 14 8d 00 19 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde700]
c0008334:	eb 22                	jmp    c0008358 <VgaText::doANSI_SGR(int)+0x70>
c0008336:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008339:	83 f9 07             	cmp    ecx,0x7
c000833c:	77 0b                	ja     c0008349 <VgaText::doANSI_SGR(int)+0x61>
c000833e:	8b 14 95 b8 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde848]
c0008345:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008348:	c3                   	ret    
c0008349:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000834c:	83 f9 07             	cmp    ecx,0x7
c000834f:	77 0a                	ja     c000835b <VgaText::doANSI_SGR(int)+0x73>
c0008351:	8b 14 95 90 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde870]
c0008358:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000835b:	c3                   	ret    

c000835c <VgaText::setDefaultBgColour(VgaColour)>:
c000835c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008364:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008367:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000836a:	c3                   	ret    
c000836b:	90                   	nop

c000836c <VgaText::setDefaultFgColour(VgaColour)>:
c000836c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008374:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008377:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000837a:	c3                   	ret    
c000837b:	90                   	nop

c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000837c:	53                   	push   ebx
c000837d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008381:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008385:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008389:	51                   	push   ecx
c000838a:	e8 cd ff ff ff       	call   c000835c <VgaText::setDefaultBgColour(VgaColour)>
c000838f:	58                   	pop    eax
c0008390:	5a                   	pop    edx
c0008391:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008395:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008399:	5b                   	pop    ebx
c000839a:	eb d0                	jmp    c000836c <VgaText::setDefaultFgColour(VgaColour)>

c000839c <VgaText::setTitleTextColour(VgaColour)>:
c000839c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083a4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00083a7:	c3                   	ret    

c00083a8 <VgaText::setTitleColour(VgaColour)>:
c00083a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00083b3:	c3                   	ret    

c00083b4 <VgaText::setTitle(char*)>:
c00083b4:	c3                   	ret    
c00083b5:	90                   	nop

c00083b6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00083b6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00083ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00083bf:	83 e0 0f             	and    eax,0xf
c00083c2:	c1 e2 04             	shl    edx,0x4
c00083c5:	09 d0                	or     eax,edx
c00083c7:	c3                   	ret    

c00083c8 <VgaText::scrollScreen()>:
c00083c8:	55                   	push   ebp
c00083c9:	57                   	push   edi
c00083ca:	56                   	push   esi
c00083cb:	be 01 00 00 00       	mov    esi,0x1
c00083d0:	53                   	push   ebx
c00083d1:	83 ec 0c             	sub    esp,0xc
c00083d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00083db:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00083e1:	31 ff                	xor    edi,edi
c00083e3:	01 e9                	add    ecx,ebp
c00083e5:	8a 01                	mov    al,BYTE PTR [ecx]
c00083e7:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00083ed:	83 fe 18             	cmp    esi,0x18
c00083f0:	75 20                	jne    c0008412 <VgaText::scrollScreen()+0x4a>
c00083f2:	f7 c7 01 00 00 00    	test   edi,0x1
c00083f8:	74 15                	je     c000840f <VgaText::scrollScreen()+0x47>
c00083fa:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083fe:	50                   	push   eax
c00083ff:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008403:	50                   	push   eax
c0008404:	e8 ad ff ff ff       	call   c00083b6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008409:	5a                   	pop    edx
c000840a:	5a                   	pop    edx
c000840b:	88 01                	mov    BYTE PTR [ecx],al
c000840d:	eb 03                	jmp    c0008412 <VgaText::scrollScreen()+0x4a>
c000840f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008412:	47                   	inc    edi
c0008413:	41                   	inc    ecx
c0008414:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000841a:	75 c9                	jne    c00083e5 <VgaText::scrollScreen()+0x1d>
c000841c:	46                   	inc    esi
c000841d:	83 fe 19             	cmp    esi,0x19
c0008420:	75 b9                	jne    c00083db <VgaText::scrollScreen()+0x13>
c0008422:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008428:	75 1f                	jne    c0008449 <VgaText::scrollScreen()+0x81>
c000842a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000842e:	74 05                	je     c0008435 <VgaText::scrollScreen()+0x6d>
c0008430:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008433:	eb 14                	jmp    c0008449 <VgaText::scrollScreen()+0x81>
c0008435:	50                   	push   eax
c0008436:	50                   	push   eax
c0008437:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000843b:	50                   	push   eax
c000843c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008440:	50                   	push   eax
c0008441:	e8 fa f2 00 00       	call   c0017740 <HalConsoleScroll(int, int)>
c0008446:	83 c4 10             	add    esp,0x10
c0008449:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	5b                   	pop    ebx
c0008451:	5e                   	pop    esi
c0008452:	5f                   	pop    edi
c0008453:	5d                   	pop    ebp
c0008454:	e9 79 fe ff ff       	jmp    c00082d2 <VgaText::updateCursor()>
c0008459:	90                   	nop

c000845a <VgaText::combineCharAndColour(char, unsigned char)>:
c000845a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000845f:	c1 e0 08             	shl    eax,0x8
c0008462:	89 c2                	mov    edx,eax
c0008464:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008469:	09 d0                	or     eax,edx
c000846b:	c3                   	ret    

c000846c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000846c:	55                   	push   ebp
c000846d:	57                   	push   edi
c000846e:	56                   	push   esi
c000846f:	53                   	push   ebx
c0008470:	83 ec 1c             	sub    esp,0x1c
c0008473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008477:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000847b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000847f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008487:	89 f0                	mov    eax,esi
c0008489:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000848d:	0f b6 c0             	movzx  eax,al
c0008490:	50                   	push   eax
c0008491:	0f b6 c3             	movzx  eax,bl
c0008494:	50                   	push   eax
c0008495:	e8 1c ff ff ff       	call   c00083b6 <VgaText::combineColours(unsigned char, unsigned char)>
c000849a:	5a                   	pop    edx
c000849b:	59                   	pop    ecx
c000849c:	0f be 54 24 34       	movsx  edx,BYTE PTR [esp+0x34]
c00084a1:	0f b6 c0             	movzx  eax,al
c00084a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00084a8:	50                   	push   eax
c00084a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00084ad:	e8 a8 ff ff ff       	call   c000845a <VgaText::combineCharAndColour(char, unsigned char)>
c00084b2:	5a                   	pop    edx
c00084b3:	59                   	pop    ecx
c00084b4:	89 c2                	mov    edx,eax
c00084b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00084bd:	89 c1                	mov    ecx,eax
c00084bf:	6b c5 50             	imul   eax,ebp,0x50
c00084c2:	01 f8                	add    eax,edi
c00084c4:	0f b7 c0             	movzx  eax,ax
c00084c7:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c00084cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cf:	39 05 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,eax
c00084d5:	75 24                	jne    c00084fb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x8f>
c00084d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00084db:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00084df:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c00084e3:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c00084e7:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00084eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00084ef:	83 c4 1c             	add    esp,0x1c
c00084f2:	5b                   	pop    ebx
c00084f3:	5e                   	pop    esi
c00084f4:	5f                   	pop    edi
c00084f5:	5d                   	pop    ebp
c00084f6:	e9 4d f3 00 00       	jmp    c0017848 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00084fb:	83 c4 1c             	add    esp,0x1c
c00084fe:	5b                   	pop    ebx
c00084ff:	5e                   	pop    esi
c0008500:	5f                   	pop    edi
c0008501:	5d                   	pop    ebp
c0008502:	c3                   	ret    
c0008503:	90                   	nop

c0008504 <VgaText::getCursorX()>:
c0008504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008508:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000850b:	c3                   	ret    

c000850c <VgaText::getCursorY()>:
c000850c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008510:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008513:	c3                   	ret    

c0008514 <VgaText::setCursor(int, int)>:
c0008514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000851c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000851f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008523:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008526:	e9 a7 fd ff ff       	jmp    c00082d2 <VgaText::updateCursor()>

c000852b <setActiveTerminal(VgaText*)>:
c000852b:	53                   	push   ebx
c000852c:	83 ec 08             	sub    esp,0x8
c000852f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008533:	85 db                	test   ebx,ebx
c0008535:	75 11                	jne    c0008548 <setActiveTerminal(VgaText*)+0x1d>
c0008537:	c7 44 24 10 08 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f708
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	e9 75 7f 00 00       	jmp    c00104bd <KePanic(char const*)>
c0008548:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c000854d:	85 c0                	test   eax,eax
c000854f:	74 0c                	je     c000855d <setActiveTerminal(VgaText*)+0x32>
c0008551:	83 ec 0c             	sub    esp,0xc
c0008554:	50                   	push   eax
c0008555:	e8 78 fd ff ff       	call   c00082d2 <VgaText::updateCursor()>
c000855a:	83 c4 10             	add    esp,0x10
c000855d:	50                   	push   eax
c000855e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008561:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008564:	53                   	push   ebx
c0008565:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c000856b:	e8 a4 ff ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c0008570:	83 c4 18             	add    esp,0x18
c0008573:	5b                   	pop    ebx
c0008574:	c3                   	ret    
c0008575:	90                   	nop

c0008576 <VgaText::clearScreen()>:
c0008576:	57                   	push   edi
c0008577:	56                   	push   esi
c0008578:	31 f6                	xor    esi,esi
c000857a:	53                   	push   ebx
c000857b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000857f:	52                   	push   edx
c0008580:	6a 00                	push   0x0
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 8a ff ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c000858a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008597:	7e 20                	jle    c00085b9 <VgaText::clearScreen()+0x43>
c0008599:	31 ff                	xor    edi,edi
c000859b:	50                   	push   eax
c000859c:	50                   	push   eax
c000859d:	56                   	push   esi
c000859e:	57                   	push   edi
c000859f:	47                   	inc    edi
c00085a0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085a3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085a6:	6a 20                	push   0x20
c00085a8:	53                   	push   ebx
c00085a9:	e8 be fe ff ff       	call   c000846c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ae:	83 c4 20             	add    esp,0x20
c00085b1:	83 ff 50             	cmp    edi,0x50
c00085b4:	75 e5                	jne    c000859b <VgaText::clearScreen()+0x25>
c00085b6:	46                   	inc    esi
c00085b7:	eb db                	jmp    c0008594 <VgaText::clearScreen()+0x1e>
c00085b9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00085c0:	5b                   	pop    ebx
c00085c1:	5e                   	pop    esi
c00085c2:	5f                   	pop    edi
c00085c3:	c3                   	ret    

c00085c4 <VgaText::setCursorX(int)>:
c00085c4:	83 ec 10             	sub    esp,0x10
c00085c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085cb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00085ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085d2:	50                   	push   eax
c00085d3:	e8 3c ff ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c00085d8:	83 c4 1c             	add    esp,0x1c
c00085db:	c3                   	ret    

c00085dc <VgaText::setCursorY(int)>:
c00085dc:	83 ec 10             	sub    esp,0x10
c00085df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00085e7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00085ea:	50                   	push   eax
c00085eb:	e8 24 ff ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c00085f0:	83 c4 1c             	add    esp,0x1c
c00085f3:	c3                   	ret    

c00085f4 <VgaText::incrementCursor(bool)>:
c00085f4:	56                   	push   esi
c00085f5:	53                   	push   ebx
c00085f6:	51                   	push   ecx
c00085f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00085ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008602:	40                   	inc    eax
c0008603:	83 f8 50             	cmp    eax,0x50
c0008606:	74 05                	je     c000860d <VgaText::incrementCursor(bool)+0x19>
c0008608:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000860b:	eb 24                	jmp    c0008631 <VgaText::incrementCursor(bool)+0x3d>
c000860d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008617:	8d 50 01             	lea    edx,[eax+0x1]
c000861a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000861d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008620:	75 0f                	jne    c0008631 <VgaText::incrementCursor(bool)+0x3d>
c0008622:	83 ec 0c             	sub    esp,0xc
c0008625:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008628:	53                   	push   ebx
c0008629:	e8 9a fd ff ff       	call   c00083c8 <VgaText::scrollScreen()>
c000862e:	83 c4 10             	add    esp,0x10
c0008631:	89 f0                	mov    eax,esi
c0008633:	84 c0                	test   al,al
c0008635:	74 0c                	je     c0008643 <VgaText::incrementCursor(bool)+0x4f>
c0008637:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000863b:	5a                   	pop    edx
c000863c:	5b                   	pop    ebx
c000863d:	5e                   	pop    esi
c000863e:	e9 8f fc ff ff       	jmp    c00082d2 <VgaText::updateCursor()>
c0008643:	58                   	pop    eax
c0008644:	5b                   	pop    ebx
c0008645:	5e                   	pop    esi
c0008646:	c3                   	ret    
c0008647:	90                   	nop

c0008648 <VgaText::decrementCursor(bool)>:
c0008648:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000864c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008650:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008653:	85 c0                	test   eax,eax
c0008655:	74 04                	je     c000865b <VgaText::decrementCursor(bool)+0x13>
c0008657:	48                   	dec    eax
c0008658:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000865b:	84 c9                	test   cl,cl
c000865d:	74 09                	je     c0008668 <VgaText::decrementCursor(bool)+0x20>
c000865f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008663:	e9 6a fc ff ff       	jmp    c00082d2 <VgaText::updateCursor()>
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000866a:	53                   	push   ebx
c000866b:	83 ec 08             	sub    esp,0x8
c000866e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008672:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008676:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000867a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000867e:	3c 07                	cmp    al,0x7
c0008680:	75 21                	jne    c00086a3 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008682:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000868a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008692:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000869a:	83 c4 08             	add    esp,0x8
c000869d:	5b                   	pop    ebx
c000869e:	e9 04 2e 00 00       	jmp    c000b4a7 <Krnl::beep(int, int, bool)>
c00086a3:	3c 0d                	cmp    al,0xd
c00086a5:	75 09                	jne    c00086b0 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00086a7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086ae:	eb 2c                	jmp    c00086dc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00086b0:	3c 0a                	cmp    al,0xa
c00086b2:	75 31                	jne    c00086e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00086b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00086b7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086be:	8d 50 01             	lea    edx,[eax+0x1]
c00086c1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00086c4:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00086c7:	75 0f                	jne    c00086d8 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00086cf:	53                   	push   ebx
c00086d0:	e8 f3 fc ff ff       	call   c00083c8 <VgaText::scrollScreen()>
c00086d5:	83 c4 10             	add    esp,0x10
c00086d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00086dc:	83 c4 08             	add    esp,0x8
c00086df:	5b                   	pop    ebx
c00086e0:	e9 ed fb ff ff       	jmp    c00082d2 <VgaText::updateCursor()>
c00086e5:	3c 08                	cmp    al,0x8
c00086e7:	75 25                	jne    c000870e <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00086e9:	50                   	push   eax
c00086ea:	50                   	push   eax
c00086eb:	6a 01                	push   0x1
c00086ed:	53                   	push   ebx
c00086ee:	e8 55 ff ff ff       	call   c0008648 <VgaText::decrementCursor(bool)>
c00086f3:	5a                   	pop    edx
c00086f4:	59                   	pop    ecx
c00086f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00086f8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086fb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086fe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008701:	6a 20                	push   0x20
c0008703:	53                   	push   ebx
c0008704:	e8 63 fd ff ff       	call   c000846c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008709:	83 c4 28             	add    esp,0x28
c000870c:	5b                   	pop    ebx
c000870d:	c3                   	ret    
c000870e:	83 ec 08             	sub    esp,0x8
c0008711:	0f be c0             	movsx  eax,al
c0008714:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008717:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	50                   	push   eax
c000871d:	53                   	push   ebx
c000871e:	e8 49 fd ff ff       	call   c000846c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008723:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008727:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000872f:	83 c4 28             	add    esp,0x28
c0008732:	5b                   	pop    ebx
c0008733:	e9 bc fe ff ff       	jmp    c00085f4 <VgaText::incrementCursor(bool)>

c0008738 <VgaText::putchar(char)>:
c0008738:	57                   	push   edi
c0008739:	56                   	push   esi
c000873a:	53                   	push   ebx
c000873b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000873f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008743:	3c 5b                	cmp    al,0x5b
c0008745:	75 18                	jne    c000875f <VgaText::putchar(char)+0x27>
c0008747:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000874b:	74 1f                	je     c000876c <VgaText::putchar(char)+0x34>
c000874d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008753:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000875a:	e9 b8 00 00 00       	jmp    c0008817 <VgaText::putchar(char)+0xdf>
c000875f:	3c 1b                	cmp    al,0x1b
c0008761:	75 09                	jne    c000876c <VgaText::putchar(char)+0x34>
c0008763:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008767:	e9 ab 00 00 00       	jmp    c0008817 <VgaText::putchar(char)+0xdf>
c000876c:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0008770:	89 f9                	mov    ecx,edi
c0008772:	84 c9                	test   cl,cl
c0008774:	0f 84 8a 00 00 00    	je     c0008804 <VgaText::putchar(char)+0xcc>
c000877a:	8d 50 c0             	lea    edx,[eax-0x40]
c000877d:	80 fa 3e             	cmp    dl,0x3e
c0008780:	77 6e                	ja     c00087f0 <VgaText::putchar(char)+0xb8>
c0008782:	3c 6d                	cmp    al,0x6d
c0008784:	75 3f                	jne    c00087c5 <VgaText::putchar(char)+0x8d>
c0008786:	31 f6                	xor    esi,esi
c0008788:	31 d2                	xor    edx,edx
c000878a:	31 c0                	xor    eax,eax
c000878c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000878f:	7e 25                	jle    c00087b6 <VgaText::putchar(char)+0x7e>
c0008791:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008796:	80 fa 3b             	cmp    dl,0x3b
c0008799:	75 0f                	jne    c00087aa <VgaText::putchar(char)+0x72>
c000879b:	50                   	push   eax
c000879c:	53                   	push   ebx
c000879d:	e8 46 fb ff ff       	call   c00082e8 <VgaText::doANSI_SGR(int)>
c00087a2:	59                   	pop    ecx
c00087a3:	31 d2                	xor    edx,edx
c00087a5:	58                   	pop    eax
c00087a6:	31 c0                	xor    eax,eax
c00087a8:	eb 09                	jmp    c00087b3 <VgaText::putchar(char)+0x7b>
c00087aa:	6b c0 0a             	imul   eax,eax,0xa
c00087ad:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00087b1:	89 fa                	mov    edx,edi
c00087b3:	46                   	inc    esi
c00087b4:	eb d6                	jmp    c000878c <VgaText::putchar(char)+0x54>
c00087b6:	84 d2                	test   dl,dl
c00087b8:	74 2e                	je     c00087e8 <VgaText::putchar(char)+0xb0>
c00087ba:	50                   	push   eax
c00087bb:	53                   	push   ebx
c00087bc:	e8 27 fb ff ff       	call   c00082e8 <VgaText::doANSI_SGR(int)>
c00087c1:	58                   	pop    eax
c00087c2:	5a                   	pop    edx
c00087c3:	eb 23                	jmp    c00087e8 <VgaText::putchar(char)+0xb0>
c00087c5:	3c 4a                	cmp    al,0x4a
c00087c7:	75 1f                	jne    c00087e8 <VgaText::putchar(char)+0xb0>
c00087c9:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00087cd:	75 19                	jne    c00087e8 <VgaText::putchar(char)+0xb0>
c00087cf:	83 ec 0c             	sub    esp,0xc
c00087d2:	53                   	push   ebx
c00087d3:	e8 9e fd ff ff       	call   c0008576 <VgaText::clearScreen()>
c00087d8:	83 c4 0c             	add    esp,0xc
c00087db:	6a 00                	push   0x0
c00087dd:	6a 00                	push   0x0
c00087df:	53                   	push   ebx
c00087e0:	e8 2f fd ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00087ee:	eb 27                	jmp    c0008817 <VgaText::putchar(char)+0xdf>
c00087f0:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00087f3:	83 fa 0e             	cmp    edx,0xe
c00087f6:	7f 1f                	jg     c0008817 <VgaText::putchar(char)+0xdf>
c00087f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00087fb:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00087fe:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008802:	eb 13                	jmp    c0008817 <VgaText::putchar(char)+0xdf>
c0008804:	0f be c0             	movsx  eax,al
c0008807:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000880a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000880d:	50                   	push   eax
c000880e:	53                   	push   ebx
c000880f:	e8 56 fe ff ff       	call   c000866a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008814:	83 c4 10             	add    esp,0x10
c0008817:	5b                   	pop    ebx
c0008818:	5e                   	pop    esi
c0008819:	5f                   	pop    edi
c000881a:	c3                   	ret    
c000881b:	90                   	nop

c000881c <VgaText::putx(unsigned int)>:
c000881c:	57                   	push   edi
c000881d:	b9 11 00 00 00       	mov    ecx,0x11
c0008822:	56                   	push   esi
c0008823:	be 16 f7 01 c0       	mov    esi,0xc001f716
c0008828:	53                   	push   ebx
c0008829:	83 ec 20             	sub    esp,0x20
c000882c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008830:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008834:	fc                   	cld    
c0008835:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008837:	be 08 00 00 00       	mov    esi,0x8
c000883c:	50                   	push   eax
c000883d:	50                   	push   eax
c000883e:	89 d8                	mov    eax,ebx
c0008840:	c1 e3 04             	shl    ebx,0x4
c0008843:	c1 e8 1c             	shr    eax,0x1c
c0008846:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000884b:	50                   	push   eax
c000884c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008850:	e8 e3 fe ff ff       	call   c0008738 <VgaText::putchar(char)>
c0008855:	83 c4 10             	add    esp,0x10
c0008858:	4e                   	dec    esi
c0008859:	75 e1                	jne    c000883c <VgaText::putx(unsigned int)+0x20>
c000885b:	83 c4 20             	add    esp,0x20
c000885e:	5b                   	pop    ebx
c000885f:	5e                   	pop    esi
c0008860:	5f                   	pop    edi
c0008861:	c3                   	ret    

c0008862 <VgaText::puts(char const*)>:
c0008862:	53                   	push   ebx
c0008863:	83 ec 08             	sub    esp,0x8
c0008866:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000886a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000886d:	84 c0                	test   al,al
c000886f:	74 12                	je     c0008883 <VgaText::puts(char const*)+0x21>
c0008871:	51                   	push   ecx
c0008872:	43                   	inc    ebx
c0008873:	51                   	push   ecx
c0008874:	50                   	push   eax
c0008875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008879:	e8 ba fe ff ff       	call   c0008738 <VgaText::putchar(char)>
c000887e:	83 c4 10             	add    esp,0x10
c0008881:	eb e7                	jmp    c000886a <VgaText::puts(char const*)+0x8>
c0008883:	83 c4 08             	add    esp,0x8
c0008886:	5b                   	pop    ebx
c0008887:	c3                   	ret    

c0008888 <VgaText::write(unsigned long long, void*, int*)>:
c0008888:	55                   	push   ebp
c0008889:	57                   	push   edi
c000888a:	56                   	push   esi
c000888b:	53                   	push   ebx
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008893:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000889b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00088a2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00088a5:	39 eb                	cmp    ebx,ebp
c00088a7:	74 13                	je     c00088bc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00088a9:	50                   	push   eax
c00088aa:	43                   	inc    ebx
c00088ab:	50                   	push   eax
c00088ac:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00088b0:	50                   	push   eax
c00088b1:	56                   	push   esi
c00088b2:	e8 81 fe ff ff       	call   c0008738 <VgaText::putchar(char)>
c00088b7:	83 c4 10             	add    esp,0x10
c00088ba:	eb e9                	jmp    c00088a5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00088bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088c0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00088c7:	89 38                	mov    DWORD PTR [eax],edi
c00088c9:	83 c4 0c             	add    esp,0xc
c00088cc:	31 c0                	xor    eax,eax
c00088ce:	5b                   	pop    ebx
c00088cf:	5e                   	pop    esi
c00088d0:	5f                   	pop    edi
c00088d1:	5d                   	pop    ebp
c00088d2:	c3                   	ret    
c00088d3:	90                   	nop

c00088d4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00088d4:	55                   	push   ebp
c00088d5:	57                   	push   edi
c00088d6:	56                   	push   esi
c00088d7:	53                   	push   ebx
c00088d8:	83 ec 0c             	sub    esp,0xc
c00088db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00088df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00088e4:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00088eb:	50                   	push   eax
c00088ec:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00088f1:	50                   	push   eax
c00088f2:	e8 bf fa ff ff       	call   c00083b6 <VgaText::combineColours(unsigned char, unsigned char)>
c00088f7:	5a                   	pop    edx
c00088f8:	66 6b 57 18 50       	imul   dx,WORD PTR [edi+0x18],0x50
c00088fd:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c0008900:	59                   	pop    ecx
c0008901:	0f b6 f0             	movzx  esi,al
c0008904:	0f b7 d2             	movzx  edx,dx
c0008907:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000890b:	01 d2                	add    edx,edx
c000890d:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008910:	89 d5                	mov    ebp,edx
c0008912:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008915:	84 c0                	test   al,al
c0008917:	0f 84 f6 00 00 00    	je     c0008a13 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000891d:	3c 0d                	cmp    al,0xd
c000891f:	75 0c                	jne    c000892d <VgaText::puts(char const*, VgaColour, VgaColour)+0x59>
c0008921:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0008928:	e9 e0 00 00 00       	jmp    c0008a0d <VgaText::puts(char const*, VgaColour, VgaColour)+0x139>
c000892d:	3c 0a                	cmp    al,0xa
c000892f:	75 47                	jne    c0008978 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa4>
c0008931:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0008934:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c000893b:	8d 50 01             	lea    edx,[eax+0x1]
c000893e:	89 57 18             	mov    DWORD PTR [edi+0x18],edx
c0008941:	3b 57 10             	cmp    edx,DWORD PTR [edi+0x10]
c0008944:	75 0f                	jne    c0008955 <VgaText::puts(char const*, VgaColour, VgaColour)+0x81>
c0008946:	83 ec 0c             	sub    esp,0xc
c0008949:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c000894c:	57                   	push   edi
c000894d:	e8 76 fa ff ff       	call   c00083c8 <VgaText::scrollScreen()>
c0008952:	83 c4 10             	add    esp,0x10
c0008955:	83 ec 0c             	sub    esp,0xc
c0008958:	57                   	push   edi
c0008959:	e8 74 f9 ff ff       	call   c00082d2 <VgaText::updateCursor()>
c000895e:	66 6b 57 18 50       	imul   dx,WORD PTR [edi+0x18],0x50
c0008963:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c0008966:	83 c4 10             	add    esp,0x10
c0008969:	0f b7 d2             	movzx  edx,dx
c000896c:	01 d2                	add    edx,edx
c000896e:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008971:	89 d5                	mov    ebp,edx
c0008973:	e9 95 00 00 00       	jmp    c0008a0d <VgaText::puts(char const*, VgaColour, VgaColour)+0x139>
c0008978:	3c 08                	cmp    al,0x8
c000897a:	75 37                	jne    c00089b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xdf>
c000897c:	51                   	push   ecx
c000897d:	51                   	push   ecx
c000897e:	6a 01                	push   0x1
c0008980:	57                   	push   edi
c0008981:	e8 c2 fc ff ff       	call   c0008648 <VgaText::decrementCursor(bool)>
c0008986:	5d                   	pop    ebp
c0008987:	58                   	pop    eax
c0008988:	ff 77 18             	push   DWORD PTR [edi+0x18]
c000898b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c000898e:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0008991:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0008994:	6a 20                	push   0x20
c0008996:	57                   	push   edi
c0008997:	e8 d0 fa ff ff       	call   c000846c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000899c:	66 6b 57 18 50       	imul   dx,WORD PTR [edi+0x18],0x50
c00089a1:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c00089a4:	83 c4 20             	add    esp,0x20
c00089a7:	0f b7 d2             	movzx  edx,dx
c00089aa:	01 d2                	add    edx,edx
c00089ac:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c00089af:	89 d5                	mov    ebp,edx
c00089b1:	eb 5a                	jmp    c0008a0d <VgaText::puts(char const*, VgaColour, VgaColour)+0x139>
c00089b3:	52                   	push   edx
c00089b4:	52                   	push   edx
c00089b5:	56                   	push   esi
c00089b6:	50                   	push   eax
c00089b7:	e8 9e fa ff ff       	call   c000845a <VgaText::combineCharAndColour(char, unsigned char)>
c00089bc:	83 c4 10             	add    esp,0x10
c00089bf:	66 89 45 00          	mov    WORD PTR [ebp+0x0],ax
c00089c3:	39 3d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,edi
c00089c9:	75 1d                	jne    c00089e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x114>
c00089cb:	83 ec 0c             	sub    esp,0xc
c00089ce:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00089d1:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00089d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00089d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00089dc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00089df:	50                   	push   eax
c00089e0:	e8 63 ee 00 00       	call   c0017848 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00089e5:	83 c4 20             	add    esp,0x20
c00089e8:	50                   	push   eax
c00089e9:	83 c5 02             	add    ebp,0x2
c00089ec:	50                   	push   eax
c00089ed:	6a 00                	push   0x0
c00089ef:	57                   	push   edi
c00089f0:	e8 ff fb ff ff       	call   c00085f4 <VgaText::incrementCursor(bool)>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00089fc:	75 0f                	jne    c0008a0d <VgaText::puts(char const*, VgaColour, VgaColour)+0x139>
c00089fe:	66 6b 57 18 50       	imul   dx,WORD PTR [edi+0x18],0x50
c0008a03:	0f b7 d2             	movzx  edx,dx
c0008a06:	01 d2                	add    edx,edx
c0008a08:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008a0b:	89 d5                	mov    ebp,edx
c0008a0d:	43                   	inc    ebx
c0008a0e:	e9 ff fe ff ff       	jmp    c0008912 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3e>
c0008a13:	83 ec 0c             	sub    esp,0xc
c0008a16:	57                   	push   edi
c0008a17:	e8 b6 f8 ff ff       	call   c00082d2 <VgaText::updateCursor()>
c0008a1c:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	5b                   	pop    ebx
c0008a27:	5e                   	pop    esi
c0008a28:	5f                   	pop    edi
c0008a29:	5d                   	pop    ebp
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <VgaText::VgaText(char const*)>:
c0008a2c:	56                   	push   esi
c0008a2d:	53                   	push   ebx
c0008a2e:	83 ec 04             	sub    esp,0x4
c0008a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a35:	83 ec 08             	sub    esp,0x8
c0008a38:	6a 00                	push   0x0
c0008a3a:	50                   	push   eax
c0008a3b:	e8 3a 05 00 00       	call   c0008f7a <UnixFile::UnixFile(int)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	ba 3c f7 01 c0       	mov    edx,0xc001f73c
c0008a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a4c:	89 10                	mov    DWORD PTR [eax],edx
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a68:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a70:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a78:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a83:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a8e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a99:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aa4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008aab:	83 ec 0c             	sub    esp,0xc
c0008aae:	6a 01                	push   0x1
c0008ab0:	e8 0a 09 00 00       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	89 c2                	mov    edx,eax
c0008aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ac1:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008acb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ace:	89 c6                	mov    esi,eax
c0008ad0:	e8 8b f0 ff ff       	call   c0007b60 <Phys::allocatePage()>
c0008ad5:	68 05 0c 00 00       	push   0xc05
c0008ada:	56                   	push   esi
c0008adb:	50                   	push   eax
c0008adc:	53                   	push   ebx
c0008add:	e8 98 0f 00 00       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ae2:	83 c4 10             	add    esp,0x10
c0008ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008aec:	83 ec 04             	sub    esp,0x4
c0008aef:	68 a0 0f 00 00       	push   0xfa0
c0008af4:	6a 00                	push   0x0
c0008af6:	50                   	push   eax
c0008af7:	e8 84 7a ff ff       	call   c0000580 <memset>
c0008afc:	83 c4 10             	add    esp,0x10
c0008aff:	83 ec 04             	sub    esp,0x4
c0008b02:	6a 00                	push   0x0
c0008b04:	6a 07                	push   0x7
c0008b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b0a:	e8 6d f8 ff ff       	call   c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008b0f:	83 c4 10             	add    esp,0x10
c0008b12:	83 ec 04             	sub    esp,0x4
c0008b15:	6a 00                	push   0x0
c0008b17:	6a 00                	push   0x0
c0008b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1d:	e8 f2 f9 ff ff       	call   c0008514 <VgaText::setCursor(int, int)>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	83 ec 0c             	sub    esp,0xc
c0008b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b2c:	e8 45 fa ff ff       	call   c0008576 <VgaText::clearScreen()>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b38:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b40:	05 82 00 00 00       	add    eax,0x82
c0008b45:	83 ec 04             	sub    esp,0x4
c0008b48:	68 80 00 00 00       	push   0x80
c0008b4d:	6a 00                	push   0x0
c0008b4f:	50                   	push   eax
c0008b50:	e8 2b 7a ff ff       	call   c0000580 <memset>
c0008b55:	83 c4 10             	add    esp,0x10
c0008b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b5c:	05 02 01 00 00       	add    eax,0x102
c0008b61:	83 ec 04             	sub    esp,0x4
c0008b64:	68 80 00 00 00       	push   0x80
c0008b69:	6a 00                	push   0x0
c0008b6b:	50                   	push   eax
c0008b6c:	e8 0f 7a ff ff       	call   c0000580 <memset>
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	90                   	nop
c0008b75:	83 c4 04             	add    esp,0x4
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    
c0008b7b:	90                   	nop

c0008b7c <VgaText::receiveKey(unsigned char)>:
c0008b7c:	55                   	push   ebp
c0008b7d:	57                   	push   edi
c0008b7e:	56                   	push   esi
c0008b7f:	53                   	push   ebx
c0008b80:	83 ec 1c             	sub    esp,0x1c
c0008b83:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b87:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b8b:	89 f0                	mov    eax,esi
c0008b8d:	84 c0                	test   al,al
c0008b8f:	0f 84 3f 01 00 00    	je     c0008cd4 <VgaText::receiveKey(unsigned char)+0x158>
c0008b95:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b9b:	3c 08                	cmp    al,0x8
c0008b9d:	75 66                	jne    c0008c05 <VgaText::receiveKey(unsigned char)+0x89>
c0008b9f:	83 ec 0c             	sub    esp,0xc
c0008ba2:	57                   	push   edi
c0008ba3:	e8 08 7a ff ff       	call   c00005b0 <strlen>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	85 c0                	test   eax,eax
c0008bad:	0f 84 e6 00 00 00    	je     c0008c99 <VgaText::receiveKey(unsigned char)+0x11d>
c0008bb3:	50                   	push   eax
c0008bb4:	50                   	push   eax
c0008bb5:	6a 08                	push   0x8
c0008bb7:	53                   	push   ebx
c0008bb8:	e8 7b fb ff ff       	call   c0008738 <VgaText::putchar(char)>
c0008bbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008bc0:	e8 eb 79 ff ff       	call   c00005b0 <strlen>
c0008bc5:	83 c4 10             	add    esp,0x10
c0008bc8:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008bcf:	3c 1f                	cmp    al,0x1f
c0008bd1:	7f 1c                	jg     c0008bef <VgaText::receiveKey(unsigned char)+0x73>
c0008bd3:	8d 50 f8             	lea    edx,[eax-0x8]
c0008bd6:	80 fa 02             	cmp    dl,0x2
c0008bd9:	76 14                	jbe    c0008bef <VgaText::receiveKey(unsigned char)+0x73>
c0008bdb:	3c 0d                	cmp    al,0xd
c0008bdd:	74 10                	je     c0008bef <VgaText::receiveKey(unsigned char)+0x73>
c0008bdf:	55                   	push   ebp
c0008be0:	55                   	push   ebp
c0008be1:	68 27 f7 01 c0       	push   0xc001f727
c0008be6:	53                   	push   ebx
c0008be7:	e8 76 fc ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	83 ec 0c             	sub    esp,0xc
c0008bf2:	57                   	push   edi
c0008bf3:	e8 b8 79 ff ff       	call   c00005b0 <strlen>
c0008bf8:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008c00:	e9 91 00 00 00       	jmp    c0008c96 <VgaText::receiveKey(unsigned char)+0x11a>
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008c0e:	50                   	push   eax
c0008c0f:	e8 9c 79 ff ff       	call   c00005b0 <strlen>
c0008c14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008c17:	89 c5                	mov    ebp,eax
c0008c19:	e8 92 79 ff ff       	call   c00005b0 <strlen>
c0008c1e:	83 c4 10             	add    esp,0x10
c0008c21:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008c25:	3d 80 00 00 00       	cmp    eax,0x80
c0008c2a:	0f 87 a4 00 00 00    	ja     c0008cd4 <VgaText::receiveKey(unsigned char)+0x158>
c0008c30:	8d 46 ff             	lea    eax,[esi-0x1]
c0008c33:	3c 1e                	cmp    al,0x1e
c0008c35:	77 36                	ja     c0008c6d <VgaText::receiveKey(unsigned char)+0xf1>
c0008c37:	8d 46 f7             	lea    eax,[esi-0x9]
c0008c3a:	3c 01                	cmp    al,0x1
c0008c3c:	76 2f                	jbe    c0008c6d <VgaText::receiveKey(unsigned char)+0xf1>
c0008c3e:	89 f0                	mov    eax,esi
c0008c40:	3c 0d                	cmp    al,0xd
c0008c42:	74 29                	je     c0008c6d <VgaText::receiveKey(unsigned char)+0xf1>
c0008c44:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c47:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c4a:	68 2d f7 01 c0       	push   0xc001f72d
c0008c4f:	53                   	push   ebx
c0008c50:	e8 7f fc ff ff       	call   c00088d4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008c55:	8d 46 40             	lea    eax,[esi+0x40]
c0008c58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c5b:	0f b6 c0             	movzx  eax,al
c0008c5e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c61:	50                   	push   eax
c0008c62:	53                   	push   ebx
c0008c63:	e8 02 fa ff ff       	call   c000866a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008c68:	83 c4 20             	add    esp,0x20
c0008c6b:	eb 11                	jmp    c0008c7e <VgaText::receiveKey(unsigned char)+0x102>
c0008c6d:	89 f0                	mov    eax,esi
c0008c6f:	51                   	push   ecx
c0008c70:	0f be c0             	movsx  eax,al
c0008c73:	51                   	push   ecx
c0008c74:	50                   	push   eax
c0008c75:	53                   	push   ebx
c0008c76:	e8 bd fa ff ff       	call   c0008738 <VgaText::putchar(char)>
c0008c7b:	83 c4 10             	add    esp,0x10
c0008c7e:	89 f0                	mov    eax,esi
c0008c80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c85:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c89:	52                   	push   edx
c0008c8a:	52                   	push   edx
c0008c8b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c8f:	50                   	push   eax
c0008c90:	57                   	push   edi
c0008c91:	e8 8a 7b ff ff       	call   c0000820 <strcat>
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ca0:	75 10                	jne    c0008cb2 <VgaText::receiveKey(unsigned char)+0x136>
c0008ca2:	89 f0                	mov    eax,esi
c0008ca4:	3c 1c                	cmp    al,0x1c
c0008ca6:	77 2c                	ja     c0008cd4 <VgaText::receiveKey(unsigned char)+0x158>
c0008ca8:	b8 08 04 00 10       	mov    eax,0x10000408
c0008cad:	0f a3 f0             	bt     eax,esi
c0008cb0:	73 22                	jae    c0008cd4 <VgaText::receiveKey(unsigned char)+0x158>
c0008cb2:	81 c3 02 01 00 00    	add    ebx,0x102
c0008cb8:	50                   	push   eax
c0008cb9:	50                   	push   eax
c0008cba:	57                   	push   edi
c0008cbb:	53                   	push   ebx
c0008cbc:	e8 5f 7b ff ff       	call   c0000820 <strcat>
c0008cc1:	83 c4 0c             	add    esp,0xc
c0008cc4:	68 80 00 00 00       	push   0x80
c0008cc9:	6a 00                	push   0x0
c0008ccb:	57                   	push   edi
c0008ccc:	e8 af 78 ff ff       	call   c0000580 <memset>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	83 c4 1c             	add    esp,0x1c
c0008cd7:	5b                   	pop    ebx
c0008cd8:	5e                   	pop    esi
c0008cd9:	5f                   	pop    edi
c0008cda:	5d                   	pop    ebp
c0008cdb:	c3                   	ret    

c0008cdc <VgaText::doUpdate()>:
c0008cdc:	c3                   	ret    

c0008cdd <newTerminal(char*)>:
c0008cdd:	53                   	push   ebx
c0008cde:	83 ec 14             	sub    esp,0x14
c0008ce1:	68 84 01 00 00       	push   0x184
c0008ce6:	e8 90 eb ff ff       	call   c000787b <malloc>
c0008ceb:	89 c3                	mov    ebx,eax
c0008ced:	58                   	pop    eax
c0008cee:	5a                   	pop    edx
c0008cef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008cf3:	53                   	push   ebx
c0008cf4:	e8 33 fd ff ff       	call   c0008a2c <VgaText::VgaText(char const*)>
c0008cf9:	83 c4 18             	add    esp,0x18
c0008cfc:	89 d8                	mov    eax,ebx
c0008cfe:	5b                   	pop    ebx
c0008cff:	c3                   	ret    

c0008d00 <TSS::TSS()>:
c0008d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008d0b:	90                   	nop
c0008d0c:	c3                   	ret    
c0008d0d:	90                   	nop
c0008d0e:	66 90                	xchg   ax,ax

c0008d10 <TSS::setESP(unsigned long)>:
c0008d10:	55                   	push   ebp
c0008d11:	89 e5                	mov    ebp,esp
c0008d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d19:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d1f:	90                   	nop
c0008d20:	5d                   	pop    ebp
c0008d21:	c3                   	ret    
c0008d22:	66 90                	xchg   ax,ax

c0008d24 <TSS::flush()>:
c0008d24:	55                   	push   ebp
c0008d25:	89 e5                	mov    ebp,esp
c0008d27:	83 ec 10             	sub    esp,0x10
c0008d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d2f:	83 c8 03             	or     eax,0x3
c0008d32:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008d36:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008d3a:	66 89 d0             	mov    ax,dx
c0008d3d:	0f 00 d8             	ltr    ax
c0008d40:	90                   	nop
c0008d41:	c9                   	leave  
c0008d42:	c3                   	ret    
c0008d43:	90                   	nop

c0008d44 <TSS::setup(unsigned long, unsigned long)>:
c0008d44:	55                   	push   ebp
c0008d45:	89 e5                	mov    ebp,esp
c0008d47:	83 ec 18             	sub    esp,0x18
c0008d4a:	83 ec 0c             	sub    esp,0xc
c0008d4d:	6a 68                	push   0x68
c0008d4f:	e8 27 eb ff ff       	call   c000787b <malloc>
c0008d54:	83 c4 10             	add    esp,0x10
c0008d57:	89 c2                	mov    edx,eax
c0008d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d65:	83 ec 04             	sub    esp,0x4
c0008d68:	6a 68                	push   0x68
c0008d6a:	6a 00                	push   0x0
c0008d6c:	50                   	push   eax
c0008d6d:	e8 0e 78 ff ff       	call   c0000580 <memset>
c0008d72:	83 c4 10             	add    esp,0x10
c0008d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d87:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d96:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dab:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008db7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dc3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dcf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ddb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008dea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008df0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008df6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dff:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e09:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e0c:	0f 20 d8             	mov    eax,cr3
c0008e0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008e12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008e15:	89 42 1c             	mov    DWORD PTR [edx+0x1c],eax
c0008e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e1e:	83 ec 08             	sub    esp,0x8
c0008e21:	50                   	push   eax
c0008e22:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008e25:	50                   	push   eax
c0008e26:	e8 e1 e2 ff ff       	call   c000710c <GDTEntry::setBase(unsigned int)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	83 ec 08             	sub    esp,0x8
c0008e31:	6a 68                	push   0x68
c0008e33:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008e36:	50                   	push   eax
c0008e37:	e8 ec e2 ff ff       	call   c0007128 <GDTEntry::setLimit(unsigned int)>
c0008e3c:	83 c4 10             	add    esp,0x10
c0008e3f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008e43:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008e46:	83 e0 0f             	and    eax,0xf
c0008e49:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008e4c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008e4f:	83 c8 40             	or     eax,0x40
c0008e52:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008e55:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e60:	05 78 01 00 00       	add    eax,0x178
c0008e65:	83 ec 04             	sub    esp,0x4
c0008e68:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008e6b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e6e:	50                   	push   eax
c0008e6f:	e8 e8 e2 ff ff       	call   c000715c <GDT::addEntry(GDTEntry)>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 c2                	mov    edx,eax
c0008e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e7c:	89 10                	mov    DWORD PTR [eax],edx
c0008e7e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e89:	05 78 01 00 00       	add    eax,0x178
c0008e8e:	83 ec 0c             	sub    esp,0xc
c0008e91:	50                   	push   eax
c0008e92:	e8 e9 e2 ff ff       	call   c0007180 <GDT::flush()>
c0008e97:	83 c4 10             	add    esp,0x10
c0008e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e9f:	c9                   	leave  
c0008ea0:	c3                   	ret    
c0008ea1:	90                   	nop

c0008ea2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008ea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ead:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008eb2:	75 08                	jne    c0008ebc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008eb4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008eba:	eb 38                	jmp    c0008ef4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008ebc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ec1:	75 17                	jne    c0008eda <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ecb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ed1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ed7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008eda:	89 c1                	mov    ecx,eax
c0008edc:	83 e1 fd             	and    ecx,0xfffffffd
c0008edf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008ee5:	74 cd                	je     c0008eb4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008ee7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008eec:	83 e0 ef             	and    eax,0xffffffef
c0008eef:	83 f8 08             	cmp    eax,0x8
c0008ef2:	76 c0                	jbe    c0008eb4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008ef4:	31 c0                	xor    eax,eax
c0008ef6:	c3                   	ret    
c0008ef7:	90                   	nop

c0008ef8 <ReservedFilename::isAtty()>:
c0008ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008efc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008eff:	31 c0                	xor    eax,eax
c0008f01:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008f07:	74 09                	je     c0008f12 <ReservedFilename::isAtty()+0x1a>
c0008f09:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008f0f:	0f 94 c0             	sete   al
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008f1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008f20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f23:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008f28:	75 08                	jne    c0008f32 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008f2a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008f30:	eb 3d                	jmp    c0008f6f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008f32:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008f37:	75 17                	jne    c0008f50 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008f3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008f41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008f47:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f4d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008f50:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008f55:	75 04                	jne    c0008f5b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008f57:	89 0a                	mov    DWORD PTR [edx],ecx
c0008f59:	eb 14                	jmp    c0008f6f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008f5b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008f60:	74 c8                	je     c0008f2a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f62:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008f67:	83 e0 ef             	and    eax,0xffffffef
c0008f6a:	83 f8 08             	cmp    eax,0x8
c0008f6d:	76 bb                	jbe    c0008f2a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f6f:	31 c0                	xor    eax,eax
c0008f71:	c3                   	ret    

c0008f72 <UnixFile::getFileDescriptor()>:
c0008f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f79:	c3                   	ret    

c0008f7a <UnixFile::UnixFile(int)>:
c0008f7a:	53                   	push   ebx
c0008f7b:	83 ec 28             	sub    esp,0x28
c0008f7e:	ba 04 f8 01 c0       	mov    edx,0xc001f804
c0008f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f87:	89 10                	mov    DWORD PTR [eax],edx
c0008f89:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f91:	0f 8f 8c 01 00 00    	jg     c0009123 <UnixFile::UnixFile(int)+0x1a9>
c0008f97:	a1 40 19 02 c0       	mov    eax,ds:0xc0021940
c0008f9c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f9f:	89 15 40 19 02 c0    	mov    DWORD PTR ds:0xc0021940,edx
c0008fa5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008fa9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fac:	83 ec 08             	sub    esp,0x8
c0008faf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008fb3:	68 98 3f 02 c0       	push   0xc0023f98
c0008fb8:	e8 eb 52 01 00       	call   c001e2a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008fbd:	83 c4 10             	add    esp,0x10
c0008fc0:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008fc5:	83 f0 01             	xor    eax,0x1
c0008fc8:	84 c0                	test   al,al
c0008fca:	0f 84 54 01 00 00    	je     c0009124 <UnixFile::UnixFile(int)+0x1aa>
c0008fd0:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008fd7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008fe6:	e8 90 e8 ff ff       	call   c000787b <malloc>
c0008feb:	83 c4 10             	add    esp,0x10
c0008fee:	89 c3                	mov    ebx,eax
c0008ff0:	83 ec 08             	sub    esp,0x8
c0008ff3:	68 03 ff ff 0f       	push   0xfffff03
c0008ff8:	53                   	push   ebx
c0008ff9:	e8 2c 01 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0009007:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009016:	e8 60 e8 ff ff       	call   c000787b <malloc>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 c3                	mov    ebx,eax
c0009020:	83 ec 08             	sub    esp,0x8
c0009023:	68 01 ff ff 0f       	push   0xfffff01
c0009028:	53                   	push   ebx
c0009029:	e8 fc 00 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c000902e:	83 c4 10             	add    esp,0x10
c0009031:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0009037:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000903f:	83 ec 0c             	sub    esp,0xc
c0009042:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009046:	e8 30 e8 ff ff       	call   c000787b <malloc>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	89 c3                	mov    ebx,eax
c0009050:	83 ec 08             	sub    esp,0x8
c0009053:	68 00 ff ff 0f       	push   0xfffff00
c0009058:	53                   	push   ebx
c0009059:	e8 cc 00 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c000905e:	83 c4 10             	add    esp,0x10
c0009061:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0009067:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000906f:	83 ec 0c             	sub    esp,0xc
c0009072:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009076:	e8 00 e8 ff ff       	call   c000787b <malloc>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	89 c3                	mov    ebx,eax
c0009080:	83 ec 08             	sub    esp,0x8
c0009083:	68 02 ff ff 0f       	push   0xfffff02
c0009088:	53                   	push   ebx
c0009089:	e8 9c 00 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009097:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000909f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00090a4:	7f 7e                	jg     c0009124 <UnixFile::UnixFile(int)+0x1aa>
c00090a6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00090ae:	83 ec 0c             	sub    esp,0xc
c00090b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00090b5:	e8 c1 e7 ff ff       	call   c000787b <malloc>
c00090ba:	83 c4 10             	add    esp,0x10
c00090bd:	89 c3                	mov    ebx,eax
c00090bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090c3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	53                   	push   ebx
c00090cd:	e8 58 00 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090d9:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c00090e0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00090e8:	83 ec 0c             	sub    esp,0xc
c00090eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ef:	e8 87 e7 ff ff       	call   c000787b <malloc>
c00090f4:	83 c4 10             	add    esp,0x10
c00090f7:	89 c3                	mov    ebx,eax
c00090f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090fd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009102:	83 ec 08             	sub    esp,0x8
c0009105:	50                   	push   eax
c0009106:	53                   	push   ebx
c0009107:	e8 1e 00 00 00       	call   c000912a <ReservedFilename::ReservedFilename(int)>
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009113:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c000911a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000911e:	e9 7c ff ff ff       	jmp    c000909f <UnixFile::UnixFile(int)+0x125>
c0009123:	90                   	nop
c0009124:	83 c4 28             	add    esp,0x28
c0009127:	5b                   	pop    ebx
c0009128:	c3                   	ret    
c0009129:	90                   	nop

c000912a <ReservedFilename::ReservedFilename(int)>:
c000912a:	83 ec 0c             	sub    esp,0xc
c000912d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009138:	50                   	push   eax
c0009139:	e8 3c fe ff ff       	call   c0008f7a <UnixFile::UnixFile(int)>
c000913e:	83 c4 10             	add    esp,0x10
c0009141:	ba 20 f8 01 c0       	mov    edx,0xc001f820
c0009146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000914a:	89 10                	mov    DWORD PTR [eax],edx
c000914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009150:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009154:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009157:	90                   	nop
c0009158:	83 c4 0c             	add    esp,0xc
c000915b:	c3                   	ret    

c000915c <UnixFile::~UnixFile()>:
c000915c:	83 ec 1c             	sub    esp,0x1c
c000915f:	ba 04 f8 01 c0       	mov    edx,0xc001f804
c0009164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009168:	89 10                	mov    DWORD PTR [eax],edx
c000916a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000916e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009171:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009176:	7f 73                	jg     c00091eb <UnixFile::~UnixFile()+0x8f>
c0009178:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009180:	83 ec 0c             	sub    esp,0xc
c0009183:	68 98 3f 02 c0       	push   0xc0023f98
c0009188:	e8 ef 51 01 00       	call   c001e37c <LinkedList<UnixFile>::getFirstElement()>
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009194:	83 ec 0c             	sub    esp,0xc
c0009197:	68 98 3f 02 c0       	push   0xc0023f98
c000919c:	e8 e3 51 01 00       	call   c001e384 <LinkedList<UnixFile>::removeFirst()>
c00091a1:	83 c4 10             	add    esp,0x10
c00091a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091a8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00091ac:	74 40                	je     c00091ee <UnixFile::~UnixFile()+0x92>
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091b5:	68 98 3f 02 c0       	push   0xc0023f98
c00091ba:	e8 e9 50 01 00       	call   c001e2a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091bf:	83 c4 10             	add    esp,0x10
c00091c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091c6:	8d 50 01             	lea    edx,[eax+0x1]
c00091c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091cd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00091d2:	0f 94 c0             	sete   al
c00091d5:	84 c0                	test   al,al
c00091d7:	74 a7                	je     c0009180 <UnixFile::~UnixFile()+0x24>
c00091d9:	83 ec 0c             	sub    esp,0xc
c00091dc:	68 dc f7 01 c0       	push   0xc001f7dc
c00091e1:	e8 d7 72 00 00       	call   c00104bd <KePanic(char const*)>
c00091e6:	83 c4 10             	add    esp,0x10
c00091e9:	eb 95                	jmp    c0009180 <UnixFile::~UnixFile()+0x24>
c00091eb:	90                   	nop
c00091ec:	eb 01                	jmp    c00091ef <UnixFile::~UnixFile()+0x93>
c00091ee:	90                   	nop
c00091ef:	90                   	nop
c00091f0:	83 c4 1c             	add    esp,0x1c
c00091f3:	c3                   	ret    

c00091f4 <UnixFile::~UnixFile()>:
c00091f4:	83 ec 0c             	sub    esp,0xc
c00091f7:	83 ec 0c             	sub    esp,0xc
c00091fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091fe:	e8 59 ff ff ff       	call   c000915c <UnixFile::~UnixFile()>
c0009203:	83 c4 10             	add    esp,0x10
c0009206:	83 ec 08             	sub    esp,0x8
c0009209:	6a 0c                	push   0xc
c000920b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000920f:	e8 60 13 00 00       	call   c000a574 <operator delete(void*, unsigned long)>
c0009214:	83 c4 10             	add    esp,0x10
c0009217:	83 c4 0c             	add    esp,0xc
c000921a:	c3                   	ret    
c000921b:	90                   	nop

c000921c <ReservedFilename::~ReservedFilename()>:
c000921c:	83 ec 0c             	sub    esp,0xc
c000921f:	ba 20 f8 01 c0       	mov    edx,0xc001f820
c0009224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009228:	89 10                	mov    DWORD PTR [eax],edx
c000922a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000922e:	83 ec 0c             	sub    esp,0xc
c0009231:	50                   	push   eax
c0009232:	e8 25 ff ff ff       	call   c000915c <UnixFile::~UnixFile()>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	90                   	nop
c000923b:	83 c4 0c             	add    esp,0xc
c000923e:	c3                   	ret    
c000923f:	90                   	nop

c0009240 <ReservedFilename::~ReservedFilename()>:
c0009240:	83 ec 0c             	sub    esp,0xc
c0009243:	83 ec 0c             	sub    esp,0xc
c0009246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000924a:	e8 cd ff ff ff       	call   c000921c <ReservedFilename::~ReservedFilename()>
c000924f:	83 c4 10             	add    esp,0x10
c0009252:	83 ec 08             	sub    esp,0x8
c0009255:	6a 0c                	push   0xc
c0009257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925b:	e8 14 13 00 00       	call   c000a574 <operator delete(void*, unsigned long)>
c0009260:	83 c4 10             	add    esp,0x10
c0009263:	83 c4 0c             	add    esp,0xc
c0009266:	c3                   	ret    

c0009267 <getFromFileDescriptor(int)>:
c0009267:	53                   	push   ebx
c0009268:	83 ec 08             	sub    esp,0x8
c000926b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000926f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009275:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000927b:	7f 2c                	jg     c00092a9 <getFromFileDescriptor(int)+0x42>
c000927d:	83 ec 0c             	sub    esp,0xc
c0009280:	68 98 3f 02 c0       	push   0xc0023f98
c0009285:	e8 f2 50 01 00       	call   c001e37c <LinkedList<UnixFile>::getFirstElement()>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	85 c0                	test   eax,eax
c000928f:	75 04                	jne    c0009295 <getFromFileDescriptor(int)+0x2e>
c0009291:	31 c0                	xor    eax,eax
c0009293:	eb 6e                	jmp    c0009303 <getFromFileDescriptor(int)+0x9c>
c0009295:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009298:	74 69                	je     c0009303 <getFromFileDescriptor(int)+0x9c>
c000929a:	52                   	push   edx
c000929b:	52                   	push   edx
c000929c:	50                   	push   eax
c000929d:	68 98 3f 02 c0       	push   0xc0023f98
c00092a2:	e8 7f 51 01 00       	call   c001e426 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00092a7:	eb e1                	jmp    c000928a <getFromFileDescriptor(int)+0x23>
c00092a9:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c00092ae:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00092b4:	74 4d                	je     c0009303 <getFromFileDescriptor(int)+0x9c>
c00092b6:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c00092bb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00092c1:	74 40                	je     c0009303 <getFromFileDescriptor(int)+0x9c>
c00092c3:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c00092c8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00092ce:	74 33                	je     c0009303 <getFromFileDescriptor(int)+0x9c>
c00092d0:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c00092d5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00092db:	74 26                	je     c0009303 <getFromFileDescriptor(int)+0x9c>
c00092dd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00092e3:	83 f8 08             	cmp    eax,0x8
c00092e6:	77 09                	ja     c00092f1 <getFromFileDescriptor(int)+0x8a>
c00092e8:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00092ef:	eb 12                	jmp    c0009303 <getFromFileDescriptor(int)+0x9c>
c00092f1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00092f7:	83 fb 08             	cmp    ebx,0x8
c00092fa:	77 95                	ja     c0009291 <getFromFileDescriptor(int)+0x2a>
c00092fc:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009303:	83 c4 08             	add    esp,0x8
c0009306:	5b                   	pop    ebx
c0009307:	c3                   	ret    

c0009308 <__static_initialization_and_destruction_0(int, int)>:
c0009308:	83 ec 0c             	sub    esp,0xc
c000930b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009310:	75 34                	jne    c0009346 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009312:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000931a:	75 2a                	jne    c0009346 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000931c:	83 ec 0c             	sub    esp,0xc
c000931f:	68 98 3f 02 c0       	push   0xc0023f98
c0009324:	e8 3d 4f 01 00       	call   c001e266 <LinkedList<UnixFile>::LinkedList()>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	83 ec 04             	sub    esp,0x4
c000932f:	68 d0 18 02 c0       	push   0xc00218d0
c0009334:	68 98 3f 02 c0       	push   0xc0023f98
c0009339:	68 64 e2 01 c0       	push   0xc001e264
c000933e:	e8 e1 11 00 00       	call   c000a524 <__cxa_atexit>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	90                   	nop
c0009347:	83 c4 0c             	add    esp,0xc
c000934a:	c3                   	ret    

c000934b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000934b:	83 ec 0c             	sub    esp,0xc
c000934e:	83 ec 08             	sub    esp,0x8
c0009351:	68 ff ff 00 00       	push   0xffff
c0009356:	6a 01                	push   0x1
c0009358:	e8 ab ff ff ff       	call   c0009308 <__static_initialization_and_destruction_0(int, int)>
c000935d:	83 c4 10             	add    esp,0x10
c0009360:	83 c4 0c             	add    esp,0xc
c0009363:	c3                   	ret    

c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009364:	53                   	push   ebx
c0009365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009369:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000936d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009373:	89 c8                	mov    eax,ecx
c0009375:	d1 e8                	shr    eax,1
c0009377:	03 05 48 19 02 c0    	add    eax,DWORD PTR ds:0xc0021948
c000937d:	83 e1 01             	and    ecx,0x1
c0009380:	8a 10                	mov    dl,BYTE PTR [eax]
c0009382:	75 09                	jne    c000938d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009384:	83 e2 f0             	and    edx,0xfffffff0
c0009387:	09 da                	or     edx,ebx
c0009389:	88 10                	mov    BYTE PTR [eax],dl
c000938b:	5b                   	pop    ebx
c000938c:	c3                   	ret    
c000938d:	c1 e3 04             	shl    ebx,0x4
c0009390:	83 e2 0f             	and    edx,0xf
c0009393:	09 da                	or     edx,ebx
c0009395:	88 10                	mov    BYTE PTR [eax],dl
c0009397:	5b                   	pop    ebx
c0009398:	c3                   	ret    

c0009399 <Virt::getPageState(unsigned long)>:
c0009399:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000939d:	8b 0d 48 19 02 c0    	mov    ecx,DWORD PTR ds:0xc0021948
c00093a3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00093a9:	89 d0                	mov    eax,edx
c00093ab:	d1 e8                	shr    eax,1
c00093ad:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00093b0:	88 c1                	mov    cl,al
c00093b2:	c0 e8 04             	shr    al,0x4
c00093b5:	83 e1 0f             	and    ecx,0xf
c00093b8:	83 e2 01             	and    edx,0x1
c00093bb:	0f 44 c1             	cmove  eax,ecx
c00093be:	c3                   	ret    

c00093bf <Virt::allocateKernelVirtualPages(int)>:
c00093bf:	55                   	push   ebp
c00093c0:	31 ed                	xor    ebp,ebp
c00093c2:	57                   	push   edi
c00093c3:	56                   	push   esi
c00093c4:	31 f6                	xor    esi,esi
c00093c6:	53                   	push   ebx
c00093c7:	31 db                	xor    ebx,ebx
c00093c9:	83 ec 0c             	sub    esp,0xc
c00093cc:	8b 3d 44 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021944
c00093d2:	57                   	push   edi
c00093d3:	e8 c1 ff ff ff       	call   c0009399 <Virt::getPageState(unsigned long)>
c00093d8:	5a                   	pop    edx
c00093d9:	84 c0                	test   al,al
c00093db:	75 3a                	jne    c0009417 <Virt::allocateKernelVirtualPages(int)+0x58>
c00093dd:	85 db                	test   ebx,ebx
c00093df:	0f 44 f7             	cmove  esi,edi
c00093e2:	43                   	inc    ebx
c00093e3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00093e7:	74 59                	je     c0009442 <Virt::allocateKernelVirtualPages(int)+0x83>
c00093e9:	47                   	inc    edi
c00093ea:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093f0:	76 30                	jbe    c0009422 <Virt::allocateKernelVirtualPages(int)+0x63>
c00093f2:	c7 05 44 19 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021944,0xc8000
c00093fc:	89 e8                	mov    eax,ebp
c00093fe:	84 c0                	test   al,al
c0009400:	75 28                	jne    c000942a <Virt::allocateKernelVirtualPages(int)+0x6b>
c0009402:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009407:	bd 01 00 00 00       	mov    ebp,0x1
c000940c:	57                   	push   edi
c000940d:	e8 87 ff ff ff       	call   c0009399 <Virt::getPageState(unsigned long)>
c0009412:	5a                   	pop    edx
c0009413:	84 c0                	test   al,al
c0009415:	74 c6                	je     c00093dd <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009417:	47                   	inc    edi
c0009418:	31 db                	xor    ebx,ebx
c000941a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009420:	77 d0                	ja     c00093f2 <Virt::allocateKernelVirtualPages(int)+0x33>
c0009422:	89 3d 44 19 02 c0    	mov    DWORD PTR ds:0xc0021944,edi
c0009428:	eb a8                	jmp    c00093d2 <Virt::allocateKernelVirtualPages(int)+0x13>
c000942a:	83 ec 0c             	sub    esp,0xc
c000942d:	68 34 f8 01 c0       	push   0xc001f834
c0009432:	e8 86 70 00 00       	call   c00104bd <KePanic(char const*)>
c0009437:	8b 3d 44 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021944
c000943d:	83 c4 10             	add    esp,0x10
c0009440:	eb 90                	jmp    c00093d2 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009442:	89 35 44 19 02 c0    	mov    DWORD PTR ds:0xc0021944,esi
c0009448:	83 fb 01             	cmp    ebx,0x1
c000944b:	74 6b                	je     c00094b8 <Virt::allocateKernelVirtualPages(int)+0xf9>
c000944d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009451:	85 c9                	test   ecx,ecx
c0009453:	74 45                	je     c000949a <Virt::allocateKernelVirtualPages(int)+0xdb>
c0009455:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009459:	89 f0                	mov    eax,esi
c000945b:	31 db                	xor    ebx,ebx
c000945d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0009460:	eb 16                	jmp    c0009478 <Virt::allocateKernelVirtualPages(int)+0xb9>
c0009462:	6a 01                	push   0x1
c0009464:	43                   	inc    ebx
c0009465:	50                   	push   eax
c0009466:	e8 f9 fe ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	58                   	pop    eax
c000946c:	5a                   	pop    edx
c000946d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009471:	74 27                	je     c000949a <Virt::allocateKernelVirtualPages(int)+0xdb>
c0009473:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c0009478:	8d 50 01             	lea    edx,[eax+0x1]
c000947b:	89 15 44 19 02 c0    	mov    DWORD PTR ds:0xc0021944,edx
c0009481:	85 db                	test   ebx,ebx
c0009483:	74 22                	je     c00094a7 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0009485:	39 dd                	cmp    ebp,ebx
c0009487:	75 d9                	jne    c0009462 <Virt::allocateKernelVirtualPages(int)+0xa3>
c0009489:	6a 03                	push   0x3
c000948b:	43                   	inc    ebx
c000948c:	50                   	push   eax
c000948d:	e8 d2 fe ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009492:	59                   	pop    ecx
c0009493:	5f                   	pop    edi
c0009494:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009498:	75 d9                	jne    c0009473 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000949a:	83 c4 0c             	add    esp,0xc
c000949d:	89 f0                	mov    eax,esi
c000949f:	5b                   	pop    ebx
c00094a0:	c1 e0 0c             	shl    eax,0xc
c00094a3:	5e                   	pop    esi
c00094a4:	5f                   	pop    edi
c00094a5:	5d                   	pop    ebp
c00094a6:	c3                   	ret    
c00094a7:	6a 02                	push   0x2
c00094a9:	bb 01 00 00 00       	mov    ebx,0x1
c00094ae:	50                   	push   eax
c00094af:	e8 b0 fe ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094b4:	58                   	pop    eax
c00094b5:	5a                   	pop    edx
c00094b6:	eb bb                	jmp    c0009473 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00094b8:	6a 04                	push   0x4
c00094ba:	8d 46 01             	lea    eax,[esi+0x1]
c00094bd:	56                   	push   esi
c00094be:	a3 44 19 02 c0       	mov    ds:0xc0021944,eax
c00094c3:	e8 9c fe ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094c8:	5b                   	pop    ebx
c00094c9:	5f                   	pop    edi
c00094ca:	89 f0                	mov    eax,esi
c00094cc:	83 c4 0c             	add    esp,0xc
c00094cf:	c1 e0 0c             	shl    eax,0xc
c00094d2:	5b                   	pop    ebx
c00094d3:	5e                   	pop    esi
c00094d4:	5f                   	pop    edi
c00094d5:	5d                   	pop    ebp
c00094d6:	c3                   	ret    

c00094d7 <Virt::freeSwapfilePage(unsigned long)>:
c00094d7:	53                   	push   ebx
c00094d8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00094dc:	b8 01 00 00 00       	mov    eax,0x1
c00094e1:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c00094e7:	89 d9                	mov    ecx,ebx
c00094e9:	c4 e2 61 f7 c0       	shlx   eax,eax,ebx
c00094ee:	f7 d0                	not    eax
c00094f0:	c1 e9 05             	shr    ecx,0x5
c00094f3:	21 04 8a             	and    DWORD PTR [edx+ecx*4],eax
c00094f6:	5b                   	pop    ebx
c00094f7:	c3                   	ret    

c00094f8 <Virt::swapIDToSector(unsigned long)>:
c00094f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094fc:	0f af 05 4c 19 02 c0 	imul   eax,DWORD PTR ds:0xc002194c
c0009503:	03 05 54 19 02 c0    	add    eax,DWORD PTR ds:0xc0021954
c0009509:	c3                   	ret    

c000950a <Virt::allocateSwapfilePage()>:
c000950a:	55                   	push   ebp
c000950b:	31 d2                	xor    edx,edx
c000950d:	57                   	push   edi
c000950e:	56                   	push   esi
c000950f:	53                   	push   ebx
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	8b 1d 50 19 02 c0    	mov    ebx,DWORD PTR ds:0xc0021950
c0009519:	8b 0d 4c 19 02 c0    	mov    ecx,DWORD PTR ds:0xc002194c
c000951f:	89 d8                	mov    eax,ebx
c0009521:	f7 f1                	div    ecx
c0009523:	39 cb                	cmp    ebx,ecx
c0009525:	72 2e                	jb     c0009555 <Virt::allocateSwapfilePage()+0x4b>
c0009527:	8b 3d ac 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fac
c000952d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000952f:	f6 c1 01             	test   cl,0x1
c0009532:	74 3d                	je     c0009571 <Virt::allocateSwapfilePage()+0x67>
c0009534:	31 d2                	xor    edx,edx
c0009536:	bd 01 00 00 00       	mov    ebp,0x1
c000953b:	eb 13                	jmp    c0009550 <Virt::allocateSwapfilePage()+0x46>
c000953d:	89 d1                	mov    ecx,edx
c000953f:	c4 e2 69 f7 f5       	shlx   esi,ebp,edx
c0009544:	c1 e9 05             	shr    ecx,0x5
c0009547:	8d 1c 8f             	lea    ebx,[edi+ecx*4]
c000954a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000954c:	85 f1                	test   ecx,esi
c000954e:	74 2a                	je     c000957a <Virt::allocateSwapfilePage()+0x70>
c0009550:	42                   	inc    edx
c0009551:	39 d0                	cmp    eax,edx
c0009553:	77 e8                	ja     c000953d <Virt::allocateSwapfilePage()+0x33>
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 9b f9 01 c0       	push   0xc001f99b
c000955d:	e8 5b 6f 00 00       	call   c00104bd <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	31 d2                	xor    edx,edx
c0009567:	83 c4 0c             	add    esp,0xc
c000956a:	89 d0                	mov    eax,edx
c000956c:	5b                   	pop    ebx
c000956d:	5e                   	pop    esi
c000956e:	5f                   	pop    edi
c000956f:	5d                   	pop    ebp
c0009570:	c3                   	ret    
c0009571:	89 fb                	mov    ebx,edi
c0009573:	be 01 00 00 00       	mov    esi,0x1
c0009578:	31 d2                	xor    edx,edx
c000957a:	09 f1                	or     ecx,esi
c000957c:	89 d0                	mov    eax,edx
c000957e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0009580:	83 c4 0c             	add    esp,0xc
c0009583:	5b                   	pop    ebx
c0009584:	5e                   	pop    esi
c0009585:	5f                   	pop    edi
c0009586:	5d                   	pop    ebp
c0009587:	c3                   	ret    

c0009588 <Virt::virtualMemorySetup()>:
c0009588:	53                   	push   ebx
c0009589:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000958e:	6a 0f                	push   0xf
c0009590:	53                   	push   ebx
c0009591:	43                   	inc    ebx
c0009592:	e8 cd fd ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009597:	58                   	pop    eax
c0009598:	5a                   	pop    edx
c0009599:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000959f:	75 ed                	jne    c000958e <Virt::virtualMemorySetup()+0x6>
c00095a1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00095a6:	6a 00                	push   0x0
c00095a8:	53                   	push   ebx
c00095a9:	43                   	inc    ebx
c00095aa:	e8 b5 fd ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095af:	59                   	pop    ecx
c00095b0:	58                   	pop    eax
c00095b1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00095b7:	75 ed                	jne    c00095a6 <Virt::virtualMemorySetup()+0x1e>
c00095b9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00095be:	6a 0f                	push   0xf
c00095c0:	53                   	push   ebx
c00095c1:	43                   	inc    ebx
c00095c2:	e8 9d fd ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095c7:	58                   	pop    eax
c00095c8:	5a                   	pop    edx
c00095c9:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00095cf:	75 ed                	jne    c00095be <Virt::virtualMemorySetup()+0x36>
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    

c00095d3 <Virt::setupPageSwapping(int)>:
c00095d3:	53                   	push   ebx
c00095d4:	83 ec 0c             	sub    esp,0xc
c00095d7:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00095dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00095e0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00095e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00095e8:	53                   	push   ebx
c00095e9:	c1 e3 0b             	shl    ebx,0xb
c00095ec:	68 b2 f9 01 c0       	push   0xc001f9b2
c00095f1:	50                   	push   eax
c00095f2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00095f5:	89 1d 50 19 02 c0    	mov    DWORD PTR ds:0xc0021950,ebx
c00095fb:	c1 eb 08             	shr    ebx,0x8
c00095fe:	c6 05 58 19 02 c0 43 	mov    BYTE PTR ds:0xc0021958,0x43
c0009605:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009608:	a3 54 19 02 c0       	mov    ds:0xc0021954,eax
c000960d:	c7 05 4c 19 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002194c,0x8
c0009617:	e8 5f e2 ff ff       	call   c000787b <malloc>
c000961c:	31 d2                	xor    edx,edx
c000961e:	83 c4 0c             	add    esp,0xc
c0009621:	89 c1                	mov    ecx,eax
c0009623:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c0009628:	a1 50 19 02 c0       	mov    eax,ds:0xc0021950
c000962d:	f7 35 4c 19 02 c0    	div    DWORD PTR ds:0xc002194c
c0009633:	c1 e8 05             	shr    eax,0x5
c0009636:	50                   	push   eax
c0009637:	6a 00                	push   0x0
c0009639:	51                   	push   ecx
c000963a:	e8 41 6f ff ff       	call   c0000580 <memset>
c000963f:	83 c4 18             	add    esp,0x18
c0009642:	5b                   	pop    ebx
c0009643:	c3                   	ret    

c0009644 <VAS::VAS(VAS*)>:
c0009644:	83 ec 0c             	sub    esp,0xc
c0009647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000964b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009656:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000965d:	83 ec 0c             	sub    esp,0xc
c0009660:	68 54 f8 01 c0       	push   0xc001f854
c0009665:	e8 53 6e 00 00       	call   c00104bd <KePanic(char const*)>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	90                   	nop
c000966e:	83 c4 0c             	add    esp,0xc
c0009671:	c3                   	ret    

c0009672 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009676:	89 c2                	mov    edx,eax
c0009678:	c1 e8 0a             	shr    eax,0xa
c000967b:	c1 ea 16             	shr    edx,0x16
c000967e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009683:	19 c9                	sbb    ecx,ecx
c0009685:	c1 e2 0c             	shl    edx,0xc
c0009688:	25 fc 0f 00 00       	and    eax,0xffc
c000968d:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009693:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000969a:	01 d0                	add    eax,edx
c000969c:	c3                   	ret    
c000969d:	90                   	nop

c000969e <VAS::getPageTableEntry(unsigned long)>:
c000969e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00096a2:	89 c8                	mov    eax,ecx
c00096a4:	c1 e8 16             	shr    eax,0x16
c00096a7:	05 00 fc 0f 00       	add    eax,0xffc00
c00096ac:	c1 e0 0c             	shl    eax,0xc
c00096af:	89 c2                	mov    edx,eax
c00096b1:	89 c8                	mov    eax,ecx
c00096b3:	c1 e8 0a             	shr    eax,0xa
c00096b6:	25 fc 0f 00 00       	and    eax,0xffc
c00096bb:	8d 04 02             	lea    eax,[edx+eax*1]
c00096be:	c3                   	ret    

c00096bf <Virt::freeKernelVirtualPages(unsigned long)>:
c00096bf:	55                   	push   ebp
c00096c0:	b0 0c                	mov    al,0xc
c00096c2:	57                   	push   edi
c00096c3:	bf 01 00 00 00       	mov    edi,0x1
c00096c8:	56                   	push   esi
c00096c9:	53                   	push   ebx
c00096ca:	83 ec 0c             	sub    esp,0xc
c00096cd:	c4 e2 7b f7 5c 24 20 	shrx   ebx,DWORD PTR [esp+0x20],eax
c00096d4:	eb 36                	jmp    c000970c <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00096d6:	83 ec 08             	sub    esp,0x8
c00096d9:	55                   	push   ebp
c00096da:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00096e0:	e8 b9 ff ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c00096e5:	83 c4 10             	add    esp,0x10
c00096e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00096ea:	f6 c4 04             	test   ah,0x4
c00096ed:	75 54                	jne    c0009743 <Virt::freeKernelVirtualPages(unsigned long)+0x84>
c00096ef:	89 f0                	mov    eax,esi
c00096f1:	3c 04                	cmp    al,0x4
c00096f3:	74 65                	je     c000975a <Virt::freeKernelVirtualPages(unsigned long)+0x9b>
c00096f5:	3c 02                	cmp    al,0x2
c00096f7:	74 7b                	je     c0009774 <Virt::freeKernelVirtualPages(unsigned long)+0xb5>
c00096f9:	3c 03                	cmp    al,0x3
c00096fb:	0f 84 a1 00 00 00    	je     c00097a2 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009701:	3c 01                	cmp    al,0x1
c0009703:	0f 84 86 00 00 00    	je     c000978f <Virt::freeKernelVirtualPages(unsigned long)+0xd0>
c0009709:	43                   	inc    ebx
c000970a:	31 ff                	xor    edi,edi
c000970c:	53                   	push   ebx
c000970d:	89 dd                	mov    ebp,ebx
c000970f:	c1 e5 0c             	shl    ebp,0xc
c0009712:	e8 82 fc ff ff       	call   c0009399 <Virt::getPageState(unsigned long)>
c0009717:	59                   	pop    ecx
c0009718:	89 c6                	mov    esi,eax
c000971a:	84 c0                	test   al,al
c000971c:	75 b8                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x17>
c000971e:	83 ec 0c             	sub    esp,0xc
c0009721:	68 c9 f9 01 c0       	push   0xc001f9c9
c0009726:	e8 92 6d 00 00       	call   c00104bd <KePanic(char const*)>
c000972b:	58                   	pop    eax
c000972c:	5a                   	pop    edx
c000972d:	55                   	push   ebp
c000972e:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0009734:	e8 65 ff ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c0009739:	83 c4 10             	add    esp,0x10
c000973c:	8b 00                	mov    eax,DWORD PTR [eax]
c000973e:	f6 c4 04             	test   ah,0x4
c0009741:	74 c6                	je     c0009709 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009743:	83 ec 0c             	sub    esp,0xc
c0009746:	25 00 f0 ff ff       	and    eax,0xfffff000
c000974b:	50                   	push   eax
c000974c:	e8 ad e3 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c0009751:	89 f0                	mov    eax,esi
c0009753:	83 c4 10             	add    esp,0x10
c0009756:	3c 04                	cmp    al,0x4
c0009758:	75 9b                	jne    c00096f5 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000975a:	89 f8                	mov    eax,edi
c000975c:	84 c0                	test   al,al
c000975e:	75 48                	jne    c00097a8 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c0009760:	c7 44 24 20 78 f8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f878
c0009768:	83 c4 0c             	add    esp,0xc
c000976b:	5b                   	pop    ebx
c000976c:	5e                   	pop    esi
c000976d:	5f                   	pop    edi
c000976e:	5d                   	pop    ebp
c000976f:	e9 49 6d 00 00       	jmp    c00104bd <KePanic(char const*)>
c0009774:	89 f8                	mov    eax,edi
c0009776:	84 c0                	test   al,al
c0009778:	75 15                	jne    c000978f <Virt::freeKernelVirtualPages(unsigned long)+0xd0>
c000977a:	83 ec 0c             	sub    esp,0xc
c000977d:	68 e5 f9 01 c0       	push   0xc001f9e5
c0009782:	e8 36 6d 00 00       	call   c00104bd <KePanic(char const*)>
c0009787:	83 c4 10             	add    esp,0x10
c000978a:	e9 7a ff ff ff       	jmp    c0009709 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000978f:	83 ec 08             	sub    esp,0x8
c0009792:	6a 00                	push   0x0
c0009794:	53                   	push   ebx
c0009795:	e8 ca fb ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000979a:	83 c4 10             	add    esp,0x10
c000979d:	e9 67 ff ff ff       	jmp    c0009709 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00097a2:	89 f8                	mov    eax,edi
c00097a4:	84 c0                	test   al,al
c00097a6:	75 16                	jne    c00097be <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c00097a8:	83 ec 08             	sub    esp,0x8
c00097ab:	6a 00                	push   0x0
c00097ad:	53                   	push   ebx
c00097ae:	e8 b1 fb ff ff       	call   c0009364 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	83 c4 0c             	add    esp,0xc
c00097b9:	5b                   	pop    ebx
c00097ba:	5e                   	pop    esi
c00097bb:	5f                   	pop    edi
c00097bc:	5d                   	pop    ebp
c00097bd:	c3                   	ret    
c00097be:	c7 44 24 20 01 fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fa01
c00097c6:	83 c4 0c             	add    esp,0xc
c00097c9:	5b                   	pop    ebx
c00097ca:	5e                   	pop    esi
c00097cb:	5f                   	pop    edi
c00097cc:	5d                   	pop    ebp
c00097cd:	e9 eb 6c 00 00       	jmp    c00104bd <KePanic(char const*)>

c00097d2 <VAS::freeAllocatedPages(unsigned long)>:
c00097d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097da:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00097de:	74 09                	je     c00097e9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00097e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097e4:	e9 d6 fe ff ff       	jmp    c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c00097e9:	c7 44 24 04 9c f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f89c
c00097f1:	e9 73 0e 00 00       	jmp    c000a669 <Dbg::kprintf(char const*, ...)>

c00097f6 <VAS::virtualToPhysical(unsigned long)>:
c00097f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00097fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00097fe:	e8 9b fe ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c0009803:	5a                   	pop    edx
c0009804:	59                   	pop    ecx
c0009805:	8b 00                	mov    eax,DWORD PTR [eax]
c0009807:	25 00 f0 ff ff       	and    eax,0xfffff000
c000980c:	c3                   	ret    
c000980d:	90                   	nop

c000980e <VAS::reflagRange(unsigned long, int, int, int)>:
c000980e:	55                   	push   ebp
c000980f:	57                   	push   edi
c0009810:	56                   	push   esi
c0009811:	53                   	push   ebx
c0009812:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009816:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000981a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000981e:	89 c3                	mov    ebx,eax
c0009820:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009824:	c1 e3 0c             	shl    ebx,0xc
c0009827:	01 f3                	add    ebx,esi
c0009829:	85 c0                	test   eax,eax
c000982b:	7e 1d                	jle    c000984a <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c000982d:	56                   	push   esi
c000982e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009834:	55                   	push   ebp
c0009835:	e8 64 fe ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c000983a:	5a                   	pop    edx
c000983b:	59                   	pop    ecx
c000983c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000983e:	21 f9                	and    ecx,edi
c0009840:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009844:	89 08                	mov    DWORD PTR [eax],ecx
c0009846:	39 f3                	cmp    ebx,esi
c0009848:	75 e3                	jne    c000982d <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000984a:	5b                   	pop    ebx
c000984b:	5e                   	pop    esi
c000984c:	5f                   	pop    edi
c000984d:	5d                   	pop    ebp
c000984e:	c3                   	ret    
c000984f:	90                   	nop

c0009850 <VAS::VAS()>:
c0009850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000985b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986a:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c000986f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009873:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000987e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009882:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009889:	ba 8d 20 02 c0       	mov    edx,0xc002208d
c000988e:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009893:	29 c2                	sub    edx,eax
c0009895:	89 d0                	mov    eax,edx
c0009897:	05 ff 0f 00 00       	add    eax,0xfff
c000989c:	c1 e8 0c             	shr    eax,0xc
c000989f:	89 c2                	mov    edx,eax
c00098a1:	b8 00 20 02 c0       	mov    eax,0xc0022000
c00098a6:	6a 04                	push   0x4
c00098a8:	6a ff                	push   0xffffffff
c00098aa:	52                   	push   edx
c00098ab:	50                   	push   eax
c00098ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b0:	e8 59 ff ff ff       	call   c000980e <VAS::reflagRange(unsigned long, int, int, int)>
c00098b5:	83 c4 14             	add    esp,0x14
c00098b8:	90                   	nop
c00098b9:	c3                   	ret    

c00098ba <VAS::setToWriteCombining(unsigned long, int)>:
c00098ba:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00098bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00098c5:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00098cc:	75 01                	jne    c00098cf <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00098ce:	c3                   	ret    
c00098cf:	68 80 00 00 00       	push   0x80
c00098d4:	6a ff                	push   0xffffffff
c00098d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098e2:	e8 27 ff ff ff       	call   c000980e <VAS::reflagRange(unsigned long, int, int, int)>
c00098e7:	83 c4 14             	add    esp,0x14
c00098ea:	c3                   	ret    
c00098eb:	90                   	nop

c00098ec <VAS::mapOtherVASIn(bool, VAS*)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098f5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00098f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098fc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00098ff:	19 c0                	sbb    eax,eax
c0009901:	83 ca 03             	or     edx,0x3
c0009904:	83 e0 fc             	and    eax,0xfffffffc
c0009907:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000990e:	0f 20 d8             	mov    eax,cr3
c0009911:	0f 22 d8             	mov    cr3,eax
c0009914:	c3                   	ret    
c0009915:	90                   	nop

c0009916 <VAS::~VAS()>:
c0009916:	83 ec 2c             	sub    esp,0x2c
c0009919:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009921:	fa                   	cli    
c0009922:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009927:	40                   	inc    eax
c0009928:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000992d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009932:	8b 00                	mov    eax,DWORD PTR [eax]
c0009934:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009937:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000993d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009941:	6a 01                	push   0x1
c0009943:	50                   	push   eax
c0009944:	e8 a3 ff ff ff       	call   c00098ec <VAS::mapOtherVASIn(bool, VAS*)>
c0009949:	83 c4 0c             	add    esp,0xc
c000994c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009954:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000995c:	0f 8f d4 00 00 00    	jg     c0009a36 <VAS::~VAS()+0x120>
c0009962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009966:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009969:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000996d:	c1 e0 02             	shl    eax,0x2
c0009970:	01 d0                	add    eax,edx
c0009972:	8b 00                	mov    eax,DWORD PTR [eax]
c0009974:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997c:	83 e0 01             	and    eax,0x1
c000997f:	0f 84 a8 00 00 00    	je     c0009a2d <VAS::~VAS()+0x117>
c0009985:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000998d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009995:	7f 72                	jg     c0009a09 <VAS::~VAS()+0xf3>
c0009997:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999b:	c1 e0 0a             	shl    eax,0xa
c000999e:	89 c2                	mov    edx,eax
c00099a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a4:	01 d0                	add    eax,edx
c00099a6:	c1 e0 0c             	shl    eax,0xc
c00099a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00099b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00099b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00099b7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00099bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00099c1:	6a 01                	push   0x1
c00099c3:	50                   	push   eax
c00099c4:	e8 a9 fc ff ff       	call   c0009672 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00099c9:	83 c4 0c             	add    esp,0xc
c00099cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00099d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099de:	25 01 04 00 00       	and    eax,0x401
c00099e3:	3d 01 04 00 00       	cmp    eax,0x401
c00099e8:	75 19                	jne    c0009a03 <VAS::~VAS()+0xed>
c00099ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099f3:	83 ec 0c             	sub    esp,0xc
c00099f6:	50                   	push   eax
c00099f7:	e8 02 e1 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c00099fc:	83 c4 10             	add    esp,0x10
c00099ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009a03:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009a07:	eb 84                	jmp    c000998d <VAS::~VAS()+0x77>
c0009a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a0d:	25 00 04 00 00       	and    eax,0x400
c0009a12:	74 19                	je     c0009a2d <VAS::~VAS()+0x117>
c0009a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a1d:	83 ec 0c             	sub    esp,0xc
c0009a20:	50                   	push   eax
c0009a21:	e8 d8 e0 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009a2d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009a31:	e9 1e ff ff ff       	jmp    c0009954 <VAS::~VAS()+0x3e>
c0009a36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a3d:	83 ec 0c             	sub    esp,0xc
c0009a40:	50                   	push   eax
c0009a41:	e8 79 fc ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a4d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a50:	83 ec 0c             	sub    esp,0xc
c0009a53:	50                   	push   eax
c0009a54:	e8 a5 e0 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c0009a59:	83 c4 10             	add    esp,0x10
c0009a5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009a60:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a65:	48                   	dec    eax
c0009a66:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a6b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a70:	85 c0                	test   eax,eax
c0009a72:	75 01                	jne    c0009a75 <VAS::~VAS()+0x15f>
c0009a74:	fb                   	sti    
c0009a75:	90                   	nop
c0009a76:	83 c4 2c             	add    esp,0x2c
c0009a79:	c3                   	ret    

c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a7a:	55                   	push   ebp
c0009a7b:	57                   	push   edi
c0009a7c:	56                   	push   esi
c0009a7d:	53                   	push   ebx
c0009a7e:	83 ec 1c             	sub    esp,0x1c
c0009a81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a8d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a93:	77 0b                	ja     c0009aa0 <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009a95:	0f 20 d8             	mov    eax,cr3
c0009a98:	0f 20 d8             	mov    eax,cr3
c0009a9b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a9e:	75 3a                	jne    c0009ada <VAS::mapPage(unsigned long, unsigned long, int)+0x60>
c0009aa0:	89 d8                	mov    eax,ebx
c0009aa2:	09 f0                	or     eax,esi
c0009aa4:	a9 ff 0f 00 00       	test   eax,0xfff
c0009aa9:	75 4a                	jne    c0009af5 <VAS::mapPage(unsigned long, unsigned long, int)+0x7b>
c0009aab:	89 da                	mov    edx,ebx
c0009aad:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ab0:	c1 ea 16             	shr    edx,0x16
c0009ab3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009ab7:	74 5a                	je     c0009b13 <VAS::mapPage(unsigned long, unsigned long, int)+0x99>
c0009ab9:	81 c2 00 fc 0f 00    	add    edx,0xffc00
c0009abf:	c1 eb 0a             	shr    ebx,0xa
c0009ac2:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0009ac6:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009acc:	c1 e2 0c             	shl    edx,0xc
c0009acf:	89 34 13             	mov    DWORD PTR [ebx+edx*1],esi
c0009ad2:	83 c4 1c             	add    esp,0x1c
c0009ad5:	5b                   	pop    ebx
c0009ad6:	5e                   	pop    esi
c0009ad7:	5f                   	pop    edi
c0009ad8:	5d                   	pop    ebp
c0009ad9:	c3                   	ret    
c0009ada:	83 ec 0c             	sub    esp,0xc
c0009add:	68 c0 f8 01 c0       	push   0xc001f8c0
c0009ae2:	e8 82 0b 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0009ae7:	89 d8                	mov    eax,ebx
c0009ae9:	83 c4 10             	add    esp,0x10
c0009aec:	09 f0                	or     eax,esi
c0009aee:	a9 ff 0f 00 00       	test   eax,0xfff
c0009af3:	74 b6                	je     c0009aab <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	68 28 f9 01 c0       	push   0xc001f928
c0009afd:	e8 bb 69 00 00       	call   c00104bd <KePanic(char const*)>
c0009b02:	89 da                	mov    edx,ebx
c0009b04:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b07:	83 c4 10             	add    esp,0x10
c0009b0a:	c1 ea 16             	shr    edx,0x16
c0009b0d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009b11:	75 a6                	jne    c0009ab9 <VAS::mapPage(unsigned long, unsigned long, int)+0x3f>
c0009b13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b17:	e8 44 e0 ff ff       	call   c0007b60 <Phys::allocatePage()>
c0009b1c:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009b22:	83 ec 0c             	sub    esp,0xc
c0009b25:	89 c5                	mov    ebp,eax
c0009b27:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009b2b:	6a 01                	push   0x1
c0009b2d:	e8 8d f8 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c0009b32:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009b39:	6a 01                	push   0x1
c0009b3b:	50                   	push   eax
c0009b3c:	55                   	push   ebp
c0009b3d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009b41:	81 cd 07 04 00 00    	or     ebp,0x407
c0009b47:	51                   	push   ecx
c0009b48:	e8 21 02 00 00       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009b4d:	83 c4 1c             	add    esp,0x1c
c0009b50:	68 00 10 00 00       	push   0x1000
c0009b55:	6a 00                	push   0x0
c0009b57:	50                   	push   eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	e8 1f 6a ff ff       	call   c0000580 <memset>
c0009b61:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009b65:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b68:	e8 52 fb ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c0009b6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b71:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b74:	83 c4 10             	add    esp,0x10
c0009b77:	89 2c 90             	mov    DWORD PTR [eax+edx*4],ebp
c0009b7a:	e9 3a ff ff ff       	jmp    c0009ab9 <VAS::mapPage(unsigned long, unsigned long, int)+0x3f>
c0009b7f:	90                   	nop

c0009b80 <VAS::allocatePages(int, int)>:
c0009b80:	55                   	push   ebp
c0009b81:	57                   	push   edi
c0009b82:	56                   	push   esi
c0009b83:	53                   	push   ebx
c0009b84:	83 ec 1c             	sub    esp,0x1c
c0009b87:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b8c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b90:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b9a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009ba0:	83 e0 01             	and    eax,0x1
c0009ba3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009ba7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009bab:	0f 85 c8 00 00 00    	jne    c0009c79 <VAS::allocatePages(int, int)+0xf9>
c0009bb1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bb8:	85 c0                	test   eax,eax
c0009bba:	0f 84 9d 00 00 00    	je     c0009c5d <VAS::allocatePages(int, int)+0xdd>
c0009bc0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bc4:	b0 0c                	mov    al,0xc
c0009bc6:	c4 e2 79 f7 74 24 34 	shlx   esi,DWORD PTR [esp+0x34],eax
c0009bcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bd1:	81 cd 00 04 00 00    	or     ebp,0x400
c0009bd7:	01 de                	add    esi,ebx
c0009bd9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009bdc:	85 c0                	test   eax,eax
c0009bde:	7e 25                	jle    c0009c05 <VAS::allocatePages(int, int)+0x85>
c0009be0:	e8 7b df ff ff       	call   c0007b60 <Phys::allocatePage()>
c0009be5:	55                   	push   ebp
c0009be6:	53                   	push   ebx
c0009be7:	50                   	push   eax
c0009be8:	57                   	push   edi
c0009be9:	e8 8c fe ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bee:	83 c4 10             	add    esp,0x10
c0009bf1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bf6:	74 03                	je     c0009bfb <VAS::allocatePages(int, int)+0x7b>
c0009bf8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bfb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c01:	39 de                	cmp    esi,ebx
c0009c03:	75 db                	jne    c0009be0 <VAS::allocatePages(int, int)+0x60>
c0009c05:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c0a:	75 12                	jne    c0009c1e <VAS::allocatePages(int, int)+0x9e>
c0009c0c:	0f 20 d8             	mov    eax,cr3
c0009c0f:	0f 22 d8             	mov    cr3,eax
c0009c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c16:	83 c4 1c             	add    esp,0x1c
c0009c19:	5b                   	pop    ebx
c0009c1a:	5e                   	pop    esi
c0009c1b:	5f                   	pop    edi
c0009c1c:	5d                   	pop    ebp
c0009c1d:	c3                   	ret    
c0009c1e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c22:	c1 ee 0a             	shr    esi,0xa
c0009c25:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009c2b:	c1 eb 0a             	shr    ebx,0xa
c0009c2e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009c34:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c3a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c40:	39 c3                	cmp    ebx,eax
c0009c42:	77 ce                	ja     c0009c12 <VAS::allocatePages(int, int)+0x92>
c0009c44:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c47:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c4d:	39 d8                	cmp    eax,ebx
c0009c4f:	73 f3                	jae    c0009c44 <VAS::allocatePages(int, int)+0xc4>
c0009c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c55:	83 c4 1c             	add    esp,0x1c
c0009c58:	5b                   	pop    ebx
c0009c59:	5e                   	pop    esi
c0009c5a:	5f                   	pop    edi
c0009c5b:	5d                   	pop    ebp
c0009c5c:	c3                   	ret    
c0009c5d:	83 ec 0c             	sub    esp,0xc
c0009c60:	68 4c f9 01 c0       	push   0xc001f94c
c0009c65:	e8 53 68 00 00       	call   c00104bd <KePanic(char const*)>
c0009c6a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c71:	83 c4 10             	add    esp,0x10
c0009c74:	e9 47 ff ff ff       	jmp    c0009bc0 <VAS::allocatePages(int, int)+0x40>
c0009c79:	83 ec 0c             	sub    esp,0xc
c0009c7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009c80:	e8 3a f7 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c0009c85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c89:	83 c4 10             	add    esp,0x10
c0009c8c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c91:	0f 87 9b 00 00 00    	ja     c0009d32 <VAS::allocatePages(int, int)+0x1b2>
c0009c97:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c9b:	85 d2                	test   edx,edx
c0009c9d:	7e 3a                	jle    c0009cd9 <VAS::allocatePages(int, int)+0x159>
c0009c9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ca3:	b0 0c                	mov    al,0xc
c0009ca5:	81 cd 00 04 00 00    	or     ebp,0x400
c0009cab:	c4 e2 79 f7 74 24 34 	shlx   esi,DWORD PTR [esp+0x34],eax
c0009cb2:	01 de                	add    esi,ebx
c0009cb4:	e8 a7 de ff ff       	call   c0007b60 <Phys::allocatePage()>
c0009cb9:	55                   	push   ebp
c0009cba:	53                   	push   ebx
c0009cbb:	50                   	push   eax
c0009cbc:	57                   	push   edi
c0009cbd:	e8 b8 fd ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cca:	74 03                	je     c0009ccf <VAS::allocatePages(int, int)+0x14f>
c0009ccc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ccf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cd5:	39 de                	cmp    esi,ebx
c0009cd7:	75 db                	jne    c0009cb4 <VAS::allocatePages(int, int)+0x134>
c0009cd9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cde:	0f 84 28 ff ff ff    	je     c0009c0c <VAS::allocatePages(int, int)+0x8c>
c0009ce4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009ce8:	b0 0c                	mov    al,0xc
c0009cea:	c4 e2 79 f7 44 24 34 	shlx   eax,DWORD PTR [esp+0x34],eax
c0009cf1:	89 cb                	mov    ebx,ecx
c0009cf3:	01 c8                	add    eax,ecx
c0009cf5:	c1 eb 0a             	shr    ebx,0xa
c0009cf8:	c1 e8 0a             	shr    eax,0xa
c0009cfb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d01:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d06:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d0c:	2d 00 00 40 00       	sub    eax,0x400000
c0009d11:	39 c3                	cmp    ebx,eax
c0009d13:	0f 87 f9 fe ff ff    	ja     c0009c12 <VAS::allocatePages(int, int)+0x92>
c0009d19:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d1c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d22:	39 d8                	cmp    eax,ebx
c0009d24:	73 f3                	jae    c0009d19 <VAS::allocatePages(int, int)+0x199>
c0009d26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d2a:	83 c4 1c             	add    esp,0x1c
c0009d2d:	5b                   	pop    ebx
c0009d2e:	5e                   	pop    esi
c0009d2f:	5f                   	pop    edi
c0009d30:	5d                   	pop    ebp
c0009d31:	c3                   	ret    
c0009d32:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d37:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009d3d:	89 e8                	mov    eax,ebp
c0009d3f:	80 cc 01             	or     ah,0x1
c0009d42:	f6 82 8c 11 00 00 10 	test   BYTE PTR [edx+0x118c],0x10
c0009d49:	0f 45 e8             	cmovne ebp,eax
c0009d4c:	e9 46 ff ff ff       	jmp    c0009c97 <VAS::allocatePages(int, int)+0x117>
c0009d51:	90                   	nop

c0009d52 <VAS::setCPUSpecific(unsigned long)>:
c0009d52:	83 ec 0c             	sub    esp,0xc
c0009d55:	6a 05                	push   0x5
c0009d57:	68 00 00 40 c2       	push   0xc2400000
c0009d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d64:	e8 11 fd ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d69:	83 c4 1c             	add    esp,0x1c
c0009d6c:	c3                   	ret    
c0009d6d:	90                   	nop

c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d6e:	55                   	push   ebp
c0009d6f:	57                   	push   edi
c0009d70:	56                   	push   esi
c0009d71:	53                   	push   ebx
c0009d72:	83 ec 1c             	sub    esp,0x1c
c0009d75:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d7a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d7e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d88:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d8e:	83 e0 01             	and    eax,0x1
c0009d91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d99:	85 c0                	test   eax,eax
c0009d9b:	7e 38                	jle    c0009dd5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x67>
c0009d9d:	b0 0c                	mov    al,0xc
c0009d9f:	89 f3                	mov    ebx,esi
c0009da1:	c4 e2 79 f7 7c 24 3c 	shlx   edi,DWORD PTR [esp+0x3c],eax
c0009da8:	01 f7                	add    edi,esi
c0009daa:	55                   	push   ebp
c0009dab:	53                   	push   ebx
c0009dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009db0:	29 f0                	sub    eax,esi
c0009db2:	01 d8                	add    eax,ebx
c0009db4:	50                   	push   eax
c0009db5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009db9:	e8 bc fc ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009dbe:	83 c4 10             	add    esp,0x10
c0009dc1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009dc6:	74 03                	je     c0009dcb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5d>
c0009dc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dd1:	39 df                	cmp    edi,ebx
c0009dd3:	75 d5                	jne    c0009daa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0009dd5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009dda:	75 10                	jne    c0009dec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7e>
c0009ddc:	0f 20 d8             	mov    eax,cr3
c0009ddf:	0f 22 d8             	mov    cr3,eax
c0009de2:	83 c4 1c             	add    esp,0x1c
c0009de5:	89 f0                	mov    eax,esi
c0009de7:	5b                   	pop    ebx
c0009de8:	5e                   	pop    esi
c0009de9:	5f                   	pop    edi
c0009dea:	5d                   	pop    ebp
c0009deb:	c3                   	ret    
c0009dec:	89 f3                	mov    ebx,esi
c0009dee:	b0 0c                	mov    al,0xc
c0009df0:	c4 e2 79 f7 44 24 3c 	shlx   eax,DWORD PTR [esp+0x3c],eax
c0009df7:	01 f0                	add    eax,esi
c0009df9:	c1 eb 0a             	shr    ebx,0xa
c0009dfc:	c1 e8 0a             	shr    eax,0xa
c0009dff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009e05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e0a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009e10:	2d 00 00 40 00       	sub    eax,0x400000
c0009e15:	39 c3                	cmp    ebx,eax
c0009e17:	77 c9                	ja     c0009de2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c0009e19:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e1c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e22:	39 d8                	cmp    eax,ebx
c0009e24:	73 f3                	jae    c0009e19 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xab>
c0009e26:	83 c4 1c             	add    esp,0x1c
c0009e29:	89 f0                	mov    eax,esi
c0009e2b:	5b                   	pop    ebx
c0009e2c:	5e                   	pop    esi
c0009e2d:	5f                   	pop    edi
c0009e2e:	5d                   	pop    ebp
c0009e2f:	c3                   	ret    

c0009e30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009e30:	55                   	push   ebp
c0009e31:	57                   	push   edi
c0009e32:	56                   	push   esi
c0009e33:	53                   	push   ebx
c0009e34:	83 ec 1c             	sub    esp,0x1c
c0009e37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009e3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e3f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e47:	09 d8                	or     eax,ebx
c0009e49:	a9 ff 0f 00 00       	test   eax,0xfff
c0009e4e:	75 3d                	jne    c0009e8d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x5d>
c0009e50:	89 de                	mov    esi,ebx
c0009e52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e55:	c1 ee 16             	shr    esi,0x16
c0009e58:	f6 04 b0 01          	test   BYTE PTR [eax+esi*4],0x1
c0009e5c:	74 55                	je     c0009eb3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x83>
c0009e5e:	c1 eb 0a             	shr    ebx,0xa
c0009e61:	80 fa 01             	cmp    dl,0x1
c0009e64:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009e68:	19 c0                	sbb    eax,eax
c0009e6a:	c1 e6 0c             	shl    esi,0xc
c0009e6d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009e73:	0b 54 24 3c          	or     edx,DWORD PTR [esp+0x3c]
c0009e77:	01 f3                	add    ebx,esi
c0009e79:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009e7e:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009e85:	83 c4 1c             	add    esp,0x1c
c0009e88:	5b                   	pop    ebx
c0009e89:	5e                   	pop    esi
c0009e8a:	5f                   	pop    edi
c0009e8b:	5d                   	pop    ebp
c0009e8c:	c3                   	ret    
c0009e8d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	89 de                	mov    esi,ebx
c0009e96:	68 78 f9 01 c0       	push   0xc001f978
c0009e9b:	c1 ee 16             	shr    esi,0x16
c0009e9e:	e8 1a 66 00 00       	call   c00104bd <KePanic(char const*)>
c0009ea3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ea6:	83 c4 10             	add    esp,0x10
c0009ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ead:	f6 04 b0 01          	test   BYTE PTR [eax+esi*4],0x1
c0009eb1:	75 ab                	jne    c0009e5e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2e>
c0009eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009eb7:	e8 a4 dc ff ff       	call   c0007b60 <Phys::allocatePage()>
c0009ebc:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009ec2:	83 ec 0c             	sub    esp,0xc
c0009ec5:	89 c5                	mov    ebp,eax
c0009ec7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ecb:	6a 01                	push   0x1
c0009ecd:	e8 ed f4 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c0009ed2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ed9:	6a 01                	push   0x1
c0009edb:	50                   	push   eax
c0009edc:	55                   	push   ebp
c0009edd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ee1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ee7:	51                   	push   ecx
c0009ee8:	e8 81 fe ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009eed:	83 c4 1c             	add    esp,0x1c
c0009ef0:	68 00 10 00 00       	push   0x1000
c0009ef5:	6a 00                	push   0x0
c0009ef7:	50                   	push   eax
c0009ef8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009efc:	e8 7f 66 ff ff       	call   c0000580 <memset>
c0009f01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009f05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009f08:	e8 b2 f7 ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c0009f0d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f17:	89 2c b0             	mov    DWORD PTR [eax+esi*4],ebp
c0009f1a:	e9 3f ff ff ff       	jmp    c0009e5e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2e>
c0009f1f:	90                   	nop

c0009f20 <VAS::VAS(bool)>:
c0009f20:	53                   	push   ebx
c0009f21:	83 ec 28             	sub    esp,0x28
c0009f24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009f2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009f37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f3b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009f42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f46:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009f4a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009f4d:	e8 0e dc ff ff       	call   c0007b60 <Phys::allocatePage()>
c0009f52:	89 c2                	mov    edx,eax
c0009f54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f58:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009f5b:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009f61:	83 ec 0c             	sub    esp,0xc
c0009f64:	6a 01                	push   0x1
c0009f66:	e8 54 f4 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c0009f6b:	83 c4 10             	add    esp,0x10
c0009f6e:	89 c2                	mov    edx,eax
c0009f70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f77:	83 ec 0c             	sub    esp,0xc
c0009f7a:	6a 03                	push   0x3
c0009f7c:	6a 01                	push   0x1
c0009f7e:	52                   	push   edx
c0009f7f:	50                   	push   eax
c0009f80:	53                   	push   ebx
c0009f81:	e8 e8 fd ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f86:	83 c4 20             	add    esp,0x20
c0009f89:	89 c2                	mov    edx,eax
c0009f8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f92:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f9a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009fa2:	7f 1c                	jg     c0009fc0 <VAS::VAS(bool)+0xa0>
c0009fa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009faf:	c1 e0 02             	shl    eax,0x2
c0009fb2:	01 d0                	add    eax,edx
c0009fb4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fba:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fbe:	eb da                	jmp    c0009f9a <VAS::VAS(bool)+0x7a>
c0009fc0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009fc8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009fd0:	7f 73                	jg     c000a045 <VAS::VAS(bool)+0x125>
c0009fd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fd6:	2d 00 02 00 00       	sub    eax,0x200
c0009fdb:	c1 e0 0c             	shl    eax,0xc
c0009fde:	83 c8 05             	or     eax,0x5
c0009fe1:	89 c2                	mov    edx,eax
c0009fe3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fe8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fee:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ff4:	83 e0 10             	and    eax,0x10
c0009ff7:	84 c0                	test   al,al
c0009ff9:	74 07                	je     c000a002 <VAS::VAS(bool)+0xe2>
c0009ffb:	b8 00 01 00 00       	mov    eax,0x100
c000a000:	eb 05                	jmp    c000a007 <VAS::VAS(bool)+0xe7>
c000a002:	b8 00 00 00 00       	mov    eax,0x0
c000a007:	09 c2                	or     edx,eax
c000a009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a00d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000a010:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a014:	c1 e0 02             	shl    eax,0x2
c000a017:	01 c8                	add    eax,ecx
c000a019:	89 10                	mov    DWORD PTR [eax],edx
c000a01b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a01f:	2d 40 03 00 00       	sub    eax,0x340
c000a024:	83 f8 7f             	cmp    eax,0x7f
c000a027:	77 16                	ja     c000a03f <VAS::VAS(bool)+0x11f>
c000a029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a02d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a030:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a034:	c1 e0 02             	shl    eax,0x2
c000a037:	01 d0                	add    eax,edx
c000a039:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a03f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a043:	eb 83                	jmp    c0009fc8 <VAS::VAS(bool)+0xa8>
c000a045:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a04a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a050:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a056:	83 e0 10             	and    eax,0x10
c000a059:	84 c0                	test   al,al
c000a05b:	74 07                	je     c000a064 <VAS::VAS(bool)+0x144>
c000a05d:	ba 03 41 00 00       	mov    edx,0x4103
c000a062:	eb 05                	jmp    c000a069 <VAS::VAS(bool)+0x149>
c000a064:	ba 03 40 00 00       	mov    edx,0x4003
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a070:	05 20 0c 00 00       	add    eax,0xc20
c000a075:	89 10                	mov    DWORD PTR [eax],edx
c000a077:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a07c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a088:	83 ec 08             	sub    esp,0x8
c000a08b:	50                   	push   eax
c000a08c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a090:	e8 bd fc ff ff       	call   c0009d52 <VAS::setCPUSpecific(unsigned long)>
c000a095:	83 c4 10             	add    esp,0x10
c000a098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a09f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0aa:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a0b0:	83 e0 10             	and    eax,0x10
c000a0b3:	84 c0                	test   al,al
c000a0b5:	74 07                	je     c000a0be <VAS::VAS(bool)+0x19e>
c000a0b7:	b8 00 01 00 00       	mov    eax,0x100
c000a0bc:	eb 05                	jmp    c000a0c3 <VAS::VAS(bool)+0x1a3>
c000a0be:	b8 00 00 00 00       	mov    eax,0x0
c000a0c3:	09 c2                	or     edx,eax
c000a0c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0cc:	05 fc 0f 00 00       	add    eax,0xffc
c000a0d1:	83 ca 03             	or     edx,0x3
c000a0d4:	89 10                	mov    DWORD PTR [eax],edx
c000a0d6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0e1:	83 ec 0c             	sub    esp,0xc
c000a0e4:	50                   	push   eax
c000a0e5:	e8 62 1c 00 00       	call   c000bd4c <Device::getName()>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	83 ec 08             	sub    esp,0x8
c000a0f0:	68 1b fa 01 c0       	push   0xc001fa1b
c000a0f5:	50                   	push   eax
c000a0f6:	e8 45 66 ff ff       	call   c0000740 <strcmp>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	85 c0                	test   eax,eax
c000a100:	0f 94 c0             	sete   al
c000a103:	84 c0                	test   al,al
c000a105:	0f 84 87 00 00 00    	je     c000a192 <VAS::VAS(bool)+0x272>
c000a10b:	fa                   	cli    
c000a10c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a111:	40                   	inc    eax
c000a112:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a117:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a11c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a122:	05 7c 09 00 00       	add    eax,0x97c
c000a127:	83 ec 0c             	sub    esp,0xc
c000a12a:	50                   	push   eax
c000a12b:	e8 52 d2 ff ff       	call   c0007382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a138:	89 c3                	mov    ebx,eax
c000a13a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a13f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a145:	05 7c 09 00 00       	add    eax,0x97c
c000a14a:	83 ec 0c             	sub    esp,0xc
c000a14d:	50                   	push   eax
c000a14e:	e8 2f d2 ff ff       	call   c0007382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a153:	83 c4 10             	add    esp,0x10
c000a156:	83 ec 08             	sub    esp,0x8
c000a159:	50                   	push   eax
c000a15a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a15e:	e8 3b f5 ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	8b 00                	mov    eax,DWORD PTR [eax]
c000a168:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a16d:	6a 11                	push   0x11
c000a16f:	53                   	push   ebx
c000a170:	50                   	push   eax
c000a171:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a175:	e8 00 f9 ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a182:	48                   	dec    eax
c000a183:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a188:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a18d:	85 c0                	test   eax,eax
c000a18f:	75 01                	jne    c000a192 <VAS::VAS(bool)+0x272>
c000a191:	fb                   	sti    
c000a192:	90                   	nop
c000a193:	83 c4 28             	add    esp,0x28
c000a196:	5b                   	pop    ebx
c000a197:	c3                   	ret    

c000a198 <VAS::evict(unsigned long)>:
c000a198:	55                   	push   ebp
c000a199:	57                   	push   edi
c000a19a:	56                   	push   esi
c000a19b:	53                   	push   ebx
c000a19c:	83 ec 1c             	sub    esp,0x1c
c000a19f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a1a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1ab:	e8 5a f3 ff ff       	call   c000950a <Virt::allocateSwapfilePage()>
c000a1b0:	89 c7                	mov    edi,eax
c000a1b2:	a1 4c 19 02 c0       	mov    eax,ds:0xc002194c
c000a1b7:	85 c0                	test   eax,eax
c000a1b9:	7e 3d                	jle    c000a1f8 <VAS::evict(unsigned long)+0x60>
c000a1bb:	89 ee                	mov    esi,ebp
c000a1bd:	31 db                	xor    ebx,ebx
c000a1bf:	83 ec 0c             	sub    esp,0xc
c000a1c2:	57                   	push   edi
c000a1c3:	e8 30 f3 ff ff       	call   c00094f8 <Virt::swapIDToSector(unsigned long)>
c000a1c8:	31 d2                	xor    edx,edx
c000a1ca:	89 34 24             	mov    DWORD PTR [esp],esi
c000a1cd:	81 c6 00 02 00 00    	add    esi,0x200
c000a1d3:	01 d8                	add    eax,ebx
c000a1d5:	6a 01                	push   0x1
c000a1d7:	43                   	inc    ebx
c000a1d8:	52                   	push   edx
c000a1d9:	50                   	push   eax
c000a1da:	0f be 05 58 19 02 c0 	movsx  eax,BYTE PTR ds:0xc0021958
c000a1e1:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c000a1e8:	e8 6b 2c 00 00       	call   c000ce58 <LogicalDisk::write(unsigned long long, int, void*)>
c000a1ed:	83 c4 20             	add    esp,0x20
c000a1f0:	39 1d 4c 19 02 c0    	cmp    DWORD PTR ds:0xc002194c,ebx
c000a1f6:	7f c7                	jg     c000a1bf <VAS::evict(unsigned long)+0x27>
c000a1f8:	83 ec 08             	sub    esp,0x8
c000a1fb:	c1 e7 0b             	shl    edi,0xb
c000a1fe:	55                   	push   ebp
c000a1ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a203:	e8 96 f4 ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c000a208:	8b 10                	mov    edx,DWORD PTR [eax]
c000a20a:	89 d1                	mov    ecx,edx
c000a20c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a212:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a218:	09 cf                	or     edi,ecx
c000a21a:	89 38                	mov    DWORD PTR [eax],edi
c000a21c:	89 14 24             	mov    DWORD PTR [esp],edx
c000a21f:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a225:	e8 d4 d8 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c000a22a:	0f 20 d8             	mov    eax,cr3
c000a22d:	0f 22 d8             	mov    cr3,eax
c000a230:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a235:	c7 44 24 40 29 fa 01 c0 	mov    DWORD PTR [esp+0x40],0xc001fa29
c000a23d:	8d 50 01             	lea    edx,[eax+0x1]
c000a240:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a244:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a24a:	83 c4 2c             	add    esp,0x2c
c000a24d:	5b                   	pop    ebx
c000a24e:	5e                   	pop    esi
c000a24f:	5f                   	pop    edi
c000a250:	5d                   	pop    ebp
c000a251:	e9 13 04 00 00       	jmp    c000a669 <Dbg::kprintf(char const*, ...)>

c000a256 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a256:	55                   	push   ebp
c000a257:	57                   	push   edi
c000a258:	56                   	push   esi
c000a259:	53                   	push   ebx
c000a25a:	83 ec 24             	sub    esp,0x24
c000a25d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a261:	53                   	push   ebx
c000a262:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a268:	68 3a fa 01 c0       	push   0xc001fa3a
c000a26d:	e8 f7 03 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a272:	59                   	pop    ecx
c000a273:	5e                   	pop    esi
c000a274:	53                   	push   ebx
c000a275:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a279:	e8 20 f4 ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	85 c0                	test   eax,eax
c000a283:	89 c6                	mov    esi,eax
c000a285:	0f 95 c2             	setne  dl
c000a288:	85 db                	test   ebx,ebx
c000a28a:	0f 95 c0             	setne  al
c000a28d:	20 c2                	and    dl,al
c000a28f:	89 d5                	mov    ebp,edx
c000a291:	75 0a                	jne    c000a29d <VAS::tryLoadBackOffDisk(unsigned long)+0x47>
c000a293:	83 c4 1c             	add    esp,0x1c
c000a296:	89 e8                	mov    eax,ebp
c000a298:	5b                   	pop    ebx
c000a299:	5e                   	pop    esi
c000a29a:	5f                   	pop    edi
c000a29b:	5d                   	pop    ebp
c000a29c:	c3                   	ret    
c000a29d:	8b 06                	mov    eax,DWORD PTR [esi]
c000a29f:	a8 01                	test   al,0x1
c000a2a1:	74 0c                	je     c000a2af <VAS::tryLoadBackOffDisk(unsigned long)+0x59>
c000a2a3:	83 c4 1c             	add    esp,0x1c
c000a2a6:	31 ed                	xor    ebp,ebp
c000a2a8:	5b                   	pop    ebx
c000a2a9:	89 e8                	mov    eax,ebp
c000a2ab:	5e                   	pop    esi
c000a2ac:	5f                   	pop    edi
c000a2ad:	5d                   	pop    ebp
c000a2ae:	c3                   	ret    
c000a2af:	c1 e8 0b             	shr    eax,0xb
c000a2b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b6:	e8 a5 d8 ff ff       	call   c0007b60 <Phys::allocatePage()>
c000a2bb:	8b 16                	mov    edx,DWORD PTR [esi]
c000a2bd:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a2c3:	09 c2                	or     edx,eax
c000a2c5:	81 ca 01 08 00 00    	or     edx,0x801
c000a2cb:	89 16                	mov    DWORD PTR [esi],edx
c000a2cd:	8b 15 4c 19 02 c0    	mov    edx,DWORD PTR ds:0xc002194c
c000a2d3:	85 d2                	test   edx,edx
c000a2d5:	7e 40                	jle    c000a317 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c000a2d7:	89 df                	mov    edi,ebx
c000a2d9:	31 f6                	xor    esi,esi
c000a2db:	83 ec 0c             	sub    esp,0xc
c000a2de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e2:	e8 11 f2 ff ff       	call   c00094f8 <Virt::swapIDToSector(unsigned long)>
c000a2e7:	31 d2                	xor    edx,edx
c000a2e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2ec:	81 c7 00 02 00 00    	add    edi,0x200
c000a2f2:	01 f0                	add    eax,esi
c000a2f4:	6a 01                	push   0x1
c000a2f6:	46                   	inc    esi
c000a2f7:	52                   	push   edx
c000a2f8:	50                   	push   eax
c000a2f9:	0f be 05 58 19 02 c0 	movsx  eax,BYTE PTR ds:0xc0021958
c000a300:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c000a307:	e8 cc 2a 00 00       	call   c000cdd8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a30c:	83 c4 20             	add    esp,0x20
c000a30f:	39 35 4c 19 02 c0    	cmp    DWORD PTR ds:0xc002194c,esi
c000a315:	7f c4                	jg     c000a2db <VAS::tryLoadBackOffDisk(unsigned long)+0x85>
c000a317:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a31c:	83 ec 04             	sub    esp,0x4
c000a31f:	48                   	dec    eax
c000a320:	50                   	push   eax
c000a321:	53                   	push   ebx
c000a322:	68 4d fa 01 c0       	push   0xc001fa4d
c000a327:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a32c:	e8 38 03 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a331:	58                   	pop    eax
c000a332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a336:	e8 9c f1 ff ff       	call   c00094d7 <Virt::freeSwapfilePage(unsigned long)>
c000a33b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a340:	83 c4 10             	add    esp,0x10
c000a343:	48                   	dec    eax
c000a344:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a349:	85 c0                	test   eax,eax
c000a34b:	75 01                	jne    c000a34e <VAS::tryLoadBackOffDisk(unsigned long)+0xf8>
c000a34d:	fb                   	sti    
c000a34e:	0f 20 d8             	mov    eax,cr3
c000a351:	0f 22 d8             	mov    cr3,eax
c000a354:	e9 3a ff ff ff       	jmp    c000a293 <VAS::tryLoadBackOffDisk(unsigned long)+0x3d>
c000a359:	90                   	nop

c000a35a <VAS::scanForEviction()>:
c000a35a:	57                   	push   edi
c000a35b:	31 ff                	xor    edi,edi
c000a35d:	56                   	push   esi
c000a35e:	53                   	push   ebx
c000a35f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a363:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a366:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a36c:	75 0e                	jne    c000a37c <VAS::scanForEviction()+0x22>
c000a36e:	89 da                	mov    edx,ebx
c000a370:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a373:	c1 ea 16             	shr    edx,0x16
c000a376:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a37a:	74 4e                	je     c000a3ca <VAS::scanForEviction()+0x70>
c000a37c:	53                   	push   ebx
c000a37d:	56                   	push   esi
c000a37e:	e8 1b f3 ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c000a383:	5a                   	pop    edx
c000a384:	59                   	pop    ecx
c000a385:	8b 10                	mov    edx,DWORD PTR [eax]
c000a387:	89 d1                	mov    ecx,edx
c000a389:	81 e1 01 08 00 00    	and    ecx,0x801
c000a38f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a395:	74 3e                	je     c000a3d5 <VAS::scanForEviction()+0x7b>
c000a397:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a39d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a3a3:	76 2b                	jbe    c000a3d0 <VAS::scanForEviction()+0x76>
c000a3a5:	47                   	inc    edi
c000a3a6:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a3ad:	83 ff 03             	cmp    edi,0x3
c000a3b0:	74 32                	je     c000a3e4 <VAS::scanForEviction()+0x8a>
c000a3b2:	31 db                	xor    ebx,ebx
c000a3b4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a3ba:	75 c0                	jne    c000a37c <VAS::scanForEviction()+0x22>
c000a3bc:	89 da                	mov    edx,ebx
c000a3be:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a3c1:	c1 ea 16             	shr    edx,0x16
c000a3c4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a3c8:	75 b2                	jne    c000a37c <VAS::scanForEviction()+0x22>
c000a3ca:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a3d0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a3d3:	eb 91                	jmp    c000a366 <VAS::scanForEviction()+0xc>
c000a3d5:	f6 c2 20             	test   dl,0x20
c000a3d8:	74 12                	je     c000a3ec <VAS::scanForEviction()+0x92>
c000a3da:	83 e2 df             	and    edx,0xffffffdf
c000a3dd:	89 10                	mov    DWORD PTR [eax],edx
c000a3df:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3e2:	eb b3                	jmp    c000a397 <VAS::scanForEviction()+0x3d>
c000a3e4:	31 ff                	xor    edi,edi
c000a3e6:	5b                   	pop    ebx
c000a3e7:	5e                   	pop    esi
c000a3e8:	89 f8                	mov    eax,edi
c000a3ea:	5f                   	pop    edi
c000a3eb:	c3                   	ret    
c000a3ec:	83 ec 08             	sub    esp,0x8
c000a3ef:	89 d7                	mov    edi,edx
c000a3f1:	53                   	push   ebx
c000a3f2:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000a3f8:	68 62 fa 01 c0       	push   0xc001fa62
c000a3fd:	e8 67 02 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a402:	58                   	pop    eax
c000a403:	5a                   	pop    edx
c000a404:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000a407:	56                   	push   esi
c000a408:	e8 8b fd ff ff       	call   c000a198 <VAS::evict(unsigned long)>
c000a40d:	59                   	pop    ecx
c000a40e:	5b                   	pop    ebx
c000a40f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000a412:	68 76 fa 01 c0       	push   0xc001fa76
c000a417:	e8 4d 02 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a41c:	83 c4 10             	add    esp,0x10
c000a41f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a426:	89 f8                	mov    eax,edi
c000a428:	5b                   	pop    ebx
c000a429:	5e                   	pop    esi
c000a42a:	5f                   	pop    edi
c000a42b:	c3                   	ret    

c000a42c <mapVASFirstTime>:
c000a42c:	55                   	push   ebp
c000a42d:	57                   	push   edi
c000a42e:	56                   	push   esi
c000a42f:	53                   	push   ebx
c000a430:	83 ec 0c             	sub    esp,0xc
c000a433:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a438:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a43b:	83 fa 01             	cmp    edx,0x1
c000a43e:	0f 84 c8 00 00 00    	je     c000a50c <mapVASFirstTime+0xe0>
c000a444:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a447:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a44a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a44f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a454:	c1 e5 15             	shl    ebp,0x15
c000a457:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a45d:	29 eb                	sub    ebx,ebp
c000a45f:	29 ef                	sub    edi,ebp
c000a461:	e8 fa d6 ff ff       	call   c0007b60 <Phys::allocatePage()>
c000a466:	83 ec 0c             	sub    esp,0xc
c000a469:	68 03 04 00 00       	push   0x403
c000a46e:	6a 01                	push   0x1
c000a470:	53                   	push   ebx
c000a471:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a477:	50                   	push   eax
c000a478:	56                   	push   esi
c000a479:	e8 f0 f8 ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a47e:	83 c4 20             	add    esp,0x20
c000a481:	39 fb                	cmp    ebx,edi
c000a483:	75 dc                	jne    c000a461 <mapVASFirstTime+0x35>
c000a485:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a48a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a48f:	29 eb                	sub    ebx,ebp
c000a491:	29 ef                	sub    edi,ebp
c000a493:	e8 c8 d6 ff ff       	call   c0007b60 <Phys::allocatePage()>
c000a498:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a49c:	19 d2                	sbb    edx,edx
c000a49e:	83 ec 0c             	sub    esp,0xc
c000a4a1:	83 e2 04             	and    edx,0x4
c000a4a4:	81 c2 03 04 00 00    	add    edx,0x403
c000a4aa:	52                   	push   edx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	53                   	push   ebx
c000a4ae:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a4b4:	50                   	push   eax
c000a4b5:	56                   	push   esi
c000a4b6:	e8 b3 f8 ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4bb:	83 c4 20             	add    esp,0x20
c000a4be:	39 df                	cmp    edi,ebx
c000a4c0:	75 d1                	jne    c000a493 <mapVASFirstTime+0x67>
c000a4c2:	bb 8c 30 02 c0       	mov    ebx,0xc002308c
c000a4c7:	83 ec 0c             	sub    esp,0xc
c000a4ca:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a4d0:	6a 04                	push   0x4
c000a4d2:	c1 eb 0c             	shr    ebx,0xc
c000a4d5:	6a ff                	push   0xffffffff
c000a4d7:	53                   	push   ebx
c000a4d8:	68 00 20 02 c0       	push   0xc0022000
c000a4dd:	56                   	push   esi
c000a4de:	e8 2b f3 ff ff       	call   c000980e <VAS::reflagRange(unsigned long, int, int, int)>
c000a4e3:	83 c4 14             	add    esp,0x14
c000a4e6:	6a 04                	push   0x4
c000a4e8:	6a ff                	push   0xffffffff
c000a4ea:	53                   	push   ebx
c000a4eb:	68 00 20 02 c0       	push   0xc0022000
c000a4f0:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000a4f6:	e8 13 f3 ff ff       	call   c000980e <VAS::reflagRange(unsigned long, int, int, int)>
c000a4fb:	0f 20 d8             	mov    eax,cr3
c000a4fe:	0f 22 d8             	mov    cr3,eax
c000a501:	83 c4 20             	add    esp,0x20
c000a504:	83 c4 0c             	add    esp,0xc
c000a507:	5b                   	pop    ebx
c000a508:	5e                   	pop    esi
c000a509:	5f                   	pop    edi
c000a50a:	5d                   	pop    ebp
c000a50b:	c3                   	ret    
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	68 89 fa 01 c0       	push   0xc001fa89
c000a514:	e8 50 01 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a519:	83 c4 10             	add    esp,0x10
c000a51c:	83 c4 0c             	add    esp,0xc
c000a51f:	5b                   	pop    ebx
c000a520:	5e                   	pop    esi
c000a521:	5f                   	pop    edi
c000a522:	5d                   	pop    ebp
c000a523:	c3                   	ret    

c000a524 <__cxa_atexit>:
c000a524:	31 c0                	xor    eax,eax
c000a526:	c3                   	ret    

c000a527 <__cxa_finalize>:
c000a527:	c3                   	ret    

c000a528 <__stack_chk_fail>:
c000a528:	55                   	push   ebp
c000a529:	89 e5                	mov    ebp,esp
c000a52b:	83 ec 10             	sub    esp,0x10
c000a52e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a531:	68 a2 fa 01 c0       	push   0xc001faa2
c000a536:	e8 2e 01 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a53b:	58                   	pop    eax
c000a53c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a53f:	5a                   	pop    edx
c000a540:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a543:	68 a2 fa 01 c0       	push   0xc001faa2
c000a548:	e8 1c 01 00 00       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000a54d:	c7 04 24 aa fa 01 c0 	mov    DWORD PTR [esp],0xc001faaa
c000a554:	e8 64 5f 00 00       	call   c00104bd <KePanic(char const*)>
c000a559:	83 c4 10             	add    esp,0x10
c000a55c:	c9                   	leave  
c000a55d:	c3                   	ret    

c000a55e <__cxa_pure_virtual>:
c000a55e:	83 ec 18             	sub    esp,0x18
c000a561:	68 c2 fa 01 c0       	push   0xc001fac2
c000a566:	e8 52 5f 00 00       	call   c00104bd <KePanic(char const*)>
c000a56b:	83 c4 1c             	add    esp,0x1c
c000a56e:	c3                   	ret    

c000a56f <operator new[](unsigned long)>:
c000a56f:	e9 07 d3 ff ff       	jmp    c000787b <malloc>

c000a574 <operator delete(void*, unsigned long)>:
c000a574:	e9 22 d3 ff ff       	jmp    c000789b <rfree>

c000a579 <operator delete[](void*)>:
c000a579:	e9 1d d3 ff ff       	jmp    c000789b <rfree>

c000a57e <operator delete[](void*, unsigned long)>:
c000a57e:	e9 18 d3 ff ff       	jmp    c000789b <rfree>

c000a583 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a583:	55                   	push   ebp
c000a584:	57                   	push   edi
c000a585:	56                   	push   esi
c000a586:	53                   	push   ebx
c000a587:	83 ec 20             	sub    esp,0x20
c000a58a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a58e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a592:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a59a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a59e:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a5a6:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a5ae:	89 f7                	mov    edi,esi
c000a5b0:	89 eb                	mov    ebx,ebp
c000a5b2:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a5ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a5bf:	eb 02                	jmp    c000a5c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a5c1:	89 c7                	mov    edi,eax
c000a5c3:	89 f8                	mov    eax,edi
c000a5c5:	31 d2                	xor    edx,edx
c000a5c7:	43                   	inc    ebx
c000a5c8:	f7 f1                	div    ecx
c000a5ca:	39 cf                	cmp    edi,ecx
c000a5cc:	73 f3                	jae    c000a5c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a5ce:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a5d1:	eb 02                	jmp    c000a5d5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a5d3:	89 c6                	mov    esi,eax
c000a5d5:	89 f0                	mov    eax,esi
c000a5d7:	31 d2                	xor    edx,edx
c000a5d9:	4b                   	dec    ebx
c000a5da:	f7 f1                	div    ecx
c000a5dc:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a5e0:	88 13                	mov    BYTE PTR [ebx],dl
c000a5e2:	39 ce                	cmp    esi,ecx
c000a5e4:	73 ed                	jae    c000a5d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x50>
c000a5e6:	83 c4 20             	add    esp,0x20
c000a5e9:	89 e8                	mov    eax,ebp
c000a5eb:	5b                   	pop    ebx
c000a5ec:	5e                   	pop    esi
c000a5ed:	5f                   	pop    edi
c000a5ee:	5d                   	pop    ebp
c000a5ef:	c3                   	ret    

c000a5f0 <Dbg::logc(char)>:
c000a5f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5f4:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a5fb:	75 12                	jne    c000a60f <Dbg::logc(char)+0x1f>
c000a5fd:	ba fd 03 00 00       	mov    edx,0x3fd
c000a602:	ec                   	in     al,dx
c000a603:	a8 20                	test   al,0x20
c000a605:	74 fb                	je     c000a602 <Dbg::logc(char)+0x12>
c000a607:	ba f8 03 00 00       	mov    edx,0x3f8
c000a60c:	88 c8                	mov    al,cl
c000a60e:	ee                   	out    dx,al
c000a60f:	c3                   	ret    

c000a610 <Dbg::logs(char*)>:
c000a610:	53                   	push   ebx
c000a611:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a615:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a618:	84 c0                	test   al,al
c000a61a:	74 0f                	je     c000a62b <Dbg::logs(char*)+0x1b>
c000a61c:	50                   	push   eax
c000a61d:	43                   	inc    ebx
c000a61e:	e8 cd ff ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a623:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a626:	5a                   	pop    edx
c000a627:	84 c0                	test   al,al
c000a629:	75 f1                	jne    c000a61c <Dbg::logs(char*)+0xc>
c000a62b:	5b                   	pop    ebx
c000a62c:	c3                   	ret    

c000a62d <Dbg::logWriteInt(unsigned int)>:
c000a62d:	83 ec 10             	sub    esp,0x10
c000a630:	6a 0a                	push   0xa
c000a632:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a636:	50                   	push   eax
c000a637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63b:	e8 43 ff ff ff       	call   c000a583 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a640:	50                   	push   eax
c000a641:	e8 ca ff ff ff       	call   c000a610 <Dbg::logs(char*)>
c000a646:	83 c4 20             	add    esp,0x20
c000a649:	c3                   	ret    

c000a64a <Dbg::logWriteIntBase(unsigned int, int)>:
c000a64a:	83 ec 10             	sub    esp,0x10
c000a64d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a651:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a655:	50                   	push   eax
c000a656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65a:	e8 24 ff ff ff       	call   c000a583 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a65f:	50                   	push   eax
c000a660:	e8 ab ff ff ff       	call   c000a610 <Dbg::logs(char*)>
c000a665:	83 c4 20             	add    esp,0x20
c000a668:	c3                   	ret    

c000a669 <Dbg::kprintf(char const*, ...)>:
c000a669:	55                   	push   ebp
c000a66a:	57                   	push   edi
c000a66b:	56                   	push   esi
c000a66c:	53                   	push   ebx
c000a66d:	83 ec 0c             	sub    esp,0xc
c000a670:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a674:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a67b:	74 08                	je     c000a685 <Dbg::kprintf(char const*, ...)+0x1c>
c000a67d:	83 c4 0c             	add    esp,0xc
c000a680:	5b                   	pop    ebx
c000a681:	5e                   	pop    esi
c000a682:	5f                   	pop    edi
c000a683:	5d                   	pop    ebp
c000a684:	c3                   	ret    
c000a685:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a689:	31 ed                	xor    ebp,ebp
c000a68b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a68f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a692:	84 c0                	test   al,al
c000a694:	74 e7                	je     c000a67d <Dbg::kprintf(char const*, ...)+0x14>
c000a696:	8d 75 01             	lea    esi,[ebp+0x1]
c000a699:	8d 3c 33             	lea    edi,[ebx+esi*1]
c000a69c:	3c 25                	cmp    al,0x25
c000a69e:	75 43                	jne    c000a6e3 <Dbg::kprintf(char const*, ...)+0x7a>
c000a6a0:	8a 07                	mov    al,BYTE PTR [edi]
c000a6a2:	83 c5 02             	add    ebp,0x2
c000a6a5:	8d 34 2b             	lea    esi,[ebx+ebp*1]
c000a6a8:	83 e8 25             	sub    eax,0x25
c000a6ab:	3c 53                	cmp    al,0x53
c000a6ad:	0f 87 c8 00 00 00    	ja     c000a77b <Dbg::kprintf(char const*, ...)+0x112>
c000a6b3:	0f b6 c0             	movzx  eax,al
c000a6b6:	ff 24 85 d8 fa 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0528]
c000a6bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6c1:	89 c8                	mov    eax,ecx
c000a6c3:	83 c1 04             	add    ecx,0x4
c000a6c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6ca:	ff 30                	push   DWORD PTR [eax]
c000a6cc:	e8 5c ff ff ff       	call   c000a62d <Dbg::logWriteInt(unsigned int)>
c000a6d1:	5f                   	pop    edi
c000a6d2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a6d5:	84 c0                	test   al,al
c000a6d7:	74 a4                	je     c000a67d <Dbg::kprintf(char const*, ...)+0x14>
c000a6d9:	8d 75 01             	lea    esi,[ebp+0x1]
c000a6dc:	8d 3c 33             	lea    edi,[ebx+esi*1]
c000a6df:	3c 25                	cmp    al,0x25
c000a6e1:	74 bd                	je     c000a6a0 <Dbg::kprintf(char const*, ...)+0x37>
c000a6e3:	50                   	push   eax
c000a6e4:	89 f5                	mov    ebp,esi
c000a6e6:	89 fe                	mov    esi,edi
c000a6e8:	e8 03 ff ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a6ed:	58                   	pop    eax
c000a6ee:	eb e2                	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a6f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6f4:	89 c8                	mov    eax,ecx
c000a6f6:	83 c1 04             	add    ecx,0x4
c000a6f9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6fd:	ff 30                	push   DWORD PTR [eax]
c000a6ff:	e8 0c ff ff ff       	call   c000a610 <Dbg::logs(char*)>
c000a704:	58                   	pop    eax
c000a705:	eb cb                	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a707:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a70b:	89 d0                	mov    eax,edx
c000a70d:	83 c2 04             	add    edx,0x4
c000a710:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a714:	ff 30                	push   DWORD PTR [eax]
c000a716:	e8 12 ff ff ff       	call   c000a62d <Dbg::logWriteInt(unsigned int)>
c000a71b:	58                   	pop    eax
c000a71c:	eb b4                	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a71e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a722:	89 d0                	mov    eax,edx
c000a724:	83 c2 04             	add    edx,0x4
c000a727:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a72a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a72e:	50                   	push   eax
c000a72f:	e8 bc fe ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a734:	58                   	pop    eax
c000a735:	eb 9b                	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a737:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a73b:	89 c8                	mov    eax,ecx
c000a73d:	83 c1 04             	add    ecx,0x4
c000a740:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a744:	6a 10                	push   0x10
c000a746:	ff 30                	push   DWORD PTR [eax]
c000a748:	e8 fd fe ff ff       	call   c000a64a <Dbg::logWriteIntBase(unsigned int, int)>
c000a74d:	59                   	pop    ecx
c000a74e:	5f                   	pop    edi
c000a74f:	eb 81                	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a751:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a755:	89 d0                	mov    eax,edx
c000a757:	83 c2 08             	add    edx,0x8
c000a75a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a75e:	6a 10                	push   0x10
c000a760:	ff 30                	push   DWORD PTR [eax]
c000a762:	e8 e3 fe ff ff       	call   c000a64a <Dbg::logWriteIntBase(unsigned int, int)>
c000a767:	58                   	pop    eax
c000a768:	5a                   	pop    edx
c000a769:	e9 64 ff ff ff       	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a76e:	6a 25                	push   0x25
c000a770:	e8 7b fe ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a775:	58                   	pop    eax
c000a776:	e9 57 ff ff ff       	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>
c000a77b:	6a 25                	push   0x25
c000a77d:	e8 6e fe ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a782:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a785:	50                   	push   eax
c000a786:	e8 65 fe ff ff       	call   c000a5f0 <Dbg::logc(char)>
c000a78b:	5a                   	pop    edx
c000a78c:	59                   	pop    ecx
c000a78d:	e9 40 ff ff ff       	jmp    c000a6d2 <Dbg::kprintf(char const*, ...)+0x69>

c000a792 <File::read(unsigned long long, void*, int*)>:
c000a792:	53                   	push   ebx
c000a793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a797:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a79b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a2:	3c 19                	cmp    al,0x19
c000a7a4:	77 35                	ja     c000a7db <File::read(unsigned long long, void*, int*)+0x49>
c000a7a6:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7ad:	85 c0                	test   eax,eax
c000a7af:	74 2a                	je     c000a7db <File::read(unsigned long long, void*, int*)+0x49>
c000a7b1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7b7:	85 c0                	test   eax,eax
c000a7b9:	74 20                	je     c000a7db <File::read(unsigned long long, void*, int*)+0x49>
c000a7bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7bf:	74 21                	je     c000a7e2 <File::read(unsigned long long, void*, int*)+0x50>
c000a7c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7c7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7d5:	5b                   	pop    ebx
c000a7d6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a7d9:	ff e0                	jmp    eax
c000a7db:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e0:	eb 05                	jmp    c000a7e7 <File::read(unsigned long long, void*, int*)+0x55>
c000a7e2:	b8 05 00 00 00       	mov    eax,0x5
c000a7e7:	5b                   	pop    ebx
c000a7e8:	c3                   	ret    
c000a7e9:	90                   	nop

c000a7ea <File::write(unsigned long long, void*, int*)>:
c000a7ea:	53                   	push   ebx
c000a7eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7fa:	3c 19                	cmp    al,0x19
c000a7fc:	77 35                	ja     c000a833 <File::write(unsigned long long, void*, int*)+0x49>
c000a7fe:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a805:	85 c0                	test   eax,eax
c000a807:	74 2a                	je     c000a833 <File::write(unsigned long long, void*, int*)+0x49>
c000a809:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a80f:	85 c0                	test   eax,eax
c000a811:	74 20                	je     c000a833 <File::write(unsigned long long, void*, int*)+0x49>
c000a813:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a817:	74 21                	je     c000a83a <File::write(unsigned long long, void*, int*)+0x50>
c000a819:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a81b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a81f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a829:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a82d:	5b                   	pop    ebx
c000a82e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a831:	ff e0                	jmp    eax
c000a833:	b8 0b 00 00 00       	mov    eax,0xb
c000a838:	eb 05                	jmp    c000a83f <File::write(unsigned long long, void*, int*)+0x55>
c000a83a:	b8 05 00 00 00       	mov    eax,0x5
c000a83f:	5b                   	pop    ebx
c000a840:	c3                   	ret    
c000a841:	90                   	nop

c000a842 <Directory::read(unsigned long long, void*, int*)>:
c000a842:	53                   	push   ebx
c000a843:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a847:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a84b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a852:	3c 19                	cmp    al,0x19
c000a854:	77 35                	ja     c000a88b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a856:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a85d:	85 c0                	test   eax,eax
c000a85f:	74 2a                	je     c000a88b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a861:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a867:	85 c0                	test   eax,eax
c000a869:	74 20                	je     c000a88b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a86b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a86f:	74 21                	je     c000a892 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a871:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a873:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a877:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a87d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a881:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a885:	5b                   	pop    ebx
c000a886:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a889:	ff e0                	jmp    eax
c000a88b:	b8 0b 00 00 00       	mov    eax,0xb
c000a890:	eb 05                	jmp    c000a897 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a892:	b8 05 00 00 00       	mov    eax,0x5
c000a897:	5b                   	pop    ebx
c000a898:	c3                   	ret    
c000a899:	90                   	nop

c000a89a <Directory::write(unsigned long long, void*, int*)>:
c000a89a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a89e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a8a5:	b8 0b 00 00 00       	mov    eax,0xb
c000a8aa:	80 fa 19             	cmp    dl,0x19
c000a8ad:	77 18                	ja     c000a8c7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8af:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a8b6:	85 d2                	test   edx,edx
c000a8b8:	74 0d                	je     c000a8c7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8ba:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a8c1:	19 c0                	sbb    eax,eax
c000a8c3:	83 e0 0a             	and    eax,0xa
c000a8c6:	40                   	inc    eax
c000a8c7:	c3                   	ret    

c000a8c8 <File::isAtty()>:
c000a8c8:	31 c0                	xor    eax,eax
c000a8ca:	c3                   	ret    
c000a8cb:	90                   	nop

c000a8cc <Directory::isAtty()>:
c000a8cc:	31 c0                	xor    eax,eax
c000a8ce:	c3                   	ret    
c000a8cf:	90                   	nop

c000a8d0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a8d0:	b8 0a 00 00 00       	mov    eax,0xa
c000a8d5:	c3                   	ret    

c000a8d6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a8d6:	b8 0a 00 00 00       	mov    eax,0xa
c000a8db:	c3                   	ret    

c000a8dc <Filesystem::allocateSwapfile(char const*, int)>:
c000a8dc:	31 c0                	xor    eax,eax
c000a8de:	31 d2                	xor    edx,edx
c000a8e0:	c3                   	ret    
c000a8e1:	90                   	nop

c000a8e2 <File::~File()>:
c000a8e2:	83 ec 0c             	sub    esp,0xc
c000a8e5:	ba 98 fc 01 c0       	mov    edx,0xc001fc98
c000a8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ee:	89 10                	mov    DWORD PTR [eax],edx
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	83 ec 0c             	sub    esp,0xc
c000a8f7:	50                   	push   eax
c000a8f8:	e8 5f e8 ff ff       	call   c000915c <UnixFile::~UnixFile()>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	90                   	nop
c000a901:	83 c4 0c             	add    esp,0xc
c000a904:	c3                   	ret    
c000a905:	90                   	nop

c000a906 <File::~File()>:
c000a906:	83 ec 0c             	sub    esp,0xc
c000a909:	83 ec 0c             	sub    esp,0xc
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 cd ff ff ff       	call   c000a8e2 <File::~File()>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 ec 08             	sub    esp,0x8
c000a91b:	68 14 01 00 00       	push   0x114
c000a920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a924:	e8 4b fc ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	83 c4 0c             	add    esp,0xc
c000a92f:	c3                   	ret    

c000a930 <Directory::~Directory()>:
c000a930:	83 ec 0c             	sub    esp,0xc
c000a933:	ba b4 fc 01 c0       	mov    edx,0xc001fcb4
c000a938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a93c:	89 10                	mov    DWORD PTR [eax],edx
c000a93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a942:	83 ec 0c             	sub    esp,0xc
c000a945:	50                   	push   eax
c000a946:	e8 11 e8 ff ff       	call   c000915c <UnixFile::~UnixFile()>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	90                   	nop
c000a94f:	83 c4 0c             	add    esp,0xc
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <Directory::~Directory()>:
c000a954:	83 ec 0c             	sub    esp,0xc
c000a957:	83 ec 0c             	sub    esp,0xc
c000a95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a95e:	e8 cd ff ff ff       	call   c000a930 <Directory::~Directory()>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	83 ec 08             	sub    esp,0x8
c000a969:	68 14 01 00 00       	push   0x114
c000a96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a972:	e8 fd fb ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	83 c4 0c             	add    esp,0xc
c000a97d:	c3                   	ret    

c000a97e <Filesystem::Filesystem()>:
c000a97e:	ba 30 fc 01 c0       	mov    edx,0xc001fc30
c000a983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a987:	89 10                	mov    DWORD PTR [eax],edx
c000a989:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a98f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a993:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99a:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a99f:	90                   	nop
c000a9a0:	c3                   	ret    
c000a9a1:	90                   	nop

c000a9a2 <Filesystem::~Filesystem()>:
c000a9a2:	ba 30 fc 01 c0       	mov    edx,0xc001fc30
c000a9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ab:	89 10                	mov    DWORD PTR [eax],edx
c000a9ad:	90                   	nop
c000a9ae:	c3                   	ret    
c000a9af:	90                   	nop

c000a9b0 <Filesystem::~Filesystem()>:
c000a9b0:	83 ec 0c             	sub    esp,0xc
c000a9b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9b7:	e8 e6 ff ff ff       	call   c000a9a2 <Filesystem::~Filesystem()>
c000a9bc:	83 c4 04             	add    esp,0x4
c000a9bf:	83 ec 08             	sub    esp,0x8
c000a9c2:	6a 08                	push   0x8
c000a9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9c8:	e8 a7 fb ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000a9cd:	83 c4 10             	add    esp,0x10
c000a9d0:	83 c4 0c             	add    esp,0xc
c000a9d3:	c3                   	ret    

c000a9d4 <Fs::getcwd(Process*, char*, int)>:
c000a9d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9d8:	31 c0                	xor    eax,eax
c000a9da:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a9dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a9e1:	7d 15                	jge    c000a9f8 <Fs::getcwd(Process*, char*, int)+0x24>
c000a9e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9ee:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9f1:	84 c9                	test   cl,cl
c000a9f3:	74 06                	je     c000a9fb <Fs::getcwd(Process*, char*, int)+0x27>
c000a9f5:	40                   	inc    eax
c000a9f6:	eb e2                	jmp    c000a9da <Fs::getcwd(Process*, char*, int)+0x6>
c000a9f8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9fb:	31 c0                	xor    eax,eax
c000a9fd:	c3                   	ret    

c000a9fe <Fs::initVFS()>:
c000a9fe:	83 ec 18             	sub    esp,0x18
c000aa01:	6a 08                	push   0x8
c000aa03:	e8 73 ce ff ff       	call   c000787b <malloc>
c000aa08:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa0b:	e8 b8 db 00 00       	call   c00185c8 <FAT::FAT()>
c000aa10:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aa17:	e8 5f ce ff ff       	call   c000787b <malloc>
c000aa1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1f:	e8 4e ea 00 00       	call   c0019472 <ISO9660::ISO9660()>
c000aa24:	83 c4 1c             	add    esp,0x1c
c000aa27:	c3                   	ret    

c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aa28:	55                   	push   ebp
c000aa29:	57                   	push   edi
c000aa2a:	56                   	push   esi
c000aa2b:	53                   	push   ebx
c000aa2c:	81 ec 10 04 00 00    	sub    esp,0x410
c000aa32:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aa39:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aa40:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aa47:	68 00 04 00 00       	push   0x400
c000aa4c:	6a 00                	push   0x0
c000aa4e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa52:	56                   	push   esi
c000aa53:	e8 28 5b ff ff       	call   c0000580 <memset>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa5f:	75 0b                	jne    c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa61:	50                   	push   eax
c000aa62:	50                   	push   eax
c000aa63:	57                   	push   edi
c000aa64:	56                   	push   esi
c000aa65:	e8 16 5c ff ff       	call   c0000680 <strcpy>
c000aa6a:	eb 41                	jmp    c000aaad <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa6c:	8a 07                	mov    al,BYTE PTR [edi]
c000aa6e:	3c 2f                	cmp    al,0x2f
c000aa70:	74 04                	je     c000aa76 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa72:	3c 5c                	cmp    al,0x5c
c000aa74:	75 18                	jne    c000aa8e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa76:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa79:	3c 60                	cmp    al,0x60
c000aa7b:	7e 03                	jle    c000aa80 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa7d:	83 e8 20             	sub    eax,0x20
c000aa80:	88 04 24             	mov    BYTE PTR [esp],al
c000aa83:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa8a:	50                   	push   eax
c000aa8b:	50                   	push   eax
c000aa8c:	eb 18                	jmp    c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa8e:	50                   	push   eax
c000aa8f:	50                   	push   eax
c000aa90:	55                   	push   ebp
c000aa91:	56                   	push   esi
c000aa92:	e8 e9 5b ff ff       	call   c0000680 <strcpy>
c000aa97:	5a                   	pop    edx
c000aa98:	59                   	pop    ecx
c000aa99:	68 02 0c 02 c0       	push   0xc0020c02
c000aa9e:	56                   	push   esi
c000aa9f:	e8 7c 5d ff ff       	call   c0000820 <strcat>
c000aaa4:	5d                   	pop    ebp
c000aaa5:	58                   	pop    eax
c000aaa6:	57                   	push   edi
c000aaa7:	56                   	push   esi
c000aaa8:	e8 73 5d ff ff       	call   c0000820 <strcat>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aab3:	3c 60                	cmp    al,0x60
c000aab5:	7e 03                	jle    c000aaba <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aab7:	83 e8 20             	sub    eax,0x20
c000aaba:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aac1:	bf 03 00 00 00       	mov    edi,0x3
c000aac6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aacc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aad0:	88 04 24             	mov    BYTE PTR [esp],al
c000aad3:	88 03                	mov    BYTE PTR [ebx],al
c000aad5:	b8 03 00 00 00       	mov    eax,0x3
c000aada:	8a 0c 3c             	mov    cl,BYTE PTR [esp+edi*1]
c000aadd:	84 c9                	test   cl,cl
c000aadf:	0f 84 91 00 00 00    	je     c000ab76 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aae5:	8d 57 01             	lea    edx,[edi+0x1]
c000aae8:	80 f9 2f             	cmp    cl,0x2f
c000aaeb:	74 05                	je     c000aaf2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aaed:	80 f9 5c             	cmp    cl,0x5c
c000aaf0:	75 12                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaf2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaf7:	89 c5                	mov    ebp,eax
c000aaf9:	74 09                	je     c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aafb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaff:	40                   	inc    eax
c000ab00:	89 d7                	mov    edi,edx
c000ab02:	eb d6                	jmp    c000aada <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000ab04:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ab09:	75 5b                	jne    c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab0b:	80 f9 2e             	cmp    cl,0x2e
c000ab0e:	75 56                	jne    c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab10:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000ab14:	74 19                	je     c000ab2f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ab16:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab1b:	74 53                	je     c000ab70 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab1d:	89 fa                	mov    edx,edi
c000ab1f:	42                   	inc    edx
c000ab20:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000ab23:	80 f9 2f             	cmp    cl,0x2f
c000ab26:	74 f7                	je     c000ab1f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab28:	80 f9 5c             	cmp    cl,0x5c
c000ab2b:	74 f2                	je     c000ab1f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab2d:	eb d1                	jmp    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab2f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab34:	74 3a                	je     c000ab70 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab36:	83 f8 03             	cmp    eax,0x3
c000ab39:	74 c5                	je     c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab3b:	42                   	inc    edx
c000ab3c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000ab3f:	80 f9 2f             	cmp    cl,0x2f
c000ab42:	74 f7                	je     c000ab3b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab44:	80 f9 5c             	cmp    cl,0x5c
c000ab47:	74 f2                	je     c000ab3b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab49:	48                   	dec    eax
c000ab4a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab4e:	75 06                	jne    c000ab56 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab50:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab54:	eb f3                	jmp    c000ab49 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab56:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab5a:	74 07                	je     c000ab63 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab5c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab60:	48                   	dec    eax
c000ab61:	eb f3                	jmp    c000ab56 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab63:	40                   	inc    eax
c000ab64:	eb 9a                	jmp    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab66:	80 f9 2f             	cmp    cl,0x2f
c000ab69:	74 95                	je     c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab6b:	80 f9 5c             	cmp    cl,0x5c
c000ab6e:	74 90                	je     c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab70:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ab73:	40                   	inc    eax
c000ab74:	eb 8a                	jmp    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab7a:	83 ec 0c             	sub    esp,0xc
c000ab7d:	53                   	push   ebx
c000ab7e:	e8 2d 5a ff ff       	call   c00005b0 <strlen>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab8b:	75 26                	jne    c000abb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab8d:	83 ec 0c             	sub    esp,0xc
c000ab90:	53                   	push   ebx
c000ab91:	e8 1a 5a ff ff       	call   c00005b0 <strlen>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab9e:	74 26                	je     c000abc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	53                   	push   ebx
c000aba4:	e8 07 5a ff ff       	call   c00005b0 <strlen>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000abb1:	eb c7                	jmp    c000ab7a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000abb3:	83 ec 0c             	sub    esp,0xc
c000abb6:	53                   	push   ebx
c000abb7:	e8 f4 59 ff ff       	call   c00005b0 <strlen>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abc4:	74 c7                	je     c000ab8d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000abc6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000abcc:	5b                   	pop    ebx
c000abcd:	5e                   	pop    esi
c000abce:	5f                   	pop    edi
c000abcf:	5d                   	pop    ebp
c000abd0:	c3                   	ret    
c000abd1:	90                   	nop

c000abd2 <File::File(char const*, Process*)>:
c000abd2:	83 ec 0c             	sub    esp,0xc
c000abd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd9:	83 ec 08             	sub    esp,0x8
c000abdc:	6a 00                	push   0x0
c000abde:	50                   	push   eax
c000abdf:	e8 96 e3 ff ff       	call   c0008f7a <UnixFile::UnixFile(int)>
c000abe4:	83 c4 10             	add    esp,0x10
c000abe7:	ba 98 fc 01 c0       	mov    edx,0xc001fc98
c000abec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf0:	89 10                	mov    DWORD PTR [eax],edx
c000abf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abf6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac00:	83 c0 0d             	add    eax,0xd
c000ac03:	83 ec 04             	sub    esp,0x4
c000ac06:	52                   	push   edx
c000ac07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac0b:	50                   	push   eax
c000ac0c:	e8 17 fe ff ff       	call   c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ac11:	83 c4 10             	add    esp,0x10
c000ac14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac18:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ac1b:	8d 50 bf             	lea    edx,[eax-0x41]
c000ac1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac22:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ac28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac2c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ac30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac34:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac3a:	0f b6 c0             	movzx  eax,al
c000ac3d:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac44:	85 c0                	test   eax,eax
c000ac46:	74 3e                	je     c000ac86 <File::File(char const*, Process*)+0xb4>
c000ac48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac4c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac52:	0f b6 c0             	movzx  eax,al
c000ac55:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac5c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac62:	85 c0                	test   eax,eax
c000ac64:	75 20                	jne    c000ac86 <File::File(char const*, Process*)+0xb4>
c000ac66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac6a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac70:	0f b6 c0             	movzx  eax,al
c000ac73:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac7a:	83 ec 0c             	sub    esp,0xc
c000ac7d:	50                   	push   eax
c000ac7e:	e8 7f 20 00 00       	call   c000cd02 <LogicalDisk::mount()>
c000ac83:	83 c4 10             	add    esp,0x10
c000ac86:	90                   	nop
c000ac87:	83 c4 0c             	add    esp,0xc
c000ac8a:	c3                   	ret    
c000ac8b:	90                   	nop

c000ac8c <File::open(FileOpenMode)>:
c000ac8c:	53                   	push   ebx
c000ac8d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac92:	83 ec 08             	sub    esp,0x8
c000ac95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac99:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aca0:	80 fa 19             	cmp    dl,0x19
c000aca3:	77 40                	ja     c000ace5 <File::open(FileOpenMode)+0x59>
c000aca5:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000acac:	85 d2                	test   edx,edx
c000acae:	74 35                	je     c000ace5 <File::open(FileOpenMode)+0x59>
c000acb0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000acb6:	85 d2                	test   edx,edx
c000acb8:	74 2b                	je     c000ace5 <File::open(FileOpenMode)+0x59>
c000acba:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000acbe:	b8 06 00 00 00       	mov    eax,0x6
c000acc3:	75 20                	jne    c000ace5 <File::open(FileOpenMode)+0x59>
c000acc5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000accb:	8b 02                	mov    eax,DWORD PTR [edx]
c000accd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd1:	51                   	push   ecx
c000acd2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000acd5:	51                   	push   ecx
c000acd6:	52                   	push   edx
c000acd7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	85 c0                	test   eax,eax
c000acdf:	75 04                	jne    c000ace5 <File::open(FileOpenMode)+0x59>
c000ace1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ace5:	83 c4 08             	add    esp,0x8
c000ace8:	5b                   	pop    ebx
c000ace9:	c3                   	ret    

c000acea <File::close()>:
c000acea:	53                   	push   ebx
c000aceb:	b8 0b 00 00 00       	mov    eax,0xb
c000acf0:	83 ec 08             	sub    esp,0x8
c000acf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acf7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acfe:	80 fa 19             	cmp    dl,0x19
c000ad01:	77 41                	ja     c000ad44 <File::close()+0x5a>
c000ad03:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad0a:	85 db                	test   ebx,ebx
c000ad0c:	74 36                	je     c000ad44 <File::close()+0x5a>
c000ad0e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000ad15:	74 2d                	je     c000ad44 <File::close()+0x5a>
c000ad17:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad1b:	b8 05 00 00 00       	mov    eax,0x5
c000ad20:	74 22                	je     c000ad44 <File::close()+0x5a>
c000ad22:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ad26:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ad2d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad33:	53                   	push   ebx
c000ad34:	53                   	push   ebx
c000ad35:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad3d:	50                   	push   eax
c000ad3e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ad41:	83 c4 10             	add    esp,0x10
c000ad44:	83 c4 08             	add    esp,0x8
c000ad47:	5b                   	pop    ebx
c000ad48:	c3                   	ret    
c000ad49:	90                   	nop

c000ad4a <File::seek(unsigned long long)>:
c000ad4a:	56                   	push   esi
c000ad4b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad50:	53                   	push   ebx
c000ad51:	51                   	push   ecx
c000ad52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad5e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad65:	80 fa 19             	cmp    dl,0x19
c000ad68:	77 31                	ja     c000ad9b <File::seek(unsigned long long)+0x51>
c000ad6a:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad71:	85 d2                	test   edx,edx
c000ad73:	74 26                	je     c000ad9b <File::seek(unsigned long long)+0x51>
c000ad75:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad7b:	85 d2                	test   edx,edx
c000ad7d:	74 1c                	je     c000ad9b <File::seek(unsigned long long)+0x51>
c000ad7f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad83:	b8 05 00 00 00       	mov    eax,0x5
c000ad88:	74 11                	je     c000ad9b <File::seek(unsigned long long)+0x51>
c000ad8a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad8c:	53                   	push   ebx
c000ad8d:	51                   	push   ecx
c000ad8e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad94:	52                   	push   edx
c000ad95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	5a                   	pop    edx
c000ad9c:	5b                   	pop    ebx
c000ad9d:	5e                   	pop    esi
c000ad9e:	c3                   	ret    
c000ad9f:	90                   	nop

c000ada0 <File::tell(unsigned long long*)>:
c000ada0:	83 ec 0c             	sub    esp,0xc
c000ada3:	b8 0b 00 00 00       	mov    eax,0xb
c000ada8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000adb3:	80 fa 19             	cmp    dl,0x19
c000adb6:	77 34                	ja     c000adec <File::tell(unsigned long long*)+0x4c>
c000adb8:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000adbf:	85 d2                	test   edx,edx
c000adc1:	74 29                	je     c000adec <File::tell(unsigned long long*)+0x4c>
c000adc3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000adc9:	85 d2                	test   edx,edx
c000adcb:	74 1f                	je     c000adec <File::tell(unsigned long long*)+0x4c>
c000adcd:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000add1:	b8 05 00 00 00       	mov    eax,0x5
c000add6:	74 14                	je     c000adec <File::tell(unsigned long long*)+0x4c>
c000add8:	50                   	push   eax
c000add9:	8b 02                	mov    eax,DWORD PTR [edx]
c000addb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000addf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ade5:	52                   	push   edx
c000ade6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	83 c4 0c             	add    esp,0xc
c000adef:	c3                   	ret    

c000adf0 <File::rewind()>:
c000adf0:	83 ec 10             	sub    esp,0x10
c000adf3:	6a 00                	push   0x0
c000adf5:	6a 00                	push   0x0
c000adf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adfb:	e8 4a ff ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c000ae00:	83 c4 1c             	add    esp,0x1c
c000ae03:	c3                   	ret    

c000ae04 <File::unlink()>:
c000ae04:	83 ec 0c             	sub    esp,0xc
c000ae07:	b8 0b 00 00 00       	mov    eax,0xb
c000ae0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae17:	80 f9 19             	cmp    cl,0x19
c000ae1a:	77 2f                	ja     c000ae4b <File::unlink()+0x47>
c000ae1c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae23:	85 c9                	test   ecx,ecx
c000ae25:	74 24                	je     c000ae4b <File::unlink()+0x47>
c000ae27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae2d:	85 c9                	test   ecx,ecx
c000ae2f:	74 1a                	je     c000ae4b <File::unlink()+0x47>
c000ae31:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae35:	b8 06 00 00 00       	mov    eax,0x6
c000ae3a:	75 0f                	jne    c000ae4b <File::unlink()+0x47>
c000ae3c:	83 c2 0d             	add    edx,0xd
c000ae3f:	50                   	push   eax
c000ae40:	50                   	push   eax
c000ae41:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae43:	52                   	push   edx
c000ae44:	51                   	push   ecx
c000ae45:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae48:	83 c4 10             	add    esp,0x10
c000ae4b:	83 c4 0c             	add    esp,0xc
c000ae4e:	c3                   	ret    
c000ae4f:	90                   	nop

c000ae50 <File::rename(char const*)>:
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	b8 0b 00 00 00       	mov    eax,0xb
c000ae58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae63:	80 f9 19             	cmp    cl,0x19
c000ae66:	77 32                	ja     c000ae9a <File::rename(char const*)+0x4a>
c000ae68:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae6f:	85 c9                	test   ecx,ecx
c000ae71:	74 27                	je     c000ae9a <File::rename(char const*)+0x4a>
c000ae73:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae79:	85 c9                	test   ecx,ecx
c000ae7b:	74 1d                	je     c000ae9a <File::rename(char const*)+0x4a>
c000ae7d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae81:	b8 06 00 00 00       	mov    eax,0x6
c000ae86:	75 12                	jne    c000ae9a <File::rename(char const*)+0x4a>
c000ae88:	83 c2 0d             	add    edx,0xd
c000ae8b:	50                   	push   eax
c000ae8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae92:	52                   	push   edx
c000ae93:	51                   	push   ecx
c000ae94:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	83 c4 0c             	add    esp,0xc
c000ae9d:	c3                   	ret    

c000ae9e <File::chfatattr(unsigned char, unsigned char)>:
c000ae9e:	57                   	push   edi
c000ae9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aea4:	56                   	push   esi
c000aea5:	53                   	push   ebx
c000aea6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aeae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aeb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeb9:	80 f9 19             	cmp    cl,0x19
c000aebc:	77 37                	ja     c000aef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aebe:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aec5:	85 c9                	test   ecx,ecx
c000aec7:	74 2c                	je     c000aef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aec9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aecf:	85 c9                	test   ecx,ecx
c000aed1:	74 22                	je     c000aef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aed3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aed7:	b8 06 00 00 00       	mov    eax,0x6
c000aedc:	75 17                	jne    c000aef5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aede:	89 f0                	mov    eax,esi
c000aee0:	83 c2 0d             	add    edx,0xd
c000aee3:	0f b6 db             	movzx  ebx,bl
c000aee6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000aee8:	0f b6 f0             	movzx  esi,al
c000aeeb:	56                   	push   esi
c000aeec:	53                   	push   ebx
c000aeed:	52                   	push   edx
c000aeee:	51                   	push   ecx
c000aeef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	5b                   	pop    ebx
c000aef6:	5e                   	pop    esi
c000aef7:	5f                   	pop    edi
c000aef8:	c3                   	ret    
c000aef9:	90                   	nop

c000aefa <File::exists()>:
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	31 c0                	xor    eax,eax
c000aeff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af0a:	80 f9 19             	cmp    cl,0x19
c000af0d:	77 24                	ja     c000af33 <File::exists()+0x39>
c000af0f:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af16:	85 c9                	test   ecx,ecx
c000af18:	74 19                	je     c000af33 <File::exists()+0x39>
c000af1a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af20:	85 c9                	test   ecx,ecx
c000af22:	74 0f                	je     c000af33 <File::exists()+0x39>
c000af24:	83 c2 0d             	add    edx,0xd
c000af27:	50                   	push   eax
c000af28:	50                   	push   eax
c000af29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af2b:	52                   	push   edx
c000af2c:	51                   	push   ecx
c000af2d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	83 c4 0c             	add    esp,0xc
c000af36:	c3                   	ret    
c000af37:	90                   	nop

c000af38 <File::stat(unsigned long long*, bool*)>:
c000af38:	56                   	push   esi
c000af39:	53                   	push   ebx
c000af3a:	50                   	push   eax
c000af3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af3f:	b8 0b 00 00 00       	mov    eax,0xb
c000af44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af53:	80 f9 19             	cmp    cl,0x19
c000af56:	77 3d                	ja     c000af95 <File::stat(unsigned long long*, bool*)+0x5d>
c000af58:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af5f:	85 c9                	test   ecx,ecx
c000af61:	74 32                	je     c000af95 <File::stat(unsigned long long*, bool*)+0x5d>
c000af63:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af69:	85 c9                	test   ecx,ecx
c000af6b:	74 28                	je     c000af95 <File::stat(unsigned long long*, bool*)+0x5d>
c000af6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af73:	74 13                	je     c000af88 <File::stat(unsigned long long*, bool*)+0x50>
c000af75:	83 ec 04             	sub    esp,0x4
c000af78:	56                   	push   esi
c000af79:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af7f:	51                   	push   ecx
c000af80:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af83:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af86:	eb 0a                	jmp    c000af92 <File::stat(unsigned long long*, bool*)+0x5a>
c000af88:	83 c2 0d             	add    edx,0xd
c000af8b:	53                   	push   ebx
c000af8c:	56                   	push   esi
c000af8d:	52                   	push   edx
c000af8e:	51                   	push   ecx
c000af8f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af92:	83 c4 10             	add    esp,0x10
c000af95:	5a                   	pop    edx
c000af96:	5b                   	pop    ebx
c000af97:	5e                   	pop    esi
c000af98:	c3                   	ret    

c000af99 <Fs::setcwd(Process*, char*)>:
c000af99:	55                   	push   ebp
c000af9a:	57                   	push   edi
c000af9b:	56                   	push   esi
c000af9c:	53                   	push   ebx
c000af9d:	81 ec 20 02 00 00    	sub    esp,0x220
c000afa3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000afaa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000afb0:	57                   	push   edi
c000afb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000afb8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afbc:	56                   	push   esi
c000afbd:	e8 66 fa ff ff       	call   c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afc2:	89 34 24             	mov    DWORD PTR [esp],esi
c000afc5:	e8 e6 55 ff ff       	call   c00005b0 <strlen>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 f8 02             	cmp    eax,0x2
c000afd0:	77 15                	ja     c000afe7 <Fs::setcwd(Process*, char*)+0x4e>
c000afd2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000afd7:	83 eb 41             	sub    ebx,0x41
c000afda:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	75 1c                	jne    c000b001 <Fs::setcwd(Process*, char*)+0x68>
c000afe5:	eb 2f                	jmp    c000b016 <Fs::setcwd(Process*, char*)+0x7d>
c000afe7:	83 ec 0c             	sub    esp,0xc
c000afea:	56                   	push   esi
c000afeb:	e8 c0 55 ff ff       	call   c00005b0 <strlen>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	83 f8 03             	cmp    eax,0x3
c000aff6:	75 57                	jne    c000b04f <Fs::setcwd(Process*, char*)+0xb6>
c000aff8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000affd:	75 50                	jne    c000b04f <Fs::setcwd(Process*, char*)+0xb6>
c000afff:	eb d1                	jmp    c000afd2 <Fs::setcwd(Process*, char*)+0x39>
c000b001:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b008:	75 0c                	jne    c000b016 <Fs::setcwd(Process*, char*)+0x7d>
c000b00a:	83 ec 0c             	sub    esp,0xc
c000b00d:	50                   	push   eax
c000b00e:	e8 ef 1c 00 00       	call   c000cd02 <LogicalDisk::mount()>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	b8 03 00 00 00       	mov    eax,0x3
c000b01b:	83 fb 19             	cmp    ebx,0x19
c000b01e:	0f 87 c6 00 00 00    	ja     c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b024:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000b02b:	b8 05 00 00 00       	mov    eax,0x5
c000b030:	85 d2                	test   edx,edx
c000b032:	0f 84 b2 00 00 00    	je     c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b038:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b03f:	b8 06 00 00 00       	mov    eax,0x6
c000b044:	0f 85 92 00 00 00    	jne    c000b0dc <Fs::setcwd(Process*, char*)+0x143>
c000b04a:	e9 9b 00 00 00       	jmp    c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b04f:	83 ec 0c             	sub    esp,0xc
c000b052:	68 14 01 00 00       	push   0x114
c000b057:	e8 1f c8 ff ff       	call   c000787b <malloc>
c000b05c:	83 c4 0c             	add    esp,0xc
c000b05f:	55                   	push   ebp
c000b060:	89 c3                	mov    ebx,eax
c000b062:	56                   	push   esi
c000b063:	50                   	push   eax
c000b064:	e8 69 fb ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000b069:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b06e:	83 c4 0c             	add    esp,0xc
c000b071:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b075:	50                   	push   eax
c000b076:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b07a:	50                   	push   eax
c000b07b:	53                   	push   ebx
c000b07c:	e8 b7 fe ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c000b081:	83 c4 10             	add    esp,0x10
c000b084:	83 f8 02             	cmp    eax,0x2
c000b087:	74 27                	je     c000b0b0 <Fs::setcwd(Process*, char*)+0x117>
c000b089:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b08e:	75 1c                	jne    c000b0ac <Fs::setcwd(Process*, char*)+0x113>
c000b090:	b8 02 00 00 00       	mov    eax,0x2
c000b095:	85 db                	test   ebx,ebx
c000b097:	74 51                	je     c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b099:	83 ec 0c             	sub    esp,0xc
c000b09c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b09e:	53                   	push   ebx
c000b09f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0a2:	b8 02 00 00 00       	mov    eax,0x2
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	eb 3e                	jmp    c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b0ac:	85 c0                	test   eax,eax
c000b0ae:	74 1c                	je     c000b0cc <Fs::setcwd(Process*, char*)+0x133>
c000b0b0:	b8 01 00 00 00       	mov    eax,0x1
c000b0b5:	85 db                	test   ebx,ebx
c000b0b7:	74 31                	je     c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b0b9:	83 ec 0c             	sub    esp,0xc
c000b0bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0be:	53                   	push   ebx
c000b0bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c2:	b8 01 00 00 00       	mov    eax,0x1
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	eb 1e                	jmp    c000b0ea <Fs::setcwd(Process*, char*)+0x151>
c000b0cc:	85 db                	test   ebx,ebx
c000b0ce:	74 0c                	je     c000b0dc <Fs::setcwd(Process*, char*)+0x143>
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d5:	53                   	push   ebx
c000b0d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	50                   	push   eax
c000b0dd:	50                   	push   eax
c000b0de:	56                   	push   esi
c000b0df:	57                   	push   edi
c000b0e0:	e8 9b 55 ff ff       	call   c0000680 <strcpy>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	31 c0                	xor    eax,eax
c000b0ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0f0:	5b                   	pop    ebx
c000b0f1:	5e                   	pop    esi
c000b0f2:	5f                   	pop    edi
c000b0f3:	5d                   	pop    ebp
c000b0f4:	c3                   	ret    
c000b0f5:	90                   	nop

c000b0f6 <Directory::Directory(char const*, Process*)>:
c000b0f6:	83 ec 0c             	sub    esp,0xc
c000b0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fd:	83 ec 08             	sub    esp,0x8
c000b100:	6a 00                	push   0x0
c000b102:	50                   	push   eax
c000b103:	e8 72 de ff ff       	call   c0008f7a <UnixFile::UnixFile(int)>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	ba b4 fc 01 c0       	mov    edx,0xc001fcb4
c000b110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b114:	89 10                	mov    DWORD PTR [eax],edx
c000b116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b11a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b124:	83 c0 0d             	add    eax,0xd
c000b127:	83 ec 04             	sub    esp,0x4
c000b12a:	52                   	push   edx
c000b12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b12f:	50                   	push   eax
c000b130:	e8 f3 f8 ff ff       	call   c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b13f:	8d 50 bf             	lea    edx,[eax-0x41]
c000b142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b146:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b150:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b158:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b15e:	0f b6 c0             	movzx  eax,al
c000b161:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b168:	85 c0                	test   eax,eax
c000b16a:	74 3e                	je     c000b1aa <Directory::Directory(char const*, Process*)+0xb4>
c000b16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b170:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b176:	0f b6 c0             	movzx  eax,al
c000b179:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b180:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b186:	85 c0                	test   eax,eax
c000b188:	75 20                	jne    c000b1aa <Directory::Directory(char const*, Process*)+0xb4>
c000b18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b194:	0f b6 c0             	movzx  eax,al
c000b197:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	50                   	push   eax
c000b1a2:	e8 5b 1b 00 00       	call   c000cd02 <LogicalDisk::mount()>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	90                   	nop
c000b1ab:	83 c4 0c             	add    esp,0xc
c000b1ae:	c3                   	ret    
c000b1af:	90                   	nop

c000b1b0 <Directory::open()>:
c000b1b0:	53                   	push   ebx
c000b1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b6:	83 ec 08             	sub    esp,0x8
c000b1b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1bd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b1c4:	80 fa 19             	cmp    dl,0x19
c000b1c7:	77 3d                	ja     c000b206 <Directory::open()+0x56>
c000b1c9:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1d0:	85 d2                	test   edx,edx
c000b1d2:	74 32                	je     c000b206 <Directory::open()+0x56>
c000b1d4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1da:	85 d2                	test   edx,edx
c000b1dc:	74 28                	je     c000b206 <Directory::open()+0x56>
c000b1de:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1e2:	b8 06 00 00 00       	mov    eax,0x6
c000b1e7:	75 1d                	jne    c000b206 <Directory::open()+0x56>
c000b1e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1ef:	50                   	push   eax
c000b1f0:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1f2:	51                   	push   ecx
c000b1f3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1f6:	51                   	push   ecx
c000b1f7:	52                   	push   edx
c000b1f8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	85 c0                	test   eax,eax
c000b200:	75 04                	jne    c000b206 <Directory::open()+0x56>
c000b202:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b206:	83 c4 08             	add    esp,0x8
c000b209:	5b                   	pop    ebx
c000b20a:	c3                   	ret    
c000b20b:	90                   	nop

c000b20c <Directory::close()>:
c000b20c:	53                   	push   ebx
c000b20d:	b8 0b 00 00 00       	mov    eax,0xb
c000b212:	83 ec 08             	sub    esp,0x8
c000b215:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b219:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b220:	80 fa 19             	cmp    dl,0x19
c000b223:	77 41                	ja     c000b266 <Directory::close()+0x5a>
c000b225:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b22c:	85 db                	test   ebx,ebx
c000b22e:	74 36                	je     c000b266 <Directory::close()+0x5a>
c000b230:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b237:	74 2d                	je     c000b266 <Directory::close()+0x5a>
c000b239:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b23d:	b8 05 00 00 00       	mov    eax,0x5
c000b242:	74 22                	je     c000b266 <Directory::close()+0x5a>
c000b244:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b248:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b24f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b255:	53                   	push   ebx
c000b256:	53                   	push   ebx
c000b257:	8b 10                	mov    edx,DWORD PTR [eax]
c000b259:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b25f:	50                   	push   eax
c000b260:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b263:	83 c4 10             	add    esp,0x10
c000b266:	83 c4 08             	add    esp,0x8
c000b269:	5b                   	pop    ebx
c000b26a:	c3                   	ret    
c000b26b:	90                   	nop

c000b26c <Directory::unlink()>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	b8 0b 00 00 00       	mov    eax,0xb
c000b274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b278:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27f:	80 f9 19             	cmp    cl,0x19
c000b282:	77 2f                	ja     c000b2b3 <Directory::unlink()+0x47>
c000b284:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b28b:	85 c9                	test   ecx,ecx
c000b28d:	74 24                	je     c000b2b3 <Directory::unlink()+0x47>
c000b28f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b295:	85 c9                	test   ecx,ecx
c000b297:	74 1a                	je     c000b2b3 <Directory::unlink()+0x47>
c000b299:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b29d:	b8 06 00 00 00       	mov    eax,0x6
c000b2a2:	75 0f                	jne    c000b2b3 <Directory::unlink()+0x47>
c000b2a4:	83 c2 0d             	add    edx,0xd
c000b2a7:	50                   	push   eax
c000b2a8:	50                   	push   eax
c000b2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ab:	52                   	push   edx
c000b2ac:	51                   	push   ecx
c000b2ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	83 c4 0c             	add    esp,0xc
c000b2b6:	c3                   	ret    
c000b2b7:	90                   	nop

c000b2b8 <Directory::rename(char const*)>:
c000b2b8:	83 ec 0c             	sub    esp,0xc
c000b2bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2cb:	80 f9 19             	cmp    cl,0x19
c000b2ce:	77 32                	ja     c000b302 <Directory::rename(char const*)+0x4a>
c000b2d0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2d7:	85 c9                	test   ecx,ecx
c000b2d9:	74 27                	je     c000b302 <Directory::rename(char const*)+0x4a>
c000b2db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e1:	85 c9                	test   ecx,ecx
c000b2e3:	74 1d                	je     c000b302 <Directory::rename(char const*)+0x4a>
c000b2e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e9:	b8 06 00 00 00       	mov    eax,0x6
c000b2ee:	75 12                	jne    c000b302 <Directory::rename(char const*)+0x4a>
c000b2f0:	83 c2 0d             	add    edx,0xd
c000b2f3:	50                   	push   eax
c000b2f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2fa:	52                   	push   edx
c000b2fb:	51                   	push   ecx
c000b2fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2ff:	83 c4 10             	add    esp,0x10
c000b302:	83 c4 0c             	add    esp,0xc
c000b305:	c3                   	ret    

c000b306 <Directory::exists()>:
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	31 c0                	xor    eax,eax
c000b30b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b30f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b316:	80 f9 19             	cmp    cl,0x19
c000b319:	77 24                	ja     c000b33f <Directory::exists()+0x39>
c000b31b:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b322:	85 c9                	test   ecx,ecx
c000b324:	74 19                	je     c000b33f <Directory::exists()+0x39>
c000b326:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b32c:	85 c9                	test   ecx,ecx
c000b32e:	74 0f                	je     c000b33f <Directory::exists()+0x39>
c000b330:	83 c2 0d             	add    edx,0xd
c000b333:	50                   	push   eax
c000b334:	50                   	push   eax
c000b335:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b337:	52                   	push   edx
c000b338:	51                   	push   ecx
c000b339:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b33c:	83 c4 10             	add    esp,0x10
c000b33f:	83 c4 0c             	add    esp,0xc
c000b342:	c3                   	ret    
c000b343:	90                   	nop

c000b344 <Directory::read(dirent*)>:
c000b344:	83 ec 1c             	sub    esp,0x1c
c000b347:	b8 0b 00 00 00       	mov    eax,0xb
c000b34c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b350:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b357:	80 fa 19             	cmp    dl,0x19
c000b35a:	77 30                	ja     c000b38c <Directory::read(dirent*)+0x48>
c000b35c:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b363:	85 d2                	test   edx,edx
c000b365:	74 25                	je     c000b38c <Directory::read(dirent*)+0x48>
c000b367:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b36e:	74 1c                	je     c000b38c <Directory::read(dirent*)+0x48>
c000b370:	83 ec 0c             	sub    esp,0xc
c000b373:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b375:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b379:	52                   	push   edx
c000b37a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37e:	6a 00                	push   0x0
c000b380:	68 10 01 00 00       	push   0x110
c000b385:	51                   	push   ecx
c000b386:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b389:	83 c4 20             	add    esp,0x20
c000b38c:	83 c4 1c             	add    esp,0x1c
c000b38f:	c3                   	ret    

c000b390 <Directory::create()>:
c000b390:	83 ec 0c             	sub    esp,0xc
c000b393:	b8 0b 00 00 00       	mov    eax,0xb
c000b398:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b39c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a3:	80 f9 19             	cmp    cl,0x19
c000b3a6:	77 2f                	ja     c000b3d7 <Directory::create()+0x47>
c000b3a8:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b3af:	85 c9                	test   ecx,ecx
c000b3b1:	74 24                	je     c000b3d7 <Directory::create()+0x47>
c000b3b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3b9:	85 c9                	test   ecx,ecx
c000b3bb:	74 1a                	je     c000b3d7 <Directory::create()+0x47>
c000b3bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3c1:	b8 06 00 00 00       	mov    eax,0x6
c000b3c6:	75 0f                	jne    c000b3d7 <Directory::create()+0x47>
c000b3c8:	83 c2 0d             	add    edx,0xd
c000b3cb:	50                   	push   eax
c000b3cc:	50                   	push   eax
c000b3cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3cf:	52                   	push   edx
c000b3d0:	51                   	push   ecx
c000b3d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b3d4:	83 c4 10             	add    esp,0x10
c000b3d7:	83 c4 0c             	add    esp,0xc
c000b3da:	c3                   	ret    
c000b3db:	90                   	nop

c000b3dc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b3dc:	b8 0a 00 00 00       	mov    eax,0xa
c000b3e1:	c3                   	ret    
c000b3e2:	66 90                	xchg   ax,ax

c000b3e4 <Bus::Bus(char const*)>:
c000b3e4:	83 ec 0c             	sub    esp,0xc
c000b3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3eb:	83 ec 08             	sub    esp,0x8
c000b3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f2:	50                   	push   eax
c000b3f3:	e8 58 08 00 00       	call   c000bc50 <Device::Device(char const*)>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	ba d0 fc 01 c0       	mov    edx,0xc001fcd0
c000b400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b404:	89 10                	mov    DWORD PTR [eax],edx
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b414:	90                   	nop
c000b415:	83 c4 0c             	add    esp,0xc
c000b418:	c3                   	ret    
c000b419:	90                   	nop
c000b41a:	66 90                	xchg   ax,ax

c000b41c <Bus::~Bus()>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ba d0 fc 01 c0       	mov    edx,0xc001fcd0
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	89 10                	mov    DWORD PTR [eax],edx
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 83 05 00 00       	call   c000b9ba <Device::~Device()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	90                   	nop
c000b43b:	83 c4 0c             	add    esp,0xc
c000b43e:	c3                   	ret    
c000b43f:	90                   	nop

c000b440 <Bus::~Bus()>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44a:	e8 cd ff ff ff       	call   c000b41c <Bus::~Bus()>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	68 58 01 00 00       	push   0x158
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 11 f1 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 c4 0c             	add    esp,0xc
c000b469:	c3                   	ret    

c000b46a <beepThread(void*)>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b476:	48                   	dec    eax
c000b477:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b47c:	75 01                	jne    c000b47f <beepThread(void*)+0x15>
c000b47e:	fb                   	sti    
c000b47f:	6b c2 0a             	imul   eax,edx,0xa
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	50                   	push   eax
c000b486:	e8 25 9b 00 00       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c000b48b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b492:	e8 fe b8 00 00       	call   c0016d95 <HalMakeBeep(int)>
c000b497:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b49f:	83 c4 1c             	add    esp,0x1c
c000b4a2:	e9 09 9a 00 00       	jmp    c0014eb0 <blockTask(TaskState)>

c000b4a7 <Krnl::beep(int, int, bool)>:
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	83 ec 10             	sub    esp,0x10
c000b4ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b4b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b8:	e8 d8 b8 00 00       	call   c0016d95 <HalMakeBeep(int)>
c000b4bd:	89 f0                	mov    eax,esi
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	84 c0                	test   al,al
c000b4c4:	74 1e                	je     c000b4e4 <Krnl::beep(int, int, bool)+0x3d>
c000b4c6:	6b db 0a             	imul   ebx,ebx,0xa
c000b4c9:	83 ec 0c             	sub    esp,0xc
c000b4cc:	53                   	push   ebx
c000b4cd:	e8 de 9a 00 00       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c000b4d2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b4da:	83 c4 14             	add    esp,0x14
c000b4dd:	5b                   	pop    ebx
c000b4de:	5e                   	pop    esi
c000b4df:	e9 b1 b8 00 00       	jmp    c0016d95 <HalMakeBeep(int)>
c000b4e4:	68 e6 00 00 00       	push   0xe6
c000b4e9:	53                   	push   ebx
c000b4ea:	68 6a b4 00 c0       	push   0xc000b46a
c000b4ef:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4f5:	e8 9e 95 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c000b4fa:	83 c4 14             	add    esp,0x14
c000b4fd:	5b                   	pop    ebx
c000b4fe:	5e                   	pop    esi
c000b4ff:	c3                   	ret    

c000b500 <User::loadClockSettings(int)>:
c000b500:	53                   	push   ebx
c000b501:	83 ec 14             	sub    esp,0x14
c000b504:	68 14 01 00 00       	push   0x114
c000b509:	e8 6d c3 ff ff       	call   c000787b <malloc>
c000b50e:	83 c4 0c             	add    esp,0xc
c000b511:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b517:	68 f4 fc 01 c0       	push   0xc001fcf4
c000b51c:	89 c3                	mov    ebx,eax
c000b51e:	50                   	push   eax
c000b51f:	e8 ae f6 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000b524:	58                   	pop    eax
c000b525:	5a                   	pop    edx
c000b526:	6a 01                	push   0x1
c000b528:	53                   	push   ebx
c000b529:	e8 5e f7 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c000b52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b531:	e8 b4 f7 ff ff       	call   c000acea <File::close()>
c000b536:	83 c4 10             	add    esp,0x10
c000b539:	85 db                	test   ebx,ebx
c000b53b:	74 0f                	je     c000b54c <User::loadClockSettings(int)+0x4c>
c000b53d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b53f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b543:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b546:	83 c4 08             	add    esp,0x8
c000b549:	5b                   	pop    ebx
c000b54a:	ff e0                	jmp    eax
c000b54c:	83 c4 08             	add    esp,0x8
c000b54f:	5b                   	pop    ebx
c000b550:	c3                   	ret    
c000b551:	90                   	nop

c000b552 <Clock::Clock(char const*)>:
c000b552:	83 ec 0c             	sub    esp,0xc
c000b555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b559:	83 ec 08             	sub    esp,0x8
c000b55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b560:	50                   	push   eax
c000b561:	e8 ea 06 00 00       	call   c000bc50 <Device::Device(char const*)>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c000b56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b572:	89 10                	mov    DWORD PTR [eax],edx
c000b574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b578:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b582:	90                   	nop
c000b583:	83 c4 0c             	add    esp,0xc
c000b586:	c3                   	ret    
c000b587:	90                   	nop

c000b588 <Clock::~Clock()>:
c000b588:	83 ec 0c             	sub    esp,0xc
c000b58b:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c000b590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b594:	89 10                	mov    DWORD PTR [eax],edx
c000b596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59a:	83 ec 0c             	sub    esp,0xc
c000b59d:	50                   	push   eax
c000b59e:	e8 17 04 00 00       	call   c000b9ba <Device::~Device()>
c000b5a3:	83 c4 10             	add    esp,0x10
c000b5a6:	90                   	nop
c000b5a7:	83 c4 0c             	add    esp,0xc
c000b5aa:	c3                   	ret    
c000b5ab:	90                   	nop

c000b5ac <Clock::~Clock()>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b6:	e8 cd ff ff ff       	call   c000b588 <Clock::~Clock()>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	83 ec 08             	sub    esp,0x8
c000b5c1:	68 58 01 00 00       	push   0x158
c000b5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ca:	e8 a5 ef ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000b5cf:	83 c4 10             	add    esp,0x10
c000b5d2:	83 c4 0c             	add    esp,0xc
c000b5d5:	c3                   	ret    

c000b5d6 <Clock::timeInSecondsLocal()>:
c000b5d6:	83 ec 18             	sub    esp,0x18
c000b5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5df:	50                   	push   eax
c000b5e0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5e3:	c5 f9 6e c8          	vmovd  xmm1,eax
c000b5e7:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5ee:	83 c4 10             	add    esp,0x10
c000b5f1:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5fd:	c4 e3 71 22 ca 01    	vpinsrd xmm1,xmm1,edx,0x1
c000b603:	c5 f9 6e c0          	vmovd  xmm0,eax
c000b607:	99                   	cdq    
c000b608:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60f:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000b615:	c5 f9 d4 c9          	vpaddq xmm1,xmm0,xmm1
c000b619:	c5 f9 6f 05 90 fd 01 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc001fd90
c000b621:	75 04                	jne    c000b627 <Clock::timeInSecondsLocal()+0x51>
c000b623:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c000b627:	c5 f1 d4 c0          	vpaddq xmm0,xmm1,xmm0
c000b62b:	83 c4 0c             	add    esp,0xc
c000b62e:	c5 f9 7e c0          	vmovd  eax,xmm0
c000b632:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000b638:	c3                   	ret    
c000b639:	90                   	nop

c000b63a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b63a:	53                   	push   ebx
c000b63b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b63f:	c5 fa 7e 44 24 0c    	vmovq  xmm0,QWORD PTR [esp+0xc]
c000b645:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b647:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b64a:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b651:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b657:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b65d:	99                   	cdq    
c000b65e:	c5 f9 6e c8          	vmovd  xmm1,eax
c000b662:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b669:	c4 e3 71 22 ca 01    	vpinsrd xmm1,xmm1,edx,0x1
c000b66f:	c5 f9 fb c9          	vpsubq xmm1,xmm0,xmm1
c000b673:	c5 f9 6f 05 90 fd 01 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc001fd90
c000b67b:	75 04                	jne    c000b681 <Clock::setTimeInSecondsLocal(unsigned long long)+0x47>
c000b67d:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c000b681:	c5 f1 fb c0          	vpsubq xmm0,xmm1,xmm0
c000b685:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b689:	89 d8                	mov    eax,ebx
c000b68b:	c5 f9 d6 44 24 0c    	vmovq  QWORD PTR [esp+0xc],xmm0
c000b691:	5b                   	pop    ebx
c000b692:	ff e0                	jmp    eax

c000b694 <datetimeToSeconds(datetime_t)>:
c000b694:	55                   	push   ebp
c000b695:	57                   	push   edi
c000b696:	56                   	push   esi
c000b697:	53                   	push   ebx
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b69f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b6a3:	89 f7                	mov    edi,esi
c000b6a5:	0f b6 d5             	movzx  edx,ch
c000b6a8:	89 f0                	mov    eax,esi
c000b6aa:	89 cb                	mov    ebx,ecx
c000b6ac:	c1 ef 10             	shr    edi,0x10
c000b6af:	8d 6a ff             	lea    ebp,[edx-0x1]
c000b6b2:	0f b6 c4             	movzx  eax,ah
c000b6b5:	c1 eb 10             	shr    ebx,0x10
c000b6b8:	89 fa                	mov    edx,edi
c000b6ba:	6b c0 3c             	imul   eax,eax,0x3c
c000b6bd:	0f b6 c9             	movzx  ecx,cl
c000b6c0:	66 81 eb 6c 07       	sub    bx,0x76c
c000b6c5:	0f b6 fa             	movzx  edi,dl
c000b6c8:	89 f2                	mov    edx,esi
c000b6ca:	0f b6 f2             	movzx  esi,dl
c000b6cd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b6d3:	01 f8                	add    eax,edi
c000b6d5:	01 f0                	add    eax,esi
c000b6d7:	0f b7 f3             	movzx  esi,bx
c000b6da:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6dd:	c1 f8 1f             	sar    eax,0x1f
c000b6e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b6e4:	89 e8                	mov    eax,ebp
c000b6e6:	0f b6 c0             	movzx  eax,al
c000b6e9:	8b 04 85 60 fd 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe02a0]
c000b6f0:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000b6f4:	89 e8                	mov    eax,ebp
c000b6f6:	3c 01                	cmp    al,0x1
c000b6f8:	76 29                	jbe    c000b723 <datetimeToSeconds(datetime_t)+0x8f>
c000b6fa:	f6 c3 03             	test   bl,0x3
c000b6fd:	75 24                	jne    c000b723 <datetimeToSeconds(datetime_t)+0x8f>
c000b6ff:	bf 64 00 00 00       	mov    edi,0x64
c000b704:	89 d8                	mov    eax,ebx
c000b706:	31 d2                	xor    edx,edx
c000b708:	66 f7 f7             	div    di
c000b70b:	66 85 d2             	test   dx,dx
c000b70e:	75 12                	jne    c000b722 <datetimeToSeconds(datetime_t)+0x8e>
c000b710:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b716:	bf 90 01 00 00       	mov    edi,0x190
c000b71b:	99                   	cdq    
c000b71c:	f7 ff                	idiv   edi
c000b71e:	85 d2                	test   edx,edx
c000b720:	75 01                	jne    c000b723 <datetimeToSeconds(datetime_t)+0x8f>
c000b722:	41                   	inc    ecx
c000b723:	66 83 fb 46          	cmp    bx,0x46
c000b727:	76 45                	jbe    c000b76e <datetimeToSeconds(datetime_t)+0xda>
c000b729:	bb 46 00 00 00       	mov    ebx,0x46
c000b72e:	bf 64 00 00 00       	mov    edi,0x64
c000b733:	bd 90 01 00 00       	mov    ebp,0x190
c000b738:	b8 6d 01 00 00       	mov    eax,0x16d
c000b73d:	f6 c3 03             	test   bl,0x3
c000b740:	75 23                	jne    c000b765 <datetimeToSeconds(datetime_t)+0xd1>
c000b742:	89 d8                	mov    eax,ebx
c000b744:	99                   	cdq    
c000b745:	f7 ff                	idiv   edi
c000b747:	b8 6e 01 00 00       	mov    eax,0x16e
c000b74c:	85 d2                	test   edx,edx
c000b74e:	75 15                	jne    c000b765 <datetimeToSeconds(datetime_t)+0xd1>
c000b750:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b756:	99                   	cdq    
c000b757:	f7 fd                	idiv   ebp
c000b759:	83 fa 01             	cmp    edx,0x1
c000b75c:	19 c0                	sbb    eax,eax
c000b75e:	f7 d0                	not    eax
c000b760:	05 6e 01 00 00       	add    eax,0x16e
c000b765:	43                   	inc    ebx
c000b766:	01 c1                	add    ecx,eax
c000b768:	39 f3                	cmp    ebx,esi
c000b76a:	7c cc                	jl     c000b738 <datetimeToSeconds(datetime_t)+0xa4>
c000b76c:	eb 35                	jmp    c000b7a3 <datetimeToSeconds(datetime_t)+0x10f>
c000b76e:	74 33                	je     c000b7a3 <datetimeToSeconds(datetime_t)+0x10f>
c000b770:	b8 45 00 00 00       	mov    eax,0x45
c000b775:	89 c2                	mov    edx,eax
c000b777:	83 e2 03             	and    edx,0x3
c000b77a:	39 f0                	cmp    eax,esi
c000b77c:	7e 0f                	jle    c000b78d <datetimeToSeconds(datetime_t)+0xf9>
c000b77e:	83 fa 01             	cmp    edx,0x1
c000b781:	19 d2                	sbb    edx,edx
c000b783:	48                   	dec    eax
c000b784:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000b78b:	eb e8                	jmp    c000b775 <datetimeToSeconds(datetime_t)+0xe1>
c000b78d:	b8 6d 01 00 00       	mov    eax,0x16d
c000b792:	85 d2                	test   edx,edx
c000b794:	75 0b                	jne    c000b7a1 <datetimeToSeconds(datetime_t)+0x10d>
c000b796:	66 83 fb 01          	cmp    bx,0x1
c000b79a:	19 c0                	sbb    eax,eax
c000b79c:	05 6e 01 00 00       	add    eax,0x16e
c000b7a1:	29 c1                	sub    ecx,eax
c000b7a3:	b8 80 51 01 00       	mov    eax,0x15180
c000b7a8:	f7 e9                	imul   ecx
c000b7aa:	03 04 24             	add    eax,DWORD PTR [esp]
c000b7ad:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000b7b1:	83 c4 0c             	add    esp,0xc
c000b7b4:	5b                   	pop    ebx
c000b7b5:	5e                   	pop    esi
c000b7b6:	5f                   	pop    edi
c000b7b7:	5d                   	pop    ebp
c000b7b8:	c3                   	ret    
c000b7b9:	90                   	nop

c000b7ba <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b7ba:	56                   	push   esi
c000b7bb:	53                   	push   ebx
c000b7bc:	51                   	push   ecx
c000b7bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b7c3:	8b 70 2c             	mov    esi,DWORD PTR [eax+0x2c]
c000b7c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7ce:	e8 c1 fe ff ff       	call   c000b694 <datetimeToSeconds(datetime_t)>
c000b7d3:	59                   	pop    ecx
c000b7d4:	59                   	pop    ecx
c000b7d5:	c5 f9 6e c0          	vmovd  xmm0,eax
c000b7d9:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b7e0:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b7e6:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b7ec:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000b7f2:	c5 f9 6e c8          	vmovd  xmm1,eax
c000b7f6:	99                   	cdq    
c000b7f7:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b7fe:	c4 e3 71 22 ca 01    	vpinsrd xmm1,xmm1,edx,0x1
c000b804:	c5 f9 fb c9          	vpsubq xmm1,xmm0,xmm1
c000b808:	c5 f9 6f 05 90 fd 01 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc001fd90
c000b810:	75 04                	jne    c000b816 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c000b812:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c000b816:	c5 f1 fb c0          	vpsubq xmm0,xmm1,xmm0
c000b81a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b81e:	89 f0                	mov    eax,esi
c000b820:	c5 f9 d6 44 24 14    	vmovq  QWORD PTR [esp+0x14],xmm0
c000b826:	5a                   	pop    edx
c000b827:	5b                   	pop    ebx
c000b828:	5e                   	pop    esi
c000b829:	ff e0                	jmp    eax

c000b82b <secondsToDatetime(unsigned long long)>:
c000b82b:	55                   	push   ebp
c000b82c:	57                   	push   edi
c000b82d:	56                   	push   esi
c000b82e:	53                   	push   ebx
c000b82f:	83 ec 1c             	sub    esp,0x1c
c000b832:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b836:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b83a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b83e:	6a 00                	push   0x0
c000b840:	68 80 51 01 00       	push   0x15180
c000b845:	55                   	push   ebp
c000b846:	57                   	push   edi
c000b847:	e8 74 27 01 00       	call   c001dfc0 <__udivdi3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b859:	6a 00                	push   0x0
c000b85b:	68 80 51 01 00       	push   0x15180
c000b860:	55                   	push   ebp
c000b861:	57                   	push   edi
c000b862:	bf 10 0e 00 00       	mov    edi,0xe10
c000b867:	e8 54 28 01 00       	call   c001e0c0 <__umoddi3>
c000b86c:	83 c4 10             	add    esp,0x10
c000b86f:	99                   	cdq    
c000b870:	f7 ff                	idiv   edi
c000b872:	bf 3c 00 00 00       	mov    edi,0x3c
c000b877:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b87a:	89 d0                	mov    eax,edx
c000b87c:	99                   	cdq    
c000b87d:	f7 ff                	idiv   edi
c000b87f:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b882:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b885:	85 db                	test   ebx,ebx
c000b887:	79 11                	jns    c000b89a <secondsToDatetime(unsigned long long)+0x6f>
c000b889:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b88d:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b893:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b898:	eb 07                	jmp    c000b8a1 <secondsToDatetime(unsigned long long)+0x76>
c000b89a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b89f:	89 d8                	mov    eax,ebx
c000b8a1:	99                   	cdq    
c000b8a2:	bf b4 05 00 00       	mov    edi,0x5b4
c000b8a7:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b8ac:	f7 f9                	idiv   ecx
c000b8ae:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b8b3:	31 d2                	xor    edx,edx
c000b8b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b9:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b8c1:	01 c3                	add    ebx,eax
c000b8c3:	89 d8                	mov    eax,ebx
c000b8c5:	f7 f1                	div    ecx
c000b8c7:	31 d2                	xor    edx,edx
c000b8c9:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b8cc:	89 d8                	mov    eax,ebx
c000b8ce:	f7 f7                	div    edi
c000b8d0:	31 d2                	xor    edx,edx
c000b8d2:	29 c1                	sub    ecx,eax
c000b8d4:	89 d8                	mov    eax,ebx
c000b8d6:	f7 f5                	div    ebp
c000b8d8:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b8dd:	31 d2                	xor    edx,edx
c000b8df:	29 c1                	sub    ecx,eax
c000b8e1:	89 c8                	mov    eax,ecx
c000b8e3:	f7 f5                	div    ebp
c000b8e5:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b8ea:	31 d2                	xor    edx,edx
c000b8ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8f0:	89 c8                	mov    eax,ecx
c000b8f2:	f7 f5                	div    ebp
c000b8f4:	31 d2                	xor    edx,edx
c000b8f6:	01 c3                	add    ebx,eax
c000b8f8:	89 c8                	mov    eax,ecx
c000b8fa:	f7 f7                	div    edi
c000b8fc:	bf 99 00 00 00       	mov    edi,0x99
c000b901:	31 d2                	xor    edx,edx
c000b903:	29 c3                	sub    ebx,eax
c000b905:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b90d:	29 c3                	sub    ebx,eax
c000b90f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b912:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b915:	bb 05 00 00 00       	mov    ebx,0x5
c000b91a:	83 c1 02             	add    ecx,0x2
c000b91d:	89 c8                	mov    eax,ecx
c000b91f:	f7 f7                	div    edi
c000b921:	31 d2                	xor    edx,edx
c000b923:	89 c7                	mov    edi,eax
c000b925:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b92b:	83 c0 02             	add    eax,0x2
c000b92e:	f7 f3                	div    ebx
c000b930:	89 eb                	mov    ebx,ebp
c000b932:	29 c3                	sub    ebx,eax
c000b934:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b93a:	19 c0                	sbb    eax,eax
c000b93c:	31 d2                	xor    edx,edx
c000b93e:	88 1e                	mov    BYTE PTR [esi],bl
c000b940:	83 e0 0c             	and    eax,0xc
c000b943:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b947:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b94f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b953:	83 f9 01             	cmp    ecx,0x1
c000b956:	0f 96 c2             	setbe  dl
c000b959:	41                   	inc    ecx
c000b95a:	01 d0                	add    eax,edx
c000b95c:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b95f:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b963:	83 c4 1c             	add    esp,0x1c
c000b966:	89 f0                	mov    eax,esi
c000b968:	5b                   	pop    ebx
c000b969:	5e                   	pop    esi
c000b96a:	5f                   	pop    edi
c000b96b:	5d                   	pop    ebp
c000b96c:	c2 04 00             	ret    0x4
c000b96f:	90                   	nop

c000b970 <Clock::timeInDatetimeLocal()>:
c000b970:	53                   	push   ebx
c000b971:	83 ec 14             	sub    esp,0x14
c000b974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b978:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b97c:	e8 55 fc ff ff       	call   c000b5d6 <Clock::timeInSecondsLocal()>
c000b981:	83 c4 0c             	add    esp,0xc
c000b984:	52                   	push   edx
c000b985:	50                   	push   eax
c000b986:	53                   	push   ebx
c000b987:	e8 9f fe ff ff       	call   c000b82b <secondsToDatetime(unsigned long long)>
c000b98c:	89 d8                	mov    eax,ebx
c000b98e:	83 c4 14             	add    esp,0x14
c000b991:	5b                   	pop    ebx
c000b992:	c2 04 00             	ret    0x4
c000b995:	90                   	nop

c000b996 <Device::hibernate()>:
c000b996:	c3                   	ret    
c000b997:	90                   	nop

c000b998 <Device::wake()>:
c000b998:	c3                   	ret    
c000b999:	90                   	nop

c000b99a <Device::detect()>:
c000b99a:	c3                   	ret    
c000b99b:	90                   	nop

c000b99c <Device::disableLegacy()>:
c000b99c:	c3                   	ret    
c000b99d:	90                   	nop

c000b99e <Device::powerSaving(PowerSavingLevel)>:
c000b99e:	c3                   	ret    
c000b99f:	90                   	nop

c000b9a0 <DriverlessDevice::close(int, int, void*)>:
c000b9a0:	31 c0                	xor    eax,eax
c000b9a2:	c3                   	ret    
c000b9a3:	90                   	nop

c000b9a4 <DriverlessDevice::detect()>:
c000b9a4:	c3                   	ret    
c000b9a5:	90                   	nop

c000b9a6 <DriverlessDevice::open(int, int, void*)>:
c000b9a6:	83 ec 18             	sub    esp,0x18
c000b9a9:	68 a0 fd 01 c0       	push   0xc001fda0
c000b9ae:	e8 0a 4b 00 00       	call   c00104bd <KePanic(char const*)>
c000b9b3:	83 c8 ff             	or     eax,0xffffffff
c000b9b6:	83 c4 1c             	add    esp,0x1c
c000b9b9:	c3                   	ret    

c000b9ba <Device::~Device()>:
c000b9ba:	ba 00 fe 01 c0       	mov    edx,0xc001fe00
c000b9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9c3:	89 10                	mov    DWORD PTR [eax],edx
c000b9c5:	90                   	nop
c000b9c6:	c3                   	ret    
c000b9c7:	90                   	nop

c000b9c8 <Device::~Device()>:
c000b9c8:	83 ec 0c             	sub    esp,0xc
c000b9cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9cf:	e8 e6 ff ff ff       	call   c000b9ba <Device::~Device()>
c000b9d4:	83 c4 04             	add    esp,0x4
c000b9d7:	83 ec 08             	sub    esp,0x8
c000b9da:	68 58 01 00 00       	push   0x158
c000b9df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e3:	e8 8c eb ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000b9e8:	83 c4 10             	add    esp,0x10
c000b9eb:	83 c4 0c             	add    esp,0xc
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <Device::findAndLoadDriver()>:
c000b9f0:	c7 44 24 04 be fd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fdbe
c000b9f8:	e9 6c ec ff ff       	jmp    c000a669 <Dbg::kprintf(char const*, ...)>
c000b9fd:	90                   	nop

c000b9fe <Device::preOpenPCI(PCIDeviceInfo)>:
c000b9fe:	57                   	push   edi
c000b9ff:	b9 09 00 00 00       	mov    ecx,0x9
c000ba04:	56                   	push   esi
c000ba05:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ba09:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ba13:	81 c7 18 01 00 00    	add    edi,0x118
c000ba19:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ba1d:	fc                   	cld    
c000ba1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ba20:	5e                   	pop    esi
c000ba21:	5f                   	pop    edi
c000ba22:	c3                   	ret    
c000ba23:	90                   	nop

c000ba24 <Device::preOpenACPI(void*, char*, char*)>:
c000ba24:	57                   	push   edi
c000ba25:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ba2a:	56                   	push   esi
c000ba2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba37:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ba41:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ba47:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ba4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba4f:	b9 0e 00 00 00       	mov    ecx,0xe
c000ba54:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ba5a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba60:	5e                   	pop    esi
c000ba61:	5f                   	pop    edi
c000ba62:	c3                   	ret    
c000ba63:	90                   	nop

c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ba64:	53                   	push   ebx
c000ba65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba75:	0f b6 c0             	movzx  eax,al
c000ba78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba7c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba84:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba88:	5b                   	pop    ebx
c000ba89:	e9 a6 05 00 00       	jmp    c000c034 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba8e <Device::getParent()>:
c000ba8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba92:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba98:	c3                   	ret    
c000ba99:	90                   	nop

c000ba9a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000baa2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000baa7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000baab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000baaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bab3:	e9 df 06 00 00       	jmp    c000c197 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bab8 <Device::addChild(Device*)>:
c000bab8:	53                   	push   ebx
c000bab9:	83 ec 08             	sub    esp,0x8
c000babc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bac0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bac4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000baca:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bad0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bad2:	85 d2                	test   edx,edx
c000bad4:	74 04                	je     c000bada <Device::addChild(Device*)+0x22>
c000bad6:	89 d3                	mov    ebx,edx
c000bad8:	eb f6                	jmp    c000bad0 <Device::addChild(Device*)+0x18>
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bae0:	6a 08                	push   0x8
c000bae2:	e8 94 bd ff ff       	call   c000787b <malloc>
c000bae7:	89 03                	mov    DWORD PTR [ebx],eax
c000bae9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baf6:	83 c4 18             	add    esp,0x18
c000baf9:	5b                   	pop    ebx
c000bafa:	c3                   	ret    
c000bafb:	90                   	nop

c000bafc <Device::removeAllChildren()>:
c000bafc:	56                   	push   esi
c000bafd:	53                   	push   ebx
c000bafe:	52                   	push   edx
c000baff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb03:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bb09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb0c:	74 17                	je     c000bb25 <Device::removeAllChildren()+0x29>
c000bb0e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bb11:	85 c0                	test   eax,eax
c000bb13:	74 0c                	je     c000bb21 <Device::removeAllChildren()+0x25>
c000bb15:	83 ec 0c             	sub    esp,0xc
c000bb18:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb1a:	50                   	push   eax
c000bb1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bb1e:	83 c4 10             	add    esp,0x10
c000bb21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb23:	eb e4                	jmp    c000bb09 <Device::removeAllChildren()+0xd>
c000bb25:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb31:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb3e:	58                   	pop    eax
c000bb3f:	5b                   	pop    ebx
c000bb40:	5e                   	pop    esi
c000bb41:	c3                   	ret    

c000bb42 <Device::hibernateAll()>:
c000bb42:	53                   	push   ebx
c000bb43:	83 ec 14             	sub    esp,0x14
c000bb46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb4c:	53                   	push   ebx
c000bb4d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb5c:	74 0f                	je     c000bb6d <Device::hibernateAll()+0x2b>
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb64:	e8 d9 ff ff ff       	call   c000bb42 <Device::hibernateAll()>
c000bb69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb6b:	eb e9                	jmp    c000bb56 <Device::hibernateAll()+0x14>
c000bb6d:	83 c4 08             	add    esp,0x8
c000bb70:	5b                   	pop    ebx
c000bb71:	c3                   	ret    

c000bb72 <Device::wakeAll()>:
c000bb72:	53                   	push   ebx
c000bb73:	83 ec 14             	sub    esp,0x14
c000bb76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb7c:	53                   	push   ebx
c000bb7d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb86:	83 c4 10             	add    esp,0x10
c000bb89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb8c:	74 0f                	je     c000bb9d <Device::wakeAll()+0x2b>
c000bb8e:	83 ec 0c             	sub    esp,0xc
c000bb91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb94:	e8 d9 ff ff ff       	call   c000bb72 <Device::wakeAll()>
c000bb99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb9b:	eb e9                	jmp    c000bb86 <Device::wakeAll()+0x14>
c000bb9d:	83 c4 08             	add    esp,0x8
c000bba0:	5b                   	pop    ebx
c000bba1:	c3                   	ret    

c000bba2 <Device::detectAll()>:
c000bba2:	53                   	push   ebx
c000bba3:	83 ec 14             	sub    esp,0x14
c000bba6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbac:	53                   	push   ebx
c000bbad:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bbb0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbbc:	74 0f                	je     c000bbcd <Device::detectAll()+0x2b>
c000bbbe:	83 ec 0c             	sub    esp,0xc
c000bbc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc4:	e8 d9 ff ff ff       	call   c000bba2 <Device::detectAll()>
c000bbc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcb:	eb e9                	jmp    c000bbb6 <Device::detectAll()+0x14>
c000bbcd:	83 c4 08             	add    esp,0x8
c000bbd0:	5b                   	pop    ebx
c000bbd1:	c3                   	ret    

c000bbd2 <Device::disableLegacyAll()>:
c000bbd2:	c3                   	ret    
c000bbd3:	90                   	nop

c000bbd4 <Device::loadDriversForAll()>:
c000bbd4:	c3                   	ret    
c000bbd5:	90                   	nop

c000bbd6 <Device::closeAll()>:
c000bbd6:	53                   	push   ebx
c000bbd7:	83 ec 08             	sub    esp,0x8
c000bbda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbe0:	6a 00                	push   0x0
c000bbe2:	6a 00                	push   0x0
c000bbe4:	6a 00                	push   0x0
c000bbe6:	53                   	push   ebx
c000bbe7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bbea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbf0:	83 c4 10             	add    esp,0x10
c000bbf3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbf6:	74 0f                	je     c000bc07 <Device::closeAll()+0x31>
c000bbf8:	83 ec 0c             	sub    esp,0xc
c000bbfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbfe:	e8 d3 ff ff ff       	call   c000bbd6 <Device::closeAll()>
c000bc03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc05:	eb e9                	jmp    c000bbf0 <Device::closeAll()+0x1a>
c000bc07:	83 c4 08             	add    esp,0x8
c000bc0a:	5b                   	pop    ebx
c000bc0b:	c3                   	ret    

c000bc0c <Device::powerSavingAll(PowerSavingLevel)>:
c000bc0c:	56                   	push   esi
c000bc0d:	53                   	push   ebx
c000bc0e:	83 ec 0c             	sub    esp,0xc
c000bc11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc15:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bc19:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc1b:	56                   	push   esi
c000bc1c:	53                   	push   ebx
c000bc1d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bc20:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc2c:	74 0f                	je     c000bc3d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bc2e:	52                   	push   edx
c000bc2f:	52                   	push   edx
c000bc30:	56                   	push   esi
c000bc31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc34:	e8 d3 ff ff ff       	call   c000bc0c <Device::powerSavingAll(PowerSavingLevel)>
c000bc39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc3b:	eb e9                	jmp    c000bc26 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bc3d:	58                   	pop    eax
c000bc3e:	5b                   	pop    ebx
c000bc3f:	5e                   	pop    esi
c000bc40:	c3                   	ret    
c000bc41:	90                   	nop

c000bc42 <Device::setName(char const*)>:
c000bc42:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bc4a:	e9 31 4a ff ff       	jmp    c0000680 <strcpy>
c000bc4f:	90                   	nop

c000bc50 <Device::Device(char const*)>:
c000bc50:	83 ec 1c             	sub    esp,0x1c
c000bc53:	ba 00 fe 01 c0       	mov    edx,0xc001fe00
c000bc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc5c:	89 10                	mov    DWORD PTR [eax],edx
c000bc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc62:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc70:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc96:	83 ec 08             	sub    esp,0x8
c000bc99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca1:	e8 9c ff ff ff       	call   c000bc42 <Device::setName(char const*)>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bcb1:	83 ec 0c             	sub    esp,0xc
c000bcb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcb8:	e8 be bb ff ff       	call   c000787b <malloc>
c000bcbd:	83 c4 10             	add    esp,0x10
c000bcc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bcc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bccd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bcd1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bcd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcdb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bce1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bceb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bcf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcfc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bd03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd07:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bd0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd12:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd20:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bd2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd2e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd3c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bd46:	90                   	nop
c000bd47:	83 c4 1c             	add    esp,0x1c
c000bd4a:	c3                   	ret    
c000bd4b:	90                   	nop

c000bd4c <Device::getName()>:
c000bd4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd50:	05 d0 00 00 00       	add    eax,0xd0
c000bd55:	c3                   	ret    

c000bd56 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5d:	83 ec 08             	sub    esp,0x8
c000bd60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd64:	50                   	push   eax
c000bd65:	e8 e6 fe ff ff       	call   c000bc50 <Device::Device(char const*)>
c000bd6a:	83 c4 10             	add    esp,0x10
c000bd6d:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c000bd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd76:	89 10                	mov    DWORD PTR [eax],edx
c000bd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd86:	90                   	nop
c000bd87:	83 c4 0c             	add    esp,0xc
c000bd8a:	c3                   	ret    
c000bd8b:	90                   	nop

c000bd8c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd8c:	57                   	push   edi
c000bd8d:	56                   	push   esi
c000bd8e:	53                   	push   ebx
c000bd8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd9b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bda1:	75 0c                	jne    c000bdaf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bda3:	52                   	push   edx
c000bda4:	52                   	push   edx
c000bda5:	53                   	push   ebx
c000bda6:	56                   	push   esi
c000bda7:	e8 c6 26 01 00       	call   c001e472 <LinkedList<Device>::addElement(Device*)>
c000bdac:	83 c4 10             	add    esp,0x10
c000bdaf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bdb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdb8:	74 12                	je     c000bdcc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bdba:	50                   	push   eax
c000bdbb:	57                   	push   edi
c000bdbc:	56                   	push   esi
c000bdbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdc0:	e8 c7 ff ff ff       	call   c000bd8c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bdc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdc7:	83 c4 10             	add    esp,0x10
c000bdca:	eb e9                	jmp    c000bdb5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bdcc:	5b                   	pop    ebx
c000bdcd:	5e                   	pop    esi
c000bdce:	5f                   	pop    edi
c000bdcf:	c3                   	ret    

c000bdd0 <getDevicesOfType(DeviceType)>:
c000bdd0:	53                   	push   ebx
c000bdd1:	83 ec 14             	sub    esp,0x14
c000bdd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdd8:	53                   	push   ebx
c000bdd9:	e8 70 27 01 00       	call   c001e54e <LinkedList<Device>::LinkedList()>
c000bdde:	83 c4 0c             	add    esp,0xc
c000bde1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bde5:	53                   	push   ebx
c000bde6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bdec:	e8 9b ff ff ff       	call   c000bd8c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bdf1:	83 c4 18             	add    esp,0x18
c000bdf4:	89 d8                	mov    eax,ebx
c000bdf6:	5b                   	pop    ebx
c000bdf7:	c2 04 00             	ret    0x4
c000bdfa:	66 90                	xchg   ax,ax

c000bdfc <HardDiskController::HardDiskController(char const*)>:
c000bdfc:	83 ec 0c             	sub    esp,0xc
c000bdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be03:	83 ec 08             	sub    esp,0x8
c000be06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0a:	50                   	push   eax
c000be0b:	e8 40 fe ff ff       	call   c000bc50 <Device::Device(char const*)>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c000be18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1c:	89 10                	mov    DWORD PTR [eax],edx
c000be1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be22:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000be2c:	90                   	nop
c000be2d:	83 c4 0c             	add    esp,0xc
c000be30:	c3                   	ret    
c000be31:	90                   	nop
c000be32:	66 90                	xchg   ax,ax

c000be34 <HardDiskController::~HardDiskController()>:
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c000be3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be40:	89 10                	mov    DWORD PTR [eax],edx
c000be42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be46:	83 ec 0c             	sub    esp,0xc
c000be49:	50                   	push   eax
c000be4a:	e8 6b fb ff ff       	call   c000b9ba <Device::~Device()>
c000be4f:	83 c4 10             	add    esp,0x10
c000be52:	90                   	nop
c000be53:	83 c4 0c             	add    esp,0xc
c000be56:	c3                   	ret    
c000be57:	90                   	nop

c000be58 <HardDiskController::~HardDiskController()>:
c000be58:	83 ec 0c             	sub    esp,0xc
c000be5b:	83 ec 0c             	sub    esp,0xc
c000be5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be62:	e8 cd ff ff ff       	call   c000be34 <HardDiskController::~HardDiskController()>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	83 ec 08             	sub    esp,0x8
c000be6d:	68 58 01 00 00       	push   0x158
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	e8 f9 e6 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000be7b:	83 c4 10             	add    esp,0x10
c000be7e:	83 c4 0c             	add    esp,0xc
c000be81:	c3                   	ret    

c000be82 <PhysicalDisk::eject()>:
c000be82:	83 c8 ff             	or     eax,0xffffffff
c000be85:	c3                   	ret    

c000be86 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be86:	83 ec 0c             	sub    esp,0xc
c000be89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be8d:	83 ec 08             	sub    esp,0x8
c000be90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be94:	50                   	push   eax
c000be95:	e8 b6 fd ff ff       	call   c000bc50 <Device::Device(char const*)>
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000bea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea6:	89 10                	mov    DWORD PTR [eax],edx
c000bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000beb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000becc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bed4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000beda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bede:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bee8:	90                   	nop
c000bee9:	83 c4 0c             	add    esp,0xc
c000beec:	c3                   	ret    
c000beed:	90                   	nop

c000beee <PhysicalDisk::startCache()>:
c000beee:	56                   	push   esi
c000beef:	53                   	push   ebx
c000bef0:	83 ec 10             	sub    esp,0x10
c000bef3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef7:	6a 44                	push   0x44
c000bef9:	e8 7d b9 ff ff       	call   c000787b <malloc>
c000befe:	89 c6                	mov    esi,eax
c000bf00:	58                   	pop    eax
c000bf01:	5a                   	pop    edx
c000bf02:	53                   	push   ebx
c000bf03:	56                   	push   esi
c000bf04:	e8 eb 16 00 00       	call   c000d5f4 <VCache::VCache(PhysicalDisk*)>
c000bf09:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bf0f:	83 c4 14             	add    esp,0x14
c000bf12:	5b                   	pop    ebx
c000bf13:	5e                   	pop    esi
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <PhysicalDisk::~PhysicalDisk()>:
c000bf16:	83 ec 0c             	sub    esp,0xc
c000bf19:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000bf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf22:	89 10                	mov    DWORD PTR [eax],edx
c000bf24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	50                   	push   eax
c000bf2c:	e8 89 fa ff ff       	call   c000b9ba <Device::~Device()>
c000bf31:	83 c4 10             	add    esp,0x10
c000bf34:	90                   	nop
c000bf35:	83 c4 0c             	add    esp,0xc
c000bf38:	c3                   	ret    
c000bf39:	90                   	nop

c000bf3a <PhysicalDisk::~PhysicalDisk()>:
c000bf3a:	83 ec 0c             	sub    esp,0xc
c000bf3d:	83 ec 0c             	sub    esp,0xc
c000bf40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf44:	e8 cd ff ff ff       	call   c000bf16 <PhysicalDisk::~PhysicalDisk()>
c000bf49:	83 c4 10             	add    esp,0x10
c000bf4c:	83 ec 08             	sub    esp,0x8
c000bf4f:	68 6c 01 00 00       	push   0x16c
c000bf54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf58:	e8 17 e6 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	83 c4 0c             	add    esp,0xc
c000bf63:	c3                   	ret    

c000bf64 <int_handler>:
c000bf64:	55                   	push   ebp
c000bf65:	57                   	push   edi
c000bf66:	56                   	push   esi
c000bf67:	53                   	push   ebx
c000bf68:	83 ec 0c             	sub    esp,0xc
c000bf6b:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf76:	74 0b                	je     c000bf83 <int_handler+0x1f>
c000bf78:	fa                   	cli    
c000bf79:	f4                   	hlt    
c000bf7a:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf81:	75 f5                	jne    c000bf78 <int_handler+0x14>
c000bf83:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf86:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf89:	83 f8 17             	cmp    eax,0x17
c000bf8c:	76 3e                	jbe    c000bfcc <int_handler+0x68>
c000bf8e:	c1 e6 04             	shl    esi,0x4
c000bf91:	31 db                	xor    ebx,ebx
c000bf93:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf99:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf9f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bfa3:	85 c0                	test   eax,eax
c000bfa5:	74 13                	je     c000bfba <int_handler+0x56>
c000bfa7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bfab:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bfae:	74 2a                	je     c000bfda <int_handler+0x76>
c000bfb0:	83 ec 08             	sub    esp,0x8
c000bfb3:	52                   	push   edx
c000bfb4:	57                   	push   edi
c000bfb5:	ff d0                	call   eax
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	43                   	inc    ebx
c000bfbb:	83 fb 04             	cmp    ebx,0x4
c000bfbe:	75 df                	jne    c000bf9f <int_handler+0x3b>
c000bfc0:	83 c4 0c             	add    esp,0xc
c000bfc3:	31 c0                	xor    eax,eax
c000bfc5:	31 d2                	xor    edx,edx
c000bfc7:	5b                   	pop    ebx
c000bfc8:	5e                   	pop    esi
c000bfc9:	5f                   	pop    edi
c000bfca:	5d                   	pop    ebp
c000bfcb:	c3                   	ret    
c000bfcc:	83 ec 0c             	sub    esp,0xc
c000bfcf:	50                   	push   eax
c000bfd0:	e8 fd ad 00 00       	call   c0016dd2 <HalEndOfInterrupt(int)>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	eb b4                	jmp    c000bf8e <int_handler+0x2a>
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	52                   	push   edx
c000bfde:	57                   	push   edi
c000bfdf:	ff d0                	call   eax
c000bfe1:	83 c4 10             	add    esp,0x10
c000bfe4:	83 c4 0c             	add    esp,0xc
c000bfe7:	5b                   	pop    ebx
c000bfe8:	5e                   	pop    esi
c000bfe9:	5f                   	pop    edi
c000bfea:	5d                   	pop    ebp
c000bfeb:	c3                   	ret    

c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bfec:	56                   	push   esi
c000bfed:	31 c0                	xor    eax,eax
c000bfef:	53                   	push   ebx
c000bff0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bff4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bff8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bffc:	89 ca                	mov    edx,ecx
c000bffe:	c1 e2 04             	shl    edx,0x4
c000c001:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000c009:	74 15                	je     c000c020 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c00b:	40                   	inc    eax
c000c00c:	83 f8 04             	cmp    eax,0x4
c000c00f:	75 f0                	jne    c000c001 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c011:	c7 44 24 0c b4 fe 01 c0 	mov    DWORD PTR [esp+0xc],0xc001feb4
c000c019:	5b                   	pop    ebx
c000c01a:	5e                   	pop    esi
c000c01b:	e9 9d 44 00 00       	jmp    c00104bd <KePanic(char const*)>
c000c020:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c023:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000c02a:	5b                   	pop    ebx
c000c02b:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000c032:	5e                   	pop    esi
c000c033:	c3                   	ret    

c000c034 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c034:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c03a:	57                   	push   edi
c000c03b:	56                   	push   esi
c000c03c:	53                   	push   ebx
c000c03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c041:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c045:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c04c:	74 55                	je     c000c0a3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000c04e:	89 c7                	mov    edi,eax
c000c050:	84 c0                	test   al,al
c000c052:	74 1e                	je     c000c072 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000c054:	83 fe 0f             	cmp    esi,0xf
c000c057:	0f 8f ce 00 00 00    	jg     c000c12b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf7>
c000c05d:	0f b6 b6 60 19 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde6a0]
c000c064:	66 8b bc 36 60 67 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd98a0]
c000c06c:	66 d1 ef             	shr    di,1
c000c06f:	83 e7 01             	and    edi,0x1
c000c072:	83 ec 08             	sub    esp,0x8
c000c075:	ff 35 60 7b 02 c0    	push   DWORD PTR ds:0xc0027b60
c000c07b:	31 db                	xor    ebx,ebx
c000c07d:	68 c1 fe 01 c0       	push   0xc001fec1
c000c082:	e8 e2 e5 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000c087:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c08c:	83 c4 10             	add    esp,0x10
c000c08f:	85 c0                	test   eax,eax
c000c091:	7f 51                	jg     c000c0e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000c093:	83 ec 0c             	sub    esp,0xc
c000c096:	68 d8 fe 01 c0       	push   0xc001fed8
c000c09b:	e8 1d 44 00 00       	call   c00104bd <KePanic(char const*)>
c000c0a0:	83 c4 10             	add    esp,0x10
c000c0a3:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c0a6:	31 d2                	xor    edx,edx
c000c0a8:	89 c8                	mov    eax,ecx
c000c0aa:	c1 e0 04             	shl    eax,0x4
c000c0ad:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c0b4:	85 db                	test   ebx,ebx
c000c0b6:	0f 84 86 00 00 00    	je     c000c142 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10e>
c000c0bc:	42                   	inc    edx
c000c0bd:	83 fa 04             	cmp    edx,0x4
c000c0c0:	75 eb                	jne    c000c0ad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	68 2c ff 01 c0       	push   0xc001ff2c
c000c0ca:	e8 ee 43 00 00       	call   c00104bd <KePanic(char const*)>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c0d7:	5b                   	pop    ebx
c000c0d8:	5e                   	pop    esi
c000c0d9:	5f                   	pop    edi
c000c0da:	c3                   	ret    
c000c0db:	43                   	inc    ebx
c000c0dc:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c0e2:	7e af                	jle    c000c093 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000c0e4:	83 ec 08             	sub    esp,0x8
c000c0e7:	56                   	push   esi
c000c0e8:	ff 34 9d 80 7b 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8480]
c000c0ef:	e8 c6 12 01 00       	call   c001d3ba <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	84 c0                	test   al,al
c000c0f9:	74 e0                	je     c000c0db <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000c0fb:	89 f8                	mov    eax,edi
c000c0fd:	83 ec 04             	sub    esp,0x4
c000c100:	0f b6 f8             	movzx  edi,al
c000c103:	8d 46 20             	lea    eax,[esi+0x20]
c000c106:	0f b6 c0             	movzx  eax,al
c000c109:	57                   	push   edi
c000c10a:	6a 00                	push   0x0
c000c10c:	50                   	push   eax
c000c10d:	89 f0                	mov    eax,esi
c000c10f:	0f b6 c0             	movzx  eax,al
c000c112:	6a 00                	push   0x0
c000c114:	6a 00                	push   0x0
c000c116:	50                   	push   eax
c000c117:	ff 34 9d 80 7b 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8480]
c000c11e:	e8 f3 13 01 00       	call   c001d516 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c123:	83 c4 20             	add    esp,0x20
c000c126:	e9 78 ff ff ff       	jmp    c000c0a3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000c12b:	83 ec 0c             	sub    esp,0xc
c000c12e:	31 ff                	xor    edi,edi
c000c130:	68 f4 fe 01 c0       	push   0xc001fef4
c000c135:	e8 83 43 00 00       	call   c00104bd <KePanic(char const*)>
c000c13a:	83 c4 10             	add    esp,0x10
c000c13d:	e9 30 ff ff ff       	jmp    c000c072 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000c142:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c145:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c149:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c150:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c154:	5b                   	pop    ebx
c000c155:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c15c:	89 f0                	mov    eax,esi
c000c15e:	5e                   	pop    esi
c000c15f:	5f                   	pop    edi
c000c160:	c3                   	ret    

c000c161 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c161:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c165:	b0 04                	mov    al,0x4
c000c167:	c4 e2 79 f7 44 24 04 	shlx   eax,DWORD PTR [esp+0x4],eax
c000c16e:	8d 50 10             	lea    edx,[eax+0x10]
c000c171:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c177:	74 08                	je     c000c181 <uninstallISRHandler(int, void (*)(regs*, void*))+0x20>
c000c179:	83 c0 04             	add    eax,0x4
c000c17c:	39 d0                	cmp    eax,edx
c000c17e:	75 f1                	jne    c000c171 <uninstallISRHandler(int, void (*)(regs*, void*))+0x10>
c000c180:	c3                   	ret    
c000c181:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c18b:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c195:	eb e2                	jmp    c000c179 <uninstallISRHandler(int, void (*)(regs*, void*))+0x18>

c000c197 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c197:	56                   	push   esi
c000c198:	53                   	push   ebx
c000c199:	83 ec 04             	sub    esp,0x4
c000c19c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c1a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1a9:	74 0e                	je     c000c1b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c1ab:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c1b0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c1b7:	75 34                	jne    c000c1ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c1b9:	8d 43 20             	lea    eax,[ebx+0x20]
c000c1bc:	c1 e0 04             	shl    eax,0x4
c000c1bf:	8d 50 10             	lea    edx,[eax+0x10]
c000c1c2:	39 b0 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],esi
c000c1c8:	74 0d                	je     c000c1d7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c1ca:	83 c0 04             	add    eax,0x4
c000c1cd:	39 d0                	cmp    eax,edx
c000c1cf:	75 f1                	jne    c000c1c2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c1d1:	83 c4 04             	add    esp,0x4
c000c1d4:	5b                   	pop    ebx
c000c1d5:	5e                   	pop    esi
c000c1d6:	c3                   	ret    
c000c1d7:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1e1:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1eb:	eb dd                	jmp    c000c1ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c1ed:	83 fb 0f             	cmp    ebx,0xf
c000c1f0:	7f 09                	jg     c000c1fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c1f2:	0f b6 9b 60 19 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde6a0]
c000c1f9:	eb be                	jmp    c000c1b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	68 e5 fe 01 c0       	push   0xc001fee5
c000c203:	e8 b5 42 00 00       	call   c00104bd <KePanic(char const*)>
c000c208:	83 c4 10             	add    esp,0x10
c000c20b:	eb ac                	jmp    c000c1b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c20d <setupINTS()>:
c000c20d:	31 c0                	xor    eax,eax
c000c20f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c219:	83 c0 10             	add    eax,0x10
c000c21c:	c7 80 b0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc050],0x0
c000c226:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c230:	c7 80 b4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc04c],0x0
c000c23a:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c244:	c7 80 b8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc048],0x0
c000c24e:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c258:	c7 80 bc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc044],0x0
c000c262:	3d 00 10 00 00       	cmp    eax,0x1000
c000c267:	75 a6                	jne    c000c20f <setupINTS()+0x2>
c000c269:	c3                   	ret    

c000c26a <convertLegacyIRQNumber(int)>:
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c277:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c27e:	74 0c                	je     c000c28c <convertLegacyIRQNumber(int)+0x22>
c000c280:	83 f8 0f             	cmp    eax,0xf
c000c283:	7f 0b                	jg     c000c290 <convertLegacyIRQNumber(int)+0x26>
c000c285:	0f b6 80 60 19 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde6a0]
c000c28c:	83 c4 0c             	add    esp,0xc
c000c28f:	c3                   	ret    
c000c290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	68 f4 fe 01 c0       	push   0xc001fef4
c000c29c:	e8 1c 42 00 00       	call   c00104bd <KePanic(char const*)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a8:	83 c4 0c             	add    esp,0xc
c000c2ab:	c3                   	ret    

c000c2ac <startGUI(void*)>:
c000c2ac:	55                   	push   ebp
c000c2ad:	89 e5                	mov    ebp,esp
c000c2af:	53                   	push   ebx
c000c2b0:	83 ec 04             	sub    esp,0x4
c000c2b3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2b8:	48                   	dec    eax
c000c2b9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2be:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2c3:	85 c0                	test   eax,eax
c000c2c5:	75 01                	jne    c000c2c8 <startGUI(void*)+0x1c>
c000c2c7:	fb                   	sti    
c000c2c8:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2ce:	83 ec 08             	sub    esp,0x8
c000c2d1:	6a 01                	push   0x1
c000c2d3:	68 51 ff 01 c0       	push   0xc001ff51
c000c2d8:	e8 c0 7f 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	83 ec 08             	sub    esp,0x8
c000c2e3:	53                   	push   ebx
c000c2e4:	50                   	push   eax
c000c2e5:	e8 f3 81 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000c2ea:	83 c4 10             	add    esp,0x10
c000c2ed:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2f3:	83 ec 08             	sub    esp,0x8
c000c2f6:	6a 01                	push   0x1
c000c2f8:	68 6b ff 01 c0       	push   0xc001ff6b
c000c2fd:	e8 9b 7f 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000c302:	83 c4 10             	add    esp,0x10
c000c305:	83 ec 08             	sub    esp,0x8
c000c308:	53                   	push   ebx
c000c309:	50                   	push   eax
c000c30a:	e8 ce 81 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000c30f:	83 c4 10             	add    esp,0x10
c000c312:	90                   	nop
c000c313:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c316:	c9                   	leave  
c000c317:	c3                   	ret    

c000c318 <startGUIVESA(void*)>:
c000c318:	55                   	push   ebp
c000c319:	89 e5                	mov    ebp,esp
c000c31b:	53                   	push   ebx
c000c31c:	83 ec 04             	sub    esp,0x4
c000c31f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c324:	48                   	dec    eax
c000c325:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c32a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c32f:	85 c0                	test   eax,eax
c000c331:	75 01                	jne    c000c334 <startGUIVESA(void*)+0x1c>
c000c333:	fb                   	sti    
c000c334:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c33a:	83 ec 08             	sub    esp,0x8
c000c33d:	6a 01                	push   0x1
c000c33f:	68 89 ff 01 c0       	push   0xc001ff89
c000c344:	e8 54 7f 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000c349:	83 c4 10             	add    esp,0x10
c000c34c:	83 ec 08             	sub    esp,0x8
c000c34f:	53                   	push   ebx
c000c350:	50                   	push   eax
c000c351:	e8 87 81 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c35f:	83 ec 08             	sub    esp,0x8
c000c362:	6a 01                	push   0x1
c000c364:	68 6b ff 01 c0       	push   0xc001ff6b
c000c369:	e8 2f 7f 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000c36e:	83 c4 10             	add    esp,0x10
c000c371:	83 ec 08             	sub    esp,0x8
c000c374:	53                   	push   ebx
c000c375:	50                   	push   eax
c000c376:	e8 62 81 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000c37b:	83 c4 10             	add    esp,0x10
c000c37e:	90                   	nop
c000c37f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c382:	c9                   	leave  
c000c383:	c3                   	ret    

c000c384 <sendKeyToTerminal(unsigned char)>:
c000c384:	55                   	push   ebp
c000c385:	89 e5                	mov    ebp,esp
c000c387:	83 ec 28             	sub    esp,0x28
c000c38a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c38d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c390:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c396:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	50                   	push   eax
c000c39e:	52                   	push   edx
c000c39f:	e8 d8 c7 ff ff       	call   c0008b7c <VgaText::receiveKey(unsigned char)>
c000c3a4:	83 c4 10             	add    esp,0x10
c000c3a7:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c3ab:	74 10                	je     c000c3bd <sendKeyToTerminal(unsigned char)+0x39>
c000c3ad:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c3b1:	74 0a                	je     c000c3bd <sendKeyToTerminal(unsigned char)+0x39>
c000c3b3:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c3b7:	0f 85 8f 00 00 00    	jne    c000c44c <sendKeyToTerminal(unsigned char)+0xc8>
c000c3bd:	fa                   	cli    
c000c3be:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3c3:	40                   	inc    eax
c000c3c4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3c9:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3ce:	40                   	inc    eax
c000c3cf:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3d4:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c3d9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3dc:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c3e6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c3ea:	74 1f                	je     c000c40b <sendKeyToTerminal(unsigned char)+0x87>
c000c3ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c3ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3fb:	83 ec 0c             	sub    esp,0xc
c000c3fe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c401:	e8 62 8d 00 00       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c000c406:	83 c4 10             	add    esp,0x10
c000c409:	eb db                	jmp    c000c3e6 <sendKeyToTerminal(unsigned char)+0x62>
c000c40b:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c410:	48                   	dec    eax
c000c411:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c416:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c41b:	85 c0                	test   eax,eax
c000c41d:	75 18                	jne    c000c437 <sendKeyToTerminal(unsigned char)+0xb3>
c000c41f:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c424:	85 c0                	test   eax,eax
c000c426:	74 0f                	je     c000c437 <sendKeyToTerminal(unsigned char)+0xb3>
c000c428:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c432:	e8 89 88 00 00       	call   c0014cc0 <schedule()>
c000c437:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c43c:	48                   	dec    eax
c000c43d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c442:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c447:	85 c0                	test   eax,eax
c000c449:	75 01                	jne    c000c44c <sendKeyToTerminal(unsigned char)+0xc8>
c000c44b:	fb                   	sti    
c000c44c:	90                   	nop
c000c44d:	c9                   	leave  
c000c44e:	c3                   	ret    

c000c44f <sendKeyboardToken(KeyboardToken)>:
c000c44f:	55                   	push   ebp
c000c450:	89 e5                	mov    ebp,esp
c000c452:	83 ec 18             	sub    esp,0x18
c000c455:	e8 b3 40 00 00       	call   c001050d <Krnl::userIOReceived()>
c000c45a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c45d:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c461:	0f b7 c0             	movzx  eax,ax
c000c464:	83 f2 01             	xor    edx,0x1
c000c467:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c46d:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c472:	85 c0                	test   eax,eax
c000c474:	74 24                	je     c000c49a <sendKeyboardToken(KeyboardToken)+0x4b>
c000c476:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c47b:	83 ec 04             	sub    esp,0x4
c000c47e:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c483:	83 ec 08             	sub    esp,0x8
c000c486:	89 e2                	mov    edx,esp
c000c488:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c48b:	89 0a                	mov    DWORD PTR [edx],ecx
c000c48d:	66 8b 4d 0c          	mov    cx,WORD PTR [ebp+0xc]
c000c491:	66 89 4a 04          	mov    WORD PTR [edx+0x4],cx
c000c495:	ff d0                	call   eax
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c49e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c4a1:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c4a6:	38 c2                	cmp    dl,al
c000c4a8:	74 1c                	je     c000c4c6 <sendKeyboardToken(KeyboardToken)+0x77>
c000c4aa:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c4ad:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c4b2:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c4b7:	0f b6 c0             	movzx  eax,al
c000c4ba:	83 ec 0c             	sub    esp,0xc
c000c4bd:	50                   	push   eax
c000c4be:	e8 07 be ff ff       	call   c00082ca <setTerminalScrollLock(bool)>
c000c4c3:	83 c4 10             	add    esp,0x10
c000c4c6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c4c9:	84 c0                	test   al,al
c000c4cb:	0f 84 b9 00 00 00    	je     c000c58a <sendKeyboardToken(KeyboardToken)+0x13b>
c000c4d1:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c4d5:	66 3d 18 03          	cmp    ax,0x318
c000c4d9:	75 06                	jne    c000c4e1 <sendKeyboardToken(KeyboardToken)+0x92>
c000c4db:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c4e1:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c4e5:	66 3d 19 03          	cmp    ax,0x319
c000c4e9:	75 06                	jne    c000c4f1 <sendKeyboardToken(KeyboardToken)+0xa2>
c000c4eb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4f1:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c4f5:	66 3d 1a 03          	cmp    ax,0x31a
c000c4f9:	75 06                	jne    c000c501 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4fb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c501:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c505:	66 3d 1b 03          	cmp    ax,0x31b
c000c509:	75 06                	jne    c000c511 <sendKeyboardToken(KeyboardToken)+0xc2>
c000c50b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c511:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c515:	66 3d 1c 03          	cmp    ax,0x31c
c000c519:	75 06                	jne    c000c521 <sendKeyboardToken(KeyboardToken)+0xd2>
c000c51b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c521:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c525:	66 3d 1d 03          	cmp    ax,0x31d
c000c529:	75 06                	jne    c000c531 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c52b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c531:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c535:	66 3d 1e 03          	cmp    ax,0x31e
c000c539:	75 06                	jne    c000c541 <sendKeyboardToken(KeyboardToken)+0xf2>
c000c53b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c541:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c545:	66 3d 1f 03          	cmp    ax,0x31f
c000c549:	75 06                	jne    c000c551 <sendKeyboardToken(KeyboardToken)+0x102>
c000c54b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c551:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c555:	66 3d 20 03          	cmp    ax,0x320
c000c559:	75 06                	jne    c000c561 <sendKeyboardToken(KeyboardToken)+0x112>
c000c55b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c561:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c565:	66 3d 21 03          	cmp    ax,0x321
c000c569:	75 06                	jne    c000c571 <sendKeyboardToken(KeyboardToken)+0x122>
c000c56b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c571:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c575:	66 3d 22 03          	cmp    ax,0x322
c000c579:	0f 85 d3 00 00 00    	jne    c000c652 <sendKeyboardToken(KeyboardToken)+0x203>
c000c57f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c585:	e9 c8 00 00 00       	jmp    c000c652 <sendKeyboardToken(KeyboardToken)+0x203>
c000c58a:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c58e:	66 3d 18 03          	cmp    ax,0x318
c000c592:	75 0a                	jne    c000c59e <sendKeyboardToken(KeyboardToken)+0x14f>
c000c594:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c59a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59e:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c5a2:	66 3d 19 03          	cmp    ax,0x319
c000c5a6:	75 0a                	jne    c000c5b2 <sendKeyboardToken(KeyboardToken)+0x163>
c000c5a8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c5ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b2:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c5b6:	66 3d 1a 03          	cmp    ax,0x31a
c000c5ba:	75 0a                	jne    c000c5c6 <sendKeyboardToken(KeyboardToken)+0x177>
c000c5bc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c5c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c6:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c5ca:	66 3d 1b 03          	cmp    ax,0x31b
c000c5ce:	75 0a                	jne    c000c5da <sendKeyboardToken(KeyboardToken)+0x18b>
c000c5d0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c5d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5da:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c5de:	66 3d 1c 03          	cmp    ax,0x31c
c000c5e2:	75 0a                	jne    c000c5ee <sendKeyboardToken(KeyboardToken)+0x19f>
c000c5e4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c5ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ee:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c5f2:	66 3d 1d 03          	cmp    ax,0x31d
c000c5f6:	75 0a                	jne    c000c602 <sendKeyboardToken(KeyboardToken)+0x1b3>
c000c5f8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c602:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c606:	66 3d 1e 03          	cmp    ax,0x31e
c000c60a:	75 0a                	jne    c000c616 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000c60c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c612:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c616:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c61a:	66 3d 1f 03          	cmp    ax,0x31f
c000c61e:	75 0a                	jne    c000c62a <sendKeyboardToken(KeyboardToken)+0x1db>
c000c620:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c626:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c62a:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c62e:	66 3d 20 03          	cmp    ax,0x320
c000c632:	75 0a                	jne    c000c63e <sendKeyboardToken(KeyboardToken)+0x1ef>
c000c634:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c63a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c63e:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c642:	66 3d 21 03          	cmp    ax,0x321
c000c646:	75 0a                	jne    c000c652 <sendKeyboardToken(KeyboardToken)+0x203>
c000c648:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c64e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c652:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c656:	66 3d 00 02          	cmp    ax,0x200
c000c65a:	75 2c                	jne    c000c688 <sendKeyboardToken(KeyboardToken)+0x239>
c000c65c:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c661:	83 f0 01             	xor    eax,0x1
c000c664:	84 c0                	test   al,al
c000c666:	74 20                	je     c000c688 <sendKeyboardToken(KeyboardToken)+0x239>
c000c668:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c66d:	6a 01                	push   0x1
c000c66f:	6a 00                	push   0x0
c000c671:	68 ac c2 00 c0       	push   0xc000c2ac
c000c676:	50                   	push   eax
c000c677:	e8 1c 84 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c686:	eb 34                	jmp    c000c6bc <sendKeyboardToken(KeyboardToken)+0x26d>
c000c688:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c68c:	66 3d 01 02          	cmp    ax,0x201
c000c690:	75 2a                	jne    c000c6bc <sendKeyboardToken(KeyboardToken)+0x26d>
c000c692:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c697:	83 f0 01             	xor    eax,0x1
c000c69a:	84 c0                	test   al,al
c000c69c:	74 1e                	je     c000c6bc <sendKeyboardToken(KeyboardToken)+0x26d>
c000c69e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c6a3:	6a 01                	push   0x1
c000c6a5:	6a 00                	push   0x0
c000c6a7:	68 18 c3 00 c0       	push   0xc000c318
c000c6ac:	50                   	push   eax
c000c6ad:	e8 e6 83 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c000c6b2:	83 c4 10             	add    esp,0x10
c000c6b5:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c6bc:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c6c0:	66 3d 25 03          	cmp    ax,0x325
c000c6c4:	75 06                	jne    c000c6cc <sendKeyboardToken(KeyboardToken)+0x27d>
c000c6c6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c6cc:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c6d0:	66 3d 24 03          	cmp    ax,0x324
c000c6d4:	75 06                	jne    c000c6dc <sendKeyboardToken(KeyboardToken)+0x28d>
c000c6d6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c6dc:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c6e0:	66 3d 23 03          	cmp    ax,0x323
c000c6e4:	75 06                	jne    c000c6ec <sendKeyboardToken(KeyboardToken)+0x29d>
c000c6e6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c6ec:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c6f0:	66 3d 26 03          	cmp    ax,0x326
c000c6f4:	75 06                	jne    c000c6fc <sendKeyboardToken(KeyboardToken)+0x2ad>
c000c6f6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c6fc:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c700:	66 3d 27 03          	cmp    ax,0x327
c000c704:	75 06                	jne    c000c70c <sendKeyboardToken(KeyboardToken)+0x2bd>
c000c706:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c70c:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c710:	66 3d 22 03          	cmp    ax,0x322
c000c714:	75 06                	jne    c000c71c <sendKeyboardToken(KeyboardToken)+0x2cd>
c000c716:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c71c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c720:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c723:	83 f0 01             	xor    eax,0x1
c000c726:	84 c0                	test   al,al
c000c728:	74 78                	je     c000c7a2 <sendKeyboardToken(KeyboardToken)+0x353>
c000c72a:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c72f:	84 c0                	test   al,al
c000c731:	74 42                	je     c000c775 <sendKeyboardToken(KeyboardToken)+0x326>
c000c733:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c737:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c73b:	74 2c                	je     c000c769 <sendKeyboardToken(KeyboardToken)+0x31a>
c000c73d:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c743:	89 d0                	mov    eax,edx
c000c745:	c1 e0 02             	shl    eax,0x2
c000c748:	01 d0                	add    eax,edx
c000c74a:	01 c0                	add    eax,eax
c000c74c:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c751:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c755:	0f b7 c0             	movzx  eax,ax
c000c758:	8d 50 d0             	lea    edx,[eax-0x30]
c000c75b:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c760:	01 d0                	add    eax,edx
c000c762:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c767:	eb 6e                	jmp    c000c7d7 <sendKeyboardToken(KeyboardToken)+0x388>
c000c769:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c773:	eb 62                	jmp    c000c7d7 <sendKeyboardToken(KeyboardToken)+0x388>
c000c775:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c77a:	85 c0                	test   eax,eax
c000c77c:	74 18                	je     c000c796 <sendKeyboardToken(KeyboardToken)+0x347>
c000c77e:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c783:	0f b6 c0             	movzx  eax,al
c000c786:	83 ec 0c             	sub    esp,0xc
c000c789:	50                   	push   eax
c000c78a:	e8 f5 fb ff ff       	call   c000c384 <sendKeyToTerminal(unsigned char)>
c000c78f:	83 c4 10             	add    esp,0x10
c000c792:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c796:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c7a0:	eb 35                	jmp    c000c7d7 <sendKeyboardToken(KeyboardToken)+0x388>
c000c7a2:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c7a6:	66 3d 01 01          	cmp    ax,0x101
c000c7aa:	75 2b                	jne    c000c7d7 <sendKeyboardToken(KeyboardToken)+0x388>
c000c7ac:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c7b1:	85 c0                	test   eax,eax
c000c7b3:	74 18                	je     c000c7cd <sendKeyboardToken(KeyboardToken)+0x37e>
c000c7b5:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c7ba:	0f b6 c0             	movzx  eax,al
c000c7bd:	83 ec 0c             	sub    esp,0xc
c000c7c0:	50                   	push   eax
c000c7c1:	e8 be fb ff ff       	call   c000c384 <sendKeyToTerminal(unsigned char)>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c7cd:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c7d7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7da:	83 f0 01             	xor    eax,0x1
c000c7dd:	84 c0                	test   al,al
c000c7df:	74 51                	je     c000c832 <sendKeyboardToken(KeyboardToken)+0x3e3>
c000c7e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7e4:	83 f0 01             	xor    eax,0x1
c000c7e7:	84 c0                	test   al,al
c000c7e9:	74 47                	je     c000c832 <sendKeyboardToken(KeyboardToken)+0x3e3>
c000c7eb:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7f0:	83 f0 01             	xor    eax,0x1
c000c7f3:	84 c0                	test   al,al
c000c7f5:	74 3b                	je     c000c832 <sendKeyboardToken(KeyboardToken)+0x3e3>
c000c7f7:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c7fb:	66 83 f8 1f          	cmp    ax,0x1f
c000c7ff:	76 0a                	jbe    c000c80b <sendKeyboardToken(KeyboardToken)+0x3bc>
c000c801:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c805:	66 83 f8 7e          	cmp    ax,0x7e
c000c809:	76 14                	jbe    c000c81f <sendKeyboardToken(KeyboardToken)+0x3d0>
c000c80b:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c80f:	66 83 f8 0a          	cmp    ax,0xa
c000c813:	74 0a                	je     c000c81f <sendKeyboardToken(KeyboardToken)+0x3d0>
c000c815:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c819:	66 83 f8 08          	cmp    ax,0x8
c000c81d:	75 13                	jne    c000c832 <sendKeyboardToken(KeyboardToken)+0x3e3>
c000c81f:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c823:	0f b6 c0             	movzx  eax,al
c000c826:	83 ec 0c             	sub    esp,0xc
c000c829:	50                   	push   eax
c000c82a:	e8 55 fb ff ff       	call   c000c384 <sendKeyToTerminal(unsigned char)>
c000c82f:	83 c4 10             	add    esp,0x10
c000c832:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c835:	83 f0 01             	xor    eax,0x1
c000c838:	84 c0                	test   al,al
c000c83a:	74 53                	je     c000c88f <sendKeyboardToken(KeyboardToken)+0x440>
c000c83c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c83f:	83 f0 01             	xor    eax,0x1
c000c842:	84 c0                	test   al,al
c000c844:	74 49                	je     c000c88f <sendKeyboardToken(KeyboardToken)+0x440>
c000c846:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c84b:	84 c0                	test   al,al
c000c84d:	74 40                	je     c000c88f <sendKeyboardToken(KeyboardToken)+0x440>
c000c84f:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c853:	66 83 f8 3f          	cmp    ax,0x3f
c000c857:	76 36                	jbe    c000c88f <sendKeyboardToken(KeyboardToken)+0x440>
c000c859:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c85d:	66 83 f8 7f          	cmp    ax,0x7f
c000c861:	77 2c                	ja     c000c88f <sendKeyboardToken(KeyboardToken)+0x440>
c000c863:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c867:	88 c2                	mov    dl,al
c000c869:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c86d:	66 83 f8 5f          	cmp    ax,0x5f
c000c871:	76 04                	jbe    c000c877 <sendKeyboardToken(KeyboardToken)+0x428>
c000c873:	b0 20                	mov    al,0x20
c000c875:	eb 02                	jmp    c000c879 <sendKeyboardToken(KeyboardToken)+0x42a>
c000c877:	b0 00                	mov    al,0x0
c000c879:	29 c2                	sub    edx,eax
c000c87b:	88 d0                	mov    al,dl
c000c87d:	83 e8 40             	sub    eax,0x40
c000c880:	0f b6 c0             	movzx  eax,al
c000c883:	83 ec 0c             	sub    esp,0xc
c000c886:	50                   	push   eax
c000c887:	e8 f8 fa ff ff       	call   c000c384 <sendKeyToTerminal(unsigned char)>
c000c88c:	83 c4 10             	add    esp,0x10
c000c88f:	66 8b 45 08          	mov    ax,WORD PTR [ebp+0x8]
c000c893:	66 3d 00 03          	cmp    ax,0x300
c000c897:	75 0f                	jne    c000c8a8 <sendKeyboardToken(KeyboardToken)+0x459>
c000c899:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c89c:	83 f0 01             	xor    eax,0x1
c000c89f:	84 c0                	test   al,al
c000c8a1:	74 05                	je     c000c8a8 <sendKeyboardToken(KeyboardToken)+0x459>
c000c8a3:	e8 23 ba ff ff       	call   c00082cb <doTerminalCycle()>
c000c8a8:	90                   	nop
c000c8a9:	c9                   	leave  
c000c8aa:	c3                   	ret    

c000c8ab <clearInternalKeybuffer(VgaText*)>:
c000c8ab:	55                   	push   ebp
c000c8ac:	89 e5                	mov    ebp,esp
c000c8ae:	83 ec 08             	sub    esp,0x8
c000c8b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b4:	05 02 01 00 00       	add    eax,0x102
c000c8b9:	83 ec 0c             	sub    esp,0xc
c000c8bc:	50                   	push   eax
c000c8bd:	e8 ee 3c ff ff       	call   c00005b0 <strlen>
c000c8c2:	83 c4 10             	add    esp,0x10
c000c8c5:	89 c2                	mov    edx,eax
c000c8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ca:	05 02 01 00 00       	add    eax,0x102
c000c8cf:	83 ec 04             	sub    esp,0x4
c000c8d2:	52                   	push   edx
c000c8d3:	6a 00                	push   0x0
c000c8d5:	50                   	push   eax
c000c8d6:	e8 a5 3c ff ff       	call   c0000580 <memset>
c000c8db:	83 c4 10             	add    esp,0x10
c000c8de:	90                   	nop
c000c8df:	c9                   	leave  
c000c8e0:	c3                   	ret    

c000c8e1 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c8e1:	55                   	push   ebp
c000c8e2:	89 e5                	mov    ebp,esp
c000c8e4:	83 ec 18             	sub    esp,0x18
c000c8e7:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c8ec:	85 c0                	test   eax,eax
c000c8ee:	74 2a                	je     c000c91a <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c8f0:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c8f6:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c8fb:	83 ec 04             	sub    esp,0x4
c000c8fe:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c903:	83 ec 08             	sub    esp,0x8
c000c906:	89 e2                	mov    edx,esp
c000c908:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000c90b:	89 0a                	mov    DWORD PTR [edx],ecx
c000c90d:	66 8b 4d f0          	mov    cx,WORD PTR [ebp-0x10]
c000c911:	66 89 4a 04          	mov    WORD PTR [edx+0x4],cx
c000c915:	ff d0                	call   eax
c000c917:	83 c4 10             	add    esp,0x10
c000c91a:	fb                   	sti    
c000c91b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c922:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c926:	0f 84 f5 00 00 00    	je     c000ca21 <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92f:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c935:	84 c0                	test   al,al
c000c937:	75 28                	jne    c000c961 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c939:	fa                   	cli    
c000c93a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c93f:	40                   	inc    eax
c000c940:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c945:	e8 76 83 00 00       	call   c0014cc0 <schedule()>
c000c94a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c94f:	48                   	dec    eax
c000c950:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c955:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c95a:	85 c0                	test   eax,eax
c000c95c:	75 ce                	jne    c000c92c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c95e:	fb                   	sti    
c000c95f:	eb cb                	jmp    c000c92c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c964:	8d 50 01             	lea    edx,[eax+0x1]
c000c967:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c96a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c96d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c973:	88 10                	mov    BYTE PTR [eax],dl
c000c975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c978:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c97e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c981:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c985:	75 1e                	jne    c000c9a5 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c987:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c98e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c991:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c997:	83 ec 08             	sub    esp,0x8
c000c99a:	6a 02                	push   0x2
c000c99c:	50                   	push   eax
c000c99d:	e8 86 3f 00 00       	call   c0010928 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c9a9:	75 1e                	jne    c000c9c9 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c9ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c9b5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c9bb:	83 ec 08             	sub    esp,0x8
c000c9be:	6a 09                	push   0x9
c000c9c0:	50                   	push   eax
c000c9c1:	e8 62 3f 00 00       	call   c0010928 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c9c6:	83 c4 10             	add    esp,0x10
c000c9c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9cc:	05 02 01 00 00       	add    eax,0x102
c000c9d1:	83 ec 0c             	sub    esp,0xc
c000c9d4:	50                   	push   eax
c000c9d5:	e8 d6 3b ff ff       	call   c00005b0 <strlen>
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	89 c1                	mov    ecx,eax
c000c9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e2:	05 02 01 00 00       	add    eax,0x102
c000c9e7:	8d 50 01             	lea    edx,[eax+0x1]
c000c9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ed:	05 02 01 00 00       	add    eax,0x102
c000c9f2:	83 ec 04             	sub    esp,0x4
c000c9f5:	51                   	push   ecx
c000c9f6:	52                   	push   edx
c000c9f7:	50                   	push   eax
c000c9f8:	e8 d3 39 ff ff       	call   c00003d0 <memmove>
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ca03:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ca06:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ca0a:	74 10                	je     c000ca1c <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000ca0c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000ca10:	74 0a                	je     c000ca1c <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000ca12:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000ca16:	0f 85 06 ff ff ff    	jne    c000c922 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ca1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ca1f:	eb 03                	jmp    c000ca24 <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000ca21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ca24:	c9                   	leave  
c000ca25:	c3                   	ret    

c000ca26 <Keyboard::Keyboard(char const*)>:
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2d:	83 ec 08             	sub    esp,0x8
c000ca30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca34:	50                   	push   eax
c000ca35:	e8 16 f2 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	ba ac ff 01 c0       	mov    edx,0xc001ffac
c000ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca46:	89 10                	mov    DWORD PTR [eax],edx
c000ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ca56:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000ca5d:	90                   	nop
c000ca5e:	83 c4 0c             	add    esp,0xc
c000ca61:	c3                   	ret    

c000ca62 <Keyboard::~Keyboard()>:
c000ca62:	83 ec 0c             	sub    esp,0xc
c000ca65:	ba ac ff 01 c0       	mov    edx,0xc001ffac
c000ca6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6e:	89 10                	mov    DWORD PTR [eax],edx
c000ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca74:	83 ec 0c             	sub    esp,0xc
c000ca77:	50                   	push   eax
c000ca78:	e8 3d ef ff ff       	call   c000b9ba <Device::~Device()>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	90                   	nop
c000ca81:	83 c4 0c             	add    esp,0xc
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop

c000ca86 <Keyboard::~Keyboard()>:
c000ca86:	83 ec 0c             	sub    esp,0xc
c000ca89:	83 ec 0c             	sub    esp,0xc
c000ca8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca90:	e8 cd ff ff ff       	call   c000ca62 <Keyboard::~Keyboard()>
c000ca95:	83 c4 10             	add    esp,0x10
c000ca98:	83 ec 08             	sub    esp,0x8
c000ca9b:	68 5c 01 00 00       	push   0x15c
c000caa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caa4:	e8 cb da ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000caa9:	83 c4 10             	add    esp,0x10
c000caac:	83 c4 0c             	add    esp,0xc
c000caaf:	c3                   	ret    

c000cab0 <LogicalDisk::close(int, int, void*)>:
c000cab0:	83 c8 ff             	or     eax,0xffffffff
c000cab3:	c3                   	ret    

c000cab4 <LogicalDisk::~LogicalDisk()>:
c000cab4:	83 ec 0c             	sub    esp,0xc
c000cab7:	ba 24 00 02 c0       	mov    edx,0xc0020024
c000cabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac0:	89 10                	mov    DWORD PTR [eax],edx
c000cac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac6:	83 ec 0c             	sub    esp,0xc
c000cac9:	50                   	push   eax
c000caca:	e8 eb ee ff ff       	call   c000b9ba <Device::~Device()>
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	90                   	nop
c000cad3:	83 c4 0c             	add    esp,0xc
c000cad6:	c3                   	ret    
c000cad7:	90                   	nop

c000cad8 <LogicalDisk::~LogicalDisk()>:
c000cad8:	83 ec 0c             	sub    esp,0xc
c000cadb:	83 ec 0c             	sub    esp,0xc
c000cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae2:	e8 cd ff ff ff       	call   c000cab4 <LogicalDisk::~LogicalDisk()>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	83 ec 08             	sub    esp,0x8
c000caed:	68 78 01 00 00       	push   0x178
c000caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf6:	e8 79 da ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	83 c4 0c             	add    esp,0xc
c000cb01:	c3                   	ret    

c000cb02 <LogicalDisk::open(int, int, void*)>:
c000cb02:	83 ec 18             	sub    esp,0x18
c000cb05:	68 d8 ff 01 c0       	push   0xc001ffd8
c000cb0a:	e8 ae 39 00 00       	call   c00104bd <KePanic(char const*)>
c000cb0f:	83 c8 ff             	or     eax,0xffffffff
c000cb12:	83 c4 1c             	add    esp,0x1c
c000cb15:	c3                   	ret    

c000cb16 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cb16:	53                   	push   ebx
c000cb17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb1b:	c5 fa 7e 44 24 0c    	vmovq  xmm0,QWORD PTR [esp+0xc]
c000cb21:	c5 fa 7e 89 58 01 00 00 	vmovq  xmm1,QWORD PTR [ecx+0x158]
c000cb29:	c5 f9 fb c1          	vpsubq xmm0,xmm0,xmm1
c000cb2d:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000cb33:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb39:	77 14                	ja     c000cb4f <LogicalDisk::absoluteToRelative(unsigned long long)+0x39>
c000cb3b:	c5 f9 7e c0          	vmovd  eax,xmm0
c000cb3f:	89 d3                	mov    ebx,edx
c000cb41:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cb47:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cb4d:	72 0e                	jb     c000cb5d <LogicalDisk::absoluteToRelative(unsigned long long)+0x47>
c000cb4f:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c000cb53:	c5 f9 7e c0          	vmovd  eax,xmm0
c000cb57:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000cb5d:	5b                   	pop    ebx
c000cb5e:	c3                   	ret    
c000cb5f:	90                   	nop

c000cb60 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cb60:	c5 fa 7e 44 24 08    	vmovq  xmm0,QWORD PTR [esp+0x8]
c000cb66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb6a:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000cb70:	c5 f9 7e c1          	vmovd  ecx,xmm0
c000cb74:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb7a:	77 1c                	ja     c000cb98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x38>
c000cb7c:	3b 88 60 01 00 00    	cmp    ecx,DWORD PTR [eax+0x160]
c000cb82:	1b 90 64 01 00 00    	sbb    edx,DWORD PTR [eax+0x164]
c000cb88:	73 0e                	jae    c000cb98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x38>
c000cb8a:	c5 fa 7e 88 58 01 00 00 	vmovq  xmm1,QWORD PTR [eax+0x158]
c000cb92:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c000cb96:	eb 04                	jmp    c000cb9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x3c>
c000cb98:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c000cb9c:	c5 f9 7e c0          	vmovd  eax,xmm0
c000cba0:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000cba6:	c3                   	ret    
c000cba7:	90                   	nop

c000cba8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cba8:	83 ec 1c             	sub    esp,0x1c
c000cbab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cbbf:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cbc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbce:	83 ec 08             	sub    esp,0x8
c000cbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd5:	50                   	push   eax
c000cbd6:	e8 75 f0 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	ba 24 00 02 c0       	mov    edx,0xc0020024
c000cbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe7:	89 10                	mov    DWORD PTR [eax],edx
c000cbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbed:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc03:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cc18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc24:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cc2a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cc30:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cc37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc3b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cc41:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc4f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc59:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cc63:	90                   	nop
c000cc64:	83 c4 1c             	add    esp,0x1c
c000cc67:	c3                   	ret    

c000cc68 <LogicalDisk::assignDriveLetter()>:
c000cc68:	55                   	push   ebp
c000cc69:	57                   	push   edi
c000cc6a:	56                   	push   esi
c000cc6b:	53                   	push   ebx
c000cc6c:	83 ec 1c             	sub    esp,0x1c
c000cc6f:	c5 fa 7e 0d 00 64 02 c0 	vmovq  xmm1,QWORD PTR ds:0xc0026400
c000cc77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000cc7b:	8b b7 6c 01 00 00    	mov    esi,DWORD PTR [edi+0x16c]
c000cc81:	8a 86 69 01 00 00    	mov    al,BYTE PTR [esi+0x169]
c000cc87:	3c 01                	cmp    al,0x1
c000cc89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000cc8d:	19 c0                	sbb    eax,eax
c000cc8f:	83 e0 02             	and    eax,0x2
c000cc92:	83 c0 41             	add    eax,0x41
c000cc95:	0f be d0             	movsx  edx,al
c000cc98:	3c 43                	cmp    al,0x43
c000cc9a:	75 10                	jne    c000ccac <LogicalDisk::assignDriveLetter()+0x44>
c000cc9c:	80 be 68 01 00 00 00 	cmp    BYTE PTR [esi+0x168],0x0
c000cca3:	75 4d                	jne    c000ccf2 <LogicalDisk::assignDriveLetter()+0x8a>
c000cca5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ccaa:	75 46                	jne    c000ccf2 <LogicalDisk::assignDriveLetter()+0x8a>
c000ccac:	bb 01 00 00 00       	mov    ebx,0x1
c000ccb1:	8d 6a bf             	lea    ebp,[edx-0x41]
c000ccb4:	c4 e2 51 f7 cb       	shlx   ecx,ebx,ebp
c000ccb9:	89 cb                	mov    ebx,ecx
c000ccbb:	c5 f9 6e d1          	vmovd  xmm2,ecx
c000ccbf:	c1 fb 1f             	sar    ebx,0x1f
c000ccc2:	c4 e3 69 22 d3 01    	vpinsrd xmm2,xmm2,ebx,0x1
c000ccc8:	c5 f1 db c2          	vpand  xmm0,xmm1,xmm2
c000cccc:	c5 f9 6c c0          	vpunpcklqdq xmm0,xmm0,xmm0
c000ccd0:	c4 e2 79 17 c0       	vptest xmm0,xmm0
c000ccd5:	75 1b                	jne    c000ccf2 <LogicalDisk::assignDriveLetter()+0x8a>
c000ccd7:	c5 f1 eb ca          	vpor   xmm1,xmm1,xmm2
c000ccdb:	88 87 68 01 00 00    	mov    BYTE PTR [edi+0x168],al
c000cce1:	c5 f9 d6 0d 00 64 02 c0 	vmovq  QWORD PTR ds:0xc0026400,xmm1
c000cce9:	89 3c ad 20 64 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9be0],edi
c000ccf0:	eb 08                	jmp    c000ccfa <LogicalDisk::assignDriveLetter()+0x92>
c000ccf2:	40                   	inc    eax
c000ccf3:	42                   	inc    edx
c000ccf4:	3c 5b                	cmp    al,0x5b
c000ccf6:	75 a0                	jne    c000cc98 <LogicalDisk::assignDriveLetter()+0x30>
c000ccf8:	31 c0                	xor    eax,eax
c000ccfa:	83 c4 1c             	add    esp,0x1c
c000ccfd:	5b                   	pop    ebx
c000ccfe:	5e                   	pop    esi
c000ccff:	5f                   	pop    edi
c000cd00:	5d                   	pop    ebp
c000cd01:	c3                   	ret    

c000cd02 <LogicalDisk::mount()>:
c000cd02:	56                   	push   esi
c000cd03:	53                   	push   ebx
c000cd04:	53                   	push   ebx
c000cd05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd09:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cd0f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cd19:	85 db                	test   ebx,ebx
c000cd1b:	74 27                	je     c000cd44 <LogicalDisk::mount()+0x42>
c000cd1d:	51                   	push   ecx
c000cd1e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cd25:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cd27:	83 e8 41             	sub    eax,0x41
c000cd2a:	50                   	push   eax
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	84 c0                	test   al,al
c000cd35:	74 08                	je     c000cd3f <LogicalDisk::mount()+0x3d>
c000cd37:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cd3d:	eb 07                	jmp    c000cd46 <LogicalDisk::mount()+0x44>
c000cd3f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cd42:	eb d5                	jmp    c000cd19 <LogicalDisk::mount()+0x17>
c000cd44:	31 c0                	xor    eax,eax
c000cd46:	5a                   	pop    edx
c000cd47:	5b                   	pop    ebx
c000cd48:	5e                   	pop    esi
c000cd49:	c3                   	ret    

c000cd4a <LogicalDisk::unmount()>:
c000cd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd4e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cd58:	c3                   	ret    
c000cd59:	90                   	nop

c000cd5a <LogicalDisk::eject()>:
c000cd5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cd64:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd6a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cd6d:	90                   	nop

c000cd6e <LogicalDisk::unassignDriveLetter()>:
c000cd6e:	53                   	push   ebx
c000cd6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd73:	0f be 82 68 01 00 00 	movsx  eax,BYTE PTR [edx+0x168]
c000cd7a:	84 c0                	test   al,al
c000cd7c:	75 0e                	jne    c000cd8c <LogicalDisk::unassignDriveLetter()+0x1e>
c000cd7e:	c7 44 24 08 fc ff 01 c0 	mov    DWORD PTR [esp+0x8],0xc001fffc
c000cd86:	5b                   	pop    ebx
c000cd87:	e9 31 37 00 00       	jmp    c00104bd <KePanic(char const*)>
c000cd8c:	83 e8 41             	sub    eax,0x41
c000cd8f:	b9 01 00 00 00       	mov    ecx,0x1
c000cd94:	c5 f1 76 c9          	vpcmpeqd xmm1,xmm1,xmm1
c000cd98:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd9f:	c7 04 85 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd9be0],0x0
c000cdaa:	c4 e2 79 f7 c9       	shlx   ecx,ecx,eax
c000cdaf:	89 cb                	mov    ebx,ecx
c000cdb1:	c5 f9 6e c1          	vmovd  xmm0,ecx
c000cdb5:	c1 fb 1f             	sar    ebx,0x1f
c000cdb8:	c4 e3 79 22 c3 01    	vpinsrd xmm0,xmm0,ebx,0x1
c000cdbe:	5b                   	pop    ebx
c000cdbf:	c5 f9 ef c1          	vpxor  xmm0,xmm0,xmm1
c000cdc3:	c5 fa 7e 0d 00 64 02 c0 	vmovq  xmm1,QWORD PTR ds:0xc0026400
c000cdcb:	c5 f1 db c0          	vpand  xmm0,xmm1,xmm0
c000cdcf:	c5 f9 d6 05 00 64 02 c0 	vmovq  QWORD PTR ds:0xc0026400,xmm0
c000cdd7:	c3                   	ret    

c000cdd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cdd8:	53                   	push   ebx
c000cdd9:	c5 fa 7e 4c 24 0c    	vmovq  xmm1,QWORD PTR [esp+0xc]
c000cddf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cde3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cde7:	c4 e3 79 16 c8 01    	vpextrd eax,xmm1,0x1
c000cded:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c000cdf2:	77 55                	ja     c000ce49 <LogicalDisk::read(unsigned long long, int, void*)+0x71>
c000cdf4:	89 cb                	mov    ebx,ecx
c000cdf6:	c5 f9 6e c1          	vmovd  xmm0,ecx
c000cdfa:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
c000ce00:	c1 fb 1f             	sar    ebx,0x1f
c000ce03:	c4 e3 79 22 c3 01    	vpinsrd xmm0,xmm0,ebx,0x1
c000ce09:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c000ce0d:	c5 f9 7e c3          	vmovd  ebx,xmm0
c000ce11:	c4 e3 79 16 c0 01    	vpextrd eax,xmm0,0x1
c000ce17:	39 9a 60 01 00 00    	cmp    DWORD PTR [edx+0x160],ebx
c000ce1d:	19 c1                	sbb    ecx,eax
c000ce1f:	72 2f                	jb     c000ce50 <LogicalDisk::read(unsigned long long, int, void*)+0x78>
c000ce21:	c5 fa 7e 82 58 01 00 00 	vmovq  xmm0,QWORD PTR [edx+0x158]
c000ce29:	c5 f1 d4 c8          	vpaddq xmm1,xmm1,xmm0
c000ce2d:	c5 f9 d6 4c 24 0c    	vmovq  QWORD PTR [esp+0xc],xmm1
c000ce33:	8b 82 6c 01 00 00    	mov    eax,DWORD PTR [edx+0x16c]
c000ce39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce43:	5b                   	pop    ebx
c000ce44:	e9 e9 0a 00 00       	jmp    c000d932 <VCache::read(unsigned long long, int, void*)>
c000ce49:	b8 05 00 00 00       	mov    eax,0x5
c000ce4e:	eb 05                	jmp    c000ce55 <LogicalDisk::read(unsigned long long, int, void*)+0x7d>
c000ce50:	b8 07 00 00 00       	mov    eax,0x7
c000ce55:	5b                   	pop    ebx
c000ce56:	c3                   	ret    
c000ce57:	90                   	nop

c000ce58 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ce58:	53                   	push   ebx
c000ce59:	c5 fa 7e 4c 24 0c    	vmovq  xmm1,QWORD PTR [esp+0xc]
c000ce5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce67:	c4 e3 79 16 c8 01    	vpextrd eax,xmm1,0x1
c000ce6d:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c000ce72:	77 55                	ja     c000cec9 <LogicalDisk::write(unsigned long long, int, void*)+0x71>
c000ce74:	89 cb                	mov    ebx,ecx
c000ce76:	c5 f9 6e c1          	vmovd  xmm0,ecx
c000ce7a:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
c000ce80:	c1 fb 1f             	sar    ebx,0x1f
c000ce83:	c4 e3 79 22 c3 01    	vpinsrd xmm0,xmm0,ebx,0x1
c000ce89:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c000ce8d:	c5 f9 7e c3          	vmovd  ebx,xmm0
c000ce91:	c4 e3 79 16 c0 01    	vpextrd eax,xmm0,0x1
c000ce97:	39 9a 60 01 00 00    	cmp    DWORD PTR [edx+0x160],ebx
c000ce9d:	19 c1                	sbb    ecx,eax
c000ce9f:	72 2f                	jb     c000ced0 <LogicalDisk::write(unsigned long long, int, void*)+0x78>
c000cea1:	c5 fa 7e 82 58 01 00 00 	vmovq  xmm0,QWORD PTR [edx+0x158]
c000cea9:	c5 f1 d4 c8          	vpaddq xmm1,xmm1,xmm0
c000cead:	c5 f9 d6 4c 24 0c    	vmovq  QWORD PTR [esp+0xc],xmm1
c000ceb3:	8b 82 6c 01 00 00    	mov    eax,DWORD PTR [edx+0x16c]
c000ceb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec3:	5b                   	pop    ebx
c000cec4:	e9 73 09 00 00       	jmp    c000d83c <VCache::write(unsigned long long, int, void*)>
c000cec9:	b8 05 00 00 00       	mov    eax,0x5
c000cece:	eb 05                	jmp    c000ced5 <LogicalDisk::write(unsigned long long, int, void*)+0x7d>
c000ced0:	b8 07 00 00 00       	mov    eax,0x7
c000ced5:	5b                   	pop    ebx
c000ced6:	c3                   	ret    
c000ced7:	90                   	nop

c000ced8 <Mouse::Mouse(char const*)>:
c000ced8:	83 ec 0c             	sub    esp,0xc
c000cedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cedf:	83 ec 08             	sub    esp,0x8
c000cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee6:	50                   	push   eax
c000cee7:	e8 64 ed ff ff       	call   c000bc50 <Device::Device(char const*)>
c000ceec:	83 c4 10             	add    esp,0x10
c000ceef:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000cef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef8:	89 10                	mov    DWORD PTR [eax],edx
c000cefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cf08:	90                   	nop
c000cf09:	83 c4 0c             	add    esp,0xc
c000cf0c:	c3                   	ret    
c000cf0d:	90                   	nop
c000cf0e:	66 90                	xchg   ax,ax

c000cf10 <Mouse::~Mouse()>:
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000cf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1c:	89 10                	mov    DWORD PTR [eax],edx
c000cf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf22:	83 ec 0c             	sub    esp,0xc
c000cf25:	50                   	push   eax
c000cf26:	e8 8f ea ff ff       	call   c000b9ba <Device::~Device()>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	90                   	nop
c000cf2f:	83 c4 0c             	add    esp,0xc
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <Mouse::~Mouse()>:
c000cf34:	83 ec 0c             	sub    esp,0xc
c000cf37:	83 ec 0c             	sub    esp,0xc
c000cf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3e:	e8 cd ff ff ff       	call   c000cf10 <Mouse::~Mouse()>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	83 ec 08             	sub    esp,0x8
c000cf49:	68 58 01 00 00       	push   0x158
c000cf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf52:	e8 1d d6 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	83 c4 0c             	add    esp,0xc
c000cf5d:	c3                   	ret    

c000cf5e <NIC::getMAC()>:
c000cf5e:	31 c0                	xor    eax,eax
c000cf60:	31 d2                	xor    edx,edx
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <NIC::write(int, unsigned char*, int*)>:
c000cf64:	b8 01 00 00 00       	mov    eax,0x1
c000cf69:	c3                   	ret    

c000cf6a <NIC::NIC(char const*)>:
c000cf6a:	83 ec 0c             	sub    esp,0xc
c000cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf71:	83 ec 08             	sub    esp,0x8
c000cf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf78:	50                   	push   eax
c000cf79:	e8 d2 ec ff ff       	call   c000bc50 <Device::Device(char const*)>
c000cf7e:	83 c4 10             	add    esp,0x10
c000cf81:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c000cf86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8a:	89 10                	mov    DWORD PTR [eax],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cf9a:	90                   	nop
c000cf9b:	83 c4 0c             	add    esp,0xc
c000cf9e:	c3                   	ret    
c000cf9f:	90                   	nop

c000cfa0 <NIC::~NIC()>:
c000cfa0:	83 ec 0c             	sub    esp,0xc
c000cfa3:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c000cfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfac:	89 10                	mov    DWORD PTR [eax],edx
c000cfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb2:	83 ec 0c             	sub    esp,0xc
c000cfb5:	50                   	push   eax
c000cfb6:	e8 ff e9 ff ff       	call   c000b9ba <Device::~Device()>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	90                   	nop
c000cfbf:	83 c4 0c             	add    esp,0xc
c000cfc2:	c3                   	ret    
c000cfc3:	90                   	nop

c000cfc4 <NIC::~NIC()>:
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	83 ec 0c             	sub    esp,0xc
c000cfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfce:	e8 cd ff ff ff       	call   c000cfa0 <NIC::~NIC()>
c000cfd3:	83 c4 10             	add    esp,0x10
c000cfd6:	83 ec 08             	sub    esp,0x8
c000cfd9:	68 58 01 00 00       	push   0x158
c000cfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfe2:	e8 8d d5 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	83 c4 0c             	add    esp,0xc
c000cfed:	c3                   	ret    

c000cfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfee:	55                   	push   ebp
c000cfef:	57                   	push   edi
c000cff0:	56                   	push   esi
c000cff1:	53                   	push   ebx
c000cff2:	81 ec 28 01 00 00    	sub    esp,0x128
c000cff8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cfff:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d006:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d00d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d014:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d018:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d01c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d023:	e8 24 ed ff ff       	call   c000bd4c <Device::getName()>
c000d028:	5a                   	pop    edx
c000d029:	59                   	pop    ecx
c000d02a:	50                   	push   eax
c000d02b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d02f:	55                   	push   ebp
c000d030:	e8 4b 36 ff ff       	call   c0000680 <strcpy>
c000d035:	5b                   	pop    ebx
c000d036:	58                   	pop    eax
c000d037:	68 a8 00 02 c0       	push   0xc00200a8
c000d03c:	55                   	push   ebp
c000d03d:	e8 de 37 ff ff       	call   c0000820 <strcat>
c000d042:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d049:	e8 2d a8 ff ff       	call   c000787b <malloc>
c000d04e:	83 c4 0c             	add    esp,0xc
c000d051:	57                   	push   edi
c000d052:	89 c3                	mov    ebx,eax
c000d054:	56                   	push   esi
c000d055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d05d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d064:	55                   	push   ebp
c000d065:	50                   	push   eax
c000d066:	e8 3d fb ff ff       	call   c000cba8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d06b:	83 c4 14             	add    esp,0x14
c000d06e:	53                   	push   ebx
c000d06f:	e8 f4 fb ff ff       	call   c000cc68 <LogicalDisk::assignDriveLetter()>
c000d074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d077:	e8 86 fc ff ff       	call   c000cd02 <LogicalDisk::mount()>
c000d07c:	58                   	pop    eax
c000d07d:	5a                   	pop    edx
c000d07e:	53                   	push   ebx
c000d07f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d086:	e8 2d ea ff ff       	call   c000bab8 <Device::addChild(Device*)>
c000d08b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d091:	5b                   	pop    ebx
c000d092:	5e                   	pop    esi
c000d093:	5f                   	pop    edi
c000d094:	5d                   	pop    ebp
c000d095:	c3                   	ret    

c000d096 <createPartitionsForDisk(PhysicalDisk*)>:
c000d096:	55                   	push   ebp
c000d097:	57                   	push   edi
c000d098:	56                   	push   esi
c000d099:	53                   	push   ebx
c000d09a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d0a0:	8b ac 24 70 02 00 00 	mov    ebp,DWORD PTR [esp+0x270]
c000d0a7:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c000d0ad:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000d0b3:	74 2d                	je     c000d0e2 <createPartitionsForDisk(PhysicalDisk*)+0x4c>
c000d0b5:	c5 fa 7e 85 60 01 00 00 	vmovq  xmm0,QWORD PTR [ebp+0x160]
c000d0bd:	89 cb                	mov    ebx,ecx
c000d0bf:	83 ec 10             	sub    esp,0x10
c000d0c2:	c1 fb 1f             	sar    ebx,0x1f
c000d0c5:	c5 f9 73 f0 0a       	vpsllq xmm0,xmm0,0xa
c000d0ca:	53                   	push   ebx
c000d0cb:	c5 f9 7e c0          	vmovd  eax,xmm0
c000d0cf:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c000d0d5:	51                   	push   ecx
c000d0d6:	52                   	push   edx
c000d0d7:	50                   	push   eax
c000d0d8:	e8 e3 0e 01 00       	call   c001dfc0 <__udivdi3>
c000d0dd:	e9 c0 00 00 00       	jmp    c000d1a2 <createPartitionsForDisk(PhysicalDisk*)+0x10c>
c000d0e2:	83 ec 0c             	sub    esp,0xc
c000d0e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0e8:	8d 54 24 5c          	lea    edx,[esp+0x5c]
c000d0ec:	52                   	push   edx
c000d0ed:	6a 01                	push   0x1
c000d0ef:	6a 00                	push   0x0
c000d0f1:	6a 00                	push   0x0
c000d0f3:	55                   	push   ebp
c000d0f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d0f7:	83 c4 20             	add    esp,0x20
c000d0fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d102:	75 0e                	jne    c000d112 <createPartitionsForDisk(PhysicalDisk*)+0x7c>
c000d104:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d10c:	8d 54 24 50          	lea    edx,[esp+0x50]
c000d110:	74 2c                	je     c000d13e <createPartitionsForDisk(PhysicalDisk*)+0xa8>
c000d112:	c5 fa 7e 85 60 01 00 00 	vmovq  xmm0,QWORD PTR [ebp+0x160]
c000d11a:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c000d120:	83 ec 10             	sub    esp,0x10
c000d123:	c5 f9 73 f0 0a       	vpsllq xmm0,xmm0,0xa
c000d128:	99                   	cdq    
c000d129:	c5 f9 7e c6          	vmovd  esi,xmm0
c000d12d:	c4 e3 79 16 c7 01    	vpextrd edi,xmm0,0x1
c000d133:	52                   	push   edx
c000d134:	50                   	push   eax
c000d135:	57                   	push   edi
c000d136:	56                   	push   esi
c000d137:	e8 84 0e 01 00       	call   c001dfc0 <__udivdi3>
c000d13c:	eb 64                	jmp    c000d1a2 <createPartitionsForDisk(PhysicalDisk*)+0x10c>
c000d13e:	8a 84 24 0e 02 00 00 	mov    al,BYTE PTR [esp+0x20e]
c000d145:	8a 9c 24 1e 02 00 00 	mov    bl,BYTE PTR [esp+0x21e]
c000d14c:	83 e0 7f             	and    eax,0x7f
c000d14f:	83 e3 7f             	and    ebx,0x7f
c000d152:	01 d8                	add    eax,ebx
c000d154:	8a 9c 24 2e 02 00 00 	mov    bl,BYTE PTR [esp+0x22e]
c000d15b:	83 e3 7f             	and    ebx,0x7f
c000d15e:	01 c3                	add    ebx,eax
c000d160:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d167:	83 e0 7f             	and    eax,0x7f
c000d16a:	00 c3                	add    bl,al
c000d16c:	74 4b                	je     c000d1b9 <createPartitionsForDisk(PhysicalDisk*)+0x123>
c000d16e:	c5 fa 7e 85 60 01 00 00 	vmovq  xmm0,QWORD PTR [ebp+0x160]
c000d176:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c000d17c:	83 ec 10             	sub    esp,0x10
c000d17f:	c5 f9 73 f0 0a       	vpsllq xmm0,xmm0,0xa
c000d184:	99                   	cdq    
c000d185:	c5 f9 7e 44 24 10    	vmovd  DWORD PTR [esp+0x10],xmm0
c000d18b:	c4 e3 79 16 44 24 14 01 	vpextrd DWORD PTR [esp+0x14],xmm0,0x1
c000d193:	52                   	push   edx
c000d194:	50                   	push   eax
c000d195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19d:	e8 1e 0e 01 00       	call   c001dfc0 <__udivdi3>
c000d1a2:	83 c4 14             	add    esp,0x14
c000d1a5:	52                   	push   edx
c000d1a6:	50                   	push   eax
c000d1a7:	6a 00                	push   0x0
c000d1a9:	6a 00                	push   0x0
c000d1ab:	55                   	push   ebp
c000d1ac:	e8 3d fe ff ff       	call   c000cfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1b1:	83 c4 20             	add    esp,0x20
c000d1b4:	e9 72 01 00 00       	jmp    c000d32b <createPartitionsForDisk(PhysicalDisk*)+0x295>
c000d1b9:	89 d0                	mov    eax,edx
c000d1bb:	31 c9                	xor    ecx,ecx
c000d1bd:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d1c4:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d1cb:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d1d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d1da:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d1e2:	0f 44 d9             	cmove  ebx,ecx
c000d1e5:	89 d7                	mov    edi,edx
c000d1e7:	c1 e6 10             	shl    esi,0x10
c000d1ea:	83 c0 10             	add    eax,0x10
c000d1ed:	c1 e7 08             	shl    edi,0x8
c000d1f0:	89 f2                	mov    edx,esi
c000d1f2:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d1f9:	09 fa                	or     edx,edi
c000d1fb:	09 f2                	or     edx,esi
c000d1fd:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d204:	c1 e6 18             	shl    esi,0x18
c000d207:	09 f2                	or     edx,esi
c000d209:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d210:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d214:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d21b:	89 d7                	mov    edi,edx
c000d21d:	89 f2                	mov    edx,esi
c000d21f:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d226:	c1 e7 08             	shl    edi,0x8
c000d229:	c1 e2 10             	shl    edx,0x10
c000d22c:	09 fa                	or     edx,edi
c000d22e:	09 f2                	or     edx,esi
c000d230:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d237:	c1 e6 18             	shl    esi,0x18
c000d23a:	09 f2                	or     edx,esi
c000d23c:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d240:	41                   	inc    ecx
c000d241:	83 f9 04             	cmp    ecx,0x4
c000d244:	0f 85 73 ff ff ff    	jne    c000d1bd <createPartitionsForDisk(PhysicalDisk*)+0x127>
c000d24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24e:	83 f0 01             	xor    eax,0x1
c000d251:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d255:	75 61                	jne    c000d2b8 <createPartitionsForDisk(PhysicalDisk*)+0x222>
c000d257:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d25b:	83 f0 01             	xor    eax,0x1
c000d25e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d262:	75 54                	jne    c000d2b8 <createPartitionsForDisk(PhysicalDisk*)+0x222>
c000d264:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c000d26a:	c5 fa 7e 85 60 01 00 00 	vmovq  xmm0,QWORD PTR [ebp+0x160]
c000d272:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d27a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d282:	c5 f9 73 f0 0a       	vpsllq xmm0,xmm0,0xa
c000d287:	99                   	cdq    
c000d288:	c5 f9 7e 44 24 08    	vmovd  DWORD PTR [esp+0x8],xmm0
c000d28e:	c4 e3 79 16 44 24 0c 01 	vpextrd DWORD PTR [esp+0xc],xmm0,0x1
c000d296:	52                   	push   edx
c000d297:	50                   	push   eax
c000d298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a0:	e8 1b 0d 01 00       	call   c001dfc0 <__udivdi3>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	c5 f9 6e c0          	vmovd  xmm0,eax
c000d2ac:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000d2b2:	c5 f9 d6 44 24 30    	vmovq  QWORD PTR [esp+0x30],xmm0
c000d2b8:	84 db                	test   bl,bl
c000d2ba:	74 3b                	je     c000d2f7 <createPartitionsForDisk(PhysicalDisk*)+0x261>
c000d2bc:	0f b6 db             	movzx  ebx,bl
c000d2bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2c3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d2c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d2cf:	c5 fa 7e 4c dc 10    	vmovq  xmm1,QWORD PTR [esp+ebx*8+0x10]
c000d2d5:	c5 fa 7e 54 dc 30    	vmovq  xmm2,QWORD PTR [esp+ebx*8+0x30]
c000d2db:	c5 f9 d6 4c 24 10    	vmovq  QWORD PTR [esp+0x10],xmm1
c000d2e1:	c5 f9 d6 54 24 30    	vmovq  QWORD PTR [esp+0x30],xmm2
c000d2e7:	89 74 dc 10          	mov    DWORD PTR [esp+ebx*8+0x10],esi
c000d2eb:	89 7c dc 14          	mov    DWORD PTR [esp+ebx*8+0x14],edi
c000d2ef:	89 44 dc 30          	mov    DWORD PTR [esp+ebx*8+0x30],eax
c000d2f3:	89 54 dc 34          	mov    DWORD PTR [esp+ebx*8+0x34],edx
c000d2f7:	31 f6                	xor    esi,esi
c000d2f9:	8b 5c f4 34          	mov    ebx,DWORD PTR [esp+esi*8+0x34]
c000d2fd:	8b 4c f4 30          	mov    ecx,DWORD PTR [esp+esi*8+0x30]
c000d301:	89 d8                	mov    eax,ebx
c000d303:	09 c8                	or     eax,ecx
c000d305:	74 1e                	je     c000d325 <createPartitionsForDisk(PhysicalDisk*)+0x28f>
c000d307:	8b 54 f4 14          	mov    edx,DWORD PTR [esp+esi*8+0x14]
c000d30b:	8b 44 f4 10          	mov    eax,DWORD PTR [esp+esi*8+0x10]
c000d30f:	89 d7                	mov    edi,edx
c000d311:	09 c7                	or     edi,eax
c000d313:	74 10                	je     c000d325 <createPartitionsForDisk(PhysicalDisk*)+0x28f>
c000d315:	83 ec 0c             	sub    esp,0xc
c000d318:	53                   	push   ebx
c000d319:	51                   	push   ecx
c000d31a:	52                   	push   edx
c000d31b:	50                   	push   eax
c000d31c:	55                   	push   ebp
c000d31d:	e8 cc fc ff ff       	call   c000cfee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d322:	83 c4 20             	add    esp,0x20
c000d325:	46                   	inc    esi
c000d326:	83 fe 04             	cmp    esi,0x4
c000d329:	75 ce                	jne    c000d2f9 <createPartitionsForDisk(PhysicalDisk*)+0x263>
c000d32b:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d331:	5b                   	pop    ebx
c000d332:	5e                   	pop    esi
c000d333:	5f                   	pop    edi
c000d334:	5d                   	pop    ebp
c000d335:	c3                   	ret    
c000d336:	66 90                	xchg   ax,ax

c000d338 <Serial::Serial(char const*)>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d33f:	83 ec 08             	sub    esp,0x8
c000d342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d346:	50                   	push   eax
c000d347:	e8 04 e9 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000d34c:	83 c4 10             	add    esp,0x10
c000d34f:	ba bc 00 02 c0       	mov    edx,0xc00200bc
c000d354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d358:	89 10                	mov    DWORD PTR [eax],edx
c000d35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d368:	90                   	nop
c000d369:	83 c4 0c             	add    esp,0xc
c000d36c:	c3                   	ret    
c000d36d:	90                   	nop
c000d36e:	66 90                	xchg   ax,ax

c000d370 <Serial::~Serial()>:
c000d370:	83 ec 0c             	sub    esp,0xc
c000d373:	ba bc 00 02 c0       	mov    edx,0xc00200bc
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	89 10                	mov    DWORD PTR [eax],edx
c000d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d382:	83 ec 0c             	sub    esp,0xc
c000d385:	50                   	push   eax
c000d386:	e8 2f e6 ff ff       	call   c000b9ba <Device::~Device()>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	90                   	nop
c000d38f:	83 c4 0c             	add    esp,0xc
c000d392:	c3                   	ret    
c000d393:	90                   	nop

c000d394 <Serial::~Serial()>:
c000d394:	83 ec 0c             	sub    esp,0xc
c000d397:	83 ec 0c             	sub    esp,0xc
c000d39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39e:	e8 cd ff ff ff       	call   c000d370 <Serial::~Serial()>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	83 ec 08             	sub    esp,0x8
c000d3a9:	68 58 01 00 00       	push   0x158
c000d3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b2:	e8 bd d1 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000d3b7:	83 c4 10             	add    esp,0x10
c000d3ba:	83 c4 0c             	add    esp,0xc
c000d3bd:	c3                   	ret    
c000d3be:	66 90                	xchg   ax,ax

c000d3c0 <Timer::Timer(char const*)>:
c000d3c0:	83 ec 0c             	sub    esp,0xc
c000d3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c7:	83 ec 08             	sub    esp,0x8
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	50                   	push   eax
c000d3cf:	e8 7c e8 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	ba 00 01 02 c0       	mov    edx,0xc0020100
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	89 10                	mov    DWORD PTR [eax],edx
c000d3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d3f0:	90                   	nop
c000d3f1:	83 c4 0c             	add    esp,0xc
c000d3f4:	c3                   	ret    
c000d3f5:	90                   	nop
c000d3f6:	66 90                	xchg   ax,ax

c000d3f8 <Timer::~Timer()>:
c000d3f8:	83 ec 0c             	sub    esp,0xc
c000d3fb:	ba 00 01 02 c0       	mov    edx,0xc0020100
c000d400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d404:	89 10                	mov    DWORD PTR [eax],edx
c000d406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40a:	83 ec 0c             	sub    esp,0xc
c000d40d:	50                   	push   eax
c000d40e:	e8 a7 e5 ff ff       	call   c000b9ba <Device::~Device()>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	90                   	nop
c000d417:	83 c4 0c             	add    esp,0xc
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <Timer::~Timer()>:
c000d41c:	83 ec 0c             	sub    esp,0xc
c000d41f:	83 ec 0c             	sub    esp,0xc
c000d422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d426:	e8 cd ff ff ff       	call   c000d3f8 <Timer::~Timer()>
c000d42b:	83 c4 10             	add    esp,0x10
c000d42e:	83 ec 08             	sub    esp,0x8
c000d431:	68 5c 01 00 00       	push   0x15c
c000d436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d43a:	e8 35 d1 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000d43f:	83 c4 10             	add    esp,0x10
c000d442:	83 c4 0c             	add    esp,0xc
c000d445:	c3                   	ret    

c000d446 <Timer::read()>:
c000d446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d44a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d450:	c3                   	ret    

c000d451 <setupTimer(int)>:
c000d451:	53                   	push   ebx
c000d452:	83 ec 14             	sub    esp,0x14
c000d455:	68 5c 01 00 00       	push   0x15c
c000d45a:	e8 1c a4 ff ff       	call   c000787b <malloc>
c000d45f:	89 c3                	mov    ebx,eax
c000d461:	89 04 24             	mov    DWORD PTR [esp],eax
c000d464:	e8 bb 03 01 00       	call   c001d824 <PIT::PIT()>
c000d469:	58                   	pop    eax
c000d46a:	5a                   	pop    edx
c000d46b:	53                   	push   ebx
c000d46c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d472:	e8 41 e6 ff ff       	call   c000bab8 <Device::addChild(Device*)>
c000d477:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d479:	6a 00                	push   0x0
c000d47b:	6a 00                	push   0x0
c000d47d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d481:	53                   	push   ebx
c000d482:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d485:	89 d8                	mov    eax,ebx
c000d487:	83 c4 28             	add    esp,0x28
c000d48a:	5b                   	pop    ebx
c000d48b:	c3                   	ret    

c000d48c <timerHandler(unsigned int)>:
c000d48c:	56                   	push   esi
c000d48d:	53                   	push   ebx
c000d48e:	51                   	push   ecx
c000d48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d493:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d499:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d4a0:	0f 84 4a 01 00 00    	je     c000d5f0 <timerHandler(unsigned int)+0x164>
c000d4a6:	fa                   	cli    
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4b0:	68 78 71 02 c0       	push   0xc0027178
c000d4b5:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d4bb:	e8 d0 10 01 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	84 c0                	test   al,al
c000d4c5:	0f 85 a1 00 00 00    	jne    c000d56c <timerHandler(unsigned int)+0xe0>
c000d4cb:	83 ec 0c             	sub    esp,0xc
c000d4ce:	68 78 71 02 c0       	push   0xc0027178
c000d4d3:	e8 d4 10 01 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 c6                	mov    esi,eax
c000d4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d4e0:	83 ec 0c             	sub    esp,0xc
c000d4e3:	68 78 71 02 c0       	push   0xc0027178
c000d4e8:	e8 bf 10 01 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4ed:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d4f4:	89 c3                	mov    ebx,eax
c000d4f6:	e8 b9 10 01 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d4fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d4fe:	83 c4 10             	add    esp,0x10
c000d501:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d507:	77 23                	ja     c000d52c <timerHandler(unsigned int)+0xa0>
c000d509:	83 ec 0c             	sub    esp,0xc
c000d50c:	53                   	push   ebx
c000d50d:	e8 56 7c 00 00       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	39 de                	cmp    esi,ebx
c000d517:	75 27                	jne    c000d540 <timerHandler(unsigned int)+0xb4>
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	68 78 71 02 c0       	push   0xc0027178
c000d521:	e8 86 10 01 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d526:	89 c6                	mov    esi,eax
c000d528:	eb 12                	jmp    c000d53c <timerHandler(unsigned int)+0xb0>
c000d52a:	66 90                	xchg   ax,ax
c000d52c:	52                   	push   edx
c000d52d:	52                   	push   edx
c000d52e:	53                   	push   ebx
c000d52f:	68 78 71 02 c0       	push   0xc0027178
c000d534:	e8 33 11 01 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d539:	8d 76 00             	lea    esi,[esi+0x0]
c000d53c:	83 c4 10             	add    esp,0x10
c000d53f:	90                   	nop
c000d540:	83 ec 0c             	sub    esp,0xc
c000d543:	68 78 71 02 c0       	push   0xc0027178
c000d548:	e8 43 10 01 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d54d:	83 c4 10             	add    esp,0x10
c000d550:	84 c0                	test   al,al
c000d552:	75 18                	jne    c000d56c <timerHandler(unsigned int)+0xe0>
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	68 78 71 02 c0       	push   0xc0027178
c000d55c:	e8 4b 10 01 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d561:	83 c4 10             	add    esp,0x10
c000d564:	39 f0                	cmp    eax,esi
c000d566:	0f 85 74 ff ff ff    	jne    c000d4e0 <timerHandler(unsigned int)+0x54>
c000d56c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d571:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d575:	74 41                	je     c000d5b8 <timerHandler(unsigned int)+0x12c>
c000d577:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d57e:	74 38                	je     c000d5b8 <timerHandler(unsigned int)+0x12c>
c000d580:	fa                   	cli    
c000d581:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d587:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d58d:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d592:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d595:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d59b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d59e:	72 08                	jb     c000d5a8 <timerHandler(unsigned int)+0x11c>
c000d5a0:	e8 1b 77 00 00       	call   c0014cc0 <schedule()>
c000d5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d5ad:	48                   	dec    eax
c000d5ae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d5b3:	75 03                	jne    c000d5b8 <timerHandler(unsigned int)+0x12c>
c000d5b5:	fb                   	sti    
c000d5b6:	66 90                	xchg   ax,ax
c000d5b8:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d5bd:	48                   	dec    eax
c000d5be:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d5c3:	75 1b                	jne    c000d5e0 <timerHandler(unsigned int)+0x154>
c000d5c5:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d5cc:	74 12                	je     c000d5e0 <timerHandler(unsigned int)+0x154>
c000d5ce:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d5d8:	e8 e3 76 00 00       	call   c0014cc0 <schedule()>
c000d5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d5e5:	48                   	dec    eax
c000d5e6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d5eb:	75 03                	jne    c000d5f0 <timerHandler(unsigned int)+0x164>
c000d5ed:	fb                   	sti    
c000d5ee:	66 90                	xchg   ax,ax
c000d5f0:	58                   	pop    eax
c000d5f1:	5b                   	pop    ebx
c000d5f2:	5e                   	pop    esi
c000d5f3:	c3                   	ret    

c000d5f4 <VCache::VCache(PhysicalDisk*)>:
c000d5f4:	53                   	push   ebx
c000d5f5:	83 ec 18             	sub    esp,0x18
c000d5f8:	ba 30 01 02 c0       	mov    edx,0xc0020130
c000d5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d601:	89 10                	mov    DWORD PTR [eax],edx
c000d603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d607:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d612:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d624:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d62b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d62f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d636:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d641:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d654:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d65b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d666:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d676:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d685:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d694:	e8 e2 a1 ff ff       	call   c000787b <malloc>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	89 c3                	mov    ebx,eax
c000d69e:	83 ec 0c             	sub    esp,0xc
c000d6a1:	53                   	push   ebx
c000d6a2:	e8 dd 73 00 00       	call   c0014a84 <Mutex::Mutex()>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d6b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6cb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d6d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d6d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6dc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d6e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d6e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6ec:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d6ef:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d6fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d704:	05 00 02 00 00       	add    eax,0x200
c000d709:	c1 e0 03             	shl    eax,0x3
c000d70c:	83 ec 0c             	sub    esp,0xc
c000d70f:	50                   	push   eax
c000d710:	e8 66 a1 ff ff       	call   c000787b <malloc>
c000d715:	83 c4 10             	add    esp,0x10
c000d718:	89 c2                	mov    edx,eax
c000d71a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d71e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d725:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d72c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d730:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d734:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d738:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d73e:	89 d0                	mov    eax,edx
c000d740:	c1 e0 02             	shl    eax,0x2
c000d743:	01 d0                	add    eax,edx
c000d745:	c1 e0 04             	shl    eax,0x4
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 2a a1 ff ff       	call   c000787b <malloc>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 c2                	mov    edx,eax
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d75d:	90                   	nop
c000d75e:	83 c4 18             	add    esp,0x18
c000d761:	5b                   	pop    ebx
c000d762:	c3                   	ret    
c000d763:	90                   	nop

c000d764 <VCache::invalidateReadBuffer()>:
c000d764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d768:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d76e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d772:	c3                   	ret    
c000d773:	90                   	nop

c000d774 <VCache::writeWriteBuffer()>:
c000d774:	53                   	push   ebx
c000d775:	83 ec 08             	sub    esp,0x8
c000d778:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d77c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d780:	74 1e                	je     c000d7a0 <VCache::writeWriteBuffer()+0x2c>
c000d782:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d785:	83 ec 0c             	sub    esp,0xc
c000d788:	8b 10                	mov    edx,DWORD PTR [eax]
c000d78a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d78d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d790:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d793:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d796:	50                   	push   eax
c000d797:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d79a:	83 c4 20             	add    esp,0x20
c000d79d:	8d 76 00             	lea    esi,[esi+0x0]
c000d7a0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d7a7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d7ae:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d7b2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d7b9:	83 c4 08             	add    esp,0x8
c000d7bc:	5b                   	pop    ebx
c000d7bd:	c3                   	ret    
c000d7be:	66 90                	xchg   ax,ax

c000d7c0 <VCache::~VCache()>:
c000d7c0:	83 ec 0c             	sub    esp,0xc
c000d7c3:	ba 30 01 02 c0       	mov    edx,0xc0020130
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d7d5:	84 c0                	test   al,al
c000d7d7:	74 0f                	je     c000d7e8 <VCache::~VCache()+0x28>
c000d7d9:	83 ec 0c             	sub    esp,0xc
c000d7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e0:	e8 8f ff ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c000d7e5:	83 c4 10             	add    esp,0x10
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d7ef:	83 ec 0c             	sub    esp,0xc
c000d7f2:	50                   	push   eax
c000d7f3:	e8 93 a0 ff ff       	call   c000788b <free>
c000d7f8:	83 c4 10             	add    esp,0x10
c000d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d802:	83 ec 0c             	sub    esp,0xc
c000d805:	50                   	push   eax
c000d806:	e8 80 a0 ff ff       	call   c000788b <free>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	90                   	nop
c000d80f:	83 c4 0c             	add    esp,0xc
c000d812:	c3                   	ret    
c000d813:	90                   	nop

c000d814 <VCache::~VCache()>:
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	83 ec 0c             	sub    esp,0xc
c000d81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81e:	e8 9d ff ff ff       	call   c000d7c0 <VCache::~VCache()>
c000d823:	83 c4 10             	add    esp,0x10
c000d826:	83 ec 08             	sub    esp,0x8
c000d829:	6a 44                	push   0x44
c000d82b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82f:	e8 40 cd ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000d834:	83 c4 10             	add    esp,0x10
c000d837:	83 c4 0c             	add    esp,0xc
c000d83a:	c3                   	ret    
c000d83b:	90                   	nop

c000d83c <VCache::write(unsigned long long, int, void*)>:
c000d83c:	55                   	push   ebp
c000d83d:	57                   	push   edi
c000d83e:	56                   	push   esi
c000d83f:	53                   	push   ebx
c000d840:	83 ec 1c             	sub    esp,0x1c
c000d843:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d84b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d84f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d853:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d857:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d85b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d85e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d862:	74 08                	je     c000d86c <VCache::write(unsigned long long, int, void*)+0x30>
c000d864:	53                   	push   ebx
c000d865:	e8 fa fe ff ff       	call   c000d764 <VCache::invalidateReadBuffer()>
c000d86a:	58                   	pop    eax
c000d86b:	90                   	nop
c000d86c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d870:	74 66                	je     c000d8d8 <VCache::write(unsigned long long, int, void*)+0x9c>
c000d872:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d875:	c5 fa 7e 4b 1c       	vmovq  xmm1,QWORD PTR [ebx+0x1c]
c000d87a:	89 f8                	mov    eax,edi
c000d87c:	c5 f9 6e c7          	vmovd  xmm0,edi
c000d880:	99                   	cdq    
c000d881:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000d887:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c000d88b:	c5 f9 ef 04 24       	vpxor  xmm0,xmm0,XMMWORD PTR [esp]
c000d890:	c5 f9 6c c0          	vpunpcklqdq xmm0,xmm0,xmm0
c000d894:	c4 e2 79 17 c0       	vptest xmm0,xmm0
c000d899:	75 31                	jne    c000d8cc <VCache::write(unsigned long long, int, void*)+0x90>
c000d89b:	83 fd 01             	cmp    ebp,0x1
c000d89e:	75 2c                	jne    c000d8cc <VCache::write(unsigned long long, int, void*)+0x90>
c000d8a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d8a3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8a9:	0f af f9             	imul   edi,ecx
c000d8ac:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d8af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d8b4:	40                   	inc    eax
c000d8b5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d8b8:	83 f8 50             	cmp    eax,0x50
c000d8bb:	75 6b                	jne    c000d928 <VCache::write(unsigned long long, int, void*)+0xec>
c000d8bd:	83 ec 0c             	sub    esp,0xc
c000d8c0:	53                   	push   ebx
c000d8c1:	e8 ae fe ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c000d8c6:	83 c4 10             	add    esp,0x10
c000d8c9:	eb 5d                	jmp    c000d928 <VCache::write(unsigned long long, int, void*)+0xec>
c000d8cb:	90                   	nop
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	53                   	push   ebx
c000d8d0:	e8 9f fe ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c000d8d5:	83 c4 10             	add    esp,0x10
c000d8d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d8db:	83 fd 4f             	cmp    ebp,0x4f
c000d8de:	7f 20                	jg     c000d900 <VCache::write(unsigned long long, int, void*)+0xc4>
c000d8e0:	c5 fa 7e 14 24       	vmovq  xmm2,QWORD PTR [esp]
c000d8e5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d8e8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d8eb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d8ef:	c5 f9 d6 53 1c       	vmovq  QWORD PTR [ebx+0x1c],xmm2
c000d8f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8fc:	eb 2a                	jmp    c000d928 <VCache::write(unsigned long long, int, void*)+0xec>
c000d8fe:	66 90                	xchg   ax,ax
c000d900:	8b 10                	mov    edx,DWORD PTR [eax]
c000d902:	c5 fa 7e 1c 24       	vmovq  xmm3,QWORD PTR [esp]
c000d907:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d90b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d90f:	c5 f9 d6 5c 24 34    	vmovq  QWORD PTR [esp+0x34],xmm3
c000d915:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d919:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d91c:	83 c4 1c             	add    esp,0x1c
c000d91f:	5b                   	pop    ebx
c000d920:	5e                   	pop    esi
c000d921:	5f                   	pop    edi
c000d922:	5d                   	pop    ebp
c000d923:	ff e0                	jmp    eax
c000d925:	8d 76 00             	lea    esi,[esi+0x0]
c000d928:	83 c4 1c             	add    esp,0x1c
c000d92b:	31 c0                	xor    eax,eax
c000d92d:	5b                   	pop    ebx
c000d92e:	5e                   	pop    esi
c000d92f:	5f                   	pop    edi
c000d930:	5d                   	pop    ebp
c000d931:	c3                   	ret    

c000d932 <VCache::read(unsigned long long, int, void*)>:
c000d932:	55                   	push   ebp
c000d933:	57                   	push   edi
c000d934:	56                   	push   esi
c000d935:	53                   	push   ebx
c000d936:	83 ec 2c             	sub    esp,0x2c
c000d939:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000d93d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d941:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000d945:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000d949:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d94d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000d951:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d955:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d95d:	74 0d                	je     c000d96c <VCache::read(unsigned long long, int, void*)+0x3a>
c000d95f:	83 ec 0c             	sub    esp,0xc
c000d962:	55                   	push   ebp
c000d963:	e8 0c fe ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c000d968:	83 c4 10             	add    esp,0x10
c000d96b:	90                   	nop
c000d96c:	83 fe 01             	cmp    esi,0x1
c000d96f:	0f 85 97 00 00 00    	jne    c000da0c <VCache::read(unsigned long long, int, void*)+0xda>
c000d975:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d978:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000d97f:	0f 85 87 00 00 00    	jne    c000da0c <VCache::read(unsigned long long, int, void*)+0xda>
c000d985:	8b 75 40             	mov    esi,DWORD PTR [ebp+0x40]
c000d988:	89 f0                	mov    eax,esi
c000d98a:	f7 d8                	neg    eax
c000d98c:	99                   	cdq    
c000d98d:	c5 f9 6e c0          	vmovd  xmm0,eax
c000d991:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000d995:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c000d99b:	c5 f9 db 44 24 10    	vpand  xmm0,xmm0,XMMWORD PTR [esp+0x10]
c000d9a1:	c5 f9 7e 44 24 08    	vmovd  DWORD PTR [esp+0x8],xmm0
c000d9a7:	c4 e3 79 16 44 24 0c 01 	vpextrd DWORD PTR [esp+0xc],xmm0,0x1
c000d9af:	74 33                	je     c000d9e4 <VCache::read(unsigned long long, int, void*)+0xb2>
c000d9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9b5:	39 45 34             	cmp    DWORD PTR [ebp+0x34],eax
c000d9b8:	75 2a                	jne    c000d9e4 <VCache::read(unsigned long long, int, void*)+0xb2>
c000d9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9be:	39 45 30             	cmp    DWORD PTR [ebp+0x30],eax
c000d9c1:	75 21                	jne    c000d9e4 <VCache::read(unsigned long long, int, void*)+0xb2>
c000d9c3:	90                   	nop
c000d9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9c7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d9cd:	8b 45 40             	mov    eax,DWORD PTR [ebp+0x40]
c000d9d0:	8d 70 ff             	lea    esi,[eax-0x1]
c000d9d3:	21 f3                	and    ebx,esi
c000d9d5:	0f af d9             	imul   ebx,ecx
c000d9d8:	03 5d 38             	add    ebx,DWORD PTR [ebp+0x38]
c000d9db:	89 de                	mov    esi,ebx
c000d9dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9df:	31 c0                	xor    eax,eax
c000d9e1:	eb 5d                	jmp    c000da40 <VCache::read(unsigned long long, int, void*)+0x10e>
c000d9e3:	90                   	nop
c000d9e4:	83 ec 0c             	sub    esp,0xc
c000d9e7:	c6 45 3c 01          	mov    BYTE PTR [ebp+0x3c],0x1
c000d9eb:	c5 f9 d6 45 30       	vmovq  QWORD PTR [ebp+0x30],xmm0
c000d9f0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9f2:	ff 75 38             	push   DWORD PTR [ebp+0x38]
c000d9f5:	56                   	push   esi
c000d9f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9fe:	51                   	push   ecx
c000d9ff:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000da02:	83 c4 20             	add    esp,0x20
c000da05:	85 c0                	test   eax,eax
c000da07:	75 37                	jne    c000da40 <VCache::read(unsigned long long, int, void*)+0x10e>
c000da09:	eb b9                	jmp    c000d9c4 <VCache::read(unsigned long long, int, void*)+0x92>
c000da0b:	90                   	nop
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	55                   	push   ebp
c000da10:	e8 4f fd ff ff       	call   c000d764 <VCache::invalidateReadBuffer()>
c000da15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da18:	c5 fa 7e 4c 24 20    	vmovq  xmm1,QWORD PTR [esp+0x20]
c000da1e:	8b 10                	mov    edx,DWORD PTR [eax]
c000da20:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
c000da24:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
c000da28:	c5 f9 d6 4c 24 54    	vmovq  QWORD PTR [esp+0x54],xmm1
c000da2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000da32:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000da35:	83 c4 3c             	add    esp,0x3c
c000da38:	5b                   	pop    ebx
c000da39:	5e                   	pop    esi
c000da3a:	5f                   	pop    edi
c000da3b:	5d                   	pop    ebp
c000da3c:	ff e0                	jmp    eax
c000da3e:	66 90                	xchg   ax,ax
c000da40:	83 c4 2c             	add    esp,0x2c
c000da43:	5b                   	pop    ebx
c000da44:	5e                   	pop    esi
c000da45:	5f                   	pop    edi
c000da46:	5d                   	pop    ebp
c000da47:	c3                   	ret    

c000da48 <Video::putrect(int, int, int, int, unsigned int)>:
c000da48:	55                   	push   ebp
c000da49:	57                   	push   edi
c000da4a:	56                   	push   esi
c000da4b:	53                   	push   ebx
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c000da53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000da57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000da5b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000da5f:	01 ef                	add    edi,ebp
c000da61:	39 fd                	cmp    ebp,edi
c000da63:	7d 24                	jge    c000da89 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000da65:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000da69:	39 f3                	cmp    ebx,esi
c000da6b:	7d 19                	jge    c000da86 <Video::putrect(int, int, int, int, unsigned int)+0x3e>
c000da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da71:	8b 08                	mov    ecx,DWORD PTR [eax]
c000da73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da77:	55                   	push   ebp
c000da78:	53                   	push   ebx
c000da79:	43                   	inc    ebx
c000da7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da7e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da81:	83 c4 10             	add    esp,0x10
c000da84:	eb e3                	jmp    c000da69 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000da86:	45                   	inc    ebp
c000da87:	eb d8                	jmp    c000da61 <Video::putrect(int, int, int, int, unsigned int)+0x19>
c000da89:	83 c4 0c             	add    esp,0xc
c000da8c:	5b                   	pop    ebx
c000da8d:	5e                   	pop    esi
c000da8e:	5f                   	pop    edi
c000da8f:	5d                   	pop    ebp
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000da92:	55                   	push   ebp
c000da93:	57                   	push   edi
c000da94:	31 ff                	xor    edi,edi
c000da96:	56                   	push   esi
c000da97:	53                   	push   ebx
c000da98:	83 ec 1c             	sub    esp,0x1c
c000da9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000da9f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000daa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000daaa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000daae:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dab3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dab7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000daba:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dabe:	01 fd                	add    ebp,edi
c000dac0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dac4:	7d 2d                	jge    c000daf3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x61>
c000dac6:	31 f6                	xor    esi,esi
c000dac8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dacc:	01 f2                	add    edx,esi
c000dace:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dad2:	7d 18                	jge    c000daec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x5a>
c000dad4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dad8:	8b 00                	mov    eax,DWORD PTR [eax]
c000dada:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dadd:	46                   	inc    esi
c000dade:	55                   	push   ebp
c000dadf:	52                   	push   edx
c000dae0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dae4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	eb dc                	jmp    c000dac8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x36>
c000daec:	47                   	inc    edi
c000daed:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c000daf1:	eb c7                	jmp    c000daba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x28>
c000daf3:	83 c4 1c             	add    esp,0x1c
c000daf6:	5b                   	pop    ebx
c000daf7:	5e                   	pop    esi
c000daf8:	5f                   	pop    edi
c000daf9:	5d                   	pop    ebp
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <Video::blit(unsigned int*, int, int, int, int)>:
c000dafc:	55                   	push   ebp
c000dafd:	57                   	push   edi
c000dafe:	56                   	push   esi
c000daff:	53                   	push   ebx
c000db00:	bb 00 00 00 00       	mov    ebx,0x0
c000db05:	83 ec 1c             	sub    esp,0x1c
c000db08:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000db0d:	0f 49 5c 24 40       	cmovns ebx,DWORD PTR [esp+0x40]
c000db12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000db16:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db1a:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000db21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db29:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000db2d:	39 f0                	cmp    eax,esi
c000db2f:	7e 49                	jle    c000db7a <Video::blit(unsigned int*, int, int, int, int)+0x7e>
c000db31:	39 b7 5c 01 00 00    	cmp    DWORD PTR [edi+0x15c],esi
c000db37:	7c 41                	jl     c000db7a <Video::blit(unsigned int*, int, int, int, int)+0x7e>
c000db39:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000db3d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000db41:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000db45:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000db49:	39 e9                	cmp    ecx,ebp
c000db4b:	7e 22                	jle    c000db6f <Video::blit(unsigned int*, int, int, int, int)+0x73>
c000db4d:	83 c3 04             	add    ebx,0x4
c000db50:	39 af 58 01 00 00    	cmp    DWORD PTR [edi+0x158],ebp
c000db56:	7c 14                	jl     c000db6c <Video::blit(unsigned int*, int, int, int, int)+0x70>
c000db58:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000db5a:	ff 73 fc             	push   DWORD PTR [ebx-0x4]
c000db5d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000db61:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000db65:	57                   	push   edi
c000db66:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	45                   	inc    ebp
c000db6d:	eb d2                	jmp    c000db41 <Video::blit(unsigned int*, int, int, int, int)+0x45>
c000db6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db73:	46                   	inc    esi
c000db74:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000db78:	eb ab                	jmp    c000db25 <Video::blit(unsigned int*, int, int, int, int)+0x29>
c000db7a:	83 c4 1c             	add    esp,0x1c
c000db7d:	5b                   	pop    ebx
c000db7e:	5e                   	pop    esi
c000db7f:	5f                   	pop    edi
c000db80:	5d                   	pop    ebp
c000db81:	c3                   	ret    

c000db82 <Video::clearScreen(unsigned int)>:
c000db82:	57                   	push   edi
c000db83:	56                   	push   esi
c000db84:	53                   	push   ebx
c000db85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db89:	31 db                	xor    ebx,ebx
c000db8b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000db91:	7e 1f                	jle    c000dbb2 <Video::clearScreen(unsigned int)+0x30>
c000db93:	31 ff                	xor    edi,edi
c000db95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000db9b:	7e 12                	jle    c000dbaf <Video::clearScreen(unsigned int)+0x2d>
c000db9d:	8b 06                	mov    eax,DWORD PTR [esi]
c000db9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba3:	53                   	push   ebx
c000dba4:	57                   	push   edi
c000dba5:	47                   	inc    edi
c000dba6:	56                   	push   esi
c000dba7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbaa:	83 c4 10             	add    esp,0x10
c000dbad:	eb e6                	jmp    c000db95 <Video::clearScreen(unsigned int)+0x13>
c000dbaf:	43                   	inc    ebx
c000dbb0:	eb d9                	jmp    c000db8b <Video::clearScreen(unsigned int)+0x9>
c000dbb2:	5b                   	pop    ebx
c000dbb3:	5e                   	pop    esi
c000dbb4:	5f                   	pop    edi
c000dbb5:	c3                   	ret    

c000dbb6 <Video::putpixel(int, int, unsigned int)>:
c000dbb6:	c7 44 24 04 38 01 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020138
c000dbbe:	e9 fa 28 00 00       	jmp    c00104bd <KePanic(char const*)>
c000dbc3:	90                   	nop

c000dbc4 <Video::readPixelApprox(int, int)>:
c000dbc4:	83 ec 18             	sub    esp,0x18
c000dbc7:	68 59 01 02 c0       	push   0xc0020159
c000dbcc:	e8 ec 28 00 00       	call   c00104bd <KePanic(char const*)>
c000dbd1:	31 c0                	xor    eax,eax
c000dbd3:	83 c4 1c             	add    esp,0x1c
c000dbd6:	c3                   	ret    
c000dbd7:	90                   	nop

c000dbd8 <Video::Video(char const*)>:
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbdf:	83 ec 08             	sub    esp,0x8
c000dbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe6:	50                   	push   eax
c000dbe7:	e8 64 e0 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000dbec:	83 c4 10             	add    esp,0x10
c000dbef:	ba d4 01 02 c0       	mov    edx,0xc00201d4
c000dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf8:	89 10                	mov    DWORD PTR [eax],edx
c000dbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dc08:	90                   	nop
c000dc09:	83 c4 0c             	add    esp,0xc
c000dc0c:	c3                   	ret    
c000dc0d:	90                   	nop

c000dc0e <Video::~Video()>:
c000dc0e:	83 ec 0c             	sub    esp,0xc
c000dc11:	ba d4 01 02 c0       	mov    edx,0xc00201d4
c000dc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1a:	89 10                	mov    DWORD PTR [eax],edx
c000dc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc20:	83 ec 0c             	sub    esp,0xc
c000dc23:	50                   	push   eax
c000dc24:	e8 91 dd ff ff       	call   c000b9ba <Device::~Device()>
c000dc29:	83 c4 10             	add    esp,0x10
c000dc2c:	90                   	nop
c000dc2d:	83 c4 0c             	add    esp,0xc
c000dc30:	c3                   	ret    
c000dc31:	90                   	nop

c000dc32 <Video::~Video()>:
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	83 ec 0c             	sub    esp,0xc
c000dc38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3c:	e8 cd ff ff ff       	call   c000dc0e <Video::~Video()>
c000dc41:	83 c4 10             	add    esp,0x10
c000dc44:	83 ec 08             	sub    esp,0x8
c000dc47:	68 64 01 00 00       	push   0x164
c000dc4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc50:	e8 1f c9 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	83 c4 0c             	add    esp,0xc
c000dc5b:	c3                   	ret    

c000dc5c <Video::isMonochrome()>:
c000dc5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc60:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dc66:	c3                   	ret    
c000dc67:	90                   	nop

c000dc68 <Video::getWidth()>:
c000dc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc72:	c3                   	ret    
c000dc73:	90                   	nop

c000dc74 <Video::getHeight()>:
c000dc74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc7e:	c3                   	ret    
c000dc7f:	90                   	nop

c000dc80 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dc80:	55                   	push   ebp
c000dc81:	57                   	push   edi
c000dc82:	56                   	push   esi
c000dc83:	53                   	push   ebx
c000dc84:	83 ec 2c             	sub    esp,0x2c
c000dc87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dc8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc8f:	83 f8 01             	cmp    eax,0x1
c000dc92:	19 c9                	sbb    ecx,ecx
c000dc94:	31 db                	xor    ebx,ebx
c000dc96:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dc9a:	89 cd                	mov    ebp,ecx
c000dc9c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dca4:	f7 d5                	not    ebp
c000dca6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dcac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dcb0:	01 d8                	add    eax,ebx
c000dcb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcb6:	56                   	push   esi
c000dcb7:	e8 b8 ff ff ff       	call   c000dc74 <Video::getHeight()>
c000dcbc:	59                   	pop    ecx
c000dcbd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dcc1:	7e 70                	jle    c000dd33 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dcc3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dcc7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dccb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dcce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcd2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dcd6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dcdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dce1:	89 f8                	mov    eax,edi
c000dce3:	83 c0 20             	add    eax,0x20
c000dce6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcea:	56                   	push   esi
c000dceb:	e8 78 ff ff ff       	call   c000dc68 <Video::getWidth()>
c000dcf0:	5a                   	pop    edx
c000dcf1:	39 c7                	cmp    edi,eax
c000dcf3:	7d 34                	jge    c000dd29 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dcf5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dcfa:	74 05                	je     c000dd01 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dcfc:	8b 06                	mov    eax,DWORD PTR [esi]
c000dcfe:	55                   	push   ebp
c000dcff:	eb 0d                	jmp    c000dd0e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dd01:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dd06:	74 12                	je     c000dd1a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dd08:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd12:	57                   	push   edi
c000dd13:	56                   	push   esi
c000dd14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd17:	83 c4 10             	add    esp,0x10
c000dd1a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dd1e:	47                   	inc    edi
c000dd1f:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dd23:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dd27:	75 c1                	jne    c000dcea <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dd29:	43                   	inc    ebx
c000dd2a:	83 fb 20             	cmp    ebx,0x20
c000dd2d:	0f 85 79 ff ff ff    	jne    c000dcac <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dd33:	83 c4 2c             	add    esp,0x2c
c000dd36:	5b                   	pop    ebx
c000dd37:	5e                   	pop    esi
c000dd38:	5f                   	pop    edi
c000dd39:	5d                   	pop    ebp
c000dd3a:	c3                   	ret    
c000dd3b:	90                   	nop

c000dd3c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dd3c:	55                   	push   ebp
c000dd3d:	57                   	push   edi
c000dd3e:	56                   	push   esi
c000dd3f:	53                   	push   ebx
c000dd40:	83 ec 28             	sub    esp,0x28
c000dd43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dd47:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dd4b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dd4f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dd53:	c1 e6 08             	shl    esi,0x8
c000dd56:	01 c6                	add    esi,eax
c000dd58:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dd5c:	c1 e0 08             	shl    eax,0x8
c000dd5f:	01 d0                	add    eax,edx
c000dd61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd69:	0f af c6             	imul   eax,esi
c000dd6c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dd73:	50                   	push   eax
c000dd74:	e8 02 9b ff ff       	call   c000787b <malloc>
c000dd79:	83 c4 10             	add    esp,0x10
c000dd7c:	89 c7                	mov    edi,eax
c000dd7e:	85 c0                	test   eax,eax
c000dd80:	75 10                	jne    c000dd92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dd82:	83 ec 0c             	sub    esp,0xc
c000dd85:	68 84 01 02 c0       	push   0xc0020184
c000dd8a:	e8 2e 27 00 00       	call   c00104bd <KePanic(char const*)>
c000dd8f:	83 c4 10             	add    esp,0x10
c000dd92:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dd95:	ba 12 00 00 00       	mov    edx,0x12
c000dd9a:	84 c0                	test   al,al
c000dd9c:	74 11                	je     c000ddaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dd9e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dda2:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dda6:	c1 fa 03             	sar    edx,0x3
c000dda9:	0f af d1             	imul   edx,ecx
c000ddac:	83 c2 12             	add    edx,0x12
c000ddaf:	85 f6                	test   esi,esi
c000ddb1:	74 06                	je     c000ddb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000ddb3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ddb7:	75 12                	jne    c000ddcb <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000ddb9:	83 ec 0c             	sub    esp,0xc
c000ddbc:	68 94 01 02 c0       	push   0xc0020194
c000ddc1:	e8 a3 c8 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000ddc6:	e9 b8 00 00 00       	jmp    c000de83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000ddcb:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ddcf:	80 f9 02             	cmp    cl,0x2
c000ddd2:	0f 85 96 00 00 00    	jne    c000de6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000ddd8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dddd:	75 0e                	jne    c000dded <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dddf:	84 c0                	test   al,al
c000dde1:	75 0a                	jne    c000dded <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dde3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dde6:	83 e8 18             	sub    eax,0x18
c000dde9:	a8 f7                	test   al,0xf7
c000ddeb:	74 0a                	je     c000ddf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dded:	83 ec 0c             	sub    esp,0xc
c000ddf0:	68 a9 01 02 c0       	push   0xc00201a9
c000ddf5:	eb 7f                	jmp    c000de76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000ddf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ddff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000de07:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000de0b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000de0f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000de17:	75 0c                	jne    c000de25 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000de19:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000de1e:	c1 e0 18             	shl    eax,0x18
c000de21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de25:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000de2a:	45                   	inc    ebp
c000de2b:	c1 e1 10             	shl    ecx,0x10
c000de2e:	89 c8                	mov    eax,ecx
c000de30:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000de35:	c1 e1 08             	shl    ecx,0x8
c000de38:	09 c1                	or     ecx,eax
c000de3a:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000de3e:	09 c1                	or     ecx,eax
c000de40:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000de44:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000de48:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000de4c:	c1 f8 03             	sar    eax,0x3
c000de4f:	01 c2                	add    edx,eax
c000de51:	89 e8                	mov    eax,ebp
c000de53:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000de57:	39 c6                	cmp    esi,eax
c000de59:	7f b0                	jg     c000de0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000de5b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de63:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000de66:	7e 22                	jle    c000de8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000de68:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000de6c:	eb 99                	jmp    c000de07 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000de6e:	50                   	push   eax
c000de6f:	50                   	push   eax
c000de70:	51                   	push   ecx
c000de71:	68 b7 01 02 c0       	push   0xc00201b7
c000de76:	e8 ee c7 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000de7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000de7e:	e8 08 9a ff ff       	call   c000788b <free>
c000de83:	83 c4 10             	add    esp,0x10
c000de86:	31 ff                	xor    edi,edi
c000de88:	eb 0f                	jmp    c000de99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000de8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de8e:	89 30                	mov    DWORD PTR [eax],esi
c000de90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de94:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de97:	89 30                	mov    DWORD PTR [eax],esi
c000de99:	83 c4 1c             	add    esp,0x1c
c000de9c:	89 f8                	mov    eax,edi
c000de9e:	5b                   	pop    ebx
c000de9f:	5e                   	pop    esi
c000dea0:	5f                   	pop    edi
c000dea1:	5d                   	pop    ebp
c000dea2:	c3                   	ret    
c000dea3:	90                   	nop

c000dea4 <Video::putTGA(int, int, unsigned char*, int)>:
c000dea4:	55                   	push   ebp
c000dea5:	57                   	push   edi
c000dea6:	56                   	push   esi
c000dea7:	53                   	push   ebx
c000dea8:	83 ec 28             	sub    esp,0x28
c000deab:	8d 44 24 18          	lea    eax,[esp+0x18]
c000deaf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000deb3:	50                   	push   eax
c000deb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000deb8:	50                   	push   eax
c000deb9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000debd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dec1:	56                   	push   esi
c000dec2:	e8 75 fe ff ff       	call   c000dd3c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dec7:	83 c4 20             	add    esp,0x20
c000deca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dece:	85 c0                	test   eax,eax
c000ded0:	74 35                	je     c000df07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ded2:	89 c7                	mov    edi,eax
c000ded4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ded8:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c000dedc:	39 da                	cmp    edx,ebx
c000dede:	7e 27                	jle    c000df07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dee0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dee4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dee8:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000deec:	39 e9                	cmp    ecx,ebp
c000deee:	7e 14                	jle    c000df04 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000def0:	83 c7 04             	add    edi,0x4
c000def3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000def5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000def8:	53                   	push   ebx
c000def9:	55                   	push   ebp
c000defa:	45                   	inc    ebp
c000defb:	56                   	push   esi
c000defc:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	eb e0                	jmp    c000dee4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000df04:	43                   	inc    ebx
c000df05:	eb cd                	jmp    c000ded4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000df07:	83 c4 1c             	add    esp,0x1c
c000df0a:	5b                   	pop    ebx
c000df0b:	5e                   	pop    esi
c000df0c:	5f                   	pop    edi
c000df0d:	5d                   	pop    ebp
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <ACPI::close(int, int, void*)>:
c000df10:	83 ec 1c             	sub    esp,0x1c
c000df13:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000df1b:	74 0b                	je     c000df28 <ACPI::close(int, int, void*)+0x18>
c000df1d:	b8 00 00 00 00       	mov    eax,0x0
c000df22:	e9 99 00 00 00       	jmp    c000dfc0 <ACPI::close(int, int, void*)+0xb0>
c000df27:	90                   	nop
c000df28:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000df2d:	75 29                	jne    c000df58 <ACPI::close(int, int, void*)+0x48>
c000df2f:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000df34:	85 c0                	test   eax,eax
c000df36:	74 08                	je     c000df40 <ACPI::close(int, int, void*)+0x30>
c000df38:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000df3d:	ff d0                	call   eax
c000df3f:	90                   	nop
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	68 18 02 02 c0       	push   0xc0020218
c000df48:	e8 70 25 00 00       	call   c00104bd <KePanic(char const*)>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df55:	eb 69                	jmp    c000dfc0 <ACPI::close(int, int, void*)+0xb0>
c000df57:	90                   	nop
c000df58:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000df5d:	75 59                	jne    c000dfb8 <ACPI::close(int, int, void*)+0xa8>
c000df5f:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000df64:	85 c0                	test   eax,eax
c000df66:	74 08                	je     c000df70 <ACPI::close(int, int, void*)+0x60>
c000df68:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000df6d:	ff d0                	call   eax
c000df6f:	90                   	nop
c000df70:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000df75:	8d 76 00             	lea    esi,[esi+0x0]
c000df78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000df7d:	83 e0 02             	and    eax,0x2
c000df80:	74 1e                	je     c000dfa0 <ACPI::close(int, int, void*)+0x90>
c000df82:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000df89:	66 8b 44 24 0c       	mov    ax,WORD PTR [esp+0xc]
c000df8e:	89 c2                	mov    edx,eax
c000df90:	ec                   	in     al,dx
c000df91:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000df95:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000df99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df9d:	eb d9                	jmp    c000df78 <ACPI::close(int, int, void*)+0x68>
c000df9f:	90                   	nop
c000dfa0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dfa7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dfac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dfb0:	66 8b 54 24 08       	mov    dx,WORD PTR [esp+0x8]
c000dfb5:	ee                   	out    dx,al
c000dfb6:	66 90                	xchg   ax,ax
c000dfb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	83 c4 1c             	add    esp,0x1c
c000dfc3:	c3                   	ret    

c000dfc4 <findRSDP()>:
c000dfc4:	83 ec 1c             	sub    esp,0x1c
c000dfc7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000dfcc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfd2:	83 e0 04             	and    eax,0x4
c000dfd5:	84 c0                	test   al,al
c000dfd7:	75 07                	jne    c000dfe0 <findRSDP()+0x1c>
c000dfd9:	b8 00 00 00 00       	mov    eax,0x0
c000dfde:	eb 70                	jmp    c000e050 <findRSDP()+0x8c>
c000dfe0:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000dfe5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dfea:	7f 1c                	jg     c000e008 <findRSDP()+0x44>
c000dfec:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000dff1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dff7:	83 e2 fb             	and    edx,0xfffffffb
c000dffa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e000:	b8 00 00 00 00       	mov    eax,0x0
c000e005:	eb 49                	jmp    c000e050 <findRSDP()+0x8c>
c000e007:	90                   	nop
c000e008:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e010:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e018:	77 2e                	ja     c000e048 <findRSDP()+0x84>
c000e01a:	83 ec 04             	sub    esp,0x4
c000e01d:	6a 08                	push   0x8
c000e01f:	68 b3 02 02 c0       	push   0xc00202b3
c000e024:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e028:	e8 53 23 ff ff       	call   c0000380 <memcmp>
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	85 c0                	test   eax,eax
c000e032:	0f 94 c0             	sete   al
c000e035:	84 c0                	test   al,al
c000e037:	74 07                	je     c000e040 <findRSDP()+0x7c>
c000e039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e03d:	eb 11                	jmp    c000e050 <findRSDP()+0x8c>
c000e03f:	90                   	nop
c000e040:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e045:	eb c9                	jmp    c000e010 <findRSDP()+0x4c>
c000e047:	90                   	nop
c000e048:	b8 00 00 00 00       	mov    eax,0x0
c000e04d:	8d 76 00             	lea    esi,[esi+0x0]
c000e050:	83 c4 1c             	add    esp,0x1c
c000e053:	c3                   	ret    

c000e054 <loadACPITables(unsigned char*)>:
c000e054:	57                   	push   edi
c000e055:	56                   	push   esi
c000e056:	53                   	push   ebx
c000e057:	83 ec 60             	sub    esp,0x60
c000e05a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e05f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e065:	83 e0 04             	and    eax,0x4
c000e068:	84 c0                	test   al,al
c000e06a:	0f 84 3c 02 00 00    	je     c000e2ac <loadACPITables(unsigned char*)+0x258>
c000e070:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000e075:	84 c0                	test   al,al
c000e077:	74 77                	je     c000e0f0 <loadACPITables(unsigned char*)+0x9c>
c000e079:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e07d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e081:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e088:	83 e8 24             	sub    eax,0x24
c000e08b:	c1 e8 03             	shr    eax,0x3
c000e08e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e092:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e0a0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e0a4:	0f 8d b6 00 00 00    	jge    c000e160 <loadACPITables(unsigned char*)+0x10c>
c000e0aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e0ae:	83 c0 24             	add    eax,0x24
c000e0b1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e0b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e0c1:	c1 e0 03             	shl    eax,0x3
c000e0c4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e0c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e0cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0d1:	89 c1                	mov    ecx,eax
c000e0d3:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e0db:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e0e1:	89 ca                	mov    edx,ecx
c000e0e3:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e0ea:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e0ee:	eb ac                	jmp    c000e09c <loadACPITables(unsigned char*)+0x48>
c000e0f0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e0f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0ff:	83 e8 24             	sub    eax,0x24
c000e102:	c1 e8 02             	shr    eax,0x2
c000e105:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e109:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e111:	8d 76 00             	lea    esi,[esi+0x0]
c000e114:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e118:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e11c:	7d 42                	jge    c000e160 <loadACPITables(unsigned char*)+0x10c>
c000e11e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e122:	83 c0 24             	add    eax,0x24
c000e125:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e129:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e12d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e131:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e135:	c1 e0 02             	shl    eax,0x2
c000e138:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e13c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e140:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e142:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e147:	8d 50 01             	lea    edx,[eax+0x1]
c000e14a:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e150:	89 ca                	mov    edx,ecx
c000e152:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e159:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e15d:	eb b5                	jmp    c000e114 <loadACPITables(unsigned char*)+0xc0>
c000e15f:	90                   	nop
c000e160:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e168:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e16d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e171:	0f 8d 39 01 00 00    	jge    c000e2b0 <loadACPITables(unsigned char*)+0x25c>
c000e177:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e17b:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e182:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e18a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e18e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e192:	25 ff 0f 00 00       	and    eax,0xfff
c000e197:	89 c6                	mov    esi,eax
c000e199:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e19f:	83 ec 0c             	sub    esp,0xc
c000e1a2:	6a 01                	push   0x1
c000e1a4:	e8 16 b2 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c000e1a9:	83 c4 10             	add    esp,0x10
c000e1ac:	89 c2                	mov    edx,eax
c000e1ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1b7:	83 ec 0c             	sub    esp,0xc
c000e1ba:	6a 01                	push   0x1
c000e1bc:	6a 01                	push   0x1
c000e1be:	52                   	push   edx
c000e1bf:	50                   	push   eax
c000e1c0:	53                   	push   ebx
c000e1c1:	e8 a8 bb ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1c6:	83 c4 20             	add    esp,0x20
c000e1c9:	09 f0                	or     eax,esi
c000e1cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1d3:	c1 e0 03             	shl    eax,0x3
c000e1d6:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e1db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1e7:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e1ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e1f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e1f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e1ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e203:	89 c6                	mov    esi,eax
c000e205:	89 d7                	mov    edi,edx
c000e207:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e209:	89 c8                	mov    eax,ecx
c000e20b:	89 fa                	mov    edx,edi
c000e20d:	89 f3                	mov    ebx,esi
c000e20f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e213:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e21b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e21f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e226:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e22a:	05 00 10 00 00       	add    eax,0x1000
c000e22f:	c1 e8 0c             	shr    eax,0xc
c000e232:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e23a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e23e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e242:	25 ff 0f 00 00       	and    eax,0xfff
c000e247:	89 c6                	mov    esi,eax
c000e249:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e256:	e8 64 b1 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c000e25b:	83 c4 10             	add    esp,0x10
c000e25e:	89 c2                	mov    edx,eax
c000e260:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e264:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e269:	83 ec 0c             	sub    esp,0xc
c000e26c:	6a 01                	push   0x1
c000e26e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e272:	52                   	push   edx
c000e273:	50                   	push   eax
c000e274:	53                   	push   ebx
c000e275:	e8 f4 ba ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e27a:	83 c4 20             	add    esp,0x20
c000e27d:	09 f0                	or     eax,esi
c000e27f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e287:	83 ec 0c             	sub    esp,0xc
c000e28a:	50                   	push   eax
c000e28b:	e8 2f b4 ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e297:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e29b:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e2a2:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e2a6:	e9 bd fe ff ff       	jmp    c000e168 <loadACPITables(unsigned char*)+0x114>
c000e2ab:	90                   	nop
c000e2ac:	90                   	nop
c000e2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b0:	83 c4 60             	add    esp,0x60
c000e2b3:	5b                   	pop    ebx
c000e2b4:	5e                   	pop    esi
c000e2b5:	5f                   	pop    edi
c000e2b6:	c3                   	ret    
c000e2b7:	90                   	nop

c000e2b8 <findRSDT(unsigned char*)>:
c000e2b8:	57                   	push   edi
c000e2b9:	56                   	push   esi
c000e2ba:	53                   	push   ebx
c000e2bb:	83 ec 50             	sub    esp,0x50
c000e2be:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e2c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2c9:	83 e0 04             	and    eax,0x4
c000e2cc:	84 c0                	test   al,al
c000e2ce:	75 0c                	jne    c000e2dc <findRSDT(unsigned char*)+0x24>
c000e2d0:	b8 00 00 00 00       	mov    eax,0x0
c000e2d5:	e9 26 01 00 00       	jmp    c000e400 <findRSDT(unsigned char*)+0x148>
c000e2da:	66 90                	xchg   ax,ax
c000e2dc:	89 e0                	mov    eax,esp
c000e2de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e2e2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e2e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e2ea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e2f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e2f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e302:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e306:	89 c6                	mov    esi,eax
c000e308:	89 d7                	mov    edi,edx
c000e30a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e30c:	89 c8                	mov    eax,ecx
c000e30e:	89 fa                	mov    edx,edi
c000e310:	89 f3                	mov    ebx,esi
c000e312:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e316:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e31a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e31e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e322:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e326:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e32e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e332:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e336:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e342:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e346:	25 ff 0f 00 00       	and    eax,0xfff
c000e34b:	89 c6                	mov    esi,eax
c000e34d:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e353:	83 ec 0c             	sub    esp,0xc
c000e356:	6a 02                	push   0x2
c000e358:	e8 62 b0 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	89 c2                	mov    edx,eax
c000e362:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e366:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e36b:	83 ec 0c             	sub    esp,0xc
c000e36e:	6a 01                	push   0x1
c000e370:	6a 02                	push   0x2
c000e372:	52                   	push   edx
c000e373:	50                   	push   eax
c000e374:	53                   	push   ebx
c000e375:	e8 f4 b9 ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e37a:	83 c4 20             	add    esp,0x20
c000e37d:	09 f0                	or     eax,esi
c000e37f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e383:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e387:	25 ff 0f 00 00       	and    eax,0xfff
c000e38c:	89 c6                	mov    esi,eax
c000e38e:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	6a 02                	push   0x2
c000e399:	e8 21 b0 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c000e39e:	83 c4 10             	add    esp,0x10
c000e3a1:	89 c2                	mov    edx,eax
c000e3a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e3a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e3ac:	83 ec 0c             	sub    esp,0xc
c000e3af:	6a 01                	push   0x1
c000e3b1:	6a 02                	push   0x2
c000e3b3:	52                   	push   edx
c000e3b4:	50                   	push   eax
c000e3b5:	53                   	push   ebx
c000e3b6:	e8 b3 b9 ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e3bb:	83 c4 20             	add    esp,0x20
c000e3be:	09 f0                	or     eax,esi
c000e3c0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e3c9:	75 11                	jne    c000e3dc <findRSDT(unsigned char*)+0x124>
c000e3cb:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e3d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e3d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e3da:	eb 20                	jmp    c000e3fc <findRSDT(unsigned char*)+0x144>
c000e3dc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e3e1:	75 11                	jne    c000e3f4 <findRSDT(unsigned char*)+0x13c>
c000e3e3:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e3ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e3f2:	eb 08                	jmp    c000e3fc <findRSDT(unsigned char*)+0x144>
c000e3f4:	b8 00 00 00 00       	mov    eax,0x0
c000e3f9:	eb 05                	jmp    c000e400 <findRSDT(unsigned char*)+0x148>
c000e3fb:	90                   	nop
c000e3fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e400:	83 c4 50             	add    esp,0x50
c000e403:	5b                   	pop    ebx
c000e404:	5e                   	pop    esi
c000e405:	5f                   	pop    edi
c000e406:	c3                   	ret    
c000e407:	90                   	nop

c000e408 <findDataTable(unsigned char*, char*)>:
c000e408:	83 ec 1c             	sub    esp,0x1c
c000e40b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e410:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e416:	83 e0 04             	and    eax,0x4
c000e419:	84 c0                	test   al,al
c000e41b:	75 07                	jne    c000e424 <findDataTable(unsigned char*, char*)+0x1c>
c000e41d:	b8 00 00 00 00       	mov    eax,0x0
c000e422:	eb 58                	jmp    c000e47c <findDataTable(unsigned char*, char*)+0x74>
c000e424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e42c:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e431:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e435:	7d 3d                	jge    c000e474 <findDataTable(unsigned char*, char*)+0x6c>
c000e437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e43b:	c1 e0 03             	shl    eax,0x3
c000e43e:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e443:	83 ec 04             	sub    esp,0x4
c000e446:	6a 04                	push   0x4
c000e448:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e44c:	50                   	push   eax
c000e44d:	e8 2e 1f ff ff       	call   c0000380 <memcmp>
c000e452:	83 c4 10             	add    esp,0x10
c000e455:	85 c0                	test   eax,eax
c000e457:	0f 94 c0             	sete   al
c000e45a:	84 c0                	test   al,al
c000e45c:	74 0e                	je     c000e46c <findDataTable(unsigned char*, char*)+0x64>
c000e45e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e462:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e469:	eb 11                	jmp    c000e47c <findDataTable(unsigned char*, char*)+0x74>
c000e46b:	90                   	nop
c000e46c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e470:	eb ba                	jmp    c000e42c <findDataTable(unsigned char*, char*)+0x24>
c000e472:	66 90                	xchg   ax,ax
c000e474:	b8 00 00 00 00       	mov    eax,0x0
c000e479:	8d 76 00             	lea    esi,[esi+0x0]
c000e47c:	83 c4 1c             	add    esp,0x1c
c000e47f:	c3                   	ret    

c000e480 <scanMADT()>:
c000e480:	53                   	push   ebx
c000e481:	83 ec 38             	sub    esp,0x38
c000e484:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e489:	25 00 04 00 00       	and    eax,0x400
c000e48e:	74 14                	je     c000e4a4 <scanMADT()+0x24>
c000e490:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e495:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e49b:	83 e2 fb             	and    edx,0xfffffffb
c000e49e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4a4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e4a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e4af:	83 e0 04             	and    eax,0x4
c000e4b2:	84 c0                	test   al,al
c000e4b4:	0f 84 46 04 00 00    	je     c000e900 <scanMADT()+0x480>
c000e4ba:	e8 05 fb ff ff       	call   c000dfc4 <findRSDP()>
c000e4bf:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e4c4:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e4c9:	85 c0                	test   eax,eax
c000e4cb:	75 1b                	jne    c000e4e8 <scanMADT()+0x68>
c000e4cd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e4d2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e4d8:	83 e2 fb             	and    edx,0xfffffffb
c000e4db:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4e1:	e9 22 04 00 00       	jmp    c000e908 <scanMADT()+0x488>
c000e4e6:	66 90                	xchg   ax,ax
c000e4e8:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e4ed:	83 ec 0c             	sub    esp,0xc
c000e4f0:	50                   	push   eax
c000e4f1:	e8 c2 fd ff ff       	call   c000e2b8 <findRSDT(unsigned char*)>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e4fe:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e503:	85 c0                	test   eax,eax
c000e505:	75 19                	jne    c000e520 <scanMADT()+0xa0>
c000e507:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e50c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e512:	83 e2 fb             	and    edx,0xfffffffb
c000e515:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e51b:	e9 e8 03 00 00       	jmp    c000e908 <scanMADT()+0x488>
c000e520:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e525:	83 ec 0c             	sub    esp,0xc
c000e528:	50                   	push   eax
c000e529:	e8 26 fb ff ff       	call   c000e054 <loadACPITables(unsigned char*)>
c000e52e:	83 c4 10             	add    esp,0x10
c000e531:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e536:	83 ec 08             	sub    esp,0x8
c000e539:	68 bc 02 02 c0       	push   0xc00202bc
c000e53e:	50                   	push   eax
c000e53f:	e8 c4 fe ff ff       	call   c000e408 <findDataTable(unsigned char*, char*)>
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e54b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e550:	75 1a                	jne    c000e56c <scanMADT()+0xec>
c000e552:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e557:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e55d:	83 e2 fe             	and    edx,0xfffffffe
c000e560:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e566:	e9 9d 03 00 00       	jmp    c000e908 <scanMADT()+0x488>
c000e56b:	90                   	nop
c000e56c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e574:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e57b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e57f:	0f 87 83 03 00 00    	ja     c000e908 <scanMADT()+0x488>
c000e585:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e58d:	0f 87 75 03 00 00    	ja     c000e908 <scanMADT()+0x488>
c000e593:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e597:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e59f:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5ae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e5b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5c5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e5c9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e5ce:	0f 86 30 03 00 00    	jbe    c000e904 <scanMADT()+0x484>
c000e5d4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e5d9:	75 59                	jne    c000e634 <scanMADT()+0x1b4>
c000e5db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5df:	8d 50 01             	lea    edx,[eax+0x1]
c000e5e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5e6:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e5ec:	0f b6 d2             	movzx  edx,dl
c000e5ef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5f3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5f7:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e5fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e601:	8d 50 01             	lea    edx,[eax+0x1]
c000e604:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e608:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e60e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e611:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e617:	0f b6 d2             	movzx  edx,dl
c000e61a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e61e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e622:	88 82 e0 68 02 c0    	mov    BYTE PTR [edx-0x3ffd9720],al
c000e628:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e62d:	e9 ba 02 00 00       	jmp    c000e8ec <scanMADT()+0x46c>
c000e632:	66 90                	xchg   ax,ax
c000e634:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e639:	0f 85 11 01 00 00    	jne    c000e750 <scanMADT()+0x2d0>
c000e63f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e643:	8d 50 01             	lea    edx,[eax+0x1]
c000e646:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e64a:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e650:	0f b6 d2             	movzx  edx,dl
c000e653:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e657:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e65b:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e661:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e665:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e669:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66d:	01 d0                	add    eax,edx
c000e66f:	83 c0 2c             	add    eax,0x2c
c000e672:	8a 00                	mov    al,BYTE PTR [eax]
c000e674:	0f b6 c0             	movzx  eax,al
c000e677:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e67b:	42                   	inc    edx
c000e67c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e680:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e684:	0f b6 d2             	movzx  edx,dl
c000e687:	c1 e2 08             	shl    edx,0x8
c000e68a:	09 d0                	or     eax,edx
c000e68c:	89 c1                	mov    ecx,eax
c000e68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e692:	83 c0 02             	add    eax,0x2
c000e695:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e699:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e69d:	0f b6 c0             	movzx  eax,al
c000e6a0:	c1 e0 10             	shl    eax,0x10
c000e6a3:	09 c1                	or     ecx,eax
c000e6a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6a9:	83 c0 03             	add    eax,0x3
c000e6ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6b0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6b4:	0f b6 c0             	movzx  eax,al
c000e6b7:	c1 e0 18             	shl    eax,0x18
c000e6ba:	09 c1                	or     ecx,eax
c000e6bc:	89 ca                	mov    edx,ecx
c000e6be:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6c3:	0f b6 c0             	movzx  eax,al
c000e6c6:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e6cd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6da:	01 d0                	add    eax,edx
c000e6dc:	83 c0 2c             	add    eax,0x2c
c000e6df:	8a 00                	mov    al,BYTE PTR [eax]
c000e6e1:	0f b6 c0             	movzx  eax,al
c000e6e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6e8:	42                   	inc    edx
c000e6e9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e6ed:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e6f1:	0f b6 d2             	movzx  edx,dl
c000e6f4:	c1 e2 08             	shl    edx,0x8
c000e6f7:	09 d0                	or     eax,edx
c000e6f9:	89 c1                	mov    ecx,eax
c000e6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ff:	83 c0 02             	add    eax,0x2
c000e702:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e706:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e70a:	0f b6 c0             	movzx  eax,al
c000e70d:	c1 e0 10             	shl    eax,0x10
c000e710:	09 c1                	or     ecx,eax
c000e712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e716:	83 c0 03             	add    eax,0x3
c000e719:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e71d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e721:	0f b6 c0             	movzx  eax,al
c000e724:	c1 e0 18             	shl    eax,0x18
c000e727:	09 c1                	or     ecx,eax
c000e729:	89 ca                	mov    edx,ecx
c000e72b:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e730:	0f b6 c0             	movzx  eax,al
c000e733:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e73a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e73f:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e744:	40                   	inc    eax
c000e745:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e74a:	e9 9d 01 00 00       	jmp    c000e8ec <scanMADT()+0x46c>
c000e74f:	90                   	nop
c000e750:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e755:	0f 85 e5 00 00 00    	jne    c000e840 <scanMADT()+0x3c0>
c000e75b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e75f:	8d 50 01             	lea    edx,[eax+0x1]
c000e762:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e766:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e76a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e76e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e776:	8d 50 01             	lea    edx,[eax+0x1]
c000e779:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e77d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e781:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e785:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e789:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e78d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e791:	01 d0                	add    eax,edx
c000e793:	83 c0 2c             	add    eax,0x2c
c000e796:	8a 00                	mov    al,BYTE PTR [eax]
c000e798:	0f b6 c0             	movzx  eax,al
c000e79b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e79f:	42                   	inc    edx
c000e7a0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e7a4:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e7a8:	0f b6 d2             	movzx  edx,dl
c000e7ab:	c1 e2 08             	shl    edx,0x8
c000e7ae:	09 d0                	or     eax,edx
c000e7b0:	89 c1                	mov    ecx,eax
c000e7b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7b6:	83 c0 02             	add    eax,0x2
c000e7b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7c1:	0f b6 c0             	movzx  eax,al
c000e7c4:	c1 e0 10             	shl    eax,0x10
c000e7c7:	09 c1                	or     ecx,eax
c000e7c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7cd:	83 c0 03             	add    eax,0x3
c000e7d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7d4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7d8:	0f b6 c0             	movzx  eax,al
c000e7db:	c1 e0 18             	shl    eax,0x18
c000e7de:	09 c8                	or     eax,ecx
c000e7e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7e4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e7e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7f1:	01 d0                	add    eax,edx
c000e7f3:	83 c0 2c             	add    eax,0x2c
c000e7f6:	8a 00                	mov    al,BYTE PTR [eax]
c000e7f8:	0f b6 c0             	movzx  eax,al
c000e7fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7ff:	42                   	inc    edx
c000e800:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e804:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e808:	0f b6 d2             	movzx  edx,dl
c000e80b:	c1 e2 08             	shl    edx,0x8
c000e80e:	09 d0                	or     eax,edx
c000e810:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e815:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e81a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000e81f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e823:	88 90 60 19 02 c0    	mov    BYTE PTR [eax-0x3ffde6a0],dl
c000e829:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000e82e:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000e833:	66 89 94 00 60 67 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd98a0],dx
c000e83b:	e9 ac 00 00 00       	jmp    c000e8ec <scanMADT()+0x46c>
c000e840:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e845:	0f 85 95 00 00 00    	jne    c000e8e0 <scanMADT()+0x460>
c000e84b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e84f:	8d 50 01             	lea    edx,[eax+0x1]
c000e852:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e856:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e85a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e85e:	0f b6 c0             	movzx  eax,al
c000e861:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e865:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e869:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e86d:	01 d0                	add    eax,edx
c000e86f:	83 c0 2c             	add    eax,0x2c
c000e872:	8a 00                	mov    al,BYTE PTR [eax]
c000e874:	0f b6 c0             	movzx  eax,al
c000e877:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e87b:	42                   	inc    edx
c000e87c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e880:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e884:	0f b6 d2             	movzx  edx,dl
c000e887:	c1 e2 08             	shl    edx,0x8
c000e88a:	09 d0                	or     eax,edx
c000e88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e890:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e895:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e899:	8d 50 01             	lea    edx,[eax+0x1]
c000e89c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e8a4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e8a8:	0f b6 c0             	movzx  eax,al
c000e8ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b3:	c1 e0 08             	shl    eax,0x8
c000e8b6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e8ba:	89 c1                	mov    ecx,eax
c000e8bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c0:	c1 e0 18             	shl    eax,0x18
c000e8c3:	89 c3                	mov    ebx,eax
c000e8c5:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e8ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e8cd:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e8d3:	09 d9                	or     ecx,ebx
c000e8d5:	89 ca                	mov    edx,ecx
c000e8d7:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e8de:	eb 0c                	jmp    c000e8ec <scanMADT()+0x46c>
c000e8e0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e8e5:	75 05                	jne    c000e8ec <scanMADT()+0x46c>
c000e8e7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e8ec:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e8f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e8f5:	01 d0                	add    eax,edx
c000e8f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8fb:	e9 74 fc ff ff       	jmp    c000e574 <scanMADT()+0xf4>
c000e900:	90                   	nop
c000e901:	eb 05                	jmp    c000e908 <scanMADT()+0x488>
c000e903:	90                   	nop
c000e904:	90                   	nop
c000e905:	8d 76 00             	lea    esi,[esi+0x0]
c000e908:	83 c4 38             	add    esp,0x38
c000e90b:	5b                   	pop    ebx
c000e90c:	c3                   	ret    
c000e90d:	90                   	nop
c000e90e:	66 90                	xchg   ax,ax

c000e910 <ACPI::ACPI()>:
c000e910:	83 ec 0c             	sub    esp,0xc
c000e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e917:	83 ec 08             	sub    esp,0x8
c000e91a:	68 c1 02 02 c0       	push   0xc00202c1
c000e91f:	50                   	push   eax
c000e920:	e8 2b d3 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	ba f8 03 02 c0       	mov    edx,0xc00203f8
c000e92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e931:	89 10                	mov    DWORD PTR [eax],edx
c000e933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e937:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e942:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e950:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e95a:	e8 21 fb ff ff       	call   c000e480 <scanMADT()>
c000e95f:	90                   	nop
c000e960:	83 c4 0c             	add    esp,0xc
c000e963:	c3                   	ret    

c000e964 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e964:	83 ec 2c             	sub    esp,0x2c
c000e967:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e96b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e96f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e973:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e977:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e97c:	88 d0                	mov    al,dl
c000e97e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e982:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e987:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e98f:	90                   	nop
c000e990:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e994:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e99a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e99e:	0f 8d a0 00 00 00    	jge    c000ea44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe0>
c000e9a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9ac:	83 c2 28             	add    edx,0x28
c000e9af:	66 8b 44 d0 1c       	mov    ax,WORD PTR [eax+edx*8+0x1c]
c000e9b4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e9b9:	75 7d                	jne    c000ea38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd4>
c000e9bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9c3:	83 c2 28             	add    edx,0x28
c000e9c6:	8a 44 d0 1e          	mov    al,BYTE PTR [eax+edx*8+0x1e]
c000e9ca:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e9ce:	75 68                	jne    c000ea38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd4>
c000e9d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e9d5:	74 3d                	je     c000ea14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000e9d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9df:	83 c2 28             	add    edx,0x28
c000e9e2:	8b 54 d0 20          	mov    edx,DWORD PTR [eax+edx*8+0x20]
c000e9e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9ed:	39 c2                	cmp    edx,eax
c000e9ef:	74 13                	je     c000ea04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa0>
c000e9f1:	83 ec 0c             	sub    esp,0xc
c000e9f4:	68 3c 02 02 c0       	push   0xc002023c
c000e9f9:	e8 bf 1a 00 00       	call   c00104bd <KePanic(char const*)>
c000e9fe:	83 c4 10             	add    esp,0x10
c000ea01:	8d 76 00             	lea    esi,[esi+0x0]
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	68 c6 02 02 c0       	push   0xc00202c6
c000ea0c:	e8 ac 1a 00 00       	call   c00104bd <KePanic(char const*)>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea20:	83 c2 28             	add    edx,0x28
c000ea23:	8d 54 d0 1c          	lea    edx,[eax+edx*8+0x1c]
c000ea27:	8b 02                	mov    eax,DWORD PTR [edx]
c000ea29:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ea2c:	89 01                	mov    DWORD PTR [ecx],eax
c000ea2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ea31:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea36:	66 90                	xchg   ax,ax
c000ea38:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ea3c:	e9 4f ff ff ff       	jmp    c000e990 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ea41:	8d 76 00             	lea    esi,[esi+0x0]
c000ea44:	90                   	nop
c000ea45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea49:	83 c4 2c             	add    esp,0x2c
c000ea4c:	c2 04 00             	ret    0x4
c000ea4f:	90                   	nop

c000ea50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ea50:	83 ec 1c             	sub    esp,0x1c
c000ea53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea57:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ea5b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea5f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ea64:	88 c8                	mov    al,cl
c000ea66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea6a:	88 d0                	mov    al,dl
c000ea6c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ea70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea74:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7e:	83 c2 28             	add    edx,0x28
c000ea81:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ea85:	88 4c d0 1f          	mov    BYTE PTR [eax+edx*8+0x1f],cl
c000ea89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea8d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea97:	83 c2 28             	add    edx,0x28
c000ea9a:	66 8b 4c 24 0c       	mov    cx,WORD PTR [esp+0xc]
c000ea9f:	66 89 4c d0 1c       	mov    WORD PTR [eax+edx*8+0x1c],cx
c000eaa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaa8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eaae:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eab2:	8d 48 01             	lea    ecx,[eax+0x1]
c000eab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eab9:	83 c2 28             	add    edx,0x28
c000eabc:	88 4c d0 1e          	mov    BYTE PTR [eax+edx*8+0x1e],cl
c000eac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eac4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eaca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eace:	83 c2 28             	add    edx,0x28
c000ead1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ead5:	89 4c d0 20          	mov    DWORD PTR [eax+edx*8+0x20],ecx
c000ead9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eadd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eae3:	8d 50 01             	lea    edx,[eax+0x1]
c000eae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaea:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eaf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaf4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eafa:	3d 00 02 00 00       	cmp    eax,0x200
c000eaff:	75 13                	jne    c000eb14 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eb01:	83 ec 0c             	sub    esp,0xc
c000eb04:	68 d5 02 02 c0       	push   0xc00202d5
c000eb09:	e8 af 19 00 00       	call   c00104bd <KePanic(char const*)>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	90                   	nop
c000eb15:	83 c4 1c             	add    esp,0x1c
c000eb18:	c3                   	ret    
c000eb19:	90                   	nop
c000eb1a:	66 90                	xchg   ax,ax

c000eb1c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eb1c:	b8 00 00 00 00       	mov    eax,0x0
c000eb21:	c3                   	ret    
c000eb22:	66 90                	xchg   ax,ax

c000eb24 <ACPI::detectPCI()>:
c000eb24:	53                   	push   ebx
c000eb25:	83 ec 28             	sub    esp,0x28
c000eb28:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eb2d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eb32:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eb37:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb3d:	83 e0 04             	and    eax,0x4
c000eb40:	84 c0                	test   al,al
c000eb42:	74 2c                	je     c000eb70 <ACPI::detectPCI()+0x4c>
c000eb44:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eb49:	83 ec 08             	sub    esp,0x8
c000eb4c:	68 f2 02 02 c0       	push   0xc00202f2
c000eb51:	50                   	push   eax
c000eb52:	e8 b1 f8 ff ff       	call   c000e408 <findDataTable(unsigned char*, char*)>
c000eb57:	83 c4 10             	add    esp,0x10
c000eb5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb5e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb63:	74 0b                	je     c000eb70 <ACPI::detectPCI()+0x4c>
c000eb65:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb6a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb6f:	90                   	nop
c000eb70:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eb78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb7c:	8a 00                	mov    al,BYTE PTR [eax]
c000eb7e:	3c 01                	cmp    al,0x1
c000eb80:	75 0e                	jne    c000eb90 <ACPI::detectPCI()+0x6c>
c000eb82:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb87:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb8c:	eb 2a                	jmp    c000ebb8 <ACPI::detectPCI()+0x94>
c000eb8e:	66 90                	xchg   ax,ax
c000eb90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb94:	8a 00                	mov    al,BYTE PTR [eax]
c000eb96:	3c 02                	cmp    al,0x2
c000eb98:	75 1e                	jne    c000ebb8 <ACPI::detectPCI()+0x94>
c000eb9a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb9f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eba4:	74 12                	je     c000ebb8 <ACPI::detectPCI()+0x94>
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	68 6c 02 02 c0       	push   0xc002026c
c000ebae:	e8 0a 19 00 00       	call   c00104bd <KePanic(char const*)>
c000ebb3:	83 c4 10             	add    esp,0x10
c000ebb6:	66 90                	xchg   ax,ax
c000ebb8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ebbc:	83 f0 01             	xor    eax,0x1
c000ebbf:	84 c0                	test   al,al
c000ebc1:	74 41                	je     c000ec04 <ACPI::detectPCI()+0xe0>
c000ebc3:	e8 68 15 ff ff       	call   c0000130 <manualPCIProbe>
c000ebc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ebcc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ebd1:	75 0d                	jne    c000ebe0 <ACPI::detectPCI()+0xbc>
c000ebd3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ebd8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ebdd:	eb 25                	jmp    c000ec04 <ACPI::detectPCI()+0xe0>
c000ebdf:	90                   	nop
c000ebe0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ebe5:	75 1d                	jne    c000ec04 <ACPI::detectPCI()+0xe0>
c000ebe7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ebec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebf1:	74 11                	je     c000ec04 <ACPI::detectPCI()+0xe0>
c000ebf3:	83 ec 0c             	sub    esp,0xc
c000ebf6:	68 6c 02 02 c0       	push   0xc002026c
c000ebfb:	e8 bd 18 00 00       	call   c00104bd <KePanic(char const*)>
c000ec00:	83 c4 10             	add    esp,0x10
c000ec03:	90                   	nop
c000ec04:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ec09:	0f 84 85 00 00 00    	je     c000ec94 <ACPI::detectPCI()+0x170>
c000ec0f:	83 ec 0c             	sub    esp,0xc
c000ec12:	68 f7 02 02 c0       	push   0xc00202f7
c000ec17:	e8 fd 11 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000ec1c:	83 c4 10             	add    esp,0x10
c000ec1f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ec27:	83 ec 0c             	sub    esp,0xc
c000ec2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec2e:	e8 48 8c ff ff       	call   c000787b <malloc>
c000ec33:	83 c4 10             	add    esp,0x10
c000ec36:	89 c3                	mov    ebx,eax
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	53                   	push   ebx
c000ec3c:	e8 53 ae 00 00       	call   c0019a94 <PCI::PCI()>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ec48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec4c:	83 ec 08             	sub    esp,0x8
c000ec4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec53:	50                   	push   eax
c000ec54:	e8 5f ce ff ff       	call   c000bab8 <Device::addChild(Device*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec60:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec62:	83 c0 08             	add    eax,0x8
c000ec65:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec67:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ec6c:	74 0a                	je     c000ec78 <ACPI::detectPCI()+0x154>
c000ec6e:	ba 01 00 00 00       	mov    edx,0x1
c000ec73:	eb 0b                	jmp    c000ec80 <ACPI::detectPCI()+0x15c>
c000ec75:	8d 76 00             	lea    esi,[esi+0x0]
c000ec78:	ba 02 00 00 00       	mov    edx,0x2
c000ec7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec80:	6a 00                	push   0x0
c000ec82:	6a 00                	push   0x0
c000ec84:	52                   	push   edx
c000ec85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec89:	ff d0                	call   eax
c000ec8b:	83 c4 10             	add    esp,0x10
c000ec8e:	e9 91 00 00 00       	jmp    c000ed24 <ACPI::detectPCI()+0x200>
c000ec93:	90                   	nop
c000ec94:	83 ec 0c             	sub    esp,0xc
c000ec97:	68 0f 03 02 c0       	push   0xc002030f
c000ec9c:	e8 78 11 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000eca1:	83 c4 10             	add    esp,0x10
c000eca4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ecab:	83 ec 0c             	sub    esp,0xc
c000ecae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ecb2:	e8 c4 8b ff ff       	call   c000787b <malloc>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	89 c3                	mov    ebx,eax
c000ecbc:	83 ec 0c             	sub    esp,0xc
c000ecbf:	53                   	push   ebx
c000ecc0:	e8 49 b9 00 00       	call   c001a60e <IDE::IDE()>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd0:	83 ec 08             	sub    esp,0x8
c000ecd3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecd7:	50                   	push   eax
c000ecd8:	e8 db cd ff ff       	call   c000bab8 <Device::addChild(Device*)>
c000ecdd:	83 c4 10             	add    esp,0x10
c000ece0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ece4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ecee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecf2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ecfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ed08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed0e:	83 c0 08             	add    eax,0x8
c000ed11:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed13:	6a 00                	push   0x0
c000ed15:	6a 00                	push   0x0
c000ed17:	6a 00                	push   0x0
c000ed19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ed1d:	ff d0                	call   eax
c000ed1f:	83 c4 10             	add    esp,0x10
c000ed22:	66 90                	xchg   ax,ax
c000ed24:	90                   	nop
c000ed25:	83 c4 28             	add    esp,0x28
c000ed28:	5b                   	pop    ebx
c000ed29:	c3                   	ret    
c000ed2a:	66 90                	xchg   ax,ax

c000ed2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ed2c:	83 ec 1c             	sub    esp,0x1c
c000ed2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed36:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ed3a:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ed40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ed45:	83 ec 08             	sub    esp,0x8
c000ed48:	50                   	push   eax
c000ed49:	52                   	push   edx
c000ed4a:	e8 23 82 ff ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ed56:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ed5c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ed61:	83 ec 04             	sub    esp,0x4
c000ed64:	6a 01                	push   0x1
c000ed66:	50                   	push   eax
c000ed67:	52                   	push   edx
c000ed68:	e8 17 83 ff ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	90                   	nop
c000ed71:	83 c4 1c             	add    esp,0x1c
c000ed74:	c3                   	ret    
c000ed75:	90                   	nop
c000ed76:	66 90                	xchg   ax,ax

c000ed78 <ACPI::sleep()>:
c000ed78:	83 ec 0c             	sub    esp,0xc
c000ed7b:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed80:	85 c0                	test   eax,eax
c000ed82:	74 08                	je     c000ed8c <ACPI::sleep()+0x14>
c000ed84:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed89:	ff d0                	call   eax
c000ed8b:	90                   	nop
c000ed8c:	90                   	nop
c000ed8d:	83 c4 0c             	add    esp,0xc
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop
c000ed92:	66 90                	xchg   ax,ax

c000ed94 <ACPI::open(int, int, void*)>:
c000ed94:	53                   	push   ebx
c000ed95:	81 ec 78 01 00 00    	sub    esp,0x178
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eda5:	e8 7a fd ff ff       	call   c000eb24 <ACPI::detectPCI()>
c000edaa:	83 c4 10             	add    esp,0x10
c000edad:	83 ec 0c             	sub    esp,0xc
c000edb0:	68 94 02 02 c0       	push   0xc0020294
c000edb5:	e8 5f 10 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000edba:	83 c4 10             	add    esp,0x10
c000edbd:	83 ec 0c             	sub    esp,0xc
c000edc0:	68 24 03 02 c0       	push   0xc0020324
c000edc5:	e8 61 4a 00 00       	call   c001382b <Thr::loadKernelSymbolTable(char const*)>
c000edca:	83 c4 10             	add    esp,0x10
c000edcd:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000edd5:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ede0:	83 ec 0c             	sub    esp,0xc
c000ede3:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000edea:	e8 8c 8a ff ff       	call   c000787b <malloc>
c000edef:	83 c4 10             	add    esp,0x10
c000edf2:	89 c3                	mov    ebx,eax
c000edf4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000edf9:	83 ec 04             	sub    esp,0x4
c000edfc:	50                   	push   eax
c000edfd:	68 42 03 02 c0       	push   0xc0020342
c000ee02:	53                   	push   ebx
c000ee03:	e8 ca bd ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ee12:	83 ec 08             	sub    esp,0x8
c000ee15:	6a 01                	push   0x1
c000ee17:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee1e:	e8 69 be ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c000ee23:	83 c4 10             	add    esp,0x10
c000ee26:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ee2d:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ee35:	75 15                	jne    c000ee4c <ACPI::open(int, int, void*)+0xb8>
c000ee37:	83 ec 0c             	sub    esp,0xc
c000ee3a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee41:	e8 a4 be ff ff       	call   c000acea <File::close()>
c000ee46:	83 c4 10             	add    esp,0x10
c000ee49:	eb 09                	jmp    c000ee54 <ACPI::open(int, int, void*)+0xc0>
c000ee4b:	90                   	nop
c000ee4c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ee54:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ee5c:	74 1e                	je     c000ee7c <ACPI::open(int, int, void*)+0xe8>
c000ee5e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ee65:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee67:	83 c0 08             	add    eax,0x8
c000ee6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee6c:	83 ec 0c             	sub    esp,0xc
c000ee6f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee76:	ff d0                	call   eax
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	90                   	nop
c000ee7c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee83:	83 f0 01             	xor    eax,0x1
c000ee86:	84 c0                	test   al,al
c000ee88:	74 42                	je     c000eecc <ACPI::open(int, int, void*)+0x138>
c000ee8a:	83 ec 0c             	sub    esp,0xc
c000ee8d:	68 60 03 02 c0       	push   0xc0020360
c000ee92:	e8 82 0f 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000ee97:	83 c4 10             	add    esp,0x10
c000ee9a:	83 ec 04             	sub    esp,0x4
c000ee9d:	6a 0c                	push   0xc
c000ee9f:	68 7b 03 02 c0       	push   0xc002037b
c000eea4:	68 8c 03 02 c0       	push   0xc002038c
c000eea9:	e8 db 3c 00 00       	call   c0012b89 <Reg::readIntWithDefault(char*, char*, int)>
c000eeae:	83 c4 10             	add    esp,0x10
c000eeb1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eec2:	e8 0c a7 ff ff       	call   c00095d3 <Virt::setupPageSwapping(int)>
c000eec7:	83 c4 10             	add    esp,0x10
c000eeca:	66 90                	xchg   ax,ax
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	68 b5 f3 01 c0       	push   0xc001f3b5
c000eed4:	e8 40 0f 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000eed9:	83 c4 10             	add    esp,0x10
c000eedc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eee3:	83 ec 08             	sub    esp,0x8
c000eee6:	6a 13                	push   0x13
c000eee8:	50                   	push   eax
c000eee9:	e8 e2 ce ff ff       	call   c000bdd0 <getDevicesOfType(DeviceType)>
c000eeee:	83 c4 0c             	add    esp,0xc
c000eef1:	8d 76 00             	lea    esi,[esi+0x0]
c000eef4:	83 ec 0c             	sub    esp,0xc
c000eef7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eefe:	50                   	push   eax
c000eeff:	e8 98 f8 00 00       	call   c001e79c <LinkedList<Device>::isEmpty()>
c000ef04:	83 c4 10             	add    esp,0x10
c000ef07:	83 f0 01             	xor    eax,0x1
c000ef0a:	84 c0                	test   al,al
c000ef0c:	0f 84 92 01 00 00    	je     c000f0a4 <ACPI::open(int, int, void*)+0x310>
c000ef12:	83 ec 0c             	sub    esp,0xc
c000ef15:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef1c:	50                   	push   eax
c000ef1d:	e8 96 f8 00 00       	call   c001e7b8 <LinkedList<Device>::getFirstElement()>
c000ef22:	83 c4 10             	add    esp,0x10
c000ef25:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ef2c:	83 ec 0c             	sub    esp,0xc
c000ef2f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef36:	50                   	push   eax
c000ef37:	e8 84 f8 00 00       	call   c001e7c0 <LinkedList<Device>::removeFirst()>
c000ef3c:	83 c4 10             	add    esp,0x10
c000ef3f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ef46:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ef4d:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c000ef54:	8b 90 18 01 00 00    	mov    edx,DWORD PTR [eax+0x118]
c000ef5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef5e:	8b 90 1c 01 00 00    	mov    edx,DWORD PTR [eax+0x11c]
c000ef64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ef68:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c000ef6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ef72:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
c000ef78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ef7c:	8b 90 28 01 00 00    	mov    edx,DWORD PTR [eax+0x128]
c000ef82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef86:	8b 90 2c 01 00 00    	mov    edx,DWORD PTR [eax+0x12c]
c000ef8c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ef90:	8b 90 30 01 00 00    	mov    edx,DWORD PTR [eax+0x130]
c000ef96:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ef9a:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c000efa0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efa4:	8b 80 38 01 00 00    	mov    eax,DWORD PTR [eax+0x138]
c000efaa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000efae:	83 ec 08             	sub    esp,0x8
c000efb1:	8d 44 24 38          	lea    eax,[esp+0x38]
c000efb5:	50                   	push   eax
c000efb6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efbe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efc2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efc6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efd2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efd6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000efda:	e8 9b af 00 00       	call   c0019f7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000efdf:	83 c4 30             	add    esp,0x30
c000efe2:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000efe9:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000eff1:	0f 84 fd fe ff ff    	je     c000eef4 <ACPI::open(int, int, void*)+0x160>
c000eff7:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f00c:	e8 6a 88 ff ff       	call   c000787b <malloc>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	89 c3                	mov    ebx,eax
c000f016:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f01b:	83 ec 04             	sub    esp,0x4
c000f01e:	50                   	push   eax
c000f01f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f026:	53                   	push   ebx
c000f027:	e8 a6 bb ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000f02c:	83 c4 10             	add    esp,0x10
c000f02f:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f040:	e8 b5 be ff ff       	call   c000aefa <File::exists()>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	84 c0                	test   al,al
c000f04a:	74 28                	je     c000f074 <ACPI::open(int, int, void*)+0x2e0>
c000f04c:	83 ec 08             	sub    esp,0x8
c000f04f:	6a 01                	push   0x1
c000f051:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f058:	e8 40 52 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	83 ec 08             	sub    esp,0x8
c000f063:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f06a:	50                   	push   eax
c000f06b:	e8 6d 54 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000f070:	83 c4 10             	add    esp,0x10
c000f073:	90                   	nop
c000f074:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f07c:	0f 84 72 fe ff ff    	je     c000eef4 <ACPI::open(int, int, void*)+0x160>
c000f082:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f089:	8b 00                	mov    eax,DWORD PTR [eax]
c000f08b:	83 c0 08             	add    eax,0x8
c000f08e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f090:	83 ec 0c             	sub    esp,0xc
c000f093:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f09a:	ff d0                	call   eax
c000f09c:	83 c4 10             	add    esp,0x10
c000f09f:	e9 50 fe ff ff       	jmp    c000eef4 <ACPI::open(int, int, void*)+0x160>
c000f0a4:	83 ec 0c             	sub    esp,0xc
c000f0a7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f0ae:	50                   	push   eax
c000f0af:	e8 e4 f6 00 00       	call   c001e798 <LinkedList<Device>::~LinkedList()>
c000f0b4:	83 c4 10             	add    esp,0x10
c000f0b7:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000f0bd:	83 ec 08             	sub    esp,0x8
c000f0c0:	6a 01                	push   0x1
c000f0c2:	68 93 03 02 c0       	push   0xc0020393
c000f0c7:	e8 d1 51 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000f0cc:	83 c4 10             	add    esp,0x10
c000f0cf:	83 ec 08             	sub    esp,0x8
c000f0d2:	53                   	push   ebx
c000f0d3:	50                   	push   eax
c000f0d4:	e8 04 54 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000f0d9:	83 c4 10             	add    esp,0x10
c000f0dc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f0e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0e7:	83 e0 04             	and    eax,0x4
c000f0ea:	84 c0                	test   al,al
c000f0ec:	0f 84 16 01 00 00    	je     c000f208 <ACPI::open(int, int, void*)+0x474>
c000f0f2:	83 ec 0c             	sub    esp,0xc
c000f0f5:	68 b0 03 02 c0       	push   0xc00203b0
c000f0fa:	e8 1a 0d 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000f0ff:	83 c4 10             	add    esp,0x10
c000f102:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f10d:	83 ec 0c             	sub    esp,0xc
c000f110:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f117:	e8 5f 87 ff ff       	call   c000787b <malloc>
c000f11c:	83 c4 10             	add    esp,0x10
c000f11f:	89 c3                	mov    ebx,eax
c000f121:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f126:	83 ec 04             	sub    esp,0x4
c000f129:	50                   	push   eax
c000f12a:	68 cd 03 02 c0       	push   0xc00203cd
c000f12f:	53                   	push   ebx
c000f130:	e8 9d ba ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f13f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f147:	74 1b                	je     c000f164 <ACPI::open(int, int, void*)+0x3d0>
c000f149:	83 ec 0c             	sub    esp,0xc
c000f14c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f153:	e8 a2 bd ff ff       	call   c000aefa <File::exists()>
c000f158:	83 c4 10             	add    esp,0x10
c000f15b:	84 c0                	test   al,al
c000f15d:	74 05                	je     c000f164 <ACPI::open(int, int, void*)+0x3d0>
c000f15f:	b0 01                	mov    al,0x1
c000f161:	eb 05                	jmp    c000f168 <ACPI::open(int, int, void*)+0x3d4>
c000f163:	90                   	nop
c000f164:	b0 00                	mov    al,0x0
c000f166:	66 90                	xchg   ax,ax
c000f168:	84 c0                	test   al,al
c000f16a:	74 28                	je     c000f194 <ACPI::open(int, int, void*)+0x400>
c000f16c:	83 ec 08             	sub    esp,0x8
c000f16f:	6a 01                	push   0x1
c000f171:	68 cd 03 02 c0       	push   0xc00203cd
c000f176:	e8 22 51 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	83 ec 08             	sub    esp,0x8
c000f181:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f188:	50                   	push   eax
c000f189:	e8 4f 53 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c000f18e:	83 c4 10             	add    esp,0x10
c000f191:	8d 76 00             	lea    esi,[esi+0x0]
c000f194:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f19c:	74 2a                	je     c000f1c8 <ACPI::open(int, int, void*)+0x434>
c000f19e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f1a6:	74 20                	je     c000f1c8 <ACPI::open(int, int, void*)+0x434>
c000f1a8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f1af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b1:	83 c0 08             	add    eax,0x8
c000f1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b6:	83 ec 0c             	sub    esp,0xc
c000f1b9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f1c0:	ff d0                	call   eax
c000f1c2:	83 c4 10             	add    esp,0x10
c000f1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1c8:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f1cd:	83 ec 08             	sub    esp,0x8
c000f1d0:	68 ea 03 02 c0       	push   0xc00203ea
c000f1d5:	50                   	push   eax
c000f1d6:	e8 2d f2 ff ff       	call   c000e408 <findDataTable(unsigned char*, char*)>
c000f1db:	83 c4 10             	add    esp,0x10
c000f1de:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f1e5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f1ed:	74 19                	je     c000f208 <ACPI::open(int, int, void*)+0x474>
c000f1ef:	83 ec 08             	sub    esp,0x8
c000f1f2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1f9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f200:	e8 27 fb ff ff       	call   c000ed2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f205:	83 c4 10             	add    esp,0x10
c000f208:	b8 00 00 00 00       	mov    eax,0x0
c000f20d:	81 c4 78 01 00 00    	add    esp,0x178
c000f213:	5b                   	pop    ebx
c000f214:	c3                   	ret    
c000f215:	90                   	nop

c000f216 <CPU::close(int, int, void*)>:
c000f216:	31 c0                	xor    eax,eax
c000f218:	c3                   	ret    
c000f219:	90                   	nop

c000f21a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f21a:	60                   	pusha  
c000f21b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f21f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f223:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f227:	9c                   	pushf  
c000f228:	fa                   	cli    
c000f229:	0f 09                	wbinvd 
c000f22b:	0f 30                	wrmsr  
c000f22d:	9d                   	popf   
c000f22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f232:	89 02                	mov    DWORD PTR [edx],eax
c000f234:	61                   	popa   
c000f235:	c3                   	ret    

c000f236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f236:	60                   	pusha  
c000f237:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f23b:	9c                   	pushf  
c000f23c:	fa                   	cli    
c000f23d:	0f 09                	wbinvd 
c000f23f:	31 c0                	xor    eax,eax
c000f241:	31 d2                	xor    edx,edx
c000f243:	0f 32                	rdmsr  
c000f245:	9d                   	popf   
c000f246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f24a:	89 02                	mov    DWORD PTR [edx],eax
c000f24c:	61                   	popa   
c000f24d:	c3                   	ret    

c000f24e <CPU::AMD_K6_writeback(int, int, int)>:
c000f24e:	56                   	push   esi
c000f24f:	53                   	push   ebx
c000f250:	83 ec 10             	sub    esp,0x10
c000f253:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f25c:	75 5d                	jne    c000f2bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f25e:	83 f8 08             	cmp    eax,0x8
c000f261:	75 09                	jne    c000f26c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f263:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f268:	7e 13                	jle    c000f27d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f26a:	eb 30                	jmp    c000f29c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f26c:	83 f8 06             	cmp    eax,0x6
c000f26f:	7c 4a                	jl     c000f2bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f271:	83 f8 07             	cmp    eax,0x7
c000f274:	7e 07                	jle    c000f27d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f276:	83 f8 09             	cmp    eax,0x9
c000f279:	74 21                	je     c000f29c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f27b:	eb 3e                	jmp    c000f2bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f27d:	89 e6                	mov    esi,esp
c000f27f:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f285:	56                   	push   esi
c000f286:	68 82 00 00 c0       	push   0xc0000082
c000f28b:	c1 eb 15             	shr    ebx,0x15
c000f28e:	83 e3 7e             	and    ebx,0x7e
c000f291:	e8 a0 ff ff ff       	call   c000f236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f296:	56                   	push   esi
c000f297:	6a 00                	push   0x0
c000f299:	53                   	push   ebx
c000f29a:	eb 12                	jmp    c000f2ae <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f29c:	89 e3                	mov    ebx,esp
c000f29e:	53                   	push   ebx
c000f29f:	68 82 00 00 c0       	push   0xc0000082
c000f2a4:	e8 8d ff ff ff       	call   c000f236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f2a9:	53                   	push   ebx
c000f2aa:	6a 00                	push   0x0
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 00 00 c0       	push   0xc0000082
c000f2b3:	e8 62 ff ff ff       	call   c000f21a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f2b8:	83 c4 18             	add    esp,0x18
c000f2bb:	83 c4 10             	add    esp,0x10
c000f2be:	5b                   	pop    ebx
c000f2bf:	5e                   	pop    esi
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f2c2:	55                   	push   ebp
c000f2c3:	57                   	push   edi
c000f2c4:	56                   	push   esi
c000f2c5:	53                   	push   ebx
c000f2c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f2ca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f2ce:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f2d6:	39 05 70 19 02 c0    	cmp    DWORD PTR ds:0xc0021970,eax
c000f2dc:	75 23                	jne    c000f301 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f2de:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f2e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f2e7:	89 06                	mov    DWORD PTR [esi],eax
c000f2e9:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f2ee:	89 07                	mov    DWORD PTR [edi],eax
c000f2f0:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f2f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f2f8:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f2fd:	89 02                	mov    DWORD PTR [edx],eax
c000f2ff:	eb 3f                	jmp    c000f340 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f301:	31 c9                	xor    ecx,ecx
c000f303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f307:	0f a2                	cpuid  
c000f309:	89 06                	mov    DWORD PTR [esi],eax
c000f30b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f30f:	89 1f                	mov    DWORD PTR [edi],ebx
c000f311:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f314:	89 10                	mov    DWORD PTR [eax],edx
c000f316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f31a:	a3 70 19 02 c0       	mov    ds:0xc0021970,eax
c000f31f:	8b 06                	mov    eax,DWORD PTR [esi]
c000f321:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f326:	8b 07                	mov    eax,DWORD PTR [edi]
c000f328:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f32d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f330:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f335:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f339:	8b 00                	mov    eax,DWORD PTR [eax]
c000f33b:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f340:	5b                   	pop    ebx
c000f341:	5e                   	pop    esi
c000f342:	5f                   	pop    edi
c000f343:	5d                   	pop    ebp
c000f344:	c3                   	ret    
c000f345:	90                   	nop

c000f346 <CPU::cpuidCheckEDX(unsigned int)>:
c000f346:	83 ec 10             	sub    esp,0x10
c000f349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f34d:	50                   	push   eax
c000f34e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f352:	50                   	push   eax
c000f353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f357:	50                   	push   eax
c000f358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35c:	50                   	push   eax
c000f35d:	6a 01                	push   0x1
c000f35f:	e8 5e ff ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f368:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f36c:	0f 95 c0             	setne  al
c000f36f:	83 c4 24             	add    esp,0x24
c000f372:	c3                   	ret    
c000f373:	90                   	nop

c000f374 <CPU::cpuidCheckECX(unsigned int)>:
c000f374:	83 ec 10             	sub    esp,0x10
c000f377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f37b:	50                   	push   eax
c000f37c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f380:	50                   	push   eax
c000f381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f385:	50                   	push   eax
c000f386:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f38a:	50                   	push   eax
c000f38b:	6a 01                	push   0x1
c000f38d:	e8 30 ff ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f396:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f39a:	0f 95 c0             	setne  al
c000f39d:	83 c4 24             	add    esp,0x24
c000f3a0:	c3                   	ret    
c000f3a1:	90                   	nop

c000f3a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f3a2:	83 ec 10             	sub    esp,0x10
c000f3a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3a9:	50                   	push   eax
c000f3aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3ae:	50                   	push   eax
c000f3af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3b3:	50                   	push   eax
c000f3b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3b8:	50                   	push   eax
c000f3b9:	6a 07                	push   0x7
c000f3bb:	e8 02 ff ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f3c8:	0f 95 c0             	setne  al
c000f3cb:	83 c4 24             	add    esp,0x24
c000f3ce:	c3                   	ret    
c000f3cf:	90                   	nop

c000f3d0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f3d0:	83 ec 10             	sub    esp,0x10
c000f3d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3d7:	50                   	push   eax
c000f3d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3dc:	50                   	push   eax
c000f3dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3e1:	50                   	push   eax
c000f3e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3e6:	50                   	push   eax
c000f3e7:	6a 07                	push   0x7
c000f3e9:	e8 d4 fe ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f3f6:	0f 95 c0             	setne  al
c000f3f9:	83 c4 24             	add    esp,0x24
c000f3fc:	c3                   	ret    
c000f3fd:	90                   	nop

c000f3fe <CPU::CPU()>:
c000f3fe:	83 ec 0c             	sub    esp,0xc
c000f401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f405:	83 ec 08             	sub    esp,0x8
c000f408:	68 0d 05 02 c0       	push   0xc002050d
c000f40d:	50                   	push   eax
c000f40e:	e8 3d c8 ff ff       	call   c000bc50 <Device::Device(char const*)>
c000f413:	83 c4 10             	add    esp,0x10
c000f416:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000f41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f41f:	89 10                	mov    DWORD PTR [eax],edx
c000f421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f425:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f433:	05 78 01 00 00       	add    eax,0x178
c000f438:	83 ec 0c             	sub    esp,0xc
c000f43b:	50                   	push   eax
c000f43c:	e8 05 7d ff ff       	call   c0007146 <GDT::GDT()>
c000f441:	83 c4 10             	add    esp,0x10
c000f444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f448:	05 7c 09 00 00       	add    eax,0x97c
c000f44d:	83 ec 0c             	sub    esp,0xc
c000f450:	50                   	push   eax
c000f451:	e8 2a 7f ff ff       	call   c0007380 <IDT::IDT()>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f45d:	05 7c 11 00 00       	add    eax,0x117c
c000f462:	83 ec 0c             	sub    esp,0xc
c000f465:	50                   	push   eax
c000f466:	e8 95 98 ff ff       	call   c0008d00 <TSS::TSS()>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f472:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f47d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f487:	90                   	nop
c000f488:	83 c4 0c             	add    esp,0xc
c000f48b:	c3                   	ret    

c000f48c <CPU::displayFeatures()>:
c000f48c:	c3                   	ret    
c000f48d:	90                   	nop

c000f48e <CPU::detectFeatures()>:
c000f48e:	55                   	push   ebp
c000f48f:	57                   	push   edi
c000f490:	56                   	push   esi
c000f491:	53                   	push   ebx
c000f492:	83 ec 20             	sub    esp,0x20
c000f495:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f499:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f4a3:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f4a9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f4b0:	6a 0d                	push   0xd
c000f4b2:	6a 00                	push   0x0
c000f4b4:	55                   	push   ebp
c000f4b5:	e8 c6 10 ff ff       	call   c0000580 <memset>
c000f4ba:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f4bf:	83 c4 10             	add    esp,0x10
c000f4c2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f4c9:	0f 84 c9 05 00 00    	je     c000fa98 <CPU::detectFeatures()+0x60a>
c000f4cf:	83 ec 0c             	sub    esp,0xc
c000f4d2:	89 ef                	mov    edi,ebp
c000f4d4:	6a 10                	push   0x10
c000f4d6:	e8 6b fe ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f4db:	83 e0 01             	and    eax,0x1
c000f4de:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4e7:	83 e0 fd             	and    eax,0xfffffffd
c000f4ea:	09 d0                	or     eax,edx
c000f4ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4f2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f4f9:	e8 48 fe ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f4fe:	83 e0 01             	and    eax,0x1
c000f501:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f508:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f50e:	83 e0 fb             	and    eax,0xfffffffb
c000f511:	09 d0                	or     eax,edx
c000f513:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f519:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f520:	e8 21 fe ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f525:	83 e0 01             	and    eax,0x1
c000f528:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f52f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f535:	83 e0 f7             	and    eax,0xfffffff7
c000f538:	09 d0                	or     eax,edx
c000f53a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f540:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f547:	e8 fa fd ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f54c:	83 e0 01             	and    eax,0x1
c000f54f:	c1 e0 04             	shl    eax,0x4
c000f552:	88 c2                	mov    dl,al
c000f554:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f55a:	83 e0 ef             	and    eax,0xffffffef
c000f55d:	09 d0                	or     eax,edx
c000f55f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f565:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f56c:	e8 d5 fd ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f571:	83 e0 01             	and    eax,0x1
c000f574:	c1 e0 05             	shl    eax,0x5
c000f577:	88 c2                	mov    dl,al
c000f579:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f57f:	83 e0 df             	and    eax,0xffffffdf
c000f582:	09 d0                	or     eax,edx
c000f584:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f58a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f591:	e8 b0 fd ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f596:	83 e0 01             	and    eax,0x1
c000f599:	8d 14 00             	lea    edx,[eax+eax*1]
c000f59c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5a2:	83 e0 fd             	and    eax,0xfffffffd
c000f5a5:	09 d0                	or     eax,edx
c000f5a7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5ad:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f5b4:	e8 8d fd ff ff       	call   c000f346 <CPU::cpuidCheckEDX(unsigned int)>
c000f5b9:	83 e0 01             	and    eax,0x1
c000f5bc:	c1 e0 06             	shl    eax,0x6
c000f5bf:	88 c2                	mov    dl,al
c000f5c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5c7:	83 e0 bf             	and    eax,0xffffffbf
c000f5ca:	09 d0                	or     eax,edx
c000f5cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5d2:	58                   	pop    eax
c000f5d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f5d7:	50                   	push   eax
c000f5d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f5dc:	50                   	push   eax
c000f5dd:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f5e1:	56                   	push   esi
c000f5e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f5e6:	50                   	push   eax
c000f5e7:	6a 00                	push   0x0
c000f5e9:	e8 d4 fc ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5ee:	b8 04 00 00 00       	mov    eax,0x4
c000f5f3:	89 c1                	mov    ecx,eax
c000f5f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5f7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f5fd:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f601:	89 c1                	mov    ecx,eax
c000f603:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f605:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f60b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f60f:	89 c1                	mov    ecx,eax
c000f611:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f613:	83 c4 18             	add    esp,0x18
c000f616:	68 1c 04 02 c0       	push   0xc002041c
c000f61b:	55                   	push   ebp
c000f61c:	e8 1f 11 ff ff       	call   c0000740 <strcmp>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	85 c0                	test   eax,eax
c000f626:	75 0f                	jne    c000f637 <CPU::detectFeatures()+0x1a9>
c000f628:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f632:	e9 22 02 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f637:	50                   	push   eax
c000f638:	50                   	push   eax
c000f639:	68 29 04 02 c0       	push   0xc0020429
c000f63e:	55                   	push   ebp
c000f63f:	e8 fc 10 ff ff       	call   c0000740 <strcmp>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	85 c0                	test   eax,eax
c000f649:	74 dd                	je     c000f628 <CPU::detectFeatures()+0x19a>
c000f64b:	50                   	push   eax
c000f64c:	50                   	push   eax
c000f64d:	68 36 04 02 c0       	push   0xc0020436
c000f652:	55                   	push   ebp
c000f653:	e8 e8 10 ff ff       	call   c0000740 <strcmp>
c000f658:	83 c4 10             	add    esp,0x10
c000f65b:	85 c0                	test   eax,eax
c000f65d:	74 2a                	je     c000f689 <CPU::detectFeatures()+0x1fb>
c000f65f:	50                   	push   eax
c000f660:	50                   	push   eax
c000f661:	68 43 04 02 c0       	push   0xc0020443
c000f666:	55                   	push   ebp
c000f667:	e8 d4 10 ff ff       	call   c0000740 <strcmp>
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	85 c0                	test   eax,eax
c000f671:	74 16                	je     c000f689 <CPU::detectFeatures()+0x1fb>
c000f673:	50                   	push   eax
c000f674:	50                   	push   eax
c000f675:	68 50 04 02 c0       	push   0xc0020450
c000f67a:	55                   	push   ebp
c000f67b:	e8 c0 10 ff ff       	call   c0000740 <strcmp>
c000f680:	83 c4 10             	add    esp,0x10
c000f683:	85 c0                	test   eax,eax
c000f685:	74 48                	je     c000f6cf <CPU::detectFeatures()+0x241>
c000f687:	eb 0f                	jmp    c000f698 <CPU::detectFeatures()+0x20a>
c000f689:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f693:	e9 c1 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f698:	50                   	push   eax
c000f699:	50                   	push   eax
c000f69a:	68 5d 04 02 c0       	push   0xc002045d
c000f69f:	55                   	push   ebp
c000f6a0:	e8 9b 10 ff ff       	call   c0000740 <strcmp>
c000f6a5:	83 c4 10             	add    esp,0x10
c000f6a8:	85 c0                	test   eax,eax
c000f6aa:	74 23                	je     c000f6cf <CPU::detectFeatures()+0x241>
c000f6ac:	57                   	push   edi
c000f6ad:	57                   	push   edi
c000f6ae:	68 6a 04 02 c0       	push   0xc002046a
c000f6b3:	55                   	push   ebp
c000f6b4:	e8 87 10 ff ff       	call   c0000740 <strcmp>
c000f6b9:	83 c4 10             	add    esp,0x10
c000f6bc:	85 c0                	test   eax,eax
c000f6be:	75 1e                	jne    c000f6de <CPU::detectFeatures()+0x250>
c000f6c0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f6ca:	e9 8a 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f6cf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f6d9:	e9 7b 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f6de:	56                   	push   esi
c000f6df:	56                   	push   esi
c000f6e0:	68 77 04 02 c0       	push   0xc0020477
c000f6e5:	55                   	push   ebp
c000f6e6:	e8 55 10 ff ff       	call   c0000740 <strcmp>
c000f6eb:	83 c4 10             	add    esp,0x10
c000f6ee:	85 c0                	test   eax,eax
c000f6f0:	75 0f                	jne    c000f701 <CPU::detectFeatures()+0x273>
c000f6f2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f6fc:	e9 58 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f701:	51                   	push   ecx
c000f702:	51                   	push   ecx
c000f703:	68 36 04 02 c0       	push   0xc0020436
c000f708:	55                   	push   ebp
c000f709:	e8 32 10 ff ff       	call   c0000740 <strcmp>
c000f70e:	83 c4 10             	add    esp,0x10
c000f711:	85 c0                	test   eax,eax
c000f713:	75 0f                	jne    c000f724 <CPU::detectFeatures()+0x296>
c000f715:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f71f:	e9 35 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f724:	52                   	push   edx
c000f725:	52                   	push   edx
c000f726:	68 84 04 02 c0       	push   0xc0020484
c000f72b:	55                   	push   ebp
c000f72c:	e8 0f 10 ff ff       	call   c0000740 <strcmp>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	85 c0                	test   eax,eax
c000f736:	75 0f                	jne    c000f747 <CPU::detectFeatures()+0x2b9>
c000f738:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f742:	e9 12 01 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f747:	50                   	push   eax
c000f748:	50                   	push   eax
c000f749:	68 91 04 02 c0       	push   0xc0020491
c000f74e:	55                   	push   ebp
c000f74f:	e8 ec 0f ff ff       	call   c0000740 <strcmp>
c000f754:	83 c4 10             	add    esp,0x10
c000f757:	85 c0                	test   eax,eax
c000f759:	75 0f                	jne    c000f76a <CPU::detectFeatures()+0x2dc>
c000f75b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f765:	e9 ef 00 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f76a:	50                   	push   eax
c000f76b:	50                   	push   eax
c000f76c:	68 9e 04 02 c0       	push   0xc002049e
c000f771:	55                   	push   ebp
c000f772:	e8 c9 0f ff ff       	call   c0000740 <strcmp>
c000f777:	83 c4 10             	add    esp,0x10
c000f77a:	85 c0                	test   eax,eax
c000f77c:	75 0f                	jne    c000f78d <CPU::detectFeatures()+0x2ff>
c000f77e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f788:	e9 cc 00 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f78d:	50                   	push   eax
c000f78e:	50                   	push   eax
c000f78f:	68 ab 04 02 c0       	push   0xc00204ab
c000f794:	55                   	push   ebp
c000f795:	e8 a6 0f ff ff       	call   c0000740 <strcmp>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	85 c0                	test   eax,eax
c000f79f:	75 0f                	jne    c000f7b0 <CPU::detectFeatures()+0x322>
c000f7a1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f7ab:	e9 a9 00 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f7b0:	50                   	push   eax
c000f7b1:	50                   	push   eax
c000f7b2:	68 b8 04 02 c0       	push   0xc00204b8
c000f7b7:	55                   	push   ebp
c000f7b8:	e8 83 0f ff ff       	call   c0000740 <strcmp>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	85 c0                	test   eax,eax
c000f7c2:	75 0f                	jne    c000f7d3 <CPU::detectFeatures()+0x345>
c000f7c4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f7ce:	e9 86 00 00 00       	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f7d3:	50                   	push   eax
c000f7d4:	50                   	push   eax
c000f7d5:	68 c5 04 02 c0       	push   0xc00204c5
c000f7da:	55                   	push   ebp
c000f7db:	e8 60 0f ff ff       	call   c0000740 <strcmp>
c000f7e0:	83 c4 10             	add    esp,0x10
c000f7e3:	85 c0                	test   eax,eax
c000f7e5:	75 0c                	jne    c000f7f3 <CPU::detectFeatures()+0x365>
c000f7e7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f7f1:	eb 66                	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f7f3:	50                   	push   eax
c000f7f4:	50                   	push   eax
c000f7f5:	68 d2 04 02 c0       	push   0xc00204d2
c000f7fa:	55                   	push   ebp
c000f7fb:	e8 40 0f ff ff       	call   c0000740 <strcmp>
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	85 c0                	test   eax,eax
c000f805:	75 0c                	jne    c000f813 <CPU::detectFeatures()+0x385>
c000f807:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f811:	eb 46                	jmp    c000f859 <CPU::detectFeatures()+0x3cb>
c000f813:	57                   	push   edi
c000f814:	57                   	push   edi
c000f815:	68 df 04 02 c0       	push   0xc00204df
c000f81a:	55                   	push   ebp
c000f81b:	e8 20 0f ff ff       	call   c0000740 <strcmp>
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	85 c0                	test   eax,eax
c000f825:	74 e0                	je     c000f807 <CPU::detectFeatures()+0x379>
c000f827:	56                   	push   esi
c000f828:	56                   	push   esi
c000f829:	68 ec 04 02 c0       	push   0xc00204ec
c000f82e:	55                   	push   ebp
c000f82f:	e8 0c 0f ff ff       	call   c0000740 <strcmp>
c000f834:	83 c4 10             	add    esp,0x10
c000f837:	85 c0                	test   eax,eax
c000f839:	74 cc                	je     c000f807 <CPU::detectFeatures()+0x379>
c000f83b:	51                   	push   ecx
c000f83c:	51                   	push   ecx
c000f83d:	68 f9 04 02 c0       	push   0xc00204f9
c000f842:	55                   	push   ebp
c000f843:	e8 f8 0e ff ff       	call   c0000740 <strcmp>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 c0                	test   eax,eax
c000f84d:	74 b8                	je     c000f807 <CPU::detectFeatures()+0x379>
c000f84f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f859:	83 3c 24 06          	cmp    DWORD PTR [esp],0x6
c000f85d:	0f 86 be 00 00 00    	jbe    c000f921 <CPU::detectFeatures()+0x493>
c000f863:	83 ec 0c             	sub    esp,0xc
c000f866:	68 80 00 00 00       	push   0x80
c000f86b:	e8 32 fb ff ff       	call   c000f3a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f870:	83 e0 01             	and    eax,0x1
c000f873:	c1 e0 06             	shl    eax,0x6
c000f876:	88 c2                	mov    dl,al
c000f878:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f87e:	83 e0 bf             	and    eax,0xffffffbf
c000f881:	09 d0                	or     eax,edx
c000f883:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f889:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f890:	e8 0d fb ff ff       	call   c000f3a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f895:	83 e0 01             	and    eax,0x1
c000f898:	c1 e0 04             	shl    eax,0x4
c000f89b:	88 c2                	mov    dl,al
c000f89d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8a3:	83 e0 ef             	and    eax,0xffffffef
c000f8a6:	09 d0                	or     eax,edx
c000f8a8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8ae:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f8b5:	e8 e8 fa ff ff       	call   c000f3a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f8ba:	c1 e0 07             	shl    eax,0x7
c000f8bd:	88 c2                	mov    dl,al
c000f8bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c5:	83 e0 7f             	and    eax,0x7f
c000f8c8:	09 d0                	or     eax,edx
c000f8ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f8d7:	e8 f4 fa ff ff       	call   c000f3d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f8dc:	83 e0 01             	and    eax,0x1
c000f8df:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8e6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8ec:	83 e0 f7             	and    eax,0xfffffff7
c000f8ef:	09 d0                	or     eax,edx
c000f8f1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8f7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f8fe:	e8 cd fa ff ff       	call   c000f3d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f903:	83 c4 10             	add    esp,0x10
c000f906:	83 e0 01             	and    eax,0x1
c000f909:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f910:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f916:	83 e0 fb             	and    eax,0xfffffffb
c000f919:	09 d0                	or     eax,edx
c000f91b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f921:	83 ec 0c             	sub    esp,0xc
c000f924:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f928:	50                   	push   eax
c000f929:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f92d:	50                   	push   eax
c000f92e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f932:	56                   	push   esi
c000f933:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f937:	50                   	push   eax
c000f938:	6a 01                	push   0x1
c000f93a:	e8 83 f9 ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f943:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000f949:	83 c4 20             	add    esp,0x20
c000f94c:	88 c1                	mov    cl,al
c000f94e:	83 e2 f0             	and    edx,0xfffffff0
c000f951:	83 e1 0f             	and    ecx,0xf
c000f954:	09 ca                	or     edx,ecx
c000f956:	88 c1                	mov    cl,al
c000f958:	c0 e9 04             	shr    cl,0x4
c000f95b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f961:	0f b6 d1             	movzx  edx,cl
c000f964:	89 cd                	mov    ebp,ecx
c000f966:	89 d1                	mov    ecx,edx
c000f968:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000f96e:	c1 e1 06             	shl    ecx,0x6
c000f971:	66 81 e2 3f c0       	and    dx,0xc03f
c000f976:	09 ca                	or     edx,ecx
c000f978:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f97f:	89 c2                	mov    edx,eax
c000f981:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000f987:	c1 ea 08             	shr    edx,0x8
c000f98a:	83 e2 0f             	and    edx,0xf
c000f98d:	83 e1 3f             	and    ecx,0x3f
c000f990:	89 d7                	mov    edi,edx
c000f992:	c1 e7 06             	shl    edi,0x6
c000f995:	09 f9                	or     ecx,edi
c000f997:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000f99d:	88 d1                	mov    cl,dl
c000f99f:	c0 e9 02             	shr    cl,0x2
c000f9a2:	89 cf                	mov    edi,ecx
c000f9a4:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000f9aa:	83 e1 c0             	and    ecx,0xffffffc0
c000f9ad:	09 f9                	or     ecx,edi
c000f9af:	89 c7                	mov    edi,eax
c000f9b1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f9b7:	c1 ef 0c             	shr    edi,0xc
c000f9ba:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000f9c0:	83 e7 03             	and    edi,0x3
c000f9c3:	c1 e7 04             	shl    edi,0x4
c000f9c6:	83 e1 cf             	and    ecx,0xffffffcf
c000f9c9:	09 f9                	or     ecx,edi
c000f9cb:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000f9d1:	80 fa 06             	cmp    dl,0x6
c000f9d4:	74 05                	je     c000f9db <CPU::detectFeatures()+0x54d>
c000f9d6:	80 fa 0f             	cmp    dl,0xf
c000f9d9:	75 59                	jne    c000fa34 <CPU::detectFeatures()+0x5a6>
c000f9db:	89 c1                	mov    ecx,eax
c000f9dd:	c1 e9 10             	shr    ecx,0x10
c000f9e0:	c1 e1 04             	shl    ecx,0x4
c000f9e3:	09 e9                	or     ecx,ebp
c000f9e5:	0f b6 e9             	movzx  ebp,cl
c000f9e8:	8b 8b 5c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x15c]
c000f9ee:	c1 e5 06             	shl    ebp,0x6
c000f9f1:	66 81 e1 3f c0       	and    cx,0xc03f
c000f9f6:	09 cd                	or     ebp,ecx
c000f9f8:	66 89 ab 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],bp
c000f9ff:	80 fa 0f             	cmp    dl,0xf
c000fa02:	75 30                	jne    c000fa34 <CPU::detectFeatures()+0x5a6>
c000fa04:	c1 e8 14             	shr    eax,0x14
c000fa07:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fa0d:	83 c0 0f             	add    eax,0xf
c000fa10:	88 c1                	mov    cl,al
c000fa12:	83 e2 3f             	and    edx,0x3f
c000fa15:	c0 e8 02             	shr    al,0x2
c000fa18:	c1 e1 06             	shl    ecx,0x6
c000fa1b:	09 ca                	or     edx,ecx
c000fa1d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fa23:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fa29:	83 e2 c0             	and    edx,0xffffffc0
c000fa2c:	09 d0                	or     eax,edx
c000fa2e:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fa3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fa42:	50                   	push   eax
c000fa43:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000fa47:	55                   	push   ebp
c000fa48:	56                   	push   esi
c000fa49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000fa4d:	57                   	push   edi
c000fa4e:	68 00 00 00 80       	push   0x80000000
c000fa53:	e8 6a f8 ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa58:	83 c4 20             	add    esp,0x20
c000fa5b:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000fa62:	76 22                	jbe    c000fa86 <CPU::detectFeatures()+0x5f8>
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fa6b:	50                   	push   eax
c000fa6c:	55                   	push   ebp
c000fa6d:	56                   	push   esi
c000fa6e:	57                   	push   edi
c000fa6f:	68 01 00 00 80       	push   0x80000001
c000fa74:	e8 49 f8 ff ff       	call   c000f2c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa79:	83 c4 20             	add    esp,0x20
c000fa7c:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fa86:	52                   	push   edx
c000fa87:	52                   	push   edx
c000fa88:	68 05 05 02 c0       	push   0xc0020505
c000fa8d:	53                   	push   ebx
c000fa8e:	e8 af c1 ff ff       	call   c000bc42 <Device::setName(char const*)>
c000fa93:	83 c4 10             	add    esp,0x10
c000fa96:	eb 67                	jmp    c000faff <CPU::detectFeatures()+0x671>
c000fa98:	50                   	push   eax
c000fa99:	50                   	push   eax
c000fa9a:	68 6a 04 02 c0       	push   0xc002046a
c000fa9f:	55                   	push   ebp
c000faa0:	e8 db 0b ff ff       	call   c0000680 <strcpy>
c000faa5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000faaf:	e8 0f 07 ff ff       	call   c00001c3 <is486>
c000fab4:	83 c4 10             	add    esp,0x10
c000fab7:	85 c0                	test   eax,eax
c000fab9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fabf:	74 1d                	je     c000fade <CPU::detectFeatures()+0x650>
c000fac1:	83 c8 07             	or     eax,0x7
c000fac4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000faca:	0f 20 c0             	mov    eax,cr0
c000facd:	83 e0 14             	and    eax,0x14
c000fad0:	83 f8 04             	cmp    eax,0x4
c000fad3:	75 0e                	jne    c000fae3 <CPU::detectFeatures()+0x655>
c000fad5:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fadc:	eb 21                	jmp    c000faff <CPU::detectFeatures()+0x671>
c000fade:	83 e0 f8             	and    eax,0xfffffff8
c000fae1:	eb e1                	jmp    c000fac4 <CPU::detectFeatures()+0x636>
c000fae3:	e8 b6 06 ff ff       	call   c000019e <hasLegacyFPU>
c000fae8:	83 e0 01             	and    eax,0x1
c000faeb:	8d 14 00             	lea    edx,[eax+eax*1]
c000faee:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000faf4:	83 e0 fd             	and    eax,0xfffffffd
c000faf7:	09 d0                	or     eax,edx
c000faf9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000faff:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fb06:	74 0e                	je     c000fb16 <CPU::detectFeatures()+0x688>
c000fb08:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fb0d:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fb14:	eb 20                	jmp    c000fb36 <CPU::detectFeatures()+0x6a8>
c000fb16:	e8 83 06 ff ff       	call   c000019e <hasLegacyFPU>
c000fb1b:	83 e0 01             	and    eax,0x1
c000fb1e:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb21:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fb27:	83 e0 fd             	and    eax,0xfffffffd
c000fb2a:	09 d0                	or     eax,edx
c000fb2c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fb32:	a8 02                	test   al,0x2
c000fb34:	75 d2                	jne    c000fb08 <CPU::detectFeatures()+0x67a>
c000fb36:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fb3d:	83 c4 1c             	add    esp,0x1c
c000fb40:	5b                   	pop    ebx
c000fb41:	5e                   	pop    esi
c000fb42:	5f                   	pop    edi
c000fb43:	5d                   	pop    ebp
c000fb44:	c3                   	ret    
c000fb45:	90                   	nop

c000fb46 <CPU::setupSMEP()>:
c000fb46:	0f 20 e0             	mov    eax,cr4
c000fb49:	0d 00 00 10 00       	or     eax,0x100000
c000fb4e:	0f 22 e0             	mov    cr4,eax
c000fb51:	c3                   	ret    

c000fb52 <CPU::setupUMIP()>:
c000fb52:	0f 20 e0             	mov    eax,cr4
c000fb55:	80 cc 08             	or     ah,0x8
c000fb58:	0f 22 e0             	mov    cr4,eax
c000fb5b:	c3                   	ret    

c000fb5c <CPU::setupTSC()>:
c000fb5c:	0f 20 e0             	mov    eax,cr4
c000fb5f:	83 c8 04             	or     eax,0x4
c000fb62:	0f 22 e0             	mov    cr4,eax
c000fb65:	c3                   	ret    

c000fb66 <CPU::setupLargePages()>:
c000fb66:	0f 20 e0             	mov    eax,cr4
c000fb69:	83 c8 10             	or     eax,0x10
c000fb6c:	0f 22 e0             	mov    cr4,eax
c000fb6f:	c3                   	ret    

c000fb70 <CPU::setupPAT()>:
c000fb70:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fb75:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fb7c:	74 39                	je     c000fbb7 <CPU::setupPAT()+0x47>
c000fb7e:	57                   	push   edi
c000fb7f:	56                   	push   esi
c000fb80:	53                   	push   ebx
c000fb81:	31 db                	xor    ebx,ebx
c000fb83:	52                   	push   edx
c000fb84:	52                   	push   edx
c000fb85:	68 77 02 00 00       	push   0x277
c000fb8a:	50                   	push   eax
c000fb8b:	e8 2a 73 ff ff       	call   c0006eba <Computer::rdmsr(unsigned int)>
c000fb90:	83 e2 f8             	and    edx,0xfffffff8
c000fb93:	89 c1                	mov    ecx,eax
c000fb95:	31 c0                	xor    eax,eax
c000fb97:	83 ca 01             	or     edx,0x1
c000fb9a:	09 c8                	or     eax,ecx
c000fb9c:	09 da                	or     edx,ebx
c000fb9e:	52                   	push   edx
c000fb9f:	50                   	push   eax
c000fba0:	68 77 02 00 00       	push   0x277
c000fba5:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fbab:	e8 36 73 ff ff       	call   c0006ee6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fbb0:	83 c4 20             	add    esp,0x20
c000fbb3:	5b                   	pop    ebx
c000fbb4:	5e                   	pop    esi
c000fbb5:	5f                   	pop    edi
c000fbb6:	c3                   	ret    
c000fbb7:	c3                   	ret    

c000fbb8 <CPU::setupMTRR()>:
c000fbb8:	c3                   	ret    
c000fbb9:	90                   	nop

c000fbba <CPU::setupGlobalPages()>:
c000fbba:	0f 20 e0             	mov    eax,cr4
c000fbbd:	0c 80                	or     al,0x80
c000fbbf:	0f 22 e0             	mov    cr4,eax
c000fbc2:	c3                   	ret    
c000fbc3:	90                   	nop

c000fbc4 <CPU::allowUsermodeDataAccess()>:
c000fbc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbc8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fbcf:	74 03                	je     c000fbd4 <CPU::allowUsermodeDataAccess()+0x10>
c000fbd1:	0f 01 cb             	stac   
c000fbd4:	c3                   	ret    
c000fbd5:	90                   	nop

c000fbd6 <CPU::prohibitUsermodeDataAccess()>:
c000fbd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbda:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fbe1:	74 03                	je     c000fbe6 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fbe3:	0f 01 ca             	clac   
c000fbe6:	c3                   	ret    
c000fbe7:	90                   	nop

c000fbe8 <CPU::setupSMAP()>:
c000fbe8:	0f 20 e0             	mov    eax,cr4
c000fbeb:	0d 00 00 20 00       	or     eax,0x200000
c000fbf0:	0f 22 e0             	mov    cr4,eax
c000fbf3:	eb e1                	jmp    c000fbd6 <CPU::prohibitUsermodeDataAccess()>
c000fbf5:	90                   	nop

c000fbf6 <CPU::setupFeatures()>:
c000fbf6:	53                   	push   ebx
c000fbf7:	83 ec 08             	sub    esp,0x8
c000fbfa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbfe:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fc05:	74 18                	je     c000fc1f <CPU::setupFeatures()+0x29>
c000fc07:	83 ec 0c             	sub    esp,0xc
c000fc0a:	68 11 05 02 c0       	push   0xc0020511
c000fc0f:	e8 55 aa ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000fc14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc17:	e8 36 ff ff ff       	call   c000fb52 <CPU::setupUMIP()>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fc26:	74 18                	je     c000fc40 <CPU::setupFeatures()+0x4a>
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	68 1b 05 02 c0       	push   0xc002051b
c000fc30:	e8 34 aa ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000fc35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc38:	e8 1f ff ff ff       	call   c000fb5c <CPU::setupTSC()>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fc47:	74 18                	je     c000fc61 <CPU::setupFeatures()+0x6b>
c000fc49:	83 ec 0c             	sub    esp,0xc
c000fc4c:	68 24 05 02 c0       	push   0xc0020524
c000fc51:	e8 13 aa ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000fc56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc59:	e8 08 ff ff ff       	call   c000fb66 <CPU::setupLargePages()>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fc68:	74 18                	je     c000fc82 <CPU::setupFeatures()+0x8c>
c000fc6a:	83 ec 0c             	sub    esp,0xc
c000fc6d:	68 2d 05 02 c0       	push   0xc002052d
c000fc72:	e8 f2 a9 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000fc77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc7a:	e8 3b ff ff ff       	call   c000fbba <CPU::setupGlobalPages()>
c000fc7f:	83 c4 10             	add    esp,0x10
c000fc82:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fc89:	74 18                	je     c000fca3 <CPU::setupFeatures()+0xad>
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	68 3f 05 02 c0       	push   0xc002053f
c000fc93:	e8 d1 a9 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c000fc98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc9b:	e8 d0 fe ff ff       	call   c000fb70 <CPU::setupPAT()>
c000fca0:	83 c4 10             	add    esp,0x10
c000fca3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fcaa:	74 11                	je     c000fcbd <CPU::setupFeatures()+0xc7>
c000fcac:	c7 44 24 10 48 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020548
c000fcb4:	83 c4 08             	add    esp,0x8
c000fcb7:	5b                   	pop    ebx
c000fcb8:	e9 ac a9 ff ff       	jmp    c000a669 <Dbg::kprintf(char const*, ...)>
c000fcbd:	83 c4 08             	add    esp,0x8
c000fcc0:	5b                   	pop    ebx
c000fcc1:	c3                   	ret    

c000fcc2 <CPU::open(int, int, void*)>:
c000fcc2:	57                   	push   edi
c000fcc3:	56                   	push   esi
c000fcc4:	53                   	push   ebx
c000fcc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fccd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fcd3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fcd9:	83 ec 0c             	sub    esp,0xc
c000fcdc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fce2:	50                   	push   eax
c000fce3:	e8 ba 74 ff ff       	call   c00071a2 <GDT::setup()>
c000fce8:	83 c4 0c             	add    esp,0xc
c000fceb:	6a 00                	push   0x0
c000fced:	68 ef be ad de       	push   0xdeadbeef
c000fcf2:	57                   	push   edi
c000fcf3:	e8 4c 90 ff ff       	call   c0008d44 <TSS::setup(unsigned long, unsigned long)>
c000fcf8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fcfb:	e8 24 90 ff ff       	call   c0008d24 <TSS::flush()>
c000fd00:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fd06:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd09:	e8 e2 76 ff ff       	call   c00073f0 <IDT::setup()>
c000fd0e:	b8 00 04 00 00       	mov    eax,0x400
c000fd13:	0f 23 f8             	mov    db7,eax
c000fd16:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fd20:	e8 3b 7e ff ff       	call   c0007b60 <Phys::allocatePage()>
c000fd25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fd2b:	89 30                	mov    DWORD PTR [eax],esi
c000fd2d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fd33:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fd36:	58                   	pop    eax
c000fd37:	5a                   	pop    edx
c000fd38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fd3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd42:	e8 0b a0 ff ff       	call   c0009d52 <VAS::setCPUSpecific(unsigned long)>
c000fd47:	c7 04 24 52 05 02 c0 	mov    DWORD PTR [esp],0xc0020552
c000fd4e:	e8 c6 00 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000fd53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd56:	e8 33 f7 ff ff       	call   c000f48e <CPU::detectFeatures()>
c000fd5b:	c7 04 24 75 05 02 c0 	mov    DWORD PTR [esp],0xc0020575
c000fd62:	e8 b2 00 00 00       	call   c000fe19 <KeSetBootMessage(char const*)>
c000fd67:	e8 83 6e 00 00       	call   c0016bef <HalInitialise()>
c000fd6c:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fd71:	83 e0 10             	and    eax,0x10
c000fd74:	83 f8 01             	cmp    eax,0x1
c000fd77:	19 c0                	sbb    eax,eax
c000fd79:	83 e0 46             	and    eax,0x46
c000fd7c:	83 c0 1e             	add    eax,0x1e
c000fd7f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd82:	e8 ca d6 ff ff       	call   c000d451 <setupTimer(int)>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fd90:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fd97:	74 0c                	je     c000fda5 <CPU::open(int, int, void*)+0xe3>
c000fd99:	83 ec 0c             	sub    esp,0xc
c000fd9c:	53                   	push   ebx
c000fd9d:	e8 54 fe ff ff       	call   c000fbf6 <CPU::setupFeatures()>
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	5b                   	pop    ebx
c000fda6:	31 c0                	xor    eax,eax
c000fda8:	5e                   	pop    esi
c000fda9:	5f                   	pop    edi
c000fdaa:	c3                   	ret    

c000fdab <KeDisplaySplashScreen()>:
c000fdab:	55                   	push   ebp
c000fdac:	bd 05 00 00 00       	mov    ebp,0x5
c000fdb1:	57                   	push   edi
c000fdb2:	bf 80 19 02 c0       	mov    edi,0xc0021980
c000fdb7:	56                   	push   esi
c000fdb8:	be 0a 00 00 00       	mov    esi,0xa
c000fdbd:	53                   	push   ebx
c000fdbe:	31 db                	xor    ebx,ebx
c000fdc0:	83 ec 0c             	sub    esp,0xc
c000fdc3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fdc6:	84 c0                	test   al,al
c000fdc8:	74 47                	je     c000fe11 <KeDisplaySplashScreen()+0x66>
c000fdca:	80 bb b6 19 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde64a],0xdb
c000fdd1:	75 13                	jne    c000fde6 <KeDisplaySplashScreen()+0x3b>
c000fdd3:	0f b6 93 b5 19 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde64b]
c000fdda:	83 e2 fe             	and    edx,0xfffffffe
c000fddd:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fde3:	75 01                	jne    c000fde6 <KeDisplaySplashScreen()+0x3b>
c000fde5:	46                   	inc    esi
c000fde6:	3c 0d                	cmp    al,0xd
c000fde8:	74 24                	je     c000fe0e <KeDisplaySplashScreen()+0x63>
c000fdea:	3c 0a                	cmp    al,0xa
c000fdec:	75 0a                	jne    c000fdf8 <KeDisplaySplashScreen()+0x4d>
c000fdee:	45                   	inc    ebp
c000fdef:	be 0a 00 00 00       	mov    esi,0xa
c000fdf4:	31 db                	xor    ebx,ebx
c000fdf6:	eb 16                	jmp    c000fe0e <KeDisplaySplashScreen()+0x63>
c000fdf8:	83 ec 0c             	sub    esp,0xc
c000fdfb:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fdfe:	43                   	inc    ebx
c000fdff:	55                   	push   ebp
c000fe00:	52                   	push   edx
c000fe01:	6a 00                	push   0x0
c000fe03:	6a 0e                	push   0xe
c000fe05:	50                   	push   eax
c000fe06:	e8 3d 7a 00 00       	call   c0017848 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fe0b:	83 c4 20             	add    esp,0x20
c000fe0e:	47                   	inc    edi
c000fe0f:	eb b2                	jmp    c000fdc3 <KeDisplaySplashScreen()+0x18>
c000fe11:	83 c4 0c             	add    esp,0xc
c000fe14:	5b                   	pop    ebx
c000fe15:	5e                   	pop    esi
c000fe16:	5f                   	pop    edi
c000fe17:	5d                   	pop    ebp
c000fe18:	c3                   	ret    

c000fe19 <KeSetBootMessage(char const*)>:
c000fe19:	57                   	push   edi
c000fe1a:	56                   	push   esi
c000fe1b:	53                   	push   ebx
c000fe1c:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fe22:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fe29:	68 9e 00 00 00       	push   0x9e
c000fe2e:	6a 00                	push   0x0
c000fe30:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fe34:	56                   	push   esi
c000fe35:	e8 46 07 ff ff       	call   c0000580 <memset>
c000fe3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe3d:	e8 6e 07 ff ff       	call   c00005b0 <strlen>
c000fe42:	ba 50 00 00 00       	mov    edx,0x50
c000fe47:	83 c4 10             	add    esp,0x10
c000fe4a:	31 c9                	xor    ecx,ecx
c000fe4c:	29 c2                	sub    edx,eax
c000fe4e:	83 e2 fe             	and    edx,0xfffffffe
c000fe51:	01 f2                	add    edx,esi
c000fe53:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fe58:	84 c0                	test   al,al
c000fe5a:	74 0a                	je     c000fe66 <KeSetBootMessage(char const*)+0x4d>
c000fe5c:	80 cc 0f             	or     ah,0xf
c000fe5f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fe63:	41                   	inc    ecx
c000fe64:	eb ed                	jmp    c000fe53 <KeSetBootMessage(char const*)+0x3a>
c000fe66:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fe6b:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fe70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe72:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fe78:	5b                   	pop    ebx
c000fe79:	5e                   	pop    esi
c000fe7a:	5f                   	pop    edi
c000fe7b:	c3                   	ret    

c000fe7c <EnvVarContainer::getEnv(char const*)>:
c000fe7c:	57                   	push   edi
c000fe7d:	56                   	push   esi
c000fe7e:	53                   	push   ebx
c000fe7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe83:	31 db                	xor    ebx,ebx
c000fe85:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fe87:	7e 2b                	jle    c000feb4 <EnvVarContainer::getEnv(char const*)+0x38>
c000fe89:	50                   	push   eax
c000fe8a:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fe91:	50                   	push   eax
c000fe92:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fe95:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fe98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fe9c:	e8 9f 08 ff ff       	call   c0000740 <strcmp>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	85 c0                	test   eax,eax
c000fea6:	75 09                	jne    c000feb1 <EnvVarContainer::getEnv(char const*)+0x35>
c000fea8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000feab:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000feaf:	eb 05                	jmp    c000feb6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000feb1:	43                   	inc    ebx
c000feb2:	eb d1                	jmp    c000fe85 <EnvVarContainer::getEnv(char const*)+0x9>
c000feb4:	31 c0                	xor    eax,eax
c000feb6:	5b                   	pop    ebx
c000feb7:	5e                   	pop    esi
c000feb8:	5f                   	pop    edi
c000feb9:	c3                   	ret    

c000feba <EnvVarContainer::setEnv(char const*, char const*)>:
c000feba:	55                   	push   ebp
c000febb:	57                   	push   edi
c000febc:	56                   	push   esi
c000febd:	53                   	push   ebx
c000febe:	83 ec 28             	sub    esp,0x28
c000fec1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fec5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fec9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fecd:	56                   	push   esi
c000fece:	e8 dd 06 ff ff       	call   c00005b0 <strlen>
c000fed3:	40                   	inc    eax
c000fed4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fed7:	e8 9f 79 ff ff       	call   c000787b <malloc>
c000fedc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fedf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fee3:	e8 c8 06 ff ff       	call   c00005b0 <strlen>
c000fee8:	40                   	inc    eax
c000fee9:	89 04 24             	mov    DWORD PTR [esp],eax
c000feec:	e8 8a 79 ff ff       	call   c000787b <malloc>
c000fef1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fef4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fef8:	e8 b3 06 ff ff       	call   c00005b0 <strlen>
c000fefd:	83 c4 0c             	add    esp,0xc
c000ff00:	40                   	inc    eax
c000ff01:	50                   	push   eax
c000ff02:	6a 00                	push   0x0
c000ff04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff08:	e8 73 06 ff ff       	call   c0000580 <memset>
c000ff0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff10:	e8 9b 06 ff ff       	call   c00005b0 <strlen>
c000ff15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff19:	8d 48 01             	lea    ecx,[eax+0x1]
c000ff1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff21:	89 de                	mov    esi,ebx
c000ff23:	e8 88 06 ff ff       	call   c00005b0 <strlen>
c000ff28:	83 c4 0c             	add    esp,0xc
c000ff2b:	40                   	inc    eax
c000ff2c:	50                   	push   eax
c000ff2d:	6a 00                	push   0x0
c000ff2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff33:	e8 48 06 ff ff       	call   c0000580 <memset>
c000ff38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff3b:	e8 70 06 ff ff       	call   c00005b0 <strlen>
c000ff40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff44:	8d 48 01             	lea    ecx,[eax+0x1]
c000ff47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff4c:	40                   	inc    eax
c000ff4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff50:	c1 e0 03             	shl    eax,0x3
c000ff53:	5a                   	pop    edx
c000ff54:	59                   	pop    ecx
c000ff55:	50                   	push   eax
c000ff56:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ff59:	e8 09 79 ff ff       	call   c0007867 <realloc>
c000ff5e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff61:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff65:	b9 08 00 00 00       	mov    ecx,0x8
c000ff6a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff6d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff73:	83 c4 2c             	add    esp,0x2c
c000ff76:	5b                   	pop    ebx
c000ff77:	5e                   	pop    esi
c000ff78:	5f                   	pop    edi
c000ff79:	5d                   	pop    ebp
c000ff7a:	c3                   	ret    
c000ff7b:	90                   	nop

c000ff7c <EnvVarContainer::deleteEnv(char const*)>:
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ff7e:	55                   	push   ebp
c000ff7f:	57                   	push   edi
c000ff80:	56                   	push   esi
c000ff81:	53                   	push   ebx
c000ff82:	81 ec 38 01 00 00    	sub    esp,0x138
c000ff88:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ff8f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ff96:	68 14 01 00 00       	push   0x114
c000ff9b:	e8 db 78 ff ff       	call   c000787b <malloc>
c000ffa0:	83 c4 0c             	add    esp,0xc
c000ffa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ffa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ffad:	89 c3                	mov    ebx,eax
c000ffaf:	50                   	push   eax
c000ffb0:	e8 1d ac ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c000ffb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb8:	e8 3d af ff ff       	call   c000aefa <File::exists()>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	84 c0                	test   al,al
c000ffc2:	75 31                	jne    c000fff5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ffc4:	50                   	push   eax
c000ffc5:	50                   	push   eax
c000ffc6:	6a 12                	push   0x12
c000ffc8:	53                   	push   ebx
c000ffc9:	e8 be ac ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c000ffce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ffd0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ffd3:	89 34 24             	mov    DWORD PTR [esp],esi
c000ffd6:	e8 d5 05 ff ff       	call   c00005b0 <strlen>
c000ffdb:	5a                   	pop    edx
c000ffdc:	31 d2                	xor    edx,edx
c000ffde:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ffe2:	51                   	push   ecx
c000ffe3:	56                   	push   esi
c000ffe4:	52                   	push   edx
c000ffe5:	50                   	push   eax
c000ffe6:	53                   	push   ebx
c000ffe7:	ff d7                	call   edi
c000ffe9:	83 c4 14             	add    esp,0x14
c000ffec:	53                   	push   ebx
c000ffed:	e8 f8 ac ff ff       	call   c000acea <File::close()>
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	56                   	push   esi
c000fff6:	31 f6                	xor    esi,esi
c000fff8:	68 00 01 00 00       	push   0x100
c000fffd:	6a 00                	push   0x0
c000ffff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010003:	50                   	push   eax
c0010004:	e8 77 05 ff ff       	call   c0000580 <memset>
c0010009:	5f                   	pop    edi
c001000a:	58                   	pop    eax
c001000b:	6a 01                	push   0x1
c001000d:	53                   	push   ebx
c001000e:	e8 79 ac ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0010013:	83 c4 10             	add    esp,0x10
c0010016:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001001e:	83 ec 0c             	sub    esp,0xc
c0010021:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010023:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010027:	51                   	push   ecx
c0010028:	8d 54 24 23          	lea    edx,[esp+0x23]
c001002c:	52                   	push   edx
c001002d:	6a 00                	push   0x0
c001002f:	6a 01                	push   0x1
c0010031:	53                   	push   ebx
c0010032:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010035:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010039:	83 c4 20             	add    esp,0x20
c001003c:	3c 0d                	cmp    al,0xd
c001003e:	0f 84 09 01 00 00    	je     c001014d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010044:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010049:	0f 84 ef 00 00 00    	je     c001013e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001004f:	3c 0a                	cmp    al,0xa
c0010051:	74 13                	je     c0010066 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010053:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010058:	74 0c                	je     c0010066 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001005a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010060:	0f 8e d8 00 00 00    	jle    c001013e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001006a:	83 ec 0c             	sub    esp,0xc
c001006d:	8d 78 01             	lea    edi,[eax+0x1]
c0010070:	57                   	push   edi
c0010071:	e8 05 78 ff ff       	call   c000787b <malloc>
c0010076:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001007a:	8d 56 04             	lea    edx,[esi+0x4]
c001007d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010081:	89 14 24             	mov    DWORD PTR [esp],edx
c0010084:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010088:	e8 ee 77 ff ff       	call   c000787b <malloc>
c001008d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010091:	83 c4 0c             	add    esp,0xc
c0010094:	57                   	push   edi
c0010095:	6a 00                	push   0x0
c0010097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001009b:	e8 e0 04 ff ff       	call   c0000580 <memset>
c00100a0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00100a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00100a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00100ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100ae:	83 c4 0c             	add    esp,0xc
c00100b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100b5:	52                   	push   edx
c00100b6:	6a 00                	push   0x0
c00100b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100bc:	e8 bf 04 ff ff       	call   c0000580 <memset>
c00100c1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00100c5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00100c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00100cc:	e8 df 04 ff ff       	call   c00005b0 <strlen>
c00100d1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00100d5:	89 c1                	mov    ecx,eax
c00100d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00100dc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00100df:	83 c4 10             	add    esp,0x10
c00100e2:	40                   	inc    eax
c00100e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00100e6:	85 d2                	test   edx,edx
c00100e8:	75 0c                	jne    c00100f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00100ea:	83 ec 0c             	sub    esp,0xc
c00100ed:	6a 08                	push   0x8
c00100ef:	e8 87 77 ff ff       	call   c000787b <malloc>
c00100f4:	eb 0c                	jmp    c0010102 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00100f6:	c1 e0 03             	shl    eax,0x3
c00100f9:	51                   	push   ecx
c00100fa:	51                   	push   ecx
c00100fb:	50                   	push   eax
c00100fc:	52                   	push   edx
c00100fd:	e8 65 77 ff ff       	call   c0007867 <realloc>
c0010102:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010105:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	b9 08 00 00 00       	mov    ecx,0x8
c0010110:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010113:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010117:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001011b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011d:	50                   	push   eax
c001011e:	31 f6                	xor    esi,esi
c0010120:	68 00 01 00 00       	push   0x100
c0010125:	6a 00                	push   0x0
c0010127:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001012b:	50                   	push   eax
c001012c:	e8 4f 04 ff ff       	call   c0000580 <memset>
c0010131:	83 c4 10             	add    esp,0x10
c0010134:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001013c:	eb 0f                	jmp    c001014d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001013e:	3c 3d                	cmp    al,0x3d
c0010140:	74 07                	je     c0010149 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010142:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010146:	46                   	inc    esi
c0010147:	eb 04                	jmp    c001014d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010149:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001014d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010152:	0f 85 c6 fe ff ff    	jne    c001001e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010158:	81 c4 2c 01 00 00    	add    esp,0x12c
c001015e:	5b                   	pop    ebx
c001015f:	5e                   	pop    esi
c0010160:	5f                   	pop    edi
c0010161:	5d                   	pop    ebp
c0010162:	c3                   	ret    
c0010163:	90                   	nop

c0010164 <EnvVarContainer::__loadSystem()>:
c0010164:	83 ec 10             	sub    esp,0x10
c0010167:	68 e0 1a 02 c0       	push   0xc0021ae0
c001016c:	68 b8 05 02 c0       	push   0xc00205b8
c0010171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010175:	e8 04 fe ff ff       	call   c000ff7e <EnvVarContainer::loadFrom(char const*, char const*)>
c001017a:	83 c4 1c             	add    esp,0x1c
c001017d:	c3                   	ret    

c001017e <EnvVarContainer::__loadUser()>:
c001017e:	c3                   	ret    
c001017f:	90                   	nop

c0010180 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010184:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001018a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010192:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010195:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010199:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00101a0:	90                   	nop
c00101a1:	c3                   	ret    

c00101a2 <EnvVarContainer::~EnvVarContainer()>:
c00101a2:	83 ec 0c             	sub    esp,0xc
c00101a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ac:	85 c0                	test   eax,eax
c00101ae:	74 1d                	je     c00101cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00101b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101b6:	85 c0                	test   eax,eax
c00101b8:	74 13                	je     c00101cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00101ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101c1:	83 ec 0c             	sub    esp,0xc
c00101c4:	50                   	push   eax
c00101c5:	e8 c1 76 ff ff       	call   c000788b <free>
c00101ca:	83 c4 10             	add    esp,0x10
c00101cd:	90                   	nop
c00101ce:	83 c4 0c             	add    esp,0xc
c00101d1:	c3                   	ret    

c00101d2 <Krnl::getEnv(Process*, char const*)>:
c00101d2:	53                   	push   ebx
c00101d3:	83 ec 08             	sub    esp,0x8
c00101d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101de:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c00101e4:	74 04                	je     c00101ea <Krnl::getEnv(Process*, char const*)+0x18>
c00101e6:	85 c0                	test   eax,eax
c00101e8:	75 0b                	jne    c00101f5 <Krnl::getEnv(Process*, char const*)+0x23>
c00101ea:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c00101ef:	85 c0                	test   eax,eax
c00101f1:	75 19                	jne    c001020c <Krnl::getEnv(Process*, char const*)+0x3a>
c00101f3:	eb 27                	jmp    c001021c <Krnl::getEnv(Process*, char const*)+0x4a>
c00101f5:	52                   	push   edx
c00101f6:	52                   	push   edx
c00101f7:	53                   	push   ebx
c00101f8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00101fe:	e8 79 fc ff ff       	call   c000fe7c <EnvVarContainer::getEnv(char const*)>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	85 c0                	test   eax,eax
c0010208:	75 28                	jne    c0010232 <Krnl::getEnv(Process*, char const*)+0x60>
c001020a:	eb de                	jmp    c00101ea <Krnl::getEnv(Process*, char const*)+0x18>
c001020c:	52                   	push   edx
c001020d:	52                   	push   edx
c001020e:	53                   	push   ebx
c001020f:	50                   	push   eax
c0010210:	e8 67 fc ff ff       	call   c000fe7c <EnvVarContainer::getEnv(char const*)>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	85 c0                	test   eax,eax
c001021a:	75 16                	jne    c0010232 <Krnl::getEnv(Process*, char const*)+0x60>
c001021c:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010221:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010229:	83 c4 08             	add    esp,0x8
c001022c:	5b                   	pop    ebx
c001022d:	e9 4a fc ff ff       	jmp    c000fe7c <EnvVarContainer::getEnv(char const*)>
c0010232:	83 c4 08             	add    esp,0x8
c0010235:	5b                   	pop    ebx
c0010236:	c3                   	ret    

c0010237 <Krnl::setEnvSystem(char const*, char const*)>:
c0010237:	83 ec 10             	sub    esp,0x10
c001023a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010242:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c0010248:	e8 6d fc ff ff       	call   c000feba <EnvVarContainer::setEnv(char const*, char const*)>
c001024d:	83 c4 1c             	add    esp,0x1c
c0010250:	c3                   	ret    

c0010251 <Krnl::setEnvUser(char const*, char const*)>:
c0010251:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010256:	85 c0                	test   eax,eax
c0010258:	74 15                	je     c001026f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001025a:	83 ec 10             	sub    esp,0x10
c001025d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010265:	50                   	push   eax
c0010266:	e8 4f fc ff ff       	call   c000feba <EnvVarContainer::setEnv(char const*, char const*)>
c001026b:	83 c4 1c             	add    esp,0x1c
c001026e:	c3                   	ret    
c001026f:	c3                   	ret    

c0010270 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010274:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001027a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001027e:	e9 37 fc ff ff       	jmp    c000feba <EnvVarContainer::setEnv(char const*, char const*)>

c0010283 <Krnl::deleteEnvSystem(char const*)>:
c0010283:	c3                   	ret    

c0010284 <Krnl::deleteEnvUser(char const*)>:
c0010284:	c3                   	ret    

c0010285 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010285:	c3                   	ret    

c0010286 <Krnl::newProcessEnv(Process*)>:
c0010286:	53                   	push   ebx
c0010287:	83 ec 14             	sub    esp,0x14
c001028a:	6a 0c                	push   0xc
c001028c:	e8 ea 75 ff ff       	call   c000787b <malloc>
c0010291:	89 c3                	mov    ebx,eax
c0010293:	58                   	pop    eax
c0010294:	5a                   	pop    edx
c0010295:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010299:	53                   	push   ebx
c001029a:	e8 e1 fe ff ff       	call   c0010180 <EnvVarContainer::EnvVarContainer(Process*)>
c001029f:	83 c4 18             	add    esp,0x18
c00102a2:	89 d8                	mov    eax,ebx
c00102a4:	5b                   	pop    ebx
c00102a5:	c3                   	ret    

c00102a6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00102a6:	57                   	push   edi
c00102a7:	56                   	push   esi
c00102a8:	53                   	push   ebx
c00102a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ad:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	6a 0c                	push   0xc
c00102b8:	e8 be 75 ff ff       	call   c000787b <malloc>
c00102bd:	89 c3                	mov    ebx,eax
c00102bf:	58                   	pop    eax
c00102c0:	5a                   	pop    edx
c00102c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c5:	53                   	push   ebx
c00102c6:	e8 b5 fe ff ff       	call   c0010180 <EnvVarContainer::EnvVarContainer(Process*)>
c00102cb:	8b 07                	mov    eax,DWORD PTR [edi]
c00102cd:	89 03                	mov    DWORD PTR [ebx],eax
c00102cf:	c1 e0 03             	shl    eax,0x3
c00102d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00102d5:	e8 a1 75 ff ff       	call   c000787b <malloc>
c00102da:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00102dd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00102df:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00102e2:	89 c7                	mov    edi,eax
c00102e4:	c1 e1 03             	shl    ecx,0x3
c00102e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	89 d8                	mov    eax,ebx
c00102ee:	5b                   	pop    ebx
c00102ef:	5e                   	pop    esi
c00102f0:	5f                   	pop    edi
c00102f1:	c3                   	ret    

c00102f2 <Krnl::loadSystemEnv()>:
c00102f2:	53                   	push   ebx
c00102f3:	83 ec 14             	sub    esp,0x14
c00102f6:	6a 0c                	push   0xc
c00102f8:	e8 7e 75 ff ff       	call   c000787b <malloc>
c00102fd:	89 c3                	mov    ebx,eax
c00102ff:	58                   	pop    eax
c0010300:	5a                   	pop    edx
c0010301:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010307:	53                   	push   ebx
c0010308:	e8 73 fe ff ff       	call   c0010180 <EnvVarContainer::EnvVarContainer(Process*)>
c001030d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010310:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010316:	e8 49 fe ff ff       	call   c0010164 <EnvVarContainer::__loadSystem()>
c001031b:	83 c4 18             	add    esp,0x18
c001031e:	5b                   	pop    ebx
c001031f:	c3                   	ret    

c0010320 <Krnl::loadUserEnv()>:
c0010320:	53                   	push   ebx
c0010321:	83 ec 14             	sub    esp,0x14
c0010324:	6a 0c                	push   0xc
c0010326:	e8 50 75 ff ff       	call   c000787b <malloc>
c001032b:	89 c3                	mov    ebx,eax
c001032d:	58                   	pop    eax
c001032e:	5a                   	pop    edx
c001032f:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010335:	53                   	push   ebx
c0010336:	e8 45 fe ff ff       	call   c0010180 <EnvVarContainer::EnvVarContainer(Process*)>
c001033b:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c0010341:	83 c4 18             	add    esp,0x18
c0010344:	5b                   	pop    ebx
c0010345:	c3                   	ret    

c0010346 <Krnl::flushEnv()>:
c0010346:	c3                   	ret    

c0010347 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001034b:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c0010351:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010357:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001035c:	8b 00                	mov    eax,DWORD PTR [eax]
c001035e:	03 01                	add    eax,DWORD PTR [ecx]
c0010360:	85 d2                	test   edx,edx
c0010362:	74 02                	je     c0010366 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010364:	03 02                	add    eax,DWORD PTR [edx]
c0010366:	c3                   	ret    

c0010367 <Krnl::getProcessEnvPair(Process*, int)>:
c0010367:	57                   	push   edi
c0010368:	56                   	push   esi
c0010369:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c001036f:	53                   	push   ebx
c0010370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010374:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010378:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001037c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010382:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010384:	85 f6                	test   esi,esi
c0010386:	75 33                	jne    c00103bb <Krnl::getProcessEnvPair(Process*, int)+0x54>
c0010388:	39 c2                	cmp    edx,eax
c001038a:	7d 11                	jge    c001039d <Krnl::getProcessEnvPair(Process*, int)+0x36>
c001038c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001038f:	c5 fa 7e 04 d0       	vmovq  xmm0,QWORD PTR [eax+edx*8]
c0010394:	c5 f9 d6 03          	vmovq  QWORD PTR [ebx],xmm0
c0010398:	e9 84 00 00 00       	jmp    c0010421 <Krnl::getProcessEnvPair(Process*, int)+0xba>
c001039d:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00103a3:	8b 31                	mov    esi,DWORD PTR [ecx]
c00103a5:	01 c6                	add    esi,eax
c00103a7:	39 d6                	cmp    esi,edx
c00103a9:	7e 59                	jle    c0010404 <Krnl::getProcessEnvPair(Process*, int)+0x9d>
c00103ab:	29 c2                	sub    edx,eax
c00103ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00103b0:	c5 fa 7e 0c d0       	vmovq  xmm1,QWORD PTR [eax+edx*8]
c00103b5:	c5 f9 d6 0b          	vmovq  QWORD PTR [ebx],xmm1
c00103b9:	eb 66                	jmp    c0010421 <Krnl::getProcessEnvPair(Process*, int)+0xba>
c00103bb:	39 c2                	cmp    edx,eax
c00103bd:	7d 0e                	jge    c00103cd <Krnl::getProcessEnvPair(Process*, int)+0x66>
c00103bf:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00103c2:	c5 fa 7e 14 d0       	vmovq  xmm2,QWORD PTR [eax+edx*8]
c00103c7:	c5 f9 d6 13          	vmovq  QWORD PTR [ebx],xmm2
c00103cb:	eb 54                	jmp    c0010421 <Krnl::getProcessEnvPair(Process*, int)+0xba>
c00103cd:	8b 3e                	mov    edi,DWORD PTR [esi]
c00103cf:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00103d2:	39 d1                	cmp    ecx,edx
c00103d4:	7e 10                	jle    c00103e6 <Krnl::getProcessEnvPair(Process*, int)+0x7f>
c00103d6:	29 c2                	sub    edx,eax
c00103d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00103db:	c5 fa 7e 1c d0       	vmovq  xmm3,QWORD PTR [eax+edx*8]
c00103e0:	c5 f9 d6 1b          	vmovq  QWORD PTR [ebx],xmm3
c00103e4:	eb 3b                	jmp    c0010421 <Krnl::getProcessEnvPair(Process*, int)+0xba>
c00103e6:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00103ec:	03 0e                	add    ecx,DWORD PTR [esi]
c00103ee:	39 d1                	cmp    ecx,edx
c00103f0:	7e 12                	jle    c0010404 <Krnl::getProcessEnvPair(Process*, int)+0x9d>
c00103f2:	29 c2                	sub    edx,eax
c00103f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00103f7:	29 fa                	sub    edx,edi
c00103f9:	c5 fa 7e 24 d0       	vmovq  xmm4,QWORD PTR [eax+edx*8]
c00103fe:	c5 f9 d6 23          	vmovq  QWORD PTR [ebx],xmm4
c0010402:	eb 1d                	jmp    c0010421 <Krnl::getProcessEnvPair(Process*, int)+0xba>
c0010404:	83 ec 0c             	sub    esp,0xc
c0010407:	68 da 05 02 c0       	push   0xc00205da
c001040c:	e8 ac 00 00 00       	call   c00104bd <KePanic(char const*)>
c0010411:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010421:	89 d8                	mov    eax,ebx
c0010423:	5b                   	pop    ebx
c0010424:	5e                   	pop    esi
c0010425:	5f                   	pop    edi
c0010426:	c2 04 00             	ret    0x4

c0010429 <CPU::current()>:
c0010429:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001042e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010434:	c3                   	ret    

c0010435 <operator new(unsigned long)>:
c0010435:	e9 41 74 ff ff       	jmp    c000787b <malloc>

c001043a <operator delete(void*)>:
c001043a:	e9 5c 74 ff ff       	jmp    c000789b <rfree>

c001043f <disableIRQs()>:
c001043f:	fa                   	cli    
c0010440:	c3                   	ret    

c0010441 <enableIRQs()>:
c0010441:	fb                   	sti    
c0010442:	c3                   	ret    

c0010443 <lockScheduler()>:
c0010443:	fa                   	cli    
c0010444:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001044a:	c3                   	ret    

c001044b <unlockScheduler()>:
c001044b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010450:	48                   	dec    eax
c0010451:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010456:	75 01                	jne    c0010459 <unlockScheduler()+0xe>
c0010458:	fb                   	sti    
c0010459:	c3                   	ret    

c001045a <lockStuff()>:
c001045a:	fa                   	cli    
c001045b:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010461:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010467:	c3                   	ret    

c0010468 <unlockStuff()>:
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0010470:	48                   	dec    eax
c0010471:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010476:	75 18                	jne    c0010490 <unlockStuff()+0x28>
c0010478:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c001047f:	74 0f                	je     c0010490 <unlockStuff()+0x28>
c0010481:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001048b:	e8 30 48 00 00       	call   c0014cc0 <schedule()>
c0010490:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010495:	48                   	dec    eax
c0010496:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001049b:	75 01                	jne    c001049e <unlockStuff()+0x36>
c001049d:	fb                   	sti    
c001049e:	83 c4 0c             	add    esp,0xc
c00104a1:	c3                   	ret    

c00104a2 <Virt::getAKernelVAS()>:
c00104a2:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00104a7:	c3                   	ret    

c00104a8 <__not_memcpy>:
c00104a8:	57                   	push   edi
c00104a9:	56                   	push   esi
c00104aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00104b6:	89 c7                	mov    edi,eax
c00104b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104ba:	5e                   	pop    esi
c00104bb:	5f                   	pop    edi
c00104bc:	c3                   	ret    

c00104bd <KePanic(char const*)>:
c00104bd:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00104c4:	e9 fe 65 00 00       	jmp    c0016ac7 <HalPanic(char const*)>

c00104c9 <Krnl::powerThread(void*)>:
c00104c9:	83 ec 0c             	sub    esp,0xc
c00104cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00104d1:	48                   	dec    eax
c00104d2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00104d7:	75 01                	jne    c00104da <Krnl::powerThread(void*)+0x11>
c00104d9:	fb                   	sti    
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104e4:	6a 0a                	push   0xa
c00104e6:	e8 d5 4a 00 00       	call   c0014fc0 <sleep(unsigned int)>
c00104eb:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	eb e3                	jmp    c00104da <Krnl::powerThread(void*)+0x11>

c00104f7 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00104f7:	57                   	push   edi
c00104f8:	b9 09 00 00 00       	mov    ecx,0x9
c00104fd:	bf 60 69 02 c0       	mov    edi,0xc0026960
c0010502:	56                   	push   esi
c0010503:	fc                   	cld    
c0010504:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010508:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001050a:	5e                   	pop    esi
c001050b:	5f                   	pop    edi
c001050c:	c3                   	ret    

c001050d <Krnl::userIOReceived()>:
c001050d:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010517:	c3                   	ret    

c0010518 <Krnl::handlePowerButton()>:
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c0010520:	83 f8 02             	cmp    eax,0x2
c0010523:	75 10                	jne    c0010535 <Krnl::handlePowerButton()+0x1d>
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001052e:	e8 ef 69 ff ff       	call   c0006f22 <Computer::shutdown()>
c0010533:	eb 11                	jmp    c0010546 <Krnl::handlePowerButton()+0x2e>
c0010535:	48                   	dec    eax
c0010536:	75 11                	jne    c0010549 <Krnl::handlePowerButton()+0x31>
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010541:	e8 0c 6a ff ff       	call   c0006f52 <Computer::sleep()>
c0010546:	83 c4 10             	add    esp,0x10
c0010549:	83 c4 0c             	add    esp,0xc
c001054c:	c3                   	ret    

c001054d <Krnl::handleSleepButton()>:
c001054d:	83 ec 0c             	sub    esp,0xc
c0010550:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c0010555:	83 f8 02             	cmp    eax,0x2
c0010558:	75 10                	jne    c001056a <Krnl::handleSleepButton()+0x1d>
c001055a:	83 ec 0c             	sub    esp,0xc
c001055d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010563:	e8 ba 69 ff ff       	call   c0006f22 <Computer::shutdown()>
c0010568:	eb 11                	jmp    c001057b <Krnl::handleSleepButton()+0x2e>
c001056a:	48                   	dec    eax
c001056b:	75 11                	jne    c001057e <Krnl::handleSleepButton()+0x31>
c001056d:	83 ec 0c             	sub    esp,0xc
c0010570:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010576:	e8 d7 69 ff ff       	call   c0006f52 <Computer::sleep()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	83 c4 0c             	add    esp,0xc
c0010581:	c3                   	ret    

c0010582 <Krnl::setupPowerManager()>:
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c001058c:	68 f0 00 00 00       	push   0xf0
c0010591:	6a 00                	push   0x0
c0010593:	68 c9 04 01 c0       	push   0xc00104c9
c0010598:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001059e:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00105a8:	e8 eb 44 00 00       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c00105ad:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00105b7:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00105c1:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00105cb:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00105d5:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00105df:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00105e9:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00105f3:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c00105fd:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010607:	83 c4 1c             	add    esp,0x1c
c001060a:	c3                   	ret    

c001060b <KeRand()>:
c001060b:	69 05 88 69 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0026988,0x2875
c0010615:	53                   	push   ebx
c0010616:	69 0d 8c 69 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002698c,0xa2e7b175
c0010620:	5b                   	pop    ebx
c0010621:	01 c1                	add    ecx,eax
c0010623:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010628:	f7 25 88 69 02 c0    	mul    DWORD PTR ds:0xc0026988
c001062e:	01 ca                	add    edx,ecx
c0010630:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010635:	83 d2 00             	adc    edx,0x0
c0010638:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001063d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0010643:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010647:	89 15 8c 69 02 c0    	mov    DWORD PTR ds:0xc002698c,edx
c001064d:	c3                   	ret    

c001064e <KeSeedRand(unsigned int)>:
c001064e:	53                   	push   ebx
c001064f:	83 ec 08             	sub    esp,0x8
c0010652:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010656:	e8 74 67 00 00       	call   c0016dcf <HalGetRand()>
c001065b:	c7 05 8c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002698c,0x0
c0010665:	31 d8                	xor    eax,ebx
c0010667:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001066c:	e8 9a ff ff ff       	call   c001060b <KeRand()>
c0010671:	83 c4 08             	add    esp,0x8
c0010674:	5b                   	pop    ebx
c0010675:	eb 94                	jmp    c001060b <KeRand()>

c0010677 <KeInitRand()>:
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	e8 41 65 00 00       	call   c0016bc0 <HalQueryPerformanceCounter()>
c001067f:	0f 20 da             	mov    edx,cr3
c0010682:	0f 22 da             	mov    cr3,edx
c0010685:	0f 20 da             	mov    edx,cr3
c0010688:	0f 22 da             	mov    cr3,edx
c001068b:	0f 20 da             	mov    edx,cr3
c001068e:	0f 22 da             	mov    cr3,edx
c0010691:	0f 20 da             	mov    edx,cr3
c0010694:	0f 22 da             	mov    cr3,edx
c0010697:	83 ec 0c             	sub    esp,0xc
c001069a:	35 03 8a 95 38       	xor    eax,0x38958a03
c001069f:	50                   	push   eax
c00106a0:	e8 a9 ff ff ff       	call   c001064e <KeSeedRand(unsigned int)>
c00106a5:	83 c4 1c             	add    esp,0x1c
c00106a8:	c3                   	ret    
c00106a9:	66 90                	xchg   ax,ax
c00106ab:	90                   	nop

c00106ac <KeResolveCompatibilitySymbol(char*)>:
c00106ac:	83 ec 0c             	sub    esp,0xc
c00106af:	83 ec 08             	sub    esp,0x8
c00106b2:	68 f4 05 02 c0       	push   0xc00205f4
c00106b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106bb:	e8 80 00 ff ff       	call   c0000740 <strcmp>
c00106c0:	83 c4 10             	add    esp,0x10
c00106c3:	85 c0                	test   eax,eax
c00106c5:	0f 94 c0             	sete   al
c00106c8:	84 c0                	test   al,al
c00106ca:	74 0c                	je     c00106d8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00106cc:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c00106d1:	e9 62 01 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106d6:	66 90                	xchg   ax,ax
c00106d8:	83 ec 08             	sub    esp,0x8
c00106db:	68 fd 05 02 c0       	push   0xc00205fd
c00106e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e4:	e8 57 00 ff ff       	call   c0000740 <strcmp>
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	85 c0                	test   eax,eax
c00106ee:	0f 94 c0             	sete   al
c00106f1:	84 c0                	test   al,al
c00106f3:	74 0b                	je     c0010700 <KeResolveCompatibilitySymbol(char*)+0x54>
c00106f5:	b8 c0 df 01 c0       	mov    eax,0xc001dfc0
c00106fa:	e9 39 01 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106ff:	90                   	nop
c0010700:	83 ec 08             	sub    esp,0x8
c0010703:	68 07 06 02 c0       	push   0xc0020607
c0010708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070c:	e8 2f 00 ff ff       	call   c0000740 <strcmp>
c0010711:	83 c4 10             	add    esp,0x10
c0010714:	85 c0                	test   eax,eax
c0010716:	0f 94 c0             	sete   al
c0010719:	84 c0                	test   al,al
c001071b:	74 0b                	je     c0010728 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001071d:	b8 f4 dc 01 c0       	mov    eax,0xc001dcf4
c0010722:	e9 11 01 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010727:	90                   	nop
c0010728:	83 ec 08             	sub    esp,0x8
c001072b:	68 10 06 02 c0       	push   0xc0020610
c0010730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010734:	e8 07 00 ff ff       	call   c0000740 <strcmp>
c0010739:	83 c4 10             	add    esp,0x10
c001073c:	85 c0                	test   eax,eax
c001073e:	0f 94 c0             	sete   al
c0010741:	84 c0                	test   al,al
c0010743:	74 0b                	je     c0010750 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010745:	b8 bd 04 01 c0       	mov    eax,0xc00104bd
c001074a:	e9 e9 00 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001074f:	90                   	nop
c0010750:	83 ec 08             	sub    esp,0x8
c0010753:	68 23 06 02 c0       	push   0xc0020623
c0010758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075c:	e8 df ff fe ff       	call   c0000740 <strcmp>
c0010761:	83 c4 10             	add    esp,0x10
c0010764:	85 c0                	test   eax,eax
c0010766:	0f 94 c0             	sete   al
c0010769:	84 c0                	test   al,al
c001076b:	74 0b                	je     c0010778 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001076d:	b8 19 fe 00 c0       	mov    eax,0xc000fe19
c0010772:	e9 c1 00 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010777:	90                   	nop
c0010778:	83 ec 08             	sub    esp,0x8
c001077b:	68 40 06 02 c0       	push   0xc0020640
c0010780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010784:	e8 b7 ff fe ff       	call   c0000740 <strcmp>
c0010789:	83 c4 10             	add    esp,0x10
c001078c:	85 c0                	test   eax,eax
c001078e:	0f 94 c0             	sete   al
c0010791:	84 c0                	test   al,al
c0010793:	74 0b                	je     c00107a0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010795:	b8 c0 e0 01 c0       	mov    eax,0xc001e0c0
c001079a:	e9 99 00 00 00       	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001079f:	90                   	nop
c00107a0:	83 ec 08             	sub    esp,0x8
c00107a3:	68 4a 06 02 c0       	push   0xc002064a
c00107a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ac:	e8 8f ff fe ff       	call   c0000740 <strcmp>
c00107b1:	83 c4 10             	add    esp,0x10
c00107b4:	85 c0                	test   eax,eax
c00107b6:	0f 94 c0             	sete   al
c00107b9:	84 c0                	test   al,al
c00107bb:	74 07                	je     c00107c4 <KeResolveCompatibilitySymbol(char*)+0x118>
c00107bd:	b8 40 de 01 c0       	mov    eax,0xc001de40
c00107c2:	eb 74                	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00107c4:	83 ec 08             	sub    esp,0x8
c00107c7:	68 53 06 02 c0       	push   0xc0020653
c00107cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107d0:	e8 6b ff fe ff       	call   c0000740 <strcmp>
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	85 c0                	test   eax,eax
c00107da:	0f 94 c0             	sete   al
c00107dd:	84 c0                	test   al,al
c00107df:	74 07                	je     c00107e8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00107e1:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c00107e6:	eb 50                	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00107e8:	83 ec 08             	sub    esp,0x8
c00107eb:	68 6b 06 02 c0       	push   0xc002066b
c00107f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f4:	e8 47 ff fe ff       	call   c0000740 <strcmp>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	85 c0                	test   eax,eax
c00107fe:	0f 94 c0             	sete   al
c0010801:	84 c0                	test   al,al
c0010803:	74 07                	je     c001080c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010805:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001080a:	eb 2c                	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001080c:	83 ec 08             	sub    esp,0x8
c001080f:	68 78 06 02 c0       	push   0xc0020678
c0010814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010818:	e8 23 ff fe ff       	call   c0000740 <strcmp>
c001081d:	83 c4 10             	add    esp,0x10
c0010820:	85 c0                	test   eax,eax
c0010822:	0f 94 c0             	sete   al
c0010825:	84 c0                	test   al,al
c0010827:	74 07                	je     c0010830 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010829:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001082e:	eb 08                	jmp    c0010838 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010830:	b8 00 00 00 00       	mov    eax,0x0
c0010835:	8d 76 00             	lea    esi,[esi+0x0]
c0010838:	83 c4 0c             	add    esp,0xc
c001083b:	c3                   	ret    

c001083c <KiSigKill(int)>:
c001083c:	83 ec 0c             	sub    esp,0xc
c001083f:	6a 00                	push   0x0
c0010841:	6a 00                	push   0x0
c0010843:	6a ff                	push   0xffffffff
c0010845:	6a 01                	push   0x1
c0010847:	e8 06 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001084c:	83 c4 1c             	add    esp,0x1c
c001084f:	c3                   	ret    

c0010850 <KiDefaultSignalHandlerIgnore(int)>:
c0010850:	c3                   	ret    

c0010851 <KiDefaultSignalHandlerPause(int)>:
c0010851:	57                   	push   edi
c0010852:	b9 07 00 00 00       	mov    ecx,0x7
c0010857:	56                   	push   esi
c0010858:	be c1 06 02 c0       	mov    esi,0xc00206c1
c001085d:	83 ec 24             	sub    esp,0x24
c0010860:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010864:	fc                   	cld    
c0010865:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010867:	8d 44 24 04          	lea    eax,[esp+0x4]
c001086b:	50                   	push   eax
c001086c:	6a 00                	push   0x0
c001086e:	6a 00                	push   0x0
c0010870:	6a 27                	push   0x27
c0010872:	e8 db 17 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010877:	83 c4 34             	add    esp,0x34
c001087a:	5e                   	pop    esi
c001087b:	5f                   	pop    edi
c001087c:	c3                   	ret    

c001087d <KiDefaultSignalHandlerResume(int)>:
c001087d:	57                   	push   edi
c001087e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010883:	56                   	push   esi
c0010884:	be dd 06 02 c0       	mov    esi,0xc00206dd
c0010889:	83 ec 24             	sub    esp,0x24
c001088c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010890:	fc                   	cld    
c0010891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010893:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010897:	50                   	push   eax
c0010898:	6a 00                	push   0x0
c001089a:	6a 00                	push   0x0
c001089c:	6a 27                	push   0x27
c001089e:	e8 af 17 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00108a3:	83 c4 34             	add    esp,0x34
c00108a6:	5e                   	pop    esi
c00108a7:	5f                   	pop    edi
c00108a8:	c3                   	ret    

c00108a9 <KeDeinitSignals(SigHandlerBlock*)>:
c00108a9:	e9 dd 6f ff ff       	jmp    c000788b <free>

c00108ae <KeInitSignals()>:
c00108ae:	53                   	push   ebx
c00108af:	83 ec 14             	sub    esp,0x14
c00108b2:	68 c8 00 00 00       	push   0xc8
c00108b7:	e8 bf 6f ff ff       	call   c000787b <malloc>
c00108bc:	83 c4 0c             	add    esp,0xc
c00108bf:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00108c9:	89 c3                	mov    ebx,eax
c00108cb:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00108d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00108d8:	6a 20                	push   0x20
c00108da:	6a 00                	push   0x0
c00108dc:	50                   	push   eax
c00108dd:	e8 9e fc fe ff       	call   c0000580 <memset>
c00108e2:	83 c4 0c             	add    esp,0xc
c00108e5:	6a 44                	push   0x44
c00108e7:	6a 00                	push   0x0
c00108e9:	53                   	push   ebx
c00108ea:	e8 91 fc fe ff       	call   c0000580 <memset>
c00108ef:	83 c4 18             	add    esp,0x18
c00108f2:	89 d8                	mov    eax,ebx
c00108f4:	5b                   	pop    ebx
c00108f5:	c3                   	ret    

c00108f6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00108f6:	53                   	push   ebx
c00108f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108fb:	b8 01 00 00 00       	mov    eax,0x1
c0010900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010904:	83 fa 10             	cmp    edx,0x10
c0010907:	7f 1d                	jg     c0010926 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x30>
c0010909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090d:	8d 1c 91             	lea    ebx,[ecx+edx*4]
c0010910:	89 03                	mov    DWORD PTR [ebx],eax
c0010912:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010916:	0f ab d0             	bts    eax,edx
c0010919:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001091c:	31 c0                	xor    eax,eax
c001091e:	c6 84 11 88 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x88],0x0
c0010926:	5b                   	pop    ebx
c0010927:	c3                   	ret    

c0010928 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010928:	55                   	push   ebp
c0010929:	57                   	push   edi
c001092a:	bf 08 00 00 00       	mov    edi,0x8
c001092f:	56                   	push   esi
c0010930:	53                   	push   ebx
c0010931:	83 ec 18             	sub    esp,0x18
c0010934:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010938:	68 fa 06 02 c0       	push   0xc00206fa
c001093d:	e8 27 9d ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0010942:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010948:	83 c4 10             	add    esp,0x10
c001094b:	31 c9                	xor    ecx,ecx
c001094d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010954:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010958:	99                   	cdq    
c0010959:	f7 ff                	idiv   edi
c001095b:	8d 42 20             	lea    eax,[edx+0x20]
c001095e:	8b 74 83 1c          	mov    esi,DWORD PTR [ebx+eax*4+0x1c]
c0010962:	85 f6                	test   esi,esi
c0010964:	75 1a                	jne    c0010980 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010966:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001096a:	89 4c 83 1c          	mov    DWORD PTR [ebx+eax*4+0x1c],ecx
c001096e:	50                   	push   eax
c001096f:	50                   	push   eax
c0010970:	52                   	push   edx
c0010971:	68 0b 07 02 c0       	push   0xc002070b
c0010976:	e8 ee 9c ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	eb 1b                	jmp    c001099b <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010980:	41                   	inc    ecx
c0010981:	83 f9 08             	cmp    ecx,0x8
c0010984:	75 ce                	jne    c0010954 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	be 01 00 00 00       	mov    esi,0x1
c001098e:	68 2c 07 02 c0       	push   0xc002072c
c0010993:	e8 d1 9c ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0010998:	83 c4 10             	add    esp,0x10
c001099b:	83 c4 0c             	add    esp,0xc
c001099e:	89 f0                	mov    eax,esi
c00109a0:	5b                   	pop    ebx
c00109a1:	5e                   	pop    esi
c00109a2:	5f                   	pop    edi
c00109a3:	5d                   	pop    ebp
c00109a4:	c3                   	ret    

c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00109a5:	55                   	push   ebp
c00109a6:	57                   	push   edi
c00109a7:	56                   	push   esi
c00109a8:	53                   	push   ebx
c00109a9:	51                   	push   ecx
c00109aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00109ae:	80 b9 c4 00 00 00 00 	cmp    BYTE PTR [ecx+0xc4],0x0
c00109b5:	0f 84 b4 00 00 00    	je     c0010a6f <KeCheckSignal(SigHandlerBlock*, int*)+0xca>
c00109bb:	31 f6                	xor    esi,esi
c00109bd:	bf 08 00 00 00       	mov    edi,0x8
c00109c2:	8b 99 bc 00 00 00    	mov    ebx,DWORD PTR [ecx+0xbc]
c00109c8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00109cb:	99                   	cdq    
c00109cc:	f7 ff                	idiv   edi
c00109ce:	8b ac 91 9c 00 00 00 	mov    ebp,DWORD PTR [ecx+edx*4+0x9c]
c00109d5:	89 14 24             	mov    DWORD PTR [esp],edx
c00109d8:	85 ed                	test   ebp,ebp
c00109da:	0f 84 a0 00 00 00    	je     c0010a80 <KeCheckSignal(SigHandlerBlock*, int*)+0xdb>
c00109e0:	8b b9 c0 00 00 00    	mov    edi,DWORD PTR [ecx+0xc0]
c00109e6:	be 01 00 00 00       	mov    esi,0x1
c00109eb:	31 c0                	xor    eax,eax
c00109ed:	c4 e2 51 f7 f6       	shlx   esi,esi,ebp
c00109f2:	ba 01 00 00 00       	mov    edx,0x1
c00109f7:	c4 e2 79 f7 d2       	shlx   edx,edx,eax
c00109fc:	85 fa                	test   edx,edi
c00109fe:	74 06                	je     c0010a06 <KeCheckSignal(SigHandlerBlock*, int*)+0x61>
c0010a00:	85 74 81 44          	test   DWORD PTR [ecx+eax*4+0x44],esi
c0010a04:	75 69                	jne    c0010a6f <KeCheckSignal(SigHandlerBlock*, int*)+0xca>
c0010a06:	40                   	inc    eax
c0010a07:	83 f8 11             	cmp    eax,0x11
c0010a0a:	75 e6                	jne    c00109f2 <KeCheckSignal(SigHandlerBlock*, int*)+0x4d>
c0010a0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010a0f:	43                   	inc    ebx
c0010a10:	89 99 bc 00 00 00    	mov    DWORD PTR [ecx+0xbc],ebx
c0010a16:	c7 84 81 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ecx+eax*4+0x9c],0x0
c0010a21:	89 f8                	mov    eax,edi
c0010a23:	c6 81 c4 00 00 00 00 	mov    BYTE PTR [ecx+0xc4],0x0
c0010a2a:	09 f0                	or     eax,esi
c0010a2c:	89 81 c0 00 00 00    	mov    DWORD PTR [ecx+0xc0],eax
c0010a32:	31 c0                	xor    eax,eax
c0010a34:	83 bc 81 9c 00 00 00 00 	cmp    DWORD PTR [ecx+eax*4+0x9c],0x0
c0010a3c:	74 09                	je     c0010a47 <KeCheckSignal(SigHandlerBlock*, int*)+0xa2>
c0010a3e:	c6 81 c4 00 00 00 01 	mov    BYTE PTR [ecx+0xc4],0x1
c0010a45:	eb 06                	jmp    c0010a4d <KeCheckSignal(SigHandlerBlock*, int*)+0xa8>
c0010a47:	40                   	inc    eax
c0010a48:	83 f8 08             	cmp    eax,0x8
c0010a4b:	75 e7                	jne    c0010a34 <KeCheckSignal(SigHandlerBlock*, int*)+0x8f>
c0010a4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010a51:	8b 04 a9             	mov    eax,DWORD PTR [ecx+ebp*4]
c0010a54:	89 2a                	mov    DWORD PTR [edx],ebp
c0010a56:	83 fd 09             	cmp    ebp,0x9
c0010a59:	75 07                	jne    c0010a62 <KeCheckSignal(SigHandlerBlock*, int*)+0xbd>
c0010a5b:	b8 3c 08 01 c0       	mov    eax,0xc001083c
c0010a60:	eb 31                	jmp    c0010a93 <KeCheckSignal(SigHandlerBlock*, int*)+0xee>
c0010a62:	83 f8 01             	cmp    eax,0x1
c0010a65:	75 0c                	jne    c0010a73 <KeCheckSignal(SigHandlerBlock*, int*)+0xce>
c0010a67:	f7 d6                	not    esi
c0010a69:	21 b1 c0 00 00 00    	and    DWORD PTR [ecx+0xc0],esi
c0010a6f:	31 c0                	xor    eax,eax
c0010a71:	eb 20                	jmp    c0010a93 <KeCheckSignal(SigHandlerBlock*, int*)+0xee>
c0010a73:	85 c0                	test   eax,eax
c0010a75:	75 1c                	jne    c0010a93 <KeCheckSignal(SigHandlerBlock*, int*)+0xee>
c0010a77:	8b 04 ad 40 1b 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde4c0]
c0010a7e:	eb 13                	jmp    c0010a93 <KeCheckSignal(SigHandlerBlock*, int*)+0xee>
c0010a80:	43                   	inc    ebx
c0010a81:	46                   	inc    esi
c0010a82:	89 99 bc 00 00 00    	mov    DWORD PTR [ecx+0xbc],ebx
c0010a88:	83 fe 08             	cmp    esi,0x8
c0010a8b:	0f 85 31 ff ff ff    	jne    c00109c2 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010a91:	eb dc                	jmp    c0010a6f <KeCheckSignal(SigHandlerBlock*, int*)+0xca>
c0010a93:	5a                   	pop    edx
c0010a94:	5b                   	pop    ebx
c0010a95:	5e                   	pop    esi
c0010a96:	5f                   	pop    edi
c0010a97:	5d                   	pop    ebp
c0010a98:	c3                   	ret    

c0010a99 <KiCheckSignalZ>:
c0010a99:	83 ec 10             	sub    esp,0x10
c0010a9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010aa0:	50                   	push   eax
c0010aa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010aa6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010aa9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010aaf:	e8 f1 fe ff ff       	call   c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010ab4:	5a                   	pop    edx
c0010ab5:	31 d2                	xor    edx,edx
c0010ab7:	59                   	pop    ecx
c0010ab8:	85 c0                	test   eax,eax
c0010aba:	74 19                	je     c0010ad5 <KiCheckSignalZ+0x3c>
c0010abc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ac2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010ac5:	89 02                	mov    DWORD PTR [edx],eax
c0010ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010acb:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010ad2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010ad5:	89 d0                	mov    eax,edx
c0010ad7:	83 c4 10             	add    esp,0x10
c0010ada:	c3                   	ret    

c0010adb <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010adb:	56                   	push   esi
c0010adc:	53                   	push   ebx
c0010add:	bb 01 00 00 00       	mov    ebx,0x1
c0010ae2:	52                   	push   edx
c0010ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ae7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010aeb:	c4 e2 79 f7 db       	shlx   ebx,ebx,eax
c0010af0:	83 f8 10             	cmp    eax,0x10
c0010af3:	7f 08                	jg     c0010afd <KeCompleteSignal(SigHandlerBlock*, int)+0x22>
c0010af5:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010afb:	75 10                	jne    c0010b0d <KeCompleteSignal(SigHandlerBlock*, int)+0x32>
c0010afd:	83 ec 0c             	sub    esp,0xc
c0010b00:	68 3d 07 02 c0       	push   0xc002073d
c0010b05:	e8 b3 f9 ff ff       	call   c00104bd <KePanic(char const*)>
c0010b0a:	83 c4 10             	add    esp,0x10
c0010b0d:	f7 d3                	not    ebx
c0010b0f:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010b15:	58                   	pop    eax
c0010b16:	5b                   	pop    ebx
c0010b17:	5e                   	pop    esi
c0010b18:	c3                   	ret    

c0010b19 <KiFinishSignalZ>:
c0010b19:	53                   	push   ebx
c0010b1a:	83 ec 10             	sub    esp,0x10
c0010b1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b21:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b2c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010b32:	e8 a4 ff ff ff       	call   c0010adb <KeCompleteSignal(SigHandlerBlock*, int)>
c0010b37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010b3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010b44:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010b4b:	83 c4 18             	add    esp,0x18
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <SysSeekDir(regs*)>:
c0010b50:	31 c0                	xor    eax,eax
c0010b52:	31 d2                	xor    edx,edx
c0010b54:	c3                   	ret    

c0010b55 <SysTellDir(regs*)>:
c0010b55:	31 c0                	xor    eax,eax
c0010b57:	31 d2                	xor    edx,edx
c0010b59:	c3                   	ret    

c0010b5a <SysVerify(regs*)>:
c0010b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b5e:	31 d2                	xor    edx,edx
c0010b60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010b63:	c3                   	ret    

c0010b64 <SysGetArgc(regs*)>:
c0010b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b6c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010b72:	99                   	cdq    
c0010b73:	c3                   	ret    

c0010b74 <SysTTYName(regs*)>:
c0010b74:	b8 01 00 00 00       	mov    eax,0x1
c0010b79:	31 d2                	xor    edx,edx
c0010b7b:	c3                   	ret    

c0010b7c <SysFormatDisk(regs*)>:
c0010b7c:	56                   	push   esi
c0010b7d:	53                   	push   ebx
c0010b7e:	83 ec 04             	sub    esp,0x4
c0010b81:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c0010b87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b8b:	eb 25                	jmp    c0010bb2 <SysFormatDisk(regs*)+0x36>
c0010b8d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b95:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010b98:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0010b9b:	50                   	push   eax
c0010b9c:	ff 34 85 20 64 02 c0 	push   DWORD PTR [eax*4-0x3ffd9be0]
c0010ba3:	53                   	push   ebx
c0010ba4:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010ba7:	83 c4 20             	add    esp,0x20
c0010baa:	83 f8 08             	cmp    eax,0x8
c0010bad:	75 21                	jne    c0010bd0 <SysFormatDisk(regs*)+0x54>
c0010baf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010bb2:	85 db                	test   ebx,ebx
c0010bb4:	75 d7                	jne    c0010b8d <SysFormatDisk(regs*)+0x11>
c0010bb6:	c5 f9 6f 05 a0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207a0
c0010bbe:	c5 f9 7e c1          	vmovd  ecx,xmm0
c0010bc2:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010bc8:	83 c4 04             	add    esp,0x4
c0010bcb:	89 c8                	mov    eax,ecx
c0010bcd:	5b                   	pop    ebx
c0010bce:	5e                   	pop    esi
c0010bcf:	c3                   	ret    
c0010bd0:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0010bd4:	c5 f9 7e c1          	vmovd  ecx,xmm0
c0010bd8:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010bde:	85 c0                	test   eax,eax
c0010be0:	74 e6                	je     c0010bc8 <SysFormatDisk(regs*)+0x4c>
c0010be2:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0010bea:	c5 f9 7e c1          	vmovd  ecx,xmm0
c0010bee:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010bf4:	83 f8 09             	cmp    eax,0x9
c0010bf7:	74 cf                	je     c0010bc8 <SysFormatDisk(regs*)+0x4c>
c0010bf9:	c5 f9 6f 05 c0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207c0
c0010c01:	eb bb                	jmp    c0010bbe <SysFormatDisk(regs*)+0x42>

c0010c03 <SysSetDiskVolumeLabel(regs*)>:
c0010c03:	57                   	push   edi
c0010c04:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010c09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c0e:	56                   	push   esi
c0010c0f:	53                   	push   ebx
c0010c10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c14:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010c17:	83 f9 19             	cmp    ecx,0x19
c0010c1a:	77 29                	ja     c0010c45 <SysSetDiskVolumeLabel(regs*)+0x42>
c0010c1c:	8b 34 8d 20 64 02 c0 	mov    esi,DWORD PTR [ecx*4-0x3ffd9be0]
c0010c23:	85 f6                	test   esi,esi
c0010c25:	74 1e                	je     c0010c45 <SysSetDiskVolumeLabel(regs*)+0x42>
c0010c27:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c2a:	85 ff                	test   edi,edi
c0010c2c:	74 17                	je     c0010c45 <SysSetDiskVolumeLabel(regs*)+0x42>
c0010c2e:	8b 9e 74 01 00 00    	mov    ebx,DWORD PTR [esi+0x174]
c0010c34:	85 db                	test   ebx,ebx
c0010c36:	74 0d                	je     c0010c45 <SysSetDiskVolumeLabel(regs*)+0x42>
c0010c38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c3a:	57                   	push   edi
c0010c3b:	51                   	push   ecx
c0010c3c:	56                   	push   esi
c0010c3d:	53                   	push   ebx
c0010c3e:	ff 50 58             	call   DWORD PTR [eax+0x58]
c0010c41:	99                   	cdq    
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	5b                   	pop    ebx
c0010c46:	5e                   	pop    esi
c0010c47:	5f                   	pop    edi
c0010c48:	c3                   	ret    

c0010c49 <SysGetDiskVolumeLabel(regs*)>:
c0010c49:	55                   	push   ebp
c0010c4a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010c4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c54:	57                   	push   edi
c0010c55:	56                   	push   esi
c0010c56:	53                   	push   ebx
c0010c57:	83 ec 0c             	sub    esp,0xc
c0010c5a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010c5e:	8b 4f 20             	mov    ecx,DWORD PTR [edi+0x20]
c0010c61:	83 f9 19             	cmp    ecx,0x19
c0010c64:	77 34                	ja     c0010c9a <SysGetDiskVolumeLabel(regs*)+0x51>
c0010c66:	8b 34 8d 20 64 02 c0 	mov    esi,DWORD PTR [ecx*4-0x3ffd9be0]
c0010c6d:	85 f6                	test   esi,esi
c0010c6f:	74 29                	je     c0010c9a <SysGetDiskVolumeLabel(regs*)+0x51>
c0010c71:	8b 5f 24             	mov    ebx,DWORD PTR [edi+0x24]
c0010c74:	85 db                	test   ebx,ebx
c0010c76:	74 22                	je     c0010c9a <SysGetDiskVolumeLabel(regs*)+0x51>
c0010c78:	8b 6f 28             	mov    ebp,DWORD PTR [edi+0x28]
c0010c7b:	85 ed                	test   ebp,ebp
c0010c7d:	74 1b                	je     c0010c9a <SysGetDiskVolumeLabel(regs*)+0x51>
c0010c7f:	8b be 74 01 00 00    	mov    edi,DWORD PTR [esi+0x174]
c0010c85:	85 ff                	test   edi,edi
c0010c87:	74 11                	je     c0010c9a <SysGetDiskVolumeLabel(regs*)+0x51>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	8b 07                	mov    eax,DWORD PTR [edi]
c0010c8e:	55                   	push   ebp
c0010c8f:	53                   	push   ebx
c0010c90:	51                   	push   ecx
c0010c91:	56                   	push   esi
c0010c92:	57                   	push   edi
c0010c93:	ff 50 54             	call   DWORD PTR [eax+0x54]
c0010c96:	99                   	cdq    
c0010c97:	83 c4 20             	add    esp,0x20
c0010c9a:	83 c4 0c             	add    esp,0xc
c0010c9d:	5b                   	pop    ebx
c0010c9e:	5e                   	pop    esi
c0010c9f:	5f                   	pop    edi
c0010ca0:	5d                   	pop    ebp
c0010ca1:	c3                   	ret    

c0010ca2 <SysShutdown(regs*)>:
c0010ca2:	53                   	push   ebx
c0010ca3:	83 ec 18             	sub    esp,0x18
c0010ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010caa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cad:	85 c0                	test   eax,eax
c0010caf:	74 1f                	je     c0010cd0 <SysShutdown(regs*)+0x2e>
c0010cb1:	83 f8 01             	cmp    eax,0x1
c0010cb4:	74 66                	je     c0010d1c <SysShutdown(regs*)+0x7a>
c0010cb6:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0010cba:	c5 f9 7e c3          	vmovd  ebx,xmm0
c0010cbe:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010cc4:	83 f8 02             	cmp    eax,0x2
c0010cc7:	74 30                	je     c0010cf9 <SysShutdown(regs*)+0x57>
c0010cc9:	83 c4 18             	add    esp,0x18
c0010ccc:	89 d8                	mov    eax,ebx
c0010cce:	5b                   	pop    ebx
c0010ccf:	c3                   	ret    
c0010cd0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cd7:	6a 00                	push   0x0
c0010cd9:	6a 00                	push   0x0
c0010cdb:	6a 00                	push   0x0
c0010cdd:	50                   	push   eax
c0010cde:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010ce1:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0010ce5:	c5 f9 7e c3          	vmovd  ebx,xmm0
c0010ce9:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	89 d8                	mov    eax,ebx
c0010cf4:	83 c4 18             	add    esp,0x18
c0010cf7:	5b                   	pop    ebx
c0010cf8:	c3                   	ret    
c0010cf9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010cfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010d04:	6a 00                	push   0x0
c0010d06:	6a 00                	push   0x0
c0010d08:	6a 01                	push   0x1
c0010d0a:	50                   	push   eax
c0010d0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d15:	83 c4 18             	add    esp,0x18
c0010d18:	89 d8                	mov    eax,ebx
c0010d1a:	5b                   	pop    ebx
c0010d1b:	c3                   	ret    
c0010d1c:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010d21:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0010d25:	c5 f9 7e c3          	vmovd  ebx,xmm0
c0010d29:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 96                	je     c0010cc9 <SysShutdown(regs*)+0x27>
c0010d33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d37:	ff d0                	call   eax
c0010d39:	eb d6                	jmp    c0010d11 <SysShutdown(regs*)+0x6f>

c0010d3b <SysRealpath(regs*)>:
c0010d3b:	53                   	push   ebx
c0010d3c:	83 ec 08             	sub    esp,0x8
c0010d3f:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0010d47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010d4b:	c5 f9 7e c0          	vmovd  eax,xmm0
c0010d4f:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010d55:	8b 59 28             	mov    ebx,DWORD PTR [ecx+0x28]
c0010d58:	85 db                	test   ebx,ebx
c0010d5a:	74 07                	je     c0010d63 <SysRealpath(regs*)+0x28>
c0010d5c:	8b 49 24             	mov    ecx,DWORD PTR [ecx+0x24]
c0010d5f:	85 c9                	test   ecx,ecx
c0010d61:	75 05                	jne    c0010d68 <SysRealpath(regs*)+0x2d>
c0010d63:	83 c4 08             	add    esp,0x8
c0010d66:	5b                   	pop    ebx
c0010d67:	c3                   	ret    
c0010d68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d6d:	83 ec 04             	sub    esp,0x4
c0010d70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d73:	05 0c 01 00 00       	add    eax,0x10c
c0010d78:	50                   	push   eax
c0010d79:	53                   	push   ebx
c0010d7a:	51                   	push   ecx
c0010d7b:	e8 a8 9c ff ff       	call   c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0010d87:	83 c4 08             	add    esp,0x8
c0010d8a:	c5 f9 7e c0          	vmovd  eax,xmm0
c0010d8e:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010d94:	5b                   	pop    ebx
c0010d95:	c3                   	ret    

c0010d96 <SysReadDir(regs*)>:
c0010d96:	53                   	push   ebx
c0010d97:	83 ec 18             	sub    esp,0x18
c0010d9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d9e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010da1:	83 f8 02             	cmp    eax,0x2
c0010da4:	76 67                	jbe    c0010e0d <SysReadDir(regs*)+0x77>
c0010da6:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010dad:	77 68                	ja     c0010e17 <SysReadDir(regs*)+0x81>
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	50                   	push   eax
c0010db3:	e8 af 84 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	85 c0                	test   eax,eax
c0010dbd:	74 58                	je     c0010e17 <SysReadDir(regs*)+0x81>
c0010dbf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010dc7:	83 ec 0c             	sub    esp,0xc
c0010dca:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dcc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010dd0:	51                   	push   ecx
c0010dd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010dd4:	6a 00                	push   0x0
c0010dd6:	68 10 01 00 00       	push   0x110
c0010ddb:	50                   	push   eax
c0010ddc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010ddf:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0010de3:	89 c1                	mov    ecx,eax
c0010de5:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010deb:	c5 f9 7e c0          	vmovd  eax,xmm0
c0010def:	83 c4 20             	add    esp,0x20
c0010df2:	85 c9                	test   ecx,ecx
c0010df4:	74 2f                	je     c0010e25 <SysReadDir(regs*)+0x8f>
c0010df6:	c5 f9 6f 05 c0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207c0
c0010dfe:	c5 f9 7e c0          	vmovd  eax,xmm0
c0010e02:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010e08:	83 f9 07             	cmp    ecx,0x7
c0010e0b:	75 18                	jne    c0010e25 <SysReadDir(regs*)+0x8f>
c0010e0d:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0010e15:	eb 04                	jmp    c0010e1b <SysReadDir(regs*)+0x85>
c0010e17:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0010e1b:	c5 f9 7e c0          	vmovd  eax,xmm0
c0010e1f:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0010e25:	83 c4 18             	add    esp,0x18
c0010e28:	5b                   	pop    ebx
c0010e29:	c3                   	ret    

c0010e2a <SysIsATTY(regs*)>:
c0010e2a:	83 ec 0c             	sub    esp,0xc
c0010e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e31:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e34:	83 f8 02             	cmp    eax,0x2
c0010e37:	76 07                	jbe    c0010e40 <SysIsATTY(regs*)+0x16>
c0010e39:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e3e:	75 26                	jne    c0010e66 <SysIsATTY(regs*)+0x3c>
c0010e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010e4e:	85 c0                	test   eax,eax
c0010e50:	74 24                	je     c0010e76 <SysIsATTY(regs*)+0x4c>
c0010e52:	83 ec 0c             	sub    esp,0xc
c0010e55:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e57:	50                   	push   eax
c0010e58:	ff 12                	call   DWORD PTR [edx]
c0010e5a:	31 d2                	xor    edx,edx
c0010e5c:	0f b6 c0             	movzx  eax,al
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	83 c4 0c             	add    esp,0xc
c0010e65:	c3                   	ret    
c0010e66:	83 ec 0c             	sub    esp,0xc
c0010e69:	50                   	push   eax
c0010e6a:	e8 f8 83 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	85 c0                	test   eax,eax
c0010e74:	75 dc                	jne    c0010e52 <SysIsATTY(regs*)+0x28>
c0010e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e80:	83 c4 0c             	add    esp,0xc
c0010e83:	c3                   	ret    

c0010e84 <SysSeek(regs*)>:
c0010e84:	56                   	push   esi
c0010e85:	53                   	push   ebx
c0010e86:	83 ec 04             	sub    esp,0x4
c0010e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e8d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e90:	8d 71 fd             	lea    esi,[ecx-0x3]
c0010e93:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0010e99:	77 33                	ja     c0010ece <SysSeek(regs*)+0x4a>
c0010e9b:	83 ec 0c             	sub    esp,0xc
c0010e9e:	51                   	push   ecx
c0010e9f:	e8 c3 83 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0010ea4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010ea7:	83 c4 0c             	add    esp,0xc
c0010eaa:	31 db                	xor    ebx,ebx
c0010eac:	53                   	push   ebx
c0010ead:	51                   	push   ecx
c0010eae:	50                   	push   eax
c0010eaf:	e8 96 9e ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0010eb4:	83 c4 10             	add    esp,0x10
c0010eb7:	85 c0                	test   eax,eax
c0010eb9:	0f 95 c0             	setne  al
c0010ebc:	31 d2                	xor    edx,edx
c0010ebe:	0f b6 c0             	movzx  eax,al
c0010ec1:	f7 d8                	neg    eax
c0010ec3:	83 d2 00             	adc    edx,0x0
c0010ec6:	83 c4 04             	add    esp,0x4
c0010ec9:	f7 da                	neg    edx
c0010ecb:	5b                   	pop    ebx
c0010ecc:	5e                   	pop    esi
c0010ecd:	c3                   	ret    
c0010ece:	83 c4 04             	add    esp,0x4
c0010ed1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ed6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010edb:	5b                   	pop    ebx
c0010edc:	5e                   	pop    esi
c0010edd:	c3                   	ret    

c0010ede <SysTell(regs*)>:
c0010ede:	53                   	push   ebx
c0010edf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ee4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ee9:	83 ec 08             	sub    esp,0x8
c0010eec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ef0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010ef3:	83 f9 02             	cmp    ecx,0x2
c0010ef6:	76 1c                	jbe    c0010f14 <SysTell(regs*)+0x36>
c0010ef8:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010efe:	76 19                	jbe    c0010f19 <SysTell(regs*)+0x3b>
c0010f00:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010f03:	31 d2                	xor    edx,edx
c0010f05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f12:	31 c0                	xor    eax,eax
c0010f14:	83 c4 08             	add    esp,0x8
c0010f17:	5b                   	pop    ebx
c0010f18:	c3                   	ret    
c0010f19:	83 ec 0c             	sub    esp,0xc
c0010f1c:	51                   	push   ecx
c0010f1d:	e8 45 83 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0010f22:	5a                   	pop    edx
c0010f23:	59                   	pop    ecx
c0010f24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f27:	50                   	push   eax
c0010f28:	e8 73 9e ff ff       	call   c000ada0 <File::tell(unsigned long long*)>
c0010f2d:	83 c4 10             	add    esp,0x10
c0010f30:	85 c0                	test   eax,eax
c0010f32:	0f 95 c0             	setne  al
c0010f35:	31 d2                	xor    edx,edx
c0010f37:	0f b6 c0             	movzx  eax,al
c0010f3a:	f7 d8                	neg    eax
c0010f3c:	83 d2 00             	adc    edx,0x0
c0010f3f:	83 c4 08             	add    esp,0x8
c0010f42:	f7 da                	neg    edx
c0010f44:	5b                   	pop    ebx
c0010f45:	c3                   	ret    

c0010f46 <SysSize(regs*)>:
c0010f46:	53                   	push   ebx
c0010f47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f51:	83 ec 18             	sub    esp,0x18
c0010f54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f58:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010f5b:	83 f9 02             	cmp    ecx,0x2
c0010f5e:	76 1c                	jbe    c0010f7c <SysSize(regs*)+0x36>
c0010f60:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010f66:	76 19                	jbe    c0010f81 <SysSize(regs*)+0x3b>
c0010f68:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010f6b:	31 d2                	xor    edx,edx
c0010f6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f7a:	31 c0                	xor    eax,eax
c0010f7c:	83 c4 18             	add    esp,0x18
c0010f7f:	5b                   	pop    ebx
c0010f80:	c3                   	ret    
c0010f81:	83 ec 0c             	sub    esp,0xc
c0010f84:	51                   	push   ecx
c0010f85:	e8 dd 82 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0010f8a:	83 c4 0c             	add    esp,0xc
c0010f8d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010f91:	52                   	push   edx
c0010f92:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f95:	50                   	push   eax
c0010f96:	e8 9d 9f ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	85 c0                	test   eax,eax
c0010fa0:	0f 95 c0             	setne  al
c0010fa3:	31 d2                	xor    edx,edx
c0010fa5:	0f b6 c0             	movzx  eax,al
c0010fa8:	f7 d8                	neg    eax
c0010faa:	83 d2 00             	adc    edx,0x0
c0010fad:	83 c4 18             	add    esp,0x18
c0010fb0:	f7 da                	neg    edx
c0010fb2:	5b                   	pop    ebx
c0010fb3:	c3                   	ret    

c0010fb4 <SysSizeFromFilename(regs*)>:
c0010fb4:	57                   	push   edi
c0010fb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fbf:	56                   	push   esi
c0010fc0:	53                   	push   ebx
c0010fc1:	83 ec 10             	sub    esp,0x10
c0010fc4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010fc8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010fcb:	83 fb 02             	cmp    ebx,0x2
c0010fce:	76 1c                	jbe    c0010fec <SysSizeFromFilename(regs*)+0x38>
c0010fd0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010fd6:	76 1b                	jbe    c0010ff3 <SysSizeFromFilename(regs*)+0x3f>
c0010fd8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010fdb:	31 d2                	xor    edx,edx
c0010fdd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fe3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fea:	31 c0                	xor    eax,eax
c0010fec:	83 c4 10             	add    esp,0x10
c0010fef:	5b                   	pop    ebx
c0010ff0:	5e                   	pop    esi
c0010ff1:	5f                   	pop    edi
c0010ff2:	c3                   	ret    
c0010ff3:	83 ec 0c             	sub    esp,0xc
c0010ff6:	68 14 01 00 00       	push   0x114
c0010ffb:	e8 7b 68 ff ff       	call   c000787b <malloc>
c0011000:	83 c4 0c             	add    esp,0xc
c0011003:	89 c7                	mov    edi,eax
c0011005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001100a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001100d:	53                   	push   ebx
c001100e:	57                   	push   edi
c001100f:	e8 be 9b ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0011014:	83 c4 0c             	add    esp,0xc
c0011017:	8d 44 24 13          	lea    eax,[esp+0x13]
c001101b:	50                   	push   eax
c001101c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001101f:	57                   	push   edi
c0011020:	e8 13 9f ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	89 c3                	mov    ebx,eax
c001102a:	85 ff                	test   edi,edi
c001102c:	74 0c                	je     c001103a <SysSizeFromFilename(regs*)+0x86>
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	8b 07                	mov    eax,DWORD PTR [edi]
c0011033:	57                   	push   edi
c0011034:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	31 c0                	xor    eax,eax
c001103c:	85 db                	test   ebx,ebx
c001103e:	0f 95 c0             	setne  al
c0011041:	31 d2                	xor    edx,edx
c0011043:	f7 d8                	neg    eax
c0011045:	83 d2 00             	adc    edx,0x0
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	5b                   	pop    ebx
c001104c:	f7 da                	neg    edx
c001104e:	5e                   	pop    esi
c001104f:	5f                   	pop    edi
c0011050:	c3                   	ret    

c0011051 <SysClose(regs*)>:
c0011051:	53                   	push   ebx
c0011052:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0011056:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c001105c:	83 ec 08             	sub    esp,0x8
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011066:	c5 f9 7e c0          	vmovd  eax,xmm0
c001106a:	83 f9 02             	cmp    ecx,0x2
c001106d:	76 47                	jbe    c00110b6 <SysClose(regs*)+0x65>
c001106f:	8d 99 00 01 00 f0    	lea    ebx,[ecx-0xfffff00]
c0011075:	83 fb 01             	cmp    ebx,0x1
c0011078:	76 2e                	jbe    c00110a8 <SysClose(regs*)+0x57>
c001107a:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011080:	77 34                	ja     c00110b6 <SysClose(regs*)+0x65>
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	51                   	push   ecx
c0011086:	e8 dc 81 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c001108b:	89 c3                	mov    ebx,eax
c001108d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011090:	e8 55 9c ff ff       	call   c000acea <File::close()>
c0011095:	83 c4 10             	add    esp,0x10
c0011098:	85 db                	test   ebx,ebx
c001109a:	74 0c                	je     c00110a8 <SysClose(regs*)+0x57>
c001109c:	83 ec 0c             	sub    esp,0xc
c001109f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110a1:	53                   	push   ebx
c00110a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c00110ac:	c5 f9 7e c0          	vmovd  eax,xmm0
c00110b0:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c00110b6:	83 c4 08             	add    esp,0x8
c00110b9:	5b                   	pop    ebx
c00110ba:	c3                   	ret    

c00110bb <SysOpenDir(regs*)>:
c00110bb:	56                   	push   esi
c00110bc:	53                   	push   ebx
c00110bd:	83 ec 04             	sub    esp,0x4
c00110c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110c7:	85 c0                	test   eax,eax
c00110c9:	74 65                	je     c0011130 <SysOpenDir(regs*)+0x75>
c00110cb:	83 ec 0c             	sub    esp,0xc
c00110ce:	68 14 01 00 00       	push   0x114
c00110d3:	e8 a3 67 ff ff       	call   c000787b <malloc>
c00110d8:	83 c4 0c             	add    esp,0xc
c00110db:	89 c6                	mov    esi,eax
c00110dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00110e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110e8:	56                   	push   esi
c00110e9:	e8 08 a0 ff ff       	call   c000b0f6 <Directory::Directory(char const*, Process*)>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	85 f6                	test   esi,esi
c00110f3:	74 3b                	je     c0011130 <SysOpenDir(regs*)+0x75>
c00110f5:	83 ec 0c             	sub    esp,0xc
c00110f8:	56                   	push   esi
c00110f9:	e8 b2 a0 ff ff       	call   c000b1b0 <Directory::open()>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	85 c0                	test   eax,eax
c0011103:	75 2b                	jne    c0011130 <SysOpenDir(regs*)+0x75>
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	56                   	push   esi
c0011109:	e8 64 7e ff ff       	call   c0008f72 <UnixFile::getFileDescriptor()>
c001110e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0011118:	89 02                	mov    DWORD PTR [edx],eax
c001111a:	c1 f8 1f             	sar    eax,0x1f
c001111d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011120:	83 c4 04             	add    esp,0x4
c0011123:	c5 f9 7e c0          	vmovd  eax,xmm0
c0011127:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c001112d:	5b                   	pop    ebx
c001112e:	5e                   	pop    esi
c001112f:	c3                   	ret    
c0011130:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0011134:	83 c4 04             	add    esp,0x4
c0011137:	c5 f9 7e c0          	vmovd  eax,xmm0
c001113b:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0011141:	5b                   	pop    ebx
c0011142:	5e                   	pop    esi
c0011143:	c3                   	ret    

c0011144 <SysMakeDir(regs*)>:
c0011144:	56                   	push   esi
c0011145:	53                   	push   ebx
c0011146:	83 ec 10             	sub    esp,0x10
c0011149:	68 14 01 00 00       	push   0x114
c001114e:	e8 28 67 ff ff       	call   c000787b <malloc>
c0011153:	83 c4 0c             	add    esp,0xc
c0011156:	89 c3                	mov    ebx,eax
c0011158:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001115d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011164:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011167:	53                   	push   ebx
c0011168:	e8 89 9f ff ff       	call   c000b0f6 <Directory::Directory(char const*, Process*)>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	85 db                	test   ebx,ebx
c0011172:	74 2c                	je     c00111a0 <SysMakeDir(regs*)+0x5c>
c0011174:	83 ec 0c             	sub    esp,0xc
c0011177:	53                   	push   ebx
c0011178:	e8 13 a2 ff ff       	call   c000b390 <Directory::create()>
c001117d:	89 c6                	mov    esi,eax
c001117f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011181:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011184:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	31 c0                	xor    eax,eax
c001118c:	85 f6                	test   esi,esi
c001118e:	0f 95 c0             	setne  al
c0011191:	31 d2                	xor    edx,edx
c0011193:	f7 d8                	neg    eax
c0011195:	83 d2 00             	adc    edx,0x0
c0011198:	83 c4 04             	add    esp,0x4
c001119b:	f7 da                	neg    edx
c001119d:	5b                   	pop    ebx
c001119e:	5e                   	pop    esi
c001119f:	c3                   	ret    
c00111a0:	83 c4 04             	add    esp,0x4
c00111a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111ad:	5b                   	pop    ebx
c00111ae:	5e                   	pop    esi
c00111af:	c3                   	ret    

c00111b0 <SysCloseDir(regs*)>:
c00111b0:	57                   	push   edi
c00111b1:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c00111b5:	56                   	push   esi
c00111b6:	c5 f9 7e c6          	vmovd  esi,xmm0
c00111ba:	53                   	push   ebx
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	c4 e3 79 16 c3 01    	vpextrd ebx,xmm0,0x1
c00111c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00111cb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00111d1:	77 34                	ja     c0011207 <SysCloseDir(regs*)+0x57>
c00111d3:	83 ec 0c             	sub    esp,0xc
c00111d6:	50                   	push   eax
c00111d7:	e8 8b 80 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c00111dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00111df:	89 c7                	mov    edi,eax
c00111e1:	e8 26 a0 ff ff       	call   c000b20c <Directory::close()>
c00111e6:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c00111ea:	83 c4 10             	add    esp,0x10
c00111ed:	c5 f9 7e c6          	vmovd  esi,xmm0
c00111f1:	c4 e3 79 16 c3 01    	vpextrd ebx,xmm0,0x1
c00111f7:	85 ff                	test   edi,edi
c00111f9:	74 0c                	je     c0011207 <SysCloseDir(regs*)+0x57>
c00111fb:	83 ec 0c             	sub    esp,0xc
c00111fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0011200:	57                   	push   edi
c0011201:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	89 f0                	mov    eax,esi
c0011209:	89 da                	mov    edx,ebx
c001120b:	5b                   	pop    ebx
c001120c:	5e                   	pop    esi
c001120d:	5f                   	pop    edi
c001120e:	c3                   	ret    

c001120f <SysWait(regs*)>:
c001120f:	83 ec 10             	sub    esp,0x10
c0011212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011216:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011219:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001121c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001121f:	e8 bc 3c 00 00       	call   c0014ee0 <waitTask(int, int*, int)>
c0011224:	83 c4 1c             	add    esp,0x1c
c0011227:	99                   	cdq    
c0011228:	c3                   	ret    

c0011229 <SysNotImpl(regs*)>:
c0011229:	83 ec 18             	sub    esp,0x18
c001122c:	68 4e 07 02 c0       	push   0xc002074e
c0011231:	e8 87 f2 ff ff       	call   c00104bd <KePanic(char const*)>
c0011236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001123b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011240:	83 c4 1c             	add    esp,0x1c
c0011243:	c3                   	ret    

c0011244 <SysPanic(regs*)>:
c0011244:	83 ec 18             	sub    esp,0x18
c0011247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001124b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001124e:	e8 6a f2 ff ff       	call   c00104bd <KePanic(char const*)>
c0011253:	b8 01 00 00 00       	mov    eax,0x1
c0011258:	31 d2                	xor    edx,edx
c001125a:	83 c4 1c             	add    esp,0x1c
c001125d:	c3                   	ret    

c001125e <SysRmdir(regs*)>:
c001125e:	56                   	push   esi
c001125f:	53                   	push   ebx
c0011260:	83 ec 10             	sub    esp,0x10
c0011263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011267:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001126a:	68 14 01 00 00       	push   0x114
c001126f:	e8 07 66 ff ff       	call   c000787b <malloc>
c0011274:	83 c4 0c             	add    esp,0xc
c0011277:	89 c3                	mov    ebx,eax
c0011279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001127e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011281:	56                   	push   esi
c0011282:	53                   	push   ebx
c0011283:	e8 4a 99 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0011288:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001128b:	e8 74 9b ff ff       	call   c000ae04 <File::unlink()>
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	89 c6                	mov    esi,eax
c0011295:	85 db                	test   ebx,ebx
c0011297:	74 0c                	je     c00112a5 <SysRmdir(regs*)+0x47>
c0011299:	83 ec 0c             	sub    esp,0xc
c001129c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129e:	53                   	push   ebx
c001129f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	31 c0                	xor    eax,eax
c00112a7:	85 f6                	test   esi,esi
c00112a9:	0f 95 c0             	setne  al
c00112ac:	31 d2                	xor    edx,edx
c00112ae:	f7 d8                	neg    eax
c00112b0:	83 d2 00             	adc    edx,0x0
c00112b3:	83 c4 04             	add    esp,0x4
c00112b6:	f7 da                	neg    edx
c00112b8:	5b                   	pop    ebx
c00112b9:	5e                   	pop    esi
c00112ba:	c3                   	ret    

c00112bb <SysUnlink(regs*)>:
c00112bb:	56                   	push   esi
c00112bc:	53                   	push   ebx
c00112bd:	83 ec 10             	sub    esp,0x10
c00112c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112c4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00112c7:	68 14 01 00 00       	push   0x114
c00112cc:	e8 aa 65 ff ff       	call   c000787b <malloc>
c00112d1:	83 c4 0c             	add    esp,0xc
c00112d4:	89 c3                	mov    ebx,eax
c00112d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00112de:	56                   	push   esi
c00112df:	53                   	push   ebx
c00112e0:	e8 ed 98 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c00112e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112e8:	e8 17 9b ff ff       	call   c000ae04 <File::unlink()>
c00112ed:	83 c4 10             	add    esp,0x10
c00112f0:	89 c6                	mov    esi,eax
c00112f2:	85 db                	test   ebx,ebx
c00112f4:	74 0c                	je     c0011302 <SysUnlink(regs*)+0x47>
c00112f6:	83 ec 0c             	sub    esp,0xc
c00112f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112fb:	53                   	push   ebx
c00112fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	31 c0                	xor    eax,eax
c0011304:	85 f6                	test   esi,esi
c0011306:	0f 95 c0             	setne  al
c0011309:	31 d2                	xor    edx,edx
c001130b:	f7 d8                	neg    eax
c001130d:	83 d2 00             	adc    edx,0x0
c0011310:	83 c4 04             	add    esp,0x4
c0011313:	f7 da                	neg    edx
c0011315:	5b                   	pop    ebx
c0011316:	5e                   	pop    esi
c0011317:	c3                   	ret    

c0011318 <SysGetArgv(regs*)>:
c0011318:	56                   	push   esi
c0011319:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c001131d:	53                   	push   ebx
c001131e:	c5 f9 7e c0          	vmovd  eax,xmm0
c0011322:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0011328:	83 ec 04             	sub    esp,0x4
c001132b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001132f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011332:	85 c9                	test   ecx,ecx
c0011334:	78 4b                	js     c0011381 <SysGetArgv(regs*)+0x69>
c0011336:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c001133c:	8b 76 3c             	mov    esi,DWORD PTR [esi+0x3c]
c001133f:	3b 8e 16 05 00 00    	cmp    ecx,DWORD PTR [esi+0x516]
c0011345:	7d 3a                	jge    c0011381 <SysGetArgv(regs*)+0x69>
c0011347:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c001134f:	8b 8c 8e 1a 05 00 00 	mov    ecx,DWORD PTR [esi+ecx*4+0x51a]
c0011356:	c5 f9 7e c0          	vmovd  eax,xmm0
c001135a:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0011360:	85 c9                	test   ecx,ecx
c0011362:	74 1d                	je     c0011381 <SysGetArgv(regs*)+0x69>
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	51                   	push   ecx
c0011368:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001136b:	e8 10 f3 fe ff       	call   c0000680 <strcpy>
c0011370:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0011374:	83 c4 10             	add    esp,0x10
c0011377:	c5 f9 7e c0          	vmovd  eax,xmm0
c001137b:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0011381:	83 c4 04             	add    esp,0x4
c0011384:	5b                   	pop    ebx
c0011385:	5e                   	pop    esi
c0011386:	c3                   	ret    

c0011387 <SysUSleep(regs*)>:
c0011387:	56                   	push   esi
c0011388:	31 c0                	xor    eax,eax
c001138a:	53                   	push   ebx
c001138b:	83 ec 14             	sub    esp,0x14
c001138e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011392:	8b 59 28             	mov    ebx,DWORD PTR [ecx+0x28]
c0011395:	8b 49 20             	mov    ecx,DWORD PTR [ecx+0x20]
c0011398:	6a 00                	push   0x0
c001139a:	6a 64                	push   0x64
c001139c:	89 da                	mov    edx,ebx
c001139e:	31 db                	xor    ebx,ebx
c00113a0:	09 c8                	or     eax,ecx
c00113a2:	09 da                	or     edx,ebx
c00113a4:	52                   	push   edx
c00113a5:	50                   	push   eax
c00113a6:	e8 15 cc 00 00       	call   c001dfc0 <__udivdi3>
c00113ab:	83 c4 14             	add    esp,0x14
c00113ae:	50                   	push   eax
c00113af:	e8 fc 3b 00 00       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c00113b4:	83 c4 14             	add    esp,0x14
c00113b7:	31 c0                	xor    eax,eax
c00113b9:	31 d2                	xor    edx,edx
c00113bb:	5b                   	pop    ebx
c00113bc:	5e                   	pop    esi
c00113bd:	c3                   	ret    

c00113be <SysSpawn(regs*)>:
c00113be:	56                   	push   esi
c00113bf:	53                   	push   ebx
c00113c0:	83 ec 04             	sub    esp,0x4
c00113c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113c7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00113ca:	85 f6                	test   esi,esi
c00113cc:	75 0a                	jne    c00113d8 <SysSpawn(regs*)+0x1a>
c00113ce:	83 c4 04             	add    esp,0x4
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	31 d2                	xor    edx,edx
c00113d5:	5b                   	pop    ebx
c00113d6:	5e                   	pop    esi
c00113d7:	c3                   	ret    
c00113d8:	83 ec 0c             	sub    esp,0xc
c00113db:	68 24 07 00 00       	push   0x724
c00113e0:	e8 96 64 ff ff       	call   c000787b <malloc>
c00113e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113e8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	89 c6                	mov    esi,eax
c00113f0:	31 c0                	xor    eax,eax
c00113f2:	85 c9                	test   ecx,ecx
c00113f4:	75 08                	jne    c00113fe <SysSpawn(regs*)+0x40>
c00113f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113fe:	52                   	push   edx
c00113ff:	50                   	push   eax
c0011400:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011403:	56                   	push   esi
c0011404:	e8 63 32 00 00       	call   c001466c <Process::Process(char const*, Process*, char**)>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011413:	75 b9                	jne    c00113ce <SysSpawn(regs*)+0x10>
c0011415:	83 ec 0c             	sub    esp,0xc
c0011418:	56                   	push   esi
c0011419:	e8 6e 37 00 00       	call   c0014b8c <Process::createUserThread()>
c001141e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	83 c4 04             	add    esp,0x4
c0011426:	99                   	cdq    
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	c3                   	ret    

c001142a <SysGetEnv(regs*)>:
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 1c             	sub    esp,0x1c
c0011430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011435:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011439:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001143c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001143f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011442:	e8 00 ef ff ff       	call   c0010347 <Krnl::getProcessTotalEnvCount(Process*)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	39 c7                	cmp    edi,eax
c001144c:	7c 12                	jl     c0011460 <SysGetEnv(regs*)+0x36>
c001144e:	31 c0                	xor    eax,eax
c0011450:	31 d2                	xor    edx,edx
c0011452:	85 f6                	test   esi,esi
c0011454:	74 03                	je     c0011459 <SysGetEnv(regs*)+0x2f>
c0011456:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011459:	83 c4 10             	add    esp,0x10
c001145c:	5b                   	pop    ebx
c001145d:	5e                   	pop    esi
c001145e:	5f                   	pop    edi
c001145f:	c3                   	ret    
c0011460:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011464:	83 ec 04             	sub    esp,0x4
c0011467:	57                   	push   edi
c0011468:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001146e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0011471:	50                   	push   eax
c0011472:	e8 f0 ee ff ff       	call   c0010367 <Krnl::getProcessEnvPair(Process*, int)>
c0011477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001147a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001147e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011482:	83 c4 0c             	add    esp,0xc
c0011485:	85 d2                	test   edx,edx
c0011487:	75 23                	jne    c00114ac <SysGetEnv(regs*)+0x82>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	50                   	push   eax
c001148d:	e8 1e f1 fe ff       	call   c00005b0 <strlen>
c0011492:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011495:	89 c3                	mov    ebx,eax
c0011497:	e8 14 f1 fe ff       	call   c00005b0 <strlen>
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	31 d2                	xor    edx,edx
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00114a8:	5b                   	pop    ebx
c00114a9:	5e                   	pop    esi
c00114aa:	5f                   	pop    edi
c00114ab:	c3                   	ret    
c00114ac:	83 ec 08             	sub    esp,0x8
c00114af:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114b2:	50                   	push   eax
c00114b3:	56                   	push   esi
c00114b4:	e8 c7 f1 fe ff       	call   c0000680 <strcpy>
c00114b9:	58                   	pop    eax
c00114ba:	5a                   	pop    edx
c00114bb:	68 68 07 02 c0       	push   0xc0020768
c00114c0:	56                   	push   esi
c00114c1:	e8 5a f3 fe ff       	call   c0000820 <strcat>
c00114c6:	59                   	pop    ecx
c00114c7:	5b                   	pop    ebx
c00114c8:	57                   	push   edi
c00114c9:	56                   	push   esi
c00114ca:	e8 51 f3 fe ff       	call   c0000820 <strcat>
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	31 c0                	xor    eax,eax
c00114d4:	31 d2                	xor    edx,edx
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	5b                   	pop    ebx
c00114da:	5e                   	pop    esi
c00114db:	5f                   	pop    edi
c00114dc:	c3                   	ret    

c00114dd <SysSetFatAttrib(regs*)>:
c00114dd:	57                   	push   edi
c00114de:	56                   	push   esi
c00114df:	53                   	push   ebx
c00114e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114e4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00114e7:	83 ec 0c             	sub    esp,0xc
c00114ea:	68 14 01 00 00       	push   0x114
c00114ef:	e8 87 63 ff ff       	call   c000787b <malloc>
c00114f4:	83 c4 0c             	add    esp,0xc
c00114f7:	89 c3                	mov    ebx,eax
c00114f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011501:	57                   	push   edi
c0011502:	53                   	push   ebx
c0011503:	e8 ca 96 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0011508:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001150b:	83 c4 0c             	add    esp,0xc
c001150e:	0f b6 d4             	movzx  edx,ah
c0011511:	0f b6 c0             	movzx  eax,al
c0011514:	52                   	push   edx
c0011515:	50                   	push   eax
c0011516:	53                   	push   ebx
c0011517:	e8 82 99 ff ff       	call   c000ae9e <File::chfatattr(unsigned char, unsigned char)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	89 c6                	mov    esi,eax
c0011521:	85 db                	test   ebx,ebx
c0011523:	74 0c                	je     c0011531 <SysSetFatAttrib(regs*)+0x54>
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001152a:	53                   	push   ebx
c001152b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	31 c0                	xor    eax,eax
c0011533:	85 f6                	test   esi,esi
c0011535:	5b                   	pop    ebx
c0011536:	5e                   	pop    esi
c0011537:	0f 95 c0             	setne  al
c001153a:	31 d2                	xor    edx,edx
c001153c:	5f                   	pop    edi
c001153d:	f7 d8                	neg    eax
c001153f:	83 d2 00             	adc    edx,0x0
c0011542:	f7 da                	neg    edx
c0011544:	c3                   	ret    

c0011545 <SysPipe(regs*)>:
c0011545:	57                   	push   edi
c0011546:	56                   	push   esi
c0011547:	53                   	push   ebx
c0011548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001154f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	6a 20                	push   0x20
c0011557:	e8 1f 63 ff ff       	call   c000787b <malloc>
c001155c:	89 c3                	mov    ebx,eax
c001155e:	58                   	pop    eax
c001155f:	5a                   	pop    edx
c0011560:	68 00 50 00 00       	push   0x5000
c0011565:	53                   	push   ebx
c0011566:	e8 85 6c ff ff       	call   c00081f0 <Pipe::Pipe(int)>
c001156b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001156e:	e8 ff 79 ff ff       	call   c0008f72 <UnixFile::getFileDescriptor()>
c0011573:	89 07                	mov    DWORD PTR [edi],eax
c0011575:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011578:	e8 f5 79 ff ff       	call   c0008f72 <UnixFile::getFileDescriptor()>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	31 d2                	xor    edx,edx
c0011582:	89 06                	mov    DWORD PTR [esi],eax
c0011584:	31 c0                	xor    eax,eax
c0011586:	5b                   	pop    ebx
c0011587:	5e                   	pop    esi
c0011588:	5f                   	pop    edi
c0011589:	c3                   	ret    

c001158a <SysGetUnixTime(regs*)>:
c001158a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001158f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011595:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011599:	e9 38 a0 ff ff       	jmp    c000b5d6 <Clock::timeInSecondsLocal()>

c001159e <string_ends_with(char const*, char const*)>:
c001159e:	57                   	push   edi
c001159f:	56                   	push   esi
c00115a0:	53                   	push   ebx
c00115a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00115a9:	83 ec 0c             	sub    esp,0xc
c00115ac:	53                   	push   ebx
c00115ad:	e8 fe ef fe ff       	call   c00005b0 <strlen>
c00115b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115b5:	89 c6                	mov    esi,eax
c00115b7:	e8 f4 ef fe ff       	call   c00005b0 <strlen>
c00115bc:	83 c4 10             	add    esp,0x10
c00115bf:	31 d2                	xor    edx,edx
c00115c1:	39 c6                	cmp    esi,eax
c00115c3:	7d 06                	jge    c00115cb <string_ends_with(char const*, char const*)+0x2d>
c00115c5:	5b                   	pop    ebx
c00115c6:	89 d0                	mov    eax,edx
c00115c8:	5e                   	pop    esi
c00115c9:	5f                   	pop    edi
c00115ca:	c3                   	ret    
c00115cb:	29 c6                	sub    esi,eax
c00115cd:	83 ec 08             	sub    esp,0x8
c00115d0:	01 f3                	add    ebx,esi
c00115d2:	57                   	push   edi
c00115d3:	53                   	push   ebx
c00115d4:	e8 67 f1 fe ff       	call   c0000740 <strcmp>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	31 d2                	xor    edx,edx
c00115de:	85 c0                	test   eax,eax
c00115e0:	5b                   	pop    ebx
c00115e1:	5e                   	pop    esi
c00115e2:	0f 94 c2             	sete   dl
c00115e5:	5f                   	pop    edi
c00115e6:	89 d0                	mov    eax,edx
c00115e8:	c3                   	ret    

c00115e9 <SysOpen(regs*)>:
c00115e9:	56                   	push   esi
c00115ea:	53                   	push   ebx
c00115eb:	81 ec 04 01 00 00    	sub    esp,0x104
c00115f1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00115f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115fb:	85 c0                	test   eax,eax
c00115fd:	0f 84 b7 01 00 00    	je     c00117ba <SysOpen(regs*)+0x1d1>
c0011603:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011606:	85 c0                	test   eax,eax
c0011608:	0f 84 ac 01 00 00    	je     c00117ba <SysOpen(regs*)+0x1d1>
c001160e:	83 ec 04             	sub    esp,0x4
c0011611:	68 6a 07 02 c0       	push   0xc002076a
c0011616:	50                   	push   eax
c0011617:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001161b:	56                   	push   esi
c001161c:	e8 07 94 ff ff       	call   c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011621:	89 34 24             	mov    DWORD PTR [esp],esi
c0011624:	e8 87 ef fe ff       	call   c00005b0 <strlen>
c0011629:	83 c4 10             	add    esp,0x10
c001162c:	48                   	dec    eax
c001162d:	74 25                	je     c0011654 <SysOpen(regs*)+0x6b>
c001162f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011632:	80 fa 2e             	cmp    dl,0x2e
c0011635:	74 19                	je     c0011650 <SysOpen(regs*)+0x67>
c0011637:	80 fa 3a             	cmp    dl,0x3a
c001163a:	74 14                	je     c0011650 <SysOpen(regs*)+0x67>
c001163c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011640:	48                   	dec    eax
c0011641:	74 11                	je     c0011654 <SysOpen(regs*)+0x6b>
c0011643:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011646:	80 fa 3a             	cmp    dl,0x3a
c0011649:	74 05                	je     c0011650 <SysOpen(regs*)+0x67>
c001164b:	80 fa 2e             	cmp    dl,0x2e
c001164e:	75 ec                	jne    c001163c <SysOpen(regs*)+0x53>
c0011650:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011654:	83 ec 08             	sub    esp,0x8
c0011657:	68 6e 07 02 c0       	push   0xc002076e
c001165c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001165f:	e8 3a ff ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	85 c0                	test   eax,eax
c0011669:	74 27                	je     c0011692 <SysOpen(regs*)+0xa9>
c001166b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001166e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011674:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001167b:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c001167f:	81 c4 04 01 00 00    	add    esp,0x104
c0011685:	c5 f9 7e c0          	vmovd  eax,xmm0
c0011689:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c001168f:	5b                   	pop    ebx
c0011690:	5e                   	pop    esi
c0011691:	c3                   	ret    
c0011692:	83 ec 08             	sub    esp,0x8
c0011695:	68 73 07 02 c0       	push   0xc0020773
c001169a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001169d:	e8 fc fe ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	85 c0                	test   eax,eax
c00116a7:	75 c2                	jne    c001166b <SysOpen(regs*)+0x82>
c00116a9:	83 ec 08             	sub    esp,0x8
c00116ac:	68 6f 07 02 c0       	push   0xc002076f
c00116b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00116b4:	e8 87 f0 fe ff       	call   c0000740 <strcmp>
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	85 c0                	test   eax,eax
c00116be:	74 ab                	je     c001166b <SysOpen(regs*)+0x82>
c00116c0:	83 ec 08             	sub    esp,0x8
c00116c3:	68 6e 07 02 c0       	push   0xc002076e
c00116c8:	56                   	push   esi
c00116c9:	e8 d0 fe ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c00116ce:	83 c4 10             	add    esp,0x10
c00116d1:	85 c0                	test   eax,eax
c00116d3:	75 96                	jne    c001166b <SysOpen(regs*)+0x82>
c00116d5:	83 ec 08             	sub    esp,0x8
c00116d8:	68 78 07 02 c0       	push   0xc0020778
c00116dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00116e0:	e8 b9 fe ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	85 c0                	test   eax,eax
c00116ea:	0f 85 d3 00 00 00    	jne    c00117c3 <SysOpen(regs*)+0x1da>
c00116f0:	83 ec 08             	sub    esp,0x8
c00116f3:	68 7d 07 02 c0       	push   0xc002077d
c00116f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00116fb:	e8 9e fe ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c0011700:	83 c4 10             	add    esp,0x10
c0011703:	85 c0                	test   eax,eax
c0011705:	0f 85 b8 00 00 00    	jne    c00117c3 <SysOpen(regs*)+0x1da>
c001170b:	83 ec 08             	sub    esp,0x8
c001170e:	68 79 07 02 c0       	push   0xc0020779
c0011713:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011716:	e8 25 f0 fe ff       	call   c0000740 <strcmp>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	85 c0                	test   eax,eax
c0011720:	0f 84 9d 00 00 00    	je     c00117c3 <SysOpen(regs*)+0x1da>
c0011726:	83 ec 08             	sub    esp,0x8
c0011729:	68 78 07 02 c0       	push   0xc0020778
c001172e:	56                   	push   esi
c001172f:	e8 6a fe ff ff       	call   c001159e <string_ends_with(char const*, char const*)>
c0011734:	83 c4 10             	add    esp,0x10
c0011737:	85 c0                	test   eax,eax
c0011739:	0f 85 84 00 00 00    	jne    c00117c3 <SysOpen(regs*)+0x1da>
c001173f:	83 ec 0c             	sub    esp,0xc
c0011742:	68 14 01 00 00       	push   0x114
c0011747:	e8 2f 61 ff ff       	call   c000787b <malloc>
c001174c:	83 c4 0c             	add    esp,0xc
c001174f:	89 c6                	mov    esi,eax
c0011751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011756:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011759:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001175c:	56                   	push   esi
c001175d:	e8 70 94 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	85 f6                	test   esi,esi
c0011767:	74 51                	je     c00117ba <SysOpen(regs*)+0x1d1>
c0011769:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001176c:	0f b6 c2             	movzx  eax,dl
c001176f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011772:	89 d0                	mov    eax,edx
c0011774:	83 e0 07             	and    eax,0x7
c0011777:	89 c1                	mov    ecx,eax
c0011779:	83 c9 0a             	or     ecx,0xa
c001177c:	f6 c2 08             	test   dl,0x8
c001177f:	0f 45 c1             	cmovne eax,ecx
c0011782:	89 c1                	mov    ecx,eax
c0011784:	83 c9 12             	or     ecx,0x12
c0011787:	83 e2 10             	and    edx,0x10
c001178a:	0f 45 c1             	cmovne eax,ecx
c001178d:	83 ec 08             	sub    esp,0x8
c0011790:	50                   	push   eax
c0011791:	56                   	push   esi
c0011792:	e8 f5 94 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	85 c0                	test   eax,eax
c001179c:	75 1c                	jne    c00117ba <SysOpen(regs*)+0x1d1>
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	56                   	push   esi
c00117a2:	e8 cb 77 ff ff       	call   c0008f72 <UnixFile::getFileDescriptor()>
c00117a7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117aa:	83 c4 10             	add    esp,0x10
c00117ad:	89 02                	mov    DWORD PTR [edx],eax
c00117af:	c1 f8 1f             	sar    eax,0x1f
c00117b2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117b5:	e9 c1 fe ff ff       	jmp    c001167b <SysOpen(regs*)+0x92>
c00117ba:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c00117be:	e9 bc fe ff ff       	jmp    c001167f <SysOpen(regs*)+0x96>
c00117c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117c6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00117cc:	e9 a3 fe ff ff       	jmp    c0011674 <SysOpen(regs*)+0x8b>

c00117d1 <KeSystemCall(regs*, void*)>:
c00117d1:	53                   	push   ebx
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117d9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00117dc:	83 f8 3b             	cmp    eax,0x3b
c00117df:	77 16                	ja     c00117f7 <KeSystemCall(regs*, void*)+0x26>
c00117e1:	8b 14 85 a0 1b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde460]
c00117e8:	85 d2                	test   edx,edx
c00117ea:	74 0b                	je     c00117f7 <KeSystemCall(regs*, void*)+0x26>
c00117ec:	83 ec 0c             	sub    esp,0xc
c00117ef:	53                   	push   ebx
c00117f0:	ff d2                	call   edx
c00117f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00117f5:	eb 0d                	jmp    c0011804 <KeSystemCall(regs*, void*)+0x33>
c00117f7:	52                   	push   edx
c00117f8:	52                   	push   edx
c00117f9:	50                   	push   eax
c00117fa:	68 82 07 02 c0       	push   0xc0020782
c00117ff:	e8 65 8e ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001180c:	31 d2                	xor    edx,edx
c001180e:	83 c4 08             	add    esp,0x8
c0011811:	5b                   	pop    ebx
c0011812:	c3                   	ret    
c0011813:	90                   	nop

c0011814 <KeSwitchEndian16(unsigned short)>:
c0011814:	83 ec 04             	sub    esp,0x4
c0011817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001181b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001181f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011823:	c1 f8 08             	sar    eax,0x8
c0011826:	89 c2                	mov    edx,eax
c0011828:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001182c:	c1 e0 08             	shl    eax,0x8
c001182f:	09 d0                	or     eax,edx
c0011831:	83 c4 04             	add    esp,0x4
c0011834:	c3                   	ret    
c0011835:	8d 76 00             	lea    esi,[esi+0x0]

c0011838 <KeSwitchEndian32(unsigned int)>:
c0011838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001183c:	c1 e8 18             	shr    eax,0x18
c001183f:	89 c2                	mov    edx,eax
c0011841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011845:	c1 e0 08             	shl    eax,0x8
c0011848:	25 00 00 ff 00       	and    eax,0xff0000
c001184d:	09 c2                	or     edx,eax
c001184f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011853:	c1 e8 08             	shr    eax,0x8
c0011856:	25 00 ff 00 00       	and    eax,0xff00
c001185b:	09 c2                	or     edx,eax
c001185d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011861:	c1 e0 18             	shl    eax,0x18
c0011864:	09 d0                	or     eax,edx
c0011866:	c3                   	ret    
c0011867:	90                   	nop

c0011868 <EthernetCRC32(unsigned char*, int)>:
c0011868:	83 ec 10             	sub    esp,0x10
c001186b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011870:	75 0a                	jne    c001187c <EthernetCRC32(unsigned char*, int)+0x14>
c0011872:	b8 00 00 00 00       	mov    eax,0x0
c0011877:	e9 8c 00 00 00       	jmp    c0011908 <EthernetCRC32(unsigned char*, int)+0xa0>
c001187c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011881:	7f 09                	jg     c001188c <EthernetCRC32(unsigned char*, int)+0x24>
c0011883:	b8 00 00 00 00       	mov    eax,0x0
c0011888:	eb 7e                	jmp    c0011908 <EthernetCRC32(unsigned char*, int)+0xa0>
c001188a:	66 90                	xchg   ax,ax
c001188c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011894:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001189c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00118a4:	7d 5a                	jge    c0011900 <EthernetCRC32(unsigned char*, int)+0x98>
c00118a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ae:	01 d0                	add    eax,edx
c00118b0:	8a 00                	mov    al,BYTE PTR [eax]
c00118b2:	0f b6 c0             	movzx  eax,al
c00118b5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00118b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118c1:	8d 76 00             	lea    esi,[esi+0x0]
c00118c4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00118c9:	7f 2d                	jg     c00118f8 <EthernetCRC32(unsigned char*, int)+0x90>
c00118cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118cf:	83 e0 01             	and    eax,0x1
c00118d2:	74 10                	je     c00118e4 <EthernetCRC32(unsigned char*, int)+0x7c>
c00118d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d8:	d1 e8                	shr    eax,1
c00118da:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00118df:	eb 0b                	jmp    c00118ec <EthernetCRC32(unsigned char*, int)+0x84>
c00118e1:	8d 76 00             	lea    esi,[esi+0x0]
c00118e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e8:	d1 e8                	shr    eax,1
c00118ea:	66 90                	xchg   ax,ax
c00118ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118f4:	eb ce                	jmp    c00118c4 <EthernetCRC32(unsigned char*, int)+0x5c>
c00118f6:	66 90                	xchg   ax,ax
c00118f8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00118fc:	eb 9e                	jmp    c001189c <EthernetCRC32(unsigned char*, int)+0x34>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011904:	f7 d0                	not    eax
c0011906:	66 90                	xchg   ax,ax
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	c3                   	ret    

c001190c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001190c:	83 ec 2c             	sub    esp,0x2c
c001190f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011913:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011924:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0011928:	66 3d 06 08          	cmp    ax,0x806
c001192c:	75 12                	jne    c0011940 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	68 d0 07 02 c0       	push   0xc00207d0
c0011936:	e8 2e 8d ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	eb 20                	jmp    c0011960 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011944:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0011948:	66 3d 00 08          	cmp    ax,0x800
c001194c:	75 12                	jne    c0011960 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 e6 07 02 c0       	push   0xc00207e6
c0011956:	e8 0e 8d ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	66 90                	xchg   ax,ax
c0011960:	90                   	nop
c0011961:	83 c4 2c             	add    esp,0x2c
c0011964:	c3                   	ret    

c0011965 <CmOpen(char const*)>:
c0011965:	57                   	push   edi
c0011966:	56                   	push   esi
c0011967:	53                   	push   ebx
c0011968:	83 ec 1c             	sub    esp,0x1c
c001196b:	6a 30                	push   0x30
c001196d:	e8 09 5f ff ff       	call   c000787b <malloc>
c0011972:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011979:	89 c3                	mov    ebx,eax
c001197b:	e8 fb 5e ff ff       	call   c000787b <malloc>
c0011980:	83 c4 0c             	add    esp,0xc
c0011983:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0011989:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001198d:	89 c6                	mov    esi,eax
c001198f:	50                   	push   eax
c0011990:	e8 3d 92 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0011995:	83 c4 0c             	add    esp,0xc
c0011998:	89 33                	mov    DWORD PTR [ebx],esi
c001199a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001199e:	50                   	push   eax
c001199f:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119a3:	50                   	push   eax
c00119a4:	56                   	push   esi
c00119a5:	e8 8e 95 ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c00119aa:	5a                   	pop    edx
c00119ab:	59                   	pop    ecx
c00119ac:	6a 01                	push   0x1
c00119ae:	ff 33                	push   DWORD PTR [ebx]
c00119b0:	e8 d7 92 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c00119b5:	5e                   	pop    esi
c00119b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119ba:	e8 bc 5e ff ff       	call   c000787b <malloc>
c00119bf:	5a                   	pop    edx
c00119c0:	89 c7                	mov    edi,eax
c00119c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119c4:	8d 74 24 10          	lea    esi,[esp+0x10]
c00119c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00119ca:	56                   	push   esi
c00119cb:	57                   	push   edi
c00119cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00119d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00119d4:	50                   	push   eax
c00119d5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119d8:	83 c4 14             	add    esp,0x14
c00119db:	ff 33                	push   DWORD PTR [ebx]
c00119dd:	e8 08 93 ff ff       	call   c000acea <File::close()>
c00119e2:	59                   	pop    ecx
c00119e3:	58                   	pop    eax
c00119e4:	6a 13                	push   0x13
c00119e6:	ff 33                	push   DWORD PTR [ebx]
c00119e8:	e8 9f 92 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c00119ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00119f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00119f4:	57                   	push   edi
c00119f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00119f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00119fd:	50                   	push   eax
c00119fe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011a01:	83 c4 14             	add    esp,0x14
c0011a04:	57                   	push   edi
c0011a05:	e8 81 5e ff ff       	call   c000788b <free>
c0011a0a:	83 c4 10             	add    esp,0x10
c0011a0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011a10:	75 10                	jne    c0011a22 <CmOpen(char const*)+0xbd>
c0011a12:	83 ec 0c             	sub    esp,0xc
c0011a15:	68 fb 07 02 c0       	push   0xc00207fb
c0011a1a:	e8 9e ea ff ff       	call   c00104bd <KePanic(char const*)>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	50                   	push   eax
c0011a23:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011a26:	6a 00                	push   0x0
c0011a28:	6a 00                	push   0x0
c0011a2a:	ff 33                	push   DWORD PTR [ebx]
c0011a2c:	e8 19 93 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011a31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a33:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a35:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a38:	57                   	push   edi
c0011a39:	6a 00                	push   0x0
c0011a3b:	6a 2b                	push   0x2b
c0011a3d:	50                   	push   eax
c0011a3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a41:	83 c4 1c             	add    esp,0x1c
c0011a44:	6a 00                	push   0x0
c0011a46:	6a 00                	push   0x0
c0011a48:	ff 33                	push   DWORD PTR [ebx]
c0011a4a:	e8 fb 92 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011a4f:	83 c4 0c             	add    esp,0xc
c0011a52:	6a 08                	push   0x8
c0011a54:	68 0c 08 02 c0       	push   0xc002080c
c0011a59:	57                   	push   edi
c0011a5a:	e8 21 e9 fe ff       	call   c0000380 <memcmp>
c0011a5f:	83 c4 10             	add    esp,0x10
c0011a62:	85 c0                	test   eax,eax
c0011a64:	74 10                	je     c0011a76 <CmOpen(char const*)+0x111>
c0011a66:	83 ec 0c             	sub    esp,0xc
c0011a69:	68 15 08 02 c0       	push   0xc0020815
c0011a6e:	e8 4a ea ff ff       	call   c00104bd <KePanic(char const*)>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	89 d8                	mov    eax,ebx
c0011a7f:	5b                   	pop    ebx
c0011a80:	5e                   	pop    esi
c0011a81:	5f                   	pop    edi
c0011a82:	c3                   	ret    

c0011a83 <CmClose(Reghive_Tag*)>:
c0011a83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a87:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011a8b:	74 0b                	je     c0011a98 <CmClose(Reghive_Tag*)+0x15>
c0011a8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a93:	e9 52 92 ff ff       	jmp    c000acea <File::close()>
c0011a98:	c3                   	ret    

c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011a99:	53                   	push   ebx
c0011a9a:	83 ec 18             	sub    esp,0x18
c0011a9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011aa1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011aa5:	74 29                	je     c0011ad0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011aa7:	50                   	push   eax
c0011aa8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011aad:	99                   	cdq    
c0011aae:	52                   	push   edx
c0011aaf:	50                   	push   eax
c0011ab0:	ff 33                	push   DWORD PTR [ebx]
c0011ab2:	e8 93 92 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011ab7:	5a                   	pop    edx
c0011ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aba:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ac0:	51                   	push   ecx
c0011ac1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ac5:	6a 00                	push   0x0
c0011ac7:	6a 2b                	push   0x2b
c0011ac9:	50                   	push   eax
c0011aca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011acd:	83 c4 20             	add    esp,0x20
c0011ad0:	83 c4 18             	add    esp,0x18
c0011ad3:	5b                   	pop    ebx
c0011ad4:	c3                   	ret    

c0011ad5 <CmGetString(Reghive_Tag*, int, char*)>:
c0011ad5:	55                   	push   ebp
c0011ad6:	57                   	push   edi
c0011ad7:	56                   	push   esi
c0011ad8:	53                   	push   ebx
c0011ad9:	31 db                	xor    ebx,ebx
c0011adb:	83 ec 70             	sub    esp,0x70
c0011ade:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011ae5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011ae9:	50                   	push   eax
c0011aea:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011af1:	55                   	push   ebp
c0011af2:	e8 a2 ff ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011aff:	c1 e0 08             	shl    eax,0x8
c0011b02:	89 c2                	mov    edx,eax
c0011b04:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011b09:	09 d0                	or     eax,edx
c0011b0b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011b10:	c1 e0 08             	shl    eax,0x8
c0011b13:	09 d0                	or     eax,edx
c0011b15:	74 25                	je     c0011b3c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011b17:	52                   	push   edx
c0011b18:	6b fb 0d             	imul   edi,ebx,0xd
c0011b1b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011b1f:	52                   	push   edx
c0011b20:	50                   	push   eax
c0011b21:	55                   	push   ebp
c0011b22:	e8 72 ff ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b27:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011b2b:	b9 27 00 00 00       	mov    ecx,0x27
c0011b30:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011b37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	83 c3 03             	add    ebx,0x3
c0011b3f:	83 fb 15             	cmp    ebx,0x15
c0011b42:	75 b6                	jne    c0011afa <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011b44:	83 c4 6c             	add    esp,0x6c
c0011b47:	5b                   	pop    ebx
c0011b48:	5e                   	pop    esi
c0011b49:	5f                   	pop    edi
c0011b4a:	5d                   	pop    ebp
c0011b4b:	c3                   	ret    

c0011b4c <CmEnterDirectory(Reghive_Tag*, int)>:
c0011b4c:	83 ec 40             	sub    esp,0x40
c0011b4f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011b53:	50                   	push   eax
c0011b54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b5c:	e8 38 ff ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	83 c8 ff             	or     eax,0xffffffff
c0011b67:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011b6c:	75 1d                	jne    c0011b8b <CmEnterDirectory(Reghive_Tag*, int)+0x3f>
c0011b6e:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011b73:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011b78:	89 d0                	mov    eax,edx
c0011b7a:	0f b6 54 24 1d       	movzx  edx,BYTE PTR [esp+0x1d]
c0011b7f:	c1 e0 08             	shl    eax,0x8
c0011b82:	09 c1                	or     ecx,eax
c0011b84:	89 d0                	mov    eax,edx
c0011b86:	c1 e0 10             	shl    eax,0x10
c0011b89:	09 c8                	or     eax,ecx
c0011b8b:	83 c4 3c             	add    esp,0x3c
c0011b8e:	c3                   	ret    

c0011b8f <CmGetNext(Reghive_Tag*, int)>:
c0011b8f:	83 ec 40             	sub    esp,0x40
c0011b92:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011b96:	50                   	push   eax
c0011b97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b9f:	e8 f5 fe ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ba4:	0f b6 54 24 17       	movzx  edx,BYTE PTR [esp+0x17]
c0011ba9:	0f b6 4c 24 16       	movzx  ecx,BYTE PTR [esp+0x16]
c0011bae:	89 d0                	mov    eax,edx
c0011bb0:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011bb5:	83 c4 4c             	add    esp,0x4c
c0011bb8:	c1 e0 08             	shl    eax,0x8
c0011bbb:	09 c1                	or     ecx,eax
c0011bbd:	89 d0                	mov    eax,edx
c0011bbf:	c1 e0 10             	shl    eax,0x10
c0011bc2:	09 c8                	or     eax,ecx
c0011bc4:	c3                   	ret    

c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011bc5:	53                   	push   ebx
c0011bc6:	83 ec 18             	sub    esp,0x18
c0011bc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bcd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011bd1:	74 29                	je     c0011bfc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011bd3:	50                   	push   eax
c0011bd4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011bd9:	99                   	cdq    
c0011bda:	52                   	push   edx
c0011bdb:	50                   	push   eax
c0011bdc:	ff 33                	push   DWORD PTR [ebx]
c0011bde:	e8 67 91 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011be3:	5a                   	pop    edx
c0011be4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011be6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bea:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bec:	51                   	push   ecx
c0011bed:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011bf1:	6a 00                	push   0x0
c0011bf3:	6a 2b                	push   0x2b
c0011bf5:	50                   	push   eax
c0011bf6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011bf9:	83 c4 20             	add    esp,0x20
c0011bfc:	83 c4 18             	add    esp,0x18
c0011bff:	5b                   	pop    ebx
c0011c00:	c3                   	ret    

c0011c01 <CmFreeExtent(Reghive_Tag*, int)>:
c0011c01:	53                   	push   ebx
c0011c02:	83 ec 3c             	sub    esp,0x3c
c0011c05:	6a 2b                	push   0x2b
c0011c07:	6a 00                	push   0x0
c0011c09:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011c0d:	53                   	push   ebx
c0011c0e:	e8 6d e9 fe ff       	call   c0000580 <memset>
c0011c13:	83 c4 0c             	add    esp,0xc
c0011c16:	53                   	push   ebx
c0011c17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c1f:	e8 a1 ff ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c24:	83 c4 48             	add    esp,0x48
c0011c27:	5b                   	pop    ebx
c0011c28:	c3                   	ret    

c0011c29 <CmUpdateHeader(Reghive_Tag*)>:
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c30:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011c34:	74 10                	je     c0011c46 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011c36:	52                   	push   edx
c0011c37:	8d 50 05             	lea    edx,[eax+0x5]
c0011c3a:	52                   	push   edx
c0011c3b:	6a 00                	push   0x0
c0011c3d:	50                   	push   eax
c0011c3e:	e8 82 ff ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	83 c4 0c             	add    esp,0xc
c0011c49:	c3                   	ret    

c0011c4a <CmExpand(Reghive_Tag*, int)>:
c0011c4a:	55                   	push   ebp
c0011c4b:	57                   	push   edi
c0011c4c:	83 cf ff             	or     edi,0xffffffff
c0011c4f:	56                   	push   esi
c0011c50:	53                   	push   ebx
c0011c51:	83 ec 3c             	sub    esp,0x3c
c0011c54:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011c58:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011c5c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011c60:	74 59                	je     c0011cbb <CmExpand(Reghive_Tag*, int)+0x71>
c0011c62:	50                   	push   eax
c0011c63:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011c67:	31 d2                	xor    edx,edx
c0011c69:	31 ff                	xor    edi,edi
c0011c6b:	52                   	push   edx
c0011c6c:	50                   	push   eax
c0011c6d:	ff 33                	push   DWORD PTR [ebx]
c0011c6f:	e8 d6 90 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011c74:	83 c4 0c             	add    esp,0xc
c0011c77:	6a 2b                	push   0x2b
c0011c79:	6a 00                	push   0x0
c0011c7b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011c7f:	55                   	push   ebp
c0011c80:	e8 fb e8 fe ff       	call   c0000580 <memset>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	39 f7                	cmp    edi,esi
c0011c8a:	7d 1b                	jge    c0011ca7 <CmExpand(Reghive_Tag*, int)+0x5d>
c0011c8c:	83 ec 0c             	sub    esp,0xc
c0011c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c91:	47                   	inc    edi
c0011c92:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011c96:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c98:	51                   	push   ecx
c0011c99:	55                   	push   ebp
c0011c9a:	6a 00                	push   0x0
c0011c9c:	6a 2b                	push   0x2b
c0011c9e:	50                   	push   eax
c0011c9f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ca2:	83 c4 20             	add    esp,0x20
c0011ca5:	eb e1                	jmp    c0011c88 <CmExpand(Reghive_Tag*, int)+0x3e>
c0011ca7:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011caa:	83 ec 0c             	sub    esp,0xc
c0011cad:	01 fe                	add    esi,edi
c0011caf:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011cb2:	53                   	push   ebx
c0011cb3:	e8 71 ff ff ff       	call   c0011c29 <CmUpdateHeader(Reghive_Tag*)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	83 c4 3c             	add    esp,0x3c
c0011cbe:	89 f8                	mov    eax,edi
c0011cc0:	5b                   	pop    ebx
c0011cc1:	5e                   	pop    esi
c0011cc2:	5f                   	pop    edi
c0011cc3:	5d                   	pop    ebp
c0011cc4:	c3                   	ret    

c0011cc5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011cc5:	55                   	push   ebp
c0011cc6:	57                   	push   edi
c0011cc7:	56                   	push   esi
c0011cc8:	53                   	push   ebx
c0011cc9:	83 cb ff             	or     ebx,0xffffffff
c0011ccc:	83 ec 1c             	sub    esp,0x1c
c0011ccf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011cd3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011cd7:	74 68                	je     c0011d41 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011cd9:	51                   	push   ecx
c0011cda:	be 2b 00 00 00       	mov    esi,0x2b
c0011cdf:	31 ff                	xor    edi,edi
c0011ce1:	31 db                	xor    ebx,ebx
c0011ce3:	6a 00                	push   0x0
c0011ce5:	6a 00                	push   0x0
c0011ce7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011cea:	e8 5b 90 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011cf5:	76 3b                	jbe    c0011d32 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011cfd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011d01:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d03:	51                   	push   ecx
c0011d04:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011d08:	51                   	push   ecx
c0011d09:	6a 00                	push   0x0
c0011d0b:	6a 01                	push   0x1
c0011d0d:	50                   	push   eax
c0011d0e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d11:	83 c4 20             	add    esp,0x20
c0011d14:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d19:	74 26                	je     c0011d41 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011d1b:	52                   	push   edx
c0011d1c:	43                   	inc    ebx
c0011d1d:	57                   	push   edi
c0011d1e:	56                   	push   esi
c0011d1f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011d22:	e8 23 90 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0011d27:	83 c6 2b             	add    esi,0x2b
c0011d2a:	83 d7 00             	adc    edi,0x0
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	eb c0                	jmp    c0011cf2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011d32:	50                   	push   eax
c0011d33:	50                   	push   eax
c0011d34:	6a 40                	push   0x40
c0011d36:	55                   	push   ebp
c0011d37:	e8 0e ff ff ff       	call   c0011c4a <CmExpand(Reghive_Tag*, int)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	89 c3                	mov    ebx,eax
c0011d41:	83 c4 1c             	add    esp,0x1c
c0011d44:	89 d8                	mov    eax,ebx
c0011d46:	5b                   	pop    ebx
c0011d47:	5e                   	pop    esi
c0011d48:	5f                   	pop    edi
c0011d49:	5d                   	pop    ebp
c0011d4a:	c3                   	ret    

c0011d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011d4b:	55                   	push   ebp
c0011d4c:	57                   	push   edi
c0011d4d:	56                   	push   esi
c0011d4e:	53                   	push   ebx
c0011d4f:	81 ec 88 00 00 00    	sub    esp,0x88
c0011d55:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011d5c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d63:	e8 5d ff ff ff       	call   c0011cc5 <CmFindUnusedExtent(Reghive_Tag*)>
c0011d68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d6c:	83 c4 0c             	add    esp,0xc
c0011d6f:	6a 2b                	push   0x2b
c0011d71:	6a 00                	push   0x0
c0011d73:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011d77:	55                   	push   ebp
c0011d78:	e8 03 e8 fe ff       	call   c0000580 <memset>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	85 db                	test   ebx,ebx
c0011d82:	74 12                	je     c0011d96 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011d84:	51                   	push   ecx
c0011d85:	55                   	push   ebp
c0011d86:	53                   	push   ebx
c0011d87:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d8e:	e8 06 fd ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011d9a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011da1:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011da6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011da8:	85 db                	test   ebx,ebx
c0011daa:	74 49                	je     c0011df5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011dac:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011db1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011db5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011dba:	c1 e0 08             	shl    eax,0x8
c0011dbd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011dc3:	09 c8                	or     eax,ecx
c0011dc5:	74 11                	je     c0011dd8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011dc7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011dcb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011dcf:	c1 e8 10             	shr    eax,0x10
c0011dd2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011dd6:	eb 0f                	jmp    c0011de7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011dd8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011ddd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011de2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011de7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011deb:	c1 ea 08             	shr    edx,0x8
c0011dee:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011df3:	eb 0f                	jmp    c0011e04 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011df5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011dfa:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011dff:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011e04:	52                   	push   edx
c0011e05:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011e09:	50                   	push   eax
c0011e0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e0e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011e15:	e8 ab fd ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	85 db                	test   ebx,ebx
c0011e1f:	74 12                	je     c0011e33 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011e21:	50                   	push   eax
c0011e22:	55                   	push   ebp
c0011e23:	53                   	push   ebx
c0011e24:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011e2b:	e8 95 fd ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e37:	83 c4 7c             	add    esp,0x7c
c0011e3a:	5b                   	pop    ebx
c0011e3b:	5e                   	pop    esi
c0011e3c:	5f                   	pop    edi
c0011e3d:	5d                   	pop    ebp
c0011e3e:	c3                   	ret    

c0011e3f <CmSetString(Reghive_Tag*, int, char const*)>:
c0011e3f:	55                   	push   ebp
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	bb 27 00 00 00       	mov    ebx,0x27
c0011e48:	81 ec 88 00 00 00    	sub    esp,0x88
c0011e4e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0011e55:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011e5c:	e8 4f e7 fe ff       	call   c00005b0 <strlen>
c0011e61:	8d 48 26             	lea    ecx,[eax+0x26]
c0011e64:	89 c8                	mov    eax,ecx
c0011e66:	99                   	cdq    
c0011e67:	f7 fb                	idiv   ebx
c0011e69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011e76:	7e 10                	jle    c0011e88 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	68 26 08 02 c0       	push   0xc0020826
c0011e80:	e8 38 e6 ff ff       	call   c00104bd <KePanic(char const*)>
c0011e85:	83 c4 10             	add    esp,0x10
c0011e88:	53                   	push   ebx
c0011e89:	31 ed                	xor    ebp,ebp
c0011e8b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011e8f:	53                   	push   ebx
c0011e90:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011e97:	57                   	push   edi
c0011e98:	e8 fc fb ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	0f b6 43 18          	movzx  eax,BYTE PTR [ebx+0x18]
c0011ea4:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0011ea8:	c1 e0 08             	shl    eax,0x8
c0011eab:	09 c6                	or     esi,eax
c0011ead:	89 f0                	mov    eax,esi
c0011eaf:	0f b6 73 16          	movzx  esi,BYTE PTR [ebx+0x16]
c0011eb3:	c1 e0 08             	shl    eax,0x8
c0011eb6:	09 c6                	or     esi,eax
c0011eb8:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0011ebc:	7e 72                	jle    c0011f30 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0011ebe:	85 f6                	test   esi,esi
c0011ec0:	75 25                	jne    c0011ee7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011ec2:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011ec6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011ecb:	50                   	push   eax
c0011ecc:	6a 00                	push   0x0
c0011ece:	6a 00                	push   0x0
c0011ed0:	57                   	push   edi
c0011ed1:	e8 75 fe ff ff       	call   c0011d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	89 c6                	mov    esi,eax
c0011edb:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011ede:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011ee1:	c1 f8 10             	sar    eax,0x10
c0011ee4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011ee7:	51                   	push   ecx
c0011ee8:	8d 54 24 49          	lea    edx,[esp+0x49]
c0011eec:	52                   	push   edx
c0011eed:	56                   	push   esi
c0011eee:	57                   	push   edi
c0011eef:	e8 a5 fb ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ef4:	83 c4 0c             	add    esp,0xc
c0011ef7:	6a 27                	push   0x27
c0011ef9:	6a 00                	push   0x0
c0011efb:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011eff:	51                   	push   ecx
c0011f00:	e8 7b e6 fe ff       	call   c0000580 <memset>
c0011f05:	83 c4 0c             	add    esp,0xc
c0011f08:	6b c5 27             	imul   eax,ebp,0x27
c0011f0b:	6a 27                	push   0x27
c0011f0d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011f14:	50                   	push   eax
c0011f15:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011f19:	51                   	push   ecx
c0011f1a:	e8 91 e7 fe ff       	call   c00006b0 <strncpy>
c0011f1f:	83 c4 0c             	add    esp,0xc
c0011f22:	8d 54 24 49          	lea    edx,[esp+0x49]
c0011f26:	52                   	push   edx
c0011f27:	56                   	push   esi
c0011f28:	57                   	push   edi
c0011f29:	e8 97 fc ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f2e:	eb 19                	jmp    c0011f49 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0011f30:	85 f6                	test   esi,esi
c0011f32:	74 18                	je     c0011f4c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0011f34:	52                   	push   edx
c0011f35:	52                   	push   edx
c0011f36:	56                   	push   esi
c0011f37:	57                   	push   edi
c0011f38:	e8 c4 fc ff ff       	call   c0011c01 <CmFreeExtent(Reghive_Tag*, int)>
c0011f3d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011f41:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011f45:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	45                   	inc    ebp
c0011f4d:	83 c3 03             	add    ebx,0x3
c0011f50:	83 fd 07             	cmp    ebp,0x7
c0011f53:	0f 85 47 ff ff ff    	jne    c0011ea0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011f59:	50                   	push   eax
c0011f5a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011f5e:	50                   	push   eax
c0011f5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011f66:	57                   	push   edi
c0011f67:	e8 59 fc ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f6c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011f72:	5b                   	pop    ebx
c0011f73:	5e                   	pop    esi
c0011f74:	5f                   	pop    edi
c0011f75:	5d                   	pop    ebp
c0011f76:	c3                   	ret    

c0011f77 <CmGetMatch(char*, char*, bool, bool*)>:
c0011f77:	56                   	push   esi
c0011f78:	53                   	push   ebx
c0011f79:	50                   	push   eax
c0011f7a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011f7f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011f83:	74 25                	je     c0011faa <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011f85:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011f88:	31 db                	xor    ebx,ebx
c0011f8a:	50                   	push   eax
c0011f8b:	50                   	push   eax
c0011f8c:	8d 04 9d a0 1c 02 c0 	lea    eax,[ebx*4-0x3ffde360]
c0011f93:	50                   	push   eax
c0011f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f98:	e8 a3 e7 fe ff       	call   c0000740 <strcmp>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	85 c0                	test   eax,eax
c0011fa2:	74 2e                	je     c0011fd2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011fa4:	43                   	inc    ebx
c0011fa5:	83 fb 3f             	cmp    ebx,0x3f
c0011fa8:	75 e0                	jne    c0011f8a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011faa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011fad:	31 db                	xor    ebx,ebx
c0011faf:	8d 04 9d a0 1c 02 c0 	lea    eax,[ebx*4-0x3ffde360]
c0011fb6:	51                   	push   ecx
c0011fb7:	51                   	push   ecx
c0011fb8:	50                   	push   eax
c0011fb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011fbd:	e8 7e e7 fe ff       	call   c0000740 <strcmp>
c0011fc2:	83 c4 10             	add    esp,0x10
c0011fc5:	85 c0                	test   eax,eax
c0011fc7:	74 09                	je     c0011fd2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011fc9:	43                   	inc    ebx
c0011fca:	83 fb 3f             	cmp    ebx,0x3f
c0011fcd:	75 e0                	jne    c0011faf <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011fcf:	83 cb ff             	or     ebx,0xffffffff
c0011fd2:	89 d8                	mov    eax,ebx
c0011fd4:	5a                   	pop    edx
c0011fd5:	5b                   	pop    ebx
c0011fd6:	5e                   	pop    esi
c0011fd7:	c3                   	ret    

c0011fd8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011fd8:	55                   	push   ebp
c0011fd9:	31 c0                	xor    eax,eax
c0011fdb:	57                   	push   edi
c0011fdc:	56                   	push   esi
c0011fdd:	53                   	push   ebx
c0011fde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fe2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fe6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011fea:	8b 39                	mov    edi,DWORD PTR [ecx]
c0011fec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ff0:	8d 2c 1f             	lea    ebp,[edi+ebx*1]
c0011ff3:	83 fd 1f             	cmp    ebp,0x1f
c0011ff6:	7f 0e                	jg     c0012006 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2e>
c0011ff8:	0f b6 d2             	movzx  edx,dl
c0011ffb:	b0 01                	mov    al,0x1
c0011ffd:	c4 e2 41 f7 d2       	shlx   edx,edx,edi
c0012002:	09 16                	or     DWORD PTR [esi],edx
c0012004:	01 19                	add    DWORD PTR [ecx],ebx
c0012006:	5b                   	pop    ebx
c0012007:	5e                   	pop    esi
c0012008:	5f                   	pop    edi
c0012009:	5d                   	pop    ebp
c001200a:	c3                   	ret    

c001200b <CmGetShift(unsigned int*, int*, int, bool*)>:
c001200b:	57                   	push   edi
c001200c:	56                   	push   esi
c001200d:	53                   	push   ebx
c001200e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012012:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012016:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001201a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001201e:	39 13                	cmp    DWORD PTR [ebx],edx
c0012020:	7c 1d                	jl     c001203f <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012022:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0012024:	b8 01 00 00 00       	mov    eax,0x1
c0012029:	c4 e2 69 f7 c0       	shlx   eax,eax,edx
c001202e:	48                   	dec    eax
c001202f:	21 c8                	and    eax,ecx
c0012031:	c4 e2 6b f7 c9       	shrx   ecx,ecx,edx
c0012036:	89 0f                	mov    DWORD PTR [edi],ecx
c0012038:	29 13                	sub    DWORD PTR [ebx],edx
c001203a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001203d:	eb 05                	jmp    c0012044 <CmGetShift(unsigned int*, int*, int, bool*)+0x39>
c001203f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012042:	31 c0                	xor    eax,eax
c0012044:	5b                   	pop    ebx
c0012045:	5e                   	pop    esi
c0012046:	5f                   	pop    edi
c0012047:	c3                   	ret    

c0012048 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012048:	83 ec 40             	sub    esp,0x40
c001204b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001204f:	50                   	push   eax
c0012050:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012054:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012058:	e8 3c fa ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001205d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012061:	c5 fa 7e 44 24 2b    	vmovq  xmm0,QWORD PTR [esp+0x2b]
c0012067:	c5 f9 d6 00          	vmovq  QWORD PTR [eax],xmm0
c001206b:	83 c4 4c             	add    esp,0x4c
c001206e:	c3                   	ret    

c001206f <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001206f:	55                   	push   ebp
c0012070:	57                   	push   edi
c0012071:	56                   	push   esi
c0012072:	53                   	push   ebx
c0012073:	83 ec 40             	sub    esp,0x40
c0012076:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001207a:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001207e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012082:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012086:	53                   	push   ebx
c0012087:	56                   	push   esi
c0012088:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001208c:	e8 08 fa ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012091:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012095:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012099:	83 c4 0c             	add    esp,0xc
c001209c:	53                   	push   ebx
c001209d:	56                   	push   esi
c001209e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120a2:	e8 1e fb ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00120a7:	83 c4 4c             	add    esp,0x4c
c00120aa:	5b                   	pop    ebx
c00120ab:	5e                   	pop    esi
c00120ac:	5f                   	pop    edi
c00120ad:	5d                   	pop    ebp
c00120ae:	c3                   	ret    

c00120af <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00120af:	55                   	push   ebp
c00120b0:	57                   	push   edi
c00120b1:	56                   	push   esi
c00120b2:	31 f6                	xor    esi,esi
c00120b4:	53                   	push   ebx
c00120b5:	31 db                	xor    ebx,ebx
c00120b7:	83 ec 40             	sub    esp,0x40
c00120ba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ca:	6a 12                	push   0x12
c00120cc:	68 ee 00 00 00       	push   0xee
c00120d1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00120d5:	e8 a6 e4 fe ff       	call   c0000580 <memset>
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	6a 08                	push   0x8
c00120df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00120e3:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00120e7:	50                   	push   eax
c00120e8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00120ec:	57                   	push   edi
c00120ed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00120f1:	55                   	push   ebp
c00120f2:	e8 e1 fe ff ff       	call   c0011fd8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120fe:	50                   	push   eax
c00120ff:	6a 06                	push   0x6
c0012101:	57                   	push   edi
c0012102:	55                   	push   ebp
c0012103:	e8 03 ff ff ff       	call   c001200b <CmGetShift(unsigned int*, int*, int, bool*)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012110:	74 07                	je     c0012119 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012112:	46                   	inc    esi
c0012113:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012117:	eb e1                	jmp    c00120fa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012119:	43                   	inc    ebx
c001211a:	83 fb 12             	cmp    ebx,0x12
c001211d:	75 be                	jne    c00120dd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c001211f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012123:	31 f6                	xor    esi,esi
c0012125:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012128:	50                   	push   eax
c0012129:	50                   	push   eax
c001212a:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c001212f:	46                   	inc    esi
c0012130:	8d 04 85 a0 1c 02 c0 	lea    eax,[eax*4-0x3ffde360]
c0012137:	50                   	push   eax
c0012138:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001213c:	e8 df e6 fe ff       	call   c0000820 <strcat>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	83 fe 18             	cmp    esi,0x18
c0012147:	75 df                	jne    c0012128 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012149:	83 c4 3c             	add    esp,0x3c
c001214c:	31 c0                	xor    eax,eax
c001214e:	5b                   	pop    ebx
c001214f:	5e                   	pop    esi
c0012150:	5f                   	pop    edi
c0012151:	5d                   	pop    ebp
c0012152:	c3                   	ret    

c0012153 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012153:	83 ec 40             	sub    esp,0x40
c0012156:	8d 44 24 09          	lea    eax,[esp+0x9]
c001215a:	50                   	push   eax
c001215b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001215f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012163:	e8 31 f9 ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012168:	58                   	pop    eax
c0012169:	5a                   	pop    edx
c001216a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001216e:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012172:	50                   	push   eax
c0012173:	e8 37 ff ff ff       	call   c00120af <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012178:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001217d:	83 c4 4c             	add    esp,0x4c
c0012180:	c3                   	ret    

c0012181 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012181:	55                   	push   ebp
c0012182:	57                   	push   edi
c0012183:	56                   	push   esi
c0012184:	53                   	push   ebx
c0012185:	31 db                	xor    ebx,ebx
c0012187:	83 ec 70             	sub    esp,0x70
c001218a:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012191:	6a 30                	push   0x30
c0012193:	6a 00                	push   0x0
c0012195:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012199:	56                   	push   esi
c001219a:	e8 e1 e3 fe ff       	call   c0000580 <memset>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	57                   	push   edi
c00121a6:	e8 05 e4 fe ff       	call   c00005b0 <strlen>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	39 d8                	cmp    eax,ebx
c00121b0:	76 16                	jbe    c00121c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00121b2:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00121b6:	83 ec 0c             	sub    esp,0xc
c00121b9:	50                   	push   eax
c00121ba:	e8 51 e7 fe ff       	call   c0000910 <toupper>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00121c5:	43                   	inc    ebx
c00121c6:	eb da                	jmp    c00121a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00121c8:	52                   	push   edx
c00121c9:	31 db                	xor    ebx,ebx
c00121cb:	31 ff                	xor    edi,edi
c00121cd:	6a 18                	push   0x18
c00121cf:	6a 3f                	push   0x3f
c00121d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00121d5:	50                   	push   eax
c00121d6:	e8 a5 e3 fe ff       	call   c0000580 <memset>
c00121db:	83 c4 10             	add    esp,0x10
c00121de:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00121e2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00121e6:	84 c0                	test   al,al
c00121e8:	0f 84 af 00 00 00    	je     c001229d <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00121ee:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00121f1:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00121f5:	83 ec 0c             	sub    esp,0xc
c00121f8:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00121fc:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012201:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012205:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012209:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001220e:	56                   	push   esi
c001220f:	e8 9c e3 fe ff       	call   c00005b0 <strlen>
c0012214:	83 c4 10             	add    esp,0x10
c0012217:	85 c0                	test   eax,eax
c0012219:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001221d:	74 0b                	je     c001222a <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001221f:	50                   	push   eax
c0012220:	6a 01                	push   0x1
c0012222:	56                   	push   esi
c0012223:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012227:	50                   	push   eax
c0012228:	eb 0a                	jmp    c0012234 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001222a:	50                   	push   eax
c001222b:	6a 00                	push   0x0
c001222d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012231:	50                   	push   eax
c0012232:	6a 00                	push   0x0
c0012234:	e8 3e fd ff ff       	call   c0011f77 <CmGetMatch(char*, char*, bool, bool*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	83 f8 ff             	cmp    eax,0xffffffff
c001223f:	75 1a                	jne    c001225b <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	68 3b 08 02 c0       	push   0xc002083b
c0012249:	e8 6f e2 ff ff       	call   c00104bd <KePanic(char const*)>
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	b8 02 00 00 00       	mov    eax,0x2
c0012256:	e9 bb 00 00 00       	jmp    c0012316 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001225b:	83 ff 18             	cmp    edi,0x18
c001225e:	75 1a                	jne    c001227a <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012260:	83 ec 0c             	sub    esp,0xc
c0012263:	68 50 08 02 c0       	push   0xc0020850
c0012268:	e8 50 e2 ff ff       	call   c00104bd <KePanic(char const*)>
c001226d:	83 c4 10             	add    esp,0x10
c0012270:	b8 01 00 00 00       	mov    eax,0x1
c0012275:	e9 9c 00 00 00       	jmp    c0012316 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001227a:	47                   	inc    edi
c001227b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012280:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012284:	0f 45 dd             	cmovne ebx,ebp
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	56                   	push   esi
c001228b:	e8 20 e3 fe ff       	call   c00005b0 <strlen>
c0012290:	83 c4 10             	add    esp,0x10
c0012293:	85 c0                	test   eax,eax
c0012295:	74 06                	je     c001229d <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012297:	43                   	inc    ebx
c0012298:	e9 41 ff ff ff       	jmp    c00121de <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001229d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00122a5:	31 db                	xor    ebx,ebx
c00122a7:	31 ff                	xor    edi,edi
c00122a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00122b1:	50                   	push   eax
c00122b2:	6a 12                	push   0x12
c00122b4:	68 ee 00 00 00       	push   0xee
c00122b9:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00122c0:	e8 bb e2 fe ff       	call   c0000580 <memset>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	83 fb 17             	cmp    ebx,0x17
c00122cb:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00122cf:	7e 26                	jle    c00122f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00122d1:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00122d5:	50                   	push   eax
c00122d6:	6a 08                	push   0x8
c00122d8:	55                   	push   ebp
c00122d9:	56                   	push   esi
c00122da:	e8 2c fd ff ff       	call   c001200b <CmGetShift(unsigned int*, int*, int, bool*)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00122e7:	74 26                	je     c001230f <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00122e9:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00122f0:	4b                   	dec    ebx
c00122f1:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00122f4:	47                   	inc    edi
c00122f5:	eb 1c                	jmp    c0012313 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00122f7:	6a 06                	push   0x6
c00122f9:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00122fe:	50                   	push   eax
c00122ff:	55                   	push   ebp
c0012300:	56                   	push   esi
c0012301:	e8 d2 fc ff ff       	call   c0011fd8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	84 c0                	test   al,al
c001230b:	75 06                	jne    c0012313 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001230d:	eb c2                	jmp    c00122d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001230f:	31 c0                	xor    eax,eax
c0012311:	eb 03                	jmp    c0012316 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012313:	43                   	inc    ebx
c0012314:	eb b2                	jmp    c00122c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012316:	83 c4 6c             	add    esp,0x6c
c0012319:	5b                   	pop    ebx
c001231a:	5e                   	pop    esi
c001231b:	5f                   	pop    edi
c001231c:	5d                   	pop    ebp
c001231d:	c3                   	ret    

c001231e <CmCreateString(Reghive_Tag*, int, char const*)>:
c001231e:	53                   	push   ebx
c001231f:	83 ec 3c             	sub    esp,0x3c
c0012322:	6a 2b                	push   0x2b
c0012324:	6a 00                	push   0x0
c0012326:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001232a:	53                   	push   ebx
c001232b:	e8 50 e2 fe ff       	call   c0000580 <memset>
c0012330:	58                   	pop    eax
c0012331:	5a                   	pop    edx
c0012332:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012336:	50                   	push   eax
c0012337:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001233b:	e8 41 fe ff ff       	call   c0012181 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012340:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012345:	83 c4 0c             	add    esp,0xc
c0012348:	6a 15                	push   0x15
c001234a:	6a 00                	push   0x0
c001234c:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012350:	50                   	push   eax
c0012351:	e8 2a e2 fe ff       	call   c0000580 <memset>
c0012356:	53                   	push   ebx
c0012357:	6a 00                	push   0x0
c0012359:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001235d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012361:	e8 e5 f9 ff ff       	call   c0011d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012366:	83 c4 58             	add    esp,0x58
c0012369:	5b                   	pop    ebx
c001236a:	c3                   	ret    

c001236b <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001236b:	56                   	push   esi
c001236c:	53                   	push   ebx
c001236d:	83 ec 48             	sub    esp,0x48
c0012370:	6a 12                	push   0x12
c0012372:	68 ff 00 00 00       	push   0xff
c0012377:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001237b:	56                   	push   esi
c001237c:	e8 ff e1 fe ff       	call   c0000580 <memset>
c0012381:	5a                   	pop    edx
c0012382:	59                   	pop    ecx
c0012383:	56                   	push   esi
c0012384:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012388:	e8 f4 fd ff ff       	call   c0012181 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012394:	85 db                	test   ebx,ebx
c0012396:	74 44                	je     c00123dc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x71>
c0012398:	50                   	push   eax
c0012399:	8d 44 24 19          	lea    eax,[esp+0x19]
c001239d:	50                   	push   eax
c001239e:	53                   	push   ebx
c001239f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123a3:	e8 f1 f6 ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123a8:	83 c4 0c             	add    esp,0xc
c00123ab:	6a 12                	push   0x12
c00123ad:	8d 44 24 21          	lea    eax,[esp+0x21]
c00123b1:	50                   	push   eax
c00123b2:	56                   	push   esi
c00123b3:	e8 c8 df fe ff       	call   c0000380 <memcmp>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	85 c0                	test   eax,eax
c00123bd:	74 20                	je     c00123df <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x74>
c00123bf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00123c4:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00123c9:	c1 e0 08             	shl    eax,0x8
c00123cc:	09 c2                	or     edx,eax
c00123ce:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00123d3:	c1 e0 10             	shl    eax,0x10
c00123d6:	89 c3                	mov    ebx,eax
c00123d8:	09 d3                	or     ebx,edx
c00123da:	eb b8                	jmp    c0012394 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00123dc:	83 cb ff             	or     ebx,0xffffffff
c00123df:	83 c4 44             	add    esp,0x44
c00123e2:	89 d8                	mov    eax,ebx
c00123e4:	5b                   	pop    ebx
c00123e5:	5e                   	pop    esi
c00123e6:	c3                   	ret    

c00123e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00123e7:	57                   	push   edi
c00123e8:	56                   	push   esi
c00123e9:	53                   	push   ebx
c00123ea:	83 ec 34             	sub    esp,0x34
c00123ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00123f1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00123f5:	6a 2b                	push   0x2b
c00123f7:	6a 00                	push   0x0
c00123f9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00123fd:	53                   	push   ebx
c00123fe:	e8 7d e1 fe ff       	call   c0000580 <memset>
c0012403:	58                   	pop    eax
c0012404:	5a                   	pop    edx
c0012405:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012409:	50                   	push   eax
c001240a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001240e:	e8 6e fd ff ff       	call   c0012181 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012413:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012417:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001241b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001241f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012423:	53                   	push   ebx
c0012424:	6a 00                	push   0x0
c0012426:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001242a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001242e:	e8 18 f9 ff ff       	call   c0011d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012433:	83 c4 50             	add    esp,0x50
c0012436:	5b                   	pop    ebx
c0012437:	5e                   	pop    esi
c0012438:	5f                   	pop    edi
c0012439:	c3                   	ret    

c001243a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001243a:	55                   	push   ebp
c001243b:	57                   	push   edi
c001243c:	56                   	push   esi
c001243d:	53                   	push   ebx
c001243e:	83 ec 40             	sub    esp,0x40
c0012441:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012445:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012449:	6a 2b                	push   0x2b
c001244b:	6a 00                	push   0x0
c001244d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012451:	56                   	push   esi
c0012452:	e8 29 e1 fe ff       	call   c0000580 <memset>
c0012457:	5f                   	pop    edi
c0012458:	58                   	pop    eax
c0012459:	89 ef                	mov    edi,ebp
c001245b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001245f:	50                   	push   eax
c0012460:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012464:	e8 18 fd ff ff       	call   c0012181 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012469:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001246e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012473:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012478:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	85 ed                	test   ebp,ebp
c0012482:	74 14                	je     c0012498 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012484:	51                   	push   ecx
c0012485:	51                   	push   ecx
c0012486:	57                   	push   edi
c0012487:	53                   	push   ebx
c0012488:	e8 02 f7 ff ff       	call   c0011b8f <CmGetNext(Reghive_Tag*, int)>
c001248d:	83 c4 10             	add    esp,0x10
c0012490:	85 c0                	test   eax,eax
c0012492:	74 04                	je     c0012498 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012494:	89 c7                	mov    edi,eax
c0012496:	eb e8                	jmp    c0012480 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012498:	56                   	push   esi
c0012499:	6a 00                	push   0x0
c001249b:	57                   	push   edi
c001249c:	53                   	push   ebx
c001249d:	e8 a9 f8 ff ff       	call   c0011d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00124a2:	83 c4 0c             	add    esp,0xc
c00124a5:	56                   	push   esi
c00124a6:	89 c7                	mov    edi,eax
c00124a8:	50                   	push   eax
c00124a9:	53                   	push   ebx
c00124aa:	e8 ea f5 ff ff       	call   c0011a99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124af:	58                   	pop    eax
c00124b0:	5a                   	pop    edx
c00124b1:	6a 6c                	push   0x6c
c00124b3:	6a 00                	push   0x0
c00124b5:	6a 00                	push   0x0
c00124b7:	68 61 08 02 c0       	push   0xc0020861
c00124bc:	57                   	push   edi
c00124bd:	53                   	push   ebx
c00124be:	e8 24 ff ff ff       	call   c00123e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00124c3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00124c7:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00124cb:	c1 e8 10             	shr    eax,0x10
c00124ce:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00124d2:	83 c4 1c             	add    esp,0x1c
c00124d5:	56                   	push   esi
c00124d6:	57                   	push   edi
c00124d7:	53                   	push   ebx
c00124d8:	e8 e8 f6 ff ff       	call   c0011bc5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124dd:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c00124e2:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00124e7:	89 d0                	mov    eax,edx
c00124e9:	0f b6 54 24 2d       	movzx  edx,BYTE PTR [esp+0x2d]
c00124ee:	83 c4 4c             	add    esp,0x4c
c00124f1:	c1 e0 08             	shl    eax,0x8
c00124f4:	5b                   	pop    ebx
c00124f5:	5e                   	pop    esi
c00124f6:	09 c1                	or     ecx,eax
c00124f8:	89 d0                	mov    eax,edx
c00124fa:	5f                   	pop    edi
c00124fb:	5d                   	pop    ebp
c00124fc:	c1 e0 10             	shl    eax,0x10
c00124ff:	09 c8                	or     eax,ecx
c0012501:	c3                   	ret    

c0012502 <zStrtok(char*, char const*)>:
c0012502:	55                   	push   ebp
c0012503:	57                   	push   edi
c0012504:	56                   	push   esi
c0012505:	53                   	push   ebx
c0012506:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001250a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001250e:	85 ed                	test   ebp,ebp
c0012510:	74 2f                	je     c0012541 <zStrtok(char*, char const*)+0x3f>
c0012512:	85 c0                	test   eax,eax
c0012514:	75 09                	jne    c001251f <zStrtok(char*, char const*)+0x1d>
c0012516:	a1 90 69 02 c0       	mov    eax,ds:0xc0026990
c001251b:	85 c0                	test   eax,eax
c001251d:	74 4d                	je     c001256c <zStrtok(char*, char const*)+0x6a>
c001251f:	31 c9                	xor    ecx,ecx
c0012521:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012525:	74 03                	je     c001252a <zStrtok(char*, char const*)+0x28>
c0012527:	41                   	inc    ecx
c0012528:	eb f7                	jmp    c0012521 <zStrtok(char*, char const*)+0x1f>
c001252a:	31 d2                	xor    edx,edx
c001252c:	39 ca                	cmp    edx,ecx
c001252e:	74 15                	je     c0012545 <zStrtok(char*, char const*)+0x43>
c0012530:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c0012534:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012537:	89 f3                	mov    ebx,esi
c0012539:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c001253c:	74 13                	je     c0012551 <zStrtok(char*, char const*)+0x4f>
c001253e:	42                   	inc    edx
c001253f:	eb eb                	jmp    c001252c <zStrtok(char*, char const*)+0x2a>
c0012541:	31 c0                	xor    eax,eax
c0012543:	eb 27                	jmp    c001256c <zStrtok(char*, char const*)+0x6a>
c0012545:	c7 05 90 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026990,0x0
c001254f:	eb 1b                	jmp    c001256c <zStrtok(char*, char const*)+0x6a>
c0012551:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012553:	75 0a                	jne    c001255f <zStrtok(char*, char const*)+0x5d>
c0012555:	40                   	inc    eax
c0012556:	a3 90 69 02 c0       	mov    ds:0xc0026990,eax
c001255b:	89 e8                	mov    eax,ebp
c001255d:	eb 0d                	jmp    c001256c <zStrtok(char*, char const*)+0x6a>
c001255f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012563:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012566:	89 15 90 69 02 c0    	mov    DWORD PTR ds:0xc0026990,edx
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	5f                   	pop    edi
c001256f:	5d                   	pop    ebp
c0012570:	c3                   	ret    

c0012571 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012571:	57                   	push   edi
c0012572:	56                   	push   esi
c0012573:	53                   	push   ebx
c0012574:	81 ec 08 01 00 00    	sub    esp,0x108
c001257a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012581:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012588:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001258c:	53                   	push   ebx
c001258d:	e8 ee e0 fe ff       	call   c0000680 <strcpy>
c0012592:	59                   	pop    ecx
c0012593:	5e                   	pop    esi
c0012594:	68 02 0c 02 c0       	push   0xc0020c02
c0012599:	53                   	push   ebx
c001259a:	bb 01 00 00 00       	mov    ebx,0x1
c001259f:	e8 5e ff ff ff       	call   c0012502 <zStrtok(char*, char const*)>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	85 c0                	test   eax,eax
c00125a9:	74 3b                	je     c00125e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00125ab:	52                   	push   edx
c00125ac:	50                   	push   eax
c00125ad:	6a 01                	push   0x1
c00125af:	57                   	push   edi
c00125b0:	e8 b6 fd ff ff       	call   c001236b <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00125b5:	59                   	pop    ecx
c00125b6:	5e                   	pop    esi
c00125b7:	68 02 0c 02 c0       	push   0xc0020c02
c00125bc:	6a 00                	push   0x0
c00125be:	89 c3                	mov    ebx,eax
c00125c0:	e8 3d ff ff ff       	call   c0012502 <zStrtok(char*, char const*)>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	89 c6                	mov    esi,eax
c00125ca:	85 c0                	test   eax,eax
c00125cc:	74 18                	je     c00125e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00125ce:	52                   	push   edx
c00125cf:	52                   	push   edx
c00125d0:	53                   	push   ebx
c00125d1:	57                   	push   edi
c00125d2:	e8 75 f5 ff ff       	call   c0011b4c <CmEnterDirectory(Reghive_Tag*, int)>
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	89 c3                	mov    ebx,eax
c00125dc:	83 f8 ff             	cmp    eax,0xffffffff
c00125df:	74 05                	je     c00125e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00125e1:	50                   	push   eax
c00125e2:	56                   	push   esi
c00125e3:	53                   	push   ebx
c00125e4:	eb c9                	jmp    c00125af <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00125e6:	81 c4 00 01 00 00    	add    esp,0x100
c00125ec:	89 d8                	mov    eax,ebx
c00125ee:	5b                   	pop    ebx
c00125ef:	5e                   	pop    esi
c00125f0:	5f                   	pop    edi
c00125f1:	c3                   	ret    

c00125f2 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00125f2:	55                   	push   ebp
c00125f3:	57                   	push   edi
c00125f4:	56                   	push   esi
c00125f5:	53                   	push   ebx
c00125f6:	83 ec 5c             	sub    esp,0x5c
c00125f9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00125fd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012601:	85 db                	test   ebx,ebx
c0012603:	0f 8e 84 00 00 00    	jle    c001268d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012609:	57                   	push   edi
c001260a:	31 ed                	xor    ebp,ebp
c001260c:	6a 32                	push   0x32
c001260e:	6a 00                	push   0x0
c0012610:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012614:	57                   	push   edi
c0012615:	e8 66 df fe ff       	call   c0000580 <memset>
c001261a:	83 c4 0c             	add    esp,0xc
c001261d:	57                   	push   edi
c001261e:	53                   	push   ebx
c001261f:	56                   	push   esi
c0012620:	e8 2e fb ff ff       	call   c0012153 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012625:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012630:	7d 13                	jge    c0012645 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012632:	83 ec 0c             	sub    esp,0xc
c0012635:	45                   	inc    ebp
c0012636:	68 70 0f 02 c0       	push   0xc0020f70
c001263b:	e8 29 80 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	eb e7                	jmp    c001262c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012645:	51                   	push   ecx
c0012646:	57                   	push   edi
c0012647:	53                   	push   ebx
c0012648:	68 67 08 02 c0       	push   0xc0020867
c001264d:	e8 17 80 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001265a:	75 1e                	jne    c001267a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001265c:	52                   	push   edx
c001265d:	52                   	push   edx
c001265e:	53                   	push   ebx
c001265f:	56                   	push   esi
c0012660:	e8 e7 f4 ff ff       	call   c0011b4c <CmEnterDirectory(Reghive_Tag*, int)>
c0012665:	83 c4 0c             	add    esp,0xc
c0012668:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001266c:	8d 51 04             	lea    edx,[ecx+0x4]
c001266f:	52                   	push   edx
c0012670:	50                   	push   eax
c0012671:	56                   	push   esi
c0012672:	e8 7b ff ff ff       	call   c00125f2 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	50                   	push   eax
c001267b:	50                   	push   eax
c001267c:	53                   	push   ebx
c001267d:	56                   	push   esi
c001267e:	e8 0c f5 ff ff       	call   c0011b8f <CmGetNext(Reghive_Tag*, int)>
c0012683:	83 c4 10             	add    esp,0x10
c0012686:	89 c3                	mov    ebx,eax
c0012688:	e9 74 ff ff ff       	jmp    c0012601 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001268d:	83 c4 5c             	add    esp,0x5c
c0012690:	5b                   	pop    ebx
c0012691:	5e                   	pop    esi
c0012692:	5f                   	pop    edi
c0012693:	5d                   	pop    ebp
c0012694:	c3                   	ret    

c0012695 <CmSplitFinalSlashInPlace(char*)>:
c0012695:	53                   	push   ebx
c0012696:	83 ec 14             	sub    esp,0x14
c0012699:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001269d:	53                   	push   ebx
c001269e:	e8 0d df fe ff       	call   c00005b0 <strlen>
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	48                   	dec    eax
c00126a7:	85 c0                	test   eax,eax
c00126a9:	74 15                	je     c00126c0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00126ab:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126af:	8d 14 03             	lea    edx,[ebx+eax*1]
c00126b2:	75 09                	jne    c00126bd <CmSplitFinalSlashInPlace(char*)+0x28>
c00126b4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00126b7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00126bb:	eb 05                	jmp    c00126c2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00126bd:	48                   	dec    eax
c00126be:	eb e7                	jmp    c00126a7 <CmSplitFinalSlashInPlace(char*)+0x12>
c00126c0:	31 c0                	xor    eax,eax
c00126c2:	83 c4 08             	add    esp,0x8
c00126c5:	5b                   	pop    ebx
c00126c6:	c3                   	ret    

c00126c7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00126c7:	55                   	push   ebp
c00126c8:	57                   	push   edi
c00126c9:	56                   	push   esi
c00126ca:	53                   	push   ebx
c00126cb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00126d1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00126d8:	8a 03                	mov    al,BYTE PTR [ebx]
c00126da:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00126e1:	3c 40                	cmp    al,0x40
c00126e3:	75 19                	jne    c00126fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00126e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00126e7:	84 c0                	test   al,al
c00126e9:	74 07                	je     c00126f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2b>
c00126eb:	3c 3a                	cmp    al,0x3a
c00126ed:	74 03                	je     c00126f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2b>
c00126ef:	43                   	inc    ebx
c00126f0:	eb f3                	jmp    c00126e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1e>
c00126f2:	84 c0                	test   al,al
c00126f4:	0f 84 27 01 00 00    	je     c0012821 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15a>
c00126fa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00126fd:	43                   	inc    ebx
c00126fe:	50                   	push   eax
c00126ff:	6a 40                	push   0x40
c0012701:	6a 00                	push   0x0
c0012703:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012707:	50                   	push   eax
c0012708:	e8 73 de fe ff       	call   c0000580 <memset>
c001270d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012714:	31 c0                	xor    eax,eax
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	8a 0f                	mov    cl,BYTE PTR [edi]
c001271b:	84 c9                	test   cl,cl
c001271d:	0f 84 fe 00 00 00    	je     c0012821 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15a>
c0012723:	3d c7 00 00 00       	cmp    eax,0xc7
c0012728:	0f 8f f3 00 00 00    	jg     c0012821 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15a>
c001272e:	80 f9 0a             	cmp    cl,0xa
c0012731:	0f 85 db 00 00 00    	jne    c0012812 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0012737:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001273c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012740:	a8 df                	test   al,0xdf
c0012742:	0f 94 c1             	sete   cl
c0012745:	3c 23                	cmp    al,0x23
c0012747:	0f 94 c2             	sete   dl
c001274a:	08 d1                	or     cl,dl
c001274c:	75 49                	jne    c0012797 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001274e:	8d 50 f7             	lea    edx,[eax-0x9]
c0012751:	80 fa 01             	cmp    dl,0x1
c0012754:	76 41                	jbe    c0012797 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012756:	3c 5b                	cmp    al,0x5b
c0012758:	75 41                	jne    c001279b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001275a:	80 7c 24 0b 40       	cmp    BYTE PTR [esp+0xb],0x40
c001275f:	75 36                	jne    c0012797 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	8d 74 24 65          	lea    esi,[esp+0x65]
c0012768:	56                   	push   esi
c0012769:	e8 42 de fe ff       	call   c00005b0 <strlen>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	83 f8 3f             	cmp    eax,0x3f
c0012774:	0f 87 a7 00 00 00    	ja     c0012821 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15a>
c001277a:	50                   	push   eax
c001277b:	50                   	push   eax
c001277c:	56                   	push   esi
c001277d:	8d 74 24 24          	lea    esi,[esp+0x24]
c0012781:	56                   	push   esi
c0012782:	e8 f9 de fe ff       	call   c0000680 <strcpy>
c0012787:	89 34 24             	mov    DWORD PTR [esp],esi
c001278a:	e8 21 de fe ff       	call   c00005b0 <strlen>
c001278f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012794:	83 c4 10             	add    esp,0x10
c0012797:	31 d2                	xor    edx,edx
c0012799:	eb 7e                	jmp    c0012819 <Reg::findLineFromLoadedData(char*, char*, char*)+0x152>
c001279b:	80 7c 24 0b 40       	cmp    BYTE PTR [esp+0xb],0x40
c00127a0:	74 06                	je     c00127a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe1>
c00127a2:	8d 54 24 58          	lea    edx,[esp+0x58]
c00127a6:	eb 16                	jmp    c00127be <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00127a8:	51                   	push   ecx
c00127a9:	51                   	push   ecx
c00127aa:	55                   	push   ebp
c00127ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00127af:	50                   	push   eax
c00127b0:	e8 8b df fe ff       	call   c0000740 <strcmp>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	85 c0                	test   eax,eax
c00127ba:	75 db                	jne    c0012797 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00127bc:	eb e4                	jmp    c00127a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdb>
c00127be:	8a 02                	mov    al,BYTE PTR [edx]
c00127c0:	84 c0                	test   al,al
c00127c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127c6:	0f 94 c1             	sete   cl
c00127c9:	3c 3d                	cmp    al,0x3d
c00127cb:	0f 94 c0             	sete   al
c00127ce:	08 c8                	or     al,cl
c00127d0:	89 c6                	mov    esi,eax
c00127d2:	75 03                	jne    c00127d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x110>
c00127d4:	42                   	inc    edx
c00127d5:	eb e7                	jmp    c00127be <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00127d7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00127dc:	74 43                	je     c0012821 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15a>
c00127de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127e2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00127e5:	52                   	push   edx
c00127e6:	52                   	push   edx
c00127e7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00127eb:	50                   	push   eax
c00127ec:	53                   	push   ebx
c00127ed:	e8 4e df fe ff       	call   c0000740 <strcmp>
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127f9:	85 c0                	test   eax,eax
c00127fb:	75 9a                	jne    c0012797 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00127fd:	42                   	inc    edx
c00127fe:	50                   	push   eax
c00127ff:	50                   	push   eax
c0012800:	52                   	push   edx
c0012801:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012808:	e8 73 de fe ff       	call   c0000680 <strcpy>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	eb 11                	jmp    c0012823 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15c>
c0012812:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012816:	8d 50 01             	lea    edx,[eax+0x1]
c0012819:	47                   	inc    edi
c001281a:	89 d0                	mov    eax,edx
c001281c:	e9 f8 fe ff ff       	jmp    c0012719 <Reg::findLineFromLoadedData(char*, char*, char*)+0x52>
c0012821:	31 f6                	xor    esi,esi
c0012823:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012829:	89 f0                	mov    eax,esi
c001282b:	5b                   	pop    ebx
c001282c:	5e                   	pop    esi
c001282d:	5f                   	pop    edi
c001282e:	5d                   	pop    ebp
c001282f:	c3                   	ret    

c0012830 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012830:	57                   	push   edi
c0012831:	56                   	push   esi
c0012832:	53                   	push   ebx
c0012833:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0012839:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0012840:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0012847:	53                   	push   ebx
c0012848:	e8 63 dd fe ff       	call   c00005b0 <strlen>
c001284d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012850:	89 c7                	mov    edi,eax
c0012852:	e8 59 dd fe ff       	call   c00005b0 <strlen>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001285e:	3d ff 00 00 00       	cmp    eax,0xff
c0012863:	0f 87 d3 00 00 00    	ja     c001293c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012869:	57                   	push   edi
c001286a:	57                   	push   edi
c001286b:	56                   	push   esi
c001286c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012870:	56                   	push   esi
c0012871:	e8 0a de fe ff       	call   c0000680 <strcpy>
c0012876:	58                   	pop    eax
c0012877:	5a                   	pop    edx
c0012878:	68 02 0c 02 c0       	push   0xc0020c02
c001287d:	56                   	push   esi
c001287e:	e8 9d df fe ff       	call   c0000820 <strcat>
c0012883:	59                   	pop    ecx
c0012884:	5f                   	pop    edi
c0012885:	53                   	push   ebx
c0012886:	56                   	push   esi
c0012887:	e8 94 df fe ff       	call   c0000820 <strcat>
c001288c:	58                   	pop    eax
c001288d:	5a                   	pop    edx
c001288e:	68 71 08 02 c0       	push   0xc0020871
c0012893:	56                   	push   esi
c0012894:	e8 87 df fe ff       	call   c0000820 <strcat>
c0012899:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00128a0:	e8 d6 4f ff ff       	call   c000787b <malloc>
c00128a5:	83 c4 0c             	add    esp,0xc
c00128a8:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00128ae:	56                   	push   esi
c00128af:	89 c3                	mov    ebx,eax
c00128b1:	50                   	push   eax
c00128b2:	e8 1b 83 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	85 db                	test   ebx,ebx
c00128bc:	74 7e                	je     c001293c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00128be:	51                   	push   ecx
c00128bf:	51                   	push   ecx
c00128c0:	6a 01                	push   0x1
c00128c2:	53                   	push   ebx
c00128c3:	e8 c4 83 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	85 c0                	test   eax,eax
c00128cd:	74 08                	je     c00128d7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00128cf:	83 ec 0c             	sub    esp,0xc
c00128d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128d4:	53                   	push   ebx
c00128d5:	eb 5f                	jmp    c0012936 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00128d7:	52                   	push   edx
c00128d8:	8d 44 24 07          	lea    eax,[esp+0x7]
c00128dc:	50                   	push   eax
c00128dd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128e1:	50                   	push   eax
c00128e2:	53                   	push   ebx
c00128e3:	e8 50 86 ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c00128e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	89 c1                	mov    ecx,eax
c00128f1:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00128f5:	74 31                	je     c0012928 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	50                   	push   eax
c00128fb:	e8 7b 4f ff ff       	call   c000787b <malloc>
c0012900:	89 c6                	mov    esi,eax
c0012902:	58                   	pop    eax
c0012903:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012905:	8d 54 24 10          	lea    edx,[esp+0x10]
c0012909:	52                   	push   edx
c001290a:	56                   	push   esi
c001290b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001290f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012913:	53                   	push   ebx
c0012914:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012917:	83 c4 20             	add    esp,0x20
c001291a:	85 c0                	test   eax,eax
c001291c:	75 0a                	jne    c0012928 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001291e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012922:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012926:	74 18                	je     c0012940 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012928:	83 ec 0c             	sub    esp,0xc
c001292b:	53                   	push   ebx
c001292c:	e8 b9 83 ff ff       	call   c000acea <File::close()>
c0012931:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012933:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012936:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012939:	83 c4 10             	add    esp,0x10
c001293c:	31 db                	xor    ebx,ebx
c001293e:	eb 35                	jmp    c0012975 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x145>
c0012940:	83 ec 0c             	sub    esp,0xc
c0012943:	53                   	push   ebx
c0012944:	e8 a1 83 ff ff       	call   c000acea <File::close()>
c0012949:	8b 03                	mov    eax,DWORD PTR [ebx]
c001294b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001294e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012951:	83 c4 0c             	add    esp,0xc
c0012954:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001295b:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0012962:	56                   	push   esi
c0012963:	e8 5f fd ff ff       	call   c00126c7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012968:	89 34 24             	mov    DWORD PTR [esp],esi
c001296b:	88 c3                	mov    bl,al
c001296d:	e8 19 4f ff ff       	call   c000788b <free>
c0012972:	83 c4 10             	add    esp,0x10
c0012975:	81 c4 10 01 00 00    	add    esp,0x110
c001297b:	88 d8                	mov    al,bl
c001297d:	5b                   	pop    ebx
c001297e:	5e                   	pop    esi
c001297f:	5f                   	pop    edi
c0012980:	c3                   	ret    

c0012981 <Reg::getLine(char*, char*, char*)>:
c0012981:	57                   	push   edi
c0012982:	56                   	push   esi
c0012983:	53                   	push   ebx
c0012984:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012988:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001298c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012990:	57                   	push   edi
c0012991:	56                   	push   esi
c0012992:	53                   	push   ebx
c0012993:	68 76 08 02 c0       	push   0xc0020876
c0012998:	e8 93 fe ff ff       	call   c0012830 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	84 c0                	test   al,al
c00129a2:	75 10                	jne    c00129b4 <Reg::getLine(char*, char*, char*)+0x33>
c00129a4:	57                   	push   edi
c00129a5:	56                   	push   esi
c00129a6:	53                   	push   ebx
c00129a7:	68 9b 08 02 c0       	push   0xc002089b
c00129ac:	e8 7f fe ff ff       	call   c0012830 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00129b1:	83 c4 10             	add    esp,0x10
c00129b4:	5b                   	pop    ebx
c00129b5:	5e                   	pop    esi
c00129b6:	5f                   	pop    edi
c00129b7:	c3                   	ret    

c00129b8 <Reg::readInt(char*, char*, int*)>:
c00129b8:	55                   	push   ebp
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	53                   	push   ebx
c00129bc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00129c2:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00129c6:	53                   	push   ebx
c00129c7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00129ce:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00129d5:	e8 a7 ff ff ff       	call   c0012981 <Reg::getLine(char*, char*, char*)>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	84 c0                	test   al,al
c00129df:	0f 84 c7 00 00 00    	je     c0012aac <Reg::readInt(char*, char*, int*)+0xf4>
c00129e5:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c00129e9:	80 f9 2b             	cmp    cl,0x2b
c00129ec:	74 0f                	je     c00129fd <Reg::readInt(char*, char*, int*)+0x45>
c00129ee:	31 d2                	xor    edx,edx
c00129f0:	80 f9 2d             	cmp    cl,0x2d
c00129f3:	b1 00                	mov    cl,0x0
c00129f5:	0f 94 c2             	sete   dl
c00129f8:	0f 45 c1             	cmovne eax,ecx
c00129fb:	eb 07                	jmp    c0012a04 <Reg::readInt(char*, char*, int*)+0x4c>
c00129fd:	ba 01 00 00 00       	mov    edx,0x1
c0012a02:	31 c0                	xor    eax,eax
c0012a04:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012a09:	be 0a 00 00 00       	mov    esi,0xa
c0012a0e:	75 20                	jne    c0012a30 <Reg::readInt(char*, char*, int*)+0x78>
c0012a10:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012a14:	80 f9 78             	cmp    cl,0x78
c0012a17:	75 0a                	jne    c0012a23 <Reg::readInt(char*, char*, int*)+0x6b>
c0012a19:	83 c2 02             	add    edx,0x2
c0012a1c:	be 10 00 00 00       	mov    esi,0x10
c0012a21:	eb 0d                	jmp    c0012a30 <Reg::readInt(char*, char*, int*)+0x78>
c0012a23:	80 f9 62             	cmp    cl,0x62
c0012a26:	75 08                	jne    c0012a30 <Reg::readInt(char*, char*, int*)+0x78>
c0012a28:	83 c2 02             	add    edx,0x2
c0012a2b:	be 02 00 00 00       	mov    esi,0x2
c0012a30:	8d 3c 13             	lea    edi,[ebx+edx*1]
c0012a33:	31 d2                	xor    edx,edx
c0012a35:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012a39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012a3d:	8a 1f                	mov    bl,BYTE PTR [edi]
c0012a3f:	84 db                	test   bl,bl
c0012a41:	88 5c 24 0b          	mov    BYTE PTR [esp+0xb],bl
c0012a45:	0f 94 c3             	sete   bl
c0012a48:	80 7c 24 0b 0d       	cmp    BYTE PTR [esp+0xb],0xd
c0012a4d:	89 df                	mov    edi,ebx
c0012a4f:	0f 94 c3             	sete   bl
c0012a52:	89 dd                	mov    ebp,ebx
c0012a54:	89 fb                	mov    ebx,edi
c0012a56:	89 e9                	mov    ecx,ebp
c0012a58:	08 cb                	or     bl,cl
c0012a5a:	89 df                	mov    edi,ebx
c0012a5c:	75 3d                	jne    c0012a9b <Reg::readInt(char*, char*, int*)+0xe3>
c0012a5e:	0f af d6             	imul   edx,esi
c0012a61:	0f be 7c 24 0b       	movsx  edi,BYTE PTR [esp+0xb]
c0012a66:	83 fe 10             	cmp    esi,0x10
c0012a69:	75 26                	jne    c0012a91 <Reg::readInt(char*, char*, int*)+0xd9>
c0012a6b:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0012a6f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012a72:	89 eb                	mov    ebx,ebp
c0012a74:	80 fb 05             	cmp    bl,0x5
c0012a77:	77 06                	ja     c0012a7f <Reg::readInt(char*, char*, int*)+0xc7>
c0012a79:	8d 54 3a c9          	lea    edx,[edx+edi*1-0x37]
c0012a7d:	eb 16                	jmp    c0012a95 <Reg::readInt(char*, char*, int*)+0xdd>
c0012a7f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0012a83:	83 e9 61             	sub    ecx,0x61
c0012a86:	80 f9 05             	cmp    cl,0x5
c0012a89:	77 06                	ja     c0012a91 <Reg::readInt(char*, char*, int*)+0xd9>
c0012a8b:	8d 54 3a a9          	lea    edx,[edx+edi*1-0x57]
c0012a8f:	eb 04                	jmp    c0012a95 <Reg::readInt(char*, char*, int*)+0xdd>
c0012a91:	8d 54 3a d0          	lea    edx,[edx+edi*1-0x30]
c0012a95:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012a99:	eb 9e                	jmp    c0012a39 <Reg::readInt(char*, char*, int*)+0x81>
c0012a9b:	84 c0                	test   al,al
c0012a9d:	74 02                	je     c0012aa1 <Reg::readInt(char*, char*, int*)+0xe9>
c0012a9f:	f7 da                	neg    edx
c0012aa1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012aa8:	89 10                	mov    DWORD PTR [eax],edx
c0012aaa:	89 f8                	mov    eax,edi
c0012aac:	81 c4 ec 00 00 00    	add    esp,0xec
c0012ab2:	5b                   	pop    ebx
c0012ab3:	5e                   	pop    esi
c0012ab4:	5f                   	pop    edi
c0012ab5:	5d                   	pop    ebp
c0012ab6:	c3                   	ret    

c0012ab7 <Reg::readString(char*, char*, char*, int)>:
c0012ab7:	57                   	push   edi
c0012ab8:	56                   	push   esi
c0012ab9:	53                   	push   ebx
c0012aba:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012ac0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012ac4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012acb:	57                   	push   edi
c0012acc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ad3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ada:	e8 a2 fe ff ff       	call   c0012981 <Reg::getLine(char*, char*, char*)>
c0012adf:	83 c4 10             	add    esp,0x10
c0012ae2:	89 c6                	mov    esi,eax
c0012ae4:	84 c0                	test   al,al
c0012ae6:	74 44                	je     c0012b2c <Reg::readString(char*, char*, char*, int)+0x75>
c0012ae8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012aef:	31 c0                	xor    eax,eax
c0012af1:	4a                   	dec    edx
c0012af2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012af5:	84 c9                	test   cl,cl
c0012af7:	74 0f                	je     c0012b08 <Reg::readString(char*, char*, char*, int)+0x51>
c0012af9:	39 c2                	cmp    edx,eax
c0012afb:	7e 0b                	jle    c0012b08 <Reg::readString(char*, char*, char*, int)+0x51>
c0012afd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012b00:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012b05:	40                   	inc    eax
c0012b06:	eb ea                	jmp    c0012af2 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	53                   	push   ebx
c0012b0c:	e8 9f da fe ff       	call   c00005b0 <strlen>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012b19:	75 11                	jne    c0012b2c <Reg::readString(char*, char*, char*, int)+0x75>
c0012b1b:	83 ec 0c             	sub    esp,0xc
c0012b1e:	53                   	push   ebx
c0012b1f:	e8 8c da fe ff       	call   c00005b0 <strlen>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b2c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012b32:	89 f0                	mov    eax,esi
c0012b34:	5b                   	pop    ebx
c0012b35:	5e                   	pop    esi
c0012b36:	5f                   	pop    edi
c0012b37:	c3                   	ret    

c0012b38 <Reg::readBool(char*, char*, bool*)>:
c0012b38:	83 ec 20             	sub    esp,0x20
c0012b3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012b3f:	50                   	push   eax
c0012b40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b48:	e8 6b fe ff ff       	call   c00129b8 <Reg::readInt(char*, char*, int*)>
c0012b4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012b51:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012b56:	0f 95 02             	setne  BYTE PTR [edx]
c0012b59:	83 c4 2c             	add    esp,0x2c
c0012b5c:	c3                   	ret    

c0012b5d <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012b5d:	53                   	push   ebx
c0012b5e:	83 ec 1c             	sub    esp,0x1c
c0012b61:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012b65:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012b69:	50                   	push   eax
c0012b6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b72:	e8 c1 ff ff ff       	call   c0012b38 <Reg::readBool(char*, char*, bool*)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	84 c0                	test   al,al
c0012b7c:	74 04                	je     c0012b82 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012b7e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012b82:	83 c4 18             	add    esp,0x18
c0012b85:	88 d8                	mov    al,bl
c0012b87:	5b                   	pop    ebx
c0012b88:	c3                   	ret    

c0012b89 <Reg::readIntWithDefault(char*, char*, int)>:
c0012b89:	53                   	push   ebx
c0012b8a:	83 ec 1c             	sub    esp,0x1c
c0012b8d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012b91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b95:	50                   	push   eax
c0012b96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9e:	e8 15 fe ff ff       	call   c00129b8 <Reg::readInt(char*, char*, int*)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	84 c0                	test   al,al
c0012ba8:	74 04                	je     c0012bae <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012baa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bae:	83 c4 18             	add    esp,0x18
c0012bb1:	89 d8                	mov    eax,ebx
c0012bb3:	5b                   	pop    ebx
c0012bb4:	c3                   	ret    

c0012bb5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012bb5:	57                   	push   edi
c0012bb6:	56                   	push   esi
c0012bb7:	53                   	push   ebx
c0012bb8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012bbc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012bc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012bc4:	56                   	push   esi
c0012bc5:	57                   	push   edi
c0012bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bce:	e8 e4 fe ff ff       	call   c0012ab7 <Reg::readString(char*, char*, char*, int)>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	84 c0                	test   al,al
c0012bd8:	75 16                	jne    c0012bf0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012bda:	50                   	push   eax
c0012bdb:	56                   	push   esi
c0012bdc:	6a 00                	push   0x0
c0012bde:	57                   	push   edi
c0012bdf:	e8 9c d9 fe ff       	call   c0000580 <memset>
c0012be4:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012be7:	89 de                	mov    esi,ebx
c0012be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	89 df                	mov    edi,ebx
c0012bf0:	89 f8                	mov    eax,edi
c0012bf2:	5b                   	pop    ebx
c0012bf3:	5e                   	pop    esi
c0012bf4:	5f                   	pop    edi
c0012bf5:	c3                   	ret    

c0012bf6 <SysEject(regs*)>:
c0012bf6:	83 ec 0c             	sub    esp,0xc
c0012bf9:	83 ca ff             	or     edx,0xffffffff
c0012bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c00:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012c03:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012c08:	83 e9 41             	sub    ecx,0x41
c0012c0b:	83 f9 19             	cmp    ecx,0x19
c0012c0e:	77 18                	ja     c0012c28 <SysEject(regs*)+0x32>
c0012c10:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012c17:	85 c9                	test   ecx,ecx
c0012c19:	74 0d                	je     c0012c28 <SysEject(regs*)+0x32>
c0012c1b:	83 ec 0c             	sub    esp,0xc
c0012c1e:	51                   	push   ecx
c0012c1f:	e8 36 a1 ff ff       	call   c000cd5a <LogicalDisk::eject()>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	99                   	cdq    
c0012c28:	83 c4 0c             	add    esp,0xc
c0012c2b:	c3                   	ret    

c0012c2c <SysExit(regs*)>:
c0012c2c:	83 ec 18             	sub    esp,0x18
c0012c2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c33:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012c36:	e8 75 29 00 00       	call   c00155b0 <terminateTask(int)>
c0012c3b:	83 c8 ff             	or     eax,0xffffffff
c0012c3e:	83 c4 1c             	add    esp,0x1c
c0012c41:	89 c2                	mov    edx,eax
c0012c43:	c3                   	ret    

c0012c44 <SysGetCwd(regs*)>:
c0012c44:	83 ec 10             	sub    esp,0x10
c0012c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c4b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012c4e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012c51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c56:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c59:	e8 76 7d ff ff       	call   c000a9d4 <Fs::getcwd(Process*, char*, int)>
c0012c5e:	83 c4 1c             	add    esp,0x1c
c0012c61:	99                   	cdq    
c0012c62:	c3                   	ret    

c0012c63 <SysGetPID(regs*)>:
c0012c63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6d:	99                   	cdq    
c0012c6e:	c3                   	ret    

c0012c6f <SysGetRAMData(regs*)>:
c0012c6f:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012c79:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012c7f:	99                   	cdq    
c0012c80:	f7 f9                	idiv   ecx
c0012c82:	c1 e0 18             	shl    eax,0x18
c0012c85:	09 c8                	or     eax,ecx
c0012c87:	99                   	cdq    
c0012c88:	c3                   	ret    

c0012c89 <SysGetVGAPtr(regs*)>:
c0012c89:	55                   	push   ebp
c0012c8a:	57                   	push   edi
c0012c8b:	56                   	push   esi
c0012c8c:	53                   	push   ebx
c0012c8d:	83 ec 18             	sub    esp,0x18
c0012c90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012c94:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012c97:	e8 2c 24 00 00       	call   c00150c8 <Thr::processFromPID(int)>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	85 c0                	test   eax,eax
c0012ca1:	74 5b                	je     c0012cfe <SysGetVGAPtr(regs*)+0x75>
c0012ca3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012ca7:	8b a8 06 05 00 00    	mov    ebp,DWORD PTR [eax+0x506]
c0012cad:	74 0c                	je     c0012cbb <SysGetVGAPtr(regs*)+0x32>
c0012caf:	83 ec 0c             	sub    esp,0xc
c0012cb2:	55                   	push   ebp
c0012cb3:	e8 73 58 ff ff       	call   c000852b <setActiveTerminal(VgaText*)>
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012cbe:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012cc1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012cc8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012ccb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cce:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012cd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cd7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012cda:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012ce0:	50                   	push   eax
c0012ce1:	50                   	push   eax
c0012ce2:	68 b6 08 02 c0       	push   0xc00208b6
c0012ce7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cea:	05 a8 0f 00 00       	add    eax,0xfa8
c0012cef:	50                   	push   eax
c0012cf0:	e8 8b d9 fe ff       	call   c0000680 <strcpy>
c0012cf5:	83 c4 10             	add    esp,0x10
c0012cf8:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0012cfc:	eb 08                	jmp    c0012d06 <SysGetVGAPtr(regs*)+0x7d>
c0012cfe:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0012d06:	83 c4 0c             	add    esp,0xc
c0012d09:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012d0d:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012d13:	5b                   	pop    ebx
c0012d14:	5e                   	pop    esi
c0012d15:	5f                   	pop    edi
c0012d16:	5d                   	pop    ebp
c0012d17:	c3                   	ret    

c0012d18 <SysKill(regs*)>:
c0012d18:	53                   	push   ebx
c0012d19:	83 ec 08             	sub    esp,0x8
c0012d1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d20:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012d24:	75 16                	jne    c0012d3c <SysKill(regs*)+0x24>
c0012d26:	83 ec 0c             	sub    esp,0xc
c0012d29:	68 c0 08 02 c0       	push   0xc00208c0
c0012d2e:	e8 8a d7 ff ff       	call   c00104bd <KePanic(char const*)>
c0012d33:	83 c4 10             	add    esp,0x10
c0012d36:	e9 89 00 00 00       	jmp    c0012dc4 <SysKill(regs*)+0xac>
c0012d3b:	90                   	nop
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	68 84 71 02 c0       	push   0xc0027184
c0012d44:	e8 63 b8 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d49:	8d 76 00             	lea    esi,[esi+0x0]
c0012d4c:	83 c4 10             	add    esp,0x10
c0012d4f:	85 c0                	test   eax,eax
c0012d51:	74 19                	je     c0012d6c <SysKill(regs*)+0x54>
c0012d53:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012d56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012d59:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012d5b:	74 33                	je     c0012d90 <SysKill(regs*)+0x78>
c0012d5d:	52                   	push   edx
c0012d5e:	52                   	push   edx
c0012d5f:	50                   	push   eax
c0012d60:	68 84 71 02 c0       	push   0xc0027184
c0012d65:	e8 5e bb 00 00       	call   c001e8c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012d6a:	eb e0                	jmp    c0012d4c <SysKill(regs*)+0x34>
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	68 78 71 02 c0       	push   0xc0027178
c0012d74:	e8 33 b8 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d79:	8d 76 00             	lea    esi,[esi+0x0]
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	85 c0                	test   eax,eax
c0012d81:	74 41                	je     c0012dc4 <SysKill(regs*)+0xac>
c0012d83:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012d86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012d89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012d8b:	75 27                	jne    c0012db4 <SysKill(regs*)+0x9c>
c0012d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d90:	51                   	push   ecx
c0012d91:	51                   	push   ecx
c0012d92:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012d95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d9d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012da3:	e8 80 db ff ff       	call   c0010928 <KeRaiseSignal(SigHandlerBlock*, int)>
c0012da8:	83 c4 10             	add    esp,0x10
c0012dab:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0012daf:	eb 17                	jmp    c0012dc8 <SysKill(regs*)+0xb0>
c0012db1:	8d 76 00             	lea    esi,[esi+0x0]
c0012db4:	52                   	push   edx
c0012db5:	52                   	push   edx
c0012db6:	50                   	push   eax
c0012db7:	68 78 71 02 c0       	push   0xc0027178
c0012dbc:	e8 07 bb 00 00       	call   c001e8c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012dc1:	eb b9                	jmp    c0012d7c <SysKill(regs*)+0x64>
c0012dc3:	90                   	nop
c0012dc4:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0012dc8:	83 c4 08             	add    esp,0x8
c0012dcb:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012dcf:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012dd5:	5b                   	pop    ebx
c0012dd6:	c3                   	ret    

c0012dd7 <SysLoadDLL(regs*)>:
c0012dd7:	56                   	push   esi
c0012dd8:	53                   	push   ebx
c0012dd9:	51                   	push   ecx
c0012dda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dde:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0012de6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012dea:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012dee:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012df4:	0f 84 9d 00 00 00    	je     c0012e97 <SysLoadDLL(regs*)+0xc0>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	68 14 01 00 00       	push   0x114
c0012e02:	e8 74 4a ff ff       	call   c000787b <malloc>
c0012e07:	83 c4 0c             	add    esp,0xc
c0012e0a:	89 c3                	mov    ebx,eax
c0012e0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e11:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012e14:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012e17:	53                   	push   ebx
c0012e18:	e8 b5 7d ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	85 db                	test   ebx,ebx
c0012e22:	74 57                	je     c0012e7b <SysLoadDLL(regs*)+0xa4>
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	53                   	push   ebx
c0012e28:	e8 cd 80 ff ff       	call   c000aefa <File::exists()>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	84 c0                	test   al,al
c0012e32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e34:	75 14                	jne    c0012e4a <SysLoadDLL(regs*)+0x73>
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	53                   	push   ebx
c0012e3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e3d:	c5 f9 6f 05 a0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207a0
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	eb 43                	jmp    c0012e8d <SysLoadDLL(regs*)+0xb6>
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	53                   	push   ebx
c0012e4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e51:	58                   	pop    eax
c0012e52:	5a                   	pop    edx
c0012e53:	6a 00                	push   0x0
c0012e55:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012e58:	e8 40 14 00 00       	call   c001429d <Thr::loadDLL(char const*, bool)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	85 c0                	test   eax,eax
c0012e62:	74 21                	je     c0012e85 <SysLoadDLL(regs*)+0xae>
c0012e64:	53                   	push   ebx
c0012e65:	53                   	push   ebx
c0012e66:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012e6c:	50                   	push   eax
c0012e6d:	e8 6b 16 00 00       	call   c00144dd <Thr::executeDLL(unsigned long, void*)>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0012e79:	eb 12                	jmp    c0012e8d <SysLoadDLL(regs*)+0xb6>
c0012e7b:	c5 f9 6f 05 c0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207c0
c0012e83:	eb 08                	jmp    c0012e8d <SysLoadDLL(regs*)+0xb6>
c0012e85:	c5 f9 6f 05 f0 08 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00208f0
c0012e8d:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012e91:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012e97:	59                   	pop    ecx
c0012e98:	5b                   	pop    ebx
c0012e99:	5e                   	pop    esi
c0012e9a:	c3                   	ret    

c0012e9b <SysRead(regs*)>:
c0012e9b:	57                   	push   edi
c0012e9c:	56                   	push   esi
c0012e9d:	53                   	push   ebx
c0012e9e:	83 ec 10             	sub    esp,0x10
c0012ea1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ea5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ea8:	83 f8 02             	cmp    eax,0x2
c0012eab:	77 10                	ja     c0012ebd <SysRead(regs*)+0x22>
c0012ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012eb5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012ebb:	eb 0e                	jmp    c0012ecb <SysRead(regs*)+0x30>
c0012ebd:	83 ec 0c             	sub    esp,0xc
c0012ec0:	50                   	push   eax
c0012ec1:	e8 a1 63 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c0012ec6:	83 c4 10             	add    esp,0x10
c0012ec9:	89 c1                	mov    ecx,eax
c0012ecb:	83 c8 ff             	or     eax,0xffffffff
c0012ece:	89 c2                	mov    edx,eax
c0012ed0:	85 c9                	test   ecx,ecx
c0012ed2:	74 28                	je     c0012efc <SysRead(regs*)+0x61>
c0012ed4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ee1:	31 ff                	xor    edi,edi
c0012ee3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012ee7:	52                   	push   edx
c0012ee8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012eeb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012eee:	57                   	push   edi
c0012eef:	56                   	push   esi
c0012ef0:	51                   	push   ecx
c0012ef1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012ef8:	83 c4 20             	add    esp,0x20
c0012efb:	99                   	cdq    
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	5b                   	pop    ebx
c0012f00:	5e                   	pop    esi
c0012f01:	5f                   	pop    edi
c0012f02:	c3                   	ret    

c0012f03 <SysRegisterSignal(regs*)>:
c0012f03:	83 ec 18             	sub    esp,0x18
c0012f06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f0a:	6a 00                	push   0x0
c0012f0c:	6a 00                	push   0x0
c0012f0e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012f11:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f1c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012f22:	e8 cf d9 ff ff       	call   c00108f6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012f27:	83 c4 2c             	add    esp,0x2c
c0012f2a:	99                   	cdq    
c0012f2b:	c3                   	ret    

c0012f2c <SysRegistryGetTypeFromPath(regs*)>:
c0012f2c:	57                   	push   edi
c0012f2d:	56                   	push   esi
c0012f2e:	53                   	push   ebx
c0012f2f:	81 ec 38 01 00 00    	sub    esp,0x138
c0012f35:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012f3c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012f3f:	68 00 09 02 c0       	push   0xc0020900
c0012f44:	e8 20 77 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0012f49:	5a                   	pop    edx
c0012f4a:	59                   	pop    ecx
c0012f4b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012f4e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012f51:	e8 1b f6 ff ff       	call   c0012571 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012f56:	5f                   	pop    edi
c0012f57:	5a                   	pop    edx
c0012f58:	50                   	push   eax
c0012f59:	89 c6                	mov    esi,eax
c0012f5b:	68 20 09 02 c0       	push   0xc0020920
c0012f60:	e8 04 77 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	85 f6                	test   esi,esi
c0012f6a:	74 28                	je     c0012f94 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012f6c:	50                   	push   eax
c0012f6d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012f71:	57                   	push   edi
c0012f72:	56                   	push   esi
c0012f73:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012f76:	e8 d8 f1 ff ff       	call   c0012153 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012f7b:	83 c4 0c             	add    esp,0xc
c0012f7e:	57                   	push   edi
c0012f7f:	89 c3                	mov    ebx,eax
c0012f81:	50                   	push   eax
c0012f82:	68 28 09 02 c0       	push   0xc0020928
c0012f87:	e8 dd 76 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0012f8c:	89 d8                	mov    eax,ebx
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	99                   	cdq    
c0012f92:	eb 05                	jmp    c0012f99 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012f94:	83 c8 ff             	or     eax,0xffffffff
c0012f97:	89 c2                	mov    edx,eax
c0012f99:	81 c4 30 01 00 00    	add    esp,0x130
c0012f9f:	5b                   	pop    ebx
c0012fa0:	5e                   	pop    esi
c0012fa1:	5f                   	pop    edi
c0012fa2:	c3                   	ret    

c0012fa3 <SysRegistryReadExtent(regs*)>:
c0012fa3:	83 ec 1c             	sub    esp,0x1c
c0012fa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012faa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012fad:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0012fb0:	85 c0                	test   eax,eax
c0012fb2:	79 27                	jns    c0012fdb <SysRegistryReadExtent(regs*)+0x38>
c0012fb4:	52                   	push   edx
c0012fb5:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0012fba:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012fbe:	52                   	push   edx
c0012fbf:	50                   	push   eax
c0012fc0:	51                   	push   ecx
c0012fc1:	e8 82 f0 ff ff       	call   c0012048 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0012fc6:	c5 fa 7e 44 24 18    	vmovq  xmm0,QWORD PTR [esp+0x18]
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012fd3:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012fd9:	eb 1e                	jmp    c0012ff9 <SysRegistryReadExtent(regs*)+0x56>
c0012fdb:	83 ec 04             	sub    esp,0x4
c0012fde:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0012fe1:	50                   	push   eax
c0012fe2:	51                   	push   ecx
c0012fe3:	e8 ed ea ff ff       	call   c0011ad5 <CmGetString(Reghive_Tag*, int, char*)>
c0012fe8:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0012fec:	83 c4 10             	add    esp,0x10
c0012fef:	c5 f9 7e c0          	vmovd  eax,xmm0
c0012ff3:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0012ff9:	83 c4 1c             	add    esp,0x1c
c0012ffc:	c3                   	ret    

c0012ffd <SysRegistryPathToExtentLookup(regs*)>:
c0012ffd:	53                   	push   ebx
c0012ffe:	83 ec 10             	sub    esp,0x10
c0013001:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013005:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013008:	68 3e 09 02 c0       	push   0xc002093e
c001300d:	e8 57 76 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0013012:	58                   	pop    eax
c0013013:	5a                   	pop    edx
c0013014:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013017:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001301a:	e8 52 f5 ff ff       	call   c0012571 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001301f:	83 c4 18             	add    esp,0x18
c0013022:	99                   	cdq    
c0013023:	5b                   	pop    ebx
c0013024:	c3                   	ret    

c0013025 <SysRegistryEnterDirectory(regs*)>:
c0013025:	53                   	push   ebx
c0013026:	83 ec 10             	sub    esp,0x10
c0013029:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001302d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013030:	68 61 09 02 c0       	push   0xc0020961
c0013035:	e8 2f 76 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001303a:	58                   	pop    eax
c001303b:	5a                   	pop    edx
c001303c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001303f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013042:	e8 05 eb ff ff       	call   c0011b4c <CmEnterDirectory(Reghive_Tag*, int)>
c0013047:	83 c4 18             	add    esp,0x18
c001304a:	99                   	cdq    
c001304b:	5b                   	pop    ebx
c001304c:	c3                   	ret    

c001304d <SysRegistryGetNext(regs*)>:
c001304d:	53                   	push   ebx
c001304e:	83 ec 10             	sub    esp,0x10
c0013051:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013055:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013058:	68 7f 09 02 c0       	push   0xc002097f
c001305d:	e8 07 76 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0013062:	58                   	pop    eax
c0013063:	5a                   	pop    edx
c0013064:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013067:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001306a:	e8 20 eb ff ff       	call   c0011b8f <CmGetNext(Reghive_Tag*, int)>
c001306f:	83 c4 18             	add    esp,0x18
c0013072:	99                   	cdq    
c0013073:	5b                   	pop    ebx
c0013074:	c3                   	ret    

c0013075 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013075:	57                   	push   edi
c0013076:	56                   	push   esi
c0013077:	53                   	push   ebx
c0013078:	81 ec 34 01 00 00    	sub    esp,0x134
c001307e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013085:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013089:	57                   	push   edi
c001308a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001308d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013090:	e8 be f0 ff ff       	call   c0012153 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013095:	89 c3                	mov    ebx,eax
c0013097:	58                   	pop    eax
c0013098:	5a                   	pop    edx
c0013099:	57                   	push   edi
c001309a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001309d:	e8 de d5 fe ff       	call   c0000680 <strcpy>
c00130a2:	89 d8                	mov    eax,ebx
c00130a4:	81 c4 40 01 00 00    	add    esp,0x140
c00130aa:	5b                   	pop    ebx
c00130ab:	99                   	cdq    
c00130ac:	5e                   	pop    esi
c00130ad:	5f                   	pop    edi
c00130ae:	c3                   	ret    

c00130af <SysRegistryOpen(regs*)>:
c00130af:	83 ec 18             	sub    esp,0x18
c00130b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130b6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00130b9:	e8 a7 e8 ff ff       	call   c0011965 <CmOpen(char const*)>
c00130be:	83 c4 1c             	add    esp,0x1c
c00130c1:	99                   	cdq    
c00130c2:	c3                   	ret    

c00130c3 <SysRegistryClose(regs*)>:
c00130c3:	83 ec 18             	sub    esp,0x18
c00130c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130cd:	e8 b1 e9 ff ff       	call   c0011a83 <CmClose(Reghive_Tag*)>
c00130d2:	31 c0                	xor    eax,eax
c00130d4:	31 d2                	xor    edx,edx
c00130d6:	83 c4 1c             	add    esp,0x1c
c00130d9:	c3                   	ret    

c00130da <SysSbrk(regs*)>:
c00130da:	56                   	push   esi
c00130db:	53                   	push   ebx
c00130dc:	50                   	push   eax
c00130dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130e9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00130ec:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00130f2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00130f5:	85 db                	test   ebx,ebx
c00130f7:	74 02                	je     c00130fb <SysSbrk(regs*)+0x21>
c00130f9:	79 06                	jns    c0013101 <SysSbrk(regs*)+0x27>
c00130fb:	89 f0                	mov    eax,esi
c00130fd:	31 d2                	xor    edx,edx
c00130ff:	eb 2a                	jmp    c001312b <SysSbrk(regs*)+0x51>
c0013101:	83 c8 ff             	or     eax,0xffffffff
c0013104:	89 c2                	mov    edx,eax
c0013106:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001310c:	77 1d                	ja     c001312b <SysSbrk(regs*)+0x51>
c001310e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013114:	50                   	push   eax
c0013115:	c1 ea 0c             	shr    edx,0xc
c0013118:	68 07 0c 00 00       	push   0xc07
c001311d:	52                   	push   edx
c001311e:	51                   	push   ecx
c001311f:	e8 5c 6a ff ff       	call   c0009b80 <VAS::allocatePages(int, int)>
c0013124:	89 f0                	mov    eax,esi
c0013126:	31 d2                	xor    edx,edx
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	59                   	pop    ecx
c001312c:	5b                   	pop    ebx
c001312d:	5e                   	pop    esi
c001312e:	c3                   	ret    

c001312f <SysSetCwd(regs*)>:
c001312f:	83 ec 14             	sub    esp,0x14
c0013132:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013136:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001313e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013141:	e8 53 7e ff ff       	call   c000af99 <Fs::setcwd(Process*, char*)>
c0013146:	83 c4 1c             	add    esp,0x1c
c0013149:	99                   	cdq    
c001314a:	c3                   	ret    

c001314b <SysSetTime(regs*)>:
c001314b:	55                   	push   ebp
c001314c:	31 c9                	xor    ecx,ecx
c001314e:	bd 0c 00 00 00       	mov    ebp,0xc
c0013153:	57                   	push   edi
c0013154:	56                   	push   esi
c0013155:	53                   	push   ebx
c0013156:	31 db                	xor    ebx,ebx
c0013158:	83 ec 10             	sub    esp,0x10
c001315b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001315f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013162:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013165:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013168:	89 c2                	mov    edx,eax
c001316a:	c1 e8 05             	shr    eax,0x5
c001316d:	83 e2 1f             	and    edx,0x1f
c0013170:	66 81 ef 6c 07       	sub    di,0x76c
c0013175:	42                   	inc    edx
c0013176:	c1 e7 10             	shl    edi,0x10
c0013179:	88 d1                	mov    cl,dl
c001317b:	31 d2                	xor    edx,edx
c001317d:	f7 f5                	div    ebp
c001317f:	89 dd                	mov    ebp,ebx
c0013181:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013187:	88 d5                	mov    ch,dl
c0013189:	31 d2                	xor    edx,edx
c001318b:	0f b7 c1             	movzx  eax,cx
c001318e:	09 f8                	or     eax,edi
c0013190:	bf 3c 00 00 00       	mov    edi,0x3c
c0013195:	89 c1                	mov    ecx,eax
c0013197:	89 f0                	mov    eax,esi
c0013199:	f7 f7                	div    edi
c001319b:	c1 e2 10             	shl    edx,0x10
c001319e:	09 d5                	or     ebp,edx
c00131a0:	31 d2                	xor    edx,edx
c00131a2:	f7 f7                	div    edi
c00131a4:	89 eb                	mov    ebx,ebp
c00131a6:	bf 10 0e 00 00       	mov    edi,0xe10
c00131ab:	89 f0                	mov    eax,esi
c00131ad:	88 d7                	mov    bh,dl
c00131af:	31 d2                	xor    edx,edx
c00131b1:	f7 f7                	div    edi
c00131b3:	bf 18 00 00 00       	mov    edi,0x18
c00131b8:	31 d2                	xor    edx,edx
c00131ba:	f7 f7                	div    edi
c00131bc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00131c1:	88 d3                	mov    bl,dl
c00131c3:	53                   	push   ebx
c00131c4:	51                   	push   ecx
c00131c5:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00131cb:	e8 ea 85 ff ff       	call   c000b7ba <Clock::setTimeInDatetimeLocal(datetime_t)>
c00131d0:	83 c4 1c             	add    esp,0x1c
c00131d3:	31 d2                	xor    edx,edx
c00131d5:	83 f0 01             	xor    eax,0x1
c00131d8:	5b                   	pop    ebx
c00131d9:	5e                   	pop    esi
c00131da:	0f b6 c0             	movzx  eax,al
c00131dd:	5f                   	pop    edi
c00131de:	5d                   	pop    ebp
c00131df:	c3                   	ret    

c00131e0 <SysTimezone(regs*)>:
c00131e0:	53                   	push   ebx
c00131e1:	83 ec 08             	sub    esp,0x8
c00131e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131e8:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00131ec:	75 16                	jne    c0013204 <SysTimezone(regs*)+0x24>
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	68 96 09 02 c0       	push   0xc0020996
c00131f6:	e8 6e 74 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
c0013202:	eb 21                	jmp    c0013225 <SysTimezone(regs*)+0x45>
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 ab 09 02 c0       	push   0xc00209ab
c001320c:	e8 58 74 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0013211:	58                   	pop    eax
c0013212:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013215:	e8 e6 82 ff ff       	call   c000b500 <User::loadClockSettings(int)>
c001321a:	83 c4 10             	add    esp,0x10
c001321d:	c5 f9 6f 05 b0 07 02 c0 	vmovdqa xmm0,XMMWORD PTR ds:0xc00207b0
c0013225:	83 c4 08             	add    esp,0x8
c0013228:	c5 f9 7e c0          	vmovd  eax,xmm0
c001322c:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0013232:	5b                   	pop    ebx
c0013233:	c3                   	ret    

c0013234 <SysWrite(regs*)>:
c0013234:	57                   	push   edi
c0013235:	56                   	push   esi
c0013236:	53                   	push   ebx
c0013237:	83 ec 10             	sub    esp,0x10
c001323a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001323e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013241:	83 f8 02             	cmp    eax,0x2
c0013244:	77 10                	ja     c0013256 <SysWrite(regs*)+0x22>
c0013246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001324b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001324e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013254:	eb 0e                	jmp    c0013264 <SysWrite(regs*)+0x30>
c0013256:	83 ec 0c             	sub    esp,0xc
c0013259:	50                   	push   eax
c001325a:	e8 08 60 ff ff       	call   c0009267 <getFromFileDescriptor(int)>
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	89 c1                	mov    ecx,eax
c0013264:	83 c8 ff             	or     eax,0xffffffff
c0013267:	89 c2                	mov    edx,eax
c0013269:	85 c9                	test   ecx,ecx
c001326b:	74 28                	je     c0013295 <SysWrite(regs*)+0x61>
c001326d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013275:	83 ec 0c             	sub    esp,0xc
c0013278:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327a:	31 ff                	xor    edi,edi
c001327c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013280:	52                   	push   edx
c0013281:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013284:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013287:	57                   	push   edi
c0013288:	56                   	push   esi
c0013289:	51                   	push   ecx
c001328a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001328d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013291:	83 c4 20             	add    esp,0x20
c0013294:	99                   	cdq    
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	5b                   	pop    ebx
c0013299:	5e                   	pop    esi
c001329a:	5f                   	pop    edi
c001329b:	c3                   	ret    

c001329c <SysWsbe(regs*)>:
c001329c:	57                   	push   edi
c001329d:	b9 0b 00 00 00       	mov    ecx,0xb
c00132a2:	56                   	push   esi
c00132a3:	be ea 09 02 c0       	mov    esi,0xc00209ea
c00132a8:	53                   	push   ebx
c00132a9:	83 ec 30             	sub    esp,0x30
c00132ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00132b0:	fc                   	cld    
c00132b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132bb:	83 ec 0c             	sub    esp,0xc
c00132be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132c2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00132c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00132ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00132cd:	57                   	push   edi
c00132ce:	e8 dd d2 fe ff       	call   c00005b0 <strlen>
c00132d3:	5a                   	pop    edx
c00132d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132d8:	52                   	push   edx
c00132d9:	31 d2                	xor    edx,edx
c00132db:	57                   	push   edi
c00132dc:	52                   	push   edx
c00132dd:	50                   	push   eax
c00132de:	56                   	push   esi
c00132df:	ff d3                	call   ebx
c00132e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00132e5:	83 c4 14             	add    esp,0x14
c00132e8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00132eb:	e8 c0 22 00 00       	call   c00155b0 <terminateTask(int)>
c00132f0:	83 c4 40             	add    esp,0x40
c00132f3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00132f8:	31 d2                	xor    edx,edx
c00132fa:	5b                   	pop    ebx
c00132fb:	5e                   	pop    esi
c00132fc:	5f                   	pop    edi
c00132fd:	c3                   	ret    

c00132fe <SysYield(regs*)>:
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	fa                   	cli    
c0013302:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013308:	e8 b3 19 00 00       	call   c0014cc0 <schedule()>
c001330d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013312:	48                   	dec    eax
c0013313:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013318:	75 01                	jne    c001331b <SysYield(regs*)+0x1d>
c001331a:	fb                   	sti    
c001331b:	31 c0                	xor    eax,eax
c001331d:	31 d2                	xor    edx,edx
c001331f:	83 c4 0c             	add    esp,0xc
c0013322:	c3                   	ret    

c0013323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013323:	55                   	push   ebp
c0013324:	57                   	push   edi
c0013325:	56                   	push   esi
c0013326:	53                   	push   ebx
c0013327:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001332d:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013338:	74 3b                	je     c0013375 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001333a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013342:	74 31                	je     c0013375 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013344:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001334c:	75 27                	jne    c0013375 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001334e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013355:	05 00 10 00 00       	add    eax,0x1000
c001335a:	89 c2                	mov    edx,eax
c001335c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013361:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013367:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001336e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013375:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001337c:	83 ec 0c             	sub    esp,0xc
c001337f:	6a 01                	push   0x1
c0013381:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013387:	e8 33 60 ff ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c001338c:	83 c4 10             	add    esp,0x10
c001338f:	89 c3                	mov    ebx,eax
c0013391:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013397:	0f 86 26 01 00 00    	jbe    c00134c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001339d:	c1 ee 0c             	shr    esi,0xc
c00133a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00133a8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00133af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00133b3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00133ba:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00133c1:	29 ef                	sub    edi,ebp
c00133c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00133c7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00133cb:	0f 83 f9 00 00 00    	jae    c00134ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00133d1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00133d7:	b8 00 10 00 00       	mov    eax,0x1000
c00133dc:	0f 47 f8             	cmova  edi,eax
c00133df:	83 ec 0c             	sub    esp,0xc
c00133e2:	31 d2                	xor    edx,edx
c00133e4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00133eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00133ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133f1:	50                   	push   eax
c00133f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00133f6:	56                   	push   esi
c00133f7:	52                   	push   edx
c00133f8:	57                   	push   edi
c00133f9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013400:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013403:	83 c4 20             	add    esp,0x20
c0013406:	85 c0                	test   eax,eax
c0013408:	75 06                	jne    c0013410 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001340a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001340e:	74 13                	je     c0013423 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	53                   	push   ebx
c0013414:	e8 a6 62 ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	31 c0                	xor    eax,eax
c001341e:	e9 7c 01 00 00       	jmp    c001359f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013423:	fa                   	cli    
c0013424:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001342a:	e8 31 47 ff ff       	call   c0007b60 <Phys::allocatePage()>
c001342f:	6a 07                	push   0x7
c0013431:	89 c7                	mov    edi,eax
c0013433:	53                   	push   ebx
c0013434:	50                   	push   eax
c0013435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001343a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001343d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013443:	e8 32 66 ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013448:	83 c4 0c             	add    esp,0xc
c001344b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013452:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013458:	6a 00                	push   0x0
c001345a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001345f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013462:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013468:	e8 7f 64 ff ff       	call   c00098ec <VAS::mapOtherVASIn(bool, VAS*)>
c001346d:	58                   	pop    eax
c001346e:	5a                   	pop    edx
c001346f:	68 07 0c 00 00       	push   0xc07
c0013474:	55                   	push   ebp
c0013475:	57                   	push   edi
c0013476:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001347d:	89 df                	mov    edi,ebx
c001347f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013485:	6a 00                	push   0x0
c0013487:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001348c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001348f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013495:	e8 96 69 ff ff       	call   c0009e30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001349a:	b9 00 10 00 00       	mov    ecx,0x1000
c001349f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134a1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00134a6:	83 c4 20             	add    esp,0x20
c00134a9:	48                   	dec    eax
c00134aa:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00134af:	85 c0                	test   eax,eax
c00134b1:	75 01                	jne    c00134b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00134b3:	fb                   	sti    
c00134b4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00134ba:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00134be:	e9 f0 fe ff ff       	jmp    c00133b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00134c3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00134ca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00134d1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00134d7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00134dd:	0f 86 ae 00 00 00    	jbe    c0013591 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00134e3:	fa                   	cli    
c00134e4:	51                   	push   ecx
c00134e5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00134ec:	c1 ee 0c             	shr    esi,0xc
c00134ef:	31 ff                	xor    edi,edi
c00134f1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00134f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00134fd:	6a 00                	push   0x0
c00134ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013504:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013507:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001350d:	e8 da 63 ff ff       	call   c00098ec <VAS::mapOtherVASIn(bool, VAS*)>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	e8 46 46 ff ff       	call   c0007b60 <Phys::allocatePage()>
c001351a:	6a 07                	push   0x7
c001351c:	47                   	inc    edi
c001351d:	53                   	push   ebx
c001351e:	50                   	push   eax
c001351f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013523:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013529:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001352c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013532:	e8 43 65 ff ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013537:	58                   	pop    eax
c0013538:	5a                   	pop    edx
c0013539:	68 07 0c 00 00       	push   0xc07
c001353e:	55                   	push   ebp
c001353f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013543:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013549:	50                   	push   eax
c001354a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013551:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013557:	6a 00                	push   0x0
c0013559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013561:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013567:	e8 c4 68 ff ff       	call   c0009e30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001356c:	83 c4 1c             	add    esp,0x1c
c001356f:	68 00 10 00 00       	push   0x1000
c0013574:	6a 00                	push   0x0
c0013576:	53                   	push   ebx
c0013577:	e8 04 d0 fe ff       	call   c0000580 <memset>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	39 fe                	cmp    esi,edi
c0013581:	77 92                	ja     c0013515 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013583:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013588:	48                   	dec    eax
c0013589:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001358e:	75 01                	jne    c0013591 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013590:	fb                   	sti    
c0013591:	83 ec 0c             	sub    esp,0xc
c0013594:	53                   	push   ebx
c0013595:	e8 25 61 ff ff       	call   c00096bf <Virt::freeKernelVirtualPages(unsigned long)>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	b0 01                	mov    al,0x1
c001359f:	81 c4 2c 10 00 00    	add    esp,0x102c
c00135a5:	5b                   	pop    ebx
c00135a6:	5e                   	pop    esi
c00135a7:	5f                   	pop    edi
c00135a8:	5d                   	pop    ebp
c00135a9:	c3                   	ret    

c00135aa <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00135aa:	55                   	push   ebp
c00135ab:	57                   	push   edi
c00135ac:	56                   	push   esi
c00135ad:	53                   	push   ebx
c00135ae:	83 ec 48             	sub    esp,0x48
c00135b1:	68 14 01 00 00       	push   0x114
c00135b6:	e8 c0 42 ff ff       	call   c000787b <malloc>
c00135bb:	83 c4 0c             	add    esp,0xc
c00135be:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135c2:	89 c6                	mov    esi,eax
c00135c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135c8:	50                   	push   eax
c00135c9:	e8 04 76 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c00135ce:	58                   	pop    eax
c00135cf:	5a                   	pop    edx
c00135d0:	6a 01                	push   0x1
c00135d2:	56                   	push   esi
c00135d3:	e8 b4 76 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	85 c0                	test   eax,eax
c00135dd:	0f 85 4c 01 00 00    	jne    c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00135e3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	6a 34                	push   0x34
c00135f0:	e8 86 42 ff ff       	call   c000787b <malloc>
c00135f5:	89 c3                	mov    ebx,eax
c00135f7:	58                   	pop    eax
c00135f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00135fa:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00135fe:	57                   	push   edi
c00135ff:	53                   	push   ebx
c0013600:	6a 00                	push   0x0
c0013602:	6a 34                	push   0x34
c0013604:	56                   	push   esi
c0013605:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013608:	83 c4 20             	add    esp,0x20
c001360b:	85 c0                	test   eax,eax
c001360d:	0f 85 1c 01 00 00    	jne    c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013613:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013619:	0f 85 10 01 00 00    	jne    c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001361f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013622:	85 c0                	test   eax,eax
c0013624:	0f 84 05 01 00 00    	je     c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001362a:	31 d2                	xor    edx,edx
c001362c:	55                   	push   ebp
c001362d:	52                   	push   edx
c001362e:	50                   	push   eax
c001362f:	56                   	push   esi
c0013630:	e8 15 77 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	85 c0                	test   eax,eax
c001363a:	0f 85 ef 00 00 00    	jne    c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013640:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013643:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013647:	83 ec 0c             	sub    esp,0xc
c001364a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001364e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013652:	0f af c2             	imul   eax,edx
c0013655:	50                   	push   eax
c0013656:	e8 20 42 ff ff       	call   c000787b <malloc>
c001365b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001365d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013660:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013664:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013668:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001366c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013670:	0f af c2             	imul   eax,edx
c0013673:	99                   	cdq    
c0013674:	52                   	push   edx
c0013675:	50                   	push   eax
c0013676:	56                   	push   esi
c0013677:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001367a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001367d:	83 c4 20             	add    esp,0x20
c0013680:	85 c0                	test   eax,eax
c0013682:	0f 84 a7 00 00 00    	je     c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013688:	31 d2                	xor    edx,edx
c001368a:	51                   	push   ecx
c001368b:	52                   	push   edx
c001368c:	50                   	push   eax
c001368d:	56                   	push   esi
c001368e:	e8 b7 76 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013693:	83 c4 10             	add    esp,0x10
c0013696:	85 c0                	test   eax,eax
c0013698:	0f 85 91 00 00 00    	jne    c001372f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001369e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00136a2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00136a6:	83 ec 0c             	sub    esp,0xc
c00136a9:	0f af c2             	imul   eax,edx
c00136ac:	50                   	push   eax
c00136ad:	e8 c9 41 ff ff       	call   c000787b <malloc>
c00136b2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00136b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00136b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136bf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00136c3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00136c7:	0f af c2             	imul   eax,edx
c00136ca:	99                   	cdq    
c00136cb:	52                   	push   edx
c00136cc:	50                   	push   eax
c00136cd:	56                   	push   esi
c00136ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136d1:	31 c9                	xor    ecx,ecx
c00136d3:	83 c4 20             	add    esp,0x20
c00136d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136de:	66 39 4b 2c          	cmp    WORD PTR [ebx+0x2c],cx
c00136e2:	0f 86 89 00 00 00    	jbe    c0013771 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00136e8:	0f b7 e9             	movzx  ebp,cx
c00136eb:	c1 e5 05             	shl    ebp,0x5
c00136ee:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00136f2:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00136f6:	75 73                	jne    c001376b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00136f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136fb:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00136fe:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013702:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013706:	52                   	push   edx
c0013707:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001370a:	31 d2                	xor    edx,edx
c001370c:	52                   	push   edx
c001370d:	50                   	push   eax
c001370e:	56                   	push   esi
c001370f:	e8 36 76 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013714:	83 c4 10             	add    esp,0x10
c0013717:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001371b:	85 c0                	test   eax,eax
c001371d:	74 17                	je     c0013736 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001371f:	83 ec 0c             	sub    esp,0xc
c0013722:	68 16 0a 02 c0       	push   0xc0020a16
c0013727:	e8 3d 6f ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	31 c0                	xor    eax,eax
c0013731:	e9 8b 00 00 00       	jmp    c00137c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013736:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001373a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001373d:	83 ec 0c             	sub    esp,0xc
c0013740:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013743:	50                   	push   eax
c0013744:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013748:	57                   	push   edi
c0013749:	56                   	push   esi
c001374a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001374e:	e8 d0 fb ff ff       	call   c0013323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013753:	03 7c 24 34          	add    edi,DWORD PTR [esp+0x34]
c0013757:	83 c4 20             	add    esp,0x20
c001375a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001375e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013762:	0f 43 7c 24 08       	cmovae edi,DWORD PTR [esp+0x8]
c0013767:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001376b:	41                   	inc    ecx
c001376c:	e9 6d ff ff ff       	jmp    c00136de <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013771:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013779:	83 ec 0c             	sub    esp,0xc
c001377c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013780:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013785:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c001378b:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013791:	05 00 10 00 00       	add    eax,0x1000
c0013796:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001379d:	e8 e9 40 ff ff       	call   c000788b <free>
c00137a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137a5:	e8 e1 40 ff ff       	call   c000788b <free>
c00137aa:	58                   	pop    eax
c00137ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137af:	e8 d7 40 ff ff       	call   c000788b <free>
c00137b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00137b7:	e8 2e 75 ff ff       	call   c000acea <File::close()>
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	b0 01                	mov    al,0x1
c00137c1:	83 c4 3c             	add    esp,0x3c
c00137c4:	5b                   	pop    ebx
c00137c5:	5e                   	pop    esi
c00137c6:	5f                   	pop    edi
c00137c7:	5d                   	pop    ebp
c00137c8:	c3                   	ret    

c00137c9 <Thr::runtimeReferenceHelper()>:
c00137c9:	83 ec 18             	sub    esp,0x18
c00137cc:	68 1e 0a 02 c0       	push   0xc0020a1e
c00137d1:	e8 93 6e ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00137d6:	fa                   	cli    
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	eb fe                	jmp    c00137da <Thr::runtimeReferenceHelper()+0x11>

c00137dc <Thr::getAddressOfKernelSymbol(char const*)>:
c00137dc:	57                   	push   edi
c00137dd:	56                   	push   esi
c00137de:	53                   	push   ebx
c00137df:	31 db                	xor    ebx,ebx
c00137e1:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c00137e7:	7e 3c                	jle    c0013825 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00137e9:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c00137f0:	31 ff                	xor    edi,edi
c00137f2:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c00137f9:	7e 27                	jle    c0013822 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00137fb:	50                   	push   eax
c00137fc:	50                   	push   eax
c00137fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013801:	8b 06                	mov    eax,DWORD PTR [esi]
c0013803:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c001380a:	50                   	push   eax
c001380b:	e8 30 cf fe ff       	call   c0000740 <strcmp>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	85 c0                	test   eax,eax
c0013815:	75 05                	jne    c001381c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001381a:	eb 0b                	jmp    c0013827 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001381c:	83 c6 10             	add    esi,0x10
c001381f:	47                   	inc    edi
c0013820:	eb d0                	jmp    c00137f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013822:	43                   	inc    ebx
c0013823:	eb bc                	jmp    c00137e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013825:	31 c0                	xor    eax,eax
c0013827:	5b                   	pop    ebx
c0013828:	5e                   	pop    esi
c0013829:	5f                   	pop    edi
c001382a:	c3                   	ret    

c001382b <Thr::loadKernelSymbolTable(char const*)>:
c001382b:	55                   	push   ebp
c001382c:	57                   	push   edi
c001382d:	56                   	push   esi
c001382e:	53                   	push   ebx
c001382f:	83 ec 68             	sub    esp,0x68
c0013832:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013838:	68 14 01 00 00       	push   0x114
c001383d:	e8 39 40 ff ff       	call   c000787b <malloc>
c0013842:	83 c4 0c             	add    esp,0xc
c0013845:	56                   	push   esi
c0013846:	89 c3                	mov    ebx,eax
c0013848:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001384c:	50                   	push   eax
c001384d:	e8 80 73 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0013852:	5e                   	pop    esi
c0013853:	5f                   	pop    edi
c0013854:	6a 01                	push   0x1
c0013856:	53                   	push   ebx
c0013857:	e8 30 74 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	85 c0                	test   eax,eax
c0013861:	74 0a                	je     c001386d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	68 40 0a 02 c0       	push   0xc0020a40
c001386b:	eb 34                	jmp    c00138a1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001386d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	6a 34                	push   0x34
c001387a:	e8 fc 3f ff ff       	call   c000787b <malloc>
c001387f:	59                   	pop    ecx
c0013880:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0013884:	89 c6                	mov    esi,eax
c0013886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013888:	57                   	push   edi
c0013889:	56                   	push   esi
c001388a:	6a 00                	push   0x0
c001388c:	6a 34                	push   0x34
c001388e:	53                   	push   ebx
c001388f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013892:	83 c4 20             	add    esp,0x20
c0013895:	85 c0                	test   eax,eax
c0013897:	74 17                	je     c00138b0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	68 57 0a 02 c0       	push   0xc0020a57
c00138a1:	e8 17 cc ff ff       	call   c00104bd <KePanic(char const*)>
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	31 c0                	xor    eax,eax
c00138ab:	e9 31 02 00 00       	jmp    c0013ae1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00138b0:	81 3e 7f 45 4c 46    	cmp    DWORD PTR [esi],0x464c457f
c00138b6:	75 e1                	jne    c0013899 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00138b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00138bb:	85 c0                	test   eax,eax
c00138bd:	74 da                	je     c0013899 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00138bf:	52                   	push   edx
c00138c0:	31 d2                	xor    edx,edx
c00138c2:	52                   	push   edx
c00138c3:	50                   	push   eax
c00138c4:	53                   	push   ebx
c00138c5:	e8 80 74 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c00138ca:	83 c4 10             	add    esp,0x10
c00138cd:	85 c0                	test   eax,eax
c00138cf:	75 c8                	jne    c0013899 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00138d1:	0f b7 56 2e          	movzx  edx,WORD PTR [esi+0x2e]
c00138d5:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	31 ed                	xor    ebp,ebp
c00138de:	0f af c2             	imul   eax,edx
c00138e1:	50                   	push   eax
c00138e2:	e8 94 3f ff ff       	call   c000787b <malloc>
c00138e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00138e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00138ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00138f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138f4:	0f b7 56 2e          	movzx  edx,WORD PTR [esi+0x2e]
c00138f8:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00138fc:	0f af c2             	imul   eax,edx
c00138ff:	99                   	cdq    
c0013900:	52                   	push   edx
c0013901:	50                   	push   eax
c0013902:	53                   	push   ebx
c0013903:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013906:	83 c4 20             	add    esp,0x20
c0013909:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013911:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013919:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013921:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013929:	66 39 6e 30          	cmp    WORD PTR [esi+0x30],bp
c001392d:	0f 86 aa 00 00 00    	jbe    c00139dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013933:	0f b7 fd             	movzx  edi,bp
c0013936:	6b ff 28             	imul   edi,edi,0x28
c0013939:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001393d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013944:	50                   	push   eax
c0013945:	0f b7 46 32          	movzx  eax,WORD PTR [esi+0x32]
c0013949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001394d:	8b 17                	mov    edx,DWORD PTR [edi]
c001394f:	6b c0 28             	imul   eax,eax,0x28
c0013952:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013956:	89 d0                	mov    eax,edx
c0013958:	31 d2                	xor    edx,edx
c001395a:	52                   	push   edx
c001395b:	50                   	push   eax
c001395c:	53                   	push   ebx
c001395d:	e8 e8 73 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013962:	83 c4 0c             	add    esp,0xc
c0013965:	6a 20                	push   0x20
c0013967:	6a 00                	push   0x0
c0013969:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001396d:	50                   	push   eax
c001396e:	e8 0d cc fe ff       	call   c0000580 <memset>
c0013973:	58                   	pop    eax
c0013974:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013976:	8d 54 24 38          	lea    edx,[esp+0x38]
c001397a:	52                   	push   edx
c001397b:	8d 4c 24 40          	lea    ecx,[esp+0x40]
c001397f:	51                   	push   ecx
c0013980:	6a 00                	push   0x0
c0013982:	6a 1f                	push   0x1f
c0013984:	53                   	push   ebx
c0013985:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013988:	83 c4 18             	add    esp,0x18
c001398b:	68 6e 0a 02 c0       	push   0xc0020a6e
c0013990:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013994:	50                   	push   eax
c0013995:	e8 a6 cd fe ff       	call   c0000740 <strcmp>
c001399a:	83 c4 10             	add    esp,0x10
c001399d:	85 c0                	test   eax,eax
c001399f:	75 0f                	jne    c00139b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00139a1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00139a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139b0:	50                   	push   eax
c00139b1:	50                   	push   eax
c00139b2:	68 76 0a 02 c0       	push   0xc0020a76
c00139b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00139bb:	50                   	push   eax
c00139bc:	e8 7f cd fe ff       	call   c0000740 <strcmp>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	85 c0                	test   eax,eax
c00139c6:	75 0f                	jne    c00139d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00139c8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00139cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139d7:	45                   	inc    ebp
c00139d8:	e9 4c ff ff ff       	jmp    c0013929 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00139dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00139e2:	75 10                	jne    c00139f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	68 7e 0a 02 c0       	push   0xc0020a7e
c00139ec:	e8 cc ca ff ff       	call   c00104bd <KePanic(char const*)>
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00139f9:	75 10                	jne    c0013a0b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00139fb:	83 ec 0c             	sub    esp,0xc
c00139fe:	68 7e 0a 02 c0       	push   0xc0020a7e
c0013a03:	e8 b5 ca ff ff       	call   c00104bd <KePanic(char const*)>
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	50                   	push   eax
c0013a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a10:	31 d2                	xor    edx,edx
c0013a12:	52                   	push   edx
c0013a13:	50                   	push   eax
c0013a14:	53                   	push   ebx
c0013a15:	e8 30 73 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013a1a:	5a                   	pop    edx
c0013a1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1f:	e8 57 3e ff ff       	call   c000787b <malloc>
c0013a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a28:	31 c9                	xor    ecx,ecx
c0013a2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a2e:	5f                   	pop    edi
c0013a2f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013a33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a35:	55                   	push   ebp
c0013a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a3a:	51                   	push   ecx
c0013a3b:	52                   	push   edx
c0013a3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013a40:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013a44:	53                   	push   ebx
c0013a45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a48:	83 c4 14             	add    esp,0x14
c0013a4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a4f:	e8 27 3e ff ff       	call   c000787b <malloc>
c0013a54:	89 c7                	mov    edi,eax
c0013a56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a58:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a5b:	57                   	push   edi
c0013a5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013a60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013a64:	51                   	push   ecx
c0013a65:	52                   	push   edx
c0013a66:	53                   	push   ebx
c0013a67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a6e:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c0013a74:	83 c4 1c             	add    esp,0x1c
c0013a77:	c1 e8 04             	shr    eax,0x4
c0013a7a:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c0013a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a85:	31 d2                	xor    edx,edx
c0013a87:	52                   	push   edx
c0013a88:	50                   	push   eax
c0013a89:	53                   	push   ebx
c0013a8a:	e8 bb 72 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013a8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013a91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a94:	31 d2                	xor    edx,edx
c0013a96:	57                   	push   edi
c0013a97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013a9b:	52                   	push   edx
c0013a9c:	50                   	push   eax
c0013a9d:	53                   	push   ebx
c0013a9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013aa1:	83 c4 14             	add    esp,0x14
c0013aa4:	53                   	push   ebx
c0013aa5:	e8 40 72 ff ff       	call   c000acea <File::close()>
c0013aaa:	5d                   	pop    ebp
c0013aab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013aaf:	e8 d7 3d ff ff       	call   c000788b <free>
c0013ab4:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ab7:	e8 cf 3d ff ff       	call   c000788b <free>
c0013abc:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c0013ac1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ac5:	83 c4 10             	add    esp,0x10
c0013ac8:	8d 50 01             	lea    edx,[eax+0x1]
c0013acb:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c0013ad2:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013ad8:	89 3c 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],edi
c0013adf:	b0 01                	mov    al,0x1
c0013ae1:	83 c4 5c             	add    esp,0x5c
c0013ae4:	5b                   	pop    ebx
c0013ae5:	5e                   	pop    esi
c0013ae6:	5f                   	pop    edi
c0013ae7:	5d                   	pop    ebp
c0013ae8:	c3                   	ret    

c0013ae9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013ae9:	55                   	push   ebp
c0013aea:	57                   	push   edi
c0013aeb:	56                   	push   esi
c0013aec:	53                   	push   ebx
c0013aed:	81 ec 68 03 00 00    	sub    esp,0x368
c0013af3:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c0013af9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013b00:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c0013b04:	68 14 01 00 00       	push   0x114
c0013b09:	e8 6d 3d ff ff       	call   c000787b <malloc>
c0013b0e:	83 c4 0c             	add    esp,0xc
c0013b11:	53                   	push   ebx
c0013b12:	89 c5                	mov    ebp,eax
c0013b14:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013b1b:	50                   	push   eax
c0013b1c:	e8 b1 70 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0013b21:	5e                   	pop    esi
c0013b22:	5f                   	pop    edi
c0013b23:	6a 01                	push   0x1
c0013b25:	55                   	push   ebp
c0013b26:	e8 61 71 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	85 c0                	test   eax,eax
c0013b30:	0f 85 a2 06 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013b36:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	6a 34                	push   0x34
c0013b43:	e8 33 3d ff ff       	call   c000787b <malloc>
c0013b48:	5b                   	pop    ebx
c0013b49:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013b4d:	89 c7                	mov    edi,eax
c0013b4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b52:	53                   	push   ebx
c0013b53:	57                   	push   edi
c0013b54:	6a 00                	push   0x0
c0013b56:	6a 34                	push   0x34
c0013b58:	55                   	push   ebp
c0013b59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b5c:	83 c4 20             	add    esp,0x20
c0013b5f:	85 c0                	test   eax,eax
c0013b61:	0f 85 71 06 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013b67:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013b6d:	0f 85 65 06 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013b73:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013b76:	85 c0                	test   eax,eax
c0013b78:	0f 84 5a 06 00 00    	je     c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013b7e:	31 d2                	xor    edx,edx
c0013b80:	51                   	push   ecx
c0013b81:	52                   	push   edx
c0013b82:	50                   	push   eax
c0013b83:	55                   	push   ebp
c0013b84:	e8 c1 71 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013b89:	83 c4 10             	add    esp,0x10
c0013b8c:	85 c0                	test   eax,eax
c0013b8e:	0f 85 44 06 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013b94:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013b97:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ba2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ba6:	0f af c2             	imul   eax,edx
c0013ba9:	50                   	push   eax
c0013baa:	e8 cc 3c ff ff       	call   c000787b <malloc>
c0013baf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013bb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013bb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bbd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bc1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bc5:	0f af c2             	imul   eax,edx
c0013bc8:	99                   	cdq    
c0013bc9:	52                   	push   edx
c0013bca:	50                   	push   eax
c0013bcb:	55                   	push   ebp
c0013bcc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013bcf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013bd2:	83 c4 20             	add    esp,0x20
c0013bd5:	85 c0                	test   eax,eax
c0013bd7:	0f 84 fb 05 00 00    	je     c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013bdd:	52                   	push   edx
c0013bde:	31 d2                	xor    edx,edx
c0013be0:	52                   	push   edx
c0013be1:	50                   	push   eax
c0013be2:	55                   	push   ebp
c0013be3:	e8 62 71 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	85 c0                	test   eax,eax
c0013bed:	0f 85 e5 05 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013bf3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013bf7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013bfb:	83 ec 0c             	sub    esp,0xc
c0013bfe:	0f af c2             	imul   eax,edx
c0013c01:	50                   	push   eax
c0013c02:	e8 74 3c ff ff       	call   c000787b <malloc>
c0013c07:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013c0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013c15:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013c19:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013c1d:	0f af c2             	imul   eax,edx
c0013c20:	99                   	cdq    
c0013c21:	52                   	push   edx
c0013c22:	50                   	push   eax
c0013c23:	55                   	push   ebp
c0013c24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c27:	83 c4 20             	add    esp,0x20
c0013c2a:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0013c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c35:	66 39 47 2c          	cmp    WORD PTR [edi+0x2c],ax
c0013c39:	76 7d                	jbe    c0013cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c0013c3b:	0f b7 d8             	movzx  ebx,ax
c0013c3e:	c1 e3 05             	shl    ebx,0x5
c0013c41:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c0013c45:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013c48:	75 64                	jne    c0013cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c5>
c0013c4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c4d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013c50:	31 d2                	xor    edx,edx
c0013c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c56:	50                   	push   eax
c0013c57:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c5a:	52                   	push   edx
c0013c5b:	50                   	push   eax
c0013c5c:	55                   	push   ebp
c0013c5d:	e8 e8 70 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	85 c0                	test   eax,eax
c0013c67:	0f 85 6b 05 00 00    	jne    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0013c6d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
c0013c7b:	31 d2                	xor    edx,edx
c0013c7d:	01 c6                	add    esi,eax
c0013c7f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c86:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013c89:	50                   	push   eax
c0013c8a:	56                   	push   esi
c0013c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8f:	52                   	push   edx
c0013c90:	50                   	push   eax
c0013c91:	55                   	push   ebp
c0013c92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013c98:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013c9b:	83 c4 1c             	add    esp,0x1c
c0013c9e:	50                   	push   eax
c0013c9f:	6a 00                	push   0x0
c0013ca1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ca5:	56                   	push   esi
c0013ca6:	e8 d5 c8 fe ff       	call   c0000580 <memset>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	66 ff 44 24 08       	inc    WORD PTR [esp+0x8]
c0013cb3:	e9 79 ff ff ff       	jmp    c0013c31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x148>
c0013cb8:	53                   	push   ebx
c0013cb9:	31 f6                	xor    esi,esi
c0013cbb:	68 00 01 00 00       	push   0x100
c0013cc0:	6a 00                	push   0x0
c0013cc2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013cc6:	50                   	push   eax
c0013cc7:	e8 b4 c8 fe ff       	call   c0000580 <memset>
c0013ccc:	83 c4 0c             	add    esp,0xc
c0013ccf:	68 00 01 00 00       	push   0x100
c0013cd4:	6a 00                	push   0x0
c0013cd6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013cdd:	50                   	push   eax
c0013cde:	e8 9d c8 fe ff       	call   c0000580 <memset>
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013cee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013cf6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013cfe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d06:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013d0e:	66 39 77 30          	cmp    WORD PTR [edi+0x30],si
c0013d12:	0f 86 30 01 00 00    	jbe    c0013e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35f>
c0013d18:	0f b7 de             	movzx  ebx,si
c0013d1b:	6b db 28             	imul   ebx,ebx,0x28
c0013d1e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d29:	52                   	push   edx
c0013d2a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013d2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013d32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d34:	6b d2 28             	imul   edx,edx,0x28
c0013d37:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	52                   	push   edx
c0013d3e:	50                   	push   eax
c0013d3f:	55                   	push   ebp
c0013d40:	e8 05 70 ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013d45:	83 c4 0c             	add    esp,0xc
c0013d48:	6a 20                	push   0x20
c0013d4a:	6a 00                	push   0x0
c0013d4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d53:	50                   	push   eax
c0013d54:	e8 27 c8 fe ff       	call   c0000580 <memset>
c0013d59:	59                   	pop    ecx
c0013d5a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013d5d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013d61:	52                   	push   edx
c0013d62:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013d69:	51                   	push   ecx
c0013d6a:	6a 00                	push   0x0
c0013d6c:	6a 1f                	push   0x1f
c0013d6e:	55                   	push   ebp
c0013d6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d72:	83 c4 1c             	add    esp,0x1c
c0013d75:	6a 09                	push   0x9
c0013d77:	68 98 0a 02 c0       	push   0xc0020a98
c0013d7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d83:	50                   	push   eax
c0013d84:	e8 f7 c5 fe ff       	call   c0000380 <memcmp>
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	85 c0                	test   eax,eax
c0013d8e:	75 21                	jne    c0013db1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c8>
c0013d90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d98:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0013d9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013da0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013da3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0013daa:	89 c8                	mov    eax,ecx
c0013dac:	40                   	inc    eax
c0013dad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013db1:	50                   	push   eax
c0013db2:	6a 09                	push   0x9
c0013db4:	68 a2 0a 02 c0       	push   0xc0020aa2
c0013db9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013dc0:	50                   	push   eax
c0013dc1:	e8 ba c5 fe ff       	call   c0000380 <memcmp>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	85 c0                	test   eax,eax
c0013dcb:	75 21                	jne    c0013dee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x305>
c0013dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013dd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013dd5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013dd9:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0013ddd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013de0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013de7:	89 d0                	mov    eax,edx
c0013de9:	40                   	inc    eax
c0013dea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013dee:	50                   	push   eax
c0013def:	50                   	push   eax
c0013df0:	68 6e 0a 02 c0       	push   0xc0020a6e
c0013df5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013dfc:	50                   	push   eax
c0013dfd:	e8 3e c9 fe ff       	call   c0000740 <strcmp>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	85 c0                	test   eax,eax
c0013e07:	75 0f                	jne    c0013e18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0013e09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013e0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013e18:	50                   	push   eax
c0013e19:	50                   	push   eax
c0013e1a:	68 76 0a 02 c0       	push   0xc0020a76
c0013e1f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e26:	50                   	push   eax
c0013e27:	e8 14 c9 fe ff       	call   c0000740 <strcmp>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	85 c0                	test   eax,eax
c0013e31:	75 0f                	jne    c0013e42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0013e33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013e36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e3e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013e42:	46                   	inc    esi
c0013e43:	e9 c6 fe ff ff       	jmp    c0013d0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x225>
c0013e48:	50                   	push   eax
c0013e49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e4d:	31 d2                	xor    edx,edx
c0013e4f:	52                   	push   edx
c0013e50:	50                   	push   eax
c0013e51:	55                   	push   ebp
c0013e52:	e8 f3 6e ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013e57:	58                   	pop    eax
c0013e58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e5c:	e8 1a 3a ff ff       	call   c000787b <malloc>
c0013e61:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013e64:	31 d2                	xor    edx,edx
c0013e66:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0013e6a:	58                   	pop    eax
c0013e6b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e6f:	53                   	push   ebx
c0013e70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013e74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e78:	52                   	push   edx
c0013e79:	50                   	push   eax
c0013e7a:	55                   	push   ebp
c0013e7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e7e:	83 c4 14             	add    esp,0x14
c0013e81:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013e85:	e8 f1 39 ff ff       	call   c000787b <malloc>
c0013e8a:	31 d2                	xor    edx,edx
c0013e8c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013e90:	83 c4 0c             	add    esp,0xc
c0013e93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e97:	52                   	push   edx
c0013e98:	50                   	push   eax
c0013e99:	55                   	push   ebp
c0013e9a:	e8 ab 6e ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013e9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea5:	31 d2                	xor    edx,edx
c0013ea7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eaf:	52                   	push   edx
c0013eb0:	50                   	push   eax
c0013eb1:	55                   	push   ebp
c0013eb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013eb5:	83 c4 20             	add    esp,0x20
c0013eb8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ec0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ec4:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013ec8:	0f 84 0e 03 00 00    	je     c00141dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f3>
c0013ece:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c0013ed5:	31 d2                	xor    edx,edx
c0013ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013edb:	c1 e8 03             	shr    eax,0x3
c0013ede:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013ee2:	51                   	push   ecx
c0013ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013eeb:	52                   	push   edx
c0013eec:	50                   	push   eax
c0013eed:	55                   	push   ebp
c0013eee:	e8 57 6e ff ff       	call   c000ad4a <File::seek(unsigned long long)>
c0013ef3:	5b                   	pop    ebx
c0013ef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ef8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013eff:	e8 77 39 ff ff       	call   c000787b <malloc>
c0013f04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f07:	31 d2                	xor    edx,edx
c0013f09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013f0d:	5e                   	pop    esi
c0013f0e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013f12:	50                   	push   eax
c0013f13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f1b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013f22:	52                   	push   edx
c0013f23:	50                   	push   eax
c0013f24:	55                   	push   ebp
c0013f25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f28:	83 c4 20             	add    esp,0x20
c0013f2b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013f33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013f37:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c0013f3b:	0f 8d 7f 02 00 00    	jge    c00141c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c0013f41:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013f45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f49:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013f4e:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0013f51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f59:	8b 5c c8 04          	mov    ebx,DWORD PTR [eax+ecx*8+0x4]
c0013f5d:	89 d8                	mov    eax,ebx
c0013f5f:	c1 e8 08             	shr    eax,0x8
c0013f62:	89 c6                	mov    esi,eax
c0013f64:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013f68:	c1 e6 04             	shl    esi,0x4
c0013f6b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0013f6f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f76:	85 c0                	test   eax,eax
c0013f78:	0f 85 bd 00 00 00    	jne    c001403b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x552>
c0013f7e:	83 ec 0c             	sub    esp,0xc
c0013f81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013f85:	03 06                	add    eax,DWORD PTR [esi]
c0013f87:	50                   	push   eax
c0013f88:	e8 4f f8 ff ff       	call   c00137dc <Thr::getAddressOfKernelSymbol(char const*)>
c0013f8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f91:	83 c4 10             	add    esp,0x10
c0013f94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f99:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c0013f9e:	0f 85 97 00 00 00    	jne    c001403b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x552>
c0013fa4:	83 ec 0c             	sub    esp,0xc
c0013fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013fab:	03 06                	add    eax,DWORD PTR [esi]
c0013fad:	50                   	push   eax
c0013fae:	e8 f9 c6 ff ff       	call   c00106ac <KeResolveCompatibilitySymbol(char*)>
c0013fb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013fbf:	75 7a                	jne    c001403b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x552>
c0013fc1:	50                   	push   eax
c0013fc2:	50                   	push   eax
c0013fc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013fc7:	03 06                	add    eax,DWORD PTR [esi]
c0013fc9:	50                   	push   eax
c0013fca:	68 ac 0a 02 c0       	push   0xc0020aac
c0013fcf:	e8 95 66 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0013fd4:	58                   	pop    eax
c0013fd5:	5a                   	pop    edx
c0013fd6:	68 c6 0a 02 c0       	push   0xc0020ac6
c0013fdb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fe2:	50                   	push   eax
c0013fe3:	e8 98 c6 fe ff       	call   c0000680 <strcpy>
c0013fe8:	59                   	pop    ecx
c0013fe9:	58                   	pop    eax
c0013fea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013fee:	03 06                	add    eax,DWORD PTR [esi]
c0013ff0:	50                   	push   eax
c0013ff1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ff8:	50                   	push   eax
c0013ff9:	e8 22 c8 fe ff       	call   c0000820 <strcat>
c0013ffe:	58                   	pop    eax
c0013fff:	5a                   	pop    edx
c0014000:	68 5c 0b 02 c0       	push   0xc0020b5c
c0014005:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001400c:	50                   	push   eax
c001400d:	e8 0e c8 fe ff       	call   c0000820 <strcat>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	80 7c 24 2a 00       	cmp    BYTE PTR [esp+0x2a],0x0
c001401a:	0f 84 5a 01 00 00    	je     c001417a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x691>
c0014020:	83 ec 0c             	sub    esp,0xc
c0014023:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001402a:	50                   	push   eax
c001402b:	e8 8d c4 ff ff       	call   c00104bd <KePanic(char const*)>
c0014030:	83 c4 10             	add    esp,0x10
c0014033:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0014037:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001403b:	80 fb 01             	cmp    bl,0x1
c001403e:	0f 85 89 00 00 00    	jne    c00140cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e4>
c0014044:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014048:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001404f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0014053:	01 ce                	add    esi,ecx
c0014055:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001405b:	0f 94 c2             	sete   dl
c001405e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0014064:	8b 06                	mov    eax,DWORD PTR [esi]
c0014066:	0f 94 c3             	sete   bl
c0014069:	09 da                	or     edx,ebx
c001406b:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0014070:	74 3f                	je     c00140b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c8>
c0014072:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014076:	01 c3                	add    ebx,eax
c0014078:	84 d2                	test   dl,dl
c001407a:	75 18                	jne    c0014094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001407c:	66 83 7f 30 0c       	cmp    WORD PTR [edi+0x30],0xc
c0014081:	b8 0c 00 00 00       	mov    eax,0xc
c0014086:	66 0f 46 47 30       	cmovbe ax,WORD PTR [edi+0x30]
c001408b:	0f b7 c0             	movzx  eax,ax
c001408e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014092:	76 32                	jbe    c00140c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c0014094:	80 7c 24 2a 00       	cmp    BYTE PTR [esp+0x2a],0x0
c0014099:	0f 84 db 00 00 00    	je     c001417a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x691>
c001409f:	83 ec 0c             	sub    esp,0xc
c00140a2:	68 dd 0a 02 c0       	push   0xc0020add
c00140a7:	e8 11 c4 ff ff       	call   c00104bd <KePanic(char const*)>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	eb 15                	jmp    c00140c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00140b1:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00140b4:	84 d2                	test   dl,dl
c00140b6:	75 0e                	jne    c00140c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00140b8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140bc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00140c0:	77 04                	ja     c00140c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00140c2:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00140c6:	89 1e                	mov    DWORD PTR [esi],ebx
c00140c8:	e9 ea 00 00 00       	jmp    c00141b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ce>
c00140cd:	80 fb 02             	cmp    bl,0x2
c00140d0:	75 7c                	jne    c001414e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x665>
c00140d2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00140d9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00140dd:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00140e1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00140e7:	74 20                	je     c0014109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x620>
c00140e9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00140ef:	74 18                	je     c0014109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x620>
c00140f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140f5:	ba 0a 00 00 00       	mov    edx,0xa
c00140fa:	66 83 f8 0e          	cmp    ax,0xe
c00140fe:	77 03                	ja     c0014103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61a>
c0014100:	8d 50 fc             	lea    edx,[eax-0x4]
c0014103:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c0014107:	76 17                	jbe    c0014120 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0014109:	80 7c 24 2a 00       	cmp    BYTE PTR [esp+0x2a],0x0
c001410e:	74 6a                	je     c001417a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x691>
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	68 f9 0a 02 c0       	push   0xc0020af9
c0014118:	e8 a0 c3 ff ff       	call   c00104bd <KePanic(char const*)>
c001411d:	83 c4 10             	add    esp,0x10
c0014120:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0014125:	8b 06                	mov    eax,DWORD PTR [esi]
c0014127:	74 19                	je     c0014142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x659>
c0014129:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001412d:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014134:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
c0014138:	01 c2                	add    edx,eax
c001413a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001413e:	01 d0                	add    eax,edx
c0014140:	eb 08                	jmp    c001414a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x661>
c0014142:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0014146:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001414a:	89 06                	mov    DWORD PTR [esi],eax
c001414c:	eb 69                	jmp    c00141b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ce>
c001414e:	0f b6 db             	movzx  ebx,bl
c0014151:	50                   	push   eax
c0014152:	50                   	push   eax
c0014153:	53                   	push   ebx
c0014154:	68 15 0b 02 c0       	push   0xc0020b15
c0014159:	e8 0b 65 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001415e:	83 c4 10             	add    esp,0x10
c0014161:	80 7c 24 2a 00       	cmp    BYTE PTR [esp+0x2a],0x0
c0014166:	74 12                	je     c001417a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x691>
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	68 20 0b 02 c0       	push   0xc0020b20
c0014170:	e8 48 c3 ff ff       	call   c00104bd <KePanic(char const*)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	eb 3d                	jmp    c00141b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ce>
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	55                   	push   ebp
c001417e:	e8 67 6b ff ff       	call   c000acea <File::close()>
c0014183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014186:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014189:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001418c:	59                   	pop    ecx
c001418d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014191:	e8 f5 36 ff ff       	call   c000788b <free>
c0014196:	5b                   	pop    ebx
c0014197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001419b:	e8 eb 36 ff ff       	call   c000788b <free>
c00141a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141a3:	e8 e3 36 ff ff       	call   c000788b <free>
c00141a8:	5e                   	pop    esi
c00141a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141ad:	e8 d9 36 ff ff       	call   c000788b <free>
c00141b2:	83 c4 10             	add    esp,0x10
c00141b5:	eb 21                	jmp    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c00141b7:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00141bb:	e9 73 fd ff ff       	jmp    c0013f33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44a>
c00141c0:	83 ec 0c             	sub    esp,0xc
c00141c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141c7:	e8 bf 36 ff ff       	call   c000788b <free>
c00141cc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00141d0:	83 c4 10             	add    esp,0x10
c00141d3:	e9 e8 fc ff ff       	jmp    c0013ec0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3d7>
c00141d8:	31 c0                	xor    eax,eax
c00141da:	eb 33                	jmp    c001420f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x726>
c00141dc:	83 ec 0c             	sub    esp,0xc
c00141df:	55                   	push   ebp
c00141e0:	e8 05 6b ff ff       	call   c000acea <File::close()>
c00141e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00141e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141ee:	58                   	pop    eax
c00141ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f3:	e8 93 36 ff ff       	call   c000788b <free>
c00141f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141fb:	e8 8b 36 ff ff       	call   c000788b <free>
c0014200:	5a                   	pop    edx
c0014201:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014205:	e8 81 36 ff ff       	call   c000788b <free>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	b0 01                	mov    al,0x1
c001420f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014215:	5b                   	pop    ebx
c0014216:	5e                   	pop    esi
c0014217:	5f                   	pop    edi
c0014218:	5d                   	pop    ebp
c0014219:	c3                   	ret    

c001421a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001421a:	56                   	push   esi
c001421b:	31 d2                	xor    edx,edx
c001421d:	53                   	push   ebx
c001421e:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0014224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014228:	39 d3                	cmp    ebx,edx
c001422a:	7e 1b                	jle    c0014247 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001422c:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0014233:	39 c8                	cmp    eax,ecx
c0014235:	77 0d                	ja     c0014244 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014237:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c001423e:	01 c6                	add    esi,eax
c0014240:	39 ce                	cmp    esi,ecx
c0014242:	77 05                	ja     c0014249 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014244:	42                   	inc    edx
c0014245:	eb e1                	jmp    c0014228 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014247:	31 c0                	xor    eax,eax
c0014249:	5b                   	pop    ebx
c001424a:	5e                   	pop    esi
c001424b:	c3                   	ret    

c001424c <Thr::getDriverNameFromAddress(unsigned long)>:
c001424c:	53                   	push   ebx
c001424d:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0014253:	31 c0                	xor    eax,eax
c0014255:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014259:	39 c3                	cmp    ebx,eax
c001425b:	7e 22                	jle    c001427f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001425d:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0014264:	39 ca                	cmp    edx,ecx
c0014266:	77 14                	ja     c001427c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014268:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c001426f:	39 ca                	cmp    edx,ecx
c0014271:	76 09                	jbe    c001427c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014273:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c001427a:	eb 05                	jmp    c0014281 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001427c:	40                   	inc    eax
c001427d:	eb da                	jmp    c0014259 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001427f:	31 c0                	xor    eax,eax
c0014281:	5b                   	pop    ebx
c0014282:	c3                   	ret    

c0014283 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014283:	53                   	push   ebx
c0014284:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014288:	53                   	push   ebx
c0014289:	e8 8c ff ff ff       	call   c001421a <Thr::getDriverBaseFromAddress(unsigned long)>
c001428e:	5a                   	pop    edx
c001428f:	31 d2                	xor    edx,edx
c0014291:	85 c0                	test   eax,eax
c0014293:	74 04                	je     c0014299 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014295:	89 da                	mov    edx,ebx
c0014297:	29 c2                	sub    edx,eax
c0014299:	89 d0                	mov    eax,edx
c001429b:	5b                   	pop    ebx
c001429c:	c3                   	ret    

c001429d <Thr::loadDLL(char const*, bool)>:
c001429d:	55                   	push   ebp
c001429e:	57                   	push   edi
c001429f:	56                   	push   esi
c00142a0:	53                   	push   ebx
c00142a1:	81 ec 24 01 00 00    	sub    esp,0x124
c00142a7:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00142ae:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00142b5:	56                   	push   esi
c00142b6:	68 38 0b 02 c0       	push   0xc0020b38
c00142bb:	e8 a9 63 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00142c0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00142c7:	e8 af 35 ff ff       	call   c000787b <malloc>
c00142cc:	83 c4 0c             	add    esp,0xc
c00142cf:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00142d5:	56                   	push   esi
c00142d6:	89 c3                	mov    ebx,eax
c00142d8:	50                   	push   eax
c00142d9:	e8 f4 68 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c00142de:	83 c4 10             	add    esp,0x10
c00142e1:	85 db                	test   ebx,ebx
c00142e3:	75 3c                	jne    c0014321 <Thr::loadDLL(char const*, bool)+0x84>
c00142e5:	89 f8                	mov    eax,edi
c00142e7:	84 c0                	test   al,al
c00142e9:	0f 84 e1 01 00 00    	je     c00144d0 <Thr::loadDLL(char const*, bool)+0x233>
c00142ef:	55                   	push   ebp
c00142f0:	55                   	push   ebp
c00142f1:	68 49 0b 02 c0       	push   0xc0020b49
c00142f6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00142fa:	55                   	push   ebp
c00142fb:	e8 80 c3 fe ff       	call   c0000680 <strcpy>
c0014300:	58                   	pop    eax
c0014301:	5a                   	pop    edx
c0014302:	56                   	push   esi
c0014303:	55                   	push   ebp
c0014304:	e8 17 c5 fe ff       	call   c0000820 <strcat>
c0014309:	59                   	pop    ecx
c001430a:	58                   	pop    eax
c001430b:	68 5c 0b 02 c0       	push   0xc0020b5c
c0014310:	55                   	push   ebp
c0014311:	e8 0a c5 fe ff       	call   c0000820 <strcat>
c0014316:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014319:	e8 9f c1 ff ff       	call   c00104bd <KePanic(char const*)>
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	51                   	push   ecx
c0014322:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0014326:	50                   	push   eax
c0014327:	8d 44 24 10          	lea    eax,[esp+0x10]
c001432b:	50                   	push   eax
c001432c:	53                   	push   ebx
c001432d:	e8 06 6c ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	85 db                	test   ebx,ebx
c0014337:	74 0c                	je     c0014345 <Thr::loadDLL(char const*, bool)+0xa8>
c0014339:	83 ec 0c             	sub    esp,0xc
c001433c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433e:	53                   	push   ebx
c001433f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001434a:	75 0a                	jne    c0014356 <Thr::loadDLL(char const*, bool)+0xb9>
c001434c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014350:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0014354:	75 3e                	jne    c0014394 <Thr::loadDLL(char const*, bool)+0xf7>
c0014356:	89 f8                	mov    eax,edi
c0014358:	31 db                	xor    ebx,ebx
c001435a:	84 c0                	test   al,al
c001435c:	0f 84 6e 01 00 00    	je     c00144d0 <Thr::loadDLL(char const*, bool)+0x233>
c0014362:	51                   	push   ecx
c0014363:	51                   	push   ecx
c0014364:	68 49 0b 02 c0       	push   0xc0020b49
c0014369:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001436d:	53                   	push   ebx
c001436e:	e8 0d c3 fe ff       	call   c0000680 <strcpy>
c0014373:	5d                   	pop    ebp
c0014374:	58                   	pop    eax
c0014375:	56                   	push   esi
c0014376:	53                   	push   ebx
c0014377:	e8 a4 c4 fe ff       	call   c0000820 <strcat>
c001437c:	58                   	pop    eax
c001437d:	5a                   	pop    edx
c001437e:	68 5c 0b 02 c0       	push   0xc0020b5c
c0014383:	53                   	push   ebx
c0014384:	e8 97 c4 fe ff       	call   c0000820 <strcat>
c0014389:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001438c:	e8 2c c1 ff ff       	call   c00104bd <KePanic(char const*)>
c0014391:	83 c4 10             	add    esp,0x10
c0014394:	c5 f9 6f 0d f0 0b 02 c0 	vmovdqa xmm1,XMMWORD PTR ds:0xc0020bf0
c001439c:	52                   	push   edx
c001439d:	6a 03                	push   0x3
c001439f:	c5 fa 7e 44 24 10    	vmovq  xmm0,QWORD PTR [esp+0x10]
c00143a5:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c00143a9:	c5 f9 73 d0 0c       	vpsrlq xmm0,xmm0,0xc
c00143ae:	c5 f9 7e c0          	vmovd  eax,xmm0
c00143b2:	50                   	push   eax
c00143b3:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00143b9:	e8 c2 57 ff ff       	call   c0009b80 <VAS::allocatePages(int, int)>
c00143be:	59                   	pop    ecx
c00143bf:	5d                   	pop    ebp
c00143c0:	50                   	push   eax
c00143c1:	89 c3                	mov    ebx,eax
c00143c3:	68 52 f6 01 c0       	push   0xc001f652
c00143c8:	e8 9c 62 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00143cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00143d0:	e8 db c1 fe ff       	call   c00005b0 <strlen>
c00143d5:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c00143db:	40                   	inc    eax
c00143dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00143df:	e8 97 34 ff ff       	call   c000787b <malloc>
c00143e4:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c00143eb:	58                   	pop    eax
c00143ec:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c00143f1:	5a                   	pop    edx
c00143f2:	56                   	push   esi
c00143f3:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c00143fa:	e8 81 c2 fe ff       	call   c0000680 <strcpy>
c00143ff:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014404:	8d 50 01             	lea    edx,[eax+0x1]
c0014407:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c001440e:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0014414:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014418:	83 c4 0c             	add    esp,0xc
c001441b:	6a 01                	push   0x1
c001441d:	53                   	push   ebx
c001441e:	56                   	push   esi
c001441f:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014426:	e8 be f6 ff ff       	call   c0013ae9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	89 c6                	mov    esi,eax
c0014430:	fe c8                	dec    al
c0014432:	74 2e                	je     c0014462 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014434:	89 f8                	mov    eax,edi
c0014436:	84 c0                	test   al,al
c0014438:	74 12                	je     c001444c <Thr::loadDLL(char const*, bool)+0x1af>
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	68 5e 0b 02 c0       	push   0xc0020b5e
c0014442:	e8 76 c0 ff ff       	call   c00104bd <KePanic(char const*)>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	eb 06                	jmp    c0014452 <Thr::loadDLL(char const*, bool)+0x1b5>
c001444c:	89 f0                	mov    eax,esi
c001444e:	84 c0                	test   al,al
c0014450:	75 10                	jne    c0014462 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014452:	83 ec 0c             	sub    esp,0xc
c0014455:	68 7d 0b 02 c0       	push   0xc0020b7d
c001445a:	e8 5e c0 ff ff       	call   c00104bd <KePanic(char const*)>
c001445f:	83 c4 10             	add    esp,0x10
c0014462:	31 ff                	xor    edi,edi
c0014464:	c5 fa 7e 44 24 08    	vmovq  xmm0,QWORD PTR [esp+0x8]
c001446a:	ba 00 00 00 00       	mov    edx,0x0
c001446f:	c5 f9 6f 0d f0 0b 02 c0 	vmovdqa xmm1,XMMWORD PTR ds:0xc0020bf0
c0014477:	c5 f9 d4 c1          	vpaddq xmm0,xmm0,xmm1
c001447b:	c5 f9 73 d0 0c       	vpsrlq xmm0,xmm0,0xc
c0014480:	c5 f9 7e c0          	vmovd  eax,xmm0
c0014484:	c4 e3 79 16 c1 01    	vpextrd ecx,xmm0,0x1
c001448a:	39 c7                	cmp    edi,eax
c001448c:	89 d0                	mov    eax,edx
c001448e:	19 c8                	sbb    eax,ecx
c0014490:	73 32                	jae    c00144c4 <Thr::loadDLL(char const*, bool)+0x227>
c0014492:	50                   	push   eax
c0014493:	50                   	push   eax
c0014494:	89 f8                	mov    eax,edi
c0014496:	c1 e0 0c             	shl    eax,0xc
c0014499:	01 d8                	add    eax,ebx
c001449b:	50                   	push   eax
c001449c:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00144a2:	e8 f7 51 ff ff       	call   c000969e <VAS::getPageTableEntry(unsigned long)>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00144ac:	a8 60                	test   al,0x60
c00144ae:	75 11                	jne    c00144c1 <Thr::loadDLL(char const*, bool)+0x224>
c00144b0:	83 ec 0c             	sub    esp,0xc
c00144b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144b8:	50                   	push   eax
c00144b9:	e8 40 36 ff ff       	call   c0007afe <Phys::freePage(unsigned long)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	47                   	inc    edi
c00144c2:	eb a0                	jmp    c0014464 <Thr::loadDLL(char const*, bool)+0x1c7>
c00144c4:	89 f0                	mov    eax,esi
c00144c6:	84 c0                	test   al,al
c00144c8:	b8 00 00 00 00       	mov    eax,0x0
c00144cd:	0f 44 d8             	cmove  ebx,eax
c00144d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00144d6:	89 d8                	mov    eax,ebx
c00144d8:	5b                   	pop    ebx
c00144d9:	5e                   	pop    esi
c00144da:	5f                   	pop    edi
c00144db:	5d                   	pop    ebp
c00144dc:	c3                   	ret    

c00144dd <Thr::executeDLL(unsigned long, void*)>:
c00144dd:	56                   	push   esi
c00144de:	53                   	push   ebx
c00144df:	52                   	push   edx
c00144e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144e8:	85 db                	test   ebx,ebx
c00144ea:	75 10                	jne    c00144fc <Thr::executeDLL(unsigned long, void*)+0x1f>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 99 0b 02 c0       	push   0xc0020b99
c00144f4:	e8 c4 bf ff ff       	call   c00104bd <KePanic(char const*)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	50                   	push   eax
c00144fd:	50                   	push   eax
c00144fe:	53                   	push   ebx
c00144ff:	68 c3 0b 02 c0       	push   0xc0020bc3
c0014504:	e8 60 61 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0014509:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001450d:	83 c4 14             	add    esp,0x14
c0014510:	89 d8                	mov    eax,ebx
c0014512:	5b                   	pop    ebx
c0014513:	5e                   	pop    esi
c0014514:	ff e0                	jmp    eax
c0014516:	66 90                	xchg   ax,ax

c0014518 <userModeEntryPoint(void*)>:
c0014518:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001451d:	48                   	dec    eax
c001451e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014523:	75 03                	jne    c0014528 <userModeEntryPoint(void*)+0x10>
c0014525:	fb                   	sti    
c0014526:	66 90                	xchg   ax,ax
c0014528:	fb                   	sti    
c0014529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001452e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014531:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001453b:	e9 ff bc fe ff       	jmp    c000023f <goToUsermode>

c0014540 <changeTSS>:
c0014540:	83 ec 14             	sub    esp,0x14
c0014543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014548:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001454b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014550:	c1 e2 15             	shl    edx,0x15
c0014553:	29 d0                	sub    eax,edx
c0014555:	50                   	push   eax
c0014556:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001455b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014561:	05 7c 11 00 00       	add    eax,0x117c
c0014566:	50                   	push   eax
c0014567:	e8 a4 47 ff ff       	call   c0008d10 <TSS::setESP(unsigned long)>
c001456c:	83 c4 1c             	add    esp,0x1c
c001456f:	c3                   	ret    

c0014570 <switchToThread(ThreadControlBlock*)>:
c0014570:	53                   	push   ebx
c0014571:	83 ec 08             	sub    esp,0x8
c0014574:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001457d:	85 c0                	test   eax,eax
c001457f:	75 7b                	jne    c00145fc <switchToThread(ThreadControlBlock*)+0x8c>
c0014581:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014585:	31 c0                	xor    eax,eax
c0014587:	80 fa ff             	cmp    dl,0xff
c001458a:	74 0c                	je     c0014598 <switchToThread(ThreadControlBlock*)+0x28>
c001458c:	b8 00 04 00 00       	mov    eax,0x400
c0014591:	29 d0                	sub    eax,edx
c0014593:	d1 f8                	sar    eax,1
c0014595:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0014598:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001459b:	e8 20 26 00 00       	call   c0016bc0 <HalQueryPerformanceCounter()>
c00145a0:	83 ec 0c             	sub    esp,0xc
c00145a3:	c5 fa 7e 05 98 71 02 c0 	vmovq  xmm0,QWORD PTR ds:0xc0027198
c00145ab:	c5 f9 6e d0          	vmovd  xmm2,eax
c00145af:	c4 e3 69 22 d2 01    	vpinsrd xmm2,xmm2,edx,0x1
c00145b5:	c5 f9 d6 15 a8 71 02 c0 	vmovq  QWORD PTR ds:0xc00271a8,xmm2
c00145bd:	c5 e9 fb c8          	vpsubq xmm1,xmm2,xmm0
c00145c1:	c5 f9 d6 0d a0 71 02 c0 	vmovq  QWORD PTR ds:0xc00271a0,xmm1
c00145c9:	c5 f9 d6 15 98 71 02 c0 	vmovq  QWORD PTR ds:0xc0027198,xmm2
c00145d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d6:	c5 fa 7e 40 10       	vmovq  xmm0,QWORD PTR [eax+0x10]
c00145db:	c5 f1 d4 c8          	vpaddq xmm1,xmm1,xmm0
c00145df:	c5 f9 d6 48 10       	vmovq  QWORD PTR [eax+0x10],xmm1
c00145e4:	53                   	push   ebx
c00145e5:	e8 8d bc fe ff       	call   c0000277 <switchToThreadASM>
c00145ea:	0f 20 c0             	mov    eax,cr0
c00145ed:	83 c8 08             	or     eax,0x8
c00145f0:	0f 22 c0             	mov    cr0,eax
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	83 c4 08             	add    esp,0x8
c00145f9:	5b                   	pop    ebx
c00145fa:	c3                   	ret    
c00145fb:	90                   	nop
c00145fc:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014606:	83 c4 08             	add    esp,0x8
c0014609:	5b                   	pop    ebx
c001460a:	c3                   	ret    
c001460b:	90                   	nop

c001460c <Process::addArgs(char**)>:
c001460c:	57                   	push   edi
c001460d:	56                   	push   esi
c001460e:	53                   	push   ebx
c001460f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014613:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014617:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014621:	85 ff                	test   edi,edi
c0014623:	74 43                	je     c0014668 <Process::addArgs(char**)+0x5c>
c0014625:	8b 07                	mov    eax,DWORD PTR [edi]
c0014627:	85 c0                	test   eax,eax
c0014629:	74 3d                	je     c0014668 <Process::addArgs(char**)+0x5c>
c001462b:	31 db                	xor    ebx,ebx
c001462d:	8d 76 00             	lea    esi,[esi+0x0]
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	50                   	push   eax
c0014634:	e8 77 bf fe ff       	call   c00005b0 <strlen>
c0014639:	40                   	inc    eax
c001463a:	89 04 24             	mov    DWORD PTR [esp],eax
c001463d:	e8 39 32 ff ff       	call   c000787b <malloc>
c0014642:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014649:	5a                   	pop    edx
c001464a:	59                   	pop    ecx
c001464b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001464e:	43                   	inc    ebx
c001464f:	50                   	push   eax
c0014650:	e8 2b c0 fe ff       	call   c0000680 <strcpy>
c0014655:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001465b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	85 c0                	test   eax,eax
c0014663:	75 cb                	jne    c0014630 <Process::addArgs(char**)+0x24>
c0014665:	8d 76 00             	lea    esi,[esi+0x0]
c0014668:	5b                   	pop    ebx
c0014669:	5e                   	pop    esi
c001466a:	5f                   	pop    edi
c001466b:	c3                   	ret    

c001466c <Process::Process(char const*, Process*, char**)>:
c001466c:	56                   	push   esi
c001466d:	53                   	push   ebx
c001466e:	83 ec 14             	sub    esp,0x14
c0014671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014675:	05 0c 02 00 00       	add    eax,0x20c
c001467a:	bb 07 00 00 00       	mov    ebx,0x7
c001467f:	89 c6                	mov    esi,eax
c0014681:	8d 76 00             	lea    esi,[esi+0x0]
c0014684:	85 db                	test   ebx,ebx
c0014686:	78 14                	js     c001469c <Process::Process(char const*, Process*, char**)+0x30>
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	56                   	push   esi
c001468c:	e8 43 a2 00 00       	call   c001e8d4 <ThreadControlBlock::ThreadControlBlock()>
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	83 c6 5f             	add    esi,0x5f
c0014697:	4b                   	dec    ebx
c0014698:	eb ea                	jmp    c0014684 <Process::Process(char const*, Process*, char**)+0x18>
c001469a:	66 90                	xchg   ax,ax
c001469c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00146a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ab:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146b9:	e8 c8 bb ff ff       	call   c0010286 <Krnl::newProcessEnv(Process*)>
c00146be:	83 c4 10             	add    esp,0x10
c00146c1:	89 c2                	mov    edx,eax
c00146c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00146cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00146da:	a1 a0 1d 02 c0       	mov    eax,ds:0xc0021da0
c00146df:	8d 50 01             	lea    edx,[eax+0x1]
c00146e2:	89 15 a0 1d 02 c0    	mov    DWORD PTR ds:0xc0021da0,edx
c00146e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146ec:	89 02                	mov    DWORD PTR [edx],eax
c00146ee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00146fd:	e8 79 31 ff ff       	call   c000787b <malloc>
c0014702:	83 c4 10             	add    esp,0x10
c0014705:	89 c3                	mov    ebx,eax
c0014707:	83 ec 08             	sub    esp,0x8
c001470a:	6a 00                	push   0x0
c001470c:	53                   	push   ebx
c001470d:	e8 0e 58 ff ff       	call   c0009f20 <VAS::VAS(bool)>
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014719:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001471f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014723:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014731:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014735:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001473b:	e8 6e c1 ff ff       	call   c00108ae <KeInitSignals()>
c0014740:	89 c2                	mov    edx,eax
c0014742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014746:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001474c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014750:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014756:	85 c0                	test   eax,eax
c0014758:	74 42                	je     c001479c <Process::Process(char const*, Process*, char**)+0x130>
c001475a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001475e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014764:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001476a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001476e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014778:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001477e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014788:	05 0c 01 00 00       	add    eax,0x10c
c001478d:	83 ec 08             	sub    esp,0x8
c0014790:	52                   	push   edx
c0014791:	50                   	push   eax
c0014792:	e8 e9 be fe ff       	call   c0000680 <strcpy>
c0014797:	83 c4 10             	add    esp,0x10
c001479a:	eb 64                	jmp    c0014800 <Process::Process(char const*, Process*, char**)+0x194>
c001479c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147ab:	e8 cb 30 ff ff       	call   c000787b <malloc>
c00147b0:	83 c4 10             	add    esp,0x10
c00147b3:	89 c3                	mov    ebx,eax
c00147b5:	83 ec 08             	sub    esp,0x8
c00147b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147bc:	53                   	push   ebx
c00147bd:	e8 6a 42 ff ff       	call   c0008a2c <VgaText::VgaText(char const*)>
c00147c2:	83 c4 10             	add    esp,0x10
c00147c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147c9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00147cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00147d9:	83 ec 0c             	sub    esp,0xc
c00147dc:	50                   	push   eax
c00147dd:	e8 ea 3a ff ff       	call   c00082cc <addToTerminalCycle(VgaText*)>
c00147e2:	83 c4 10             	add    esp,0x10
c00147e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147e9:	05 0c 01 00 00       	add    eax,0x10c
c00147ee:	83 ec 08             	sub    esp,0x8
c00147f1:	68 00 0c 02 c0       	push   0xc0020c00
c00147f6:	50                   	push   eax
c00147f7:	e8 84 be fe ff       	call   c0000680 <strcpy>
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	90                   	nop
c0014800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014804:	83 c0 0c             	add    eax,0xc
c0014807:	83 ec 08             	sub    esp,0x8
c001480a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001480e:	50                   	push   eax
c001480f:	e8 6c be fe ff       	call   c0000680 <strcpy>
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	83 ec 08             	sub    esp,0x8
c001481a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001481e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014822:	e8 e5 fd ff ff       	call   c001460c <Process::addArgs(char**)>
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	83 ec 08             	sub    esp,0x8
c001482d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014835:	e8 70 ed ff ff       	call   c00135aa <Thr::loadProgramIntoMemory(Process*, char const*)>
c001483a:	83 c4 10             	add    esp,0x10
c001483d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014841:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014845:	83 f0 01             	xor    eax,0x1
c0014848:	88 c2                	mov    dl,al
c001484a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001484e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014854:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014859:	83 ec 08             	sub    esp,0x8
c001485c:	50                   	push   eax
c001485d:	68 58 0c 02 c0       	push   0xc0020c58
c0014862:	e8 02 5e ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	90                   	nop
c001486b:	83 c4 14             	add    esp,0x14
c001486e:	5b                   	pop    ebx
c001486f:	5e                   	pop    esi
c0014870:	c3                   	ret    
c0014871:	90                   	nop
c0014872:	66 90                	xchg   ax,ax

c0014874 <Process::Process(bool, char const*, Process*, char**)>:
c0014874:	56                   	push   esi
c0014875:	53                   	push   ebx
c0014876:	83 ec 24             	sub    esp,0x24
c0014879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001487d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014885:	05 0c 02 00 00       	add    eax,0x20c
c001488a:	bb 07 00 00 00       	mov    ebx,0x7
c001488f:	89 c6                	mov    esi,eax
c0014891:	8d 76 00             	lea    esi,[esi+0x0]
c0014894:	85 db                	test   ebx,ebx
c0014896:	78 14                	js     c00148ac <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014898:	83 ec 0c             	sub    esp,0xc
c001489b:	56                   	push   esi
c001489c:	e8 33 a0 00 00       	call   c001e8d4 <ThreadControlBlock::ThreadControlBlock()>
c00148a1:	83 c4 10             	add    esp,0x10
c00148a4:	83 c6 5f             	add    esi,0x5f
c00148a7:	4b                   	dec    ebx
c00148a8:	eb ea                	jmp    c0014894 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00148aa:	66 90                	xchg   ax,ax
c00148ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148b0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00148c9:	e8 b8 b9 ff ff       	call   c0010286 <Krnl::newProcessEnv(Process*)>
c00148ce:	83 c4 10             	add    esp,0x10
c00148d1:	89 c2                	mov    edx,eax
c00148d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148d7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00148dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148e1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00148ea:	a1 a0 1d 02 c0       	mov    eax,ds:0xc0021da0
c00148ef:	8d 50 01             	lea    edx,[eax+0x1]
c00148f2:	89 15 a0 1d 02 c0    	mov    DWORD PTR ds:0xc0021da0,edx
c00148f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00148fc:	89 02                	mov    DWORD PTR [edx],eax
c00148fe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014906:	83 ec 0c             	sub    esp,0xc
c0014909:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001490d:	e8 69 2f ff ff       	call   c000787b <malloc>
c0014912:	83 c4 10             	add    esp,0x10
c0014915:	89 c3                	mov    ebx,eax
c0014917:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001491c:	83 ec 08             	sub    esp,0x8
c001491f:	50                   	push   eax
c0014920:	53                   	push   ebx
c0014921:	e8 fa 55 ff ff       	call   c0009f20 <VAS::VAS(bool)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001492d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014937:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014941:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014945:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014949:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001494f:	e8 5a bf ff ff       	call   c00108ae <KeInitSignals()>
c0014954:	89 c2                	mov    edx,eax
c0014956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001495a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014964:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001496a:	85 c0                	test   eax,eax
c001496c:	74 42                	je     c00149b0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001496e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014972:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014978:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001497e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014982:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014988:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001498c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014992:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014998:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001499c:	05 0c 01 00 00       	add    eax,0x10c
c00149a1:	83 ec 08             	sub    esp,0x8
c00149a4:	52                   	push   edx
c00149a5:	50                   	push   eax
c00149a6:	e8 d5 bc fe ff       	call   c0000680 <strcpy>
c00149ab:	83 c4 10             	add    esp,0x10
c00149ae:	eb 64                	jmp    c0014a14 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00149b0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00149bf:	e8 b7 2e ff ff       	call   c000787b <malloc>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	89 c3                	mov    ebx,eax
c00149c9:	83 ec 08             	sub    esp,0x8
c00149cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00149d0:	53                   	push   ebx
c00149d1:	e8 56 40 ff ff       	call   c0008a2c <VgaText::VgaText(char const*)>
c00149d6:	83 c4 10             	add    esp,0x10
c00149d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149dd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00149e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00149ed:	83 ec 0c             	sub    esp,0xc
c00149f0:	50                   	push   eax
c00149f1:	e8 d6 38 ff ff       	call   c00082cc <addToTerminalCycle(VgaText*)>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149fd:	05 0c 01 00 00       	add    eax,0x10c
c0014a02:	83 ec 08             	sub    esp,0x8
c0014a05:	68 00 0c 02 c0       	push   0xc0020c00
c0014a0a:	50                   	push   eax
c0014a0b:	e8 70 bc fe ff       	call   c0000680 <strcpy>
c0014a10:	83 c4 10             	add    esp,0x10
c0014a13:	90                   	nop
c0014a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a18:	83 c0 0c             	add    eax,0xc
c0014a1b:	83 ec 08             	sub    esp,0x8
c0014a1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014a22:	50                   	push   eax
c0014a23:	e8 58 bc fe ff       	call   c0000680 <strcpy>
c0014a28:	83 c4 10             	add    esp,0x10
c0014a2b:	83 ec 08             	sub    esp,0x8
c0014a2e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014a32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014a36:	e8 d1 fb ff ff       	call   c001460c <Process::addArgs(char**)>
c0014a3b:	83 c4 10             	add    esp,0x10
c0014a3e:	90                   	nop
c0014a3f:	83 c4 24             	add    esp,0x24
c0014a42:	5b                   	pop    ebx
c0014a43:	5e                   	pop    esi
c0014a44:	c3                   	ret    
c0014a45:	8d 76 00             	lea    esi,[esi+0x0]

c0014a48 <taskStartupFunction>:
c0014a48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a4d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014a50:	c3                   	ret    
c0014a51:	90                   	nop
c0014a52:	66 90                	xchg   ax,ax

c0014a54 <Semaphore::Semaphore(int)>:
c0014a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014a5c:	89 10                	mov    DWORD PTR [eax],edx
c0014a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a62:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a78:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014a7f:	90                   	nop
c0014a80:	c3                   	ret    
c0014a81:	90                   	nop
c0014a82:	66 90                	xchg   ax,ax

c0014a84 <Mutex::Mutex()>:
c0014a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a88:	6a 01                	push   0x1
c0014a8a:	50                   	push   eax
c0014a8b:	e8 c4 ff ff ff       	call   c0014a54 <Semaphore::Semaphore(int)>
c0014a90:	83 c4 08             	add    esp,0x8
c0014a93:	90                   	nop
c0014a94:	c3                   	ret    
c0014a95:	90                   	nop
c0014a96:	66 90                	xchg   ax,ax

c0014a98 <Process::createThread(void (*)(void*), void*, int)>:
c0014a98:	57                   	push   edi
c0014a99:	31 d2                	xor    edx,edx
c0014a9b:	56                   	push   esi
c0014a9c:	53                   	push   ebx
c0014a9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aa1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014aa8:	89 f0                	mov    eax,esi
c0014aaa:	66 90                	xchg   ax,ax
c0014aac:	0f b7 c8             	movzx  ecx,ax
c0014aaf:	a8 01                	test   al,0x1
c0014ab1:	74 15                	je     c0014ac8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014ab3:	89 c8                	mov    eax,ecx
c0014ab5:	42                   	inc    edx
c0014ab6:	d1 f8                	sar    eax,1
c0014ab8:	83 fa 10             	cmp    edx,0x10
c0014abb:	75 ef                	jne    c0014aac <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014abd:	31 db                	xor    ebx,ebx
c0014abf:	89 d8                	mov    eax,ebx
c0014ac1:	5b                   	pop    ebx
c0014ac2:	5e                   	pop    esi
c0014ac3:	5f                   	pop    edi
c0014ac4:	c3                   	ret    
c0014ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac8:	b8 01 00 00 00       	mov    eax,0x1
c0014acd:	c4 e2 69 f7 c0       	shlx   eax,eax,edx
c0014ad2:	09 c6                	or     esi,eax
c0014ad4:	6b c2 5f             	imul   eax,edx,0x5f
c0014ad7:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014ade:	01 d8                	add    eax,ebx
c0014ae0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ae7:	75 0b                	jne    c0014af4 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014ae9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014af3:	90                   	nop
c0014af4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014afa:	6b fa 5f             	imul   edi,edx,0x5f
c0014afd:	83 ec 0c             	sub    esp,0xc
c0014b00:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0014b03:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014b06:	89 88 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],ecx
c0014b0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b10:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014b16:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
c0014b1c:	89 88 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],ecx
c0014b22:	89 d1                	mov    ecx,edx
c0014b24:	f7 d9                	neg    ecx
c0014b26:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014b2c:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014b33:	c1 e1 15             	shl    ecx,0x15
c0014b36:	81 c1 e0 ff ff 01    	add    ecx,0x1ffffe0
c0014b3c:	89 88 10 02 00 00    	mov    DWORD PTR [eax+0x210],ecx
c0014b42:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0014b46:	88 88 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],cl
c0014b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b50:	c7 46 24 00 00 00 00 	mov    DWORD PTR [esi+0x24],0x0
c0014b57:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0014b5a:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0014b61:	c7 46 20 00 00 00 00 	mov    DWORD PTR [esi+0x20],0x0
c0014b68:	68 00 01 00 00       	push   0x100
c0014b6d:	e8 09 2d ff ff       	call   c000787b <malloc>
c0014b72:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014b75:	58                   	pop    eax
c0014b76:	5a                   	pop    edx
c0014b77:	53                   	push   ebx
c0014b78:	68 84 71 02 c0       	push   0xc0027184
c0014b7d:	e8 ea 9a 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	89 d8                	mov    eax,ebx
c0014b87:	5b                   	pop    ebx
c0014b88:	5e                   	pop    esi
c0014b89:	5f                   	pop    edi
c0014b8a:	c3                   	ret    
c0014b8b:	90                   	nop

c0014b8c <Process::createUserThread()>:
c0014b8c:	83 ec 0c             	sub    esp,0xc
c0014b8f:	68 80 00 00 00       	push   0x80
c0014b94:	6a 00                	push   0x0
c0014b96:	68 18 45 01 c0       	push   0xc0014518
c0014b9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b9f:	e8 f4 fe ff ff       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c0014ba4:	83 c4 1c             	add    esp,0x1c
c0014ba7:	c3                   	ret    

c0014ba8 <setupMultitasking(void (*)())>:
c0014ba8:	56                   	push   esi
c0014ba9:	53                   	push   ebx
c0014baa:	83 ec 04             	sub    esp,0x4
c0014bad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bb1:	eb 11                	jmp    c0014bc4 <setupMultitasking(void (*)())+0x1c>
c0014bb3:	90                   	nop
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	68 84 71 02 c0       	push   0xc0027184
c0014bbc:	e8 f3 99 00 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	83 ec 0c             	sub    esp,0xc
c0014bc7:	68 84 71 02 c0       	push   0xc0027184
c0014bcc:	e8 bf 99 00 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014bd1:	83 c4 10             	add    esp,0x10
c0014bd4:	84 c0                	test   al,al
c0014bd6:	74 dc                	je     c0014bb4 <setupMultitasking(void (*)())+0xc>
c0014bd8:	83 ec 0c             	sub    esp,0xc
c0014bdb:	68 24 07 00 00       	push   0x724
c0014be0:	e8 96 2c ff ff       	call   c000787b <malloc>
c0014be5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014bec:	6a 00                	push   0x0
c0014bee:	89 c3                	mov    ebx,eax
c0014bf0:	68 04 0c 02 c0       	push   0xc0020c04
c0014bf5:	6a 01                	push   0x1
c0014bf7:	50                   	push   eax
c0014bf8:	e8 77 fc ff ff       	call   c0014874 <Process::Process(bool, char const*, Process*, char**)>
c0014bfd:	83 c4 14             	add    esp,0x14
c0014c00:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0014c06:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014c0c:	e8 1a 39 ff ff       	call   c000852b <setActiveTerminal(VgaText*)>
c0014c11:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014c17:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0014c1f:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014c29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c2c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014c32:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014c3c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014c42:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014c4c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014c56:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014c60:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014c66:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014c6c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014c76:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014c80:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014c87:	e8 ef 2b ff ff       	call   c000787b <malloc>
c0014c8c:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014c92:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014c98:	58                   	pop    eax
c0014c99:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014c9f:	5a                   	pop    edx
c0014ca0:	68 00 0c 02 c0       	push   0xc0020c00
c0014ca5:	50                   	push   eax
c0014ca6:	e8 d5 b9 fe ff       	call   c0000680 <strcpy>
c0014cab:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014cb2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014cb6:	83 c4 14             	add    esp,0x14
c0014cb9:	5b                   	pop    ebx
c0014cba:	5e                   	pop    esi
c0014cbb:	e9 a9 b5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0014cc0 <schedule()>:
c0014cc0:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014cc5:	85 c0                	test   eax,eax
c0014cc7:	74 0b                	je     c0014cd4 <schedule()+0x14>
c0014cc9:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014cd3:	c3                   	ret    
c0014cd4:	53                   	push   ebx
c0014cd5:	83 ec 14             	sub    esp,0x14
c0014cd8:	68 84 71 02 c0       	push   0xc0027184
c0014cdd:	e8 ae 98 00 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	84 c0                	test   al,al
c0014ce7:	75 3f                	jne    c0014d28 <schedule()+0x68>
c0014ce9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014cf1:	83 fa 01             	cmp    edx,0x1
c0014cf4:	74 3a                	je     c0014d30 <schedule()+0x70>
c0014cf6:	66 90                	xchg   ax,ax
c0014cf8:	83 ec 0c             	sub    esp,0xc
c0014cfb:	68 84 71 02 c0       	push   0xc0027184
c0014d00:	e8 a7 98 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014d05:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014d0c:	89 c3                	mov    ebx,eax
c0014d0e:	e8 a1 98 00 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014d13:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014d1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d1d:	e8 4e f8 ff ff       	call   c0014570 <switchToThread(ThreadControlBlock*)>
c0014d22:	83 c4 10             	add    esp,0x10
c0014d25:	8d 76 00             	lea    esi,[esi+0x0]
c0014d28:	83 c4 08             	add    esp,0x8
c0014d2b:	5b                   	pop    ebx
c0014d2c:	c3                   	ret    
c0014d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d30:	83 ec 08             	sub    esp,0x8
c0014d33:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014d3a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014d40:	68 84 71 02 c0       	push   0xc0027184
c0014d45:	e8 22 99 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	eb a9                	jmp    c0014cf8 <schedule()+0x38>
c0014d4f:	90                   	nop

c0014d50 <Semaphore::tryAcquire()>:
c0014d50:	53                   	push   ebx
c0014d51:	83 ec 08             	sub    esp,0x8
c0014d54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014d58:	fa                   	cli    
c0014d59:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c0014d5f:	8d 42 01             	lea    eax,[edx+0x1]
c0014d62:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d67:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d6c:	8d 58 01             	lea    ebx,[eax+0x1]
c0014d6f:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014d75:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014d78:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014d7a:	7c 2c                	jl     c0014da8 <Semaphore::tryAcquire()+0x58>
c0014d7c:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014d81:	85 c0                	test   eax,eax
c0014d83:	75 0b                	jne    c0014d90 <Semaphore::tryAcquire()+0x40>
c0014d85:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014d8a:	85 c0                	test   eax,eax
c0014d8c:	75 5a                	jne    c0014de8 <Semaphore::tryAcquire()+0x98>
c0014d8e:	66 90                	xchg   ax,ax
c0014d90:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014d96:	31 c0                	xor    eax,eax
c0014d98:	85 d2                	test   edx,edx
c0014d9a:	75 04                	jne    c0014da0 <Semaphore::tryAcquire()+0x50>
c0014d9c:	fb                   	sti    
c0014d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0014da0:	83 c4 08             	add    esp,0x8
c0014da3:	5b                   	pop    ebx
c0014da4:	c3                   	ret    
c0014da5:	8d 76 00             	lea    esi,[esi+0x0]
c0014da8:	43                   	inc    ebx
c0014da9:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014dae:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014db1:	85 c0                	test   eax,eax
c0014db3:	75 23                	jne    c0014dd8 <Semaphore::tryAcquire()+0x88>
c0014db5:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c0014dbb:	85 c9                	test   ecx,ecx
c0014dbd:	74 19                	je     c0014dd8 <Semaphore::tryAcquire()+0x88>
c0014dbf:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014dc9:	e8 f2 fe ff ff       	call   c0014cc0 <schedule()>
c0014dce:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014dd3:	8d 50 ff             	lea    edx,[eax-0x1]
c0014dd6:	66 90                	xchg   ax,ax
c0014dd8:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014dde:	b0 01                	mov    al,0x1
c0014de0:	85 d2                	test   edx,edx
c0014de2:	75 bc                	jne    c0014da0 <Semaphore::tryAcquire()+0x50>
c0014de4:	eb b6                	jmp    c0014d9c <Semaphore::tryAcquire()+0x4c>
c0014de6:	66 90                	xchg   ax,ax
c0014de8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014df2:	e8 c9 fe ff ff       	call   c0014cc0 <schedule()>
c0014df7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014dfc:	8d 50 ff             	lea    edx,[eax-0x1]
c0014dff:	31 c0                	xor    eax,eax
c0014e01:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014e07:	85 d2                	test   edx,edx
c0014e09:	75 95                	jne    c0014da0 <Semaphore::tryAcquire()+0x50>
c0014e0b:	eb 8f                	jmp    c0014d9c <Semaphore::tryAcquire()+0x4c>
c0014e0d:	90                   	nop
c0014e0e:	66 90                	xchg   ax,ax

c0014e10 <Semaphore::assertLocked(char const*)>:
c0014e10:	83 ec 0c             	sub    esp,0xc
c0014e13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e17:	fa                   	cli    
c0014e18:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e1d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e23:	8d 48 01             	lea    ecx,[eax+0x1]
c0014e26:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014e2c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014e2e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014e31:	7c 29                	jl     c0014e5c <Semaphore::assertLocked(char const*)+0x4c>
c0014e33:	90                   	nop
c0014e34:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014e39:	85 c0                	test   eax,eax
c0014e3b:	75 0b                	jne    c0014e48 <Semaphore::assertLocked(char const*)+0x38>
c0014e3d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014e42:	85 c0                	test   eax,eax
c0014e44:	75 2e                	jne    c0014e74 <Semaphore::assertLocked(char const*)+0x64>
c0014e46:	66 90                	xchg   ax,ax
c0014e48:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e4d:	48                   	dec    eax
c0014e4e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e53:	75 03                	jne    c0014e58 <Semaphore::assertLocked(char const*)+0x48>
c0014e55:	fb                   	sti    
c0014e56:	66 90                	xchg   ax,ax
c0014e58:	83 c4 0c             	add    esp,0xc
c0014e5b:	c3                   	ret    
c0014e5c:	83 ec 0c             	sub    esp,0xc
c0014e5f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e63:	e8 55 b6 ff ff       	call   c00104bd <KePanic(char const*)>
c0014e68:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	48                   	dec    eax
c0014e71:	eb c1                	jmp    c0014e34 <Semaphore::assertLocked(char const*)+0x24>
c0014e73:	90                   	nop
c0014e74:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014e7e:	e8 3d fe ff ff       	call   c0014cc0 <schedule()>
c0014e83:	eb c3                	jmp    c0014e48 <Semaphore::assertLocked(char const*)+0x38>
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e97:	e8 24 fe ff ff       	call   c0014cc0 <schedule()>
c0014e9c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ea1:	48                   	dec    eax
c0014ea2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ea7:	75 03                	jne    c0014eac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014ea9:	fb                   	sti    
c0014eaa:	66 90                	xchg   ax,ax
c0014eac:	83 c4 0c             	add    esp,0xc
c0014eaf:	c3                   	ret    

c0014eb0 <blockTask(TaskState)>:
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	fa                   	cli    
c0014eb4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014eba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ec6:	e8 f5 fd ff ff       	call   c0014cc0 <schedule()>
c0014ecb:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ed0:	48                   	dec    eax
c0014ed1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ed6:	75 04                	jne    c0014edc <blockTask(TaskState)+0x2c>
c0014ed8:	fb                   	sti    
c0014ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0014edc:	83 c4 0c             	add    esp,0xc
c0014edf:	c3                   	ret    

c0014ee0 <waitTask(int, int*, int)>:
c0014ee0:	83 ec 18             	sub    esp,0x18
c0014ee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014eec:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014eef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014efb:	6a 07                	push   0x7
c0014efd:	e8 ae ff ff ff       	call   c0014eb0 <blockTask(TaskState)>
c0014f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014f0d:	85 d2                	test   edx,edx
c0014f0f:	74 0b                	je     c0014f1c <waitTask(int, int*, int)+0x3c>
c0014f11:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014f14:	89 02                	mov    DWORD PTR [edx],eax
c0014f16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f1b:	90                   	nop
c0014f1c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014f1f:	83 c4 0c             	add    esp,0xc
c0014f22:	c3                   	ret    
c0014f23:	90                   	nop

c0014f24 <milliTenthSleepUntil(unsigned int)>:
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2b:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014f31:	76 05                	jbe    c0014f38 <milliTenthSleepUntil(unsigned int)+0x14>
c0014f33:	90                   	nop
c0014f34:	83 c4 0c             	add    esp,0xc
c0014f37:	c3                   	ret    
c0014f38:	fa                   	cli    
c0014f39:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f3f:	83 ec 08             	sub    esp,0x8
c0014f42:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014f48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014f4e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014f51:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014f57:	68 78 71 02 c0       	push   0xc0027178
c0014f5c:	e8 0b 97 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f61:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014f68:	e8 43 ff ff ff       	call   c0014eb0 <blockTask(TaskState)>
c0014f6d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	48                   	dec    eax
c0014f76:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014f7b:	85 c0                	test   eax,eax
c0014f7d:	75 09                	jne    c0014f88 <milliTenthSleepUntil(unsigned int)+0x64>
c0014f7f:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014f84:	85 c0                	test   eax,eax
c0014f86:	75 14                	jne    c0014f9c <milliTenthSleepUntil(unsigned int)+0x78>
c0014f88:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f8d:	48                   	dec    eax
c0014f8e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f93:	75 9f                	jne    c0014f34 <milliTenthSleepUntil(unsigned int)+0x10>
c0014f95:	fb                   	sti    
c0014f96:	83 c4 0c             	add    esp,0xc
c0014f99:	c3                   	ret    
c0014f9a:	66 90                	xchg   ax,ax
c0014f9c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014fa6:	e8 15 fd ff ff       	call   c0014cc0 <schedule()>
c0014fab:	eb db                	jmp    c0014f88 <milliTenthSleepUntil(unsigned int)+0x64>
c0014fad:	8d 76 00             	lea    esi,[esi+0x0]

c0014fb0 <milliTenthSleep(unsigned int)>:
c0014fb0:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014fb5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014fb9:	e9 66 ff ff ff       	jmp    c0014f24 <milliTenthSleepUntil(unsigned int)>
c0014fbe:	66 90                	xchg   ax,ax

c0014fc0 <sleep(unsigned int)>:
c0014fc0:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0014fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fcc:	eb e2                	jmp    c0014fb0 <milliTenthSleep(unsigned int)>
c0014fce:	66 90                	xchg   ax,ax

c0014fd0 <Semaphore::acquire()>:
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fd7:	fa                   	cli    
c0014fd8:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014fdd:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014fe3:	8d 48 01             	lea    ecx,[eax+0x1]
c0014fe6:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014fec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014fef:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014ff1:	7d 2d                	jge    c0015020 <Semaphore::acquire()+0x50>
c0014ff3:	41                   	inc    ecx
c0014ff4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014ff7:	90                   	nop
c0014ff8:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014ffd:	85 c0                	test   eax,eax
c0014fff:	75 0b                	jne    c001500c <Semaphore::acquire()+0x3c>
c0015001:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0015006:	85 c0                	test   eax,eax
c0015008:	75 62                	jne    c001506c <Semaphore::acquire()+0x9c>
c001500a:	66 90                	xchg   ax,ax
c001500c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015011:	48                   	dec    eax
c0015012:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015017:	75 03                	jne    c001501c <Semaphore::acquire()+0x4c>
c0015019:	fb                   	sti    
c001501a:	66 90                	xchg   ax,ax
c001501c:	83 c4 0c             	add    esp,0xc
c001501f:	c3                   	ret    
c0015020:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015025:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001502c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001502f:	85 c9                	test   ecx,ecx
c0015031:	74 4d                	je     c0015080 <Semaphore::acquire()+0xb0>
c0015033:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015036:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001503c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001503f:	90                   	nop
c0015040:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001504b:	68 80 0c 02 c0       	push   0xc0020c80
c0015050:	e8 14 56 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0015055:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001505c:	e8 4f fe ff ff       	call   c0014eb0 <blockTask(TaskState)>
c0015061:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015066:	83 c4 10             	add    esp,0x10
c0015069:	48                   	dec    eax
c001506a:	eb 8c                	jmp    c0014ff8 <Semaphore::acquire()+0x28>
c001506c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015076:	e8 45 fc ff ff       	call   c0014cc0 <schedule()>
c001507b:	eb 8f                	jmp    c001500c <Semaphore::acquire()+0x3c>
c001507d:	8d 76 00             	lea    esi,[esi+0x0]
c0015080:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015085:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015088:	eb b6                	jmp    c0015040 <Semaphore::acquire()+0x70>
c001508a:	66 90                	xchg   ax,ax

c001508c <taskReturned>:
c001508c:	83 ec 18             	sub    esp,0x18
c001508f:	68 a0 0c 02 c0       	push   0xc0020ca0
c0015094:	e8 24 b4 ff ff       	call   c00104bd <KePanic(char const*)>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	83 ec 0c             	sub    esp,0xc
c001509f:	6a 02                	push   0x2
c00150a1:	e8 0a fe ff ff       	call   c0014eb0 <blockTask(TaskState)>
c00150a6:	fa                   	cli    
c00150a7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150ad:	e8 0e fc ff ff       	call   c0014cc0 <schedule()>
c00150b2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	48                   	dec    eax
c00150bb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00150c0:	85 c0                	test   eax,eax
c00150c2:	75 d8                	jne    c001509c <taskReturned+0x10>
c00150c4:	fb                   	sti    
c00150c5:	eb d5                	jmp    c001509c <taskReturned+0x10>
c00150c7:	90                   	nop

c00150c8 <Thr::processFromPID(int)>:
c00150c8:	57                   	push   edi
c00150c9:	56                   	push   esi
c00150ca:	53                   	push   ebx
c00150cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00150cf:	fa                   	cli    
c00150d0:	83 ec 0c             	sub    esp,0xc
c00150d3:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150d9:	68 84 71 02 c0       	push   0xc0027184
c00150de:	e8 c9 94 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	89 c7                	mov    edi,eax
c00150e8:	eb 16                	jmp    c0015100 <Thr::processFromPID(int)+0x38>
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	83 ec 0c             	sub    esp,0xc
c00150ef:	68 84 71 02 c0       	push   0xc0027184
c00150f4:	e8 b3 94 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150f9:	83 c4 10             	add    esp,0x10
c00150fc:	39 f8                	cmp    eax,edi
c00150fe:	74 4c                	je     c001514c <Thr::processFromPID(int)+0x84>
c0015100:	83 ec 0c             	sub    esp,0xc
c0015103:	68 84 71 02 c0       	push   0xc0027184
c0015108:	e8 9f 94 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001510d:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015114:	89 c3                	mov    ebx,eax
c0015116:	e8 99 94 00 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001511b:	58                   	pop    eax
c001511c:	5a                   	pop    edx
c001511d:	53                   	push   ebx
c001511e:	68 84 71 02 c0       	push   0xc0027184
c0015123:	e8 44 95 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015128:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	39 30                	cmp    DWORD PTR [eax],esi
c0015130:	75 ba                	jne    c00150ec <Thr::processFromPID(int)+0x24>
c0015132:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015137:	48                   	dec    eax
c0015138:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001513d:	74 09                	je     c0015148 <Thr::processFromPID(int)+0x80>
c001513f:	90                   	nop
c0015140:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015143:	90                   	nop
c0015144:	5b                   	pop    ebx
c0015145:	5e                   	pop    esi
c0015146:	5f                   	pop    edi
c0015147:	c3                   	ret    
c0015148:	fb                   	sti    
c0015149:	eb f5                	jmp    c0015140 <Thr::processFromPID(int)+0x78>
c001514b:	90                   	nop
c001514c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015151:	8d 50 ff             	lea    edx,[eax-0x1]
c0015154:	31 c0                	xor    eax,eax
c0015156:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001515c:	85 d2                	test   edx,edx
c001515e:	75 e4                	jne    c0015144 <Thr::processFromPID(int)+0x7c>
c0015160:	fb                   	sti    
c0015161:	5b                   	pop    ebx
c0015162:	5e                   	pop    esi
c0015163:	5f                   	pop    edi
c0015164:	c3                   	ret    
c0015165:	8d 76 00             	lea    esi,[esi+0x0]

c0015168 <unblockTask(ThreadControlBlock*)>:
c0015168:	53                   	push   ebx
c0015169:	83 ec 08             	sub    esp,0x8
c001516c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015170:	fa                   	cli    
c0015171:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015174:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001517a:	85 c0                	test   eax,eax
c001517c:	74 66                	je     c00151e4 <unblockTask(ThreadControlBlock*)+0x7c>
c001517e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015181:	83 f8 01             	cmp    eax,0x1
c0015184:	74 36                	je     c00151bc <unblockTask(ThreadControlBlock*)+0x54>
c0015186:	83 ec 0c             	sub    esp,0xc
c0015189:	68 84 71 02 c0       	push   0xc0027184
c001518e:	e8 19 94 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	85 c0                	test   eax,eax
c0015198:	75 1a                	jne    c00151b4 <unblockTask(ThreadControlBlock*)+0x4c>
c001519a:	eb 5c                	jmp    c00151f8 <unblockTask(ThreadControlBlock*)+0x90>
c001519c:	83 ec 08             	sub    esp,0x8
c001519f:	50                   	push   eax
c00151a0:	68 84 71 02 c0       	push   0xc0027184
c00151a5:	e8 1e 97 00 00       	call   c001e8c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	85 c0                	test   eax,eax
c00151af:	74 47                	je     c00151f8 <unblockTask(ThreadControlBlock*)+0x90>
c00151b1:	8d 76 00             	lea    esi,[esi+0x0]
c00151b4:	39 c3                	cmp    ebx,eax
c00151b6:	75 e4                	jne    c001519c <unblockTask(ThreadControlBlock*)+0x34>
c00151b8:	eb 12                	jmp    c00151cc <unblockTask(ThreadControlBlock*)+0x64>
c00151ba:	66 90                	xchg   ax,ax
c00151bc:	83 ec 0c             	sub    esp,0xc
c00151bf:	68 22 0c 02 c0       	push   0xc0020c22
c00151c4:	e8 a0 54 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00151c9:	83 c4 10             	add    esp,0x10
c00151cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00151d1:	48                   	dec    eax
c00151d2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00151d7:	75 03                	jne    c00151dc <unblockTask(ThreadControlBlock*)+0x74>
c00151d9:	fb                   	sti    
c00151da:	66 90                	xchg   ax,ax
c00151dc:	83 c4 08             	add    esp,0x8
c00151df:	5b                   	pop    ebx
c00151e0:	c3                   	ret    
c00151e1:	8d 76 00             	lea    esi,[esi+0x0]
c00151e4:	83 ec 0c             	sub    esp,0xc
c00151e7:	68 0b 0c 02 c0       	push   0xc0020c0b
c00151ec:	e8 78 54 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	eb d6                	jmp    c00151cc <unblockTask(ThreadControlBlock*)+0x64>
c00151f6:	66 90                	xchg   ax,ax
c00151f8:	83 ec 08             	sub    esp,0x8
c00151fb:	53                   	push   ebx
c00151fc:	68 84 71 02 c0       	push   0xc0027184
c0015201:	e8 66 94 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	eb c1                	jmp    c00151cc <unblockTask(ThreadControlBlock*)+0x64>
c001520b:	90                   	nop

c001520c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001520c:	55                   	push   ebp
c001520d:	57                   	push   edi
c001520e:	56                   	push   esi
c001520f:	53                   	push   ebx
c0015210:	83 ec 1c             	sub    esp,0x1c
c0015213:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015217:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001521a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015220:	85 ed                	test   ebp,ebp
c0015222:	7e 24                	jle    c0015248 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0015224:	31 db                	xor    ebx,ebx
c0015226:	66 90                	xchg   ax,ax
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	ff b4 98 1a 05 00 00 	push   DWORD PTR [eax+ebx*4+0x51a]
c0015232:	43                   	inc    ebx
c0015233:	e8 53 26 ff ff       	call   c000788b <free>
c0015238:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	39 98 16 05 00 00    	cmp    DWORD PTR [eax+0x516],ebx
c0015244:	7f e2                	jg     c0015228 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015246:	66 90                	xchg   ax,ax
c0015248:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015252:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015255:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001525a:	8b 4e 38             	mov    ecx,DWORD PTR [esi+0x38]
c001525d:	d3 c0                	rol    eax,cl
c001525f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0015266:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015269:	66 83 ba 04 05 00 00 00 	cmp    WORD PTR [edx+0x504],0x0
c0015271:	89 d7                	mov    edi,edx
c0015273:	0f 85 63 01 00 00    	jne    c00153dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0015279:	8b 9a 1a 07 00 00    	mov    ebx,DWORD PTR [edx+0x71a]
c001527f:	85 db                	test   ebx,ebx
c0015281:	74 1d                	je     c00152a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	53                   	push   ebx
c0015287:	e8 16 af ff ff       	call   c00101a2 <EnvVarContainer::~EnvVarContainer()>
c001528c:	59                   	pop    ecx
c001528d:	5f                   	pop    edi
c001528e:	6a 0c                	push   0xc
c0015290:	53                   	push   ebx
c0015291:	e8 de 52 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c0015296:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	89 d7                	mov    edi,edx
c001529e:	66 90                	xchg   ax,ax
c00152a0:	8b 82 0a 05 00 00    	mov    eax,DWORD PTR [edx+0x50a]
c00152a6:	85 c0                	test   eax,eax
c00152a8:	0f 84 a2 00 00 00    	je     c0015350 <cleanupTerminatedTask(ThreadControlBlock*)+0x144>
c00152ae:	8b 4e 51             	mov    ecx,DWORD PTR [esi+0x51]
c00152b1:	31 db                	xor    ebx,ebx
c00152b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00152b7:	eb 17                	jmp    c00152d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00152b9:	8d 76 00             	lea    esi,[esi+0x0]
c00152bc:	43                   	inc    ebx
c00152bd:	83 fb 10             	cmp    ebx,0x10
c00152c0:	0f 84 8a 00 00 00    	je     c0015350 <cleanupTerminatedTask(ThreadControlBlock*)+0x144>
c00152c6:	66 90                	xchg   ax,ax
c00152c8:	8b 82 0a 05 00 00    	mov    eax,DWORD PTR [edx+0x50a]
c00152ce:	66 90                	xchg   ax,ax
c00152d0:	0f b7 88 04 05 00 00 	movzx  ecx,WORD PTR [eax+0x504]
c00152d7:	0f a3 d9             	bt     ecx,ebx
c00152da:	73 e0                	jae    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00152dc:	6b cb 5f             	imul   ecx,ebx,0x5f
c00152df:	01 c8                	add    eax,ecx
c00152e1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00152e7:	83 fd 07             	cmp    ebp,0x7
c00152ea:	75 d0                	jne    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00152ec:	05 40 02 00 00       	add    eax,0x240
c00152f1:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00152f4:	83 fd ff             	cmp    ebp,0xffffffff
c00152f7:	0f 8c e7 00 00 00    	jl     c00153e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00152fd:	0f 84 a5 01 00 00    	je     c00154a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0015303:	85 ed                	test   ebp,ebp
c0015305:	0f 84 81 01 00 00    	je     c001548c <cleanupTerminatedTask(ThreadControlBlock*)+0x280>
c001530b:	3b 2a                	cmp    ebp,DWORD PTR [edx]
c001530d:	75 ad                	jne    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001530f:	8b 82 0a 05 00 00    	mov    eax,DWORD PTR [edx+0x50a]
c0015315:	01 c8                	add    eax,ecx
c0015317:	90                   	nop
c0015318:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001531c:	83 ec 0c             	sub    esp,0xc
c001531f:	43                   	inc    ebx
c0015320:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015326:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0015329:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001532f:	8d 84 08 0c 02 00 00 	lea    eax,[eax+ecx*1+0x20c]
c0015336:	50                   	push   eax
c0015337:	e8 2c fe ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c001533c:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	89 d7                	mov    edi,edx
c0015344:	83 fb 10             	cmp    ebx,0x10
c0015347:	0f 85 7b ff ff ff    	jne    c00152c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001534d:	8d 76 00             	lea    esi,[esi+0x0]
c0015350:	8b 82 06 05 00 00    	mov    eax,DWORD PTR [edx+0x506]
c0015356:	85 c0                	test   eax,eax
c0015358:	74 62                	je     c00153bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c001535a:	8b 92 0a 05 00 00    	mov    edx,DWORD PTR [edx+0x50a]
c0015360:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015366:	74 54                	je     c00153bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0015368:	83 ec 0c             	sub    esp,0xc
c001536b:	68 84 71 02 c0       	push   0xc0027184
c0015370:	e8 37 92 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015375:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001537c:	89 c7                	mov    edi,eax
c001537e:	e8 0d 92 00 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	84 c0                	test   al,al
c0015388:	0f 84 c6 00 00 00    	je     c0015454 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001538e:	66 90                	xchg   ax,ax
c0015390:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0015393:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015399:	85 d2                	test   edx,edx
c001539b:	74 0f                	je     c00153ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001539d:	83 ec 0c             	sub    esp,0xc
c00153a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00153a2:	52                   	push   edx
c00153a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153a6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00153b6:	8b 7e 3c             	mov    edi,DWORD PTR [esi+0x3c]
c00153b9:	8d 76 00             	lea    esi,[esi+0x0]
c00153bc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00153c2:	85 db                	test   ebx,ebx
c00153c4:	74 16                	je     c00153dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00153c6:	83 ec 0c             	sub    esp,0xc
c00153c9:	53                   	push   ebx
c00153ca:	e8 47 45 ff ff       	call   c0009916 <VAS::~VAS()>
c00153cf:	58                   	pop    eax
c00153d0:	5a                   	pop    edx
c00153d1:	6a 14                	push   0x14
c00153d3:	53                   	push   ebx
c00153d4:	e8 9b 51 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c00153d9:	83 c4 10             	add    esp,0x10
c00153dc:	83 c4 1c             	add    esp,0x1c
c00153df:	5b                   	pop    ebx
c00153e0:	5e                   	pop    esi
c00153e1:	5f                   	pop    edi
c00153e2:	5d                   	pop    ebp
c00153e3:	c3                   	ret    
c00153e4:	83 ec 0c             	sub    esp,0xc
c00153e7:	68 d4 0c 02 c0       	push   0xc0020cd4
c00153ec:	e8 cc b0 ff ff       	call   c00104bd <KePanic(char const*)>
c00153f1:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	89 d7                	mov    edi,edx
c00153f9:	e9 be fe ff ff       	jmp    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00153fe:	66 90                	xchg   ax,ax
c0015400:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015406:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001540c:	75 1e                	jne    c001542c <cleanupTerminatedTask(ThreadControlBlock*)+0x220>
c001540e:	83 ec 0c             	sub    esp,0xc
c0015411:	68 3c 0d 02 c0       	push   0xc0020d3c
c0015416:	e8 4e 52 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001541b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015422:	e8 89 fa ff ff       	call   c0014eb0 <blockTask(TaskState)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	66 90                	xchg   ax,ax
c001542c:	83 ec 08             	sub    esp,0x8
c001542f:	53                   	push   ebx
c0015430:	68 84 71 02 c0       	push   0xc0027184
c0015435:	e8 32 92 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001543a:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015441:	e8 66 91 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	39 f8                	cmp    eax,edi
c001544b:	0f 84 3f ff ff ff    	je     c0015390 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c0015451:	8d 76 00             	lea    esi,[esi+0x0]
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	68 84 71 02 c0       	push   0xc0027184
c001545c:	e8 4b 91 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015461:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015468:	89 c3                	mov    ebx,eax
c001546a:	e8 45 91 00 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	39 de                	cmp    esi,ebx
c0015474:	74 b6                	je     c001542c <cleanupTerminatedTask(ThreadControlBlock*)+0x220>
c0015476:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015479:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001547c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015482:	75 a8                	jne    c001542c <cleanupTerminatedTask(ThreadControlBlock*)+0x220>
c0015484:	e9 77 ff ff ff       	jmp    c0015400 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015489:	8d 76 00             	lea    esi,[esi+0x0]
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	68 08 0d 02 c0       	push   0xc0020d08
c0015494:	e8 24 b0 ff ff       	call   c00104bd <KePanic(char const*)>
c0015499:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001549c:	83 c4 10             	add    esp,0x10
c001549f:	89 d7                	mov    edi,edx
c00154a1:	e9 16 fe ff ff       	jmp    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00154a6:	66 90                	xchg   ax,ax
c00154a8:	8b 12                	mov    edx,DWORD PTR [edx]
c00154aa:	89 50 11             	mov    DWORD PTR [eax+0x11],edx
c00154ad:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00154b0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00154b6:	01 cf                	add    edi,ecx
c00154b8:	89 f8                	mov    eax,edi
c00154ba:	e9 59 fe ff ff       	jmp    c0015318 <cleanupTerminatedTask(ThreadControlBlock*)+0x10c>
c00154bf:	90                   	nop

c00154c0 <cleanerTaskFunction(void*)>:
c00154c0:	53                   	push   ebx
c00154c1:	83 ec 08             	sub    esp,0x8
c00154c4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154c9:	48                   	dec    eax
c00154ca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154cf:	75 03                	jne    c00154d4 <cleanerTaskFunction(void*)+0x14>
c00154d1:	fb                   	sti    
c00154d2:	66 90                	xchg   ax,ax
c00154d4:	fa                   	cli    
c00154d5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154da:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c00154e1:	8d 50 01             	lea    edx,[eax+0x1]
c00154e4:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00154ea:	0f 84 ac 00 00 00    	je     c001559c <cleanerTaskFunction(void*)+0xdc>
c00154f0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154f5:	85 c0                	test   eax,eax
c00154f7:	75 03                	jne    c00154fc <cleanerTaskFunction(void*)+0x3c>
c00154f9:	fb                   	sti    
c00154fa:	66 90                	xchg   ax,ax
c00154fc:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0015503:	fa                   	cli    
c0015504:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001550a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015510:	fa                   	cli    
c0015511:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015517:	eb 2b                	jmp    c0015544 <cleanerTaskFunction(void*)+0x84>
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	68 6c 71 02 c0       	push   0xc002716c
c0015524:	e8 83 90 00 00       	call   c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015529:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015530:	89 c3                	mov    ebx,eax
c0015532:	e8 7d 90 00 00       	call   c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015537:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001553a:	e8 cd fc ff ff       	call   c001520c <cleanupTerminatedTask(ThreadControlBlock*)>
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	66 90                	xchg   ax,ax
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	68 6c 71 02 c0       	push   0xc002716c
c001554c:	e8 3f 90 00 00       	call   c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	84 c0                	test   al,al
c0015556:	74 c4                	je     c001551c <cleanerTaskFunction(void*)+0x5c>
c0015558:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001555d:	48                   	dec    eax
c001555e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015563:	75 03                	jne    c0015568 <cleanerTaskFunction(void*)+0xa8>
c0015565:	fb                   	sti    
c0015566:	66 90                	xchg   ax,ax
c0015568:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001556d:	48                   	dec    eax
c001556e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015573:	0f 85 4b ff ff ff    	jne    c00154c4 <cleanerTaskFunction(void*)+0x4>
c0015579:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001557e:	85 c0                	test   eax,eax
c0015580:	0f 84 3e ff ff ff    	je     c00154c4 <cleanerTaskFunction(void*)+0x4>
c0015586:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015590:	e8 2b f7 ff ff       	call   c0014cc0 <schedule()>
c0015595:	e9 2a ff ff ff       	jmp    c00154c4 <cleanerTaskFunction(void*)+0x4>
c001559a:	66 90                	xchg   ax,ax
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	6a 02                	push   0x2
c00155a1:	e8 e2 f8 ff ff       	call   c0014e88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	e9 4e ff ff ff       	jmp    c00154fc <cleanerTaskFunction(void*)+0x3c>
c00155ae:	66 90                	xchg   ax,ax

c00155b0 <terminateTask(int)>:
c00155b0:	83 ec 14             	sub    esp,0x14
c00155b3:	fa                   	cli    
c00155b4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00155ba:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00155c0:	fa                   	cli    
c00155c1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00155c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00155cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00155d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00155db:	50                   	push   eax
c00155dc:	68 6c 71 02 c0       	push   0xc002716c
c00155e1:	e8 86 90 00 00       	call   c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00155f5:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c00155fa:	85 c0                	test   eax,eax
c00155fc:	74 5e                	je     c001565c <terminateTask(int)+0xac>
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0015608:	50                   	push   eax
c0015609:	e8 5a fb ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	8d 76 00             	lea    esi,[esi+0x0]
c0015614:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015619:	48                   	dec    eax
c001561a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001561f:	75 03                	jne    c0015624 <terminateTask(int)+0x74>
c0015621:	fb                   	sti    
c0015622:	66 90                	xchg   ax,ax
c0015624:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015629:	48                   	dec    eax
c001562a:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001562f:	75 0b                	jne    c001563c <terminateTask(int)+0x8c>
c0015631:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0015638:	75 36                	jne    c0015670 <terminateTask(int)+0xc0>
c001563a:	66 90                	xchg   ax,ax
c001563c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015641:	48                   	dec    eax
c0015642:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015647:	75 03                	jne    c001564c <terminateTask(int)+0x9c>
c0015649:	fb                   	sti    
c001564a:	66 90                	xchg   ax,ax
c001564c:	fa                   	cli    
c001564d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015653:	90                   	nop
c0015654:	e8 67 f6 ff ff       	call   c0014cc0 <schedule()>
c0015659:	eb e1                	jmp    c001563c <terminateTask(int)+0x8c>
c001565b:	90                   	nop
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	68 39 0c 02 c0       	push   0xc0020c39
c0015664:	e8 00 50 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	eb a6                	jmp    c0015614 <terminateTask(int)+0x64>
c001566e:	66 90                	xchg   ax,ax
c0015670:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001567a:	eb d8                	jmp    c0015654 <terminateTask(int)+0xa4>

c001567c <Thr::terminateFromIRQ(int)>:
c001567c:	83 ec 18             	sub    esp,0x18
c001567f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015683:	e8 28 ff ff ff       	call   c00155b0 <terminateTask(int)>

c0015688 <Semaphore::release()>:
c0015688:	83 ec 0c             	sub    esp,0xc
c001568b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001568f:	fa                   	cli    
c0015690:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015695:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001569b:	8d 48 01             	lea    ecx,[eax+0x1]
c001569e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00156a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00156a7:	85 c9                	test   ecx,ecx
c00156a9:	74 41                	je     c00156ec <Semaphore::release()+0x64>
c00156ab:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00156ae:	83 ec 0c             	sub    esp,0xc
c00156b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00156b4:	51                   	push   ecx
c00156b5:	e8 ae fa ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c00156ba:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00156bf:	83 c4 10             	add    esp,0x10
c00156c2:	48                   	dec    eax
c00156c3:	90                   	nop
c00156c4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00156c9:	85 c0                	test   eax,eax
c00156cb:	75 0b                	jne    c00156d8 <Semaphore::release()+0x50>
c00156cd:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00156d2:	85 c0                	test   eax,eax
c00156d4:	75 1e                	jne    c00156f4 <Semaphore::release()+0x6c>
c00156d6:	66 90                	xchg   ax,ax
c00156d8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00156dd:	48                   	dec    eax
c00156de:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00156e3:	75 03                	jne    c00156e8 <Semaphore::release()+0x60>
c00156e5:	fb                   	sti    
c00156e6:	66 90                	xchg   ax,ax
c00156e8:	83 c4 0c             	add    esp,0xc
c00156eb:	c3                   	ret    
c00156ec:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00156ef:	eb d3                	jmp    c00156c4 <Semaphore::release()+0x3c>
c00156f1:	8d 76 00             	lea    esi,[esi+0x0]
c00156f4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00156fe:	e8 bd f5 ff ff       	call   c0014cc0 <schedule()>
c0015703:	eb d3                	jmp    c00156d8 <Semaphore::release()+0x50>
c0015705:	8d 76 00             	lea    esi,[esi+0x0]

c0015708 <__static_initialization_and_destruction_0(int, int)>:
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015710:	0f 85 8e 00 00 00    	jne    c00157a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015716:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001571e:	0f 85 80 00 00 00    	jne    c00157a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	68 84 71 02 c0       	push   0xc0027184
c001572c:	e8 ef 91 00 00       	call   c001e920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015731:	83 c4 10             	add    esp,0x10
c0015734:	83 ec 04             	sub    esp,0x4
c0015737:	68 d0 18 02 c0       	push   0xc00218d0
c001573c:	68 84 71 02 c0       	push   0xc0027184
c0015741:	68 d0 e8 01 c0       	push   0xc001e8d0
c0015746:	e8 d9 4d ff ff       	call   c000a524 <__cxa_atexit>
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	83 ec 0c             	sub    esp,0xc
c0015751:	68 78 71 02 c0       	push   0xc0027178
c0015756:	e8 c5 91 00 00       	call   c001e920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001575b:	83 c4 10             	add    esp,0x10
c001575e:	83 ec 04             	sub    esp,0x4
c0015761:	68 d0 18 02 c0       	push   0xc00218d0
c0015766:	68 78 71 02 c0       	push   0xc0027178
c001576b:	68 d0 e8 01 c0       	push   0xc001e8d0
c0015770:	e8 af 4d ff ff       	call   c000a524 <__cxa_atexit>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	68 6c 71 02 c0       	push   0xc002716c
c0015780:	e8 9b 91 00 00       	call   c001e920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	83 ec 04             	sub    esp,0x4
c001578b:	68 d0 18 02 c0       	push   0xc00218d0
c0015790:	68 6c 71 02 c0       	push   0xc002716c
c0015795:	68 d0 e8 01 c0       	push   0xc001e8d0
c001579a:	e8 85 4d ff ff       	call   c000a524 <__cxa_atexit>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	66 90                	xchg   ax,ax
c00157a4:	90                   	nop
c00157a5:	83 c4 0c             	add    esp,0xc
c00157a8:	c3                   	ret    
c00157a9:	8d 76 00             	lea    esi,[esi+0x0]

c00157ac <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00157ac:	83 ec 0c             	sub    esp,0xc
c00157af:	83 ec 08             	sub    esp,0x8
c00157b2:	68 ff ff 00 00       	push   0xffff
c00157b7:	6a 01                	push   0x1
c00157b9:	e8 4a ff ff ff       	call   c0015708 <__static_initialization_and_destruction_0(int, int)>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	83 c4 0c             	add    esp,0xc
c00157c4:	c3                   	ret    

c00157c5 <Vm::inbv(unsigned short)>:
c00157c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00157c9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00157ce:	75 06                	jne    c00157d6 <Vm::inbv(unsigned short)+0x11>
c00157d0:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00157d5:	c3                   	ret    
c00157d6:	ec                   	in     al,dx
c00157d7:	c3                   	ret    

c00157d8 <Vm::outbv(unsigned short, unsigned char)>:
c00157d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00157dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00157e0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00157e5:	75 25                	jne    c001580c <Vm::outbv(unsigned short, unsigned char)+0x34>
c00157e7:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c00157ed:	8d 51 01             	lea    edx,[ecx+0x1]
c00157f0:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c00157f6:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c00157fc:	83 fa 20             	cmp    edx,0x20
c00157ff:	75 0c                	jne    c001580d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015801:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001580b:	c3                   	ret    
c001580c:	ee                   	out    dx,al
c001580d:	c3                   	ret    

c001580e <Vm::realToLinear(unsigned short, unsigned short)>:
c001580e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015813:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015818:	c1 e0 04             	shl    eax,0x4
c001581b:	01 d0                	add    eax,edx
c001581d:	c3                   	ret    

c001581e <Vm::getSegment(unsigned int)>:
c001581e:	b0 10                	mov    al,0x10
c0015820:	c4 e2 7b f7 44 24 04 	shrx   eax,DWORD PTR [esp+0x4],eax
c0015827:	c3                   	ret    

c0015828 <Vm::getOffset(unsigned int)>:
c0015828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001582c:	c3                   	ret    

c001582d <Vm::mainloop2()>:
c001582d:	83 ec 18             	sub    esp,0x18
c0015830:	fa                   	cli    
c0015831:	6a 02                	push   0x2
c0015833:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015839:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015840:	e8 43 f6 ff ff       	call   c0014e88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001584a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001584e:	52                   	push   edx
c001584f:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015853:	52                   	push   edx
c0015854:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015858:	52                   	push   edx
c0015859:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001585d:	50                   	push   eax
c001585e:	e8 ac a9 fe ff       	call   c000020f <goToVM86>
c0015863:	83 c4 2c             	add    esp,0x2c
c0015866:	c3                   	ret    

c0015867 <Vm::mainVm8086Loop(void*)>:
c0015867:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001586c:	48                   	dec    eax
c001586d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015872:	75 01                	jne    c0015875 <Vm::mainVm8086Loop(void*)+0xe>
c0015874:	fb                   	sti    
c0015875:	eb b6                	jmp    c001582d <Vm::mainloop2()>

c0015877 <Vm::mainloop3(unsigned long)>:
c0015877:	83 ec 18             	sub    esp,0x18
c001587a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001587e:	fa                   	cli    
c001587f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015885:	6a 02                	push   0x2
c0015887:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c001588e:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c0015893:	e8 f0 f5 ff ff       	call   c0014e88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015898:	83 c4 1c             	add    esp,0x1c
c001589b:	eb 90                	jmp    c001582d <Vm::mainloop2()>

c001589d <Vm::initialise8086()>:
c001589d:	83 ec 0c             	sub    esp,0xc
c00158a0:	68 80 00 00 00       	push   0x80
c00158a5:	6a 00                	push   0x0
c00158a7:	68 67 58 01 c0       	push   0xc0015867
c00158ac:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00158b2:	e8 e1 f1 ff ff       	call   c0014a98 <Process::createThread(void (*)(void*), void*, int)>
c00158b7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00158be:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c00158c3:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00158c8:	68 00 01 00 00       	push   0x100
c00158cd:	6a 00                	push   0x0
c00158cf:	6a 00                	push   0x0
c00158d1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00158d7:	e8 92 44 ff ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00158dc:	83 c4 2c             	add    esp,0x2c
c00158df:	c3                   	ret    

c00158e0 <Vm::finish8086()>:
c00158e0:	53                   	push   ebx
c00158e1:	83 ec 08             	sub    esp,0x8
c00158e4:	fa                   	cli    
c00158e5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00158eb:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c00158f2:	75 15                	jne    c0015909 <Vm::finish8086()+0x29>
c00158f4:	e8 c7 f3 ff ff       	call   c0014cc0 <schedule()>
c00158f9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158fe:	48                   	dec    eax
c00158ff:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015904:	75 de                	jne    c00158e4 <Vm::finish8086()+0x4>
c0015906:	fb                   	sti    
c0015907:	eb db                	jmp    c00158e4 <Vm::finish8086()+0x4>
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015912:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015918:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c001591f:	e8 44 f8 ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c0015924:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	8d 50 ff             	lea    edx,[eax-0x1]
c001592f:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015935:	85 d2                	test   edx,edx
c0015937:	75 01                	jne    c001593a <Vm::finish8086()+0x5a>
c0015939:	fb                   	sti    
c001593a:	83 c4 08             	add    esp,0x8
c001593d:	89 d8                	mov    eax,ebx
c001593f:	5b                   	pop    ebx
c0015940:	c3                   	ret    

c0015941 <Vm::getOutput8086(unsigned char*)>:
c0015941:	57                   	push   edi
c0015942:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015948:	56                   	push   esi
c0015949:	be e0 71 02 c0       	mov    esi,0xc00271e0
c001594e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015954:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c0015959:	5e                   	pop    esi
c001595a:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015964:	5f                   	pop    edi
c0015965:	c3                   	ret    

c0015966 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015966:	55                   	push   ebp
c0015967:	57                   	push   edi
c0015968:	56                   	push   esi
c0015969:	53                   	push   ebx
c001596a:	83 ec 0c             	sub    esp,0xc
c001596d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015971:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015975:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015979:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001597d:	fa                   	cli    
c001597e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015984:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c001598b:	75 15                	jne    c00159a2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001598d:	e8 2e f3 ff ff       	call   c0014cc0 <schedule()>
c0015992:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015997:	48                   	dec    eax
c0015998:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001599d:	75 de                	jne    c001597d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001599f:	fb                   	sti    
c00159a0:	eb db                	jmp    c001597d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00159a2:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00159a7:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00159b1:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00159b5:	0f b7 ff             	movzx  edi,di
c00159b8:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00159bc:	0f b7 f6             	movzx  esi,si
c00159bf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00159c3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00159c7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00159cb:	50                   	push   eax
c00159cc:	6a 20                	push   0x20
c00159ce:	6a 00                	push   0x0
c00159d0:	68 e0 71 02 c0       	push   0xc00271e0
c00159d5:	e8 a6 ab fe ff       	call   c0000580 <memset>
c00159da:	5a                   	pop    edx
c00159db:	59                   	pop    ecx
c00159dc:	57                   	push   edi
c00159dd:	56                   	push   esi
c00159de:	e8 2b fe ff ff       	call   c001580e <Vm::realToLinear(unsigned short, unsigned short)>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00159ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00159ee:	89 c7                	mov    edi,eax
c00159f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00159f2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00159f7:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00159fe:	48                   	dec    eax
c00159ff:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a04:	75 01                	jne    c0015a07 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015a06:	fb                   	sti    
c0015a07:	83 ec 0c             	sub    esp,0xc
c0015a0a:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015a10:	e8 53 f7 ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c0015a15:	83 c4 1c             	add    esp,0x1c
c0015a18:	b0 01                	mov    al,0x1
c0015a1a:	5b                   	pop    ebx
c0015a1b:	5e                   	pop    esi
c0015a1c:	5f                   	pop    edi
c0015a1d:	5d                   	pop    ebp
c0015a1e:	c3                   	ret    

c0015a1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015a1f:	55                   	push   ebp
c0015a20:	57                   	push   edi
c0015a21:	56                   	push   esi
c0015a22:	53                   	push   ebx
c0015a23:	83 ec 2c             	sub    esp,0x2c
c0015a26:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015a2a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015a2e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015a32:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015a36:	fa                   	cli    
c0015a37:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015a3e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015a44:	89 f0                	mov    eax,esi
c0015a46:	84 c0                	test   al,al
c0015a48:	75 1d                	jne    c0015a67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015a4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015a4e:	e8 6d f2 ff ff       	call   c0014cc0 <schedule()>
c0015a53:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015a58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a5c:	48                   	dec    eax
c0015a5d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a62:	75 d2                	jne    c0015a36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015a64:	fb                   	sti    
c0015a65:	eb cf                	jmp    c0015a36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015a67:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c0015a6c:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015a76:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015a7a:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015a7e:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015a82:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015a86:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015a8a:	50                   	push   eax
c0015a8b:	6a 20                	push   0x20
c0015a8d:	6a 00                	push   0x0
c0015a8f:	68 e0 71 02 c0       	push   0xc00271e0
c0015a94:	e8 e7 aa fe ff       	call   c0000580 <memset>
c0015a99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015aa0:	e8 d6 1d ff ff       	call   c000787b <malloc>
c0015aa5:	83 c4 0c             	add    esp,0xc
c0015aa8:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015aae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ab2:	89 c3                	mov    ebx,eax
c0015ab4:	50                   	push   eax
c0015ab5:	e8 18 51 ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	85 db                	test   ebx,ebx
c0015abf:	75 0a                	jne    c0015acb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	68 64 0d 02 c0       	push   0xc0020d64
c0015ac9:	eb 3e                	jmp    c0015b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015acb:	50                   	push   eax
c0015acc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015ad0:	50                   	push   eax
c0015ad1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ad5:	50                   	push   eax
c0015ad6:	53                   	push   ebx
c0015ad7:	e8 5c 54 ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015ae4:	74 0a                	je     c0015af0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	68 78 0d 02 c0       	push   0xc0020d78
c0015aee:	eb 19                	jmp    c0015b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015af0:	51                   	push   ecx
c0015af1:	51                   	push   ecx
c0015af2:	6a 01                	push   0x1
c0015af4:	53                   	push   ebx
c0015af5:	e8 92 51 ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	85 c0                	test   eax,eax
c0015aff:	74 24                	je     c0015b25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015b01:	83 ec 0c             	sub    esp,0xc
c0015b04:	68 91 0d 02 c0       	push   0xc0020d91
c0015b09:	e8 af a9 ff ff       	call   c00104bd <KePanic(char const*)>
c0015b0e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	48                   	dec    eax
c0015b17:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015b1c:	85 c0                	test   eax,eax
c0015b1e:	75 01                	jne    c0015b21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015b20:	fb                   	sti    
c0015b21:	31 f6                	xor    esi,esi
c0015b23:	eb 58                	jmp    c0015b7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015b25:	0f b7 ed             	movzx  ebp,bp
c0015b28:	0f b7 ff             	movzx  edi,di
c0015b2b:	50                   	push   eax
c0015b2c:	50                   	push   eax
c0015b2d:	55                   	push   ebp
c0015b2e:	57                   	push   edi
c0015b2f:	e8 da fc ff ff       	call   c001580e <Vm::realToLinear(unsigned short, unsigned short)>
c0015b34:	5a                   	pop    edx
c0015b35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015b37:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015b3b:	51                   	push   ecx
c0015b3c:	50                   	push   eax
c0015b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015b45:	53                   	push   ebx
c0015b46:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b49:	83 c4 14             	add    esp,0x14
c0015b4c:	53                   	push   ebx
c0015b4d:	e8 98 51 ff ff       	call   c000acea <File::close()>
c0015b52:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015b57:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	48                   	dec    eax
c0015b62:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015b67:	85 c0                	test   eax,eax
c0015b69:	75 01                	jne    c0015b6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0015b6b:	fb                   	sti    
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015b75:	e8 ee f5 ff ff       	call   c0015168 <unblockTask(ThreadControlBlock*)>
c0015b7a:	83 c4 10             	add    esp,0x10
c0015b7d:	83 c4 2c             	add    esp,0x2c
c0015b80:	89 f0                	mov    eax,esi
c0015b82:	5b                   	pop    ebx
c0015b83:	5e                   	pop    esi
c0015b84:	5f                   	pop    edi
c0015b85:	5d                   	pop    ebp
c0015b86:	c3                   	ret    

c0015b87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015b87:	57                   	push   edi
c0015b88:	56                   	push   esi
c0015b89:	53                   	push   ebx
c0015b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b96:	83 e8 06             	sub    eax,0x6
c0015b99:	0f b7 c0             	movzx  eax,ax
c0015b9c:	50                   	push   eax
c0015b9d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ba2:	50                   	push   eax
c0015ba3:	e8 66 fc ff ff       	call   c001580e <Vm::realToLinear(unsigned short, unsigned short)>
c0015ba8:	5a                   	pop    edx
c0015ba9:	5e                   	pop    esi
c0015baa:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015bad:	8d 56 fa             	lea    edx,[esi-0x6]
c0015bb0:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015bb3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015bb9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015bbc:	8d 56 02             	lea    edx,[esi+0x2]
c0015bbf:	66 89 10             	mov    WORD PTR [eax],dx
c0015bc2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015bc5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015bc9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015bcc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015bd0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015bd6:	89 d6                	mov    esi,edx
c0015bd8:	66 81 e6 ff fd       	and    si,0xfdff
c0015bdd:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015be1:	74 07                	je     c0015bea <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015be3:	89 d6                	mov    esi,edx
c0015be5:	66 81 ce 00 02       	or     si,0x200
c0015bea:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015bee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015bf7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015bff:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015c02:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015c0a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015c0d:	5b                   	pop    ebx
c0015c0e:	5e                   	pop    esi
c0015c0f:	5f                   	pop    edi
c0015c10:	c3                   	ret    

c0015c11 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015c11:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c16:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c1b:	c1 e0 04             	shl    eax,0x4
c0015c1e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015c21:	c3                   	ret    

c0015c22 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015c22:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c27:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c2c:	c1 e0 04             	shl    eax,0x4
c0015c2f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015c33:	c3                   	ret    

c0015c34 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015c34:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c39:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c3e:	c1 e0 04             	shl    eax,0x4
c0015c41:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015c44:	c3                   	ret    

c0015c45 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015c45:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c4a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c53:	c1 e0 04             	shl    eax,0x4
c0015c56:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015c59:	c3                   	ret    

c0015c5a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015c5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c68:	c1 e0 04             	shl    eax,0x4
c0015c6b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015c6f:	c3                   	ret    

c0015c70 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015c70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c7e:	c1 e0 04             	shl    eax,0x4
c0015c81:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015c84:	c3                   	ret    

c0015c85 <Vm::faultHandler(regs*)>:
c0015c85:	55                   	push   ebp
c0015c86:	57                   	push   edi
c0015c87:	56                   	push   esi
c0015c88:	53                   	push   ebx
c0015c89:	83 ec 2c             	sub    esp,0x2c
c0015c8c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015c90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c93:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015c97:	0f b7 f8             	movzx  edi,ax
c0015c9a:	0f b7 c0             	movzx  eax,ax
c0015c9d:	52                   	push   edx
c0015c9e:	50                   	push   eax
c0015c9f:	e8 6a fb ff ff       	call   c001580e <Vm::realToLinear(unsigned short, unsigned short)>
c0015ca4:	5a                   	pop    edx
c0015ca5:	59                   	pop    ecx
c0015ca6:	89 c1                	mov    ecx,eax
c0015ca8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015caf:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0015cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cb8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0015cbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015cbf:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0015cc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ccc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015cd0:	e8 39 fb ff ff       	call   c001580e <Vm::realToLinear(unsigned short, unsigned short)>
c0015cd5:	5e                   	pop    esi
c0015cd6:	5d                   	pop    ebp
c0015cd7:	be 06 00 00 00       	mov    esi,0x6
c0015cdc:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0015ce1:	31 ed                	xor    ebp,ebp
c0015ce3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015ce6:	80 fa 9d             	cmp    dl,0x9d
c0015ce9:	0f 84 2b 02 00 00    	je     c0015f1a <Vm::faultHandler(regs*)+0x295>
c0015cef:	0f 87 91 00 00 00    	ja     c0015d86 <Vm::faultHandler(regs*)+0x101>
c0015cf5:	80 fa 66             	cmp    dl,0x66
c0015cf8:	0f 84 98 01 00 00    	je     c0015e96 <Vm::faultHandler(regs*)+0x211>
c0015cfe:	77 47                	ja     c0015d47 <Vm::faultHandler(regs*)+0xc2>
c0015d00:	80 fa 36             	cmp    dl,0x36
c0015d03:	0f 84 80 01 00 00    	je     c0015e89 <Vm::faultHandler(regs*)+0x204>
c0015d09:	77 1a                	ja     c0015d25 <Vm::faultHandler(regs*)+0xa0>
c0015d0b:	80 fa 26             	cmp    dl,0x26
c0015d0e:	0f 84 4e 01 00 00    	je     c0015e62 <Vm::faultHandler(regs*)+0x1dd>
c0015d14:	80 fa 2e             	cmp    dl,0x2e
c0015d17:	0f 85 ee 05 00 00    	jne    c001630b <Vm::faultHandler(regs*)+0x686>
c0015d1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d20:	31 f6                	xor    esi,esi
c0015d22:	41                   	inc    ecx
c0015d23:	eb be                	jmp    c0015ce3 <Vm::faultHandler(regs*)+0x5e>
c0015d25:	80 fa 64             	cmp    dl,0x64
c0015d28:	0f 84 41 01 00 00    	je     c0015e6f <Vm::faultHandler(regs*)+0x1ea>
c0015d2e:	0f 87 48 01 00 00    	ja     c0015e7c <Vm::faultHandler(regs*)+0x1f7>
c0015d34:	80 fa 3e             	cmp    dl,0x3e
c0015d37:	0f 85 ce 05 00 00    	jne    c001630b <Vm::faultHandler(regs*)+0x686>
c0015d3d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d40:	be 01 00 00 00       	mov    esi,0x1
c0015d45:	eb db                	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015d47:	80 fa 6d             	cmp    dl,0x6d
c0015d4a:	0f 84 ea 02 00 00    	je     c001603a <Vm::faultHandler(regs*)+0x3b5>
c0015d50:	77 17                	ja     c0015d69 <Vm::faultHandler(regs*)+0xe4>
c0015d52:	80 fa 67             	cmp    dl,0x67
c0015d55:	0f 84 48 01 00 00    	je     c0015ea3 <Vm::faultHandler(regs*)+0x21e>
c0015d5b:	80 fa 6c             	cmp    dl,0x6c
c0015d5e:	0f 84 67 02 00 00    	je     c0015fcb <Vm::faultHandler(regs*)+0x346>
c0015d64:	e9 a2 05 00 00       	jmp    c001630b <Vm::faultHandler(regs*)+0x686>
c0015d69:	80 fa 6f             	cmp    dl,0x6f
c0015d6c:	0f 84 f6 03 00 00    	je     c0016168 <Vm::faultHandler(regs*)+0x4e3>
c0015d72:	0f 82 59 03 00 00    	jb     c00160d1 <Vm::faultHandler(regs*)+0x44c>
c0015d78:	80 fa 9c             	cmp    dl,0x9c
c0015d7b:	0f 84 2f 01 00 00    	je     c0015eb0 <Vm::faultHandler(regs*)+0x22b>
c0015d81:	e9 85 05 00 00       	jmp    c001630b <Vm::faultHandler(regs*)+0x686>
c0015d86:	80 fa ec             	cmp    dl,0xec
c0015d89:	0f 84 22 05 00 00    	je     c00162b1 <Vm::faultHandler(regs*)+0x62c>
c0015d8f:	77 7b                	ja     c0015e0c <Vm::faultHandler(regs*)+0x187>
c0015d91:	80 fa e4             	cmp    dl,0xe4
c0015d94:	0f 84 a3 04 00 00    	je     c001623d <Vm::faultHandler(regs*)+0x5b8>
c0015d9a:	77 53                	ja     c0015def <Vm::faultHandler(regs*)+0x16a>
c0015d9c:	80 fa cd             	cmp    dl,0xcd
c0015d9f:	0f 84 d7 01 00 00    	je     c0015f7c <Vm::faultHandler(regs*)+0x2f7>
c0015da5:	80 fa cf             	cmp    dl,0xcf
c0015da8:	0f 85 5d 05 00 00    	jne    c001630b <Vm::faultHandler(regs*)+0x686>
c0015dae:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015db1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015db4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015db8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015dbb:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015dbf:	81 ca 00 02 02 00    	or     edx,0x20200
c0015dc5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015dc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015dcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dd2:	66 c1 e8 09          	shr    ax,0x9
c0015dd6:	83 e0 01             	and    eax,0x1
c0015dd9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015ddc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015ddf:	83 c0 06             	add    eax,0x6
c0015de2:	25 ff ff 00 00       	and    eax,0xffff
c0015de7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015dea:	e9 18 05 00 00       	jmp    c0016307 <Vm::faultHandler(regs*)+0x682>
c0015def:	80 fa e6             	cmp    dl,0xe6
c0015df2:	0f 84 8e 04 00 00    	je     c0016286 <Vm::faultHandler(regs*)+0x601>
c0015df8:	0f 82 5b 04 00 00    	jb     c0016259 <Vm::faultHandler(regs*)+0x5d4>
c0015dfe:	80 fa e7             	cmp    dl,0xe7
c0015e01:	0f 84 96 04 00 00    	je     c001629d <Vm::faultHandler(regs*)+0x618>
c0015e07:	e9 ff 04 00 00       	jmp    c001630b <Vm::faultHandler(regs*)+0x686>
c0015e0c:	80 fa ef             	cmp    dl,0xef
c0015e0f:	0f 84 de 04 00 00    	je     c00162f3 <Vm::faultHandler(regs*)+0x66e>
c0015e15:	77 28                	ja     c0015e3f <Vm::faultHandler(regs*)+0x1ba>
c0015e17:	80 fa ed             	cmp    dl,0xed
c0015e1a:	0f 84 ad 04 00 00    	je     c00162cd <Vm::faultHandler(regs*)+0x648>
c0015e20:	80 fa ee             	cmp    dl,0xee
c0015e23:	0f 85 e2 04 00 00    	jne    c001630b <Vm::faultHandler(regs*)+0x686>
c0015e29:	50                   	push   eax
c0015e2a:	50                   	push   eax
c0015e2b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015e2f:	50                   	push   eax
c0015e30:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015e34:	50                   	push   eax
c0015e35:	e8 9e f9 ff ff       	call   c00157d8 <Vm::outbv(unsigned short, unsigned char)>
c0015e3a:	e9 ac 04 00 00       	jmp    c00162eb <Vm::faultHandler(regs*)+0x666>
c0015e3f:	80 fa fa             	cmp    dl,0xfa
c0015e42:	0f 84 67 01 00 00    	je     c0015faf <Vm::faultHandler(regs*)+0x32a>
c0015e48:	80 fa fb             	cmp    dl,0xfb
c0015e4b:	0f 84 6c 01 00 00    	je     c0015fbd <Vm::faultHandler(regs*)+0x338>
c0015e51:	80 fa f3             	cmp    dl,0xf3
c0015e54:	0f 85 b1 04 00 00    	jne    c001630b <Vm::faultHandler(regs*)+0x686>
c0015e5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e5d:	e9 c0 fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015e62:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e65:	be 02 00 00 00       	mov    esi,0x2
c0015e6a:	e9 b3 fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015e6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e72:	be 03 00 00 00       	mov    esi,0x3
c0015e77:	e9 a6 fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015e7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e7f:	be 04 00 00 00       	mov    esi,0x4
c0015e84:	e9 99 fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015e89:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e8c:	be 05 00 00 00       	mov    esi,0x5
c0015e91:	e9 8c fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015e96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e99:	bd 01 00 00 00       	mov    ebp,0x1
c0015e9e:	e9 7f fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015ea3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015ea6:	c6 44 24 0c 01       	mov    BYTE PTR [esp+0xc],0x1
c0015eab:	e9 72 fe ff ff       	jmp    c0015d22 <Vm::faultHandler(regs*)+0x9d>
c0015eb0:	89 e9                	mov    ecx,ebp
c0015eb2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015eb5:	84 c9                	test   cl,cl
c0015eb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ebb:	74 30                	je     c0015eed <Vm::faultHandler(regs*)+0x268>
c0015ebd:	83 e9 04             	sub    ecx,0x4
c0015ec0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015ec6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015ecc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015ecf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015ed2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ed8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015edc:	0f 84 22 04 00 00    	je     c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015ee2:	80 ce 02             	or     dh,0x2
c0015ee5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015ee8:	e9 17 04 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015eed:	83 e9 02             	sub    ecx,0x2
c0015ef0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015ef6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015ef9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015efd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f03:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015f07:	74 05                	je     c0015f0e <Vm::faultHandler(regs*)+0x289>
c0015f09:	80 ce 02             	or     dh,0x2
c0015f0c:	eb 03                	jmp    c0015f11 <Vm::faultHandler(regs*)+0x28c>
c0015f0e:	80 e6 fd             	and    dh,0xfd
c0015f11:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015f15:	e9 ea 03 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015f1a:	89 e9                	mov    ecx,ebp
c0015f1c:	84 c9                	test   cl,cl
c0015f1e:	74 2a                	je     c0015f4a <Vm::faultHandler(regs*)+0x2c5>
c0015f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f22:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015f28:	81 ca 00 02 02 00    	or     edx,0x20200
c0015f2e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f33:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f39:	c1 e8 09             	shr    eax,0x9
c0015f3c:	83 e0 01             	and    eax,0x1
c0015f3f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015f42:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015f45:	83 c0 04             	add    eax,0x4
c0015f48:	eb 25                	jmp    c0015f6f <Vm::faultHandler(regs*)+0x2ea>
c0015f4a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015f4d:	81 ca 00 02 02 00    	or     edx,0x20200
c0015f53:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015f56:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015f59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f5f:	66 c1 e8 09          	shr    ax,0x9
c0015f63:	83 e0 01             	and    eax,0x1
c0015f66:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015f69:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015f6c:	83 c0 02             	add    eax,0x2
c0015f6f:	25 ff ff 00 00       	and    eax,0xffff
c0015f74:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015f77:	e9 88 03 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015f7c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f80:	3c ee                	cmp    al,0xee
c0015f82:	75 10                	jne    c0015f94 <Vm::faultHandler(regs*)+0x30f>
c0015f84:	83 ec 0c             	sub    esp,0xc
c0015f87:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015f8a:	e8 e8 f8 ff ff       	call   c0015877 <Vm::mainloop3(unsigned long)>
c0015f8f:	e9 5a 03 00 00       	jmp    c00162ee <Vm::faultHandler(regs*)+0x669>
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015f9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f9f:	51                   	push   ecx
c0015fa0:	50                   	push   eax
c0015fa1:	53                   	push   ebx
c0015fa2:	e8 e0 fb ff ff       	call   c0015b87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015fa7:	83 c4 20             	add    esp,0x20
c0015faa:	e9 58 03 00 00       	jmp    c0016307 <Vm::faultHandler(regs*)+0x682>
c0015faf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015fb8:	e9 47 03 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015fbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015fc6:	e9 39 03 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0015fcb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015fd0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015fd3:	74 2b                	je     c0016000 <Vm::faultHandler(regs*)+0x37b>
c0015fd5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015fdc:	76 22                	jbe    c0016000 <Vm::faultHandler(regs*)+0x37b>
c0015fde:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015fe2:	50                   	push   eax
c0015fe3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015fe7:	50                   	push   eax
c0015fe8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015fec:	50                   	push   eax
c0015fed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015ff1:	50                   	push   eax
c0015ff2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015ff6:	50                   	push   eax
c0015ff7:	6a 6c                	push   0x6c
c0015ff9:	6a 6c                	push   0x6c
c0015ffb:	e9 bf 01 00 00       	jmp    c00161bf <Vm::faultHandler(regs*)+0x53a>
c0016000:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	0f b7 f6             	movzx  esi,si
c001600a:	50                   	push   eax
c001600b:	e8 b5 f7 ff ff       	call   c00157c5 <Vm::inbv(unsigned short)>
c0016010:	83 c4 0c             	add    esp,0xc
c0016013:	0f b6 c0             	movzx  eax,al
c0016016:	50                   	push   eax
c0016017:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001601b:	50                   	push   eax
c001601c:	56                   	push   esi
c001601d:	e8 23 fc ff ff       	call   c0015c45 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016022:	83 c4 10             	add    esp,0x10
c0016025:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016029:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001602c:	74 03                	je     c0016031 <Vm::faultHandler(regs*)+0x3ac>
c001602e:	48                   	dec    eax
c001602f:	eb 01                	jmp    c0016032 <Vm::faultHandler(regs*)+0x3ad>
c0016031:	40                   	inc    eax
c0016032:	0f b7 c0             	movzx  eax,ax
c0016035:	e9 8f 00 00 00       	jmp    c00160c9 <Vm::faultHandler(regs*)+0x444>
c001603a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001603f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016042:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016045:	74 29                	je     c0016070 <Vm::faultHandler(regs*)+0x3eb>
c0016047:	3d ff ff 00 00       	cmp    eax,0xffff
c001604c:	76 22                	jbe    c0016070 <Vm::faultHandler(regs*)+0x3eb>
c001604e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016052:	50                   	push   eax
c0016053:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016057:	50                   	push   eax
c0016058:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001605c:	50                   	push   eax
c001605d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016061:	50                   	push   eax
c0016062:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016066:	50                   	push   eax
c0016067:	6a 6d                	push   0x6d
c0016069:	6a 6d                	push   0x6d
c001606b:	e9 4f 01 00 00       	jmp    c00161bf <Vm::faultHandler(regs*)+0x53a>
c0016070:	0f b7 c8             	movzx  ecx,ax
c0016073:	89 e8                	mov    eax,ebp
c0016075:	0f b7 f6             	movzx  esi,si
c0016078:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001607b:	84 c0                	test   al,al
c001607d:	74 1e                	je     c001609d <Vm::faultHandler(regs*)+0x418>
c001607f:	ed                   	in     eax,dx
c0016080:	55                   	push   ebp
c0016081:	50                   	push   eax
c0016082:	51                   	push   ecx
c0016083:	56                   	push   esi
c0016084:	e8 e7 fb ff ff       	call   c0015c70 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016089:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001608c:	83 c4 10             	add    esp,0x10
c001608f:	8d 50 04             	lea    edx,[eax+0x4]
c0016092:	83 e8 04             	sub    eax,0x4
c0016095:	81 e2 ff ff 00 00    	and    edx,0xffff
c001609b:	eb 20                	jmp    c00160bd <Vm::faultHandler(regs*)+0x438>
c001609d:	66 ed                	in     ax,dx
c001609f:	0f b7 c0             	movzx  eax,ax
c00160a2:	57                   	push   edi
c00160a3:	50                   	push   eax
c00160a4:	51                   	push   ecx
c00160a5:	56                   	push   esi
c00160a6:	e8 af fb ff ff       	call   c0015c5a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00160ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	8d 50 02             	lea    edx,[eax+0x2]
c00160b4:	83 e8 02             	sub    eax,0x2
c00160b7:	81 e2 ff ff 00 00    	and    edx,0xffff
c00160bd:	25 ff ff 00 00       	and    eax,0xffff
c00160c2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00160c6:	0f 44 c2             	cmove  eax,edx
c00160c9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00160cc:	e9 33 02 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c00160d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00160d4:	3c 05                	cmp    al,0x5
c00160d6:	77 26                	ja     c00160fe <Vm::faultHandler(regs*)+0x479>
c00160d8:	0f b6 f0             	movzx  esi,al
c00160db:	ff 24 b5 04 0e 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdf1fc]
c00160e2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00160e7:	eb 15                	jmp    c00160fe <Vm::faultHandler(regs*)+0x479>
c00160e9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00160ed:	eb 0f                	jmp    c00160fe <Vm::faultHandler(regs*)+0x479>
c00160ef:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00160f3:	eb 09                	jmp    c00160fe <Vm::faultHandler(regs*)+0x479>
c00160f5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00160f9:	eb 03                	jmp    c00160fe <Vm::faultHandler(regs*)+0x479>
c00160fb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00160fe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016103:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016106:	74 29                	je     c0016131 <Vm::faultHandler(regs*)+0x4ac>
c0016108:	3d ff ff 00 00       	cmp    eax,0xffff
c001610d:	76 22                	jbe    c0016131 <Vm::faultHandler(regs*)+0x4ac>
c001610f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016113:	50                   	push   eax
c0016114:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016118:	50                   	push   eax
c0016119:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001611d:	50                   	push   eax
c001611e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016122:	50                   	push   eax
c0016123:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016127:	50                   	push   eax
c0016128:	6a 6e                	push   0x6e
c001612a:	6a 6e                	push   0x6e
c001612c:	e9 8e 00 00 00       	jmp    c00161bf <Vm::faultHandler(regs*)+0x53a>
c0016131:	0f b7 c0             	movzx  eax,ax
c0016134:	52                   	push   edx
c0016135:	52                   	push   edx
c0016136:	50                   	push   eax
c0016137:	57                   	push   edi
c0016138:	e8 d4 fa ff ff       	call   c0015c11 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001613d:	59                   	pop    ecx
c001613e:	5e                   	pop    esi
c001613f:	0f b6 c0             	movzx  eax,al
c0016142:	50                   	push   eax
c0016143:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016147:	50                   	push   eax
c0016148:	e8 8b f6 ff ff       	call   c00157d8 <Vm::outbv(unsigned short, unsigned char)>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016154:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016157:	74 03                	je     c001615c <Vm::faultHandler(regs*)+0x4d7>
c0016159:	48                   	dec    eax
c001615a:	eb 01                	jmp    c001615d <Vm::faultHandler(regs*)+0x4d8>
c001615c:	40                   	inc    eax
c001615d:	0f b7 c0             	movzx  eax,ax
c0016160:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016163:	e9 9c 01 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0016168:	8d 46 ff             	lea    eax,[esi-0x1]
c001616b:	3c 05                	cmp    al,0x5
c001616d:	77 21                	ja     c0016190 <Vm::faultHandler(regs*)+0x50b>
c001616f:	0f b6 f0             	movzx  esi,al
c0016172:	ff 24 b5 1c 0e 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdf1e4]
c0016179:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001617d:	eb 11                	jmp    c0016190 <Vm::faultHandler(regs*)+0x50b>
c001617f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016182:	eb 0c                	jmp    c0016190 <Vm::faultHandler(regs*)+0x50b>
c0016184:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016187:	eb 07                	jmp    c0016190 <Vm::faultHandler(regs*)+0x50b>
c0016189:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001618c:	eb 02                	jmp    c0016190 <Vm::faultHandler(regs*)+0x50b>
c001618e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016190:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016195:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016198:	74 37                	je     c00161d1 <Vm::faultHandler(regs*)+0x54c>
c001619a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00161a0:	76 2f                	jbe    c00161d1 <Vm::faultHandler(regs*)+0x54c>
c00161a2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00161a6:	50                   	push   eax
c00161a7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00161ab:	50                   	push   eax
c00161ac:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00161b0:	50                   	push   eax
c00161b1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00161b5:	50                   	push   eax
c00161b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00161ba:	50                   	push   eax
c00161bb:	6a 6f                	push   0x6f
c00161bd:	6a 6f                	push   0x6f
c00161bf:	68 aa 0d 02 c0       	push   0xc0020daa
c00161c4:	e8 a0 44 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00161c9:	83 c4 20             	add    esp,0x20
c00161cc:	e9 8e 01 00 00       	jmp    c001635f <Vm::faultHandler(regs*)+0x6da>
c00161d1:	0f b7 c6             	movzx  eax,si
c00161d4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00161d7:	0f b7 d7             	movzx  edx,di
c00161da:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00161dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161e1:	89 e8                	mov    eax,ebp
c00161e3:	81 e1 00 04 00 00    	and    ecx,0x400
c00161e9:	84 c0                	test   al,al
c00161eb:	74 1f                	je     c001620c <Vm::faultHandler(regs*)+0x587>
c00161ed:	50                   	push   eax
c00161ee:	50                   	push   eax
c00161ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161f3:	52                   	push   edx
c00161f4:	e8 3b fa ff ff       	call   c0015c34 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	89 fa                	mov    edx,edi
c00161fe:	ef                   	out    dx,eax
c00161ff:	8d 46 04             	lea    eax,[esi+0x4]
c0016202:	83 ee 04             	sub    esi,0x4
c0016205:	25 ff ff 00 00       	and    eax,0xffff
c001620a:	eb 1e                	jmp    c001622a <Vm::faultHandler(regs*)+0x5a5>
c001620c:	55                   	push   ebp
c001620d:	55                   	push   ebp
c001620e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016212:	52                   	push   edx
c0016213:	e8 0a fa ff ff       	call   c0015c22 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016218:	83 c4 10             	add    esp,0x10
c001621b:	89 fa                	mov    edx,edi
c001621d:	66 ef                	out    dx,ax
c001621f:	8d 46 02             	lea    eax,[esi+0x2]
c0016222:	83 ee 02             	sub    esi,0x2
c0016225:	25 ff ff 00 00       	and    eax,0xffff
c001622a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016230:	85 c9                	test   ecx,ecx
c0016232:	0f 44 f0             	cmove  esi,eax
c0016235:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016238:	e9 c7 00 00 00       	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c001623d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016244:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016248:	83 ec 0c             	sub    esp,0xc
c001624b:	50                   	push   eax
c001624c:	e8 74 f5 ff ff       	call   c00157c5 <Vm::inbv(unsigned short)>
c0016251:	0f b6 c0             	movzx  eax,al
c0016254:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016257:	eb 3e                	jmp    c0016297 <Vm::faultHandler(regs*)+0x612>
c0016259:	89 e8                	mov    eax,ebp
c001625b:	84 c0                	test   al,al
c001625d:	74 07                	je     c0016266 <Vm::faultHandler(regs*)+0x5e1>
c001625f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016263:	ed                   	in     eax,dx
c0016264:	eb 14                	jmp    c001627a <Vm::faultHandler(regs*)+0x5f5>
c0016266:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016269:	66 31 f6             	xor    si,si
c001626c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001626f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016273:	66 ed                	in     ax,dx
c0016275:	0f b7 c0             	movzx  eax,ax
c0016278:	09 f0                	or     eax,esi
c001627a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001627d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016281:	e9 81 00 00 00       	jmp    c0016307 <Vm::faultHandler(regs*)+0x682>
c0016286:	52                   	push   edx
c0016287:	52                   	push   edx
c0016288:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001628c:	50                   	push   eax
c001628d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016291:	50                   	push   eax
c0016292:	e8 41 f5 ff ff       	call   c00157d8 <Vm::outbv(unsigned short, unsigned char)>
c0016297:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001629b:	eb 51                	jmp    c00162ee <Vm::faultHandler(regs*)+0x669>
c001629d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00162a1:	89 e9                	mov    ecx,ebp
c00162a3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00162a6:	84 c9                	test   cl,cl
c00162a8:	74 03                	je     c00162ad <Vm::faultHandler(regs*)+0x628>
c00162aa:	ef                   	out    dx,eax
c00162ab:	eb d0                	jmp    c001627d <Vm::faultHandler(regs*)+0x5f8>
c00162ad:	66 ef                	out    dx,ax
c00162af:	eb cc                	jmp    c001627d <Vm::faultHandler(regs*)+0x5f8>
c00162b1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	50                   	push   eax
c00162c0:	e8 00 f5 ff ff       	call   c00157c5 <Vm::inbv(unsigned short)>
c00162c5:	0f b6 c0             	movzx  eax,al
c00162c8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00162cb:	eb 1e                	jmp    c00162eb <Vm::faultHandler(regs*)+0x666>
c00162cd:	89 e8                	mov    eax,ebp
c00162cf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00162d2:	84 c0                	test   al,al
c00162d4:	74 03                	je     c00162d9 <Vm::faultHandler(regs*)+0x654>
c00162d6:	ed                   	in     eax,dx
c00162d7:	eb 0d                	jmp    c00162e6 <Vm::faultHandler(regs*)+0x661>
c00162d9:	66 ed                	in     ax,dx
c00162db:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00162de:	0f b7 c0             	movzx  eax,ax
c00162e1:	66 31 d2             	xor    dx,dx
c00162e4:	09 d0                	or     eax,edx
c00162e6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00162e9:	eb 19                	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c00162eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	eb 14                	jmp    c0016307 <Vm::faultHandler(regs*)+0x682>
c00162f3:	89 e9                	mov    ecx,ebp
c00162f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00162f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00162fb:	84 c9                	test   cl,cl
c00162fd:	74 03                	je     c0016302 <Vm::faultHandler(regs*)+0x67d>
c00162ff:	ef                   	out    dx,eax
c0016300:	eb 02                	jmp    c0016304 <Vm::faultHandler(regs*)+0x67f>
c0016302:	66 ef                	out    dx,ax
c0016304:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016307:	b0 01                	mov    al,0x1
c0016309:	eb 56                	jmp    c0016361 <Vm::faultHandler(regs*)+0x6dc>
c001630b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001630f:	50                   	push   eax
c0016310:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016314:	50                   	push   eax
c0016315:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016319:	50                   	push   eax
c001631a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001631e:	50                   	push   eax
c001631f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016323:	50                   	push   eax
c0016324:	52                   	push   edx
c0016325:	52                   	push   edx
c0016326:	68 d7 0d 02 c0       	push   0xc0020dd7
c001632b:	e8 39 43 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016330:	83 c4 20             	add    esp,0x20
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	6a 60                	push   0x60
c0016338:	e8 88 f4 ff ff       	call   c00157c5 <Vm::inbv(unsigned short)>
c001633d:	83 c4 10             	add    esp,0x10
c0016340:	3c 1c                	cmp    al,0x1c
c0016342:	74 04                	je     c0016348 <Vm::faultHandler(regs*)+0x6c3>
c0016344:	3c 5a                	cmp    al,0x5a
c0016346:	75 eb                	jne    c0016333 <Vm::faultHandler(regs*)+0x6ae>
c0016348:	3c 1c                	cmp    al,0x1c
c001634a:	74 04                	je     c0016350 <Vm::faultHandler(regs*)+0x6cb>
c001634c:	3c 5a                	cmp    al,0x5a
c001634e:	75 0f                	jne    c001635f <Vm::faultHandler(regs*)+0x6da>
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	6a 60                	push   0x60
c0016355:	e8 6b f4 ff ff       	call   c00157c5 <Vm::inbv(unsigned short)>
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	eb e9                	jmp    c0016348 <Vm::faultHandler(regs*)+0x6c3>
c001635f:	31 c0                	xor    eax,eax
c0016361:	83 c4 2c             	add    esp,0x2c
c0016364:	5b                   	pop    ebx
c0016365:	5e                   	pop    esi
c0016366:	5f                   	pop    edi
c0016367:	5d                   	pop    ebp
c0016368:	c3                   	ret    

c0016369 <noCopro(unsigned long)>:
c0016369:	c3                   	ret    

c001636a <nmiHandler(regs*, void*)>:
c001636a:	83 ec 0c             	sub    esp,0xc
c001636d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	50                   	push   eax
c0016376:	e8 27 0d ff ff       	call   c00070a2 <Computer::handleNMI()>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	90                   	nop
c001637f:	83 c4 0c             	add    esp,0xc
c0016382:	c3                   	ret    

c0016383 <doubleFault(regs*, void*)>:
c0016383:	55                   	push   ebp
c0016384:	89 e5                	mov    ebp,esp
c0016386:	83 ec 08             	sub    esp,0x8
c0016389:	83 ec 0c             	sub    esp,0xc
c001638c:	68 34 0e 02 c0       	push   0xc0020e34
c0016391:	e8 27 a1 ff ff       	call   c00104bd <KePanic(char const*)>
c0016396:	83 c4 10             	add    esp,0x10
c0016399:	90                   	nop
c001639a:	c9                   	leave  
c001639b:	c3                   	ret    

c001639c <displayDebugInfo(regs*)>:
c001639c:	83 ec 1c             	sub    esp,0x1c
c001639f:	0f 20 c0             	mov    eax,cr0
c00163a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163a6:	0f 20 d0             	mov    eax,cr2
c00163a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163ad:	0f 20 d8             	mov    eax,cr3
c00163b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163b4:	0f 20 e0             	mov    eax,cr4
c00163b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163be:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00163c1:	83 ec 08             	sub    esp,0x8
c00163c4:	50                   	push   eax
c00163c5:	68 50 0e 02 c0       	push   0xc0020e50
c00163ca:	e8 9a 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00163d9:	83 ec 08             	sub    esp,0x8
c00163dc:	50                   	push   eax
c00163dd:	68 41 0e 02 c0       	push   0xc0020e41
c00163e2:	e8 82 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00163e7:	83 c4 10             	add    esp,0x10
c00163ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ee:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00163f1:	83 ec 08             	sub    esp,0x8
c00163f4:	50                   	push   eax
c00163f5:	68 4c 0e 02 c0       	push   0xc0020e4c
c00163fa:	e8 6a 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016406:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016409:	83 ec 08             	sub    esp,0x8
c001640c:	50                   	push   eax
c001640d:	68 5b 0e 02 c0       	push   0xc0020e5b
c0016412:	e8 52 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016421:	83 ec 08             	sub    esp,0x8
c0016424:	50                   	push   eax
c0016425:	68 66 0e 02 c0       	push   0xc0020e66
c001642a:	e8 3a 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001642f:	83 c4 10             	add    esp,0x10
c0016432:	83 ec 08             	sub    esp,0x8
c0016435:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016439:	68 71 0e 02 c0       	push   0xc0020e71
c001643e:	e8 26 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	83 ec 08             	sub    esp,0x8
c0016449:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001644d:	68 7c 0e 02 c0       	push   0xc0020e7c
c0016452:	e8 12 42 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001645f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016465:	83 ec 0c             	sub    esp,0xc
c0016468:	50                   	push   eax
c0016469:	e8 bd 20 ff ff       	call   c000852b <setActiveTerminal(VgaText*)>
c001646e:	83 c4 10             	add    esp,0x10
c0016471:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016476:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001647c:	83 ec 08             	sub    esp,0x8
c001647f:	68 87 0e 02 c0       	push   0xc0020e87
c0016484:	50                   	push   eax
c0016485:	e8 d8 23 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c001648a:	83 c4 10             	add    esp,0x10
c001648d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016492:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016498:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001649c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	52                   	push   edx
c00164a3:	50                   	push   eax
c00164a4:	e8 73 23 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c00164a9:	83 c4 10             	add    esp,0x10
c00164ac:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164b7:	83 ec 08             	sub    esp,0x8
c00164ba:	68 95 0e 02 c0       	push   0xc0020e95
c00164bf:	50                   	push   eax
c00164c0:	e8 9d 23 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164d3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00164d8:	8b 12                	mov    edx,DWORD PTR [edx]
c00164da:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00164dd:	83 c2 0c             	add    edx,0xc
c00164e0:	83 ec 08             	sub    esp,0x8
c00164e3:	52                   	push   edx
c00164e4:	50                   	push   eax
c00164e5:	e8 78 23 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164f8:	83 ec 08             	sub    esp,0x8
c00164fb:	68 9e 0e 02 c0       	push   0xc0020e9e
c0016500:	50                   	push   eax
c0016501:	e8 5c 23 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001650e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016514:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016518:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001651b:	83 ec 08             	sub    esp,0x8
c001651e:	52                   	push   edx
c001651f:	50                   	push   eax
c0016520:	e8 f7 22 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001652d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016533:	83 ec 08             	sub    esp,0x8
c0016536:	68 a6 0e 02 c0       	push   0xc0020ea6
c001653b:	50                   	push   eax
c001653c:	e8 21 23 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016549:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001654f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016553:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016556:	83 ec 08             	sub    esp,0x8
c0016559:	52                   	push   edx
c001655a:	50                   	push   eax
c001655b:	e8 bc 22 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c0016560:	83 c4 10             	add    esp,0x10
c0016563:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016568:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001656e:	83 ec 08             	sub    esp,0x8
c0016571:	68 ae 0e 02 c0       	push   0xc0020eae
c0016576:	50                   	push   eax
c0016577:	e8 e6 22 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c001657c:	83 c4 10             	add    esp,0x10
c001657f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016584:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001658a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001658e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016591:	83 ec 08             	sub    esp,0x8
c0016594:	52                   	push   edx
c0016595:	50                   	push   eax
c0016596:	e8 81 22 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165a9:	83 ec 08             	sub    esp,0x8
c00165ac:	68 b6 0e 02 c0       	push   0xc0020eb6
c00165b1:	50                   	push   eax
c00165b2:	e8 ab 22 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c00165b7:	83 c4 10             	add    esp,0x10
c00165ba:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00165c9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00165cc:	83 ec 08             	sub    esp,0x8
c00165cf:	52                   	push   edx
c00165d0:	50                   	push   eax
c00165d1:	e8 46 22 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165e4:	83 ec 08             	sub    esp,0x8
c00165e7:	68 be 0e 02 c0       	push   0xc0020ebe
c00165ec:	50                   	push   eax
c00165ed:	e8 70 22 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c00165f2:	83 c4 10             	add    esp,0x10
c00165f5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016600:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016604:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016607:	83 ec 08             	sub    esp,0x8
c001660a:	52                   	push   edx
c001660b:	50                   	push   eax
c001660c:	e8 0b 22 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016619:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001661f:	83 ec 08             	sub    esp,0x8
c0016622:	68 c6 0e 02 c0       	push   0xc0020ec6
c0016627:	50                   	push   eax
c0016628:	e8 35 22 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016635:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001663b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001663f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016642:	83 ec 08             	sub    esp,0x8
c0016645:	52                   	push   edx
c0016646:	50                   	push   eax
c0016647:	e8 d0 21 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016654:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001665a:	83 ec 08             	sub    esp,0x8
c001665d:	68 ce 0e 02 c0       	push   0xc0020ece
c0016662:	50                   	push   eax
c0016663:	e8 fa 21 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016670:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016676:	83 ec 08             	sub    esp,0x8
c0016679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001667d:	50                   	push   eax
c001667e:	e8 99 21 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001668b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016691:	83 ec 08             	sub    esp,0x8
c0016694:	68 d7 0e 02 c0       	push   0xc0020ed7
c0016699:	50                   	push   eax
c001669a:	e8 c3 21 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c001669f:	83 c4 10             	add    esp,0x10
c00166a2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00166a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166ad:	83 ec 08             	sub    esp,0x8
c00166b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00166b4:	50                   	push   eax
c00166b5:	e8 62 21 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c00166ba:	83 c4 10             	add    esp,0x10
c00166bd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00166c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166c8:	83 ec 08             	sub    esp,0x8
c00166cb:	68 df 0e 02 c0       	push   0xc0020edf
c00166d0:	50                   	push   eax
c00166d1:	e8 8c 21 ff ff       	call   c0008862 <VgaText::puts(char const*)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00166de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166e4:	83 ec 08             	sub    esp,0x8
c00166e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00166eb:	50                   	push   eax
c00166ec:	e8 2b 21 ff ff       	call   c000881c <VgaText::putx(unsigned int)>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	fa                   	cli    
c00166f5:	f4                   	hlt    
c00166f6:	eb fe                	jmp    c00166f6 <displayDebugInfo(regs*)+0x35a>

c00166f8 <HalSystemIdle()>:
c00166f8:	83 ec 1c             	sub    esp,0x1c
c00166fb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016700:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016706:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001670c:	83 e0 04             	and    eax,0x4
c001670f:	84 c0                	test   al,al
c0016711:	0f 95 c0             	setne  al
c0016714:	84 c0                	test   al,al
c0016716:	74 4b                	je     c0016763 <HalSystemIdle()+0x6b>
c0016718:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001671d:	83 ec 08             	sub    esp,0x8
c0016720:	68 e1 00 00 00       	push   0xe1
c0016725:	50                   	push   eax
c0016726:	e8 8f 07 ff ff       	call   c0006eba <Computer::rdmsr(unsigned int)>
c001672b:	83 c4 10             	add    esp,0x10
c001672e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016732:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016736:	8b 0d b8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eb8
c001673c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016744:	83 e0 02             	and    eax,0x2
c0016747:	ba 00 00 00 00       	mov    edx,0x0
c001674c:	52                   	push   edx
c001674d:	50                   	push   eax
c001674e:	68 e1 00 00 00       	push   0xe1
c0016753:	51                   	push   ecx
c0016754:	e8 8d 07 ff ff       	call   c0006ee6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	e8 33 9a fe ff       	call   c0000194 <doTPAUSE>
c0016761:	eb 01                	jmp    c0016764 <HalSystemIdle()+0x6c>
c0016763:	f4                   	hlt    
c0016764:	90                   	nop
c0016765:	83 c4 1c             	add    esp,0x1c
c0016768:	c3                   	ret    

c0016769 <displayProgramFault(char const*)>:
c0016769:	83 ec 0c             	sub    esp,0xc
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016773:	e8 f1 3e ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016778:	83 c4 10             	add    esp,0x10
c001677b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016780:	8b 00                	mov    eax,DWORD PTR [eax]
c0016782:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016785:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001678b:	85 c0                	test   eax,eax
c001678d:	74 21                	je     c00167b0 <displayProgramFault(char const*)+0x47>
c001678f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016794:	8b 00                	mov    eax,DWORD PTR [eax]
c0016796:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016799:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001679f:	6a 04                	push   0x4
c00167a1:	6a 0f                	push   0xf
c00167a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167a7:	50                   	push   eax
c00167a8:	e8 27 21 ff ff       	call   c00088d4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	90                   	nop
c00167b1:	83 c4 0c             	add    esp,0xc
c00167b4:	c3                   	ret    

c00167b5 <gpFault(regs*, void*)>:
c00167b5:	83 ec 1c             	sub    esp,0x1c
c00167b8:	c7 05 10 72 02 c0 85 5c 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc0015c85
c00167c2:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00167c7:	85 c0                	test   eax,eax
c00167c9:	74 1c                	je     c00167e7 <gpFault(regs*, void*)+0x32>
c00167cb:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167d7:	ff d0                	call   eax
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00167e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00167e5:	75 2e                	jne    c0016815 <gpFault(regs*, void*)+0x60>
c00167e7:	83 ec 0c             	sub    esp,0xc
c00167ea:	68 e7 0e 02 c0       	push   0xc0020ee7
c00167ef:	e8 75 ff ff ff       	call   c0016769 <displayProgramFault(char const*)>
c00167f4:	83 c4 10             	add    esp,0x10
c00167f7:	83 ec 0c             	sub    esp,0xc
c00167fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167fe:	e8 99 fb ff ff       	call   c001639c <displayDebugInfo(regs*)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	83 ec 0c             	sub    esp,0xc
c0016809:	6a 00                	push   0x0
c001680b:	e8 6c ee ff ff       	call   c001567c <Thr::terminateFromIRQ(int)>
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	eb 01                	jmp    c0016816 <gpFault(regs*, void*)+0x61>
c0016815:	90                   	nop
c0016816:	83 c4 1c             	add    esp,0x1c
c0016819:	c3                   	ret    

c001681a <pgFault(regs*, void*)>:
c001681a:	83 ec 1c             	sub    esp,0x1c
c001681d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016821:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016824:	0f 20 d0             	mov    eax,cr2
c0016827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001682b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001682f:	83 ec 04             	sub    esp,0x4
c0016832:	52                   	push   edx
c0016833:	50                   	push   eax
c0016834:	68 c4 0f 02 c0       	push   0xc0020fc4
c0016839:	e8 2b 3e ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016846:	8b 00                	mov    eax,DWORD PTR [eax]
c0016848:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001684b:	8b 90 12 05 00 00    	mov    edx,DWORD PTR [eax+0x512]
c0016851:	0f 20 d0             	mov    eax,cr2
c0016854:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001685c:	83 ec 08             	sub    esp,0x8
c001685f:	50                   	push   eax
c0016860:	52                   	push   edx
c0016861:	e8 f0 39 ff ff       	call   c000a256 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	84 c0                	test   al,al
c001686b:	75 2e                	jne    c001689b <pgFault(regs*, void*)+0x81>
c001686d:	83 ec 0c             	sub    esp,0xc
c0016870:	68 00 0f 02 c0       	push   0xc0020f00
c0016875:	e8 ef fe ff ff       	call   c0016769 <displayProgramFault(char const*)>
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016884:	e8 13 fb ff ff       	call   c001639c <displayDebugInfo(regs*)>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	6a 00                	push   0x0
c0016891:	e8 e6 ed ff ff       	call   c001567c <Thr::terminateFromIRQ(int)>
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	eb 01                	jmp    c001689c <pgFault(regs*, void*)+0x82>
c001689b:	90                   	nop
c001689c:	83 c4 1c             	add    esp,0x1c
c001689f:	c3                   	ret    

c00168a0 <otherISRHandler(regs*, void*)>:
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	83 ec 0c             	sub    esp,0xc
c00168a6:	68 ec 0f 02 c0       	push   0xc0020fec
c00168ab:	e8 b9 fe ff ff       	call   c0016769 <displayProgramFault(char const*)>
c00168b0:	83 c4 10             	add    esp,0x10
c00168b3:	83 ec 0c             	sub    esp,0xc
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 dd fa ff ff       	call   c001639c <displayDebugInfo(regs*)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 ec 0c             	sub    esp,0xc
c00168c5:	6a 00                	push   0x0
c00168c7:	e8 b0 ed ff ff       	call   c001567c <Thr::terminateFromIRQ(int)>
c00168cc:	83 c4 10             	add    esp,0x10
c00168cf:	90                   	nop
c00168d0:	83 c4 0c             	add    esp,0xc
c00168d3:	c3                   	ret    

c00168d4 <opcodeFault(regs*, void*)>:
c00168d4:	55                   	push   ebp
c00168d5:	89 e5                	mov    ebp,esp
c00168d7:	83 ec 08             	sub    esp,0x8
c00168da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00168dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168e0:	83 ec 08             	sub    esp,0x8
c00168e3:	50                   	push   eax
c00168e4:	68 0b 0f 02 c0       	push   0xc0020f0b
c00168e9:	e8 7b 3d ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00168ee:	83 c4 10             	add    esp,0x10
c00168f1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00168f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016902:	84 c0                	test   al,al
c0016904:	74 21                	je     c0016927 <opcodeFault(regs*, void*)+0x53>
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	68 14 10 02 c0       	push   0xc0021014
c001690e:	e8 56 3d ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016919:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001691c:	8d 50 19             	lea    edx,[eax+0x19]
c001691f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016922:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016925:	eb 2b                	jmp    c0016952 <opcodeFault(regs*, void*)+0x7e>
c0016927:	83 ec 0c             	sub    esp,0xc
c001692a:	68 19 0f 02 c0       	push   0xc0020f19
c001692f:	e8 35 fe ff ff       	call   c0016769 <displayProgramFault(char const*)>
c0016934:	83 c4 10             	add    esp,0x10
c0016937:	83 ec 0c             	sub    esp,0xc
c001693a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001693d:	e8 5a fa ff ff       	call   c001639c <displayDebugInfo(regs*)>
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	6a 00                	push   0x0
c001694a:	e8 2d ed ff ff       	call   c001567c <Thr::terminateFromIRQ(int)>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	c9                   	leave  
c0016953:	c3                   	ret    

c0016954 <i386SaveCoprocessor(void*)>:
c0016954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016958:	83 c0 3f             	add    eax,0x3f
c001695b:	83 e0 c0             	and    eax,0xffffffc0
c001695e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016962:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c0016968 <i386LoadCoprocessor(void*)>:
c0016968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001696c:	83 c0 3f             	add    eax,0x3f
c001696f:	83 e0 c0             	and    eax,0xffffffc0
c0016972:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016976:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c001697c <x87EmulHandler(regs*, void*)>:
c001697c:	53                   	push   ebx
c001697d:	83 ec 08             	sub    esp,0x8
c0016980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016985:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016989:	74 10                	je     c001699b <x87EmulHandler(regs*, void*)+0x1f>
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	68 26 0f 02 c0       	push   0xc0020f26
c0016993:	e8 25 9b ff ff       	call   c00104bd <KePanic(char const*)>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	0f 20 c0             	mov    eax,cr0
c001699e:	a8 08                	test   al,0x8
c00169a0:	74 59                	je     c00169fb <x87EmulHandler(regs*, void*)+0x7f>
c00169a2:	0f 06                	clts   
c00169a4:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00169a9:	85 c0                	test   eax,eax
c00169ab:	74 0e                	je     c00169bb <x87EmulHandler(regs*, void*)+0x3f>
c00169ad:	83 ec 0c             	sub    esp,0xc
c00169b0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00169b3:	e8 9c ff ff ff       	call   c0016954 <i386SaveCoprocessor(void*)>
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00169c1:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00169c5:	75 12                	jne    c00169d9 <x87EmulHandler(regs*, void*)+0x5d>
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	68 40 02 00 00       	push   0x240
c00169cf:	e8 a7 0e ff ff       	call   c000787b <malloc>
c00169d4:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00169d7:	eb 10                	jmp    c00169e9 <x87EmulHandler(regs*, void*)+0x6d>
c00169d9:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00169de:	83 ec 0c             	sub    esp,0xc
c00169e1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00169e4:	e8 7f ff ff ff       	call   c0016968 <i386LoadCoprocessor(void*)>
c00169e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c00169f6:	83 c4 08             	add    esp,0x8
c00169f9:	5b                   	pop    ebx
c00169fa:	c3                   	ret    
c00169fb:	83 ec 0c             	sub    esp,0xc
c00169fe:	68 3a 0f 02 c0       	push   0xc0020f3a
c0016a03:	e8 61 3c ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016a08:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016a10:	83 c4 18             	add    esp,0x18
c0016a13:	5b                   	pop    ebx
c0016a14:	e9 63 ec ff ff       	jmp    c001567c <Thr::terminateFromIRQ(int)>

c0016a19 <HalInitialiseCoprocessor()>:
c0016a19:	83 ec 10             	sub    esp,0x10
c0016a1c:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c0016a26:	6a 00                	push   0x0
c0016a28:	68 7c 69 01 c0       	push   0xc001697c
c0016a2d:	6a 07                	push   0x7
c0016a2f:	e8 b8 55 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a34:	e8 77 6e 00 00       	call   c001d8b0 <avxDetect>
c0016a39:	83 c4 10             	add    esp,0x10
c0016a3c:	85 c0                	test   eax,eax
c0016a3e:	74 1c                	je     c0016a5c <HalInitialiseCoprocessor()+0x43>
c0016a40:	c7 05 0c 72 02 c0 da d8 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d8da
c0016a4a:	c7 05 08 72 02 c0 eb d8 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d8eb
c0016a54:	83 c4 0c             	add    esp,0xc
c0016a57:	e9 a0 6e 00 00       	jmp    c001d8fc <avxInit>
c0016a5c:	e8 df 71 00 00       	call   c001dc40 <absolutelyNoChanceInHell>
c0016a61:	85 c0                	test   eax,eax
c0016a63:	74 1c                	je     c0016a81 <HalInitialiseCoprocessor()+0x68>
c0016a65:	c7 05 0c 72 02 c0 58 dc 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001dc58
c0016a6f:	c7 05 08 72 02 c0 60 dc 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001dc60
c0016a79:	83 c4 0c             	add    esp,0xc
c0016a7c:	e9 e7 71 00 00       	jmp    c001dc68 <sseInit>
c0016a81:	e8 00 72 00 00       	call   c001dc86 <x87Detect>
c0016a86:	85 c0                	test   eax,eax
c0016a88:	74 1c                	je     c0016aa6 <HalInitialiseCoprocessor()+0x8d>
c0016a8a:	c7 05 0c 72 02 c0 a1 dc 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001dca1
c0016a94:	c7 05 08 72 02 c0 a8 dc 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001dca8
c0016a9e:	83 c4 0c             	add    esp,0xc
c0016aa1:	e9 09 72 00 00       	jmp    c001dcaf <x87Init>
c0016aa6:	c7 05 0c 72 02 c0 69 63 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc0016369
c0016ab0:	c7 05 08 72 02 c0 69 63 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc0016369
c0016aba:	0f 20 c0             	mov    eax,cr0
c0016abd:	83 c8 04             	or     eax,0x4
c0016ac0:	0f 22 c0             	mov    cr0,eax
c0016ac3:	83 c4 0c             	add    esp,0xc
c0016ac6:	c3                   	ret    

c0016ac7 <HalPanic(char const*)>:
c0016ac7:	53                   	push   ebx
c0016ac8:	83 ec 10             	sub    esp,0x10
c0016acb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016acf:	fa                   	cli    
c0016ad0:	53                   	push   ebx
c0016ad1:	68 50 0f 02 c0       	push   0xc0020f50
c0016ad6:	e8 8e 3b ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0016adb:	83 c4 0c             	add    esp,0xc
c0016ade:	6a 01                	push   0x1
c0016ae0:	6a 0f                	push   0xf
c0016ae2:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016ae8:	e8 8f 18 ff ff       	call   c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016aed:	58                   	pop    eax
c0016aee:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016af4:	e8 7d 1a ff ff       	call   c0008576 <VgaText::clearScreen()>
c0016af9:	5a                   	pop    edx
c0016afa:	59                   	pop    ecx
c0016afb:	68 2c f7 01 c0       	push   0xc001f72c
c0016b00:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b06:	e8 a9 18 ff ff       	call   c00083b4 <VgaText::setTitle(char*)>
c0016b0b:	83 c4 0c             	add    esp,0xc
c0016b0e:	6a 01                	push   0x1
c0016b10:	6a 0f                	push   0xf
c0016b12:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b18:	e8 5f 18 ff ff       	call   c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016b1d:	58                   	pop    eax
c0016b1e:	5a                   	pop    edx
c0016b1f:	68 69 0f 02 c0       	push   0xc0020f69
c0016b24:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b2a:	e8 33 1d ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016b2f:	83 c4 0c             	add    esp,0xc
c0016b32:	6a 0f                	push   0xf
c0016b34:	6a 01                	push   0x1
c0016b36:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b3c:	e8 3b 18 ff ff       	call   c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016b41:	59                   	pop    ecx
c0016b42:	58                   	pop    eax
c0016b43:	68 72 0f 02 c0       	push   0xc0020f72
c0016b48:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b4e:	e8 0f 1d ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016b53:	83 c4 0c             	add    esp,0xc
c0016b56:	6a 01                	push   0x1
c0016b58:	6a 0f                	push   0xf
c0016b5a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b60:	e8 17 18 ff ff       	call   c000837c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016b65:	58                   	pop    eax
c0016b66:	5a                   	pop    edx
c0016b67:	68 b6 0f 02 c0       	push   0xc0020fb6
c0016b6c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b72:	e8 eb 1c ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016b77:	59                   	pop    ecx
c0016b78:	58                   	pop    eax
c0016b79:	68 7f 0f 02 c0       	push   0xc0020f7f
c0016b7e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b84:	e8 d9 1c ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016b89:	58                   	pop    eax
c0016b8a:	5a                   	pop    edx
c0016b8b:	68 b9 0f 02 c0       	push   0xc0020fb9
c0016b90:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016b96:	e8 c7 1c ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016b9b:	59                   	pop    ecx
c0016b9c:	58                   	pop    eax
c0016b9d:	53                   	push   ebx
c0016b9e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016ba4:	e8 b9 1c ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016ba9:	58                   	pop    eax
c0016baa:	5a                   	pop    edx
c0016bab:	68 b6 0f 02 c0       	push   0xc0020fb6
c0016bb0:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016bb6:	e8 a7 1c ff ff       	call   c0008862 <VgaText::puts(char const*)>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	eb fe                	jmp    c0016bbe <HalPanic(char const*)+0xf7>

c0016bc0 <HalQueryPerformanceCounter()>:
c0016bc0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016bc5:	c5 f9 ef c0          	vpxor  xmm0,xmm0,xmm0
c0016bc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bcf:	f6 80 8c 11 00 00 02 	test   BYTE PTR [eax+0x118c],0x2
c0016bd6:	74 0c                	je     c0016be4 <HalQueryPerformanceCounter()+0x24>
c0016bd8:	0f 31                	rdtsc  
c0016bda:	c5 f9 6e c0          	vmovd  xmm0,eax
c0016bde:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0016be4:	c5 f9 7e c0          	vmovd  eax,xmm0
c0016be8:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0016bee:	c3                   	ret    

c0016bef <HalInitialise()>:
c0016bef:	53                   	push   ebx
c0016bf0:	83 ec 08             	sub    esp,0x8
c0016bf3:	e8 15 56 ff ff       	call   c000c20d <setupINTS()>
c0016bf8:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016bff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016c04:	75 07                	jne    c0016c0d <HalInitialise()+0x1e>
c0016c06:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016c0d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016c14:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c0016c1b:	e8 a0 02 00 00       	call   c0016ec0 <picOpen()>
c0016c20:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016c27:	74 0a                	je     c0016c33 <HalInitialise()+0x44>
c0016c29:	e8 e2 01 00 00       	call   c0016e10 <picDisable()>
c0016c2e:	e8 2d 66 00 00       	call   c001d260 <apicOpen()>
c0016c33:	50                   	push   eax
c0016c34:	bb 0f 00 00 00       	mov    ebx,0xf
c0016c39:	6a 00                	push   0x0
c0016c3b:	68 a0 68 01 c0       	push   0xc00168a0
c0016c40:	6a 00                	push   0x0
c0016c42:	e8 a5 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c47:	83 c4 0c             	add    esp,0xc
c0016c4a:	6a 00                	push   0x0
c0016c4c:	68 a0 68 01 c0       	push   0xc00168a0
c0016c51:	6a 01                	push   0x1
c0016c53:	e8 94 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c58:	83 c4 0c             	add    esp,0xc
c0016c5b:	6a 00                	push   0x0
c0016c5d:	68 6a 63 01 c0       	push   0xc001636a
c0016c62:	6a 02                	push   0x2
c0016c64:	e8 83 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c69:	83 c4 0c             	add    esp,0xc
c0016c6c:	6a 00                	push   0x0
c0016c6e:	68 a0 68 01 c0       	push   0xc00168a0
c0016c73:	6a 03                	push   0x3
c0016c75:	e8 72 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c7a:	83 c4 0c             	add    esp,0xc
c0016c7d:	6a 00                	push   0x0
c0016c7f:	68 a0 68 01 c0       	push   0xc00168a0
c0016c84:	6a 04                	push   0x4
c0016c86:	e8 61 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c8b:	83 c4 0c             	add    esp,0xc
c0016c8e:	6a 00                	push   0x0
c0016c90:	68 a0 68 01 c0       	push   0xc00168a0
c0016c95:	6a 05                	push   0x5
c0016c97:	e8 50 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c9c:	83 c4 0c             	add    esp,0xc
c0016c9f:	6a 00                	push   0x0
c0016ca1:	68 d4 68 01 c0       	push   0xc00168d4
c0016ca6:	6a 06                	push   0x6
c0016ca8:	e8 3f 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016cad:	83 c4 0c             	add    esp,0xc
c0016cb0:	6a 00                	push   0x0
c0016cb2:	68 83 63 01 c0       	push   0xc0016383
c0016cb7:	6a 08                	push   0x8
c0016cb9:	e8 2e 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016cbe:	83 c4 0c             	add    esp,0xc
c0016cc1:	6a 00                	push   0x0
c0016cc3:	68 a0 68 01 c0       	push   0xc00168a0
c0016cc8:	6a 09                	push   0x9
c0016cca:	e8 1d 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ccf:	83 c4 0c             	add    esp,0xc
c0016cd2:	6a 00                	push   0x0
c0016cd4:	68 a0 68 01 c0       	push   0xc00168a0
c0016cd9:	6a 0a                	push   0xa
c0016cdb:	e8 0c 53 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ce0:	83 c4 0c             	add    esp,0xc
c0016ce3:	6a 00                	push   0x0
c0016ce5:	68 a0 68 01 c0       	push   0xc00168a0
c0016cea:	6a 0b                	push   0xb
c0016cec:	e8 fb 52 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016cf1:	83 c4 0c             	add    esp,0xc
c0016cf4:	6a 00                	push   0x0
c0016cf6:	68 b5 67 01 c0       	push   0xc00167b5
c0016cfb:	6a 0d                	push   0xd
c0016cfd:	e8 ea 52 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d02:	83 c4 0c             	add    esp,0xc
c0016d05:	6a 00                	push   0x0
c0016d07:	68 1a 68 01 c0       	push   0xc001681a
c0016d0c:	6a 0e                	push   0xe
c0016d0e:	e8 d9 52 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	50                   	push   eax
c0016d17:	6a 00                	push   0x0
c0016d19:	68 a0 68 01 c0       	push   0xc00168a0
c0016d1e:	53                   	push   ebx
c0016d1f:	43                   	inc    ebx
c0016d20:	e8 c7 52 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	83 fb 1e             	cmp    ebx,0x1e
c0016d2b:	75 e9                	jne    c0016d16 <HalInitialise()+0x127>
c0016d2d:	50                   	push   eax
c0016d2e:	6a 00                	push   0x0
c0016d30:	68 d1 17 01 c0       	push   0xc00117d1
c0016d35:	6a 60                	push   0x60
c0016d37:	e8 b0 52 ff ff       	call   c000bfec <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d3c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016d41:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016d4b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016d52:	e8 24 0b ff ff       	call   c000787b <malloc>
c0016d57:	89 c3                	mov    ebx,eax
c0016d59:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d5c:	e8 27 09 00 00       	call   c0017688 <RTC::RTC()>
c0016d61:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016d6b:	5a                   	pop    edx
c0016d6c:	59                   	pop    ecx
c0016d6d:	53                   	push   ebx
c0016d6e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d74:	e8 3f 4d ff ff       	call   c000bab8 <Device::addChild(Device*)>
c0016d79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d7b:	6a 00                	push   0x0
c0016d7d:	6a 00                	push   0x0
c0016d7f:	6a 00                	push   0x0
c0016d81:	53                   	push   ebx
c0016d82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d85:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016d8a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016d90:	83 c4 28             	add    esp,0x28
c0016d93:	5b                   	pop    ebx
c0016d94:	c3                   	ret    

c0016d95 <HalMakeBeep(int)>:
c0016d95:	53                   	push   ebx
c0016d96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016d9a:	85 db                	test   ebx,ebx
c0016d9c:	75 07                	jne    c0016da5 <HalMakeBeep(int)+0x10>
c0016d9e:	e4 61                	in     al,0x61
c0016da0:	83 e0 fc             	and    eax,0xfffffffc
c0016da3:	eb 26                	jmp    c0016dcb <HalMakeBeep(int)+0x36>
c0016da5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016daa:	99                   	cdq    
c0016dab:	f7 fb                	idiv   ebx
c0016dad:	89 c1                	mov    ecx,eax
c0016daf:	b0 b6                	mov    al,0xb6
c0016db1:	e6 43                	out    0x43,al
c0016db3:	88 c8                	mov    al,cl
c0016db5:	e6 42                	out    0x42,al
c0016db7:	89 c8                	mov    eax,ecx
c0016db9:	c1 e8 08             	shr    eax,0x8
c0016dbc:	e6 42                	out    0x42,al
c0016dbe:	e4 61                	in     al,0x61
c0016dc0:	88 c2                	mov    dl,al
c0016dc2:	83 ca 03             	or     edx,0x3
c0016dc5:	38 c2                	cmp    dl,al
c0016dc7:	74 04                	je     c0016dcd <HalMakeBeep(int)+0x38>
c0016dc9:	88 d0                	mov    al,dl
c0016dcb:	e6 61                	out    0x61,al
c0016dcd:	5b                   	pop    ebx
c0016dce:	c3                   	ret    

c0016dcf <HalGetRand()>:
c0016dcf:	31 c0                	xor    eax,eax
c0016dd1:	c3                   	ret    

c0016dd2 <HalEndOfInterrupt(int)>:
c0016dd2:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016dd9:	74 23                	je     c0016dfe <HalEndOfInterrupt(int)+0x2c>
c0016ddb:	83 ec 14             	sub    esp,0x14
c0016dde:	6a 1b                	push   0x1b
c0016de0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016de6:	e8 cf 00 ff ff       	call   c0006eba <Computer::rdmsr(unsigned int)>
c0016deb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016df0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016dfa:	83 c4 1c             	add    esp,0x1c
c0016dfd:	c3                   	ret    
c0016dfe:	e9 51 02 00 00       	jmp    c0017054 <picEOI(int)>

c0016e03 <HalRestart()>:
c0016e03:	c3                   	ret    

c0016e04 <HalShutdown()>:
c0016e04:	c3                   	ret    

c0016e05 <HalSleep()>:
c0016e05:	c3                   	ret    
c0016e06:	66 90                	xchg   ax,ax

c0016e08 <picIoWait()>:
c0016e08:	eb 00                	jmp    c0016e0a <picIoWait()+0x2>
c0016e0a:	eb 00                	jmp    c0016e0c <picIoWait()+0x4>
c0016e0c:	90                   	nop
c0016e0d:	c3                   	ret    
c0016e0e:	66 90                	xchg   ax,ax

c0016e10 <picDisable()>:
c0016e10:	83 ec 10             	sub    esp,0x10
c0016e13:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016e1a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016e1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016e23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016e28:	ee                   	out    dx,al
c0016e29:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016e30:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016e35:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016e39:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016e3e:	ee                   	out    dx,al
c0016e3f:	90                   	nop
c0016e40:	83 c4 10             	add    esp,0x10
c0016e43:	c3                   	ret    

c0016e44 <picGetIRQReg(int)>:
c0016e44:	83 ec 10             	sub    esp,0x10
c0016e47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e4b:	0f b6 c0             	movzx  eax,al
c0016e4e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016e55:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016e59:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016e5d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016e62:	ee                   	out    dx,al
c0016e63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e67:	0f b6 c0             	movzx  eax,al
c0016e6a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016e71:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016e75:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016e79:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016e7e:	ee                   	out    dx,al
c0016e7f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016e86:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016e8b:	89 c2                	mov    edx,eax
c0016e8d:	ec                   	in     al,dx
c0016e8e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016e92:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016e96:	0f b6 c0             	movzx  eax,al
c0016e99:	c1 e0 08             	shl    eax,0x8
c0016e9c:	89 c1                	mov    ecx,eax
c0016e9e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016ea5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016eaa:	89 c2                	mov    edx,eax
c0016eac:	ec                   	in     al,dx
c0016ead:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016eb1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016eb5:	0f b6 c0             	movzx  eax,al
c0016eb8:	09 c8                	or     eax,ecx
c0016eba:	83 c4 10             	add    esp,0x10
c0016ebd:	c3                   	ret    
c0016ebe:	66 90                	xchg   ax,ax

c0016ec0 <picOpen()>:
c0016ec0:	83 ec 50             	sub    esp,0x50
c0016ec3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016eca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016ecf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016ed3:	66 8b 54 24 10       	mov    dx,WORD PTR [esp+0x10]
c0016ed8:	ee                   	out    dx,al
c0016ed9:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016ee0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016ee5:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016ee9:	66 8b 54 24 14       	mov    dx,WORD PTR [esp+0x14]
c0016eee:	ee                   	out    dx,al
c0016eef:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016ef7:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016eff:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016f06:	66 8b 44 24 18       	mov    ax,WORD PTR [esp+0x18]
c0016f0b:	89 c2                	mov    edx,eax
c0016f0d:	ec                   	in     al,dx
c0016f0e:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016f12:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016f16:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016f1a:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016f21:	66 8b 44 24 1c       	mov    ax,WORD PTR [esp+0x1c]
c0016f26:	89 c2                	mov    edx,eax
c0016f28:	ec                   	in     al,dx
c0016f29:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016f2d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016f31:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016f35:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016f3c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016f41:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016f45:	66 8b 54 24 20       	mov    dx,WORD PTR [esp+0x20]
c0016f4a:	ee                   	out    dx,al
c0016f4b:	e8 b8 fe ff ff       	call   c0016e08 <picIoWait()>
c0016f50:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016f57:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016f5c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f60:	66 8b 54 24 24       	mov    dx,WORD PTR [esp+0x24]
c0016f65:	ee                   	out    dx,al
c0016f66:	e8 9d fe ff ff       	call   c0016e08 <picIoWait()>
c0016f6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f6f:	0f b6 c0             	movzx  eax,al
c0016f72:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016f79:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016f7d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016f81:	66 8b 54 24 28       	mov    dx,WORD PTR [esp+0x28]
c0016f86:	ee                   	out    dx,al
c0016f87:	e8 7c fe ff ff       	call   c0016e08 <picIoWait()>
c0016f8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f90:	0f b6 c0             	movzx  eax,al
c0016f93:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016f9a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016f9e:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016fa2:	66 8b 54 24 2c       	mov    dx,WORD PTR [esp+0x2c]
c0016fa7:	ee                   	out    dx,al
c0016fa8:	e8 5b fe ff ff       	call   c0016e08 <picIoWait()>
c0016fad:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016fb4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016fb9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016fbd:	66 8b 54 24 30       	mov    dx,WORD PTR [esp+0x30]
c0016fc2:	ee                   	out    dx,al
c0016fc3:	e8 40 fe ff ff       	call   c0016e08 <picIoWait()>
c0016fc8:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016fcf:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016fd4:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016fd8:	66 8b 54 24 34       	mov    dx,WORD PTR [esp+0x34]
c0016fdd:	ee                   	out    dx,al
c0016fde:	e8 25 fe ff ff       	call   c0016e08 <picIoWait()>
c0016fe3:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016fea:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016fef:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016ff3:	66 8b 54 24 38       	mov    dx,WORD PTR [esp+0x38]
c0016ff8:	ee                   	out    dx,al
c0016ff9:	e8 0a fe ff ff       	call   c0016e08 <picIoWait()>
c0016ffe:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017005:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001700a:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001700e:	66 8b 54 24 3c       	mov    dx,WORD PTR [esp+0x3c]
c0017013:	ee                   	out    dx,al
c0017014:	e8 ef fd ff ff       	call   c0016e08 <picIoWait()>
c0017019:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001701e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017025:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017029:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001702d:	66 8b 54 24 40       	mov    dx,WORD PTR [esp+0x40]
c0017032:	ee                   	out    dx,al
c0017033:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017038:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001703f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017043:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017047:	66 8b 54 24 44       	mov    dx,WORD PTR [esp+0x44]
c001704c:	ee                   	out    dx,al
c001704d:	90                   	nop
c001704e:	83 c4 50             	add    esp,0x50
c0017051:	c3                   	ret    
c0017052:	66 90                	xchg   ax,ax

c0017054 <picEOI(int)>:
c0017054:	83 ec 10             	sub    esp,0x10
c0017057:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001705c:	75 1e                	jne    c001707c <picEOI(int)+0x28>
c001705e:	6a 0b                	push   0xb
c0017060:	e8 df fd ff ff       	call   c0016e44 <picGetIRQReg(int)>
c0017065:	83 c4 04             	add    esp,0x4
c0017068:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001706d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017072:	25 80 00 00 00       	and    eax,0x80
c0017077:	74 73                	je     c00170ec <picEOI(int)+0x98>
c0017079:	8d 76 00             	lea    esi,[esi+0x0]
c001707c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017081:	75 31                	jne    c00170b4 <picEOI(int)+0x60>
c0017083:	6a 0b                	push   0xb
c0017085:	e8 ba fd ff ff       	call   c0016e44 <picGetIRQReg(int)>
c001708a:	83 c4 04             	add    esp,0x4
c001708d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017092:	66 8b 44 24 0c       	mov    ax,WORD PTR [esp+0xc]
c0017097:	66 85 c0             	test   ax,ax
c001709a:	78 18                	js     c00170b4 <picEOI(int)+0x60>
c001709c:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00170a3:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00170a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00170ac:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00170b1:	ee                   	out    dx,al
c00170b2:	eb 3c                	jmp    c00170f0 <picEOI(int)+0x9c>
c00170b4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00170b9:	7e 19                	jle    c00170d4 <picEOI(int)+0x80>
c00170bb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00170c2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00170c7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00170cb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00170d0:	ee                   	out    dx,al
c00170d1:	8d 76 00             	lea    esi,[esi+0x0]
c00170d4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00170db:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00170e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00170e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00170e9:	ee                   	out    dx,al
c00170ea:	eb 04                	jmp    c00170f0 <picEOI(int)+0x9c>
c00170ec:	90                   	nop
c00170ed:	8d 76 00             	lea    esi,[esi+0x0]
c00170f0:	83 c4 10             	add    esp,0x10
c00170f3:	c3                   	ret    

c00170f4 <RTC::open(int, int, void*)>:
c00170f4:	31 c0                	xor    eax,eax
c00170f6:	c3                   	ret    
c00170f7:	90                   	nop

c00170f8 <RTC::close(int, int, void*)>:
c00170f8:	31 c0                	xor    eax,eax
c00170fa:	c3                   	ret    
c00170fb:	90                   	nop

c00170fc <RTC::timeInSecondsUTC()>:
c00170fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017100:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017106:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001710c:	c3                   	ret    
c001710d:	90                   	nop

c001710e <RTC::timeInDatetimeUTC()>:
c001710e:	53                   	push   ebx
c001710f:	83 ec 14             	sub    esp,0x14
c0017112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001711a:	8b 10                	mov    edx,DWORD PTR [eax]
c001711c:	50                   	push   eax
c001711d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017120:	83 c4 0c             	add    esp,0xc
c0017123:	52                   	push   edx
c0017124:	50                   	push   eax
c0017125:	53                   	push   ebx
c0017126:	e8 00 47 ff ff       	call   c000b82b <secondsToDatetime(unsigned long long)>
c001712b:	89 d8                	mov    eax,ebx
c001712d:	83 c4 14             	add    esp,0x14
c0017130:	5b                   	pop    ebx
c0017131:	c2 04 00             	ret    0x4

c0017134 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017134:	56                   	push   esi
c0017135:	53                   	push   ebx
c0017136:	83 ec 14             	sub    esp,0x14
c0017139:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001713d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001713f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017142:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017146:	52                   	push   edx
c0017147:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001714b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001714f:	50                   	push   eax
c0017150:	e8 d6 46 ff ff       	call   c000b82b <secondsToDatetime(unsigned long long)>
c0017155:	89 f0                	mov    eax,esi
c0017157:	c5 fa 7e 44 24 14    	vmovq  xmm0,QWORD PTR [esp+0x14]
c001715d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017161:	c5 f9 d6 44 24 30    	vmovq  QWORD PTR [esp+0x30],xmm0
c0017167:	83 c4 20             	add    esp,0x20
c001716a:	5b                   	pop    ebx
c001716b:	5e                   	pop    esi
c001716c:	ff e0                	jmp    eax

c001716e <RTC::~RTC()>:
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	ba 54 10 02 c0       	mov    edx,0xc0021054
c0017176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717a:	89 10                	mov    DWORD PTR [eax],edx
c001717c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	50                   	push   eax
c0017184:	e8 ff 43 ff ff       	call   c000b588 <Clock::~Clock()>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	90                   	nop
c001718d:	83 c4 0c             	add    esp,0xc
c0017190:	c3                   	ret    
c0017191:	90                   	nop

c0017192 <RTC::~RTC()>:
c0017192:	83 ec 0c             	sub    esp,0xc
c0017195:	83 ec 0c             	sub    esp,0xc
c0017198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001719c:	e8 cd ff ff ff       	call   c001716e <RTC::~RTC()>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	83 ec 08             	sub    esp,0x8
c00171a7:	68 60 01 00 00       	push   0x160
c00171ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b0:	e8 bf 33 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 c4 0c             	add    esp,0xc
c00171bb:	c3                   	ret    

c00171bc <RTC::get_update_in_progress_flag()>:
c00171bc:	83 ec 14             	sub    esp,0x14
c00171bf:	6a 0a                	push   0xa
c00171c1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171c7:	e8 a6 fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00171cc:	83 c4 1c             	add    esp,0x1c
c00171cf:	c0 e8 07             	shr    al,0x7
c00171d2:	c3                   	ret    
c00171d3:	90                   	nop

c00171d4 <RTC::completeRTCRefresh()>:
c00171d4:	55                   	push   ebp
c00171d5:	57                   	push   edi
c00171d6:	56                   	push   esi
c00171d7:	53                   	push   ebx
c00171d8:	83 ec 2c             	sub    esp,0x2c
c00171db:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c00171e1:	83 ec 0c             	sub    esp,0xc
c00171e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171e8:	e8 cf ff ff ff       	call   c00171bc <RTC::get_update_in_progress_flag()>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	84 c0                	test   al,al
c00171f2:	74 0e                	je     c0017202 <RTC::completeRTCRefresh()+0x2e>
c00171f4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00171fa:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0017200:	73 df                	jae    c00171e1 <RTC::completeRTCRefresh()+0xd>
c0017202:	55                   	push   ebp
c0017203:	55                   	push   ebp
c0017204:	6a 00                	push   0x0
c0017206:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001720c:	e8 61 fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017211:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017215:	58                   	pop    eax
c0017216:	5a                   	pop    edx
c0017217:	6a 02                	push   0x2
c0017219:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001721f:	e8 4e fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017224:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017228:	59                   	pop    ecx
c0017229:	5b                   	pop    ebx
c001722a:	6a 04                	push   0x4
c001722c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017232:	e8 3b fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017237:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001723b:	5e                   	pop    esi
c001723c:	5f                   	pop    edi
c001723d:	6a 07                	push   0x7
c001723f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017245:	e8 28 fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c001724a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001724e:	5d                   	pop    ebp
c001724f:	58                   	pop    eax
c0017250:	6a 08                	push   0x8
c0017252:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017258:	e8 15 fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c001725d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017261:	58                   	pop    eax
c0017262:	5a                   	pop    edx
c0017263:	6a 09                	push   0x9
c0017265:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001726b:	e8 02 fd fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	0f b6 e8             	movzx  ebp,al
c0017276:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c001727c:	83 ec 0c             	sub    esp,0xc
c001727f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017283:	e8 34 ff ff ff       	call   c00171bc <RTC::get_update_in_progress_flag()>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	84 c0                	test   al,al
c001728d:	74 0e                	je     c001729d <RTC::completeRTCRefresh()+0xc9>
c001728f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017295:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c001729b:	73 df                	jae    c001727c <RTC::completeRTCRefresh()+0xa8>
c001729d:	50                   	push   eax
c001729e:	50                   	push   eax
c001729f:	6a 00                	push   0x0
c00172a1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172a7:	e8 c6 fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00172ac:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00172b0:	58                   	pop    eax
c00172b1:	5a                   	pop    edx
c00172b2:	6a 02                	push   0x2
c00172b4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172ba:	e8 b3 fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00172bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00172c3:	59                   	pop    ecx
c00172c4:	5b                   	pop    ebx
c00172c5:	6a 04                	push   0x4
c00172c7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172cd:	e8 a0 fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00172d2:	5e                   	pop    esi
c00172d3:	5f                   	pop    edi
c00172d4:	6a 07                	push   0x7
c00172d6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172dc:	88 c3                	mov    bl,al
c00172de:	e8 8f fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00172e3:	89 c6                	mov    esi,eax
c00172e5:	58                   	pop    eax
c00172e6:	5a                   	pop    edx
c00172e7:	6a 08                	push   0x8
c00172e9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172ef:	e8 7e fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00172f4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00172f8:	59                   	pop    ecx
c00172f9:	5f                   	pop    edi
c00172fa:	6a 09                	push   0x9
c00172fc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017302:	e8 6b fc fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017307:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	0f b6 f8             	movzx  edi,al
c0017311:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0017315:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017319:	74 29                	je     c0017344 <RTC::completeRTCRefresh()+0x170>
c001731b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001731f:	89 fd                	mov    ebp,edi
c0017321:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0017325:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017329:	89 f0                	mov    eax,esi
c001732b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001732f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017333:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017337:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001733b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001733f:	e9 32 ff ff ff       	jmp    c0017276 <RTC::completeRTCRefresh()+0xa2>
c0017344:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017348:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c001734c:	75 cd                	jne    c001731b <RTC::completeRTCRefresh()+0x147>
c001734e:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0017352:	89 f1                	mov    ecx,esi
c0017354:	0f 94 c2             	sete   dl
c0017357:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001735b:	0f 94 c0             	sete   al
c001735e:	21 d0                	and    eax,edx
c0017360:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017364:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017368:	0f 94 c2             	sete   dl
c001736b:	84 d0                	test   al,dl
c001736d:	74 ac                	je     c001731b <RTC::completeRTCRefresh()+0x147>
c001736f:	39 fd                	cmp    ebp,edi
c0017371:	75 a8                	jne    c001731b <RTC::completeRTCRefresh()+0x147>
c0017373:	55                   	push   ebp
c0017374:	55                   	push   ebp
c0017375:	6a 0b                	push   0xb
c0017377:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001737d:	e8 f0 fb fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	89 c5                	mov    ebp,eax
c0017387:	a8 04                	test   al,0x4
c0017389:	75 7d                	jne    c0017408 <RTC::completeRTCRefresh()+0x234>
c001738b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001738f:	b1 0a                	mov    cl,0xa
c0017391:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0017395:	c1 ef 04             	shr    edi,0x4
c0017398:	6b ff 0a             	imul   edi,edi,0xa
c001739b:	c0 e8 04             	shr    al,0x4
c001739e:	83 e2 0f             	and    edx,0xf
c00173a1:	0f af c1             	imul   eax,ecx
c00173a4:	01 d0                	add    eax,edx
c00173a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00173aa:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00173ae:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173b2:	83 e2 0f             	and    edx,0xf
c00173b5:	c0 e8 04             	shr    al,0x4
c00173b8:	0f af c1             	imul   eax,ecx
c00173bb:	01 d0                	add    eax,edx
c00173bd:	88 da                	mov    dl,bl
c00173bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00173c3:	88 d8                	mov    al,bl
c00173c5:	83 e2 0f             	and    edx,0xf
c00173c8:	83 e3 80             	and    ebx,0xffffff80
c00173cb:	c0 e8 04             	shr    al,0x4
c00173ce:	83 e0 07             	and    eax,0x7
c00173d1:	0f af c1             	imul   eax,ecx
c00173d4:	01 d0                	add    eax,edx
c00173d6:	89 f2                	mov    edx,esi
c00173d8:	09 c3                	or     ebx,eax
c00173da:	89 f0                	mov    eax,esi
c00173dc:	83 e2 0f             	and    edx,0xf
c00173df:	c0 e8 04             	shr    al,0x4
c00173e2:	0f af c1             	imul   eax,ecx
c00173e5:	8d 34 02             	lea    esi,[edx+eax*1]
c00173e8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00173ec:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00173f0:	c0 e8 04             	shr    al,0x4
c00173f3:	83 e2 0f             	and    edx,0xf
c00173f6:	0f af c1             	imul   eax,ecx
c00173f9:	01 d0                	add    eax,edx
c00173fb:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00173ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017403:	83 e0 0f             	and    eax,0xf
c0017406:	01 c7                	add    edi,eax
c0017408:	83 e5 02             	and    ebp,0x2
c001740b:	75 14                	jne    c0017421 <RTC::completeRTCRefresh()+0x24d>
c001740d:	84 db                	test   bl,bl
c001740f:	79 10                	jns    c0017421 <RTC::completeRTCRefresh()+0x24d>
c0017411:	83 e3 7f             	and    ebx,0x7f
c0017414:	b9 18 00 00 00       	mov    ecx,0x18
c0017419:	8d 43 0c             	lea    eax,[ebx+0xc]
c001741c:	99                   	cdq    
c001741d:	f7 f9                	idiv   ecx
c001741f:	88 d3                	mov    bl,dl
c0017421:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0017427:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001742d:	77 06                	ja     c0017435 <RTC::completeRTCRefresh()+0x261>
c001742f:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0017435:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001743a:	31 d2                	xor    edx,edx
c001743c:	31 c0                	xor    eax,eax
c001743e:	c1 e5 10             	shl    ebp,0x10
c0017441:	89 d7                	mov    edi,edx
c0017443:	c1 e1 10             	shl    ecx,0x10
c0017446:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001744c:	09 cf                	or     edi,ecx
c001744e:	89 fa                	mov    edx,edi
c0017450:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0017454:	88 da                	mov    dl,bl
c0017456:	89 f3                	mov    ebx,esi
c0017458:	88 d8                	mov    al,bl
c001745a:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001745e:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0017462:	0f b7 c8             	movzx  ecx,ax
c0017465:	09 e9                	or     ecx,ebp
c0017467:	89 c8                	mov    eax,ecx
c0017469:	51                   	push   ecx
c001746a:	51                   	push   ecx
c001746b:	52                   	push   edx
c001746c:	50                   	push   eax
c001746d:	e8 22 42 ff ff       	call   c000b694 <datetimeToSeconds(datetime_t)>
c0017472:	c5 f9 6e c0          	vmovd  xmm0,eax
c0017476:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001747a:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0017480:	c5 f9 d6 80 58 01 00 00 	vmovq  QWORD PTR [eax+0x158],xmm0
c0017488:	83 c4 3c             	add    esp,0x3c
c001748b:	5b                   	pop    ebx
c001748c:	5e                   	pop    esi
c001748d:	5f                   	pop    edi
c001748e:	5d                   	pop    ebp
c001748f:	c3                   	ret    

c0017490 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017490:	55                   	push   ebp
c0017491:	bd 64 00 00 00       	mov    ebp,0x64
c0017496:	57                   	push   edi
c0017497:	56                   	push   esi
c0017498:	53                   	push   ebx
c0017499:	83 ec 30             	sub    esp,0x30
c001749c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00174a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00174a4:	6a 00                	push   0x0
c00174a6:	6a 00                	push   0x0
c00174a8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174ae:	e8 d1 fb fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174b3:	83 c4 0c             	add    esp,0xc
c00174b6:	6a 00                	push   0x0
c00174b8:	6a 02                	push   0x2
c00174ba:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174c0:	e8 bf fb fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174c5:	89 f8                	mov    eax,edi
c00174c7:	31 d2                	xor    edx,edx
c00174c9:	89 f9                	mov    ecx,edi
c00174cb:	0f b6 c4             	movzx  eax,ah
c00174ce:	c1 e9 10             	shr    ecx,0x10
c00174d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174d5:	89 f0                	mov    eax,esi
c00174d7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00174db:	89 f0                	mov    eax,esi
c00174dd:	0f b6 c4             	movzx  eax,ah
c00174e0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00174e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00174e8:	89 f0                	mov    eax,esi
c00174ea:	c1 e8 10             	shr    eax,0x10
c00174ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00174f1:	66 f7 f5             	div    bp
c00174f4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00174f9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00174fe:	59                   	pop    ecx
c00174ff:	5b                   	pop    ebx
c0017500:	6a 0b                	push   0xb
c0017502:	89 fb                	mov    ebx,edi
c0017504:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001750a:	e8 63 fa fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c001750f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001751b:	75 74                	jne    c0017591 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001751d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017521:	b2 0a                	mov    dl,0xa
c0017523:	0f b6 c1             	movzx  eax,cl
c0017526:	f6 f2                	div    dl
c0017528:	88 c3                	mov    bl,al
c001752a:	88 e0                	mov    al,ah
c001752c:	c1 e3 04             	shl    ebx,0x4
c001752f:	09 c3                	or     ebx,eax
c0017531:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017536:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001753a:	f6 f2                	div    dl
c001753c:	88 c1                	mov    cl,al
c001753e:	88 e0                	mov    al,ah
c0017540:	c1 e1 04             	shl    ecx,0x4
c0017543:	09 c1                	or     ecx,eax
c0017545:	89 f8                	mov    eax,edi
c0017547:	0f b6 c0             	movzx  eax,al
c001754a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001754e:	f6 f2                	div    dl
c0017550:	88 c3                	mov    bl,al
c0017552:	88 e0                	mov    al,ah
c0017554:	c1 e3 04             	shl    ebx,0x4
c0017557:	09 c3                	or     ebx,eax
c0017559:	89 f0                	mov    eax,esi
c001755b:	0f b6 c0             	movzx  eax,al
c001755e:	f6 f2                	div    dl
c0017560:	88 c1                	mov    cl,al
c0017562:	88 e0                	mov    al,ah
c0017564:	c1 e1 04             	shl    ecx,0x4
c0017567:	09 c1                	or     ecx,eax
c0017569:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001756e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0017572:	f6 f2                	div    dl
c0017574:	88 c1                	mov    cl,al
c0017576:	88 e0                	mov    al,ah
c0017578:	c1 e1 04             	shl    ecx,0x4
c001757b:	09 c1                	or     ecx,eax
c001757d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0017582:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017586:	f6 f2                	div    dl
c0017588:	89 c5                	mov    ebp,eax
c001758a:	88 e0                	mov    al,ah
c001758c:	c1 e5 04             	shl    ebp,0x4
c001758f:	09 c5                	or     ebp,eax
c0017591:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0017596:	75 17                	jne    c00175af <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017598:	80 fb 0b             	cmp    bl,0xb
c001759b:	76 0c                	jbe    c00175a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001759d:	80 eb 0c             	sub    bl,0xc
c00175a0:	75 02                	jne    c00175a4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00175a2:	b3 0c                	mov    bl,0xc
c00175a4:	83 cb 80             	or     ebx,0xffffff80
c00175a7:	eb 06                	jmp    c00175af <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00175a9:	84 db                	test   bl,bl
c00175ab:	75 02                	jne    c00175af <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00175ad:	b3 0c                	mov    bl,0xc
c00175af:	50                   	push   eax
c00175b0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00175b5:	0f b6 db             	movzx  ebx,bl
c00175b8:	50                   	push   eax
c00175b9:	6a 00                	push   0x0
c00175bb:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00175c1:	e8 be fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c00175c6:	83 c4 0c             	add    esp,0xc
c00175c9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00175ce:	50                   	push   eax
c00175cf:	6a 02                	push   0x2
c00175d1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00175d7:	e8 a8 fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c00175dc:	83 c4 0c             	add    esp,0xc
c00175df:	53                   	push   ebx
c00175e0:	6a 04                	push   0x4
c00175e2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00175e8:	e8 97 fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c00175ed:	83 c4 0c             	add    esp,0xc
c00175f0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00175f5:	50                   	push   eax
c00175f6:	6a 07                	push   0x7
c00175f8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00175fe:	e8 81 fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017603:	83 c4 0c             	add    esp,0xc
c0017606:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001760b:	50                   	push   eax
c001760c:	6a 08                	push   0x8
c001760e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017614:	e8 6b fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017619:	89 e8                	mov    eax,ebp
c001761b:	83 c4 0c             	add    esp,0xc
c001761e:	0f b6 e8             	movzx  ebp,al
c0017621:	55                   	push   ebp
c0017622:	6a 09                	push   0x9
c0017624:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001762a:	e8 55 fa fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c001762f:	5a                   	pop    edx
c0017630:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017634:	e8 9b fb ff ff       	call   c00171d4 <RTC::completeRTCRefresh()>
c0017639:	83 c4 3c             	add    esp,0x3c
c001763c:	b0 01                	mov    al,0x1
c001763e:	5b                   	pop    ebx
c001763f:	5e                   	pop    esi
c0017640:	5f                   	pop    edi
c0017641:	5d                   	pop    ebp
c0017642:	c3                   	ret    

c0017643 <rtcIRQHandler(regs*, void*)>:
c0017643:	53                   	push   ebx
c0017644:	83 ec 10             	sub    esp,0x10
c0017647:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001764b:	6a 0c                	push   0xc
c001764d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017653:	e8 1a f9 fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	84 c0                	test   al,al
c001765d:	79 24                	jns    c0017683 <rtcIRQHandler(regs*, void*)+0x40>
c001765f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017666:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001766d:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c0017674:	75 0d                	jne    c0017683 <rtcIRQHandler(regs*, void*)+0x40>
c0017676:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001767a:	83 c4 08             	add    esp,0x8
c001767d:	5b                   	pop    ebx
c001767e:	e9 51 fb ff ff       	jmp    c00171d4 <RTC::completeRTCRefresh()>
c0017683:	83 c4 08             	add    esp,0x8
c0017686:	5b                   	pop    ebx
c0017687:	c3                   	ret    

c0017688 <RTC::RTC()>:
c0017688:	83 ec 1c             	sub    esp,0x1c
c001768b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001768f:	83 ec 08             	sub    esp,0x8
c0017692:	68 37 10 02 c0       	push   0xc0021037
c0017697:	50                   	push   eax
c0017698:	e8 b5 3e ff ff       	call   c000b552 <Clock::Clock(char const*)>
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	ba 54 10 02 c0       	mov    edx,0xc0021054
c00176a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176a9:	89 10                	mov    DWORD PTR [eax],edx
c00176ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176af:	83 ec 0c             	sub    esp,0xc
c00176b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176b6:	6a 01                	push   0x1
c00176b8:	68 43 76 01 c0       	push   0xc0017643
c00176bd:	6a 08                	push   0x8
c00176bf:	50                   	push   eax
c00176c0:	e8 9f 43 ff ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00176c5:	83 c4 20             	add    esp,0x20
c00176c8:	89 c2                	mov    edx,eax
c00176ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00176d4:	fa                   	cli    
c00176d5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00176da:	40                   	inc    eax
c00176db:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00176e0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00176e5:	83 ec 08             	sub    esp,0x8
c00176e8:	6a 0b                	push   0xb
c00176ea:	50                   	push   eax
c00176eb:	e8 82 f8 fe ff       	call   c0006f72 <Computer::readCMOS(unsigned char)>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00176f7:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c00176fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017701:	83 c8 10             	or     eax,0x10
c0017704:	0f b6 c0             	movzx  eax,al
c0017707:	83 ec 04             	sub    esp,0x4
c001770a:	50                   	push   eax
c001770b:	6a 0b                	push   0xb
c001770d:	52                   	push   edx
c001770e:	e8 71 f9 fe ff       	call   c0007084 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001771d:	e8 b2 fa ff ff       	call   c00171d4 <RTC::completeRTCRefresh()>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001772a:	48                   	dec    eax
c001772b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0017730:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017735:	85 c0                	test   eax,eax
c0017737:	75 01                	jne    c001773a <RTC::RTC()+0xb2>
c0017739:	fb                   	sti    
c001773a:	90                   	nop
c001773b:	83 c4 1c             	add    esp,0x1c
c001773e:	c3                   	ret    
c001773f:	90                   	nop

c0017740 <HalConsoleScroll(int, int)>:
c0017740:	83 ec 10             	sub    esp,0x10
c0017743:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001774b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017753:	90                   	nop
c0017754:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017759:	0f 8f e1 00 00 00    	jg     c0017840 <HalConsoleScroll(int, int)+0x100>
c001775f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017767:	90                   	nop
c0017768:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017770:	0f 8f be 00 00 00    	jg     c0017834 <HalConsoleScroll(int, int)+0xf4>
c0017776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001777a:	89 d0                	mov    eax,edx
c001777c:	c1 e0 02             	shl    eax,0x2
c001777f:	01 d0                	add    eax,edx
c0017781:	c1 e0 05             	shl    eax,0x5
c0017784:	89 c2                	mov    edx,eax
c0017786:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001778a:	01 d0                	add    eax,edx
c001778c:	89 c2                	mov    edx,eax
c001778e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017792:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017795:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017799:	89 d0                	mov    eax,edx
c001779b:	c1 e0 02             	shl    eax,0x2
c001779e:	01 d0                	add    eax,edx
c00177a0:	c1 e0 05             	shl    eax,0x5
c00177a3:	89 c2                	mov    edx,eax
c00177a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177a9:	01 d0                	add    eax,edx
c00177ab:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00177b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177b5:	01 d0                	add    eax,edx
c00177b7:	8a 11                	mov    dl,BYTE PTR [ecx]
c00177b9:	88 10                	mov    BYTE PTR [eax],dl
c00177bb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00177c0:	75 66                	jne    c0017828 <HalConsoleScroll(int, int)+0xe8>
c00177c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177c6:	83 e0 01             	and    eax,0x1
c00177c9:	74 39                	je     c0017804 <HalConsoleScroll(int, int)+0xc4>
c00177cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177cf:	83 e0 0f             	and    eax,0xf
c00177d2:	88 c2                	mov    dl,al
c00177d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177d8:	c1 e0 04             	shl    eax,0x4
c00177db:	88 d1                	mov    cl,dl
c00177dd:	09 c1                	or     ecx,eax
c00177df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177e3:	89 d0                	mov    eax,edx
c00177e5:	c1 e0 02             	shl    eax,0x2
c00177e8:	01 d0                	add    eax,edx
c00177ea:	c1 e0 05             	shl    eax,0x5
c00177ed:	89 c2                	mov    edx,eax
c00177ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177f3:	01 d0                	add    eax,edx
c00177f5:	89 c2                	mov    edx,eax
c00177f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177fb:	01 d0                	add    eax,edx
c00177fd:	88 ca                	mov    dl,cl
c00177ff:	88 10                	mov    BYTE PTR [eax],dl
c0017801:	eb 25                	jmp    c0017828 <HalConsoleScroll(int, int)+0xe8>
c0017803:	90                   	nop
c0017804:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017808:	89 d0                	mov    eax,edx
c001780a:	c1 e0 02             	shl    eax,0x2
c001780d:	01 d0                	add    eax,edx
c001780f:	c1 e0 05             	shl    eax,0x5
c0017812:	89 c2                	mov    edx,eax
c0017814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017818:	01 d0                	add    eax,edx
c001781a:	89 c2                	mov    edx,eax
c001781c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017820:	01 d0                	add    eax,edx
c0017822:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017825:	8d 76 00             	lea    esi,[esi+0x0]
c0017828:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001782c:	e9 37 ff ff ff       	jmp    c0017768 <HalConsoleScroll(int, int)+0x28>
c0017831:	8d 76 00             	lea    esi,[esi+0x0]
c0017834:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017838:	e9 17 ff ff ff       	jmp    c0017754 <HalConsoleScroll(int, int)+0x14>
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	90                   	nop
c0017841:	83 c4 10             	add    esp,0x10
c0017844:	c3                   	ret    
c0017845:	8d 76 00             	lea    esi,[esi+0x0]

c0017848 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017848:	83 ec 14             	sub    esp,0x14
c001784b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001784f:	88 04 24             	mov    BYTE PTR [esp],al
c0017852:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017855:	0f b6 c0             	movzx  eax,al
c0017858:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001785c:	89 d1                	mov    ecx,edx
c001785e:	83 e1 0f             	and    ecx,0xf
c0017861:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017865:	c1 e2 04             	shl    edx,0x4
c0017868:	0f b6 d2             	movzx  edx,dl
c001786b:	09 ca                	or     edx,ecx
c001786d:	c1 e2 08             	shl    edx,0x8
c0017870:	09 d0                	or     eax,edx
c0017872:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017877:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001787f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017883:	89 d0                	mov    eax,edx
c0017885:	c1 e0 02             	shl    eax,0x2
c0017888:	01 d0                	add    eax,edx
c001788a:	c1 e0 04             	shl    eax,0x4
c001788d:	89 c2                	mov    edx,eax
c001788f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017893:	01 d0                	add    eax,edx
c0017895:	01 c0                	add    eax,eax
c0017897:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001789b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001789f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00178a4:	66 89 10             	mov    WORD PTR [eax],dx
c00178a7:	90                   	nop
c00178a8:	83 c4 14             	add    esp,0x14
c00178ab:	c3                   	ret    

c00178ac <HalConsoleCursorUpdate(int, int)>:
c00178ac:	83 ec 20             	sub    esp,0x20
c00178af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b3:	89 c2                	mov    edx,eax
c00178b5:	89 d0                	mov    eax,edx
c00178b7:	c1 e0 02             	shl    eax,0x2
c00178ba:	01 d0                	add    eax,edx
c00178bc:	c1 e0 04             	shl    eax,0x4
c00178bf:	89 c2                	mov    edx,eax
c00178c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178c5:	01 d0                	add    eax,edx
c00178c7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00178cc:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00178d3:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00178d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00178dc:	66 8b 54 24 10       	mov    dx,WORD PTR [esp+0x10]
c00178e1:	ee                   	out    dx,al
c00178e2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00178e7:	0f b6 c0             	movzx  eax,al
c00178ea:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00178f1:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00178f5:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00178f9:	66 8b 54 24 14       	mov    dx,WORD PTR [esp+0x14]
c00178fe:	ee                   	out    dx,al
c00178ff:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017906:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001790b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001790f:	66 8b 54 24 18       	mov    dx,WORD PTR [esp+0x18]
c0017914:	ee                   	out    dx,al
c0017915:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001791a:	66 c1 e8 08          	shr    ax,0x8
c001791e:	0f b6 c0             	movzx  eax,al
c0017921:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017928:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001792c:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017930:	66 8b 54 24 1c       	mov    dx,WORD PTR [esp+0x1c]
c0017935:	ee                   	out    dx,al
c0017936:	90                   	nop
c0017937:	83 c4 20             	add    esp,0x20
c001793a:	c3                   	ret    
c001793b:	90                   	nop

c001793c <FAT::getName()>:
c001793c:	b8 88 10 02 c0       	mov    eax,0xc0021088
c0017941:	c3                   	ret    
c0017942:	66 90                	xchg   ax,ax

c0017944 <FAT::tell(void*, unsigned long long*)>:
c0017944:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017949:	75 09                	jne    c0017954 <FAT::tell(void*, unsigned long long*)+0x10>
c001794b:	b8 04 00 00 00       	mov    eax,0x4
c0017950:	c3                   	ret    
c0017951:	8d 76 00             	lea    esi,[esi+0x0]
c0017954:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017959:	75 09                	jne    c0017964 <FAT::tell(void*, unsigned long long*)+0x20>
c001795b:	b8 04 00 00 00       	mov    eax,0x4
c0017960:	c3                   	ret    
c0017961:	8d 76 00             	lea    esi,[esi+0x0]
c0017964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017968:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001796b:	ba 00 00 00 00       	mov    edx,0x0
c0017970:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017974:	89 01                	mov    DWORD PTR [ecx],eax
c0017976:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017979:	b8 00 00 00 00       	mov    eax,0x0
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <FAT::stat(void*, unsigned long long*)>:
c0017980:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017985:	75 09                	jne    c0017990 <FAT::stat(void*, unsigned long long*)+0x10>
c0017987:	b8 04 00 00 00       	mov    eax,0x4
c001798c:	c3                   	ret    
c001798d:	8d 76 00             	lea    esi,[esi+0x0]
c0017990:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017995:	75 09                	jne    c00179a0 <FAT::stat(void*, unsigned long long*)+0x20>
c0017997:	b8 04 00 00 00       	mov    eax,0x4
c001799c:	c3                   	ret    
c001799d:	8d 76 00             	lea    esi,[esi+0x0]
c00179a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00179a7:	ba 00 00 00 00       	mov    edx,0x0
c00179ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00179b0:	89 01                	mov    DWORD PTR [ecx],eax
c00179b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179b5:	b8 00 00 00 00       	mov    eax,0x0
c00179ba:	c3                   	ret    
c00179bb:	90                   	nop

c00179bc <FAT::~FAT()>:
c00179bc:	83 ec 0c             	sub    esp,0xc
c00179bf:	ba d4 10 02 c0       	mov    edx,0xc00210d4
c00179c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c8:	89 10                	mov    DWORD PTR [eax],edx
c00179ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ce:	83 ec 0c             	sub    esp,0xc
c00179d1:	50                   	push   eax
c00179d2:	e8 cb 2f ff ff       	call   c000a9a2 <Filesystem::~Filesystem()>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	90                   	nop
c00179db:	83 c4 0c             	add    esp,0xc
c00179de:	c3                   	ret    
c00179df:	90                   	nop

c00179e0 <FAT::~FAT()>:
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	83 ec 0c             	sub    esp,0xc
c00179e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ea:	e8 cd ff ff ff       	call   c00179bc <FAT::~FAT()>
c00179ef:	83 c4 10             	add    esp,0x10
c00179f2:	83 ec 08             	sub    esp,0x8
c00179f5:	6a 08                	push   0x8
c00179f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179fb:	e8 74 2b ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	83 c4 0c             	add    esp,0xc
c0017a06:	c3                   	ret    
c0017a07:	90                   	nop

c0017a08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017a08:	83 ec 1c             	sub    esp,0x1c
c0017a0b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017a12:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017a17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a1b:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a22:	83 f8 ff             	cmp    eax,0xffffffff
c0017a25:	75 35                	jne    c0017a5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017a27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017a2b:	88 c2                	mov    dl,al
c0017a2d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a32:	01 d0                	add    eax,edx
c0017a34:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017a38:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017a3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a42:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017a49:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a52:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017a59:	eb 19                	jmp    c0017a74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017a5b:	90                   	nop
c0017a5c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017a60:	88 c2                	mov    dl,al
c0017a62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a66:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a6d:	01 d0                	add    eax,edx
c0017a6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017a73:	90                   	nop
c0017a74:	83 ec 04             	sub    esp,0x4
c0017a77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a7f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017a83:	50                   	push   eax
c0017a84:	e8 00 d4 fe ff       	call   c0004e89 <f_getlabel>
c0017a89:	83 c4 10             	add    esp,0x10
c0017a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017a95:	75 09                	jne    c0017aa0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017a97:	b8 00 00 00 00       	mov    eax,0x0
c0017a9c:	eb 0a                	jmp    c0017aa8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017a9e:	66 90                	xchg   ax,ax
c0017aa0:	b8 01 00 00 00       	mov    eax,0x1
c0017aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0017aa8:	83 c4 1c             	add    esp,0x1c
c0017aab:	c3                   	ret    

c0017aac <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017aac:	57                   	push   edi
c0017aad:	83 ec 58             	sub    esp,0x58
c0017ab0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017ab8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017abc:	b8 00 00 00 00       	mov    eax,0x0
c0017ac1:	b9 0f 00 00 00       	mov    ecx,0xf
c0017ac6:	fc                   	cld    
c0017ac7:	89 d7                	mov    edi,edx
c0017ac9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017acb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017acf:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0017ad9:	75 35                	jne    c0017b10 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017adb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017adf:	88 c2                	mov    dl,al
c0017ae1:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017ae6:	01 d0                	add    eax,edx
c0017ae8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017aec:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017af2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017af6:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017afd:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b02:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017b06:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017b0d:	eb 19                	jmp    c0017b28 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017b0f:	90                   	nop
c0017b10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017b14:	88 c2                	mov    dl,al
c0017b16:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017b1a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017b21:	01 d0                	add    eax,edx
c0017b23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017b27:	90                   	nop
c0017b28:	83 ec 08             	sub    esp,0x8
c0017b2b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017b2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b33:	50                   	push   eax
c0017b34:	e8 e7 8c fe ff       	call   c0000820 <strcat>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b43:	50                   	push   eax
c0017b44:	e8 95 d4 fe ff       	call   c0004fde <f_setlabel>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017b50:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017b55:	75 09                	jne    c0017b60 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017b57:	b8 00 00 00 00       	mov    eax,0x0
c0017b5c:	eb 0a                	jmp    c0017b68 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017b5e:	66 90                	xchg   ax,ax
c0017b60:	b8 01 00 00 00       	mov    eax,0x1
c0017b65:	8d 76 00             	lea    esi,[esi+0x0]
c0017b68:	83 c4 58             	add    esp,0x58
c0017b6b:	5f                   	pop    edi
c0017b6c:	c3                   	ret    
c0017b6d:	90                   	nop
c0017b6e:	66 90                	xchg   ax,ax

c0017b70 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017b70:	83 ec 2c             	sub    esp,0x2c
c0017b73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	68 ac 10 02 c0       	push   0xc00210ac
c0017b83:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b87:	e8 b4 8b fe ff       	call   c0000740 <strcmp>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	85 c0                	test   eax,eax
c0017b91:	0f 94 c0             	sete   al
c0017b94:	84 c0                	test   al,al
c0017b96:	74 10                	je     c0017ba8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017b98:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017ba0:	e9 b3 00 00 00       	jmp    c0017c58 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba8:	83 ec 08             	sub    esp,0x8
c0017bab:	68 9e 10 02 c0       	push   0xc002109e
c0017bb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017bb4:	e8 87 8b fe ff       	call   c0000740 <strcmp>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	85 c0                	test   eax,eax
c0017bbe:	0f 94 c0             	sete   al
c0017bc1:	84 c0                	test   al,al
c0017bc3:	74 0f                	je     c0017bd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017bc5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017bcd:	e9 86 00 00 00       	jmp    c0017c58 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017bd2:	66 90                	xchg   ax,ax
c0017bd4:	83 ec 08             	sub    esp,0x8
c0017bd7:	68 a4 10 02 c0       	push   0xc00210a4
c0017bdc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017be0:	e8 5b 8b fe ff       	call   c0000740 <strcmp>
c0017be5:	83 c4 10             	add    esp,0x10
c0017be8:	85 c0                	test   eax,eax
c0017bea:	0f 94 c0             	sete   al
c0017bed:	84 c0                	test   al,al
c0017bef:	74 0b                	je     c0017bfc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017bf1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017bf9:	eb 5d                	jmp    c0017c58 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017bfb:	90                   	nop
c0017bfc:	83 ec 08             	sub    esp,0x8
c0017bff:	68 bc ed 01 c0       	push   0xc001edbc
c0017c04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c08:	e8 33 8b fe ff       	call   c0000740 <strcmp>
c0017c0d:	83 c4 10             	add    esp,0x10
c0017c10:	85 c0                	test   eax,eax
c0017c12:	0f 94 c0             	sete   al
c0017c15:	84 c0                	test   al,al
c0017c17:	74 0b                	je     c0017c24 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017c19:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017c21:	eb 35                	jmp    c0017c58 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017c23:	90                   	nop
c0017c24:	83 ec 08             	sub    esp,0x8
c0017c27:	68 aa 10 02 c0       	push   0xc00210aa
c0017c2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c30:	e8 0b 8b fe ff       	call   c0000740 <strcmp>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	85 c0                	test   eax,eax
c0017c3a:	0f 94 c0             	sete   al
c0017c3d:	84 c0                	test   al,al
c0017c3f:	74 0b                	je     c0017c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017c41:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017c49:	eb 0d                	jmp    c0017c58 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017c4b:	90                   	nop
c0017c4c:	b8 08 00 00 00       	mov    eax,0x8
c0017c51:	e9 ea 00 00 00       	jmp    c0017d40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017c56:	66 90                	xchg   ax,ax
c0017c58:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017c5f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017c64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017c68:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017c6f:	83 f8 ff             	cmp    eax,0xffffffff
c0017c72:	75 34                	jne    c0017ca8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017c74:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017c78:	88 c2                	mov    dl,al
c0017c7a:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c7f:	01 d0                	add    eax,edx
c0017c81:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017c85:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017c8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017c8f:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017c96:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017c9f:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017ca6:	eb 18                	jmp    c0017cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017ca8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017cac:	88 c2                	mov    dl,al
c0017cae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cb2:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017cb9:	01 d0                	add    eax,edx
c0017cbb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017cbf:	90                   	nop
c0017cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cc4:	88 04 24             	mov    BYTE PTR [esp],al
c0017cc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ccf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017cd7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017cdc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	68 00 20 00 00       	push   0x2000
c0017cec:	e8 8a fb fe ff       	call   c000787b <malloc>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cf8:	68 00 20 00 00       	push   0x2000
c0017cfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017d05:	50                   	push   eax
c0017d06:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017d0a:	50                   	push   eax
c0017d0b:	e8 be d5 fe ff       	call   c00052ce <f_mkfs>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017d1c:	75 0a                	jne    c0017d28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017d1e:	b8 00 00 00 00       	mov    eax,0x0
c0017d23:	eb 1b                	jmp    c0017d40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017d25:	8d 76 00             	lea    esi,[esi+0x0]
c0017d28:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017d2d:	75 09                	jne    c0017d38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017d2f:	b8 09 00 00 00       	mov    eax,0x9
c0017d34:	eb 0a                	jmp    c0017d40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017d36:	66 90                	xchg   ax,ax
c0017d38:	b8 01 00 00 00       	mov    eax,0x1
c0017d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d40:	83 c4 2c             	add    esp,0x2c
c0017d43:	c3                   	ret    

c0017d44 <FAT::tryMount(LogicalDisk*, int)>:
c0017d44:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017d4a:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017d4f:	83 f8 14             	cmp    eax,0x14
c0017d52:	75 18                	jne    c0017d6c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017d54:	83 ec 0c             	sub    esp,0xc
c0017d57:	68 b0 10 02 c0       	push   0xc00210b0
c0017d5c:	e8 5c 87 ff ff       	call   c00104bd <KePanic(char const*)>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	b0 00                	mov    al,0x0
c0017d66:	e9 e9 01 00 00       	jmp    c0017f54 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017d6b:	90                   	nop
c0017d6c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017d73:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017d79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017d7f:	3d 00 02 00 00       	cmp    eax,0x200
c0017d84:	74 0a                	je     c0017d90 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017d86:	b0 00                	mov    al,0x0
c0017d88:	e9 c7 01 00 00       	jmp    c0017f54 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d90:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017d98:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017d9f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017da6:	83 f8 ff             	cmp    eax,0xffffffff
c0017da9:	74 09                	je     c0017db4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017dab:	b0 01                	mov    al,0x1
c0017dad:	e9 a2 01 00 00       	jmp    c0017f54 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017db2:	66 90                	xchg   ax,ax
c0017db4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017dbe:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017dc6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017dcd:	88 c2                	mov    dl,al
c0017dcf:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017dd4:	01 d0                	add    eax,edx
c0017dd6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017ddd:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017de3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017dea:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017df1:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017df6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017dfd:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	68 34 02 00 00       	push   0x234
c0017e0c:	e8 6a fa fe ff       	call   c000787b <malloc>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017e1b:	83 ec 04             	sub    esp,0x4
c0017e1e:	6a 00                	push   0x0
c0017e20:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017e27:	50                   	push   eax
c0017e28:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017e2f:	e8 d2 bc fe ff       	call   c0003b06 <f_mount>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017e3e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017e46:	74 1c                	je     c0017e64 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017e48:	83 ec 0c             	sub    esp,0xc
c0017e4b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017e52:	e8 44 fa fe ff       	call   c000789b <rfree>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	b0 00                	mov    al,0x0
c0017e5c:	e9 f3 00 00 00       	jmp    c0017f54 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017e61:	8d 76 00             	lea    esi,[esi+0x0]
c0017e64:	83 ec 04             	sub    esp,0x4
c0017e67:	68 00 01 00 00       	push   0x100
c0017e6c:	6a 00                	push   0x0
c0017e6e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017e75:	50                   	push   eax
c0017e76:	e8 05 87 fe ff       	call   c0000580 <memset>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	83 ec 08             	sub    esp,0x8
c0017e81:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017e88:	50                   	push   eax
c0017e89:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017e90:	50                   	push   eax
c0017e91:	e8 8a 89 fe ff       	call   c0000820 <strcat>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	83 ec 08             	sub    esp,0x8
c0017e9c:	68 be 10 02 c0       	push   0xc00210be
c0017ea1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017ea8:	50                   	push   eax
c0017ea9:	e8 72 89 fe ff       	call   c0000820 <strcat>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	83 ec 04             	sub    esp,0x4
c0017eb4:	6a 01                	push   0x1
c0017eb6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017ebd:	50                   	push   eax
c0017ebe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017ec2:	50                   	push   eax
c0017ec3:	e8 a0 bc fe ff       	call   c0003b68 <f_open>
c0017ec8:	83 c4 10             	add    esp,0x10
c0017ecb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017ed2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017ed9:	85 c0                	test   eax,eax
c0017edb:	74 0b                	je     c0017ee8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017edd:	78 31                	js     c0017f10 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017edf:	83 e8 04             	sub    eax,0x4
c0017ee2:	83 f8 01             	cmp    eax,0x1
c0017ee5:	77 29                	ja     c0017f10 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017ee7:	90                   	nop
c0017ee8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017ef7:	50                   	push   eax
c0017ef8:	e8 08 c4 fe ff       	call   c0004305 <f_close>
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	90                   	nop
c0017f01:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017f09:	74 41                	je     c0017f4c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017f0b:	eb 33                	jmp    c0017f40 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017f1a:	e8 7c f9 fe ff       	call   c000789b <rfree>
c0017f1f:	83 c4 10             	add    esp,0x10
c0017f22:	83 ec 04             	sub    esp,0x4
c0017f25:	6a 00                	push   0x0
c0017f27:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017f2e:	50                   	push   eax
c0017f2f:	6a 00                	push   0x0
c0017f31:	e8 d0 bb fe ff       	call   c0003b06 <f_mount>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	b0 00                	mov    al,0x0
c0017f3b:	eb 17                	jmp    c0017f54 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f40:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017f45:	40                   	inc    eax
c0017f46:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017f4b:	90                   	nop
c0017f4c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017f53:	90                   	nop
c0017f54:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017f5a:	c3                   	ret    
c0017f5b:	90                   	nop

c0017f5c <FAT::allocateSwapfile(char const*, int)>:
c0017f5c:	53                   	push   ebx
c0017f5d:	81 ec 38 04 00 00    	sub    esp,0x438
c0017f63:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017f6e:	83 ec 0c             	sub    esp,0xc
c0017f71:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017f78:	e8 fe f8 fe ff       	call   c000787b <malloc>
c0017f7d:	83 c4 10             	add    esp,0x10
c0017f80:	89 c3                	mov    ebx,eax
c0017f82:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017f87:	83 ec 04             	sub    esp,0x4
c0017f8a:	50                   	push   eax
c0017f8b:	ff b4 24 4c 04 00 00 	push   DWORD PTR [esp+0x44c]
c0017f92:	53                   	push   ebx
c0017f93:	e8 3a 2c ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	89 9c 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],ebx
c0017fa2:	83 ec 04             	sub    esp,0x4
c0017fa5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017fa9:	50                   	push   eax
c0017faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fae:	50                   	push   eax
c0017faf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017fb6:	e8 7d 2f ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0017fc5:	c1 e0 14             	shl    eax,0x14
c0017fc8:	99                   	cdq    
c0017fc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017fd1:	31 c8                	xor    eax,ecx
c0017fd3:	31 da                	xor    edx,ebx
c0017fd5:	09 d0                	or     eax,edx
c0017fd7:	0f 84 9b 00 00 00    	je     c0018078 <FAT::allocateSwapfile(char const*, int)+0x11c>
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017fe7:	e8 18 2e ff ff       	call   c000ae04 <File::unlink()>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	83 ec 08             	sub    esp,0x8
c0017ff2:	6a 12                	push   0x12
c0017ff4:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ffb:	e8 8c 2c ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001800a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018010:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018017:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c001801e:	c1 e0 14             	shl    eax,0x14
c0018021:	83 ec 04             	sub    esp,0x4
c0018024:	6a 01                	push   0x1
c0018026:	50                   	push   eax
c0018027:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001802e:	e8 3b d1 fe ff       	call   c000516e <f_expand>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001803d:	8b 00                	mov    eax,DWORD PTR [eax]
c001803f:	83 c0 10             	add    eax,0x10
c0018042:	8b 10                	mov    edx,DWORD PTR [eax]
c0018044:	83 ec 0c             	sub    esp,0xc
c0018047:	8d 44 24 24          	lea    eax,[esp+0x24]
c001804b:	50                   	push   eax
c001804c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0018050:	50                   	push   eax
c0018051:	6a 00                	push   0x0
c0018053:	68 00 04 00 00       	push   0x400
c0018058:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001805f:	ff d2                	call   edx
c0018061:	83 c4 20             	add    esp,0x20
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001806e:	e8 77 2c ff ff       	call   c000acea <File::close()>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	66 90                	xchg   ax,ax
c0018078:	83 ec 08             	sub    esp,0x8
c001807b:	6a 01                	push   0x1
c001807d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018084:	e8 03 2c ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018093:	8b 00                	mov    eax,DWORD PTR [eax]
c0018095:	83 c0 0c             	add    eax,0xc
c0018098:	8b 10                	mov    edx,DWORD PTR [eax]
c001809a:	83 ec 0c             	sub    esp,0xc
c001809d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00180a1:	50                   	push   eax
c00180a2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00180a6:	50                   	push   eax
c00180a7:	6a 00                	push   0x0
c00180a9:	6a 04                	push   0x4
c00180ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00180b2:	ff d2                	call   edx
c00180b4:	83 c4 20             	add    esp,0x20
c00180b7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00180be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00180c4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00180cb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00180d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00180d5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00180dc:	83 ec 0c             	sub    esp,0xc
c00180df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00180e6:	e8 ff 2b ff ff       	call   c000acea <File::close()>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	c5 f9 6e 84 24 24 04 00 00 	vmovd  xmm0,DWORD PTR [esp+0x424]
c00180f7:	c5 f9 7e c0          	vmovd  eax,xmm0
c00180fb:	c4 e3 79 16 c2 01    	vpextrd edx,xmm0,0x1
c0018101:	81 c4 38 04 00 00    	add    esp,0x438
c0018107:	5b                   	pop    ebx
c0018108:	c3                   	ret    
c0018109:	90                   	nop
c001810a:	66 90                	xchg   ax,ax

c001810c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001810c:	57                   	push   edi
c001810d:	56                   	push   esi
c001810e:	53                   	push   ebx
c001810f:	81 ec 50 02 00 00    	sub    esp,0x250
c0018115:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001811d:	74 0d                	je     c001812c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001811f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018127:	75 0f                	jne    c0018138 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018129:	8d 76 00             	lea    esi,[esi+0x0]
c001812c:	b8 04 00 00 00       	mov    eax,0x4
c0018131:	e9 36 01 00 00       	jmp    c001826c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018136:	66 90                	xchg   ax,ax
c0018138:	83 ec 08             	sub    esp,0x8
c001813b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018142:	50                   	push   eax
c0018143:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001814a:	e8 78 c4 fe ff       	call   c00045c7 <f_readdir>
c001814f:	83 c4 10             	add    esp,0x10
c0018152:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018159:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018160:	83 ec 0c             	sub    esp,0xc
c0018163:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001816a:	83 c0 16             	add    eax,0x16
c001816d:	50                   	push   eax
c001816e:	e8 3d 84 fe ff       	call   c00005b0 <strlen>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	ba 00 00 00 00       	mov    edx,0x0
c001817b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001817f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018183:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001818a:	0f b6 c0             	movzx  eax,al
c001818d:	83 e0 10             	and    eax,0x10
c0018190:	74 0a                	je     c001819c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018192:	b8 02 00 00 00       	mov    eax,0x2
c0018197:	eb 0b                	jmp    c00181a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018199:	8d 76 00             	lea    esi,[esi+0x0]
c001819c:	b8 01 00 00 00       	mov    eax,0x1
c00181a1:	8d 76 00             	lea    esi,[esi+0x0]
c00181a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181a8:	83 ec 08             	sub    esp,0x8
c00181ab:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00181b2:	83 c0 16             	add    eax,0x16
c00181b5:	50                   	push   eax
c00181b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00181ba:	83 c0 10             	add    eax,0x10
c00181bd:	50                   	push   eax
c00181be:	e8 bd 84 fe ff       	call   c0000680 <strcpy>
c00181c3:	83 c4 10             	add    esp,0x10
c00181c6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00181cd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00181d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181d8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00181df:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00181e6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00181ed:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00181f4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00181fb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018202:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018209:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018210:	89 c6                	mov    esi,eax
c0018212:	89 d7                	mov    edi,edx
c0018214:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018216:	89 c8                	mov    eax,ecx
c0018218:	89 fa                	mov    edx,edi
c001821a:	89 f3                	mov    ebx,esi
c001821c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018223:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001822a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018231:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018238:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001823e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018245:	84 c0                	test   al,al
c0018247:	75 07                	jne    c0018250 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0018249:	b8 07 00 00 00       	mov    eax,0x7
c001824e:	eb 1c                	jmp    c001826c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018250:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018257:	85 c0                	test   eax,eax
c0018259:	75 09                	jne    c0018264 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001825b:	b8 00 00 00 00       	mov    eax,0x0
c0018260:	eb 0a                	jmp    c001826c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018262:	66 90                	xchg   ax,ax
c0018264:	b8 01 00 00 00       	mov    eax,0x1
c0018269:	8d 76 00             	lea    esi,[esi+0x0]
c001826c:	81 c4 50 02 00 00    	add    esp,0x250
c0018272:	5b                   	pop    ebx
c0018273:	5e                   	pop    esi
c0018274:	5f                   	pop    edi
c0018275:	c3                   	ret    
c0018276:	66 90                	xchg   ax,ax

c0018278 <FAT::read(void*, unsigned long, void*, int*)>:
c0018278:	83 ec 1c             	sub    esp,0x1c
c001827b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018280:	74 0a                	je     c001828c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018282:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018287:	75 0b                	jne    c0018294 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018289:	8d 76 00             	lea    esi,[esi+0x0]
c001828c:	b8 04 00 00 00       	mov    eax,0x4
c0018291:	eb 41                	jmp    c00182d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018293:	90                   	nop
c0018294:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018298:	50                   	push   eax
c0018299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001829d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182a5:	e8 94 bb fe ff       	call   c0003e3e <f_read>
c00182aa:	83 c4 10             	add    esp,0x10
c00182ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182b5:	89 c2                	mov    edx,eax
c00182b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182bb:	89 10                	mov    DWORD PTR [eax],edx
c00182bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182c1:	85 c0                	test   eax,eax
c00182c3:	75 07                	jne    c00182cc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00182c5:	b8 00 00 00 00       	mov    eax,0x0
c00182ca:	eb 08                	jmp    c00182d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00182cc:	b8 01 00 00 00       	mov    eax,0x1
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	83 c4 1c             	add    esp,0x1c
c00182d7:	c3                   	ret    

c00182d8 <FAT::write(void*, unsigned long, void*, int*)>:
c00182d8:	83 ec 1c             	sub    esp,0x1c
c00182db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00182e0:	74 0a                	je     c00182ec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00182e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00182e7:	75 0b                	jne    c00182f4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00182e9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ec:	b8 04 00 00 00       	mov    eax,0x4
c00182f1:	eb 41                	jmp    c0018334 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00182f3:	90                   	nop
c00182f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182f8:	50                   	push   eax
c00182f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018301:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018305:	e8 10 bd fe ff       	call   c000401a <f_write>
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018311:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018315:	89 c2                	mov    edx,eax
c0018317:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831b:	89 10                	mov    DWORD PTR [eax],edx
c001831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018321:	85 c0                	test   eax,eax
c0018323:	75 07                	jne    c001832c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018325:	b8 00 00 00 00       	mov    eax,0x0
c001832a:	eb 08                	jmp    c0018334 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001832c:	b8 01 00 00 00       	mov    eax,0x1
c0018331:	8d 76 00             	lea    esi,[esi+0x0]
c0018334:	83 c4 1c             	add    esp,0x1c
c0018337:	c3                   	ret    

c0018338 <FAT::close(void*)>:
c0018338:	83 ec 1c             	sub    esp,0x1c
c001833b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018340:	75 0a                	jne    c001834c <FAT::close(void*)+0x14>
c0018342:	b8 04 00 00 00       	mov    eax,0x4
c0018347:	eb 3f                	jmp    c0018388 <FAT::close(void*)+0x50>
c0018349:	8d 76 00             	lea    esi,[esi+0x0]
c001834c:	83 ec 0c             	sub    esp,0xc
c001834f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018353:	e8 ad bf fe ff       	call   c0004305 <f_close>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001835f:	83 ec 0c             	sub    esp,0xc
c0018362:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018366:	e8 20 f5 fe ff       	call   c000788b <free>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018372:	85 c0                	test   eax,eax
c0018374:	75 0a                	jne    c0018380 <FAT::close(void*)+0x48>
c0018376:	b8 00 00 00 00       	mov    eax,0x0
c001837b:	eb 0b                	jmp    c0018388 <FAT::close(void*)+0x50>
c001837d:	8d 76 00             	lea    esi,[esi+0x0]
c0018380:	b8 01 00 00 00       	mov    eax,0x1
c0018385:	8d 76 00             	lea    esi,[esi+0x0]
c0018388:	83 c4 1c             	add    esp,0x1c
c001838b:	c3                   	ret    

c001838c <FAT::closeDir(void*)>:
c001838c:	83 ec 1c             	sub    esp,0x1c
c001838f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018394:	75 0a                	jne    c00183a0 <FAT::closeDir(void*)+0x14>
c0018396:	b8 04 00 00 00       	mov    eax,0x4
c001839b:	eb 3f                	jmp    c00183dc <FAT::closeDir(void*)+0x50>
c001839d:	8d 76 00             	lea    esi,[esi+0x0]
c00183a0:	83 ec 0c             	sub    esp,0xc
c00183a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183a7:	e8 f9 c1 fe ff       	call   c00045a5 <f_closedir>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183b3:	83 ec 0c             	sub    esp,0xc
c00183b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183ba:	e8 cc f4 fe ff       	call   c000788b <free>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183c6:	85 c0                	test   eax,eax
c00183c8:	75 0a                	jne    c00183d4 <FAT::closeDir(void*)+0x48>
c00183ca:	b8 00 00 00 00       	mov    eax,0x0
c00183cf:	eb 0b                	jmp    c00183dc <FAT::closeDir(void*)+0x50>
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	b8 01 00 00 00       	mov    eax,0x1
c00183d9:	8d 76 00             	lea    esi,[esi+0x0]
c00183dc:	83 c4 1c             	add    esp,0x1c
c00183df:	c3                   	ret    

c00183e0 <FAT::seek(void*, unsigned long long)>:
c00183e0:	83 ec 2c             	sub    esp,0x2c
c00183e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00183e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00183f8:	75 0a                	jne    c0018404 <FAT::seek(void*, unsigned long long)+0x24>
c00183fa:	b8 04 00 00 00       	mov    eax,0x4
c00183ff:	eb 33                	jmp    c0018434 <FAT::seek(void*, unsigned long long)+0x54>
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018408:	83 ec 08             	sub    esp,0x8
c001840b:	50                   	push   eax
c001840c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018410:	e8 1f bf fe ff       	call   c0004334 <f_lseek>
c0018415:	83 c4 10             	add    esp,0x10
c0018418:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001841c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018420:	85 c0                	test   eax,eax
c0018422:	75 08                	jne    c001842c <FAT::seek(void*, unsigned long long)+0x4c>
c0018424:	b8 00 00 00 00       	mov    eax,0x0
c0018429:	eb 09                	jmp    c0018434 <FAT::seek(void*, unsigned long long)+0x54>
c001842b:	90                   	nop
c001842c:	b8 01 00 00 00       	mov    eax,0x1
c0018431:	8d 76 00             	lea    esi,[esi+0x0]
c0018434:	83 c4 2c             	add    esp,0x2c
c0018437:	c3                   	ret    

c0018438 <fatWrapperReadDisk>:
c0018438:	53                   	push   ebx
c0018439:	83 ec 18             	sub    esp,0x18
c001843c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018440:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018444:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018449:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018450:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018458:	ba 00 00 00 00       	mov    edx,0x0
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018464:	53                   	push   ebx
c0018465:	52                   	push   edx
c0018466:	50                   	push   eax
c0018467:	51                   	push   ecx
c0018468:	e8 6b 49 ff ff       	call   c000cdd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001846d:	83 c4 20             	add    esp,0x20
c0018470:	83 c4 18             	add    esp,0x18
c0018473:	5b                   	pop    ebx
c0018474:	c3                   	ret    
c0018475:	8d 76 00             	lea    esi,[esi+0x0]

c0018478 <fatWrapperWriteDisk>:
c0018478:	53                   	push   ebx
c0018479:	83 ec 18             	sub    esp,0x18
c001847c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018480:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018484:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018489:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018490:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018494:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018498:	ba 00 00 00 00       	mov    edx,0x0
c001849d:	83 ec 0c             	sub    esp,0xc
c00184a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184a4:	53                   	push   ebx
c00184a5:	52                   	push   edx
c00184a6:	50                   	push   eax
c00184a7:	51                   	push   ecx
c00184a8:	e8 ab 49 ff ff       	call   c000ce58 <LogicalDisk::write(unsigned long long, int, void*)>
c00184ad:	83 c4 20             	add    esp,0x20
c00184b0:	83 c4 18             	add    esp,0x18
c00184b3:	5b                   	pop    ebx
c00184b4:	c3                   	ret    
c00184b5:	8d 76 00             	lea    esi,[esi+0x0]

c00184b8 <fatWrapperIoctl>:
c00184b8:	53                   	push   ebx
c00184b9:	83 ec 28             	sub    esp,0x28
c00184bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00184c4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00184c8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184cc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00184d1:	75 35                	jne    c0018508 <fatWrapperIoctl+0x50>
c00184d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00184e0:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c00184e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00184ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00184f3:	89 c2                	mov    edx,eax
c00184f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184f9:	66 89 10             	mov    WORD PTR [eax],dx
c00184fc:	b8 00 00 00 00       	mov    eax,0x0
c0018501:	e9 ba 00 00 00       	jmp    c00185c0 <fatWrapperIoctl+0x108>
c0018506:	66 90                	xchg   ax,ax
c0018508:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001850d:	75 69                	jne    c0018578 <fatWrapperIoctl+0xc0>
c001850f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018517:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001851c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018523:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018529:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001852f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018535:	89 c8                	mov    eax,ecx
c0018537:	89 da                	mov    edx,ebx
c0018539:	0f a4 c2 0a          	shld   edx,eax,0xa
c001853d:	c1 e0 0a             	shl    eax,0xa
c0018540:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018545:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c001854c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018552:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018558:	89 cb                	mov    ebx,ecx
c001855a:	c1 fb 1f             	sar    ebx,0x1f
c001855d:	53                   	push   ebx
c001855e:	51                   	push   ecx
c001855f:	52                   	push   edx
c0018560:	50                   	push   eax
c0018561:	e8 5a 5a 00 00       	call   c001dfc0 <__udivdi3>
c0018566:	83 c4 10             	add    esp,0x10
c0018569:	89 c2                	mov    edx,eax
c001856b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001856f:	89 10                	mov    DWORD PTR [eax],edx
c0018571:	b8 00 00 00 00       	mov    eax,0x0
c0018576:	eb 48                	jmp    c00185c0 <fatWrapperIoctl+0x108>
c0018578:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001857d:	75 09                	jne    c0018588 <fatWrapperIoctl+0xd0>
c001857f:	b8 00 00 00 00       	mov    eax,0x0
c0018584:	eb 3a                	jmp    c00185c0 <fatWrapperIoctl+0x108>
c0018586:	66 90                	xchg   ax,ax
c0018588:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001858d:	75 19                	jne    c00185a8 <fatWrapperIoctl+0xf0>
c001858f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018593:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001859b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00185a1:	b8 00 00 00 00       	mov    eax,0x0
c00185a6:	eb 18                	jmp    c00185c0 <fatWrapperIoctl+0x108>
c00185a8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00185ad:	75 09                	jne    c00185b8 <fatWrapperIoctl+0x100>
c00185af:	b8 00 00 00 00       	mov    eax,0x0
c00185b4:	eb 0a                	jmp    c00185c0 <fatWrapperIoctl+0x108>
c00185b6:	66 90                	xchg   ax,ax
c00185b8:	b8 04 00 00 00       	mov    eax,0x4
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]
c00185c0:	83 c4 28             	add    esp,0x28
c00185c3:	5b                   	pop    ebx
c00185c4:	c3                   	ret    
c00185c5:	90                   	nop
c00185c6:	66 90                	xchg   ax,ax

c00185c8 <FAT::FAT()>:
c00185c8:	83 ec 1c             	sub    esp,0x1c
c00185cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	50                   	push   eax
c00185d3:	e8 a6 23 ff ff       	call   c000a97e <Filesystem::Filesystem()>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	ba d4 10 02 c0       	mov    edx,0xc00210d4
c00185e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e4:	89 10                	mov    DWORD PTR [eax],edx
c00185e6:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c00185f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00185f8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00185fd:	7f 15                	jg     c0018614 <FAT::FAT()+0x4c>
c00185ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018603:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c001860e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018612:	eb e4                	jmp    c00185f8 <FAT::FAT()+0x30>
c0018614:	90                   	nop
c0018615:	83 c4 1c             	add    esp,0x1c
c0018618:	c3                   	ret    
c0018619:	90                   	nop
c001861a:	66 90                	xchg   ax,ax

c001861c <FAT::fixFilepath(char*)>:
c001861c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018620:	8a 00                	mov    al,BYTE PTR [eax]
c0018622:	3c 40                	cmp    al,0x40
c0018624:	7e 2e                	jle    c0018654 <FAT::fixFilepath(char*)+0x38>
c0018626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001862a:	8a 00                	mov    al,BYTE PTR [eax]
c001862c:	83 e8 41             	sub    eax,0x41
c001862f:	88 c2                	mov    dl,al
c0018631:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018635:	88 10                	mov    BYTE PTR [eax],dl
c0018637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001863b:	8a 00                	mov    al,BYTE PTR [eax]
c001863d:	0f be c0             	movsx  eax,al
c0018640:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0018647:	83 c0 30             	add    eax,0x30
c001864a:	88 c2                	mov    dl,al
c001864c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018650:	88 10                	mov    BYTE PTR [eax],dl
c0018652:	66 90                	xchg   ax,ax
c0018654:	90                   	nop
c0018655:	c3                   	ret    
c0018656:	66 90                	xchg   ax,ax

c0018658 <FAT::open(char const*, void**, FileOpenMode)>:
c0018658:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001865e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018666:	74 0c                	je     c0018674 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018668:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018670:	75 0e                	jne    c0018680 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018672:	66 90                	xchg   ax,ax
c0018674:	b8 04 00 00 00       	mov    eax,0x4
c0018679:	e9 06 01 00 00       	jmp    c0018784 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001867e:	66 90                	xchg   ax,ax
c0018680:	83 ec 08             	sub    esp,0x8
c0018683:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001868a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001868e:	50                   	push   eax
c001868f:	e8 ec 7f fe ff       	call   c0000680 <strcpy>
c0018694:	83 c4 10             	add    esp,0x10
c0018697:	83 ec 08             	sub    esp,0x8
c001869a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001869e:	50                   	push   eax
c001869f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00186a6:	e8 71 ff ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00186b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00186bd:	83 e0 01             	and    eax,0x1
c00186c0:	74 0a                	je     c00186cc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00186c2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00186ca:	66 90                	xchg   ax,ax
c00186cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00186d3:	83 e0 04             	and    eax,0x4
c00186d6:	74 10                	je     c00186e8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00186d8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00186e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00186e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00186ef:	83 e0 02             	and    eax,0x2
c00186f2:	74 08                	je     c00186fc <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00186f4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00186fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018703:	83 e0 08             	and    eax,0x8
c0018706:	74 08                	je     c0018710 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018708:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018710:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018717:	83 e0 10             	and    eax,0x10
c001871a:	74 08                	je     c0018724 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001871c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	68 28 02 00 00       	push   0x228
c001872c:	e8 4a f1 fe ff       	call   c000787b <malloc>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	89 c2                	mov    edx,eax
c0018736:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001873d:	89 10                	mov    DWORD PTR [eax],edx
c001873f:	0f b6 84 24 0f 01 00 00 	movzx  eax,BYTE PTR [esp+0x10f]
c0018747:	8b 94 24 28 01 00 00 	mov    edx,DWORD PTR [esp+0x128]
c001874e:	8b 12                	mov    edx,DWORD PTR [edx]
c0018750:	83 ec 04             	sub    esp,0x4
c0018753:	50                   	push   eax
c0018754:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018758:	50                   	push   eax
c0018759:	52                   	push   edx
c001875a:	e8 09 b4 fe ff       	call   c0003b68 <f_open>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018769:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018771:	74 09                	je     c001877c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c0018773:	b8 01 00 00 00       	mov    eax,0x1
c0018778:	eb 0a                	jmp    c0018784 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001877a:	66 90                	xchg   ax,ax
c001877c:	b8 00 00 00 00       	mov    eax,0x0
c0018781:	8d 76 00             	lea    esi,[esi+0x0]
c0018784:	81 c4 1c 01 00 00    	add    esp,0x11c
c001878a:	c3                   	ret    
c001878b:	90                   	nop

c001878c <FAT::openDir(char const*, void**)>:
c001878c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018792:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001879a:	74 0c                	je     c00187a8 <FAT::openDir(char const*, void**)+0x1c>
c001879c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00187a4:	75 0e                	jne    c00187b4 <FAT::openDir(char const*, void**)+0x28>
c00187a6:	66 90                	xchg   ax,ax
c00187a8:	b8 04 00 00 00       	mov    eax,0x4
c00187ad:	e9 82 00 00 00       	jmp    c0018834 <FAT::openDir(char const*, void**)+0xa8>
c00187b2:	66 90                	xchg   ax,ax
c00187b4:	83 ec 08             	sub    esp,0x8
c00187b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00187be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00187c2:	50                   	push   eax
c00187c3:	e8 b8 7e fe ff       	call   c0000680 <strcpy>
c00187c8:	83 c4 10             	add    esp,0x10
c00187cb:	83 ec 08             	sub    esp,0x8
c00187ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187d2:	50                   	push   eax
c00187d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00187da:	e8 3d fe ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	6a 30                	push   0x30
c00187e7:	e8 8f f0 fe ff       	call   c000787b <malloc>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	89 c2                	mov    edx,eax
c00187f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00187f8:	89 10                	mov    DWORD PTR [eax],edx
c00187fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018801:	8b 10                	mov    edx,DWORD PTR [eax]
c0018803:	83 ec 08             	sub    esp,0x8
c0018806:	8d 44 24 14          	lea    eax,[esp+0x14]
c001880a:	50                   	push   eax
c001880b:	52                   	push   edx
c001880c:	e8 c9 bc fe ff       	call   c00044da <f_opendir>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001881b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018823:	74 07                	je     c001882c <FAT::openDir(char const*, void**)+0xa0>
c0018825:	b8 01 00 00 00       	mov    eax,0x1
c001882a:	eb 08                	jmp    c0018834 <FAT::openDir(char const*, void**)+0xa8>
c001882c:	b8 00 00 00 00       	mov    eax,0x0
c0018831:	8d 76 00             	lea    esi,[esi+0x0]
c0018834:	81 c4 1c 01 00 00    	add    esp,0x11c
c001883a:	c3                   	ret    
c001883b:	90                   	nop

c001883c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001883c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018842:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001884a:	75 0c                	jne    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001884c:	b8 04 00 00 00       	mov    eax,0x4
c0018851:	e9 d6 00 00 00       	jmp    c001892c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018856:	66 90                	xchg   ax,ax
c0018858:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018860:	75 0a                	jne    c001886c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018862:	b8 04 00 00 00       	mov    eax,0x4
c0018867:	e9 c0 00 00 00       	jmp    c001892c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001886c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018874:	75 0a                	jne    c0018880 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018876:	b8 04 00 00 00       	mov    eax,0x4
c001887b:	e9 ac 00 00 00       	jmp    c001892c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018880:	83 ec 08             	sub    esp,0x8
c0018883:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001888a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018891:	50                   	push   eax
c0018892:	e8 e9 7d fe ff       	call   c0000680 <strcpy>
c0018897:	83 c4 10             	add    esp,0x10
c001889a:	83 ec 08             	sub    esp,0x8
c001889d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00188a4:	50                   	push   eax
c00188a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00188ac:	e8 6b fd ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c00188b1:	83 c4 10             	add    esp,0x10
c00188b4:	83 ec 08             	sub    esp,0x8
c00188b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bb:	50                   	push   eax
c00188bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00188c3:	50                   	push   eax
c00188c4:	e8 90 bd fe ff       	call   c0004659 <f_stat>
c00188c9:	83 c4 10             	add    esp,0x10
c00188cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00188d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00188da:	85 c0                	test   eax,eax
c00188dc:	74 0a                	je     c00188e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00188de:	83 f8 04             	cmp    eax,0x4
c00188e1:	74 39                	je     c001891c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00188e3:	eb 3f                	jmp    c0018924 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00188e5:	8d 76 00             	lea    esi,[esi+0x0]
c00188e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188ec:	0f b6 c0             	movzx  eax,al
c00188ef:	83 e0 10             	and    eax,0x10
c00188f2:	0f 95 c2             	setne  dl
c00188f5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00188fc:	88 10                	mov    BYTE PTR [eax],dl
c00188fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018902:	ba 00 00 00 00       	mov    edx,0x0
c0018907:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001890e:	89 01                	mov    DWORD PTR [ecx],eax
c0018910:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018913:	b8 00 00 00 00       	mov    eax,0x0
c0018918:	eb 12                	jmp    c001892c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001891a:	66 90                	xchg   ax,ax
c001891c:	b8 02 00 00 00       	mov    eax,0x2
c0018921:	eb 09                	jmp    c001892c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018923:	90                   	nop
c0018924:	b8 01 00 00 00       	mov    eax,0x1
c0018929:	8d 76 00             	lea    esi,[esi+0x0]
c001892c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018932:	c3                   	ret    
c0018933:	90                   	nop

c0018934 <FAT::unlink(char const*)>:
c0018934:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001893a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018942:	75 08                	jne    c001894c <FAT::unlink(char const*)+0x18>
c0018944:	b8 04 00 00 00       	mov    eax,0x4
c0018949:	eb 61                	jmp    c00189ac <FAT::unlink(char const*)+0x78>
c001894b:	90                   	nop
c001894c:	83 ec 08             	sub    esp,0x8
c001894f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018956:	8d 44 24 18          	lea    eax,[esp+0x18]
c001895a:	50                   	push   eax
c001895b:	e8 20 7d fe ff       	call   c0000680 <strcpy>
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	83 ec 08             	sub    esp,0x8
c0018966:	8d 44 24 14          	lea    eax,[esp+0x14]
c001896a:	50                   	push   eax
c001896b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018972:	e8 a5 fc ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	83 ec 0c             	sub    esp,0xc
c001897d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018981:	50                   	push   eax
c0018982:	e8 37 bf fe ff       	call   c00048be <f_unlink>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018991:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018998:	85 c0                	test   eax,eax
c001899a:	75 08                	jne    c00189a4 <FAT::unlink(char const*)+0x70>
c001899c:	b8 00 00 00 00       	mov    eax,0x0
c00189a1:	eb 09                	jmp    c00189ac <FAT::unlink(char const*)+0x78>
c00189a3:	90                   	nop
c00189a4:	b8 01 00 00 00       	mov    eax,0x1
c00189a9:	8d 76 00             	lea    esi,[esi+0x0]
c00189ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c00189b2:	c3                   	ret    
c00189b3:	90                   	nop

c00189b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00189b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189ba:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00189c1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00189c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00189cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00189d8:	75 0a                	jne    c00189e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00189da:	b8 04 00 00 00       	mov    eax,0x4
c00189df:	e9 30 01 00 00       	jmp    c0018b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c00189e4:	83 ec 08             	sub    esp,0x8
c00189e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00189ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00189f2:	50                   	push   eax
c00189f3:	e8 88 7c fe ff       	call   c0000680 <strcpy>
c00189f8:	83 c4 10             	add    esp,0x10
c00189fb:	83 ec 08             	sub    esp,0x8
c00189fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018a02:	50                   	push   eax
c0018a03:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018a0a:	e8 0d fc ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018a1a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018a22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a27:	83 e0 01             	and    eax,0x1
c0018a2a:	74 08                	je     c0018a34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0018a2c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018a34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a39:	83 e0 02             	and    eax,0x2
c0018a3c:	74 0a                	je     c0018a48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c0018a3e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0018a46:	66 90                	xchg   ax,ax
c0018a48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a4d:	83 e0 04             	and    eax,0x4
c0018a50:	74 0a                	je     c0018a5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018a52:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018a5a:	66 90                	xchg   ax,ax
c0018a5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a61:	83 e0 08             	and    eax,0x8
c0018a64:	74 0a                	je     c0018a70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c0018a66:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018a6e:	66 90                	xchg   ax,ax
c0018a70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a75:	83 e0 01             	and    eax,0x1
c0018a78:	74 0a                	je     c0018a84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c0018a7a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0018a82:	66 90                	xchg   ax,ax
c0018a84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a89:	83 e0 02             	and    eax,0x2
c0018a8c:	74 0a                	je     c0018a98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018a8e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0018a96:	66 90                	xchg   ax,ax
c0018a98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a9d:	83 e0 04             	and    eax,0x4
c0018aa0:	74 0a                	je     c0018aac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c0018aa2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018aaa:	66 90                	xchg   ax,ax
c0018aac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ab1:	83 e0 08             	and    eax,0x8
c0018ab4:	74 0a                	je     c0018ac0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c0018ab6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018abe:	66 90                	xchg   ax,ax
c0018ac0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018ac7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018ace:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0018ad6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0018ade:	83 ec 04             	sub    esp,0x4
c0018ae1:	52                   	push   edx
c0018ae2:	50                   	push   eax
c0018ae3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ae7:	50                   	push   eax
c0018ae8:	e8 45 c2 fe ff       	call   c0004d32 <f_chmod>
c0018aed:	83 c4 10             	add    esp,0x10
c0018af0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018af7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018afe:	85 c0                	test   eax,eax
c0018b00:	75 0a                	jne    c0018b0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c0018b02:	b8 00 00 00 00       	mov    eax,0x0
c0018b07:	eb 0b                	jmp    c0018b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c0018b09:	8d 76 00             	lea    esi,[esi+0x0]
c0018b0c:	b8 01 00 00 00       	mov    eax,0x1
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b1a:	c3                   	ret    
c0018b1b:	90                   	nop

c0018b1c <FAT::rename(char const*, char const*)>:
c0018b1c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018b22:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0018b2a:	74 0c                	je     c0018b38 <FAT::rename(char const*, char const*)+0x1c>
c0018b2c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018b34:	75 0e                	jne    c0018b44 <FAT::rename(char const*, char const*)+0x28>
c0018b36:	66 90                	xchg   ax,ax
c0018b38:	b8 04 00 00 00       	mov    eax,0x4
c0018b3d:	e9 9e 00 00 00       	jmp    c0018be0 <FAT::rename(char const*, char const*)+0xc4>
c0018b42:	66 90                	xchg   ax,ax
c0018b44:	83 ec 08             	sub    esp,0x8
c0018b47:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018b4e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018b55:	50                   	push   eax
c0018b56:	e8 25 7b fe ff       	call   c0000680 <strcpy>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	83 ec 08             	sub    esp,0x8
c0018b61:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018b68:	50                   	push   eax
c0018b69:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018b70:	e8 a7 fa ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	83 ec 08             	sub    esp,0x8
c0018b7b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018b82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b86:	50                   	push   eax
c0018b87:	e8 f4 7a fe ff       	call   c0000680 <strcpy>
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	83 ec 08             	sub    esp,0x8
c0018b92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b96:	50                   	push   eax
c0018b97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018b9e:	e8 79 fa ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018ba3:	83 c4 10             	add    esp,0x10
c0018ba6:	83 ec 08             	sub    esp,0x8
c0018ba9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018bad:	50                   	push   eax
c0018bae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018bb5:	50                   	push   eax
c0018bb6:	e8 be bf fe ff       	call   c0004b79 <f_rename>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018bc5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018bcc:	85 c0                	test   eax,eax
c0018bce:	75 08                	jne    c0018bd8 <FAT::rename(char const*, char const*)+0xbc>
c0018bd0:	b8 00 00 00 00       	mov    eax,0x0
c0018bd5:	eb 09                	jmp    c0018be0 <FAT::rename(char const*, char const*)+0xc4>
c0018bd7:	90                   	nop
c0018bd8:	b8 01 00 00 00       	mov    eax,0x1
c0018bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018be0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018be6:	c3                   	ret    
c0018be7:	90                   	nop

c0018be8 <FAT::mkdir(char const*)>:
c0018be8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018bee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018bf6:	75 08                	jne    c0018c00 <FAT::mkdir(char const*)+0x18>
c0018bf8:	b8 04 00 00 00       	mov    eax,0x4
c0018bfd:	eb 61                	jmp    c0018c60 <FAT::mkdir(char const*)+0x78>
c0018bff:	90                   	nop
c0018c00:	83 ec 08             	sub    esp,0x8
c0018c03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c0e:	50                   	push   eax
c0018c0f:	e8 6c 7a fe ff       	call   c0000680 <strcpy>
c0018c14:	83 c4 10             	add    esp,0x10
c0018c17:	83 ec 08             	sub    esp,0x8
c0018c1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c1e:	50                   	push   eax
c0018c1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c26:	e8 f1 f9 ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018c2b:	83 c4 10             	add    esp,0x10
c0018c2e:	83 ec 0c             	sub    esp,0xc
c0018c31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c35:	50                   	push   eax
c0018c36:	e8 a3 bd fe ff       	call   c00049de <f_mkdir>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018c45:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018c4c:	85 c0                	test   eax,eax
c0018c4e:	75 08                	jne    c0018c58 <FAT::mkdir(char const*)+0x70>
c0018c50:	b8 00 00 00 00       	mov    eax,0x0
c0018c55:	eb 09                	jmp    c0018c60 <FAT::mkdir(char const*)+0x78>
c0018c57:	90                   	nop
c0018c58:	b8 01 00 00 00       	mov    eax,0x1
c0018c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018c66:	c3                   	ret    
c0018c67:	90                   	nop

c0018c68 <FAT::exists(char const*)>:
c0018c68:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018c6e:	83 ec 08             	sub    esp,0x8
c0018c71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018c78:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c7c:	50                   	push   eax
c0018c7d:	e8 fe 79 fe ff       	call   c0000680 <strcpy>
c0018c82:	83 c4 10             	add    esp,0x10
c0018c85:	83 ec 08             	sub    esp,0x8
c0018c88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c8c:	50                   	push   eax
c0018c8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018c94:	e8 83 f9 ff ff       	call   c001861c <FAT::fixFilepath(char*)>
c0018c99:	83 c4 10             	add    esp,0x10
c0018c9c:	83 ec 08             	sub    esp,0x8
c0018c9f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018ca6:	50                   	push   eax
c0018ca7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018cab:	50                   	push   eax
c0018cac:	e8 a8 b9 fe ff       	call   c0004659 <f_stat>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018cbb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018cc2:	85 c0                	test   eax,eax
c0018cc4:	75 06                	jne    c0018ccc <FAT::exists(char const*)+0x64>
c0018cc6:	b0 01                	mov    al,0x1
c0018cc8:	eb 06                	jmp    c0018cd0 <FAT::exists(char const*)+0x68>
c0018cca:	66 90                	xchg   ax,ax
c0018ccc:	b0 00                	mov    al,0x0
c0018cce:	66 90                	xchg   ax,ax
c0018cd0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018cd6:	c3                   	ret    
c0018cd7:	90                   	nop

c0018cd8 <isoReadDiscSectorHelper>:
c0018cd8:	83 ec 2c             	sub    esp,0x2c
c0018cdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018cdf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ce3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018ce8:	83 e8 41             	sub    eax,0x41
c0018ceb:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018cf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018cf6:	ba 00 00 00 00       	mov    edx,0x0
c0018cfb:	83 ec 0c             	sub    esp,0xc
c0018cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d06:	52                   	push   edx
c0018d07:	50                   	push   eax
c0018d08:	51                   	push   ecx
c0018d09:	e8 ca 40 ff ff       	call   c000cdd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d0e:	83 c4 20             	add    esp,0x20
c0018d11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d15:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018d1a:	74 0c                	je     c0018d28 <isoReadDiscSectorHelper+0x50>
c0018d1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d20:	c1 e0 0b             	shl    eax,0xb
c0018d23:	eb 0b                	jmp    c0018d30 <isoReadDiscSectorHelper+0x58>
c0018d25:	8d 76 00             	lea    esi,[esi+0x0]
c0018d28:	b8 00 00 00 00       	mov    eax,0x0
c0018d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d30:	83 c4 2c             	add    esp,0x2c
c0018d33:	c3                   	ret    

c0018d34 <iso_kprintf>:
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	83 ec 08             	sub    esp,0x8
c0018d3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018d3e:	68 c2 0a 02 c0       	push   0xc0020ac2
c0018d43:	e8 21 19 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0018d48:	83 c4 10             	add    esp,0x10
c0018d4b:	90                   	nop
c0018d4c:	83 c4 0c             	add    esp,0xc
c0018d4f:	c3                   	ret    

c0018d50 <iso_kprintfd>:
c0018d50:	83 ec 0c             	sub    esp,0xc
c0018d53:	83 ec 08             	sub    esp,0x8
c0018d56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018d5a:	68 83 fa 01 c0       	push   0xc001fa83
c0018d5f:	e8 05 19 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0018d64:	83 c4 10             	add    esp,0x10
c0018d67:	90                   	nop
c0018d68:	83 c4 0c             	add    esp,0xc
c0018d6b:	c3                   	ret    

c0018d6c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018d6c:	b8 08 00 00 00       	mov    eax,0x8
c0018d71:	c3                   	ret    

c0018d72 <ISO9660::getName()>:
c0018d72:	b8 34 11 02 c0       	mov    eax,0xc0021134
c0018d77:	c3                   	ret    

c0018d78 <ISO9660::closeDir(void*)>:
c0018d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d7e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018d81:	90                   	nop

c0018d82 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018d82:	b8 01 00 00 00       	mov    eax,0x1
c0018d87:	c3                   	ret    

c0018d88 <ISO9660::unlink(char const*)>:
c0018d88:	b8 01 00 00 00       	mov    eax,0x1
c0018d8d:	c3                   	ret    

c0018d8e <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018d8e:	b8 03 00 00 00       	mov    eax,0x3
c0018d93:	c3                   	ret    

c0018d94 <ISO9660::rename(char const*, char const*)>:
c0018d94:	b8 01 00 00 00       	mov    eax,0x1
c0018d99:	c3                   	ret    

c0018d9a <ISO9660::mkdir(char const*)>:
c0018d9a:	b8 01 00 00 00       	mov    eax,0x1
c0018d9f:	c3                   	ret    

c0018da0 <ISO9660::~ISO9660()>:
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	ba 74 12 02 c0       	mov    edx,0xc0021274
c0018da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dac:	89 10                	mov    DWORD PTR [eax],edx
c0018dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db2:	83 ec 0c             	sub    esp,0xc
c0018db5:	50                   	push   eax
c0018db6:	e8 e7 1b ff ff       	call   c000a9a2 <Filesystem::~Filesystem()>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	90                   	nop
c0018dbf:	83 c4 0c             	add    esp,0xc
c0018dc2:	c3                   	ret    
c0018dc3:	90                   	nop

c0018dc4 <ISO9660::~ISO9660()>:
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	83 ec 0c             	sub    esp,0xc
c0018dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dce:	e8 cd ff ff ff       	call   c0018da0 <ISO9660::~ISO9660()>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	83 ec 08             	sub    esp,0x8
c0018dd9:	6a 08                	push   0x8
c0018ddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ddf:	e8 90 17 ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c0018de4:	83 c4 10             	add    esp,0x10
c0018de7:	83 c4 0c             	add    esp,0xc
c0018dea:	c3                   	ret    
c0018deb:	90                   	nop

c0018dec <ISO9660::exists(char const*)>:
c0018dec:	83 ec 18             	sub    esp,0x18
c0018def:	68 4f 11 02 c0       	push   0xc002114f
c0018df4:	e8 c4 76 ff ff       	call   c00104bd <KePanic(char const*)>
c0018df9:	31 c0                	xor    eax,eax
c0018dfb:	83 c4 1c             	add    esp,0x1c
c0018dfe:	c3                   	ret    
c0018dff:	90                   	nop

c0018e00 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018e00:	56                   	push   esi
c0018e01:	53                   	push   ebx
c0018e02:	53                   	push   ebx
c0018e03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e07:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018e0b:	85 db                	test   ebx,ebx
c0018e0d:	0f 84 c2 00 00 00    	je     c0018ed5 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018e13:	85 f6                	test   esi,esi
c0018e15:	0f 84 ba 00 00 00    	je     c0018ed5 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018e1b:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018e20:	b8 03 00 00 00       	mov    eax,0x3
c0018e25:	0f 85 af 00 00 00    	jne    c0018eda <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018e2b:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018e30:	38 03                	cmp    BYTE PTR [ebx],al
c0018e32:	74 1b                	je     c0018e4f <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018e34:	84 c0                	test   al,al
c0018e36:	74 10                	je     c0018e48 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	68 6d 11 02 c0       	push   0xc002116d
c0018e40:	e8 78 76 ff ff       	call   c00104bd <KePanic(char const*)>
c0018e45:	83 c4 10             	add    esp,0x10
c0018e48:	8a 03                	mov    al,BYTE PTR [ebx]
c0018e4a:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018e4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018e52:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018e59:	85 c0                	test   eax,eax
c0018e5b:	74 09                	je     c0018e66 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018e5d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018e64:	74 48                	je     c0018eae <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018e66:	83 ec 0c             	sub    esp,0xc
c0018e69:	68 7d 11 02 c0       	push   0xc002117d
c0018e6e:	e8 f6 17 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0018e73:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018e80:	85 c0                	test   eax,eax
c0018e82:	74 17                	je     c0018e9b <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018e8e:	68 9d 11 02 c0       	push   0xc002119d
c0018e93:	e8 d1 17 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	50                   	push   eax
c0018ea6:	e8 ba d9 fe ff       	call   c0006865 <init_percd>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	83 c3 03             	add    ebx,0x3
c0018eb1:	51                   	push   ecx
c0018eb2:	51                   	push   ecx
c0018eb3:	6a 00                	push   0x0
c0018eb5:	53                   	push   ebx
c0018eb6:	e8 60 d4 fe ff       	call   c000631b <iso_open>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	89 c2                	mov    edx,eax
c0018ec0:	b8 01 00 00 00       	mov    eax,0x1
c0018ec5:	83 fa ff             	cmp    edx,0xffffffff
c0018ec8:	74 10                	je     c0018eda <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018eca:	83 c2 32             	add    edx,0x32
c0018ecd:	31 c0                	xor    eax,eax
c0018ecf:	01 d2                	add    edx,edx
c0018ed1:	89 16                	mov    DWORD PTR [esi],edx
c0018ed3:	eb 05                	jmp    c0018eda <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018ed5:	b8 04 00 00 00       	mov    eax,0x4
c0018eda:	5a                   	pop    edx
c0018edb:	5b                   	pop    ebx
c0018edc:	5e                   	pop    esi
c0018edd:	c3                   	ret    

c0018ede <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018ede:	53                   	push   ebx
c0018edf:	83 ec 08             	sub    esp,0x8
c0018ee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ee6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018eea:	85 c0                	test   eax,eax
c0018eec:	74 2d                	je     c0018f1b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018eee:	85 db                	test   ebx,ebx
c0018ef0:	74 29                	je     c0018f1b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018ef2:	b9 02 00 00 00       	mov    ecx,0x2
c0018ef7:	52                   	push   edx
c0018ef8:	99                   	cdq    
c0018ef9:	f7 f9                	idiv   ecx
c0018efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018eff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018f03:	83 e8 32             	sub    eax,0x32
c0018f06:	50                   	push   eax
c0018f07:	e8 b7 d4 fe ff       	call   c00063c3 <iso_read>
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	89 03                	mov    DWORD PTR [ebx],eax
c0018f11:	09 d0                	or     eax,edx
c0018f13:	0f 94 c0             	sete   al
c0018f16:	0f b6 c0             	movzx  eax,al
c0018f19:	eb 05                	jmp    c0018f20 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018f1b:	b8 04 00 00 00       	mov    eax,0x4
c0018f20:	83 c4 08             	add    esp,0x8
c0018f23:	5b                   	pop    ebx
c0018f24:	c3                   	ret    
c0018f25:	90                   	nop

c0018f26 <ISO9660::seek(void*, unsigned long long)>:
c0018f26:	57                   	push   edi
c0018f27:	b8 04 00 00 00       	mov    eax,0x4
c0018f2c:	56                   	push   esi
c0018f2d:	53                   	push   ebx
c0018f2e:	83 ec 10             	sub    esp,0x10
c0018f31:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018f35:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0018f39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0018f43:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0018f47:	c5 f9 6f 0c 24       	vmovdqa xmm1,XMMWORD PTR [esp]
c0018f4c:	c4 e3 79 16 cb 01    	vpextrd ebx,xmm1,0x1
c0018f52:	85 d2                	test   edx,edx
c0018f54:	74 38                	je     c0018f8e <ISO9660::seek(void*, unsigned long long)+0x68>
c0018f56:	89 d0                	mov    eax,edx
c0018f58:	6a 00                	push   0x0
c0018f5a:	99                   	cdq    
c0018f5b:	53                   	push   ebx
c0018f5c:	51                   	push   ecx
c0018f5d:	b9 02 00 00 00       	mov    ecx,0x2
c0018f62:	f7 f9                	idiv   ecx
c0018f64:	83 e8 32             	sub    eax,0x32
c0018f67:	50                   	push   eax
c0018f68:	e8 6c d5 fe ff       	call   c00064d9 <iso_seek>
c0018f6d:	c5 f9 6e c0          	vmovd  xmm0,eax
c0018f71:	31 c0                	xor    eax,eax
c0018f73:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0018f79:	c5 f9 ef 44 24 10    	vpxor  xmm0,xmm0,XMMWORD PTR [esp+0x10]
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	c5 f9 6c c0          	vpunpcklqdq xmm0,xmm0,xmm0
c0018f86:	c4 e2 79 17 c0       	vptest xmm0,xmm0
c0018f8b:	0f 95 c0             	setne  al
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	5b                   	pop    ebx
c0018f92:	5e                   	pop    esi
c0018f93:	5f                   	pop    edi
c0018f94:	c3                   	ret    
c0018f95:	90                   	nop

c0018f96 <ISO9660::tell(void*, unsigned long long*)>:
c0018f96:	53                   	push   ebx
c0018f97:	83 ec 08             	sub    esp,0x8
c0018f9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018fa2:	85 c0                	test   eax,eax
c0018fa4:	74 2d                	je     c0018fd3 <ISO9660::tell(void*, unsigned long long*)+0x3d>
c0018fa6:	85 db                	test   ebx,ebx
c0018fa8:	74 29                	je     c0018fd3 <ISO9660::tell(void*, unsigned long long*)+0x3d>
c0018faa:	b9 02 00 00 00       	mov    ecx,0x2
c0018faf:	99                   	cdq    
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	f7 f9                	idiv   ecx
c0018fb5:	83 e8 32             	sub    eax,0x32
c0018fb8:	50                   	push   eax
c0018fb9:	e8 9f d5 fe ff       	call   c000655d <iso_tell>
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	c5 f9 6e c0          	vmovd  xmm0,eax
c0018fc5:	31 c0                	xor    eax,eax
c0018fc7:	c4 e3 79 22 c2 01    	vpinsrd xmm0,xmm0,edx,0x1
c0018fcd:	c5 f9 d6 03          	vmovq  QWORD PTR [ebx],xmm0
c0018fd1:	eb 05                	jmp    c0018fd8 <ISO9660::tell(void*, unsigned long long*)+0x42>
c0018fd3:	b8 04 00 00 00       	mov    eax,0x4
c0018fd8:	83 c4 08             	add    esp,0x8
c0018fdb:	5b                   	pop    ebx
c0018fdc:	c3                   	ret    
c0018fdd:	90                   	nop

c0018fde <ISO9660::stat(void*, unsigned long long*)>:
c0018fde:	56                   	push   esi
c0018fdf:	53                   	push   ebx
c0018fe0:	83 ec 10             	sub    esp,0x10
c0018fe3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018fe7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018feb:	68 c1 11 02 c0       	push   0xc00211c1
c0018ff0:	e8 74 16 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c0018ff5:	83 c4 10             	add    esp,0x10
c0018ff8:	85 db                	test   ebx,ebx
c0018ffa:	74 2a                	je     c0019026 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018ffc:	85 f6                	test   esi,esi
c0018ffe:	74 26                	je     c0019026 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019000:	89 d8                	mov    eax,ebx
c0019002:	b9 02 00 00 00       	mov    ecx,0x2
c0019007:	83 ec 0c             	sub    esp,0xc
c001900a:	99                   	cdq    
c001900b:	f7 f9                	idiv   ecx
c001900d:	83 e8 32             	sub    eax,0x32
c0019010:	50                   	push   eax
c0019011:	e8 78 d5 fe ff       	call   c000658e <iso_total>
c0019016:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	89 06                	mov    DWORD PTR [esi],eax
c0019022:	31 c0                	xor    eax,eax
c0019024:	eb 05                	jmp    c001902b <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019026:	b8 04 00 00 00       	mov    eax,0x4
c001902b:	5a                   	pop    edx
c001902c:	5b                   	pop    ebx
c001902d:	5e                   	pop    esi
c001902e:	c3                   	ret    
c001902f:	90                   	nop

c0019030 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019030:	55                   	push   ebp
c0019031:	57                   	push   edi
c0019032:	56                   	push   esi
c0019033:	53                   	push   ebx
c0019034:	83 ec 18             	sub    esp,0x18
c0019037:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001903b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001903f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019043:	68 c9 11 02 c0       	push   0xc00211c9
c0019048:	e8 1c 16 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	85 ff                	test   edi,edi
c0019052:	0f 94 c2             	sete   dl
c0019055:	85 f6                	test   esi,esi
c0019057:	0f 94 c0             	sete   al
c001905a:	08 c2                	or     dl,al
c001905c:	0f 85 d5 00 00 00    	jne    c0019137 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0019062:	85 db                	test   ebx,ebx
c0019064:	0f 84 cd 00 00 00    	je     c0019137 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c001906a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001906d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019073:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0019078:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001907f:	38 03                	cmp    BYTE PTR [ebx],al
c0019081:	74 1b                	je     c001909e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0019083:	84 c0                	test   al,al
c0019085:	74 10                	je     c0019097 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0019087:	83 ec 0c             	sub    esp,0xc
c001908a:	68 6d 11 02 c0       	push   0xc002116d
c001908f:	e8 29 74 ff ff       	call   c00104bd <KePanic(char const*)>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	8a 03                	mov    al,BYTE PTR [ebx]
c0019099:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c001909e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190a1:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00190a8:	85 c0                	test   eax,eax
c00190aa:	74 09                	je     c00190b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c00190ac:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00190b3:	74 51                	je     c0019106 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c00190b5:	83 ec 0c             	sub    esp,0xc
c00190b8:	68 d1 11 02 c0       	push   0xc00211d1
c00190bd:	e8 a7 15 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00190c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c00190d0:	74 21                	je     c00190f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	68 f1 11 02 c0       	push   0xc00211f1
c00190da:	e8 8a 15 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00190df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00190ec:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00190f3:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	50                   	push   eax
c00190fe:	e8 62 d7 fe ff       	call   c0006865 <init_percd>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	83 c3 03             	add    ebx,0x3
c0019109:	52                   	push   edx
c001910a:	52                   	push   edx
c001910b:	6a 00                	push   0x0
c001910d:	53                   	push   ebx
c001910e:	e8 08 d2 fe ff       	call   c000631b <iso_open>
c0019113:	83 c4 10             	add    esp,0x10
c0019116:	89 c5                	mov    ebp,eax
c0019118:	83 f8 ff             	cmp    eax,0xffffffff
c001911b:	75 21                	jne    c001913e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c001911d:	50                   	push   eax
c001911e:	50                   	push   eax
c001911f:	6a 01                	push   0x1
c0019121:	53                   	push   ebx
c0019122:	e8 f4 d1 fe ff       	call   c000631b <iso_open>
c0019127:	83 c4 10             	add    esp,0x10
c001912a:	ba 02 00 00 00       	mov    edx,0x2
c001912f:	40                   	inc    eax
c0019130:	74 2b                	je     c001915d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019132:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019135:	eb 24                	jmp    c001915b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0019137:	ba 04 00 00 00       	mov    edx,0x4
c001913c:	eb 1f                	jmp    c001915d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001913e:	83 ec 0c             	sub    esp,0xc
c0019141:	50                   	push   eax
c0019142:	e8 47 d4 fe ff       	call   c000658e <iso_total>
c0019147:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001914e:	89 07                	mov    DWORD PTR [edi],eax
c0019150:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019153:	e8 4d d2 fe ff       	call   c00063a5 <iso_close>
c0019158:	83 c4 10             	add    esp,0x10
c001915b:	31 d2                	xor    edx,edx
c001915d:	83 c4 0c             	add    esp,0xc
c0019160:	89 d0                	mov    eax,edx
c0019162:	5b                   	pop    ebx
c0019163:	5e                   	pop    esi
c0019164:	5f                   	pop    edi
c0019165:	5d                   	pop    ebp
c0019166:	c3                   	ret    
c0019167:	90                   	nop

c0019168 <ISO9660::close(void*)>:
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	b8 04 00 00 00       	mov    eax,0x4
c0019170:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019174:	85 d2                	test   edx,edx
c0019176:	74 1b                	je     c0019193 <ISO9660::close(void*)+0x2b>
c0019178:	89 d0                	mov    eax,edx
c001917a:	b9 02 00 00 00       	mov    ecx,0x2
c001917f:	83 ec 0c             	sub    esp,0xc
c0019182:	99                   	cdq    
c0019183:	f7 f9                	idiv   ecx
c0019185:	83 e8 32             	sub    eax,0x32
c0019188:	50                   	push   eax
c0019189:	e8 17 d2 fe ff       	call   c00063a5 <iso_close>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	31 c0                	xor    eax,eax
c0019193:	83 c4 0c             	add    esp,0xc
c0019196:	c3                   	ret    
c0019197:	90                   	nop

c0019198 <ISO9660::openDir(char const*, void**)>:
c0019198:	56                   	push   esi
c0019199:	53                   	push   ebx
c001919a:	50                   	push   eax
c001919b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001919f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00191a3:	85 db                	test   ebx,ebx
c00191a5:	0f 84 b5 00 00 00    	je     c0019260 <ISO9660::openDir(char const*, void**)+0xc8>
c00191ab:	85 f6                	test   esi,esi
c00191ad:	0f 84 ad 00 00 00    	je     c0019260 <ISO9660::openDir(char const*, void**)+0xc8>
c00191b3:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00191b8:	38 03                	cmp    BYTE PTR [ebx],al
c00191ba:	74 1b                	je     c00191d7 <ISO9660::openDir(char const*, void**)+0x3f>
c00191bc:	84 c0                	test   al,al
c00191be:	74 10                	je     c00191d0 <ISO9660::openDir(char const*, void**)+0x38>
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	68 6d 11 02 c0       	push   0xc002116d
c00191c8:	e8 f0 72 ff ff       	call   c00104bd <KePanic(char const*)>
c00191cd:	83 c4 10             	add    esp,0x10
c00191d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00191d2:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00191d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191da:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00191e1:	85 c0                	test   eax,eax
c00191e3:	74 10                	je     c00191f5 <ISO9660::openDir(char const*, void**)+0x5d>
c00191e5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00191ec:	74 1a                	je     c0019208 <ISO9660::openDir(char const*, void**)+0x70>
c00191ee:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00191f5:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c00191fc:	83 ec 0c             	sub    esp,0xc
c00191ff:	50                   	push   eax
c0019200:	e8 60 d6 fe ff       	call   c0006865 <init_percd>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	83 c3 03             	add    ebx,0x3
c001920b:	50                   	push   eax
c001920c:	50                   	push   eax
c001920d:	6a 01                	push   0x1
c001920f:	53                   	push   ebx
c0019210:	e8 06 d1 fe ff       	call   c000631b <iso_open>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	83 f8 ff             	cmp    eax,0xffffffff
c001921b:	89 c3                	mov    ebx,eax
c001921d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0019222:	75 1c                	jne    c0019240 <ISO9660::openDir(char const*, void**)+0xa8>
c0019224:	53                   	push   ebx
c0019225:	53                   	push   ebx
c0019226:	68 15 12 02 c0       	push   0xc0021215
c001922b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019231:	e8 2c f6 fe ff       	call   c0008862 <VgaText::puts(char const*)>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	b8 01 00 00 00       	mov    eax,0x1
c001923e:	eb 25                	jmp    c0019265 <ISO9660::openDir(char const*, void**)+0xcd>
c0019240:	51                   	push   ecx
c0019241:	01 db                	add    ebx,ebx
c0019243:	51                   	push   ecx
c0019244:	83 c3 65             	add    ebx,0x65
c0019247:	68 28 12 02 c0       	push   0xc0021228
c001924c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019252:	e8 0b f6 fe ff       	call   c0008862 <VgaText::puts(char const*)>
c0019257:	89 1e                	mov    DWORD PTR [esi],ebx
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	31 c0                	xor    eax,eax
c001925e:	eb 05                	jmp    c0019265 <ISO9660::openDir(char const*, void**)+0xcd>
c0019260:	b8 04 00 00 00       	mov    eax,0x4
c0019265:	5a                   	pop    edx
c0019266:	5b                   	pop    ebx
c0019267:	5e                   	pop    esi
c0019268:	c3                   	ret    
c0019269:	90                   	nop

c001926a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001926a:	55                   	push   ebp
c001926b:	57                   	push   edi
c001926c:	56                   	push   esi
c001926d:	53                   	push   ebx
c001926e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019274:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001927b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019282:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019289:	85 db                	test   ebx,ebx
c001928b:	0f 84 e4 00 00 00    	je     c0019375 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019291:	85 ed                	test   ebp,ebp
c0019293:	0f 84 dc 00 00 00    	je     c0019375 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019299:	83 ec 0c             	sub    esp,0xc
c001929c:	68 3b 12 02 c0       	push   0xc002123b
c00192a1:	e8 c3 13 ff ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c00192a6:	89 d8                	mov    eax,ebx
c00192a8:	b9 02 00 00 00       	mov    ecx,0x2
c00192ad:	99                   	cdq    
c00192ae:	f7 f9                	idiv   ecx
c00192b0:	83 e8 32             	sub    eax,0x32
c00192b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00192b6:	e8 24 d3 fe ff       	call   c00065df <iso_readdir>
c00192bb:	83 c4 10             	add    esp,0x10
c00192be:	89 c3                	mov    ebx,eax
c00192c0:	85 c0                	test   eax,eax
c00192c2:	75 38                	jne    c00192fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00192c4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00192c9:	53                   	push   ebx
c00192ca:	53                   	push   ebx
c00192cb:	68 46 12 02 c0       	push   0xc0021246
c00192d0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00192d6:	e8 87 f5 fe ff       	call   c0008862 <VgaText::puts(char const*)>
c00192db:	83 c4 0c             	add    esp,0xc
c00192de:	68 10 01 00 00       	push   0x110
c00192e3:	6a 00                	push   0x0
c00192e5:	57                   	push   edi
c00192e6:	e8 95 72 fe ff       	call   c0000580 <memset>
c00192eb:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	b8 01 00 00 00       	mov    eax,0x1
c00192fa:	eb 7e                	jmp    c001937a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00192fc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019302:	8d 70 08             	lea    esi,[eax+0x8]
c0019305:	83 ec 0c             	sub    esp,0xc
c0019308:	56                   	push   esi
c0019309:	e8 a2 72 fe ff       	call   c00005b0 <strlen>
c001930e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019316:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019321:	75 0a                	jne    c001932d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019323:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019326:	b8 02 00 00 00       	mov    eax,0x2
c001932b:	74 05                	je     c0019332 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001932d:	b8 01 00 00 00       	mov    eax,0x1
c0019332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019336:	50                   	push   eax
c0019337:	50                   	push   eax
c0019338:	56                   	push   esi
c0019339:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001933d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019341:	50                   	push   eax
c0019342:	e8 39 73 fe ff       	call   c0000680 <strcpy>
c0019347:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001934e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019350:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019357:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001935c:	5a                   	pop    edx
c001935d:	59                   	pop    ecx
c001935e:	68 59 12 02 c0       	push   0xc0021259
c0019363:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019369:	e8 f4 f4 fe ff       	call   c0008862 <VgaText::puts(char const*)>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	31 c0                	xor    eax,eax
c0019373:	eb 05                	jmp    c001937a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019375:	b8 04 00 00 00       	mov    eax,0x4
c001937a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019380:	5b                   	pop    ebx
c0019381:	5e                   	pop    esi
c0019382:	5f                   	pop    edi
c0019383:	5d                   	pop    ebp
c0019384:	c3                   	ret    

c0019385 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019385:	57                   	push   edi
c0019386:	56                   	push   esi
c0019387:	53                   	push   ebx
c0019388:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001938c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019390:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019394:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c001939a:	75 08                	jne    c00193a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001939c:	38 1d a4 1d 02 c0    	cmp    BYTE PTR ds:0xc0021da4,bl
c00193a2:	74 4a                	je     c00193ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00193a4:	83 ec 0c             	sub    esp,0xc
c00193a7:	31 d2                	xor    edx,edx
c00193a9:	0f be c3             	movsx  eax,bl
c00193ac:	68 40 73 02 c0       	push   0xc0027340
c00193b1:	6a 01                	push   0x1
c00193b3:	52                   	push   edx
c00193b4:	56                   	push   esi
c00193b5:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c00193bc:	e8 17 3a ff ff       	call   c000cdd8 <LogicalDisk::read(unsigned long long, int, void*)>
c00193c1:	83 c4 20             	add    esp,0x20
c00193c4:	85 c0                	test   eax,eax
c00193c6:	75 0e                	jne    c00193d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00193c8:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c00193ce:	88 1d a4 1d 02 c0    	mov    BYTE PTR ds:0xc0021da4,bl
c00193d4:	eb 18                	jmp    c00193ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00193d6:	50                   	push   eax
c00193d7:	68 00 08 00 00       	push   0x800
c00193dc:	6a 00                	push   0x0
c00193de:	57                   	push   edi
c00193df:	e8 9c 71 fe ff       	call   c0000580 <memset>
c00193e4:	83 c4 10             	add    esp,0x10
c00193e7:	b8 01 00 00 00       	mov    eax,0x1
c00193ec:	eb 0e                	jmp    c00193fc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00193ee:	be 40 73 02 c0       	mov    esi,0xc0027340
c00193f3:	b9 00 08 00 00       	mov    ecx,0x800
c00193f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193fa:	31 c0                	xor    eax,eax
c00193fc:	5b                   	pop    ebx
c00193fd:	5e                   	pop    esi
c00193fe:	5f                   	pop    edi
c00193ff:	c3                   	ret    

c0019400 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019400:	53                   	push   ebx
c0019401:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019407:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0019411:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019418:	8d 58 41             	lea    ebx,[eax+0x41]
c001941b:	0f be db             	movsx  ebx,bl
c001941e:	53                   	push   ebx
c001941f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019423:	50                   	push   eax
c0019424:	6a 10                	push   0x10
c0019426:	e8 5a ff ff ff       	call   c0019385 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	31 d2                	xor    edx,edx
c0019430:	85 c0                	test   eax,eax
c0019432:	75 33                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019434:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019439:	75 2c                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001943b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019440:	75 25                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019442:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019447:	75 1e                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019449:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001944e:	75 17                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019450:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019455:	75 10                	jne    c0019467 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019457:	83 ec 0c             	sub    esp,0xc
c001945a:	53                   	push   ebx
c001945b:	e8 05 d4 fe ff       	call   c0006865 <init_percd>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	40                   	inc    eax
c0019464:	0f 95 c2             	setne  dl
c0019467:	81 c4 08 08 00 00    	add    esp,0x808
c001946d:	88 d0                	mov    al,dl
c001946f:	5b                   	pop    ebx
c0019470:	c3                   	ret    
c0019471:	90                   	nop

c0019472 <ISO9660::ISO9660()>:
c0019472:	83 ec 0c             	sub    esp,0xc
c0019475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019479:	83 ec 0c             	sub    esp,0xc
c001947c:	50                   	push   eax
c001947d:	e8 fc 14 ff ff       	call   c000a97e <Filesystem::Filesystem()>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	ba 74 12 02 c0       	mov    edx,0xc0021274
c001948a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001948e:	89 10                	mov    DWORD PTR [eax],edx
c0019490:	e8 e2 d4 fe ff       	call   c0006977 <fs_iso9660_init>
c0019495:	90                   	nop
c0019496:	83 c4 0c             	add    esp,0xc
c0019499:	c3                   	ret    

c001949a <SoundCard::beginPlayback()>:
c001949a:	c7 44 24 04 d4 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc00212d4
c00194a2:	e9 16 70 ff ff       	jmp    c00104bd <KePanic(char const*)>
c00194a7:	90                   	nop

c00194a8 <SoundCard::stopPlayback()>:
c00194a8:	c7 44 24 04 d4 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc00212d4
c00194b0:	e9 08 70 ff ff       	jmp    c00104bd <KePanic(char const*)>
c00194b5:	90                   	nop

c00194b6 <SoundCard::SoundCard(char const*)>:
c00194b6:	83 ec 1c             	sub    esp,0x1c
c00194b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194bd:	83 ec 08             	sub    esp,0x8
c00194c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194c4:	50                   	push   eax
c00194c5:	e8 86 27 ff ff       	call   c000bc50 <Device::Device(char const*)>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	ba 20 13 02 c0       	mov    edx,0xc0021320
c00194d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194d6:	89 10                	mov    DWORD PTR [eax],edx
c00194d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194dc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00194e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00194f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194f5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00194ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019503:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001950d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019511:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001951b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019523:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019528:	7f 19                	jg     c0019543 <SoundCard::SoundCard(char const*)+0x8d>
c001952a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001952e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019532:	83 c2 50             	add    edx,0x50
c0019535:	c7 44 90 18 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x18],0x0
c001953d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019541:	eb e0                	jmp    c0019523 <SoundCard::SoundCard(char const*)+0x6d>
c0019543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019547:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001954e:	90                   	nop
c001954f:	83 c4 1c             	add    esp,0x1c
c0019552:	c3                   	ret    
c0019553:	90                   	nop

c0019554 <SoundCard::~SoundCard()>:
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	ba 20 13 02 c0       	mov    edx,0xc0021320
c001955c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019560:	89 10                	mov    DWORD PTR [eax],edx
c0019562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019566:	83 ec 0c             	sub    esp,0xc
c0019569:	50                   	push   eax
c001956a:	e8 4b 24 ff ff       	call   c000b9ba <Device::~Device()>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	90                   	nop
c0019573:	83 c4 0c             	add    esp,0xc
c0019576:	c3                   	ret    
c0019577:	90                   	nop

c0019578 <SoundCard::~SoundCard()>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	83 ec 0c             	sub    esp,0xc
c001957e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019582:	e8 cd ff ff ff       	call   c0019554 <SoundCard::~SoundCard()>
c0019587:	83 c4 10             	add    esp,0x10
c001958a:	83 ec 08             	sub    esp,0x8
c001958d:	68 e8 01 00 00       	push   0x1e8
c0019592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019596:	e8 d9 0f ff ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001959b:	83 c4 10             	add    esp,0x10
c001959e:	83 c4 0c             	add    esp,0xc
c00195a1:	c3                   	ret    

c00195a2 <SoundCard::configureRates(int, int, int)>:
c00195a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195a6:	31 c0                	xor    eax,eax
c00195a8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00195af:	75 20                	jne    c00195d1 <SoundCard::configureRates(int, int, int)+0x2f>
c00195b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195b5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00195bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195bf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00195c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00195cf:	b0 01                	mov    al,0x1
c00195d1:	c3                   	ret    

c00195d2 <SoundCard::getSamples16(int, short*)>:
c00195d2:	55                   	push   ebp
c00195d3:	57                   	push   edi
c00195d4:	31 ff                	xor    edi,edi
c00195d6:	56                   	push   esi
c00195d7:	53                   	push   ebx
c00195d8:	31 db                	xor    ebx,ebx
c00195da:	83 ec 10             	sub    esp,0x10
c00195dd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00195e1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00195e5:	8d 04 36             	lea    eax,[esi+esi*1]
c00195e8:	50                   	push   eax
c00195e9:	6a 00                	push   0x0
c00195eb:	55                   	push   ebp
c00195ec:	e8 8f 6f fe ff       	call   c0000580 <memset>
c00195f1:	83 c4 10             	add    esp,0x10
c00195f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195f8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c00195ff:	85 c0                	test   eax,eax
c0019601:	74 1a                	je     c001961d <SoundCard::getSamples16(int, short*)+0x4b>
c0019603:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019607:	75 14                	jne    c001961d <SoundCard::getSamples16(int, short*)+0x4b>
c0019609:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001960d:	55                   	push   ebp
c001960e:	56                   	push   esi
c001960f:	50                   	push   eax
c0019610:	e8 e3 02 00 00       	call   c00198f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	39 c3                	cmp    ebx,eax
c001961a:	0f 4c d8             	cmovl  ebx,eax
c001961d:	47                   	inc    edi
c001961e:	83 ff 20             	cmp    edi,0x20
c0019621:	75 d1                	jne    c00195f4 <SoundCard::getSamples16(int, short*)+0x22>
c0019623:	83 c4 0c             	add    esp,0xc
c0019626:	89 d8                	mov    eax,ebx
c0019628:	5b                   	pop    ebx
c0019629:	5e                   	pop    esi
c001962a:	5f                   	pop    edi
c001962b:	5d                   	pop    ebp
c001962c:	c3                   	ret    
c001962d:	90                   	nop

c001962e <SoundCard::getSamples32(int, int*)>:
c001962e:	55                   	push   ebp
c001962f:	57                   	push   edi
c0019630:	31 ff                	xor    edi,edi
c0019632:	56                   	push   esi
c0019633:	31 f6                	xor    esi,esi
c0019635:	53                   	push   ebx
c0019636:	83 ec 10             	sub    esp,0x10
c0019639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001963d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019641:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019645:	c1 e0 02             	shl    eax,0x2
c0019648:	50                   	push   eax
c0019649:	6a 00                	push   0x0
c001964b:	55                   	push   ebp
c001964c:	e8 2f 6f fe ff       	call   c0000580 <memset>
c0019651:	83 c4 10             	add    esp,0x10
c0019654:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001965b:	85 c0                	test   eax,eax
c001965d:	74 1a                	je     c0019679 <SoundCard::getSamples32(int, int*)+0x4b>
c001965f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019663:	75 14                	jne    c0019679 <SoundCard::getSamples32(int, int*)+0x4b>
c0019665:	53                   	push   ebx
c0019666:	55                   	push   ebp
c0019667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001966b:	50                   	push   eax
c001966c:	e8 4b 03 00 00       	call   c00199bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	39 c6                	cmp    esi,eax
c0019676:	0f 4c f0             	cmovl  esi,eax
c0019679:	47                   	inc    edi
c001967a:	83 ff 20             	cmp    edi,0x20
c001967d:	75 d5                	jne    c0019654 <SoundCard::getSamples32(int, int*)+0x26>
c001967f:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019685:	85 f6                	test   esi,esi
c0019687:	75 0f                	jne    c0019698 <SoundCard::getSamples32(int, int*)+0x6a>
c0019689:	84 c0                	test   al,al
c001968b:	74 1b                	je     c00196a8 <SoundCard::getSamples32(int, int*)+0x7a>
c001968d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	53                   	push   ebx
c0019693:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019696:	eb 0d                	jmp    c00196a5 <SoundCard::getSamples32(int, int*)+0x77>
c0019698:	84 c0                	test   al,al
c001969a:	75 0c                	jne    c00196a8 <SoundCard::getSamples32(int, int*)+0x7a>
c001969c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001969e:	83 ec 0c             	sub    esp,0xc
c00196a1:	53                   	push   ebx
c00196a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00196a5:	83 c4 10             	add    esp,0x10
c00196a8:	83 c4 0c             	add    esp,0xc
c00196ab:	89 f0                	mov    eax,esi
c00196ad:	5b                   	pop    ebx
c00196ae:	5e                   	pop    esi
c00196af:	5f                   	pop    edi
c00196b0:	5d                   	pop    ebp
c00196b1:	c3                   	ret    

c00196b2 <SoundCard::addChannel(SoundPort*)>:
c00196b2:	83 ec 0c             	sub    esp,0xc
c00196b5:	31 c0                	xor    eax,eax
c00196b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196bb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00196c3:	74 1b                	je     c00196e0 <SoundCard::addChannel(SoundPort*)+0x2e>
c00196c5:	40                   	inc    eax
c00196c6:	83 f8 20             	cmp    eax,0x20
c00196c9:	75 f0                	jne    c00196bb <SoundCard::addChannel(SoundPort*)+0x9>
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	68 f9 12 02 c0       	push   0xc00212f9
c00196d3:	e8 e5 6d ff ff       	call   c00104bd <KePanic(char const*)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	83 c8 ff             	or     eax,0xffffffff
c00196de:	eb 0b                	jmp    c00196eb <SoundCard::addChannel(SoundPort*)+0x39>
c00196e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00196e4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00196eb:	83 c4 0c             	add    esp,0xc
c00196ee:	c3                   	ret    
c00196ef:	90                   	nop

c00196f0 <SoundCard::removeChannel(int)>:
c00196f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196f8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019703:	c3                   	ret    

c0019704 <SoundPort::SoundPort(int, int, int, int)>:
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001970b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019716:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001971a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001971e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019722:	89 10                	mov    DWORD PTR [eax],edx
c0019724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001972c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001972f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019733:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019737:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001973a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001973f:	75 13                	jne    c0019754 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019745:	8b 00                	mov    eax,DWORD PTR [eax]
c0019747:	05 a0 0f 00 00       	add    eax,0xfa0
c001974c:	01 c0                	add    eax,eax
c001974e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019752:	66 90                	xchg   ax,ax
c0019754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019758:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001975c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001975f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019763:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001976a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001976e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019771:	c1 e0 02             	shl    eax,0x2
c0019774:	83 ec 0c             	sub    esp,0xc
c0019777:	50                   	push   eax
c0019778:	e8 fe e0 fe ff       	call   c000787b <malloc>
c001977d:	83 c4 10             	add    esp,0x10
c0019780:	89 c2                	mov    edx,eax
c0019782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019786:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019789:	90                   	nop
c001978a:	83 c4 0c             	add    esp,0xc
c001978d:	c3                   	ret    
c001978e:	66 90                	xchg   ax,ax

c0019790 <SoundPort::~SoundPort()>:
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019797:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001979a:	85 c0                	test   eax,eax
c001979c:	74 1e                	je     c00197bc <SoundPort::~SoundPort()+0x2c>
c001979e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00197a5:	83 ec 0c             	sub    esp,0xc
c00197a8:	50                   	push   eax
c00197a9:	e8 dd e0 fe ff       	call   c000788b <free>
c00197ae:	83 c4 10             	add    esp,0x10
c00197b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197b5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00197bc:	90                   	nop
c00197bd:	83 c4 0c             	add    esp,0xc
c00197c0:	c3                   	ret    
c00197c1:	90                   	nop
c00197c2:	66 90                	xchg   ax,ax

c00197c4 <SoundPort::unpause()>:
c00197c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00197cc:	c3                   	ret    
c00197cd:	90                   	nop
c00197ce:	66 90                	xchg   ax,ax

c00197d0 <SoundPort::pause()>:
c00197d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197d4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00197d8:	c3                   	ret    
c00197d9:	90                   	nop
c00197da:	66 90                	xchg   ax,ax

c00197dc <SoundPort::getBufferUsed()>:
c00197dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00197e3:	c3                   	ret    

c00197e4 <SoundPort::getBufferSize()>:
c00197e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00197eb:	c3                   	ret    

c00197ec <SoundPort::buffer16(short*, int)>:
c00197ec:	55                   	push   ebp
c00197ed:	31 c0                	xor    eax,eax
c00197ef:	57                   	push   edi
c00197f0:	56                   	push   esi
c00197f1:	53                   	push   ebx
c00197f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00197f6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00197fa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197fd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019800:	74 5a                	je     c001985c <SoundPort::buffer16(short*, int)+0x70>
c0019802:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019806:	85 db                	test   ebx,ebx
c0019808:	7e 52                	jle    c001985c <SoundPort::buffer16(short*, int)+0x70>
c001980a:	0f bf 45 00          	movsx  eax,WORD PTR [ebp+0x0]
c001980e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019811:	8d 71 01             	lea    esi,[ecx+0x1]
c0019814:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019817:	c1 e0 0f             	shl    eax,0xf
c001981a:	89 04 8b             	mov    DWORD PTR [ebx+ecx*4],eax
c001981d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019820:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019823:	74 47                	je     c001986c <SoundPort::buffer16(short*, int)+0x80>
c0019825:	31 f6                	xor    esi,esi
c0019827:	eb 23                	jmp    c001984c <SoundPort::buffer16(short*, int)+0x60>
c0019829:	8d 76 00             	lea    esi,[esi+0x0]
c001982c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019831:	8d 79 01             	lea    edi,[ecx+0x1]
c0019834:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019837:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001983a:	c1 e3 0f             	shl    ebx,0xf
c001983d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019840:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019843:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019846:	74 1c                	je     c0019864 <SoundPort::buffer16(short*, int)+0x78>
c0019848:	89 c6                	mov    esi,eax
c001984a:	66 90                	xchg   ax,ax
c001984c:	8d 46 01             	lea    eax,[esi+0x1]
c001984f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019853:	75 d7                	jne    c001982c <SoundPort::buffer16(short*, int)+0x40>
c0019855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019859:	8d 76 00             	lea    esi,[esi+0x0]
c001985c:	5b                   	pop    ebx
c001985d:	5e                   	pop    esi
c001985e:	5f                   	pop    edi
c001985f:	5d                   	pop    ebp
c0019860:	c3                   	ret    
c0019861:	8d 76 00             	lea    esi,[esi+0x0]
c0019864:	5b                   	pop    ebx
c0019865:	8d 46 02             	lea    eax,[esi+0x2]
c0019868:	5e                   	pop    esi
c0019869:	5f                   	pop    edi
c001986a:	5d                   	pop    ebp
c001986b:	c3                   	ret    
c001986c:	b8 01 00 00 00       	mov    eax,0x1
c0019871:	eb e9                	jmp    c001985c <SoundPort::buffer16(short*, int)+0x70>
c0019873:	90                   	nop

c0019874 <SoundPort::buffer32(int*, int)>:
c0019874:	55                   	push   ebp
c0019875:	31 c0                	xor    eax,eax
c0019877:	57                   	push   edi
c0019878:	56                   	push   esi
c0019879:	53                   	push   ebx
c001987a:	83 ec 04             	sub    esp,0x4
c001987d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019881:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019885:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001988c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001988f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019892:	74 48                	je     c00198dc <SoundPort::buffer32(int*, int)+0x68>
c0019894:	85 db                	test   ebx,ebx
c0019896:	7e 44                	jle    c00198dc <SoundPort::buffer32(int*, int)+0x68>
c0019898:	8d 59 01             	lea    ebx,[ecx+0x1]
c001989b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001989e:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c00198a1:	8b 1f                	mov    ebx,DWORD PTR [edi]
c00198a3:	89 1c 88             	mov    DWORD PTR [eax+ecx*4],ebx
c00198a6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00198a9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00198ac:	74 42                	je     c00198f0 <SoundPort::buffer32(int*, int)+0x7c>
c00198ae:	31 db                	xor    ebx,ebx
c00198b0:	eb 1e                	jmp    c00198d0 <SoundPort::buffer32(int*, int)+0x5c>
c00198b2:	66 90                	xchg   ax,ax
c00198b4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00198b7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00198ba:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00198bd:	8b 34 87             	mov    esi,DWORD PTR [edi+eax*4]
c00198c0:	89 74 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],esi
c00198c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00198c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00198ca:	74 18                	je     c00198e4 <SoundPort::buffer32(int*, int)+0x70>
c00198cc:	89 c3                	mov    ebx,eax
c00198ce:	66 90                	xchg   ax,ax
c00198d0:	8d 43 01             	lea    eax,[ebx+0x1]
c00198d3:	39 04 24             	cmp    DWORD PTR [esp],eax
c00198d6:	75 dc                	jne    c00198b4 <SoundPort::buffer32(int*, int)+0x40>
c00198d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00198db:	90                   	nop
c00198dc:	83 c4 04             	add    esp,0x4
c00198df:	5b                   	pop    ebx
c00198e0:	5e                   	pop    esi
c00198e1:	5f                   	pop    edi
c00198e2:	5d                   	pop    ebp
c00198e3:	c3                   	ret    
c00198e4:	83 c4 04             	add    esp,0x4
c00198e7:	8d 43 02             	lea    eax,[ebx+0x2]
c00198ea:	5b                   	pop    ebx
c00198eb:	5e                   	pop    esi
c00198ec:	5f                   	pop    edi
c00198ed:	5d                   	pop    ebp
c00198ee:	c3                   	ret    
c00198ef:	90                   	nop
c00198f0:	b8 01 00 00 00       	mov    eax,0x1
c00198f5:	eb e5                	jmp    c00198dc <SoundPort::buffer32(int*, int)+0x68>
c00198f7:	90                   	nop

c00198f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00198f8:	55                   	push   ebp
c00198f9:	57                   	push   edi
c00198fa:	56                   	push   esi
c00198fb:	53                   	push   ebx
c00198fc:	83 ec 0c             	sub    esp,0xc
c00198ff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019903:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019907:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001990b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001990f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019915:	39 03                	cmp    DWORD PTR [ebx],eax
c0019917:	74 13                	je     c001992c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019919:	83 ec 0c             	sub    esp,0xc
c001991c:	68 4c 13 02 c0       	push   0xc002134c
c0019921:	e8 97 6b ff ff       	call   c00104bd <KePanic(char const*)>
c0019926:	83 c4 10             	add    esp,0x10
c0019929:	8d 76 00             	lea    esi,[esi+0x0]
c001992c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019932:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019935:	74 11                	je     c0019948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019937:	83 ec 0c             	sub    esp,0xc
c001993a:	68 8b 13 02 c0       	push   0xc002138b
c001993f:	e8 79 6b ff ff       	call   c00104bd <KePanic(char const*)>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	90                   	nop
c0019948:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001994e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019951:	74 11                	je     c0019964 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	68 8b 13 02 c0       	push   0xc002138b
c001995b:	e8 5d 6b ff ff       	call   c00104bd <KePanic(char const*)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	90                   	nop
c0019964:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019967:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001996b:	85 f6                	test   esi,esi
c001996d:	7e 25                	jle    c0019994 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x9c>
c001996f:	31 c0                	xor    eax,eax
c0019971:	8d 76 00             	lea    esi,[esi+0x0]
c0019974:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019977:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001997a:	85 c9                	test   ecx,ecx
c001997c:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019982:	0f 49 d1             	cmovns edx,ecx
c0019985:	c1 fa 0f             	sar    edx,0xf
c0019988:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c001998c:	40                   	inc    eax
c001998d:	39 f0                	cmp    eax,esi
c001998f:	75 e3                	jne    c0019974 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019991:	8d 76 00             	lea    esi,[esi+0x0]
c0019994:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019997:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001999a:	83 ec 04             	sub    esp,0x4
c001999d:	29 f0                	sub    eax,esi
c001999f:	c1 e0 02             	shl    eax,0x2
c00199a2:	50                   	push   eax
c00199a3:	8d 04 b2             	lea    eax,[edx+esi*4]
c00199a6:	50                   	push   eax
c00199a7:	52                   	push   edx
c00199a8:	e8 23 6a fe ff       	call   c00003d0 <memmove>
c00199ad:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00199b0:	83 c4 1c             	add    esp,0x1c
c00199b3:	89 f0                	mov    eax,esi
c00199b5:	5b                   	pop    ebx
c00199b6:	5e                   	pop    esi
c00199b7:	5f                   	pop    edi
c00199b8:	5d                   	pop    ebp
c00199b9:	c3                   	ret    
c00199ba:	66 90                	xchg   ax,ax

c00199bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00199bc:	55                   	push   ebp
c00199bd:	57                   	push   edi
c00199be:	56                   	push   esi
c00199bf:	53                   	push   ebx
c00199c0:	83 ec 0c             	sub    esp,0xc
c00199c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00199c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199cb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00199cf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00199d3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c00199d9:	39 03                	cmp    DWORD PTR [ebx],eax
c00199db:	74 13                	je     c00199f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c00199dd:	83 ec 0c             	sub    esp,0xc
c00199e0:	68 6c 13 02 c0       	push   0xc002136c
c00199e5:	e8 d3 6a ff ff       	call   c00104bd <KePanic(char const*)>
c00199ea:	83 c4 10             	add    esp,0x10
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c00199f6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00199f9:	74 11                	je     c0019a0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	68 a7 13 02 c0       	push   0xc00213a7
c0019a03:	e8 b5 6a ff ff       	call   c00104bd <KePanic(char const*)>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	90                   	nop
c0019a0c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019a12:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019a15:	74 11                	je     c0019a28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019a17:	83 ec 0c             	sub    esp,0xc
c0019a1a:	68 a7 13 02 c0       	push   0xc00213a7
c0019a1f:	e8 99 6a ff ff       	call   c00104bd <KePanic(char const*)>
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	90                   	nop
c0019a28:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019a2b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019a2f:	85 ff                	test   edi,edi
c0019a31:	7e 19                	jle    c0019a4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x90>
c0019a33:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019a3a:	31 c0                	xor    eax,eax
c0019a3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019a3f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019a42:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019a45:	83 c0 04             	add    eax,0x4
c0019a48:	39 c1                	cmp    ecx,eax
c0019a4a:	75 f0                	jne    c0019a3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019a4c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a4f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019a52:	83 ec 04             	sub    esp,0x4
c0019a55:	29 f8                	sub    eax,edi
c0019a57:	c1 e0 02             	shl    eax,0x2
c0019a5a:	50                   	push   eax
c0019a5b:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019a5e:	50                   	push   eax
c0019a5f:	52                   	push   edx
c0019a60:	e8 6b 69 fe ff       	call   c00003d0 <memmove>
c0019a65:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019a68:	83 c4 1c             	add    esp,0x1c
c0019a6b:	89 f8                	mov    eax,edi
c0019a6d:	5b                   	pop    ebx
c0019a6e:	5e                   	pop    esi
c0019a6f:	5f                   	pop    edi
c0019a70:	5d                   	pop    ebp
c0019a71:	c3                   	ret    

c0019a72 <PCI::open(int, int, void*)>:
c0019a72:	83 ec 18             	sub    esp,0x18
c0019a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019a7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019a83:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a85:	50                   	push   eax
c0019a86:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019a89:	31 c0                	xor    eax,eax
c0019a8b:	83 c4 1c             	add    esp,0x1c
c0019a8e:	c3                   	ret    
c0019a8f:	90                   	nop

c0019a90 <PCI::close(int, int, void*)>:
c0019a90:	31 c0                	xor    eax,eax
c0019a92:	c3                   	ret    
c0019a93:	90                   	nop

c0019a94 <PCI::PCI()>:
c0019a94:	83 ec 0c             	sub    esp,0xc
c0019a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a9b:	83 ec 08             	sub    esp,0x8
c0019a9e:	68 c3 13 02 c0       	push   0xc00213c3
c0019aa3:	50                   	push   eax
c0019aa4:	e8 3b 19 ff ff       	call   c000b3e4 <Bus::Bus(char const*)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	ba 6c 14 02 c0       	mov    edx,0xc002146c
c0019ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab5:	89 10                	mov    DWORD PTR [eax],edx
c0019ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac9:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ad2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019ad8:	0f b6 c0             	movzx  eax,al
c0019adb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019adf:	66 c7 44 82 04 f8 0c 	mov    WORD PTR [edx+eax*4+0x4],0xcf8
c0019ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019af0:	0f b6 c0             	movzx  eax,al
c0019af3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af7:	c6 44 82 06 08       	mov    BYTE PTR [edx+eax*4+0x6],0x8
c0019afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019b06:	8d 50 01             	lea    edx,[eax+0x1]
c0019b09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b0d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0019b13:	0f b6 c0             	movzx  eax,al
c0019b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b1a:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c0019b1e:	83 c9 c0             	or     ecx,0xffffffc0
c0019b21:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c0019b25:	90                   	nop
c0019b26:	83 c4 0c             	add    esp,0xc
c0019b29:	c3                   	ret    

c0019b2a <PCI::readBAR8(unsigned int, int)>:
c0019b2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b32:	f6 c2 01             	test   dl,0x1
c0019b35:	74 07                	je     c0019b3e <PCI::readBAR8(unsigned int, int)+0x14>
c0019b37:	83 e2 fc             	and    edx,0xfffffffc
c0019b3a:	01 c2                	add    edx,eax
c0019b3c:	ec                   	in     al,dx
c0019b3d:	c3                   	ret    
c0019b3e:	83 e2 f0             	and    edx,0xfffffff0
c0019b41:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019b44:	c3                   	ret    
c0019b45:	90                   	nop

c0019b46 <PCI::readBAR16(unsigned int, int)>:
c0019b46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b4e:	f6 c2 01             	test   dl,0x1
c0019b51:	74 08                	je     c0019b5b <PCI::readBAR16(unsigned int, int)+0x15>
c0019b53:	83 e2 fc             	and    edx,0xfffffffc
c0019b56:	01 c2                	add    edx,eax
c0019b58:	66 ed                	in     ax,dx
c0019b5a:	c3                   	ret    
c0019b5b:	83 e2 f0             	and    edx,0xfffffff0
c0019b5e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <PCI::readBAR32(unsigned int, int)>:
c0019b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b6c:	f6 c2 01             	test   dl,0x1
c0019b6f:	74 07                	je     c0019b78 <PCI::readBAR32(unsigned int, int)+0x14>
c0019b71:	83 e2 fc             	and    edx,0xfffffffc
c0019b74:	01 c2                	add    edx,eax
c0019b76:	ed                   	in     eax,dx
c0019b77:	c3                   	ret    
c0019b78:	83 e2 f0             	and    edx,0xfffffff0
c0019b7b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019b7e:	c3                   	ret    
c0019b7f:	90                   	nop

c0019b80 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019b80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b8c:	f6 c2 01             	test   dl,0x1
c0019b8f:	74 07                	je     c0019b98 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019b91:	83 e2 fc             	and    edx,0xfffffffc
c0019b94:	01 ca                	add    edx,ecx
c0019b96:	ee                   	out    dx,al
c0019b97:	c3                   	ret    
c0019b98:	83 e2 f0             	and    edx,0xfffffff0
c0019b9b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019b9e:	c3                   	ret    
c0019b9f:	90                   	nop

c0019ba0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ba8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019bac:	f6 c2 01             	test   dl,0x1
c0019baf:	74 08                	je     c0019bb9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019bb1:	83 e2 fc             	and    edx,0xfffffffc
c0019bb4:	01 ca                	add    edx,ecx
c0019bb6:	66 ef                	out    dx,ax
c0019bb8:	c3                   	ret    
c0019bb9:	83 e2 f0             	and    edx,0xfffffff0
c0019bbc:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019bc0:	c3                   	ret    
c0019bc1:	90                   	nop

c0019bc2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019bc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019bce:	f6 c2 01             	test   dl,0x1
c0019bd1:	74 07                	je     c0019bda <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019bd3:	83 e2 fc             	and    edx,0xfffffffc
c0019bd6:	01 ca                	add    edx,ecx
c0019bd8:	ef                   	out    dx,eax
c0019bd9:	c3                   	ret    
c0019bda:	83 e2 f0             	and    edx,0xfffffff0
c0019bdd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019be0:	c3                   	ret    
c0019be1:	90                   	nop

c0019be2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019be2:	55                   	push   ebp
c0019be3:	57                   	push   edi
c0019be4:	56                   	push   esi
c0019be5:	53                   	push   ebx
c0019be6:	83 ec 0c             	sub    esp,0xc
c0019be9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019bed:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019bf1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019bf5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019bf9:	89 f0                	mov    eax,esi
c0019bfb:	3c 07                	cmp    al,0x7
c0019bfd:	76 10                	jbe    c0019c0f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019bff:	83 ec 0c             	sub    esp,0xc
c0019c02:	68 cb 13 02 c0       	push   0xc00213cb
c0019c07:	e8 b1 68 ff ff       	call   c00104bd <KePanic(char const*)>
c0019c0c:	83 c4 10             	add    esp,0x10
c0019c0f:	80 fb 0f             	cmp    bl,0xf
c0019c12:	76 10                	jbe    c0019c24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	68 fb 13 02 c0       	push   0xc00213fb
c0019c1c:	e8 9c 68 ff ff       	call   c00104bd <KePanic(char const*)>
c0019c21:	83 c4 10             	add    esp,0x10
c0019c24:	8d 04 36             	lea    eax,[esi+esi*1]
c0019c27:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019c2c:	83 c8 f0             	or     eax,0xfffffff0
c0019c2f:	ee                   	out    dx,al
c0019c30:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019c35:	89 e8                	mov    eax,ebp
c0019c37:	ee                   	out    dx,al
c0019c38:	89 d8                	mov    eax,ebx
c0019c3a:	66 81 e7 fc 00       	and    di,0xfc
c0019c3f:	83 c4 0c             	add    esp,0xc
c0019c42:	c1 e0 08             	shl    eax,0x8
c0019c45:	5b                   	pop    ebx
c0019c46:	5e                   	pop    esi
c0019c47:	09 f8                	or     eax,edi
c0019c49:	5f                   	pop    edi
c0019c4a:	5d                   	pop    ebp
c0019c4b:	66 0d 00 c0          	or     ax,0xc000
c0019c4f:	c3                   	ret    

c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019c50:	57                   	push   edi
c0019c51:	56                   	push   esi
c0019c52:	53                   	push   ebx
c0019c53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c5f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019c65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c6d:	83 ff 01             	cmp    edi,0x1
c0019c70:	75 41                	jne    c0019cb3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x63>
c0019c72:	89 de                	mov    esi,ebx
c0019c74:	0f b6 c0             	movzx  eax,al
c0019c77:	0f b6 c9             	movzx  ecx,cl
c0019c7a:	0f b6 d2             	movzx  edx,dl
c0019c7d:	c1 e0 10             	shl    eax,0x10
c0019c80:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019c86:	c1 e1 08             	shl    ecx,0x8
c0019c89:	09 f0                	or     eax,esi
c0019c8b:	c1 e2 0b             	shl    edx,0xb
c0019c8e:	09 c8                	or     eax,ecx
c0019c90:	09 d0                	or     eax,edx
c0019c92:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019c97:	0d 00 00 00 80       	or     eax,0x80000000
c0019c9c:	ef                   	out    dx,eax
c0019c9d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019ca2:	ed                   	in     eax,dx
c0019ca3:	83 e3 02             	and    ebx,0x2
c0019ca6:	0f b6 db             	movzx  ebx,bl
c0019ca9:	c1 e3 03             	shl    ebx,0x3
c0019cac:	c4 e2 63 f7 c0       	shrx   eax,eax,ebx
c0019cb1:	eb 46                	jmp    c0019cf9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa9>
c0019cb3:	83 ff 02             	cmp    edi,0x2
c0019cb6:	75 2f                	jne    c0019ce7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x97>
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	0f b6 c9             	movzx  ecx,cl
c0019cbe:	0f b6 d2             	movzx  edx,dl
c0019cc1:	0f b6 fb             	movzx  edi,bl
c0019cc4:	0f b6 c0             	movzx  eax,al
c0019cc7:	57                   	push   edi
c0019cc8:	51                   	push   ecx
c0019cc9:	52                   	push   edx
c0019cca:	50                   	push   eax
c0019ccb:	56                   	push   esi
c0019ccc:	e8 11 ff ff ff       	call   c0019be2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cd1:	89 c2                	mov    edx,eax
c0019cd3:	ed                   	in     eax,dx
c0019cd4:	83 e3 02             	and    ebx,0x2
c0019cd7:	83 c4 20             	add    esp,0x20
c0019cda:	0f b6 db             	movzx  ebx,bl
c0019cdd:	c1 e3 03             	shl    ebx,0x3
c0019ce0:	c4 e2 63 f7 c0       	shrx   eax,eax,ebx
c0019ce5:	eb 12                	jmp    c0019cf9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa9>
c0019ce7:	83 ec 0c             	sub    esp,0xc
c0019cea:	68 2b 14 02 c0       	push   0xc002142b
c0019cef:	e8 c9 67 ff ff       	call   c00104bd <KePanic(char const*)>
c0019cf4:	83 c4 10             	add    esp,0x10
c0019cf7:	31 c0                	xor    eax,eax
c0019cf9:	5b                   	pop    ebx
c0019cfa:	5e                   	pop    esi
c0019cfb:	5f                   	pop    edi
c0019cfc:	c3                   	ret    
c0019cfd:	90                   	nop

c0019cfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019cfe:	83 ec 18             	sub    esp,0x18
c0019d01:	6a 00                	push   0x0
c0019d03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d08:	50                   	push   eax
c0019d09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d0e:	50                   	push   eax
c0019d0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d14:	50                   	push   eax
c0019d15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d19:	e8 32 ff ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d1e:	83 c4 2c             	add    esp,0x2c
c0019d21:	c3                   	ret    

c0019d22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019d22:	83 ec 18             	sub    esp,0x18
c0019d25:	6a 0e                	push   0xe
c0019d27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d2c:	50                   	push   eax
c0019d2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d32:	50                   	push   eax
c0019d33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d38:	50                   	push   eax
c0019d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d3d:	e8 0e ff ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d42:	83 c4 2c             	add    esp,0x2c
c0019d45:	0f b6 c0             	movzx  eax,al
c0019d48:	c3                   	ret    
c0019d49:	90                   	nop

c0019d4a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019d4a:	55                   	push   ebp
c0019d4b:	57                   	push   edi
c0019d4c:	56                   	push   esi
c0019d4d:	53                   	push   ebx
c0019d4e:	83 ec 18             	sub    esp,0x18
c0019d51:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019d56:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019d5b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019d60:	6a 0a                	push   0xa
c0019d62:	56                   	push   esi
c0019d63:	55                   	push   ebp
c0019d64:	57                   	push   edi
c0019d65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d69:	e8 e2 fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d6e:	83 c4 14             	add    esp,0x14
c0019d71:	6a 0a                	push   0xa
c0019d73:	89 c3                	mov    ebx,eax
c0019d75:	56                   	push   esi
c0019d76:	0f b6 db             	movzx  ebx,bl
c0019d79:	55                   	push   ebp
c0019d7a:	57                   	push   edi
c0019d7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d7f:	e8 cc fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d84:	83 c4 2c             	add    esp,0x2c
c0019d87:	25 00 ff 00 00       	and    eax,0xff00
c0019d8c:	09 d8                	or     eax,ebx
c0019d8e:	5b                   	pop    ebx
c0019d8f:	5e                   	pop    esi
c0019d90:	5f                   	pop    edi
c0019d91:	5d                   	pop    ebp
c0019d92:	c3                   	ret    
c0019d93:	90                   	nop

c0019d94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019d94:	83 ec 18             	sub    esp,0x18
c0019d97:	6a 08                	push   0x8
c0019d99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d9e:	50                   	push   eax
c0019d9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019da4:	50                   	push   eax
c0019da5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019daa:	50                   	push   eax
c0019dab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019daf:	e8 9c fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019db4:	83 c4 2c             	add    esp,0x2c
c0019db7:	0f b6 c4             	movzx  eax,ah
c0019dba:	c3                   	ret    
c0019dbb:	90                   	nop

c0019dbc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019dbc:	83 ec 18             	sub    esp,0x18
c0019dbf:	6a 08                	push   0x8
c0019dc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019dc6:	50                   	push   eax
c0019dc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019dcc:	50                   	push   eax
c0019dcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019dd2:	50                   	push   eax
c0019dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019dd7:	e8 74 fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019ddc:	83 c4 2c             	add    esp,0x2c
c0019ddf:	c3                   	ret    

c0019de0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019de0:	83 ec 18             	sub    esp,0x18
c0019de3:	6a 3c                	push   0x3c
c0019de5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019dea:	50                   	push   eax
c0019deb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019df0:	50                   	push   eax
c0019df1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019df6:	50                   	push   eax
c0019df7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019dfb:	e8 50 fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e00:	83 c4 2c             	add    esp,0x2c
c0019e03:	c3                   	ret    

c0019e04 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019e04:	83 ec 18             	sub    esp,0x18
c0019e07:	6a 18                	push   0x18
c0019e09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019e0e:	50                   	push   eax
c0019e0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019e14:	50                   	push   eax
c0019e15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019e1a:	50                   	push   eax
c0019e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e1f:	e8 2c fe ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e24:	83 c4 2c             	add    esp,0x2c
c0019e27:	0f b6 c4             	movzx  eax,ah
c0019e2a:	c3                   	ret    
c0019e2b:	90                   	nop

c0019e2c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019e2c:	55                   	push   ebp
c0019e2d:	57                   	push   edi
c0019e2e:	56                   	push   esi
c0019e2f:	53                   	push   ebx
c0019e30:	83 ec 28             	sub    esp,0x28
c0019e33:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019e37:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019e3c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019e41:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c0019e46:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019e4d:	8d 43 12             	lea    eax,[ebx+0x12]
c0019e50:	83 c3 10             	add    ebx,0x10
c0019e53:	0f b6 c0             	movzx  eax,al
c0019e56:	0f b6 db             	movzx  ebx,bl
c0019e59:	50                   	push   eax
c0019e5a:	56                   	push   esi
c0019e5b:	57                   	push   edi
c0019e5c:	55                   	push   ebp
c0019e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019e61:	e8 ea fd ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e66:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0019e6b:	83 c4 14             	add    esp,0x14
c0019e6e:	53                   	push   ebx
c0019e6f:	56                   	push   esi
c0019e70:	57                   	push   edi
c0019e71:	55                   	push   ebp
c0019e72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019e76:	e8 d5 fd ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019e7f:	83 c4 3c             	add    esp,0x3c
c0019e82:	0f b7 c0             	movzx  eax,ax
c0019e85:	5b                   	pop    ebx
c0019e86:	c1 e6 10             	shl    esi,0x10
c0019e89:	09 f0                	or     eax,esi
c0019e8b:	5e                   	pop    esi
c0019e8c:	5f                   	pop    edi
c0019e8d:	5d                   	pop    ebp
c0019e8e:	c3                   	ret    
c0019e8f:	90                   	nop

c0019e90 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019e90:	55                   	push   ebp
c0019e91:	57                   	push   edi
c0019e92:	56                   	push   esi
c0019e93:	53                   	push   ebx
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019ea3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ea7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c0019ead:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019eb1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019eb5:	83 f9 01             	cmp    ecx,0x1
c0019eb8:	75 61                	jne    c0019f1b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x8b>
c0019eba:	0f b6 c8             	movzx  ecx,al
c0019ebd:	89 f0                	mov    eax,esi
c0019ebf:	0f b6 d2             	movzx  edx,dl
c0019ec2:	c1 e1 10             	shl    ecx,0x10
c0019ec5:	25 fc 00 00 00       	and    eax,0xfc
c0019eca:	c1 e2 0b             	shl    edx,0xb
c0019ecd:	09 c1                	or     ecx,eax
c0019ecf:	89 f8                	mov    eax,edi
c0019ed1:	0f b6 f8             	movzx  edi,al
c0019ed4:	c1 e7 08             	shl    edi,0x8
c0019ed7:	09 f9                	or     ecx,edi
c0019ed9:	09 d1                	or     ecx,edx
c0019edb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019ee0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019ee6:	89 c8                	mov    eax,ecx
c0019ee8:	ef                   	out    dx,eax
c0019ee9:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019eee:	ed                   	in     eax,dx
c0019eef:	83 e6 02             	and    esi,0x2
c0019ef2:	0f b7 db             	movzx  ebx,bx
c0019ef5:	74 0e                	je     c0019f05 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x75>
c0019ef7:	0f b7 d0             	movzx  edx,ax
c0019efa:	89 d8                	mov    eax,ebx
c0019efc:	c1 e0 10             	shl    eax,0x10
c0019eff:	09 d0                	or     eax,edx
c0019f01:	89 c3                	mov    ebx,eax
c0019f03:	eb 05                	jmp    c0019f0a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7a>
c0019f05:	66 31 c0             	xor    ax,ax
c0019f08:	09 c3                	or     ebx,eax
c0019f0a:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019f0f:	89 c8                	mov    eax,ecx
c0019f11:	ef                   	out    dx,eax
c0019f12:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019f17:	89 d8                	mov    eax,ebx
c0019f19:	eb 41                	jmp    c0019f5c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xcc>
c0019f1b:	83 f9 02             	cmp    ecx,0x2
c0019f1e:	75 45                	jne    c0019f65 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd5>
c0019f20:	89 f1                	mov    ecx,esi
c0019f22:	83 ec 0c             	sub    esp,0xc
c0019f25:	0f b6 d2             	movzx  edx,dl
c0019f28:	0f b6 c0             	movzx  eax,al
c0019f2b:	0f b6 f1             	movzx  esi,cl
c0019f2e:	89 f9                	mov    ecx,edi
c0019f30:	0f b6 f9             	movzx  edi,cl
c0019f33:	56                   	push   esi
c0019f34:	57                   	push   edi
c0019f35:	52                   	push   edx
c0019f36:	50                   	push   eax
c0019f37:	55                   	push   ebp
c0019f38:	e8 a5 fc ff ff       	call   c0019be2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019f3d:	89 c2                	mov    edx,eax
c0019f3f:	ed                   	in     eax,dx
c0019f40:	0f b7 db             	movzx  ebx,bx
c0019f43:	83 c4 20             	add    esp,0x20
c0019f46:	f6 c2 02             	test   dl,0x2
c0019f49:	74 0c                	je     c0019f57 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc7>
c0019f4b:	0f b7 c8             	movzx  ecx,ax
c0019f4e:	89 d8                	mov    eax,ebx
c0019f50:	c1 e0 10             	shl    eax,0x10
c0019f53:	09 c8                	or     eax,ecx
c0019f55:	eb 05                	jmp    c0019f5c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xcc>
c0019f57:	66 31 c0             	xor    ax,ax
c0019f5a:	09 d8                	or     eax,ebx
c0019f5c:	ef                   	out    dx,eax
c0019f5d:	83 c4 0c             	add    esp,0xc
c0019f60:	5b                   	pop    ebx
c0019f61:	5e                   	pop    esi
c0019f62:	5f                   	pop    edi
c0019f63:	5d                   	pop    ebp
c0019f64:	c3                   	ret    
c0019f65:	c7 44 24 20 2b 14 02 c0 	mov    DWORD PTR [esp+0x20],0xc002142b
c0019f6d:	83 c4 0c             	add    esp,0xc
c0019f70:	5b                   	pop    ebx
c0019f71:	5e                   	pop    esi
c0019f72:	5f                   	pop    edi
c0019f73:	5d                   	pop    ebp
c0019f74:	e9 44 65 ff ff       	jmp    c00104bd <KePanic(char const*)>
c0019f79:	90                   	nop

c0019f7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019f7a:	55                   	push   ebp
c0019f7b:	57                   	push   edi
c0019f7c:	56                   	push   esi
c0019f7d:	53                   	push   ebx
c0019f7e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f84:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019f8b:	8b b4 24 64 01 00 00 	mov    esi,DWORD PTR [esp+0x164]
c0019f92:	0f 85 bd 00 00 00    	jne    c001a055 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c0019f98:	83 ec 0c             	sub    esp,0xc
c0019f9b:	68 14 01 00 00       	push   0x114
c0019fa0:	e8 d6 d8 fe ff       	call   c000787b <malloc>
c0019fa5:	83 c4 0c             	add    esp,0xc
c0019fa8:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019fae:	68 31 14 02 c0       	push   0xc0021431
c0019fb3:	89 c3                	mov    ebx,eax
c0019fb5:	50                   	push   eax
c0019fb6:	e8 17 0c ff ff       	call   c000abd2 <File::File(char const*, Process*)>
c0019fbb:	83 c4 10             	add    esp,0x10
c0019fbe:	85 db                	test   ebx,ebx
c0019fc0:	0f 84 4b 02 00 00    	je     c001a211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x297>
c0019fc6:	57                   	push   edi
c0019fc7:	57                   	push   edi
c0019fc8:	6a 01                	push   0x1
c0019fca:	53                   	push   ebx
c0019fcb:	e8 bc 0c ff ff       	call   c000ac8c <File::open(FileOpenMode)>
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	85 c0                	test   eax,eax
c0019fd5:	0f 85 36 02 00 00    	jne    c001a211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x297>
c0019fdb:	52                   	push   edx
c0019fdc:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019fe0:	50                   	push   eax
c0019fe1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019fe5:	50                   	push   eax
c0019fe6:	53                   	push   ebx
c0019fe7:	e8 4c 0f ff ff       	call   c000af38 <File::stat(unsigned long long*, bool*)>
c0019fec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ff0:	40                   	inc    eax
c0019ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ff4:	e8 82 d8 fe ff       	call   c000787b <malloc>
c0019ff9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ffd:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c001a002:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a006:	59                   	pop    ecx
c001a007:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001a00b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a00d:	51                   	push   ecx
c001a00e:	50                   	push   eax
c001a00f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001a013:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001a017:	53                   	push   ebx
c001a018:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a01b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001a01f:	83 c4 20             	add    esp,0x20
c001a022:	89 c8                	mov    eax,ecx
c001a024:	99                   	cdq    
c001a025:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c001a029:	0f 85 e2 01 00 00    	jne    c001a211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x297>
c001a02f:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c001a033:	0f 85 d8 01 00 00    	jne    c001a211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x297>
c001a039:	83 ec 0c             	sub    esp,0xc
c001a03c:	53                   	push   ebx
c001a03d:	e8 a8 0c ff ff       	call   c000acea <File::close()>
c001a042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c001a050:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c001a055:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001a05d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001a064:	31 d2                	xor    edx,edx
c001a066:	31 ed                	xor    ebp,ebp
c001a068:	8b 3d 44 7b 02 c0    	mov    edi,DWORD PTR ds:0xc0027b44
c001a06e:	8b 0d 48 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b48
c001a074:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001a079:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a081:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001a086:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001a08d:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a091:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001a098:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a09c:	39 d7                	cmp    edi,edx
c001a09e:	0f 8e 6d 01 00 00    	jle    c001a211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x297>
c001a0a4:	8a 04 11             	mov    al,BYTE PTR [ecx+edx*1]
c001a0a7:	d4 40                	aam    0x40
c001a0a9:	d5 39                	aad    0x39
c001a0ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0af:	8a 44 11 01          	mov    al,BYTE PTR [ecx+edx*1+0x1]
c001a0b3:	d4 40                	aam    0x40
c001a0b5:	d5 39                	aad    0x39
c001a0b7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a0bb:	8a 44 11 03          	mov    al,BYTE PTR [ecx+edx*1+0x3]
c001a0bf:	d4 40                	aam    0x40
c001a0c1:	d5 39                	aad    0x39
c001a0c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a0c7:	8a 44 11 04          	mov    al,BYTE PTR [ecx+edx*1+0x4]
c001a0cb:	d4 40                	aam    0x40
c001a0cd:	d5 39                	aad    0x39
c001a0cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a0d3:	8a 44 11 06          	mov    al,BYTE PTR [ecx+edx*1+0x6]
c001a0d7:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c001a0db:	3c 56                	cmp    al,0x56
c001a0dd:	74 45                	je     c001a124 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1aa>
c001a0df:	d4 40                	aam    0x40
c001a0e1:	d5 39                	aad    0x39
c001a0e3:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a0e6:	8a 44 11 07          	mov    al,BYTE PTR [ecx+edx*1+0x7]
c001a0ea:	0f b6 db             	movzx  ebx,bl
c001a0ed:	c1 e3 04             	shl    ebx,0x4
c001a0f0:	d4 40                	aam    0x40
c001a0f2:	d5 39                	aad    0x39
c001a0f4:	83 e8 30             	sub    eax,0x30
c001a0f7:	0f b6 c0             	movzx  eax,al
c001a0fa:	09 c3                	or     ebx,eax
c001a0fc:	8a 44 11 08          	mov    al,BYTE PTR [ecx+edx*1+0x8]
c001a100:	c1 e3 04             	shl    ebx,0x4
c001a103:	d4 40                	aam    0x40
c001a105:	d5 39                	aad    0x39
c001a107:	83 e8 30             	sub    eax,0x30
c001a10a:	0f b6 c0             	movzx  eax,al
c001a10d:	09 c3                	or     ebx,eax
c001a10f:	8a 44 11 09          	mov    al,BYTE PTR [ecx+edx*1+0x9]
c001a113:	c1 e3 04             	shl    ebx,0x4
c001a116:	d4 40                	aam    0x40
c001a118:	d5 39                	aad    0x39
c001a11a:	83 e8 30             	sub    eax,0x30
c001a11d:	0f b6 c0             	movzx  eax,al
c001a120:	09 d8                	or     eax,ebx
c001a122:	89 c5                	mov    ebp,eax
c001a124:	8a 44 11 0b          	mov    al,BYTE PTR [ecx+edx*1+0xb]
c001a128:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a12c:	3c 58                	cmp    al,0x58
c001a12e:	74 48                	je     c001a178 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c001a130:	d4 40                	aam    0x40
c001a132:	d5 39                	aad    0x39
c001a134:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a137:	8a 44 11 0c          	mov    al,BYTE PTR [ecx+edx*1+0xc]
c001a13b:	0f b6 db             	movzx  ebx,bl
c001a13e:	c1 e3 04             	shl    ebx,0x4
c001a141:	d4 40                	aam    0x40
c001a143:	d5 39                	aad    0x39
c001a145:	83 e8 30             	sub    eax,0x30
c001a148:	0f b6 c0             	movzx  eax,al
c001a14b:	09 c3                	or     ebx,eax
c001a14d:	8a 44 11 0d          	mov    al,BYTE PTR [ecx+edx*1+0xd]
c001a151:	c1 e3 04             	shl    ebx,0x4
c001a154:	d4 40                	aam    0x40
c001a156:	d5 39                	aad    0x39
c001a158:	83 e8 30             	sub    eax,0x30
c001a15b:	0f b6 c0             	movzx  eax,al
c001a15e:	09 c3                	or     ebx,eax
c001a160:	8a 44 11 0e          	mov    al,BYTE PTR [ecx+edx*1+0xe]
c001a164:	c1 e3 04             	shl    ebx,0x4
c001a167:	d4 40                	aam    0x40
c001a169:	d5 39                	aad    0x39
c001a16b:	83 e8 30             	sub    eax,0x30
c001a16e:	0f b6 c0             	movzx  eax,al
c001a171:	09 d8                	or     eax,ebx
c001a173:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001a178:	83 c2 10             	add    edx,0x10
c001a17b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a17f:	8a 1c 11             	mov    bl,BYTE PTR [ecx+edx*1]
c001a182:	80 fb 0a             	cmp    bl,0xa
c001a185:	74 07                	je     c001a18e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x214>
c001a187:	40                   	inc    eax
c001a188:	39 d7                	cmp    edi,edx
c001a18a:	75 15                	jne    c001a1a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x227>
c001a18c:	89 fa                	mov    edx,edi
c001a18e:	31 c0                	xor    eax,eax
c001a190:	80 fb 0a             	cmp    bl,0xa
c001a193:	0f 94 c0             	sete   al
c001a196:	01 c2                	add    edx,eax
c001a198:	80 7c 24 02 56       	cmp    BYTE PTR [esp+0x2],0x56
c001a19d:	75 0b                	jne    c001a1aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c001a19f:	eb 14                	jmp    c001a1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23b>
c001a1a1:	42                   	inc    edx
c001a1a2:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c001a1a5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a1a8:	eb d5                	jmp    c001a17f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a1aa:	66 39 6c 24 06       	cmp    WORD PTR [esp+0x6],bp
c001a1af:	0f 85 e7 fe ff ff    	jne    c001a09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x122>
c001a1b5:	80 7c 24 03 58       	cmp    BYTE PTR [esp+0x3],0x58
c001a1ba:	74 0f                	je     c001a1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x251>
c001a1bc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a1c0:	66 39 5c 24 08       	cmp    WORD PTR [esp+0x8],bx
c001a1c5:	0f 85 d1 fe ff ff    	jne    c001a09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x122>
c001a1cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001a1cf:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a1d3:	c1 e3 04             	shl    ebx,0x4
c001a1d6:	83 e8 30             	sub    eax,0x30
c001a1d9:	09 d8                	or     eax,ebx
c001a1db:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001a1df:	0f 85 b7 fe ff ff    	jne    c001a09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x122>
c001a1e5:	8a 5c 24 0e          	mov    bl,BYTE PTR [esp+0xe]
c001a1e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a1ed:	c1 e3 04             	shl    ebx,0x4
c001a1f0:	83 e8 30             	sub    eax,0x30
c001a1f3:	09 d8                	or     eax,ebx
c001a1f5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001a1f9:	0f 85 9d fe ff ff    	jne    c001a09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x122>
c001a1ff:	50                   	push   eax
c001a200:	50                   	push   eax
c001a201:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a205:	50                   	push   eax
c001a206:	56                   	push   esi
c001a207:	e8 74 64 fe ff       	call   c0000680 <strcpy>
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	eb 05                	jmp    c001a216 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29c>
c001a211:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a214:	31 f6                	xor    esi,esi
c001a216:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a21c:	89 f0                	mov    eax,esi
c001a21e:	5b                   	pop    ebx
c001a21f:	5e                   	pop    esi
c001a220:	5f                   	pop    edi
c001a221:	5d                   	pop    ebp
c001a222:	c3                   	ret    
c001a223:	90                   	nop

c001a224 <PCI::checkBus(unsigned char)>:
c001a224:	56                   	push   esi
c001a225:	53                   	push   ebx
c001a226:	31 db                	xor    ebx,ebx
c001a228:	51                   	push   ecx
c001a229:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a22e:	52                   	push   edx
c001a22f:	53                   	push   ebx
c001a230:	43                   	inc    ebx
c001a231:	56                   	push   esi
c001a232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a236:	e8 0f 03 00 00       	call   c001a54a <PCI::checkDevice(unsigned char, unsigned char)>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	83 fb 20             	cmp    ebx,0x20
c001a241:	75 eb                	jne    c001a22e <PCI::checkBus(unsigned char)+0xa>
c001a243:	58                   	pop    eax
c001a244:	5b                   	pop    ebx
c001a245:	5e                   	pop    esi
c001a246:	c3                   	ret    
c001a247:	90                   	nop

c001a248 <PCI::foundDevice(PCIDeviceInfo)>:
c001a248:	55                   	push   ebp
c001a249:	57                   	push   edi
c001a24a:	56                   	push   esi
c001a24b:	53                   	push   ebx
c001a24c:	83 ec 1c             	sub    esp,0x1c
c001a24f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a255:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a259:	0f 84 52 01 00 00    	je     c001a3b1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a25f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a263:	66 81 f9 06 04       	cmp    cx,0x406
c001a268:	75 2c                	jne    c001a296 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a26a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a26f:	50                   	push   eax
c001a270:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a275:	50                   	push   eax
c001a276:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a27b:	50                   	push   eax
c001a27c:	56                   	push   esi
c001a27d:	e8 82 fb ff ff       	call   c0019e04 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a282:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a286:	0f b6 c0             	movzx  eax,al
c001a289:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a28d:	83 c4 2c             	add    esp,0x2c
c001a290:	5b                   	pop    ebx
c001a291:	5e                   	pop    esi
c001a292:	5f                   	pop    edi
c001a293:	5d                   	pop    ebp
c001a294:	eb 8e                	jmp    c001a224 <PCI::checkBus(unsigned char)>
c001a296:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a29a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a2a0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a2a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2a8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a2ac:	88 d3                	mov    bl,dl
c001a2ae:	85 c0                	test   eax,eax
c001a2b0:	74 33                	je     c001a2e5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a2b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a2b5:	85 d2                	test   edx,edx
c001a2b7:	74 28                	je     c001a2e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a2b9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a2bf:	31 ef                	xor    edi,ebp
c001a2c1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a2c7:	75 18                	jne    c001a2e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a2c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a2cd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a2d3:	75 0c                	jne    c001a2e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a2d5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a2db:	0f 84 d0 00 00 00    	je     c001a3b1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a2e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2e3:	eb c9                	jmp    c001a2ae <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a2e5:	66 81 f9 01 06       	cmp    cx,0x601
c001a2ea:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a2ee:	75 19                	jne    c001a309 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	68 64 01 00 00       	push   0x164
c001a2f8:	e8 7e d5 fe ff       	call   c000787b <malloc>
c001a2fd:	89 c5                	mov    ebp,eax
c001a2ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a302:	e8 67 0e 00 00       	call   c001b16e <SATABus::SATABus()>
c001a307:	eb 1e                	jmp    c001a327 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a309:	66 81 f9 01 01       	cmp    cx,0x101
c001a30e:	75 60                	jne    c001a370 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a310:	83 ec 0c             	sub    esp,0xc
c001a313:	68 70 02 00 00       	push   0x270
c001a318:	e8 5e d5 fe ff       	call   c000787b <malloc>
c001a31d:	89 c5                	mov    ebp,eax
c001a31f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a322:	e8 e7 02 00 00       	call   c001a60e <IDE::IDE()>
c001a327:	58                   	pop    eax
c001a328:	5a                   	pop    edx
c001a329:	55                   	push   ebp
c001a32a:	56                   	push   esi
c001a32b:	e8 88 17 ff ff       	call   c000bab8 <Device::addChild(Device*)>
c001a330:	83 ec 1c             	sub    esp,0x1c
c001a333:	b9 09 00 00 00       	mov    ecx,0x9
c001a338:	fc                   	cld    
c001a339:	89 e7                	mov    edi,esp
c001a33b:	89 de                	mov    esi,ebx
c001a33d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a33f:	55                   	push   ebp
c001a340:	e8 b9 16 ff ff       	call   c000b9fe <Device::preOpenPCI(PCIDeviceInfo)>
c001a345:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a348:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a34c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a354:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a35c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a364:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a367:	83 c4 4c             	add    esp,0x4c
c001a36a:	5b                   	pop    ebx
c001a36b:	5e                   	pop    esi
c001a36c:	5f                   	pop    edi
c001a36d:	5d                   	pop    ebp
c001a36e:	ff e0                	jmp    eax
c001a370:	83 ec 0c             	sub    esp,0xc
c001a373:	68 58 01 00 00       	push   0x158
c001a378:	e8 fe d4 fe ff       	call   c000787b <malloc>
c001a37d:	89 c5                	mov    ebp,eax
c001a37f:	58                   	pop    eax
c001a380:	5a                   	pop    edx
c001a381:	68 4a 14 02 c0       	push   0xc002144a
c001a386:	55                   	push   ebp
c001a387:	e8 ca 19 ff ff       	call   c000bd56 <DriverlessDevice::DriverlessDevice(char const*)>
c001a38c:	59                   	pop    ecx
c001a38d:	5f                   	pop    edi
c001a38e:	55                   	push   ebp
c001a38f:	56                   	push   esi
c001a390:	e8 23 17 ff ff       	call   c000bab8 <Device::addChild(Device*)>
c001a395:	b9 09 00 00 00       	mov    ecx,0x9
c001a39a:	fc                   	cld    
c001a39b:	89 df                	mov    edi,ebx
c001a39d:	89 de                	mov    esi,ebx
c001a39f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a3a1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a3a5:	83 c4 2c             	add    esp,0x2c
c001a3a8:	5b                   	pop    ebx
c001a3a9:	5e                   	pop    esi
c001a3aa:	5f                   	pop    edi
c001a3ab:	5d                   	pop    ebp
c001a3ac:	e9 4d 16 ff ff       	jmp    c000b9fe <Device::preOpenPCI(PCIDeviceInfo)>
c001a3b1:	83 c4 1c             	add    esp,0x1c
c001a3b4:	5b                   	pop    ebx
c001a3b5:	5e                   	pop    esi
c001a3b6:	5f                   	pop    edi
c001a3b7:	5d                   	pop    ebp
c001a3b8:	c3                   	ret    
c001a3b9:	90                   	nop

c001a3ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a3ba:	55                   	push   ebp
c001a3bb:	57                   	push   edi
c001a3bc:	56                   	push   esi
c001a3bd:	53                   	push   ebx
c001a3be:	83 ec 68             	sub    esp,0x68
c001a3c1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3cc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3d3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a3d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a3dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3e3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a3e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3ec:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001a3f1:	6a 0c                	push   0xc
c001a3f3:	56                   	push   esi
c001a3f4:	53                   	push   ebx
c001a3f5:	55                   	push   ebp
c001a3f6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a3fd:	e8 4e f8 ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a402:	83 c4 20             	add    esp,0x20
c001a405:	56                   	push   esi
c001a406:	53                   	push   ebx
c001a407:	55                   	push   ebp
c001a408:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001a40c:	e8 39 f9 ff ff       	call   c0019d4a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a411:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a416:	56                   	push   esi
c001a417:	53                   	push   ebx
c001a418:	55                   	push   ebp
c001a419:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a420:	e8 bb f9 ff ff       	call   c0019de0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a425:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a429:	83 c4 14             	add    esp,0x14
c001a42c:	6a 3c                	push   0x3c
c001a42e:	56                   	push   esi
c001a42f:	53                   	push   ebx
c001a430:	55                   	push   ebp
c001a431:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a438:	e8 13 f8 ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a43d:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a443:	0f b6 c4             	movzx  eax,ah
c001a446:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a44c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a450:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a454:	8b b9 5c 11 00 00    	mov    edi,DWORD PTR [ecx+0x115c]
c001a45a:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a45e:	83 c4 20             	add    esp,0x20
c001a461:	85 ff                	test   edi,edi
c001a463:	74 2e                	je     c001a493 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd9>
c001a465:	31 d2                	xor    edx,edx
c001a467:	39 d7                	cmp    edi,edx
c001a469:	7e 28                	jle    c001a493 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd9>
c001a46b:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a473:	39 c3                	cmp    ebx,eax
c001a475:	75 19                	jne    c001a490 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd6>
c001a477:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a47f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a483:	75 0b                	jne    c001a490 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd6>
c001a485:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a48c:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a490:	42                   	inc    edx
c001a491:	eb d4                	jmp    c001a467 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xad>
c001a493:	31 ff                	xor    edi,edi
c001a495:	83 ec 0c             	sub    esp,0xc
c001a498:	56                   	push   esi
c001a499:	53                   	push   ebx
c001a49a:	55                   	push   ebp
c001a49b:	57                   	push   edi
c001a49c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a4a3:	e8 84 f9 ff ff       	call   c0019e2c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4a8:	89 44 bc 54          	mov    DWORD PTR [esp+edi*4+0x54],eax
c001a4ac:	47                   	inc    edi
c001a4ad:	83 c4 20             	add    esp,0x20
c001a4b0:	83 ff 06             	cmp    edi,0x6
c001a4b3:	75 e0                	jne    c001a495 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xdb>
c001a4b5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a4ba:	83 ec 0c             	sub    esp,0xc
c001a4bd:	66 0f 38 f1 44 24 38 	movbe  WORD PTR [esp+0x38],ax
c001a4c4:	6a 02                	push   0x2
c001a4c6:	56                   	push   esi
c001a4c7:	53                   	push   ebx
c001a4c8:	55                   	push   ebp
c001a4c9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a4d0:	e8 7b f7 ff ff       	call   c0019c50 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4d5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a4da:	83 c4 20             	add    esp,0x20
c001a4dd:	56                   	push   esi
c001a4de:	53                   	push   ebx
c001a4df:	55                   	push   ebp
c001a4e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001a4e4:	e8 ab f8 ff ff       	call   c0019d94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a4e9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a4ed:	56                   	push   esi
c001a4ee:	53                   	push   ebx
c001a4ef:	55                   	push   ebp
c001a4f0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a4f7:	e8 02 f8 ff ff       	call   c0019cfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a4fc:	b9 09 00 00 00       	mov    ecx,0x9
c001a501:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a506:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a50a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a50e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a512:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a516:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a51a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a51e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a522:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	fc                   	cld    
c001a52a:	89 e7                	mov    edi,esp
c001a52c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a530:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a532:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001a539:	e8 0a fd ff ff       	call   c001a248 <PCI::foundDevice(PCIDeviceInfo)>
c001a53e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a544:	5b                   	pop    ebx
c001a545:	5e                   	pop    esi
c001a546:	5f                   	pop    edi
c001a547:	5d                   	pop    ebp
c001a548:	c3                   	ret    
c001a549:	90                   	nop

c001a54a <PCI::checkDevice(unsigned char, unsigned char)>:
c001a54a:	55                   	push   ebp
c001a54b:	57                   	push   edi
c001a54c:	56                   	push   esi
c001a54d:	53                   	push   ebx
c001a54e:	83 ec 0c             	sub    esp,0xc
c001a551:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a555:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a55a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a55f:	6a 00                	push   0x0
c001a561:	56                   	push   esi
c001a562:	57                   	push   edi
c001a563:	55                   	push   ebp
c001a564:	e8 95 f7 ff ff       	call   c0019cfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a569:	6a 00                	push   0x0
c001a56b:	56                   	push   esi
c001a56c:	57                   	push   edi
c001a56d:	55                   	push   ebp
c001a56e:	e8 47 fe ff ff       	call   c001a3ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a573:	83 c4 20             	add    esp,0x20
c001a576:	6a 00                	push   0x0
c001a578:	56                   	push   esi
c001a579:	57                   	push   edi
c001a57a:	55                   	push   ebp
c001a57b:	e8 a2 f7 ff ff       	call   c0019d22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a580:	83 c4 10             	add    esp,0x10
c001a583:	84 c0                	test   al,al
c001a585:	79 27                	jns    c001a5ae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a587:	bb 01 00 00 00       	mov    ebx,0x1
c001a58c:	53                   	push   ebx
c001a58d:	56                   	push   esi
c001a58e:	57                   	push   edi
c001a58f:	55                   	push   ebp
c001a590:	e8 69 f7 ff ff       	call   c0019cfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	66 40                	inc    ax
c001a59a:	74 0c                	je     c001a5a8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a59c:	53                   	push   ebx
c001a59d:	56                   	push   esi
c001a59e:	57                   	push   edi
c001a59f:	55                   	push   ebp
c001a5a0:	e8 15 fe ff ff       	call   c001a3ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	43                   	inc    ebx
c001a5a9:	83 fb 08             	cmp    ebx,0x8
c001a5ac:	75 de                	jne    c001a58c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a5ae:	83 c4 0c             	add    esp,0xc
c001a5b1:	5b                   	pop    ebx
c001a5b2:	5e                   	pop    esi
c001a5b3:	5f                   	pop    edi
c001a5b4:	5d                   	pop    ebp
c001a5b5:	c3                   	ret    

c001a5b6 <PCI::detect()>:
c001a5b6:	56                   	push   esi
c001a5b7:	53                   	push   ebx
c001a5b8:	53                   	push   ebx
c001a5b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5bd:	31 db                	xor    ebx,ebx
c001a5bf:	6a 00                	push   0x0
c001a5c1:	6a 00                	push   0x0
c001a5c3:	6a 00                	push   0x0
c001a5c5:	56                   	push   esi
c001a5c6:	e8 57 f7 ff ff       	call   c0019d22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a5cb:	83 c4 10             	add    esp,0x10
c001a5ce:	a8 80                	test   al,0x80
c001a5d0:	75 21                	jne    c001a5f3 <PCI::detect()+0x3d>
c001a5d2:	51                   	push   ecx
c001a5d3:	51                   	push   ecx
c001a5d4:	6a 00                	push   0x0
c001a5d6:	56                   	push   esi
c001a5d7:	e8 48 fc ff ff       	call   c001a224 <PCI::checkBus(unsigned char)>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	eb 24                	jmp    c001a605 <PCI::detect()+0x4f>
c001a5e1:	52                   	push   edx
c001a5e2:	52                   	push   edx
c001a5e3:	53                   	push   ebx
c001a5e4:	43                   	inc    ebx
c001a5e5:	56                   	push   esi
c001a5e6:	e8 39 fc ff ff       	call   c001a224 <PCI::checkBus(unsigned char)>
c001a5eb:	83 c4 10             	add    esp,0x10
c001a5ee:	83 fb 08             	cmp    ebx,0x8
c001a5f1:	74 12                	je     c001a605 <PCI::detect()+0x4f>
c001a5f3:	53                   	push   ebx
c001a5f4:	6a 00                	push   0x0
c001a5f6:	6a 00                	push   0x0
c001a5f8:	56                   	push   esi
c001a5f9:	e8 00 f7 ff ff       	call   c0019cfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	66 40                	inc    ax
c001a603:	74 dc                	je     c001a5e1 <PCI::detect()+0x2b>
c001a605:	58                   	pop    eax
c001a606:	5b                   	pop    ebx
c001a607:	5e                   	pop    esi
c001a608:	c3                   	ret    
c001a609:	90                   	nop

c001a60a <IDE::close(int, int, void*)>:
c001a60a:	83 c8 ff             	or     eax,0xffffffff
c001a60d:	c3                   	ret    

c001a60e <IDE::IDE()>:
c001a60e:	83 ec 0c             	sub    esp,0xc
c001a611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a615:	83 ec 08             	sub    esp,0x8
c001a618:	68 90 14 02 c0       	push   0xc0021490
c001a61d:	50                   	push   eax
c001a61e:	e8 d9 17 ff ff       	call   c000bdfc <HardDiskController::HardDiskController(char const*)>
c001a623:	83 c4 10             	add    esp,0x10
c001a626:	ba 20 15 02 c0       	mov    edx,0xc0021520
c001a62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a62f:	89 10                	mov    DWORD PTR [eax],edx
c001a631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a635:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a63c:	90                   	nop
c001a63d:	83 c4 0c             	add    esp,0xc
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <IDE::prepareInterrupt(unsigned char)>:
c001a642:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a647:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a64b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a653:	c3                   	ret    

c001a654 <selectDrive(unsigned char, unsigned char)>:
c001a654:	c3                   	ret    
c001a655:	90                   	nop

c001a656 <IDE::getBase(unsigned char)>:
c001a656:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a65b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a65f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a667:	c3                   	ret    

c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a668:	55                   	push   ebp
c001a669:	57                   	push   edi
c001a66a:	56                   	push   esi
c001a66b:	53                   	push   ebx
c001a66c:	83 ec 1c             	sub    esp,0x1c
c001a66f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a673:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a677:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a67b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a67f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a682:	3c 03                	cmp    al,0x3
c001a684:	77 53                	ja     c001a6d9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001a686:	0f b6 f2             	movzx  esi,dl
c001a689:	0f b6 db             	movzx  ebx,bl
c001a68c:	8d 4e 28             	lea    ecx,[esi+0x28]
c001a68f:	8a 44 cf 20          	mov    al,BYTE PTR [edi+ecx*8+0x20]
c001a693:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a697:	83 c8 80             	or     eax,0xffffff80
c001a69a:	0f b6 c0             	movzx  eax,al
c001a69d:	50                   	push   eax
c001a69e:	6a 0c                	push   0xc
c001a6a0:	56                   	push   esi
c001a6a1:	57                   	push   edi
c001a6a2:	e8 c1 ff ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6ab:	89 e8                	mov    eax,ebp
c001a6ad:	66 8b 54 cf 1a       	mov    dx,WORD PTR [edi+ecx*8+0x1a]
c001a6b2:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a6b6:	ee                   	out    dx,al
c001a6b7:	0f b6 44 cf 20       	movzx  eax,BYTE PTR [edi+ecx*8+0x20]
c001a6bc:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a6c0:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a6c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6c8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a6d0:	83 c4 2c             	add    esp,0x2c
c001a6d3:	5b                   	pop    ebx
c001a6d4:	5e                   	pop    esi
c001a6d5:	5f                   	pop    edi
c001a6d6:	5d                   	pop    ebp
c001a6d7:	eb 8f                	jmp    c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6d9:	80 fb 07             	cmp    bl,0x7
c001a6dc:	77 12                	ja     c001a6f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001a6de:	0f b6 d2             	movzx  edx,dl
c001a6e1:	0f b6 db             	movzx  ebx,bl
c001a6e4:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a6ec:	89 da                	mov    edx,ebx
c001a6ee:	eb 2f                	jmp    c001a71f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a6f0:	80 fb 0d             	cmp    bl,0xd
c001a6f3:	77 13                	ja     c001a708 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001a6f5:	0f b6 d2             	movzx  edx,dl
c001a6f8:	0f b6 db             	movzx  ebx,bl
c001a6fb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a702:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a706:	eb 17                	jmp    c001a71f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a708:	80 fb 15             	cmp    bl,0x15
c001a70b:	77 15                	ja     c001a722 <IDE::write(unsigned char, unsigned char, unsigned char)+0xba>
c001a70d:	0f b6 d2             	movzx  edx,dl
c001a710:	0f b6 db             	movzx  ebx,bl
c001a713:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a71b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a71f:	89 e8                	mov    eax,ebp
c001a721:	ee                   	out    dx,al
c001a722:	83 c4 1c             	add    esp,0x1c
c001a725:	5b                   	pop    ebx
c001a726:	5e                   	pop    esi
c001a727:	5f                   	pop    edi
c001a728:	5d                   	pop    ebp
c001a729:	c3                   	ret    

c001a72a <IDE::read(unsigned char, unsigned char)>:
c001a72a:	55                   	push   ebp
c001a72b:	57                   	push   edi
c001a72c:	56                   	push   esi
c001a72d:	53                   	push   ebx
c001a72e:	83 ec 1c             	sub    esp,0x1c
c001a731:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a735:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a739:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a73d:	8d 4a f8             	lea    ecx,[edx-0x8]
c001a740:	80 f9 03             	cmp    cl,0x3
c001a743:	77 45                	ja     c001a78a <IDE::read(unsigned char, unsigned char)+0x60>
c001a745:	0f b6 f0             	movzx  esi,al
c001a748:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a74c:	8d 6e 28             	lea    ebp,[esi+0x28]
c001a74f:	8a 44 ef 20          	mov    al,BYTE PTR [edi+ebp*8+0x20]
c001a753:	83 c8 80             	or     eax,0xffffff80
c001a756:	0f b6 c0             	movzx  eax,al
c001a759:	50                   	push   eax
c001a75a:	6a 0c                	push   0xc
c001a75c:	56                   	push   esi
c001a75d:	57                   	push   edi
c001a75e:	e8 05 ff ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a763:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a767:	66 8b 5c ef 1a       	mov    bx,WORD PTR [edi+ebp*8+0x1a]
c001a76c:	0f b6 d2             	movzx  edx,dl
c001a76f:	8d 54 13 fa          	lea    edx,[ebx+edx*1-0x6]
c001a773:	ec                   	in     al,dx
c001a774:	88 c3                	mov    bl,al
c001a776:	0f b6 44 ef 20       	movzx  eax,BYTE PTR [edi+ebp*8+0x20]
c001a77b:	50                   	push   eax
c001a77c:	6a 0c                	push   0xc
c001a77e:	56                   	push   esi
c001a77f:	57                   	push   edi
c001a780:	e8 e3 fe ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a785:	83 c4 20             	add    esp,0x20
c001a788:	eb 4b                	jmp    c001a7d5 <IDE::read(unsigned char, unsigned char)+0xab>
c001a78a:	80 fa 07             	cmp    dl,0x7
c001a78d:	77 12                	ja     c001a7a1 <IDE::read(unsigned char, unsigned char)+0x77>
c001a78f:	0f b6 f0             	movzx  esi,al
c001a792:	0f b6 c2             	movzx  eax,dl
c001a795:	66 03 84 f7 5a 01 00 00 	add    ax,WORD PTR [edi+esi*8+0x15a]
c001a79d:	89 c2                	mov    edx,eax
c001a79f:	eb 31                	jmp    c001a7d2 <IDE::read(unsigned char, unsigned char)+0xa8>
c001a7a1:	80 fa 0d             	cmp    dl,0xd
c001a7a4:	77 13                	ja     c001a7b9 <IDE::read(unsigned char, unsigned char)+0x8f>
c001a7a6:	0f b6 f0             	movzx  esi,al
c001a7a9:	0f b6 d2             	movzx  edx,dl
c001a7ac:	8b 84 f7 5c 01 00 00 	mov    eax,DWORD PTR [edi+esi*8+0x15c]
c001a7b3:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a7b7:	eb 19                	jmp    c001a7d2 <IDE::read(unsigned char, unsigned char)+0xa8>
c001a7b9:	31 db                	xor    ebx,ebx
c001a7bb:	80 fa 15             	cmp    dl,0x15
c001a7be:	77 15                	ja     c001a7d5 <IDE::read(unsigned char, unsigned char)+0xab>
c001a7c0:	0f b6 f0             	movzx  esi,al
c001a7c3:	0f b6 d2             	movzx  edx,dl
c001a7c6:	66 8b 84 f7 5e 01 00 00 	mov    ax,WORD PTR [edi+esi*8+0x15e]
c001a7ce:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a7d2:	ec                   	in     al,dx
c001a7d3:	88 c3                	mov    bl,al
c001a7d5:	83 c4 1c             	add    esp,0x1c
c001a7d8:	88 d8                	mov    al,bl
c001a7da:	5b                   	pop    ebx
c001a7db:	5e                   	pop    esi
c001a7dc:	5f                   	pop    edi
c001a7dd:	5d                   	pop    ebp
c001a7de:	c3                   	ret    
c001a7df:	90                   	nop

c001a7e0 <IDE::waitInterrupt(unsigned char)>:
c001a7e0:	55                   	push   ebp
c001a7e1:	57                   	push   edi
c001a7e2:	56                   	push   esi
c001a7e3:	53                   	push   ebx
c001a7e4:	31 db                	xor    ebx,ebx
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a7ed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001a7f2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001a7fa:	89 e8                	mov    eax,ebp
c001a7fc:	84 c0                	test   al,al
c001a7fe:	75 30                	jne    c001a830 <IDE::waitInterrupt(unsigned char)+0x50>
c001a800:	50                   	push   eax
c001a801:	6a 0c                	push   0xc
c001a803:	56                   	push   esi
c001a804:	57                   	push   edi
c001a805:	e8 20 ff ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001a80a:	83 c4 10             	add    esp,0x10
c001a80d:	a8 01                	test   al,0x1
c001a80f:	75 27                	jne    c001a838 <IDE::waitInterrupt(unsigned char)+0x58>
c001a811:	f6 c3 04             	test   bl,0x4
c001a814:	75 12                	jne    c001a828 <IDE::waitInterrupt(unsigned char)+0x48>
c001a816:	83 fb 32             	cmp    ebx,0x32
c001a819:	7e 0d                	jle    c001a828 <IDE::waitInterrupt(unsigned char)+0x48>
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	6a 64                	push   0x64
c001a820:	e8 8b a7 ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	83 fb 3c             	cmp    ebx,0x3c
c001a82b:	74 0b                	je     c001a838 <IDE::waitInterrupt(unsigned char)+0x58>
c001a82d:	43                   	inc    ebx
c001a82e:	eb c2                	jmp    c001a7f2 <IDE::waitInterrupt(unsigned char)+0x12>
c001a830:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001a838:	83 c4 0c             	add    esp,0xc
c001a83b:	89 e8                	mov    eax,ebp
c001a83d:	5b                   	pop    ebx
c001a83e:	5e                   	pop    esi
c001a83f:	5f                   	pop    edi
c001a840:	5d                   	pop    ebp
c001a841:	c3                   	ret    

c001a842 <ideChannel0IRQHandler(regs*, void*)>:
c001a842:	83 ec 10             	sub    esp,0x10
c001a845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a849:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a850:	6a 07                	push   0x7
c001a852:	6a 00                	push   0x0
c001a854:	50                   	push   eax
c001a855:	e8 d0 fe ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001a85a:	83 c4 1c             	add    esp,0x1c
c001a85d:	c3                   	ret    

c001a85e <ideChannel1IRQHandler(regs*, void*)>:
c001a85e:	83 ec 10             	sub    esp,0x10
c001a861:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a865:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a86c:	6a 07                	push   0x7
c001a86e:	6a 01                	push   0x1
c001a870:	50                   	push   eax
c001a871:	e8 b4 fe ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001a876:	83 c4 1c             	add    esp,0x1c
c001a879:	c3                   	ret    

c001a87a <IDE::enableIRQs(unsigned char, bool)>:
c001a87a:	57                   	push   edi
c001a87b:	bf 04 00 00 00       	mov    edi,0x4
c001a880:	56                   	push   esi
c001a881:	53                   	push   ebx
c001a882:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a88b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a890:	0f 94 c0             	sete   al
c001a893:	01 c0                	add    eax,eax
c001a895:	88 84 f3 60 01 00 00 	mov    BYTE PTR [ebx+esi*8+0x160],al
c001a89c:	0f b6 c0             	movzx  eax,al
c001a89f:	50                   	push   eax
c001a8a0:	6a 0c                	push   0xc
c001a8a2:	56                   	push   esi
c001a8a3:	53                   	push   ebx
c001a8a4:	e8 bf fd ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	50                   	push   eax
c001a8ad:	6a 0c                	push   0xc
c001a8af:	56                   	push   esi
c001a8b0:	53                   	push   ebx
c001a8b1:	e8 74 fe ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	4f                   	dec    edi
c001a8ba:	75 f0                	jne    c001a8ac <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a8bc:	5b                   	pop    ebx
c001a8bd:	5e                   	pop    esi
c001a8be:	5f                   	pop    edi
c001a8bf:	c3                   	ret    

c001a8c0 <IDE::open(int, int, void*)>:
c001a8c0:	55                   	push   ebp
c001a8c1:	57                   	push   edi
c001a8c2:	56                   	push   esi
c001a8c3:	53                   	push   ebx
c001a8c4:	83 ec 1c             	sub    esp,0x1c
c001a8c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a8cb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a8d2:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a8d9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a8e2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a8eb:	0f 85 b1 02 00 00    	jne    c001aba2 <IDE::open(int, int, void*)+0x2e2>
c001a8f1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a8f7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001a8fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ff:	83 e0 7f             	and    eax,0x7f
c001a902:	83 f8 05             	cmp    eax,0x5
c001a905:	74 05                	je     c001a90c <IDE::open(int, int, void*)+0x4c>
c001a907:	83 f8 0f             	cmp    eax,0xf
c001a90a:	75 32                	jne    c001a93e <IDE::open(int, int, void*)+0x7e>
c001a90c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a912:	83 e0 fc             	and    eax,0xfffffffc
c001a915:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a91c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a922:	83 e0 fc             	and    eax,0xfffffffc
c001a925:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a92c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a932:	83 e0 fc             	and    eax,0xfffffffc
c001a935:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a93c:	eb 14                	jmp    c001a952 <IDE::open(int, int, void*)+0x92>
c001a93e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a948:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a952:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001a959:	0f b6 b3 1d 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11d]
c001a960:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001a965:	89 ea                	mov    edx,ebp
c001a967:	89 f9                	mov    ecx,edi
c001a969:	89 f0                	mov    eax,esi
c001a96b:	c1 e0 0b             	shl    eax,0xb
c001a96e:	c1 e1 10             	shl    ecx,0x10
c001a971:	09 c1                	or     ecx,eax
c001a973:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a97a:	c1 e0 08             	shl    eax,0x8
c001a97d:	09 c1                	or     ecx,eax
c001a97f:	89 c8                	mov    eax,ecx
c001a981:	0d 08 00 00 80       	or     eax,0x80000008
c001a986:	ef                   	out    dx,eax
c001a987:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a98c:	ed                   	in     eax,dx
c001a98d:	c1 e8 10             	shr    eax,0x10
c001a990:	3d ff ff 00 00       	cmp    eax,0xffff
c001a995:	0f 84 f6 00 00 00    	je     c001aa91 <IDE::open(int, int, void*)+0x1d1>
c001a99b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a9a1:	89 ea                	mov    edx,ebp
c001a9a3:	89 c8                	mov    eax,ecx
c001a9a5:	ef                   	out    dx,eax
c001a9a6:	b0 fe                	mov    al,0xfe
c001a9a8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a9ad:	ee                   	out    dx,al
c001a9ae:	89 c8                	mov    eax,ecx
c001a9b0:	89 ea                	mov    edx,ebp
c001a9b2:	ef                   	out    dx,eax
c001a9b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a9b8:	ed                   	in     eax,dx
c001a9b9:	3c fe                	cmp    al,0xfe
c001a9bb:	0f 85 a4 00 00 00    	jne    c001aa65 <IDE::open(int, int, void*)+0x1a5>
c001a9c1:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a9c7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a9ce:	74 30                	je     c001aa00 <IDE::open(int, int, void*)+0x140>
c001a9d0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a9d6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	40                   	inc    eax
c001a9de:	0f b6 c0             	movzx  eax,al
c001a9e1:	50                   	push   eax
c001a9e2:	56                   	push   esi
c001a9e3:	57                   	push   edi
c001a9e4:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a9ea:	51                   	push   ecx
c001a9eb:	e8 74 3f ff ff       	call   c000e964 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a9f0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a9f5:	83 c4 1c             	add    esp,0x1c
c001a9f8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a9fe:	eb 0a                	jmp    c001aa0a <IDE::open(int, int, void*)+0x14a>
c001aa00:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001aa0a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001aa11:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001aa18:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001aa1d:	89 ea                	mov    edx,ebp
c001aa1f:	c1 e0 08             	shl    eax,0x8
c001aa22:	c1 e1 10             	shl    ecx,0x10
c001aa25:	09 c1                	or     ecx,eax
c001aa27:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001aa2e:	c1 e0 0b             	shl    eax,0xb
c001aa31:	09 c1                	or     ecx,eax
c001aa33:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001aa39:	89 c8                	mov    eax,ecx
c001aa3b:	ef                   	out    dx,eax
c001aa3c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001aa42:	be fc 0c 00 00       	mov    esi,0xcfc
c001aa47:	89 f2                	mov    edx,esi
c001aa49:	89 f8                	mov    eax,edi
c001aa4b:	ee                   	out    dx,al
c001aa4c:	89 c8                	mov    eax,ecx
c001aa4e:	89 ea                	mov    edx,ebp
c001aa50:	ef                   	out    dx,eax
c001aa51:	89 f2                	mov    edx,esi
c001aa53:	ed                   	in     eax,dx
c001aa54:	0f b6 c0             	movzx  eax,al
c001aa57:	39 f8                	cmp    eax,edi
c001aa59:	74 46                	je     c001aaa1 <IDE::open(int, int, void*)+0x1e1>
c001aa5b:	83 ec 0c             	sub    esp,0xc
c001aa5e:	68 a8 14 02 c0       	push   0xc00214a8
c001aa63:	eb 34                	jmp    c001aa99 <IDE::open(int, int, void*)+0x1d9>
c001aa65:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001aa6e:	75 17                	jne    c001aa87 <IDE::open(int, int, void*)+0x1c7>
c001aa70:	80 7c 24 04 8a       	cmp    BYTE PTR [esp+0x4],0x8a
c001aa75:	74 07                	je     c001aa7e <IDE::open(int, int, void*)+0x1be>
c001aa77:	80 7c 24 04 80       	cmp    BYTE PTR [esp+0x4],0x80
c001aa7c:	75 09                	jne    c001aa87 <IDE::open(int, int, void*)+0x1c7>
c001aa7e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aa85:	eb 1a                	jmp    c001aaa1 <IDE::open(int, int, void*)+0x1e1>
c001aa87:	83 ec 0c             	sub    esp,0xc
c001aa8a:	68 b0 14 02 c0       	push   0xc00214b0
c001aa8f:	eb 08                	jmp    c001aa99 <IDE::open(int, int, void*)+0x1d9>
c001aa91:	83 ec 0c             	sub    esp,0xc
c001aa94:	68 e1 14 02 c0       	push   0xc00214e1
c001aa99:	e8 1f 5a ff ff       	call   c00104bd <KePanic(char const*)>
c001aa9e:	83 c4 10             	add    esp,0x10
c001aaa1:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001aaa8:	79 1a                	jns    c001aac4 <IDE::open(int, int, void*)+0x204>
c001aaaa:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001aab0:	83 e0 fc             	and    eax,0xfffffffc
c001aab3:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001aaba:	83 c0 08             	add    eax,0x8
c001aabd:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001aac4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001aaca:	89 c2                	mov    edx,eax
c001aacc:	83 e2 0f             	and    edx,0xf
c001aacf:	66 83 fa 08          	cmp    dx,0x8
c001aad3:	75 0a                	jne    c001aadf <IDE::open(int, int, void*)+0x21f>
c001aad5:	83 e8 02             	sub    eax,0x2
c001aad8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aadf:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001aae5:	89 c2                	mov    edx,eax
c001aae7:	83 e2 0f             	and    edx,0xf
c001aaea:	66 83 fa 08          	cmp    dx,0x8
c001aaee:	75 0a                	jne    c001aafa <IDE::open(int, int, void*)+0x23a>
c001aaf0:	83 e8 02             	sub    eax,0x2
c001aaf3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aafa:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ab01:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ab08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ab0b:	89 d0                	mov    eax,edx
c001ab0d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ab11:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ab15:	8d 4a 01             	lea    ecx,[edx+0x1]
c001ab18:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ab1d:	0f b6 c9             	movzx  ecx,cl
c001ab20:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ab27:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ab2a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ab2e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ab32:	8d 50 02             	lea    edx,[eax+0x2]
c001ab35:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ab3a:	0f b6 d2             	movzx  edx,dl
c001ab3d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ab43:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ab46:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ab4a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ab4e:	8d 48 03             	lea    ecx,[eax+0x3]
c001ab51:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ab56:	0f b6 c9             	movzx  ecx,cl
c001ab59:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ab5f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ab62:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ab66:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ab6a:	8d 50 04             	lea    edx,[eax+0x4]
c001ab6d:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ab73:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ab78:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ab7f:	66 85 f6             	test   si,si
c001ab82:	74 5b                	je     c001abdf <IDE::open(int, int, void*)+0x31f>
c001ab84:	0f b6 d2             	movzx  edx,dl
c001ab87:	83 c0 05             	add    eax,0x5
c001ab8a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ab8d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ab91:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ab95:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ab9b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aba0:	eb 3d                	jmp    c001abdf <IDE::open(int, int, void*)+0x31f>
c001aba2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001aba8:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001abaf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001abb6:	66 05 06 02          	add    ax,0x206
c001abba:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001abc1:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001abc8:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001abcf:	66 05 06 02          	add    ax,0x206
c001abd3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001abda:	e9 e5 fe ff ff       	jmp    c001aac4 <IDE::open(int, int, void*)+0x204>
c001abdf:	50                   	push   eax
c001abe0:	50                   	push   eax
c001abe1:	6a 00                	push   0x0
c001abe3:	53                   	push   ebx
c001abe4:	e8 59 fa ff ff       	call   c001a642 <IDE::prepareInterrupt(unsigned char)>
c001abe9:	5a                   	pop    edx
c001abea:	59                   	pop    ecx
c001abeb:	6a 01                	push   0x1
c001abed:	53                   	push   ebx
c001abee:	e8 4f fa ff ff       	call   c001a642 <IDE::prepareInterrupt(unsigned char)>
c001abf3:	83 c4 0c             	add    esp,0xc
c001abf6:	6a 00                	push   0x0
c001abf8:	6a 00                	push   0x0
c001abfa:	53                   	push   ebx
c001abfb:	e8 7a fc ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001ac00:	83 c4 0c             	add    esp,0xc
c001ac03:	6a 00                	push   0x0
c001ac05:	6a 01                	push   0x1
c001ac07:	53                   	push   ebx
c001ac08:	e8 6d fc ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ac17:	74 34                	je     c001ac4d <IDE::open(int, int, void*)+0x38d>
c001ac19:	83 ec 0c             	sub    esp,0xc
c001ac1c:	53                   	push   ebx
c001ac1d:	6a 01                	push   0x1
c001ac1f:	68 42 a8 01 c0       	push   0xc001a842
c001ac24:	6a 0e                	push   0xe
c001ac26:	53                   	push   ebx
c001ac27:	e8 38 0e ff ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ac2c:	83 c4 14             	add    esp,0x14
c001ac2f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ac35:	53                   	push   ebx
c001ac36:	6a 01                	push   0x1
c001ac38:	68 5e a8 01 c0       	push   0xc001a85e
c001ac3d:	6a 0f                	push   0xf
c001ac3f:	53                   	push   ebx
c001ac40:	e8 1f 0e ff ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ac45:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ac4b:	eb 38                	jmp    c001ac85 <IDE::open(int, int, void*)+0x3c5>
c001ac4d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	53                   	push   ebx
c001ac5b:	6a 00                	push   0x0
c001ac5d:	68 42 a8 01 c0       	push   0xc001a842
c001ac62:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ac68:	53                   	push   ebx
c001ac69:	e8 f6 0d ff ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ac6e:	83 c4 14             	add    esp,0x14
c001ac71:	53                   	push   ebx
c001ac72:	6a 00                	push   0x0
c001ac74:	68 5e a8 01 c0       	push   0xc001a85e
c001ac79:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ac7f:	53                   	push   ebx
c001ac80:	e8 df 0d ff ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ac85:	83 c4 20             	add    esp,0x20
c001ac88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	53                   	push   ebx
c001ac8e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ac91:	83 c4 0c             	add    esp,0xc
c001ac94:	6a 07                	push   0x7
c001ac96:	6a 00                	push   0x0
c001ac98:	53                   	push   ebx
c001ac99:	e8 8c fa ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ac9e:	83 c4 0c             	add    esp,0xc
c001aca1:	6a 07                	push   0x7
c001aca3:	6a 01                	push   0x1
c001aca5:	53                   	push   ebx
c001aca6:	e8 7f fa ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001acab:	83 c4 0c             	add    esp,0xc
c001acae:	6a 01                	push   0x1
c001acb0:	6a 00                	push   0x0
c001acb2:	53                   	push   ebx
c001acb3:	e8 c2 fb ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001acb8:	83 c4 0c             	add    esp,0xc
c001acbb:	6a 01                	push   0x1
c001acbd:	6a 01                	push   0x1
c001acbf:	53                   	push   ebx
c001acc0:	e8 b5 fb ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001acc5:	83 c4 2c             	add    esp,0x2c
c001acc8:	31 c0                	xor    eax,eax
c001acca:	5b                   	pop    ebx
c001accb:	5e                   	pop    esi
c001accc:	5f                   	pop    edi
c001accd:	5d                   	pop    ebp
c001acce:	c3                   	ret    
c001accf:	90                   	nop

c001acd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001acd0:	55                   	push   ebp
c001acd1:	57                   	push   edi
c001acd2:	56                   	push   esi
c001acd3:	53                   	push   ebx
c001acd4:	83 ec 1c             	sub    esp,0x1c
c001acd7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ace3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ace7:	8d 50 f8             	lea    edx,[eax-0x8]
c001acea:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001acee:	80 fa 03             	cmp    dl,0x3
c001acf1:	77 5d                	ja     c001ad50 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001acf3:	0f b6 db             	movzx  ebx,bl
c001acf6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001acfa:	8d 6b 28             	lea    ebp,[ebx+0x28]
c001acfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad01:	8a 54 ee 20          	mov    dl,BYTE PTR [esi+ebp*8+0x20]
c001ad05:	83 ca 80             	or     edx,0xffffff80
c001ad08:	0f b6 d2             	movzx  edx,dl
c001ad0b:	52                   	push   edx
c001ad0c:	6a 0c                	push   0xc
c001ad0e:	53                   	push   ebx
c001ad0f:	56                   	push   esi
c001ad10:	e8 53 f9 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad19:	66 8b 54 ee 1a       	mov    dx,WORD PTR [esi+ebp*8+0x1a]
c001ad1e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad22:	0f b6 c0             	movzx  eax,al
c001ad25:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ad29:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ad2b:	0f b6 44 ee 20       	movzx  eax,BYTE PTR [esi+ebp*8+0x20]
c001ad30:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ad34:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ad38:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ad3c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ad44:	83 c4 2c             	add    esp,0x2c
c001ad47:	5b                   	pop    ebx
c001ad48:	5e                   	pop    esi
c001ad49:	5f                   	pop    edi
c001ad4a:	5d                   	pop    ebp
c001ad4b:	e9 18 f9 ff ff       	jmp    c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad50:	3c 07                	cmp    al,0x7
c001ad52:	77 10                	ja     c001ad64 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ad54:	0f b6 db             	movzx  ebx,bl
c001ad57:	0f b6 d0             	movzx  edx,al
c001ad5a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ad62:	eb 2d                	jmp    c001ad91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ad64:	3c 0d                	cmp    al,0xd
c001ad66:	77 13                	ja     c001ad7b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ad68:	0f b6 db             	movzx  ebx,bl
c001ad6b:	0f b6 c0             	movzx  eax,al
c001ad6e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ad75:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ad79:	eb 16                	jmp    c001ad91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ad7b:	3c 15                	cmp    al,0x15
c001ad7d:	77 14                	ja     c001ad93 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ad7f:	0f b6 db             	movzx  ebx,bl
c001ad82:	0f b6 c0             	movzx  eax,al
c001ad85:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ad8d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ad91:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ad93:	83 c4 1c             	add    esp,0x1c
c001ad96:	5b                   	pop    ebx
c001ad97:	5e                   	pop    esi
c001ad98:	5f                   	pop    edi
c001ad99:	5d                   	pop    ebp
c001ad9a:	c3                   	ret    
c001ad9b:	90                   	nop

c001ad9c <IDE::detect()>:
c001ad9c:	55                   	push   ebp
c001ad9d:	57                   	push   edi
c001ad9e:	56                   	push   esi
c001ad9f:	53                   	push   ebx
c001ada0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ada6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001adad:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001adb4:	0f 85 99 02 00 00    	jne    c001b053 <IDE::detect()+0x2b7>
c001adba:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001adc1:	31 f6                	xor    esi,esi
c001adc3:	31 ff                	xor    edi,edi
c001adc5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001adcd:	89 f8                	mov    eax,edi
c001adcf:	c1 e0 06             	shl    eax,0x6
c001add2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001adda:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ade2:	c1 e0 04             	shl    eax,0x4
c001ade5:	83 c8 a0             	or     eax,0xffffffa0
c001ade8:	0f b6 c0             	movzx  eax,al
c001adeb:	50                   	push   eax
c001adec:	6a 06                	push   0x6
c001adee:	56                   	push   esi
c001adef:	53                   	push   ebx
c001adf0:	e8 73 f8 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adf5:	83 c4 0c             	add    esp,0xc
c001adf8:	6a 0c                	push   0xc
c001adfa:	56                   	push   esi
c001adfb:	53                   	push   ebx
c001adfc:	e8 29 f9 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae01:	83 c4 0c             	add    esp,0xc
c001ae04:	6a 0c                	push   0xc
c001ae06:	56                   	push   esi
c001ae07:	53                   	push   ebx
c001ae08:	e8 1d f9 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	6a 0c                	push   0xc
c001ae12:	56                   	push   esi
c001ae13:	53                   	push   ebx
c001ae14:	e8 11 f9 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae19:	83 c4 0c             	add    esp,0xc
c001ae1c:	6a 0c                	push   0xc
c001ae1e:	56                   	push   esi
c001ae1f:	53                   	push   ebx
c001ae20:	e8 05 f9 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae25:	68 ec 00 00 00       	push   0xec
c001ae2a:	6a 07                	push   0x7
c001ae2c:	56                   	push   esi
c001ae2d:	53                   	push   ebx
c001ae2e:	e8 35 f8 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae33:	83 c4 1c             	add    esp,0x1c
c001ae36:	6a 0c                	push   0xc
c001ae38:	56                   	push   esi
c001ae39:	53                   	push   ebx
c001ae3a:	e8 eb f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae3f:	83 c4 0c             	add    esp,0xc
c001ae42:	6a 0c                	push   0xc
c001ae44:	56                   	push   esi
c001ae45:	53                   	push   ebx
c001ae46:	e8 df f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae4b:	83 c4 0c             	add    esp,0xc
c001ae4e:	6a 0c                	push   0xc
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	e8 d3 f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae57:	83 c4 0c             	add    esp,0xc
c001ae5a:	6a 0c                	push   0xc
c001ae5c:	56                   	push   esi
c001ae5d:	53                   	push   ebx
c001ae5e:	e8 c7 f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae63:	83 c4 0c             	add    esp,0xc
c001ae66:	6a 0c                	push   0xc
c001ae68:	56                   	push   esi
c001ae69:	53                   	push   ebx
c001ae6a:	e8 bb f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	84 c0                	test   al,al
c001ae74:	0f 84 5e 01 00 00    	je     c001afd8 <IDE::detect()+0x23c>
c001ae7a:	31 ed                	xor    ebp,ebp
c001ae7c:	50                   	push   eax
c001ae7d:	6a 0c                	push   0xc
c001ae7f:	56                   	push   esi
c001ae80:	53                   	push   ebx
c001ae81:	e8 a4 f8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	a8 01                	test   al,0x1
c001ae8b:	0f 85 68 01 00 00    	jne    c001aff9 <IDE::detect()+0x25d>
c001ae91:	84 c0                	test   al,al
c001ae93:	78 04                	js     c001ae99 <IDE::detect()+0xfd>
c001ae95:	a8 08                	test   al,0x8
c001ae97:	75 23                	jne    c001aebc <IDE::detect()+0x120>
c001ae99:	45                   	inc    ebp
c001ae9a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001aea0:	7e da                	jle    c001ae7c <IDE::detect()+0xe0>
c001aea2:	83 ec 0c             	sub    esp,0xc
c001aea5:	6a 32                	push   0x32
c001aea7:	e8 04 a1 ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001aeac:	83 c4 10             	add    esp,0x10
c001aeaf:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001aeb5:	75 c5                	jne    c001ae7c <IDE::detect()+0xe0>
c001aeb7:	e9 3d 01 00 00       	jmp    c001aff9 <IDE::detect()+0x25d>
c001aebc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001aec1:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001aec5:	83 ec 0c             	sub    esp,0xc
c001aec8:	68 80 00 00 00       	push   0x80
c001aecd:	55                   	push   ebp
c001aece:	6a 00                	push   0x0
c001aed0:	56                   	push   esi
c001aed1:	53                   	push   ebx
c001aed2:	e8 f9 fd ff ff       	call   c001acd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001aed7:	89 f8                	mov    eax,edi
c001aed9:	0f b6 54 24 2e       	movzx  edx,BYTE PTR [esp+0x2e]
c001aede:	89 f1                	mov    ecx,esi
c001aee0:	c1 e0 06             	shl    eax,0x6
c001aee3:	01 d8                	add    eax,ebx
c001aee5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001aeec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aef0:	88 88 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],cl
c001aef6:	8a 4c 24 2f          	mov    cl,BYTE PTR [esp+0x2f]
c001aefa:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001af01:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001af09:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001af10:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001af17:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001af1f:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001af25:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001af2b:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001af32:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001af38:	8d 54 24 58          	lea    edx,[esp+0x58]
c001af3c:	83 c4 20             	add    esp,0x20
c001af3f:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001af42:	83 c5 02             	add    ebp,0x2
c001af45:	83 c0 02             	add    eax,0x2
c001af48:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001af4e:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001af51:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001af57:	39 d5                	cmp    ebp,edx
c001af59:	75 e4                	jne    c001af3f <IDE::detect()+0x1a3>
c001af5b:	89 f8                	mov    eax,edi
c001af5d:	8d 4f 06             	lea    ecx,[edi+0x6]
c001af60:	c1 e0 06             	shl    eax,0x6
c001af63:	c1 e1 06             	shl    ecx,0x6
c001af66:	01 d8                	add    eax,ebx
c001af68:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001af6e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001af75:	66 c1 ea 09          	shr    dx,0x9
c001af79:	83 e2 01             	and    edx,0x1
c001af7c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001af81:	88 54 0b 29          	mov    BYTE PTR [ebx+ecx*1+0x29],dl
c001af85:	75 22                	jne    c001afa9 <IDE::detect()+0x20d>
c001af87:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001af8e:	74 47                	je     c001afd7 <IDE::detect()+0x23b>
c001af90:	83 ec 0c             	sub    esp,0xc
c001af93:	68 7c 01 00 00       	push   0x17c
c001af98:	e8 de c8 fe ff       	call   c000787b <malloc>
c001af9d:	89 c5                	mov    ebp,eax
c001af9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001afa2:	e8 15 05 00 00       	call   c001b4bc <ATA::ATA()>
c001afa7:	eb 17                	jmp    c001afc0 <IDE::detect()+0x224>
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	68 84 01 00 00       	push   0x184
c001afb1:	e8 c5 c8 fe ff       	call   c000787b <malloc>
c001afb6:	89 c5                	mov    ebp,eax
c001afb8:	89 04 24             	mov    DWORD PTR [esp],eax
c001afbb:	e8 58 0e 00 00       	call   c001be18 <ATAPI::ATAPI()>
c001afc0:	5a                   	pop    edx
c001afc1:	59                   	pop    ecx
c001afc2:	55                   	push   ebp
c001afc3:	53                   	push   ebx
c001afc4:	e8 ef 0a ff ff       	call   c000bab8 <Device::addChild(Device*)>
c001afc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001afcc:	53                   	push   ebx
c001afcd:	57                   	push   edi
c001afce:	6a 00                	push   0x0
c001afd0:	55                   	push   ebp
c001afd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afd4:	83 c4 20             	add    esp,0x20
c001afd7:	47                   	inc    edi
c001afd8:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c001afdd:	74 0d                	je     c001afec <IDE::detect()+0x250>
c001afdf:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c001afe7:	e9 e1 fd ff ff       	jmp    c001adcd <IDE::detect()+0x31>
c001afec:	4e                   	dec    esi
c001afed:	74 64                	je     c001b053 <IDE::detect()+0x2b7>
c001afef:	be 01 00 00 00       	mov    esi,0x1
c001aff4:	e9 cc fd ff ff       	jmp    c001adc5 <IDE::detect()+0x29>
c001aff9:	50                   	push   eax
c001affa:	6a 04                	push   0x4
c001affc:	56                   	push   esi
c001affd:	53                   	push   ebx
c001affe:	e8 27 f7 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b003:	83 c4 0c             	add    esp,0xc
c001b006:	6a 05                	push   0x5
c001b008:	89 c5                	mov    ebp,eax
c001b00a:	56                   	push   esi
c001b00b:	53                   	push   ebx
c001b00c:	e8 19 f7 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b011:	89 e9                	mov    ecx,ebp
c001b013:	83 c4 10             	add    esp,0x10
c001b016:	80 f9 14             	cmp    cl,0x14
c001b019:	74 32                	je     c001b04d <IDE::detect()+0x2b1>
c001b01b:	89 e9                	mov    ecx,ebp
c001b01d:	80 f9 69             	cmp    cl,0x69
c001b020:	75 b6                	jne    c001afd8 <IDE::detect()+0x23c>
c001b022:	3c 96                	cmp    al,0x96
c001b024:	75 b2                	jne    c001afd8 <IDE::detect()+0x23c>
c001b026:	68 a1 00 00 00       	push   0xa1
c001b02b:	6a 07                	push   0x7
c001b02d:	56                   	push   esi
c001b02e:	53                   	push   ebx
c001b02f:	e8 34 f6 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b034:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b03b:	e8 70 9f ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b048:	e9 74 fe ff ff       	jmp    c001aec1 <IDE::detect()+0x125>
c001b04d:	3c eb                	cmp    al,0xeb
c001b04f:	75 ca                	jne    c001b01b <IDE::detect()+0x27f>
c001b051:	eb d3                	jmp    c001b026 <IDE::detect()+0x28a>
c001b053:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b059:	5b                   	pop    ebx
c001b05a:	5e                   	pop    esi
c001b05b:	5f                   	pop    edi
c001b05c:	5d                   	pop    ebp
c001b05d:	c3                   	ret    

c001b05e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b05e:	55                   	push   ebp
c001b05f:	57                   	push   edi
c001b060:	56                   	push   esi
c001b061:	53                   	push   ebx
c001b062:	83 ec 1c             	sub    esp,0x1c
c001b065:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b069:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b06d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b071:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b075:	84 c0                	test   al,al
c001b077:	88 c3                	mov    bl,al
c001b079:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b07d:	0f 84 86 00 00 00    	je     c001b109 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xab>
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	68 0b 15 02 c0       	push   0xc002150b
c001b08b:	e8 d9 f5 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b097:	3c 01                	cmp    al,0x1
c001b099:	74 68                	je     c001b103 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa5>
c001b09b:	3c 02                	cmp    al,0x2
c001b09d:	75 57                	jne    c001b0f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x98>
c001b09f:	01 f6                	add    esi,esi
c001b0a1:	50                   	push   eax
c001b0a2:	09 ee                	or     esi,ebp
c001b0a4:	6a 01                	push   0x1
c001b0a6:	89 f0                	mov    eax,esi
c001b0a8:	0f b6 f0             	movzx  esi,al
c001b0ab:	c1 e6 06             	shl    esi,0x6
c001b0ae:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001b0b6:	50                   	push   eax
c001b0b7:	57                   	push   edi
c001b0b8:	e8 6d f6 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b0bd:	b2 07                	mov    dl,0x7
c001b0bf:	83 c4 10             	add    esp,0x10
c001b0c2:	b1 14                	mov    cl,0x14
c001b0c4:	a8 01                	test   al,0x1
c001b0c6:	0f 45 da             	cmovne ebx,edx
c001b0c9:	b2 03                	mov    dl,0x3
c001b0cb:	a8 02                	test   al,0x2
c001b0cd:	0f 45 da             	cmovne ebx,edx
c001b0d0:	a8 04                	test   al,0x4
c001b0d2:	0f 45 d9             	cmovne ebx,ecx
c001b0d5:	a8 08                	test   al,0x8
c001b0d7:	b1 15                	mov    cl,0x15
c001b0d9:	0f 45 da             	cmovne ebx,edx
c001b0dc:	a8 10                	test   al,0x10
c001b0de:	0f 45 d9             	cmovne ebx,ecx
c001b0e1:	a8 20                	test   al,0x20
c001b0e3:	0f 45 da             	cmovne ebx,edx
c001b0e6:	a8 40                	test   al,0x40
c001b0e8:	b2 16                	mov    dl,0x16
c001b0ea:	0f 45 da             	cmovne ebx,edx
c001b0ed:	84 c0                	test   al,al
c001b0ef:	b0 0d                	mov    al,0xd
c001b0f1:	0f 48 d8             	cmovs  ebx,eax
c001b0f4:	eb 13                	jmp    c001b109 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xab>
c001b0f6:	3c 03                	cmp    al,0x3
c001b0f8:	74 0d                	je     c001b107 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa9>
c001b0fa:	3c 04                	cmp    al,0x4
c001b0fc:	b0 08                	mov    al,0x8
c001b0fe:	0f 44 d8             	cmove  ebx,eax
c001b101:	eb 06                	jmp    c001b109 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xab>
c001b103:	b3 13                	mov    bl,0x13
c001b105:	eb 02                	jmp    c001b109 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xab>
c001b107:	b3 17                	mov    bl,0x17
c001b109:	83 c4 1c             	add    esp,0x1c
c001b10c:	88 d8                	mov    al,bl
c001b10e:	5b                   	pop    ebx
c001b10f:	5e                   	pop    esi
c001b110:	5f                   	pop    edi
c001b111:	5d                   	pop    ebp
c001b112:	c3                   	ret    
c001b113:	90                   	nop

c001b114 <IDE::polling(unsigned char, unsigned int)>:
c001b114:	57                   	push   edi
c001b115:	56                   	push   esi
c001b116:	53                   	push   ebx
c001b117:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b11b:	bb 04 00 00 00       	mov    ebx,0x4
c001b120:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b125:	52                   	push   edx
c001b126:	6a 0c                	push   0xc
c001b128:	56                   	push   esi
c001b129:	57                   	push   edi
c001b12a:	e8 fb f5 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b12f:	83 c4 10             	add    esp,0x10
c001b132:	4b                   	dec    ebx
c001b133:	75 f0                	jne    c001b125 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b135:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b13a:	50                   	push   eax
c001b13b:	6a 0c                	push   0xc
c001b13d:	56                   	push   esi
c001b13e:	57                   	push   edi
c001b13f:	e8 e6 f5 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b144:	83 c4 10             	add    esp,0x10
c001b147:	a8 01                	test   al,0x1
c001b149:	75 17                	jne    c001b162 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b14b:	a8 20                	test   al,0x20
c001b14d:	75 0f                	jne    c001b15e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b14f:	4b                   	dec    ebx
c001b150:	74 10                	je     c001b162 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b152:	84 c0                	test   al,al
c001b154:	78 e4                	js     c001b13a <IDE::polling(unsigned char, unsigned int)+0x26>
c001b156:	a8 08                	test   al,0x8
c001b158:	74 e0                	je     c001b13a <IDE::polling(unsigned char, unsigned int)+0x26>
c001b15a:	31 c0                	xor    eax,eax
c001b15c:	eb 06                	jmp    c001b164 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b15e:	b0 01                	mov    al,0x1
c001b160:	eb 02                	jmp    c001b164 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b162:	b0 02                	mov    al,0x2
c001b164:	5b                   	pop    ebx
c001b165:	5e                   	pop    esi
c001b166:	5f                   	pop    edi
c001b167:	c3                   	ret    

c001b168 <SATABus::close(int, int, void*)>:
c001b168:	31 c0                	xor    eax,eax
c001b16a:	c3                   	ret    
c001b16b:	90                   	nop

c001b16c <SATABus::detect()>:
c001b16c:	c3                   	ret    
c001b16d:	90                   	nop

c001b16e <SATABus::SATABus()>:
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b175:	83 ec 08             	sub    esp,0x8
c001b178:	68 44 15 02 c0       	push   0xc0021544
c001b17d:	50                   	push   eax
c001b17e:	e8 79 0c ff ff       	call   c000bdfc <HardDiskController::HardDiskController(char const*)>
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	ba 70 15 02 c0       	mov    edx,0xc0021570
c001b18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18f:	89 10                	mov    DWORD PTR [eax],edx
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	6a 50                	push   0x50
c001b196:	e8 85 ca fe ff       	call   c0007c20 <Phys::allocateContiguousPages(int)>
c001b19b:	83 c4 10             	add    esp,0x10
c001b19e:	89 c2                	mov    edx,eax
c001b1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1aa:	83 ec 0c             	sub    esp,0xc
c001b1ad:	6a 50                	push   0x50
c001b1af:	e8 0b e2 fe ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c001b1b4:	83 c4 10             	add    esp,0x10
c001b1b7:	89 c2                	mov    edx,eax
c001b1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1c3:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001b1c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1cc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b1d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	6a 03                	push   0x3
c001b1e1:	6a 50                	push   0x50
c001b1e3:	51                   	push   ecx
c001b1e4:	52                   	push   edx
c001b1e5:	50                   	push   eax
c001b1e6:	e8 83 eb fe ff       	call   c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b1eb:	83 c4 20             	add    esp,0x20
c001b1ee:	90                   	nop
c001b1ef:	83 c4 0c             	add    esp,0xc
c001b1f2:	c3                   	ret    
c001b1f3:	90                   	nop

c001b1f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b1fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b1fe:	09 c2                	or     edx,eax
c001b200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b204:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b20a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b20c:	31 c0                	xor    eax,eax
c001b20e:	c1 e9 08             	shr    ecx,0x8
c001b211:	83 e1 0f             	and    ecx,0xf
c001b214:	39 c8                	cmp    eax,ecx
c001b216:	74 0a                	je     c001b222 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b218:	f6 c2 01             	test   dl,0x1
c001b21b:	74 08                	je     c001b225 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b21d:	d1 ea                	shr    edx,1
c001b21f:	40                   	inc    eax
c001b220:	eb f2                	jmp    c001b214 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b222:	83 c8 ff             	or     eax,0xffffffff
c001b225:	c3                   	ret    

c001b226 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b226:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b22a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b22d:	89 c2                	mov    edx,eax
c001b22f:	c1 ea 08             	shr    edx,0x8
c001b232:	83 e2 0f             	and    edx,0xf
c001b235:	fe ca                	dec    dl
c001b237:	75 31                	jne    c001b26a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b239:	83 e0 0f             	and    eax,0xf
c001b23c:	3c 03                	cmp    al,0x3
c001b23e:	75 2a                	jne    c001b26a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b240:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b243:	b8 02 00 00 00       	mov    eax,0x2
c001b248:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b24e:	74 1c                	je     c001b26c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b250:	b8 04 00 00 00       	mov    eax,0x4
c001b255:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b25b:	74 0f                	je     c001b26c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b25d:	31 c0                	xor    eax,eax
c001b25f:	83 fa 03             	cmp    edx,0x3
c001b262:	0f 94 c0             	sete   al
c001b265:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b269:	c3                   	ret    
c001b26a:	31 c0                	xor    eax,eax
c001b26c:	c3                   	ret    
c001b26d:	90                   	nop

c001b26e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b272:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b275:	0f ba e2 0f          	bt     edx,0xf
c001b279:	72 f7                	jb     c001b272 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b27b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b27e:	83 ca 10             	or     edx,0x10
c001b281:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b284:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b287:	83 ca 01             	or     edx,0x1
c001b28a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b28d:	c3                   	ret    

c001b28e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b28e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b292:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b295:	83 e2 fe             	and    edx,0xfffffffe
c001b298:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b29b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b29e:	83 e2 ef             	and    edx,0xffffffef
c001b2a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b2a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b2a7:	0f ba e2 0e          	bt     edx,0xe
c001b2ab:	72 f7                	jb     c001b2a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b2ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b2b0:	0f ba e2 0f          	bt     edx,0xf
c001b2b4:	72 ee                	jb     c001b2a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b2b6:	c3                   	ret    
c001b2b7:	90                   	nop

c001b2b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b2b8:	55                   	push   ebp
c001b2b9:	57                   	push   edi
c001b2ba:	56                   	push   esi
c001b2bb:	53                   	push   ebx
c001b2bc:	83 ec 1c             	sub    esp,0x1c
c001b2bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b2c7:	53                   	push   ebx
c001b2c8:	55                   	push   ebp
c001b2c9:	e8 c0 ff ff ff       	call   c001b28e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b2ce:	b0 0a                	mov    al,0xa
c001b2d0:	c4 e2 79 f7 7c 24 40 	shlx   edi,DWORD PTR [esp+0x40],eax
c001b2d7:	83 ec 0c             	sub    esp,0xc
c001b2da:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b2e0:	01 f8                	add    eax,edi
c001b2e2:	89 03                	mov    DWORD PTR [ebx],eax
c001b2e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2e6:	68 00 04 00 00       	push   0x400
c001b2eb:	6a 00                	push   0x0
c001b2ed:	50                   	push   eax
c001b2ee:	e8 8d 52 fe ff       	call   c0000580 <memset>
c001b2f3:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001b2f9:	01 f8                	add    eax,edi
c001b2fb:	89 03                	mov    DWORD PTR [ebx],eax
c001b2fd:	b0 08                	mov    al,0x8
c001b2ff:	c4 e2 79 f7 54 24 58 	shlx   edx,DWORD PTR [esp+0x58],eax
c001b306:	8d b2 00 80 00 00    	lea    esi,[edx+0x8000]
c001b30c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b313:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b319:	83 c4 1c             	add    esp,0x1c
c001b31c:	01 f0                	add    eax,esi
c001b31e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b321:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b324:	68 00 01 00 00       	push   0x100
c001b329:	6a 00                	push   0x0
c001b32b:	50                   	push   eax
c001b32c:	e8 4f 52 fe ff       	call   c0000580 <memset>
c001b331:	03 b5 5c 01 00 00    	add    esi,DWORD PTR [ebp+0x15c]
c001b337:	b0 0d                	mov    al,0xd
c001b339:	31 d2                	xor    edx,edx
c001b33b:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c001b33e:	c4 e2 79 f7 74 24 48 	shlx   esi,DWORD PTR [esp+0x48],eax
c001b345:	83 c4 10             	add    esp,0x10
c001b348:	81 c6 00 a0 00 00    	add    esi,0xa000
c001b34e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b355:	03 bd 58 01 00 00    	add    edi,DWORD PTR [ebp+0x158]
c001b35b:	66 c7 47 02 08 00    	mov    WORD PTR [edi+0x2],0x8
c001b361:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b367:	83 c7 20             	add    edi,0x20
c001b36a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b36e:	01 f0                	add    eax,esi
c001b370:	01 d0                	add    eax,edx
c001b372:	89 47 e8             	mov    DWORD PTR [edi-0x18],eax
c001b375:	52                   	push   edx
c001b376:	68 00 01 00 00       	push   0x100
c001b37b:	6a 00                	push   0x0
c001b37d:	50                   	push   eax
c001b37e:	e8 fd 51 fe ff       	call   c0000580 <memset>
c001b383:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001b389:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b38d:	c7 47 ec 00 00 00 00 	mov    DWORD PTR [edi-0x14],0x0
c001b394:	83 c4 10             	add    esp,0x10
c001b397:	01 f0                	add    eax,esi
c001b399:	01 d0                	add    eax,edx
c001b39b:	81 c2 00 01 00 00    	add    edx,0x100
c001b3a1:	89 47 e8             	mov    DWORD PTR [edi-0x18],eax
c001b3a4:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b3aa:	75 af                	jne    c001b35b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b3ac:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b3b3:	50                   	push   eax
c001b3b4:	50                   	push   eax
c001b3b5:	53                   	push   ebx
c001b3b6:	55                   	push   ebp
c001b3b7:	e8 b2 fe ff ff       	call   c001b26e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b3bc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b3c3:	83 c4 2c             	add    esp,0x2c
c001b3c6:	5b                   	pop    ebx
c001b3c7:	5e                   	pop    esi
c001b3c8:	5f                   	pop    edi
c001b3c9:	5d                   	pop    ebp
c001b3ca:	c3                   	ret    
c001b3cb:	90                   	nop

c001b3cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b3cc:	55                   	push   ebp
c001b3cd:	57                   	push   edi
c001b3ce:	56                   	push   esi
c001b3cf:	53                   	push   ebx
c001b3d0:	31 db                	xor    ebx,ebx
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b3dd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b3e0:	f7 c7 01 00 00 00    	test   edi,0x1
c001b3e6:	74 7a                	je     c001b462 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b3e8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b3ec:	89 d8                	mov    eax,ebx
c001b3ee:	c1 e0 07             	shl    eax,0x7
c001b3f1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b3f8:	55                   	push   ebp
c001b3f9:	56                   	push   esi
c001b3fa:	e8 27 fe ff ff       	call   c001b226 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b3ff:	5a                   	pop    edx
c001b400:	59                   	pop    ecx
c001b401:	83 f8 01             	cmp    eax,0x1
c001b404:	75 21                	jne    c001b427 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b406:	50                   	push   eax
c001b407:	53                   	push   ebx
c001b408:	55                   	push   ebp
c001b409:	56                   	push   esi
c001b40a:	e8 a9 fe ff ff       	call   c001b2b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b40f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b416:	e8 60 c4 fe ff       	call   c000787b <malloc>
c001b41b:	89 c5                	mov    ebp,eax
c001b41d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b420:	e8 a1 10 00 00       	call   c001c4c6 <SATA::SATA()>
c001b425:	eb 24                	jmp    c001b44b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b427:	83 f8 04             	cmp    eax,0x4
c001b42a:	75 36                	jne    c001b462 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b42c:	51                   	push   ecx
c001b42d:	53                   	push   ebx
c001b42e:	55                   	push   ebp
c001b42f:	56                   	push   esi
c001b430:	e8 83 fe ff ff       	call   c001b2b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b435:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b43c:	e8 3a c4 fe ff       	call   c000787b <malloc>
c001b441:	89 c5                	mov    ebp,eax
c001b443:	89 04 24             	mov    DWORD PTR [esp],eax
c001b446:	e8 fb 17 00 00       	call   c001cc46 <SATAPI::SATAPI()>
c001b44b:	58                   	pop    eax
c001b44c:	5a                   	pop    edx
c001b44d:	55                   	push   ebp
c001b44e:	56                   	push   esi
c001b44f:	e8 64 06 ff ff       	call   c000bab8 <Device::addChild(Device*)>
c001b454:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b457:	56                   	push   esi
c001b458:	6a 00                	push   0x0
c001b45a:	53                   	push   ebx
c001b45b:	55                   	push   ebp
c001b45c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b45f:	83 c4 20             	add    esp,0x20
c001b462:	43                   	inc    ebx
c001b463:	d1 ef                	shr    edi,1
c001b465:	83 fb 20             	cmp    ebx,0x20
c001b468:	0f 85 72 ff ff ff    	jne    c001b3e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b46e:	83 c4 0c             	add    esp,0xc
c001b471:	5b                   	pop    ebx
c001b472:	5e                   	pop    esi
c001b473:	5f                   	pop    edi
c001b474:	5d                   	pop    ebp
c001b475:	c3                   	ret    

c001b476 <SATABus::open(int, int, void*)>:
c001b476:	83 ec 14             	sub    esp,0x14
c001b479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b47d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b483:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b489:	52                   	push   edx
c001b48a:	50                   	push   eax
c001b48b:	e8 3c ff ff ff       	call   c001b3cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b490:	31 c0                	xor    eax,eax
c001b492:	83 c4 1c             	add    esp,0x1c
c001b495:	c3                   	ret    

c001b496 <ATA::close(int, int, void*)>:
c001b496:	83 ec 0c             	sub    esp,0xc
c001b499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b49d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b4a3:	85 c0                	test   eax,eax
c001b4a5:	74 0c                	je     c001b4b3 <ATA::close(int, int, void*)+0x1d>
c001b4a7:	83 ec 0c             	sub    esp,0xc
c001b4aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4ac:	50                   	push   eax
c001b4ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	31 c0                	xor    eax,eax
c001b4b5:	83 c4 0c             	add    esp,0xc
c001b4b8:	c3                   	ret    
c001b4b9:	90                   	nop

c001b4ba <ATA::powerSaving(PowerSavingLevel)>:
c001b4ba:	c3                   	ret    
c001b4bb:	90                   	nop

c001b4bc <ATA::ATA()>:
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c3:	83 ec 04             	sub    esp,0x4
c001b4c6:	68 00 02 00 00       	push   0x200
c001b4cb:	68 3d 16 02 c0       	push   0xc002163d
c001b4d0:	50                   	push   eax
c001b4d1:	e8 b0 09 ff ff       	call   c000be86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b4d6:	83 c4 10             	add    esp,0x10
c001b4d9:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c001b4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e2:	89 10                	mov    DWORD PTR [eax],edx
c001b4e4:	90                   	nop
c001b4e5:	83 c4 0c             	add    esp,0xc
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <ATA::flush(bool)>:
c001b4ea:	53                   	push   ebx
c001b4eb:	83 ec 08             	sub    esp,0x8
c001b4ee:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b4f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4f7:	19 c0                	sbb    eax,eax
c001b4f9:	83 e0 fd             	and    eax,0xfffffffd
c001b4fc:	05 ea 00 00 00       	add    eax,0xea
c001b501:	50                   	push   eax
c001b502:	6a 07                	push   0x7
c001b504:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b50b:	50                   	push   eax
c001b50c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b512:	e8 51 f1 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b517:	83 c4 0c             	add    esp,0xc
c001b51a:	6a 00                	push   0x0
c001b51c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b523:	50                   	push   eax
c001b524:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b52a:	e8 e5 fb ff ff       	call   c001b114 <IDE::polling(unsigned char, unsigned int)>
c001b52f:	83 c4 18             	add    esp,0x18
c001b532:	5b                   	pop    ebx
c001b533:	c3                   	ret    

c001b534 <ATA::readyForCommand()>:
c001b534:	56                   	push   esi
c001b535:	53                   	push   ebx
c001b536:	53                   	push   ebx
c001b537:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b53b:	31 db                	xor    ebx,ebx
c001b53d:	51                   	push   ecx
c001b53e:	6a 0c                	push   0xc
c001b540:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b547:	50                   	push   eax
c001b548:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b54e:	e8 d7 f1 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001b553:	83 c4 10             	add    esp,0x10
c001b556:	a8 88                	test   al,0x88
c001b558:	74 1f                	je     c001b579 <ATA::readyForCommand()+0x45>
c001b55a:	43                   	inc    ebx
c001b55b:	83 fb 63             	cmp    ebx,0x63
c001b55e:	7e dd                	jle    c001b53d <ATA::readyForCommand()+0x9>
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	6a 0a                	push   0xa
c001b565:	e8 46 9a ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001b56a:	83 c4 10             	add    esp,0x10
c001b56d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b573:	75 c8                	jne    c001b53d <ATA::readyForCommand()+0x9>
c001b575:	31 c0                	xor    eax,eax
c001b577:	eb 02                	jmp    c001b57b <ATA::readyForCommand()+0x47>
c001b579:	b0 01                	mov    al,0x1
c001b57b:	5a                   	pop    edx
c001b57c:	5b                   	pop    ebx
c001b57d:	5e                   	pop    esi
c001b57e:	c3                   	ret    
c001b57f:	90                   	nop

c001b580 <ATA::access(unsigned long long, int, void*, bool)>:
c001b580:	55                   	push   ebp
c001b581:	57                   	push   edi
c001b582:	56                   	push   esi
c001b583:	53                   	push   ebx
c001b584:	83 ec 2c             	sub    esp,0x2c
c001b587:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b58b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b58f:	c5 fa 7e 44 24 44    	vmovq  xmm0,QWORD PTR [esp+0x44]
c001b595:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b599:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001b59d:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001b5a3:	c5 f9 7e c6          	vmovd  esi,xmm0
c001b5a7:	c4 e3 79 16 c7 01    	vpextrd edi,xmm0,0x1
c001b5ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b5b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b5b7:	83 c0 06             	add    eax,0x6
c001b5ba:	c1 e0 06             	shl    eax,0x6
c001b5bd:	80 7c 05 29 00       	cmp    BYTE PTR [ebp+eax*1+0x29],0x0
c001b5c2:	74 5c                	je     c001b620 <ATA::access(unsigned long long, int, void*, bool)+0xa0>
c001b5c4:	c5 f1 73 d0 1c       	vpsrlq xmm1,xmm0,0x1c
c001b5c9:	c5 f1 6c c9          	vpunpcklqdq xmm1,xmm1,xmm1
c001b5cd:	c4 e2 79 17 c9       	vptest xmm1,xmm1
c001b5d2:	74 24                	je     c001b5f8 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001b5d4:	31 d2                	xor    edx,edx
c001b5d6:	8d 04 d5 00 00 00 00 	lea    eax,[edx*8+0x0]
c001b5dd:	0f b6 c0             	movzx  eax,al
c001b5e0:	c5 f9 6e c8          	vmovd  xmm1,eax
c001b5e4:	c5 f9 d3 c9          	vpsrlq xmm1,xmm0,xmm1
c001b5e8:	c5 f9 7e c8          	vmovd  eax,xmm1
c001b5ec:	88 44 14 1a          	mov    BYTE PTR [esp+edx*1+0x1a],al
c001b5f0:	42                   	inc    edx
c001b5f1:	83 fa 06             	cmp    edx,0x6
c001b5f4:	75 e0                	jne    c001b5d6 <ATA::access(unsigned long long, int, void*, bool)+0x56>
c001b5f6:	eb 74                	jmp    c001b66c <ATA::access(unsigned long long, int, void*, bool)+0xec>
c001b5f8:	c5 f9 73 d0 10       	vpsrlq xmm0,xmm0,0x10
c001b5fd:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b602:	bf 01 00 00 00       	mov    edi,0x1
c001b607:	c1 ee 18             	shr    esi,0x18
c001b60a:	c5 f9 7e c0          	vmovd  eax,xmm0
c001b60e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b615:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b619:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b61e:	eb 53                	jmp    c001b673 <ATA::access(unsigned long long, int, void*, bool)+0xf3>
c001b620:	6a 00                	push   0x0
c001b622:	6a 3f                	push   0x3f
c001b624:	57                   	push   edi
c001b625:	56                   	push   esi
c001b626:	e8 95 2a 00 00       	call   c001e0c0 <__umoddi3>
c001b62b:	83 c4 10             	add    esp,0x10
c001b62e:	40                   	inc    eax
c001b62f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b633:	6a 00                	push   0x0
c001b635:	68 f0 03 00 00       	push   0x3f0
c001b63a:	57                   	push   edi
c001b63b:	56                   	push   esi
c001b63c:	e8 7f 29 00 00       	call   c001dfc0 <__udivdi3>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b649:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b650:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b655:	6a 00                	push   0x0
c001b657:	6a 3f                	push   0x3f
c001b659:	57                   	push   edi
c001b65a:	31 ff                	xor    edi,edi
c001b65c:	56                   	push   esi
c001b65d:	e8 5e 29 00 00       	call   c001dfc0 <__udivdi3>
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	89 c6                	mov    esi,eax
c001b667:	83 e6 0f             	and    esi,0xf
c001b66a:	eb 07                	jmp    c001b673 <ATA::access(unsigned long long, int, void*, bool)+0xf3>
c001b66c:	31 f6                	xor    esi,esi
c001b66e:	bf 02 00 00 00       	mov    edi,0x2
c001b673:	50                   	push   eax
c001b674:	6a 00                	push   0x0
c001b676:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b67d:	50                   	push   eax
c001b67e:	55                   	push   ebp
c001b67f:	e8 f6 f1 ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001b684:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b687:	e8 a8 fe ff ff       	call   c001b534 <ATA::readyForCommand()>
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	84 c0                	test   al,al
c001b691:	75 0a                	jne    c001b69d <ATA::access(unsigned long long, int, void*, bool)+0x11d>
c001b693:	be 01 00 00 00       	mov    esi,0x1
c001b698:	e9 80 02 00 00       	jmp    c001b91d <ATA::access(unsigned long long, int, void*, bool)+0x39d>
c001b69d:	b0 04                	mov    al,0x4
c001b69f:	c4 e2 79 f7 83 74 01 00 00 	shlx   eax,DWORD PTR [ebx+0x174],eax
c001b6a8:	09 c6                	or     esi,eax
c001b6aa:	89 f8                	mov    eax,edi
c001b6ac:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b6b2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b6b9:	84 c0                	test   al,al
c001b6bb:	75 05                	jne    c001b6c2 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001b6bd:	83 ce a0             	or     esi,0xffffffa0
c001b6c0:	eb 03                	jmp    c001b6c5 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001b6c2:	83 ce e0             	or     esi,0xffffffe0
c001b6c5:	89 f0                	mov    eax,esi
c001b6c7:	0f b6 f0             	movzx  esi,al
c001b6ca:	56                   	push   esi
c001b6cb:	6a 06                	push   0x6
c001b6cd:	51                   	push   ecx
c001b6ce:	52                   	push   edx
c001b6cf:	e8 94 ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	6a 00                	push   0x0
c001b6d9:	6a 01                	push   0x1
c001b6db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b6e2:	50                   	push   eax
c001b6e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b6e9:	e8 7a ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6ee:	89 f8                	mov    eax,edi
c001b6f0:	83 c4 10             	add    esp,0x10
c001b6f3:	3c 02                	cmp    al,0x2
c001b6f5:	75 6e                	jne    c001b765 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001b6f7:	6a 00                	push   0x0
c001b6f9:	6a 08                	push   0x8
c001b6fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b702:	50                   	push   eax
c001b703:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b709:	e8 5a ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b70e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b713:	50                   	push   eax
c001b714:	6a 09                	push   0x9
c001b716:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b71d:	50                   	push   eax
c001b71e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b724:	e8 3f ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b729:	83 c4 20             	add    esp,0x20
c001b72c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b731:	50                   	push   eax
c001b732:	6a 0a                	push   0xa
c001b734:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b73b:	50                   	push   eax
c001b73c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b742:	e8 21 ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b747:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b74c:	50                   	push   eax
c001b74d:	6a 0b                	push   0xb
c001b74f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b756:	50                   	push   eax
c001b757:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b75d:	e8 06 ef ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b762:	83 c4 20             	add    esp,0x20
c001b765:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b76a:	50                   	push   eax
c001b76b:	6a 02                	push   0x2
c001b76d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b774:	50                   	push   eax
c001b775:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b77b:	e8 e8 ee ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b780:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b785:	50                   	push   eax
c001b786:	6a 03                	push   0x3
c001b788:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b78f:	50                   	push   eax
c001b790:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b796:	e8 cd ee ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b79b:	83 c4 20             	add    esp,0x20
c001b79e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b7a3:	50                   	push   eax
c001b7a4:	6a 04                	push   0x4
c001b7a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b7ad:	50                   	push   eax
c001b7ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b7b4:	e8 af ee ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b7be:	50                   	push   eax
c001b7bf:	6a 05                	push   0x5
c001b7c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b7c8:	50                   	push   eax
c001b7c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b7cf:	e8 94 ee ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7d4:	89 f8                	mov    eax,edi
c001b7d6:	83 c4 20             	add    esp,0x20
c001b7d9:	3c 02                	cmp    al,0x2
c001b7db:	0f 94 44 24 0e       	sete   BYTE PTR [esp+0xe]
c001b7e0:	75 07                	jne    c001b7e9 <ATA::access(unsigned long long, int, void*, bool)+0x269>
c001b7e2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b7e7:	75 42                	jne    c001b82b <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001b7e9:	89 f8                	mov    eax,edi
c001b7eb:	3c 02                	cmp    al,0x2
c001b7ed:	0f 95 c1             	setne  cl
c001b7f0:	74 0c                	je     c001b7fe <ATA::access(unsigned long long, int, void*, bool)+0x27e>
c001b7f2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b7f7:	b8 30 00 00 00       	mov    eax,0x30
c001b7fc:	75 32                	jne    c001b830 <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001b7fe:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c001b802:	83 f2 01             	xor    edx,0x1
c001b805:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b80a:	74 09                	je     c001b815 <ATA::access(unsigned long long, int, void*, bool)+0x295>
c001b80c:	b8 24 00 00 00       	mov    eax,0x24
c001b811:	84 d2                	test   dl,dl
c001b813:	75 1b                	jne    c001b830 <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001b815:	84 c9                	test   cl,cl
c001b817:	0f 84 76 fe ff ff    	je     c001b693 <ATA::access(unsigned long long, int, void*, bool)+0x113>
c001b81d:	b8 20 00 00 00       	mov    eax,0x20
c001b822:	84 d2                	test   dl,dl
c001b824:	75 0a                	jne    c001b830 <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001b826:	e9 68 fe ff ff       	jmp    c001b693 <ATA::access(unsigned long long, int, void*, bool)+0x113>
c001b82b:	b8 34 00 00 00       	mov    eax,0x34
c001b830:	50                   	push   eax
c001b831:	6a 07                	push   0x7
c001b833:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b83a:	50                   	push   eax
c001b83b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b841:	e8 22 ee ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b846:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	85 f6                	test   esi,esi
c001b84f:	0f 84 ae 00 00 00    	je     c001b903 <ATA::access(unsigned long long, int, void*, bool)+0x383>
c001b855:	50                   	push   eax
c001b856:	6a 01                	push   0x1
c001b858:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b85f:	50                   	push   eax
c001b860:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b866:	e8 a9 f8 ff ff       	call   c001b114 <IDE::polling(unsigned char, unsigned int)>
c001b86b:	83 c4 10             	add    esp,0x10
c001b86e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b874:	84 c0                	test   al,al
c001b876:	74 20                	je     c001b898 <ATA::access(unsigned long long, int, void*, bool)+0x318>
c001b878:	0f b6 f0             	movzx  esi,al
c001b87b:	0f b6 d2             	movzx  edx,dl
c001b87e:	56                   	push   esi
c001b87f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b886:	50                   	push   eax
c001b887:	52                   	push   edx
c001b888:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b88e:	e8 cb f7 ff ff       	call   c001b05e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b893:	e9 82 00 00 00       	jmp    c001b91a <ATA::access(unsigned long long, int, void*, bool)+0x39a>
c001b898:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b89d:	74 33                	je     c001b8d2 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b89f:	31 ed                	xor    ebp,ebp
c001b8a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b8a5:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b8a9:	50                   	push   eax
c001b8aa:	50                   	push   eax
c001b8ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b8b2:	50                   	push   eax
c001b8b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b8b9:	e8 98 ed ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001b8be:	89 c2                	mov    edx,eax
c001b8c0:	89 f8                	mov    eax,edi
c001b8c2:	66 ef                	out    dx,ax
c001b8c4:	45                   	inc    ebp
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b8ce:	75 d1                	jne    c001b8a1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b8d0:	eb 23                	jmp    c001b8f5 <ATA::access(unsigned long long, int, void*, bool)+0x375>
c001b8d2:	0f b6 d2             	movzx  edx,dl
c001b8d5:	51                   	push   ecx
c001b8d6:	51                   	push   ecx
c001b8d7:	52                   	push   edx
c001b8d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b8de:	e8 73 ed ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001b8e3:	b9 00 01 00 00       	mov    ecx,0x100
c001b8e8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b8ec:	89 c2                	mov    edx,eax
c001b8ee:	fc                   	cld    
c001b8ef:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b8f2:	83 c4 10             	add    esp,0x10
c001b8f5:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b8fd:	4e                   	dec    esi
c001b8fe:	e9 4a ff ff ff       	jmp    c001b84d <ATA::access(unsigned long long, int, void*, bool)+0x2cd>
c001b903:	31 f6                	xor    esi,esi
c001b905:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b90a:	74 11                	je     c001b91d <ATA::access(unsigned long long, int, void*, bool)+0x39d>
c001b90c:	50                   	push   eax
c001b90d:	50                   	push   eax
c001b90e:	0f b6 6c 24 16       	movzx  ebp,BYTE PTR [esp+0x16]
c001b913:	55                   	push   ebp
c001b914:	53                   	push   ebx
c001b915:	e8 d0 fb ff ff       	call   c001b4ea <ATA::flush(bool)>
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	83 c4 2c             	add    esp,0x2c
c001b920:	89 f0                	mov    eax,esi
c001b922:	5b                   	pop    ebx
c001b923:	5e                   	pop    esi
c001b924:	5f                   	pop    edi
c001b925:	5d                   	pop    ebp
c001b926:	c3                   	ret    
c001b927:	90                   	nop

c001b928 <ATA::detectCHS()>:
c001b928:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b92c:	b0 06                	mov    al,0x6
c001b92e:	c4 e2 79 f7 82 78 01 00 00 	shlx   eax,DWORD PTR [edx+0x178],eax
c001b937:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b93d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b947:	c7 44 24 04 94 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021594
c001b94f:	e9 69 4b ff ff       	jmp    c00104bd <KePanic(char const*)>

c001b954 <ATA::open(int, int, void*)>:
c001b954:	56                   	push   esi
c001b955:	53                   	push   ebx
c001b956:	50                   	push   eax
c001b957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b95b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b95f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b963:	89 c2                	mov    edx,eax
c001b965:	c1 e2 06             	shl    edx,0x6
c001b968:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b96e:	83 c0 06             	add    eax,0x6
c001b971:	01 ca                	add    edx,ecx
c001b973:	89 8b 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],ecx
c001b979:	c1 e0 06             	shl    eax,0x6
c001b97c:	0f b6 b2 6d 01 00 00 	movzx  esi,BYTE PTR [edx+0x16d]
c001b983:	89 b3 70 01 00 00    	mov    DWORD PTR [ebx+0x170],esi
c001b989:	0f b6 92 6e 01 00 00 	movzx  edx,BYTE PTR [edx+0x16e]
c001b990:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b99a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b9a0:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b9a7:	80 7c 01 29 00       	cmp    BYTE PTR [ecx+eax*1+0x29],0x0
c001b9ac:	75 0c                	jne    c001b9ba <ATA::open(int, int, void*)+0x66>
c001b9ae:	83 ec 0c             	sub    esp,0xc
c001b9b1:	53                   	push   ebx
c001b9b2:	e8 71 ff ff ff       	call   c001b928 <ATA::detectCHS()>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b9c0:	b0 06                	mov    al,0x6
c001b9c2:	c4 e2 79 f7 83 78 01 00 00 	shlx   eax,DWORD PTR [ebx+0x178],eax
c001b9cb:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b9d2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b9dc:	d1 e8                	shr    eax,1
c001b9de:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b9e4:	6a 04                	push   0x4
c001b9e6:	6a 0c                	push   0xc
c001b9e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b9ef:	50                   	push   eax
c001b9f0:	52                   	push   edx
c001b9f1:	e8 72 ec ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9f6:	90                   	nop
c001b9f7:	90                   	nop
c001b9f8:	6a 00                	push   0x0
c001b9fa:	6a 0c                	push   0xc
c001b9fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ba03:	50                   	push   eax
c001ba04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ba0a:	e8 59 ec ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba0f:	83 c4 14             	add    esp,0x14
c001ba12:	53                   	push   ebx
c001ba13:	e8 d6 04 ff ff       	call   c000beee <PhysicalDisk::startCache()>
c001ba18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba1b:	e8 76 16 ff ff       	call   c000d096 <createPartitionsForDisk(PhysicalDisk*)>
c001ba20:	83 c4 14             	add    esp,0x14
c001ba23:	31 c0                	xor    eax,eax
c001ba25:	5b                   	pop    ebx
c001ba26:	5e                   	pop    esi
c001ba27:	c3                   	ret    

c001ba28 <combineCharAndColour(char, unsigned char)>:
c001ba28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba2d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ba33:	c1 e0 08             	shl    eax,0x8
c001ba36:	09 d0                	or     eax,edx
c001ba38:	c3                   	ret    

c001ba39 <combineColours(unsigned char, unsigned char)>:
c001ba39:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba3e:	c1 e0 04             	shl    eax,0x4
c001ba41:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ba45:	c3                   	ret    

c001ba46 <ATA::read(unsigned long long, int, void*)>:
c001ba46:	55                   	push   ebp
c001ba47:	57                   	push   edi
c001ba48:	56                   	push   esi
c001ba49:	be 04 00 00 00       	mov    esi,0x4
c001ba4e:	53                   	push   ebx
c001ba4f:	83 ec 0c             	sub    esp,0xc
c001ba52:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba5e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ba62:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ba65:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ba6b:	0f 87 a1 01 00 00    	ja     c001bc12 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ba71:	be 06 00 00 00       	mov    esi,0x6
c001ba76:	85 c9                	test   ecx,ecx
c001ba78:	0f 84 94 01 00 00    	je     c001bc12 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ba7e:	55                   	push   ebp
c001ba7f:	55                   	push   ebp
c001ba80:	6a 00                	push   0x0
c001ba82:	51                   	push   ecx
c001ba83:	53                   	push   ebx
c001ba84:	52                   	push   edx
c001ba85:	50                   	push   eax
c001ba86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ba8a:	e8 f1 fa ff ff       	call   c001b580 <ATA::access(unsigned long long, int, void*, bool)>
c001ba8f:	83 c4 20             	add    esp,0x20
c001ba92:	89 c6                	mov    esi,eax
c001ba94:	85 c0                	test   eax,eax
c001ba96:	0f 85 71 01 00 00    	jne    c001bc0d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ba9c:	50                   	push   eax
c001ba9d:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001baa3:	bd 10 27 00 00       	mov    ebp,0x2710
c001baa8:	50                   	push   eax
c001baa9:	89 da                	mov    edx,ebx
c001baab:	6a 0f                	push   0xf
c001baad:	6a 00                	push   0x0
c001baaf:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001bab5:	e8 7f ff ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001baba:	59                   	pop    ecx
c001babb:	5b                   	pop    ebx
c001babc:	b9 0a 00 00 00       	mov    ecx,0xa
c001bac1:	0f b6 d8             	movzx  ebx,al
c001bac4:	89 d0                	mov    eax,edx
c001bac6:	99                   	cdq    
c001bac7:	53                   	push   ebx
c001bac8:	f7 fd                	idiv   ebp
c001baca:	99                   	cdq    
c001bacb:	f7 f9                	idiv   ecx
c001bacd:	83 c2 30             	add    edx,0x30
c001bad0:	0f b6 d2             	movzx  edx,dl
c001bad3:	52                   	push   edx
c001bad4:	e8 4f ff ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bad9:	5f                   	pop    edi
c001bada:	5a                   	pop    edx
c001badb:	bf e8 03 00 00       	mov    edi,0x3e8
c001bae0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bae6:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001baeb:	53                   	push   ebx
c001baec:	99                   	cdq    
c001baed:	f7 ff                	idiv   edi
c001baef:	99                   	cdq    
c001baf0:	f7 f9                	idiv   ecx
c001baf2:	8d 42 30             	lea    eax,[edx+0x30]
c001baf5:	0f b6 c0             	movzx  eax,al
c001baf8:	50                   	push   eax
c001baf9:	e8 2a ff ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bafe:	5f                   	pop    edi
c001baff:	5a                   	pop    edx
c001bb00:	bf 64 00 00 00       	mov    edi,0x64
c001bb05:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bb0b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb10:	53                   	push   ebx
c001bb11:	99                   	cdq    
c001bb12:	f7 ff                	idiv   edi
c001bb14:	99                   	cdq    
c001bb15:	f7 f9                	idiv   ecx
c001bb17:	8d 42 30             	lea    eax,[edx+0x30]
c001bb1a:	0f b6 c0             	movzx  eax,al
c001bb1d:	50                   	push   eax
c001bb1e:	e8 05 ff ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bb23:	5a                   	pop    edx
c001bb24:	5a                   	pop    edx
c001bb25:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bb2b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb30:	53                   	push   ebx
c001bb31:	99                   	cdq    
c001bb32:	f7 f9                	idiv   ecx
c001bb34:	99                   	cdq    
c001bb35:	f7 f9                	idiv   ecx
c001bb37:	8d 42 30             	lea    eax,[edx+0x30]
c001bb3a:	0f b6 c0             	movzx  eax,al
c001bb3d:	50                   	push   eax
c001bb3e:	e8 e5 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bb43:	5a                   	pop    edx
c001bb44:	5a                   	pop    edx
c001bb45:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bb4b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb50:	53                   	push   ebx
c001bb51:	99                   	cdq    
c001bb52:	f7 f9                	idiv   ecx
c001bb54:	83 c2 30             	add    edx,0x30
c001bb57:	0f b6 d2             	movzx  edx,dl
c001bb5a:	52                   	push   edx
c001bb5b:	e8 c8 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bb60:	5a                   	pop    edx
c001bb61:	5a                   	pop    edx
c001bb62:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bb68:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb6d:	53                   	push   ebx
c001bb6e:	99                   	cdq    
c001bb6f:	f7 fd                	idiv   ebp
c001bb71:	99                   	cdq    
c001bb72:	f7 f9                	idiv   ecx
c001bb74:	8d 42 30             	lea    eax,[edx+0x30]
c001bb77:	0f b6 c0             	movzx  eax,al
c001bb7a:	50                   	push   eax
c001bb7b:	e8 a8 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bb80:	5d                   	pop    ebp
c001bb81:	5a                   	pop    edx
c001bb82:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bb87:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bb8d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb92:	53                   	push   ebx
c001bb93:	99                   	cdq    
c001bb94:	f7 fd                	idiv   ebp
c001bb96:	99                   	cdq    
c001bb97:	f7 f9                	idiv   ecx
c001bb99:	8d 42 30             	lea    eax,[edx+0x30]
c001bb9c:	0f b6 c0             	movzx  eax,al
c001bb9f:	50                   	push   eax
c001bba0:	e8 83 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bba5:	5d                   	pop    ebp
c001bba6:	5a                   	pop    edx
c001bba7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bbad:	53                   	push   ebx
c001bbae:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bbb3:	99                   	cdq    
c001bbb4:	f7 ff                	idiv   edi
c001bbb6:	99                   	cdq    
c001bbb7:	f7 f9                	idiv   ecx
c001bbb9:	8d 42 30             	lea    eax,[edx+0x30]
c001bbbc:	0f b6 c0             	movzx  eax,al
c001bbbf:	50                   	push   eax
c001bbc0:	e8 63 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bbc5:	5f                   	pop    edi
c001bbc6:	5d                   	pop    ebp
c001bbc7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bbcd:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bbd2:	53                   	push   ebx
c001bbd3:	99                   	cdq    
c001bbd4:	f7 f9                	idiv   ecx
c001bbd6:	99                   	cdq    
c001bbd7:	f7 f9                	idiv   ecx
c001bbd9:	8d 42 30             	lea    eax,[edx+0x30]
c001bbdc:	0f b6 c0             	movzx  eax,al
c001bbdf:	50                   	push   eax
c001bbe0:	e8 43 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bbe5:	5a                   	pop    edx
c001bbe6:	5f                   	pop    edi
c001bbe7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bbed:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bbf2:	53                   	push   ebx
c001bbf3:	99                   	cdq    
c001bbf4:	f7 f9                	idiv   ecx
c001bbf6:	83 c2 30             	add    edx,0x30
c001bbf9:	0f b6 d2             	movzx  edx,dl
c001bbfc:	52                   	push   edx
c001bbfd:	e8 26 fe ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bc0b:	eb 05                	jmp    c001bc12 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001bc0d:	be 01 00 00 00       	mov    esi,0x1
c001bc12:	83 c4 0c             	add    esp,0xc
c001bc15:	89 f0                	mov    eax,esi
c001bc17:	5b                   	pop    ebx
c001bc18:	5e                   	pop    esi
c001bc19:	5f                   	pop    edi
c001bc1a:	5d                   	pop    ebp
c001bc1b:	c3                   	ret    

c001bc1c <ATA::write(unsigned long long, int, void*)>:
c001bc1c:	55                   	push   ebp
c001bc1d:	57                   	push   edi
c001bc1e:	56                   	push   esi
c001bc1f:	be 04 00 00 00       	mov    esi,0x4
c001bc24:	53                   	push   ebx
c001bc25:	83 ec 0c             	sub    esp,0xc
c001bc28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bc2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bc30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bc34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bc38:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bc3b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bc41:	0f 87 9c 01 00 00    	ja     c001bde3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bc47:	be 06 00 00 00       	mov    esi,0x6
c001bc4c:	85 c9                	test   ecx,ecx
c001bc4e:	0f 84 8f 01 00 00    	je     c001bde3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bc54:	55                   	push   ebp
c001bc55:	55                   	push   ebp
c001bc56:	6a 01                	push   0x1
c001bc58:	51                   	push   ecx
c001bc59:	53                   	push   ebx
c001bc5a:	52                   	push   edx
c001bc5b:	50                   	push   eax
c001bc5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc60:	e8 1b f9 ff ff       	call   c001b580 <ATA::access(unsigned long long, int, void*, bool)>
c001bc65:	83 c4 20             	add    esp,0x20
c001bc68:	89 c6                	mov    esi,eax
c001bc6a:	85 c0                	test   eax,eax
c001bc6c:	0f 85 6c 01 00 00    	jne    c001bdde <ATA::write(unsigned long long, int, void*)+0x1c2>
c001bc72:	50                   	push   eax
c001bc73:	bd 10 27 00 00       	mov    ebp,0x2710
c001bc78:	50                   	push   eax
c001bc79:	6a 0f                	push   0xf
c001bc7b:	6a 00                	push   0x0
c001bc7d:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001bc83:	e8 b1 fd ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001bc88:	5a                   	pop    edx
c001bc89:	59                   	pop    ecx
c001bc8a:	b9 0a 00 00 00       	mov    ecx,0xa
c001bc8f:	0f b6 d8             	movzx  ebx,al
c001bc92:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bc97:	53                   	push   ebx
c001bc98:	99                   	cdq    
c001bc99:	f7 fd                	idiv   ebp
c001bc9b:	99                   	cdq    
c001bc9c:	f7 f9                	idiv   ecx
c001bc9e:	8d 42 30             	lea    eax,[edx+0x30]
c001bca1:	0f b6 c0             	movzx  eax,al
c001bca4:	50                   	push   eax
c001bca5:	e8 7e fd ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bcaa:	5f                   	pop    edi
c001bcab:	5a                   	pop    edx
c001bcac:	bf e8 03 00 00       	mov    edi,0x3e8
c001bcb1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bcb7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bcbc:	53                   	push   ebx
c001bcbd:	99                   	cdq    
c001bcbe:	f7 ff                	idiv   edi
c001bcc0:	99                   	cdq    
c001bcc1:	f7 f9                	idiv   ecx
c001bcc3:	8d 42 30             	lea    eax,[edx+0x30]
c001bcc6:	0f b6 c0             	movzx  eax,al
c001bcc9:	50                   	push   eax
c001bcca:	e8 59 fd ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bccf:	5f                   	pop    edi
c001bcd0:	5a                   	pop    edx
c001bcd1:	bf 64 00 00 00       	mov    edi,0x64
c001bcd6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bcdc:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bce1:	53                   	push   ebx
c001bce2:	99                   	cdq    
c001bce3:	f7 ff                	idiv   edi
c001bce5:	99                   	cdq    
c001bce6:	f7 f9                	idiv   ecx
c001bce8:	8d 42 30             	lea    eax,[edx+0x30]
c001bceb:	0f b6 c0             	movzx  eax,al
c001bcee:	50                   	push   eax
c001bcef:	e8 34 fd ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bcf4:	5a                   	pop    edx
c001bcf5:	5a                   	pop    edx
c001bcf6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bcfc:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bd01:	53                   	push   ebx
c001bd02:	99                   	cdq    
c001bd03:	f7 f9                	idiv   ecx
c001bd05:	99                   	cdq    
c001bd06:	f7 f9                	idiv   ecx
c001bd08:	8d 42 30             	lea    eax,[edx+0x30]
c001bd0b:	0f b6 c0             	movzx  eax,al
c001bd0e:	50                   	push   eax
c001bd0f:	e8 14 fd ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bd14:	5a                   	pop    edx
c001bd15:	5a                   	pop    edx
c001bd16:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bd1c:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bd21:	53                   	push   ebx
c001bd22:	99                   	cdq    
c001bd23:	f7 f9                	idiv   ecx
c001bd25:	8d 42 30             	lea    eax,[edx+0x30]
c001bd28:	0f b6 c0             	movzx  eax,al
c001bd2b:	50                   	push   eax
c001bd2c:	e8 f7 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bd31:	5a                   	pop    edx
c001bd32:	5a                   	pop    edx
c001bd33:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bd39:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bd3e:	53                   	push   ebx
c001bd3f:	99                   	cdq    
c001bd40:	f7 fd                	idiv   ebp
c001bd42:	99                   	cdq    
c001bd43:	f7 f9                	idiv   ecx
c001bd45:	8d 42 30             	lea    eax,[edx+0x30]
c001bd48:	0f b6 c0             	movzx  eax,al
c001bd4b:	50                   	push   eax
c001bd4c:	e8 d7 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bd51:	5d                   	pop    ebp
c001bd52:	5a                   	pop    edx
c001bd53:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bd58:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bd5e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bd63:	53                   	push   ebx
c001bd64:	99                   	cdq    
c001bd65:	f7 fd                	idiv   ebp
c001bd67:	99                   	cdq    
c001bd68:	f7 f9                	idiv   ecx
c001bd6a:	8d 42 30             	lea    eax,[edx+0x30]
c001bd6d:	0f b6 c0             	movzx  eax,al
c001bd70:	50                   	push   eax
c001bd71:	e8 b2 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bd76:	5d                   	pop    ebp
c001bd77:	5a                   	pop    edx
c001bd78:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bd7e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bd83:	53                   	push   ebx
c001bd84:	99                   	cdq    
c001bd85:	f7 ff                	idiv   edi
c001bd87:	99                   	cdq    
c001bd88:	f7 f9                	idiv   ecx
c001bd8a:	8d 42 30             	lea    eax,[edx+0x30]
c001bd8d:	0f b6 c0             	movzx  eax,al
c001bd90:	50                   	push   eax
c001bd91:	e8 92 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bd96:	5f                   	pop    edi
c001bd97:	5d                   	pop    ebp
c001bd98:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bd9e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bda3:	53                   	push   ebx
c001bda4:	99                   	cdq    
c001bda5:	f7 f9                	idiv   ecx
c001bda7:	99                   	cdq    
c001bda8:	f7 f9                	idiv   ecx
c001bdaa:	8d 42 30             	lea    eax,[edx+0x30]
c001bdad:	0f b6 c0             	movzx  eax,al
c001bdb0:	50                   	push   eax
c001bdb1:	e8 72 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bdb6:	5a                   	pop    edx
c001bdb7:	5f                   	pop    edi
c001bdb8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bdbe:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bdc3:	53                   	push   ebx
c001bdc4:	99                   	cdq    
c001bdc5:	f7 f9                	idiv   ecx
c001bdc7:	83 c2 30             	add    edx,0x30
c001bdca:	0f b6 d2             	movzx  edx,dl
c001bdcd:	52                   	push   edx
c001bdce:	e8 55 fc ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bddc:	eb 05                	jmp    c001bde3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bdde:	be 01 00 00 00       	mov    esi,0x1
c001bde3:	83 c4 0c             	add    esp,0xc
c001bde6:	89 f0                	mov    eax,esi
c001bde8:	5b                   	pop    ebx
c001bde9:	5e                   	pop    esi
c001bdea:	5f                   	pop    edi
c001bdeb:	5d                   	pop    ebp
c001bdec:	c3                   	ret    
c001bded:	90                   	nop

c001bdee <ATAPI::write(unsigned long long, int, void*)>:
c001bdee:	b8 03 00 00 00       	mov    eax,0x3
c001bdf3:	c3                   	ret    

c001bdf4 <ATAPI::close(int, int, void*)>:
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be01:	85 c0                	test   eax,eax
c001be03:	74 0c                	je     c001be11 <ATAPI::close(int, int, void*)+0x1d>
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	8b 10                	mov    edx,DWORD PTR [eax]
c001be0a:	50                   	push   eax
c001be0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001be0e:	83 c4 10             	add    esp,0x10
c001be11:	31 c0                	xor    eax,eax
c001be13:	83 c4 0c             	add    esp,0xc
c001be16:	c3                   	ret    
c001be17:	90                   	nop

c001be18 <ATAPI::ATAPI()>:
c001be18:	83 ec 0c             	sub    esp,0xc
c001be1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1f:	83 ec 04             	sub    esp,0x4
c001be22:	68 00 08 00 00       	push   0x800
c001be27:	68 dd 16 02 c0       	push   0xc00216dd
c001be2c:	50                   	push   eax
c001be2d:	e8 54 00 ff ff       	call   c000be86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001be32:	83 c4 10             	add    esp,0x10
c001be35:	ba f8 15 02 c0       	mov    edx,0xc00215f8
c001be3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3e:	89 10                	mov    DWORD PTR [eax],edx
c001be40:	90                   	nop
c001be41:	83 c4 0c             	add    esp,0xc
c001be44:	c3                   	ret    
c001be45:	90                   	nop

c001be46 <ATAPI::readyForCommand()>:
c001be46:	56                   	push   esi
c001be47:	53                   	push   ebx
c001be48:	53                   	push   ebx
c001be49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be4d:	31 db                	xor    ebx,ebx
c001be4f:	51                   	push   ecx
c001be50:	6a 0c                	push   0xc
c001be52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001be59:	50                   	push   eax
c001be5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001be60:	e8 c5 e8 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001be65:	83 c4 10             	add    esp,0x10
c001be68:	a8 88                	test   al,0x88
c001be6a:	74 25                	je     c001be91 <ATAPI::readyForCommand()+0x4b>
c001be6c:	43                   	inc    ebx
c001be6d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001be73:	7e da                	jle    c001be4f <ATAPI::readyForCommand()+0x9>
c001be75:	83 ec 0c             	sub    esp,0xc
c001be78:	68 5e 01 00 00       	push   0x15e
c001be7d:	e8 2e 91 ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001be82:	83 c4 10             	add    esp,0x10
c001be85:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001be8b:	75 c2                	jne    c001be4f <ATAPI::readyForCommand()+0x9>
c001be8d:	31 c0                	xor    eax,eax
c001be8f:	eb 02                	jmp    c001be93 <ATAPI::readyForCommand()+0x4d>
c001be91:	b0 01                	mov    al,0x1
c001be93:	5a                   	pop    edx
c001be94:	5b                   	pop    ebx
c001be95:	5e                   	pop    esi
c001be96:	c3                   	ret    
c001be97:	90                   	nop

c001be98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001be98:	55                   	push   ebp
c001be99:	57                   	push   edi
c001be9a:	56                   	push   esi
c001be9b:	53                   	push   ebx
c001be9c:	83 ec 20             	sub    esp,0x20
c001be9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bea3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bea7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001beab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001beaf:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001beb3:	6a 01                	push   0x1
c001beb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bebc:	50                   	push   eax
c001bebd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bec3:	e8 b2 e9 ff ff       	call   c001a87a <IDE::enableIRQs(unsigned char, bool)>
c001bec8:	5e                   	pop    esi
c001bec9:	58                   	pop    eax
c001beca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bed1:	50                   	push   eax
c001bed2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bed8:	e8 65 e7 ff ff       	call   c001a642 <IDE::prepareInterrupt(unsigned char)>
c001bedd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bee0:	e8 61 ff ff ff       	call   c001be46 <ATAPI::readyForCommand()>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	84 c0                	test   al,al
c001beea:	75 0a                	jne    c001bef6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001beec:	bb 01 00 00 00       	mov    ebx,0x1
c001bef1:	e9 53 02 00 00       	jmp    c001c149 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b1>
c001bef6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001befc:	c1 e0 04             	shl    eax,0x4
c001beff:	0f b6 c0             	movzx  eax,al
c001bf02:	50                   	push   eax
c001bf03:	6a 06                	push   0x6
c001bf05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf0c:	50                   	push   eax
c001bf0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf13:	e8 50 e7 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf18:	6a 00                	push   0x0
c001bf1a:	6a 01                	push   0x1
c001bf1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf23:	50                   	push   eax
c001bf24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf2a:	e8 39 e7 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf2f:	83 c4 20             	add    esp,0x20
c001bf32:	0f b6 c3             	movzx  eax,bl
c001bf35:	0f b6 df             	movzx  ebx,bh
c001bf38:	50                   	push   eax
c001bf39:	6a 04                	push   0x4
c001bf3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf42:	50                   	push   eax
c001bf43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf49:	e8 1a e7 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf4e:	53                   	push   ebx
c001bf4f:	6a 05                	push   0x5
c001bf51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf58:	50                   	push   eax
c001bf59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf5f:	e8 04 e7 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf64:	83 c4 20             	add    esp,0x20
c001bf67:	68 a0 00 00 00       	push   0xa0
c001bf6c:	6a 07                	push   0x7
c001bf6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf75:	50                   	push   eax
c001bf76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf7c:	e8 e7 e6 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf81:	83 c4 0c             	add    esp,0xc
c001bf84:	6a 01                	push   0x1
c001bf86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf8d:	50                   	push   eax
c001bf8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf94:	e8 7b f1 ff ff       	call   c001b114 <IDE::polling(unsigned char, unsigned int)>
c001bf99:	83 c4 10             	add    esp,0x10
c001bf9c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001bfa2:	84 c0                	test   al,al
c001bfa4:	74 23                	je     c001bfc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001bfa6:	0f b6 d8             	movzx  ebx,al
c001bfa9:	0f b6 d2             	movzx  edx,dl
c001bfac:	53                   	push   ebx
c001bfad:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001bfb4:	50                   	push   eax
c001bfb5:	52                   	push   edx
c001bfb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bfbc:	e8 9d f0 ff ff       	call   c001b05e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	e9 80 01 00 00       	jmp    c001c149 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b1>
c001bfc9:	0f b6 d2             	movzx  edx,dl
c001bfcc:	53                   	push   ebx
c001bfcd:	53                   	push   ebx
c001bfce:	52                   	push   edx
c001bfcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bfd5:	e8 7c e6 ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001bfda:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bfde:	b9 06 00 00 00       	mov    ecx,0x6
c001bfe3:	89 c2                	mov    edx,eax
c001bfe5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001bfe8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bff5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bffc:	85 db                	test   ebx,ebx
c001bffe:	0f 84 e8 00 00 00    	je     c001c0ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x254>
c001c004:	51                   	push   ecx
c001c005:	51                   	push   ecx
c001c006:	52                   	push   edx
c001c007:	50                   	push   eax
c001c008:	e8 d3 e7 ff ff       	call   c001a7e0 <IDE::waitInterrupt(unsigned char)>
c001c00d:	83 c4 10             	add    esp,0x10
c001c010:	84 c0                	test   al,al
c001c012:	0f 84 d4 fe ff ff    	je     c001beec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c018:	56                   	push   esi
c001c019:	56                   	push   esi
c001c01a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c021:	50                   	push   eax
c001c022:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c028:	e8 15 e6 ff ff       	call   c001a642 <IDE::prepareInterrupt(unsigned char)>
c001c02d:	83 c4 0c             	add    esp,0xc
c001c030:	6a 04                	push   0x4
c001c032:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c039:	50                   	push   eax
c001c03a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c040:	e8 e5 e6 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001c045:	83 c4 0c             	add    esp,0xc
c001c048:	6a 05                	push   0x5
c001c04a:	89 c6                	mov    esi,eax
c001c04c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c053:	50                   	push   eax
c001c054:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c05a:	e8 cb e6 ff ff       	call   c001a72a <IDE::read(unsigned char, unsigned char)>
c001c05f:	89 f1                	mov    ecx,esi
c001c061:	0f b6 c0             	movzx  eax,al
c001c064:	0f b6 f1             	movzx  esi,cl
c001c067:	c1 e0 08             	shl    eax,0x8
c001c06a:	09 c6                	or     esi,eax
c001c06c:	d1 fe                	sar    esi,1
c001c06e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	31 f6                	xor    esi,esi
c001c077:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c07c:	74 55                	je     c001c0d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23b>
c001c07e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c084:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c08b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c08f:	75 0b                	jne    c001c09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x204>
c001c091:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c094:	01 cd                	add    ebp,ecx
c001c096:	4b                   	dec    ebx
c001c097:	e9 53 ff ff ff       	jmp    c001bfef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c09c:	66 8b 4c 75 00       	mov    cx,WORD PTR [ebp+esi*2+0x0]
c001c0a1:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c001c0a6:	51                   	push   ecx
c001c0a7:	51                   	push   ecx
c001c0a8:	52                   	push   edx
c001c0a9:	50                   	push   eax
c001c0aa:	e8 a7 e5 ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001c0af:	89 c2                	mov    edx,eax
c001c0b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0b5:	66 ef                	out    dx,ax
c001c0b7:	46                   	inc    esi
c001c0b8:	83 c4 10             	add    esp,0x10
c001c0bb:	eb c1                	jmp    c001c07e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001c0bd:	51                   	push   ecx
c001c0be:	51                   	push   ecx
c001c0bf:	52                   	push   edx
c001c0c0:	50                   	push   eax
c001c0c1:	e8 90 e5 ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001c0c6:	89 c2                	mov    edx,eax
c001c0c8:	66 ed                	in     ax,dx
c001c0ca:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c0cf:	83 c4 10             	add    esp,0x10
c001c0d2:	46                   	inc    esi
c001c0d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c0d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c0e0:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c0e4:	75 d7                	jne    c001c0bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001c0e6:	01 f6                	add    esi,esi
c001c0e8:	01 f5                	add    ebp,esi
c001c0ea:	eb aa                	jmp    c001c096 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fe>
c001c0ec:	51                   	push   ecx
c001c0ed:	51                   	push   ecx
c001c0ee:	52                   	push   edx
c001c0ef:	50                   	push   eax
c001c0f0:	e8 eb e6 ff ff       	call   c001a7e0 <IDE::waitInterrupt(unsigned char)>
c001c0f5:	83 c4 10             	add    esp,0x10
c001c0f8:	84 c0                	test   al,al
c001c0fa:	0f 84 ec fd ff ff    	je     c001beec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c100:	52                   	push   edx
c001c101:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c106:	52                   	push   edx
c001c107:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c10e:	50                   	push   eax
c001c10f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c115:	e8 28 e5 ff ff       	call   c001a642 <IDE::prepareInterrupt(unsigned char)>
c001c11a:	83 c4 10             	add    esp,0x10
c001c11d:	50                   	push   eax
c001c11e:	50                   	push   eax
c001c11f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c126:	50                   	push   eax
c001c127:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c12d:	e8 24 e5 ff ff       	call   c001a656 <IDE::getBase(unsigned char)>
c001c132:	8d 50 07             	lea    edx,[eax+0x7]
c001c135:	ec                   	in     al,dx
c001c136:	83 c4 10             	add    esp,0x10
c001c139:	a8 88                	test   al,0x88
c001c13b:	74 0a                	je     c001c147 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2af>
c001c13d:	4b                   	dec    ebx
c001c13e:	75 dd                	jne    c001c11d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x285>
c001c140:	bb 02 00 00 00       	mov    ebx,0x2
c001c145:	eb 02                	jmp    c001c149 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b1>
c001c147:	31 db                	xor    ebx,ebx
c001c149:	83 c4 1c             	add    esp,0x1c
c001c14c:	89 d8                	mov    eax,ebx
c001c14e:	5b                   	pop    ebx
c001c14f:	5e                   	pop    esi
c001c150:	5f                   	pop    edi
c001c151:	5d                   	pop    ebp
c001c152:	c3                   	ret    
c001c153:	90                   	nop

c001c154 <ATAPI::diskRemoved()>:
c001c154:	53                   	push   ebx
c001c155:	83 ec 14             	sub    esp,0x14
c001c158:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c15c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c163:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c169:	e8 dc 0b ff ff       	call   c000cd4a <LogicalDisk::unmount()>
c001c16e:	58                   	pop    eax
c001c16f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c175:	e8 fa 15 ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c001c17a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c184:	83 c4 18             	add    esp,0x18
c001c187:	5b                   	pop    ebx
c001c188:	e9 d7 15 ff ff       	jmp    c000d764 <VCache::invalidateReadBuffer()>
c001c18d:	90                   	nop

c001c18e <ATAPI::eject()>:
c001c18e:	57                   	push   edi
c001c18f:	b9 03 00 00 00       	mov    ecx,0x3
c001c194:	53                   	push   ebx
c001c195:	83 ec 14             	sub    esp,0x14
c001c198:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c19c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c1a0:	fc                   	cld    
c001c1a1:	31 c0                	xor    eax,eax
c001c1a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c1a5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c1aa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c1af:	50                   	push   eax
c001c1b0:	50                   	push   eax
c001c1b1:	6a 00                	push   0x0
c001c1b3:	6a 00                	push   0x0
c001c1b5:	6a 00                	push   0x0
c001c1b7:	6a 02                	push   0x2
c001c1b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1bd:	50                   	push   eax
c001c1be:	53                   	push   ebx
c001c1bf:	e8 d4 fc ff ff       	call   c001be98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c1c4:	83 c4 14             	add    esp,0x14
c001c1c7:	53                   	push   ebx
c001c1c8:	e8 87 ff ff ff       	call   c001c154 <ATAPI::diskRemoved()>
c001c1cd:	83 c4 24             	add    esp,0x24
c001c1d0:	31 c0                	xor    eax,eax
c001c1d2:	5b                   	pop    ebx
c001c1d3:	5f                   	pop    edi
c001c1d4:	c3                   	ret    
c001c1d5:	90                   	nop

c001c1d6 <ATAPI::diskInserted()>:
c001c1d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1da:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c1e1:	c3                   	ret    

c001c1e2 <ATAPI::detectMedia()>:
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	83 ec 28             	sub    esp,0x28
c001c1e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1eb:	6a 0c                	push   0xc
c001c1ed:	6a 00                	push   0x0
c001c1ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c1f3:	56                   	push   esi
c001c1f4:	e8 87 43 fe ff       	call   c0000580 <memset>
c001c1f9:	58                   	pop    eax
c001c1fa:	5a                   	pop    edx
c001c1fb:	6a 00                	push   0x0
c001c1fd:	6a 00                	push   0x0
c001c1ff:	6a 00                	push   0x0
c001c201:	6a 00                	push   0x0
c001c203:	56                   	push   esi
c001c204:	53                   	push   ebx
c001c205:	e8 8e fc ff ff       	call   c001be98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c20a:	83 c4 1c             	add    esp,0x1c
c001c20d:	6a 0c                	push   0xc
c001c20f:	6a 00                	push   0x0
c001c211:	56                   	push   esi
c001c212:	e8 69 43 fe ff       	call   c0000580 <memset>
c001c217:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c21c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c221:	59                   	pop    ecx
c001c222:	58                   	pop    eax
c001c223:	6a 01                	push   0x1
c001c225:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c229:	50                   	push   eax
c001c22a:	6a 00                	push   0x0
c001c22c:	6a 12                	push   0x12
c001c22e:	56                   	push   esi
c001c22f:	53                   	push   ebx
c001c230:	e8 63 fc ff ff       	call   c001be98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c235:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c239:	83 c4 20             	add    esp,0x20
c001c23c:	83 e0 7f             	and    eax,0x7f
c001c23f:	3c 70                	cmp    al,0x70
c001c241:	74 15                	je     c001c258 <ATAPI::detectMedia()+0x76>
c001c243:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c24a:	75 0c                	jne    c001c258 <ATAPI::detectMedia()+0x76>
c001c24c:	83 ec 0c             	sub    esp,0xc
c001c24f:	53                   	push   ebx
c001c250:	e8 81 ff ff ff       	call   c001c1d6 <ATAPI::diskInserted()>
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c25c:	83 e0 0f             	and    eax,0xf
c001c25f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c264:	75 18                	jne    c001c27e <ATAPI::detectMedia()+0x9c>
c001c266:	3c 02                	cmp    al,0x2
c001c268:	75 14                	jne    c001c27e <ATAPI::detectMedia()+0x9c>
c001c26a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c271:	74 24                	je     c001c297 <ATAPI::detectMedia()+0xb5>
c001c273:	83 ec 0c             	sub    esp,0xc
c001c276:	53                   	push   ebx
c001c277:	e8 d8 fe ff ff       	call   c001c154 <ATAPI::diskRemoved()>
c001c27c:	eb 16                	jmp    c001c294 <ATAPI::detectMedia()+0xb2>
c001c27e:	84 c0                	test   al,al
c001c280:	75 15                	jne    c001c297 <ATAPI::detectMedia()+0xb5>
c001c282:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c289:	75 0c                	jne    c001c297 <ATAPI::detectMedia()+0xb5>
c001c28b:	83 ec 0c             	sub    esp,0xc
c001c28e:	53                   	push   ebx
c001c28f:	e8 42 ff ff ff       	call   c001c1d6 <ATAPI::diskInserted()>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	83 c4 24             	add    esp,0x24
c001c29a:	5b                   	pop    ebx
c001c29b:	5e                   	pop    esi
c001c29c:	c3                   	ret    
c001c29d:	90                   	nop

c001c29e <ATAPI::open(int, int, void*)>:
c001c29e:	56                   	push   esi
c001c29f:	53                   	push   ebx
c001c2a0:	50                   	push   eax
c001c2a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2ad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c2b3:	c1 e0 06             	shl    eax,0x6
c001c2b6:	01 d0                	add    eax,edx
c001c2b8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c2be:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c2c5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c2cb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c2d2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c2dc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c2e2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c2e9:	6a 04                	push   0x4
c001c2eb:	6a 0c                	push   0xc
c001c2ed:	51                   	push   ecx
c001c2ee:	52                   	push   edx
c001c2ef:	e8 74 e3 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2f4:	90                   	nop
c001c2f5:	90                   	nop
c001c2f6:	6a 00                	push   0x0
c001c2f8:	6a 0c                	push   0xc
c001c2fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c301:	50                   	push   eax
c001c302:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c308:	e8 5b e3 ff ff       	call   c001a668 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c30d:	83 c4 14             	add    esp,0x14
c001c310:	68 78 01 00 00       	push   0x178
c001c315:	e8 61 b5 fe ff       	call   c000787b <malloc>
c001c31a:	83 c4 0c             	add    esp,0xc
c001c31d:	6a 00                	push   0x0
c001c31f:	89 c6                	mov    esi,eax
c001c321:	68 ff ff ff 7f       	push   0x7fffffff
c001c326:	6a 00                	push   0x0
c001c328:	6a 00                	push   0x0
c001c32a:	53                   	push   ebx
c001c32b:	68 8f 17 02 c0       	push   0xc002178f
c001c330:	50                   	push   eax
c001c331:	e8 72 08 ff ff       	call   c000cba8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c336:	83 c4 14             	add    esp,0x14
c001c339:	56                   	push   esi
c001c33a:	e8 29 09 ff ff       	call   c000cc68 <LogicalDisk::assignDriveLetter()>
c001c33f:	5a                   	pop    edx
c001c340:	59                   	pop    ecx
c001c341:	0f be c0             	movsx  eax,al
c001c344:	50                   	push   eax
c001c345:	68 e0 15 02 c0       	push   0xc00215e0
c001c34a:	e8 1a e3 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001c34f:	58                   	pop    eax
c001c350:	5a                   	pop    edx
c001c351:	56                   	push   esi
c001c352:	53                   	push   ebx
c001c353:	e8 60 f7 fe ff       	call   c000bab8 <Device::addChild(Device*)>
c001c358:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c35e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c361:	e8 88 fb fe ff       	call   c000beee <PhysicalDisk::startCache()>
c001c366:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c36d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c370:	e8 6d fe ff ff       	call   c001c1e2 <ATAPI::detectMedia()>
c001c375:	83 c4 14             	add    esp,0x14
c001c378:	31 c0                	xor    eax,eax
c001c37a:	5b                   	pop    ebx
c001c37b:	5e                   	pop    esi
c001c37c:	c3                   	ret    
c001c37d:	90                   	nop

c001c37e <ATAPI::read(unsigned long long, int, void*)>:
c001c37e:	55                   	push   ebp
c001c37f:	57                   	push   edi
c001c380:	56                   	push   esi
c001c381:	53                   	push   ebx
c001c382:	83 ec 1c             	sub    esp,0x1c
c001c385:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c389:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c38d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c391:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001c398:	74 3a                	je     c001c3d4 <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c39a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c39e:	b9 03 00 00 00       	mov    ecx,0x3
c001c3a3:	fc                   	cld    
c001c3a4:	31 c0                	xor    eax,eax
c001c3a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c3a8:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c3ac:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c3b1:	0f 38 f1 6c 24 06    	movbe  DWORD PTR [esp+0x6],ebp
c001c3b7:	50                   	push   eax
c001c3b8:	50                   	push   eax
c001c3b9:	53                   	push   ebx
c001c3ba:	c1 e3 0b             	shl    ebx,0xb
c001c3bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c3c1:	6a 00                	push   0x0
c001c3c3:	53                   	push   ebx
c001c3c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3c8:	50                   	push   eax
c001c3c9:	56                   	push   esi
c001c3ca:	e8 c9 fa ff ff       	call   c001be98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c3cf:	83 c4 20             	add    esp,0x20
c001c3d2:	eb 1a                	jmp    c001c3ee <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	56                   	push   esi
c001c3d8:	e8 05 fe ff ff       	call   c001c1e2 <ATAPI::detectMedia()>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001c3e7:	75 b1                	jne    c001c39a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c3e9:	b8 02 00 00 00       	mov    eax,0x2
c001c3ee:	83 c4 1c             	add    esp,0x1c
c001c3f1:	5b                   	pop    ebx
c001c3f2:	5e                   	pop    esi
c001c3f3:	5f                   	pop    edi
c001c3f4:	5d                   	pop    ebp
c001c3f5:	c3                   	ret    

c001c3f6 <SATA::close(int, int, void*)>:
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c403:	85 c0                	test   eax,eax
c001c405:	74 0c                	je     c001c413 <SATA::close(int, int, void*)+0x1d>
c001c407:	83 ec 0c             	sub    esp,0xc
c001c40a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c40c:	50                   	push   eax
c001c40d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	31 c0                	xor    eax,eax
c001c415:	83 c4 0c             	add    esp,0xc
c001c418:	c3                   	ret    
c001c419:	90                   	nop

c001c41a <SATA::powerSaving(PowerSavingLevel)>:
c001c41a:	c3                   	ret    
c001c41b:	90                   	nop

c001c41c <SATA::open(int, int, void*)>:
c001c41c:	56                   	push   esi
c001c41d:	53                   	push   ebx
c001c41e:	50                   	push   eax
c001c41f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c427:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c431:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c437:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c43b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c445:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c44b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c455:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c45c:	e8 ff b6 fe ff       	call   c0007b60 <Phys::allocatePage()>
c001c461:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c467:	89 c6                	mov    esi,eax
c001c469:	81 c6 00 10 00 00    	add    esi,0x1000
c001c46f:	e8 ec b6 fe ff       	call   c0007b60 <Phys::allocatePage()>
c001c474:	39 c6                	cmp    esi,eax
c001c476:	74 10                	je     c001c488 <SATA::open(int, int, void*)+0x6c>
c001c478:	83 ec 0c             	sub    esp,0xc
c001c47b:	68 28 16 02 c0       	push   0xc0021628
c001c480:	e8 38 40 ff ff       	call   c00104bd <KePanic(char const*)>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	6a 02                	push   0x2
c001c48d:	e8 2d cf fe ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c001c492:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c498:	6a 03                	push   0x3
c001c49a:	50                   	push   eax
c001c49b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c4a1:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c4a7:	e8 ce d5 fe ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c4ac:	83 c4 14             	add    esp,0x14
c001c4af:	53                   	push   ebx
c001c4b0:	e8 39 fa fe ff       	call   c000beee <PhysicalDisk::startCache()>
c001c4b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4b8:	e8 d9 0b ff ff       	call   c000d096 <createPartitionsForDisk(PhysicalDisk*)>
c001c4bd:	83 c4 14             	add    esp,0x14
c001c4c0:	31 c0                	xor    eax,eax
c001c4c2:	5b                   	pop    ebx
c001c4c3:	5e                   	pop    esi
c001c4c4:	c3                   	ret    
c001c4c5:	90                   	nop

c001c4c6 <SATA::SATA()>:
c001c4c6:	83 ec 0c             	sub    esp,0xc
c001c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cd:	83 ec 04             	sub    esp,0x4
c001c4d0:	68 00 02 00 00       	push   0x200
c001c4d5:	68 3c 16 02 c0       	push   0xc002163c
c001c4da:	50                   	push   eax
c001c4db:	e8 a6 f9 fe ff       	call   c000be86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	89 10                	mov    DWORD PTR [eax],edx
c001c4ee:	90                   	nop
c001c4ef:	83 c4 0c             	add    esp,0xc
c001c4f2:	c3                   	ret    
c001c4f3:	90                   	nop

c001c4f4 <SATA::access(unsigned long long, int, void*, bool)>:
c001c4f4:	55                   	push   ebp
c001c4f5:	57                   	push   edi
c001c4f6:	56                   	push   esi
c001c4f7:	53                   	push   ebx
c001c4f8:	83 ec 2c             	sub    esp,0x2c
c001c4fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c4ff:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c504:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c508:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c50c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c514:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c51c:	7e 10                	jle    c001c52e <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c51e:	83 ec 0c             	sub    esp,0xc
c001c521:	68 4c 16 02 c0       	push   0xc002164c
c001c526:	e8 92 3f ff ff       	call   c00104bd <KePanic(char const*)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c534:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c53a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c53e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c544:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c548:	89 c2                	mov    edx,eax
c001c54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c54e:	c1 e2 07             	shl    edx,0x7
c001c551:	8d 2c 10             	lea    ebp,[eax+edx*1]
c001c554:	c7 85 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [ebp+0x110],0xffffffff
c001c55e:	52                   	push   edx
c001c55f:	52                   	push   edx
c001c560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c564:	83 c0 02             	add    eax,0x2
c001c567:	c1 e0 07             	shl    eax,0x7
c001c56a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c56e:	50                   	push   eax
c001c56f:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c575:	e8 7a ec ff ff       	call   c001b1f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c57a:	83 c4 10             	add    esp,0x10
c001c57d:	89 c2                	mov    edx,eax
c001c57f:	83 f8 ff             	cmp    eax,0xffffffff
c001c582:	0f 84 58 01 00 00    	je     c001c6e0 <SATA::access(unsigned long long, int, void*, bool)+0x1ec>
c001c588:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c58d:	b0 09                	mov    al,0x9
c001c58f:	c4 e2 79 f7 44 24 4c 	shlx   eax,DWORD PTR [esp+0x4c],eax
c001c596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c59a:	74 0e                	je     c001c5aa <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001c59c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c5a2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c5a6:	89 c1                	mov    ecx,eax
c001c5a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5aa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c5b0:	8b 85 00 01 00 00    	mov    eax,DWORD PTR [ebp+0x100]
c001c5b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c5ba:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c5c0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c5c6:	89 d1                	mov    ecx,edx
c001c5c8:	c1 e1 05             	shl    ecx,0x5
c001c5cb:	01 c8                	add    eax,ecx
c001c5cd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c5d1:	83 e1 01             	and    ecx,0x1
c001c5d4:	89 ce                	mov    esi,ecx
c001c5d6:	8a 08                	mov    cl,BYTE PTR [eax]
c001c5d8:	c1 e6 06             	shl    esi,0x6
c001c5db:	83 e1 bf             	and    ecx,0xffffffbf
c001c5de:	09 f1                	or     ecx,esi
c001c5e0:	88 08                	mov    BYTE PTR [eax],cl
c001c5e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5e4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c5ea:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c5f0:	89 08                	mov    DWORD PTR [eax],ecx
c001c5f2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c5f8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c5fe:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c604:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c607:	50                   	push   eax
c001c608:	68 90 00 00 00       	push   0x90
c001c60d:	6a 00                	push   0x0
c001c60f:	56                   	push   esi
c001c610:	e8 6b 3f fe ff       	call   c0000580 <memset>
c001c615:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c61b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c61f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	48                   	dec    eax
c001c62d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c632:	89 c1                	mov    ecx,eax
c001c634:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c63a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c63f:	09 c8                	or     eax,ecx
c001c641:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c647:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c64a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c651:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c655:	66 25 00 7f          	and    ax,0x7f00
c001c659:	66 0d 27 80          	or     ax,0x8027
c001c65d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c662:	66 89 06             	mov    WORD PTR [esi],ax
c001c665:	19 c0                	sbb    eax,eax
c001c667:	31 c9                	xor    ecx,ecx
c001c669:	83 e0 f0             	and    eax,0xfffffff0
c001c66c:	83 c0 35             	add    eax,0x35
c001c66f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c676:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001c67a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c67e:	c1 e8 10             	shr    eax,0x10
c001c681:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c688:	c1 e8 18             	shr    eax,0x18
c001c68b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c68e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c692:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c695:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c699:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c69c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c6a0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c6a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6a8:	c1 e0 07             	shl    eax,0x7
c001c6ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c6af:	8b b0 20 01 00 00    	mov    esi,DWORD PTR [eax+0x120]
c001c6b5:	81 e6 88 00 00 00    	and    esi,0x88
c001c6bb:	74 0b                	je     c001c6c8 <SATA::access(unsigned long long, int, void*, bool)+0x1d4>
c001c6bd:	81 f9 40 42 0f 00    	cmp    ecx,0xf4240
c001c6c3:	74 0b                	je     c001c6d0 <SATA::access(unsigned long long, int, void*, bool)+0x1dc>
c001c6c5:	41                   	inc    ecx
c001c6c6:	eb e7                	jmp    c001c6af <SATA::access(unsigned long long, int, void*, bool)+0x1bb>
c001c6c8:	81 f9 40 42 0f 00    	cmp    ecx,0xf4240
c001c6ce:	75 17                	jne    c001c6e7 <SATA::access(unsigned long long, int, void*, bool)+0x1f3>
c001c6d0:	83 ec 0c             	sub    esp,0xc
c001c6d3:	68 85 16 02 c0       	push   0xc0021685
c001c6d8:	e8 8c df fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001c6dd:	83 c4 10             	add    esp,0x10
c001c6e0:	b8 01 00 00 00       	mov    eax,0x1
c001c6e5:	eb 60                	jmp    c001c747 <SATA::access(unsigned long long, int, void*, bool)+0x253>
c001c6e7:	b9 01 00 00 00       	mov    ecx,0x1
c001c6ec:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
c001c6f1:	89 88 38 01 00 00    	mov    DWORD PTR [eax+0x138],ecx
c001c6f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6fb:	c1 e0 07             	shl    eax,0x7
c001c6fe:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c702:	8b b0 38 01 00 00    	mov    esi,DWORD PTR [eax+0x138]
c001c708:	85 f1                	test   ecx,esi
c001c70a:	74 16                	je     c001c722 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001c70c:	8b b5 10 01 00 00    	mov    esi,DWORD PTR [ebp+0x110]
c001c712:	0f ba e6 1e          	bt     esi,0x1e
c001c716:	73 ea                	jae    c001c702 <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	68 93 16 02 c0       	push   0xc0021693
c001c720:	eb b6                	jmp    c001c6d8 <SATA::access(unsigned long long, int, void*, bool)+0x1e4>
c001c722:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001c728:	0f ba e0 1e          	bt     eax,0x1e
c001c72c:	72 b2                	jb     c001c6e0 <SATA::access(unsigned long long, int, void*, bool)+0x1ec>
c001c72e:	31 c0                	xor    eax,eax
c001c730:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c735:	75 10                	jne    c001c747 <SATA::access(unsigned long long, int, void*, bool)+0x253>
c001c737:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c73d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c741:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c747:	83 c4 2c             	add    esp,0x2c
c001c74a:	5b                   	pop    ebx
c001c74b:	5e                   	pop    esi
c001c74c:	5f                   	pop    edi
c001c74d:	5d                   	pop    ebp
c001c74e:	c3                   	ret    
c001c74f:	90                   	nop

c001c750 <SATA::read(unsigned long long, int, void*)>:
c001c750:	55                   	push   ebp
c001c751:	57                   	push   edi
c001c752:	56                   	push   esi
c001c753:	be 04 00 00 00       	mov    esi,0x4
c001c758:	53                   	push   ebx
c001c759:	83 ec 0c             	sub    esp,0xc
c001c75c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c760:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c764:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c768:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c76c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c76f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c775:	0f 87 1a 02 00 00    	ja     c001c995 <SATA::read(unsigned long long, int, void*)+0x245>
c001c77b:	be 06 00 00 00       	mov    esi,0x6
c001c780:	85 c9                	test   ecx,ecx
c001c782:	0f 84 0d 02 00 00    	je     c001c995 <SATA::read(unsigned long long, int, void*)+0x245>
c001c788:	56                   	push   esi
c001c789:	56                   	push   esi
c001c78a:	6a 00                	push   0x0
c001c78c:	51                   	push   ecx
c001c78d:	53                   	push   ebx
c001c78e:	52                   	push   edx
c001c78f:	50                   	push   eax
c001c790:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c794:	e8 5b fd ff ff       	call   c001c4f4 <SATA::access(unsigned long long, int, void*, bool)>
c001c799:	83 c4 20             	add    esp,0x20
c001c79c:	89 c6                	mov    esi,eax
c001c79e:	85 c0                	test   eax,eax
c001c7a0:	0f 85 ea 01 00 00    	jne    c001c990 <SATA::read(unsigned long long, int, void*)+0x240>
c001c7a6:	50                   	push   eax
c001c7a7:	50                   	push   eax
c001c7a8:	6a 0f                	push   0xf
c001c7aa:	6a 00                	push   0x0
c001c7ac:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c7b2:	bb 0a 00 00 00       	mov    ebx,0xa
c001c7b7:	e8 7d f2 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c7bc:	5a                   	pop    edx
c001c7bd:	59                   	pop    ecx
c001c7be:	b9 10 27 00 00       	mov    ecx,0x2710
c001c7c3:	0f b6 c0             	movzx  eax,al
c001c7c6:	50                   	push   eax
c001c7c7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7cc:	99                   	cdq    
c001c7cd:	f7 f9                	idiv   ecx
c001c7cf:	99                   	cdq    
c001c7d0:	f7 fb                	idiv   ebx
c001c7d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c7d5:	0f b6 c0             	movzx  eax,al
c001c7d8:	50                   	push   eax
c001c7d9:	e8 4a f2 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c7de:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c7e4:	5f                   	pop    edi
c001c7e5:	5d                   	pop    ebp
c001c7e6:	6a 0f                	push   0xf
c001c7e8:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c7ed:	6a 00                	push   0x0
c001c7ef:	e8 45 f2 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c7f4:	5a                   	pop    edx
c001c7f5:	59                   	pop    ecx
c001c7f6:	0f b6 c0             	movzx  eax,al
c001c7f9:	50                   	push   eax
c001c7fa:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7ff:	99                   	cdq    
c001c800:	f7 fd                	idiv   ebp
c001c802:	99                   	cdq    
c001c803:	f7 fb                	idiv   ebx
c001c805:	8d 42 30             	lea    eax,[edx+0x30]
c001c808:	0f b6 c0             	movzx  eax,al
c001c80b:	50                   	push   eax
c001c80c:	e8 17 f2 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c811:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c817:	5f                   	pop    edi
c001c818:	bf 64 00 00 00       	mov    edi,0x64
c001c81d:	58                   	pop    eax
c001c81e:	6a 0f                	push   0xf
c001c820:	6a 00                	push   0x0
c001c822:	e8 12 f2 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c827:	5a                   	pop    edx
c001c828:	59                   	pop    ecx
c001c829:	0f b6 c0             	movzx  eax,al
c001c82c:	50                   	push   eax
c001c82d:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c832:	99                   	cdq    
c001c833:	f7 ff                	idiv   edi
c001c835:	99                   	cdq    
c001c836:	f7 fb                	idiv   ebx
c001c838:	8d 42 30             	lea    eax,[edx+0x30]
c001c83b:	0f b6 c0             	movzx  eax,al
c001c83e:	50                   	push   eax
c001c83f:	e8 e4 f1 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c844:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c84a:	58                   	pop    eax
c001c84b:	5a                   	pop    edx
c001c84c:	6a 0f                	push   0xf
c001c84e:	6a 00                	push   0x0
c001c850:	e8 e4 f1 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c855:	59                   	pop    ecx
c001c856:	5a                   	pop    edx
c001c857:	0f b6 c0             	movzx  eax,al
c001c85a:	50                   	push   eax
c001c85b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c860:	99                   	cdq    
c001c861:	f7 fb                	idiv   ebx
c001c863:	99                   	cdq    
c001c864:	f7 fb                	idiv   ebx
c001c866:	8d 42 30             	lea    eax,[edx+0x30]
c001c869:	0f b6 c0             	movzx  eax,al
c001c86c:	50                   	push   eax
c001c86d:	e8 b6 f1 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c872:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c878:	59                   	pop    ecx
c001c879:	58                   	pop    eax
c001c87a:	6a 0f                	push   0xf
c001c87c:	6a 00                	push   0x0
c001c87e:	e8 b6 f1 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c883:	5a                   	pop    edx
c001c884:	59                   	pop    ecx
c001c885:	0f b6 c0             	movzx  eax,al
c001c888:	50                   	push   eax
c001c889:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c88e:	99                   	cdq    
c001c88f:	f7 fb                	idiv   ebx
c001c891:	8d 42 30             	lea    eax,[edx+0x30]
c001c894:	0f b6 c0             	movzx  eax,al
c001c897:	50                   	push   eax
c001c898:	e8 8b f1 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c89d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c8a3:	58                   	pop    eax
c001c8a4:	5a                   	pop    edx
c001c8a5:	6a 0f                	push   0xf
c001c8a7:	6a 00                	push   0x0
c001c8a9:	e8 8b f1 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c8ae:	59                   	pop    ecx
c001c8af:	5a                   	pop    edx
c001c8b0:	b9 10 27 00 00       	mov    ecx,0x2710
c001c8b5:	0f b6 c0             	movzx  eax,al
c001c8b8:	50                   	push   eax
c001c8b9:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8be:	99                   	cdq    
c001c8bf:	f7 f9                	idiv   ecx
c001c8c1:	99                   	cdq    
c001c8c2:	f7 fb                	idiv   ebx
c001c8c4:	8d 42 30             	lea    eax,[edx+0x30]
c001c8c7:	0f b6 c0             	movzx  eax,al
c001c8ca:	50                   	push   eax
c001c8cb:	e8 58 f1 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c8d0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c8d6:	59                   	pop    ecx
c001c8d7:	58                   	pop    eax
c001c8d8:	6a 0f                	push   0xf
c001c8da:	6a 00                	push   0x0
c001c8dc:	e8 58 f1 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c8e1:	5a                   	pop    edx
c001c8e2:	59                   	pop    ecx
c001c8e3:	0f b6 c0             	movzx  eax,al
c001c8e6:	50                   	push   eax
c001c8e7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8ec:	99                   	cdq    
c001c8ed:	f7 fd                	idiv   ebp
c001c8ef:	99                   	cdq    
c001c8f0:	f7 fb                	idiv   ebx
c001c8f2:	8d 42 30             	lea    eax,[edx+0x30]
c001c8f5:	0f b6 c0             	movzx  eax,al
c001c8f8:	50                   	push   eax
c001c8f9:	e8 2a f1 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c8fe:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c904:	5d                   	pop    ebp
c001c905:	58                   	pop    eax
c001c906:	6a 0f                	push   0xf
c001c908:	6a 00                	push   0x0
c001c90a:	e8 2a f1 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c90f:	5a                   	pop    edx
c001c910:	59                   	pop    ecx
c001c911:	0f b6 c0             	movzx  eax,al
c001c914:	50                   	push   eax
c001c915:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c91a:	99                   	cdq    
c001c91b:	f7 ff                	idiv   edi
c001c91d:	99                   	cdq    
c001c91e:	f7 fb                	idiv   ebx
c001c920:	8d 42 30             	lea    eax,[edx+0x30]
c001c923:	0f b6 c0             	movzx  eax,al
c001c926:	50                   	push   eax
c001c927:	e8 fc f0 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c92c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c932:	5f                   	pop    edi
c001c933:	5d                   	pop    ebp
c001c934:	6a 0f                	push   0xf
c001c936:	6a 00                	push   0x0
c001c938:	e8 fc f0 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c93d:	5a                   	pop    edx
c001c93e:	59                   	pop    ecx
c001c93f:	0f b6 c0             	movzx  eax,al
c001c942:	50                   	push   eax
c001c943:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c948:	99                   	cdq    
c001c949:	f7 fb                	idiv   ebx
c001c94b:	99                   	cdq    
c001c94c:	f7 fb                	idiv   ebx
c001c94e:	8d 42 30             	lea    eax,[edx+0x30]
c001c951:	0f b6 c0             	movzx  eax,al
c001c954:	50                   	push   eax
c001c955:	e8 ce f0 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c95a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c960:	5f                   	pop    edi
c001c961:	5d                   	pop    ebp
c001c962:	6a 0f                	push   0xf
c001c964:	6a 00                	push   0x0
c001c966:	e8 ce f0 ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001c96b:	5a                   	pop    edx
c001c96c:	59                   	pop    ecx
c001c96d:	0f b6 c0             	movzx  eax,al
c001c970:	50                   	push   eax
c001c971:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c976:	99                   	cdq    
c001c977:	f7 fb                	idiv   ebx
c001c979:	83 c2 30             	add    edx,0x30
c001c97c:	0f b6 d2             	movzx  edx,dl
c001c97f:	52                   	push   edx
c001c980:	e8 a3 f0 ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c98e:	eb 05                	jmp    c001c995 <SATA::read(unsigned long long, int, void*)+0x245>
c001c990:	be 01 00 00 00       	mov    esi,0x1
c001c995:	83 c4 0c             	add    esp,0xc
c001c998:	89 f0                	mov    eax,esi
c001c99a:	5b                   	pop    ebx
c001c99b:	5e                   	pop    esi
c001c99c:	5f                   	pop    edi
c001c99d:	5d                   	pop    ebp
c001c99e:	c3                   	ret    
c001c99f:	90                   	nop

c001c9a0 <SATA::write(unsigned long long, int, void*)>:
c001c9a0:	55                   	push   ebp
c001c9a1:	b8 04 00 00 00       	mov    eax,0x4
c001c9a6:	57                   	push   edi
c001c9a7:	56                   	push   esi
c001c9a8:	53                   	push   ebx
c001c9a9:	83 ec 1c             	sub    esp,0x1c
c001c9ac:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c9b0:	c5 fa 7e 44 24 34    	vmovq  xmm0,QWORD PTR [esp+0x34]
c001c9b6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c9ba:	8d 73 ff             	lea    esi,[ebx-0x1]
c001c9bd:	c4 e3 79 16 c5 01    	vpextrd ebp,xmm0,0x1
c001c9c3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c9c9:	0f 87 45 02 00 00    	ja     c001cc14 <SATA::write(unsigned long long, int, void*)+0x274>
c001c9cf:	b8 06 00 00 00       	mov    eax,0x6
c001c9d4:	85 d2                	test   edx,edx
c001c9d6:	0f 84 38 02 00 00    	je     c001cc14 <SATA::write(unsigned long long, int, void*)+0x274>
c001c9dc:	89 de                	mov    esi,ebx
c001c9de:	c5 f9 7e c7          	vmovd  edi,xmm0
c001c9e2:	c1 e6 09             	shl    esi,0x9
c001c9e5:	01 d6                	add    esi,edx
c001c9e7:	c5 f9 6f 0d b0 07 02 c0 	vmovdqa xmm1,XMMWORD PTR ds:0xc00207b0
c001c9ef:	c5 f9 d4 d1          	vpaddq xmm2,xmm0,xmm1
c001c9f3:	c5 f8 29 14 24       	vmovaps XMMWORD PTR [esp],xmm2
c001c9f8:	50                   	push   eax
c001c9f9:	50                   	push   eax
c001c9fa:	6a 01                	push   0x1
c001c9fc:	52                   	push   edx
c001c9fd:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001ca01:	6a 01                	push   0x1
c001ca03:	55                   	push   ebp
c001ca04:	57                   	push   edi
c001ca05:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca09:	e8 e6 fa ff ff       	call   c001c4f4 <SATA::access(unsigned long long, int, void*, bool)>
c001ca0e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001ca12:	c5 f9 6f 44 24 20    	vmovdqa xmm0,XMMWORD PTR [esp+0x20]
c001ca18:	83 c4 20             	add    esp,0x20
c001ca1b:	81 c2 00 02 00 00    	add    edx,0x200
c001ca21:	c5 f9 7e c7          	vmovd  edi,xmm0
c001ca25:	c4 e3 79 16 c5 01    	vpextrd ebp,xmm0,0x1
c001ca2b:	39 f2                	cmp    edx,esi
c001ca2d:	75 b8                	jne    c001c9e7 <SATA::write(unsigned long long, int, void*)+0x47>
c001ca2f:	50                   	push   eax
c001ca30:	bd 10 27 00 00       	mov    ebp,0x2710
c001ca35:	50                   	push   eax
c001ca36:	6a 0f                	push   0xf
c001ca38:	6a 00                	push   0x0
c001ca3a:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001ca40:	bb 0a 00 00 00       	mov    ebx,0xa
c001ca45:	e8 ef ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001ca4a:	5a                   	pop    edx
c001ca4b:	59                   	pop    ecx
c001ca4c:	0f b6 c0             	movzx  eax,al
c001ca4f:	50                   	push   eax
c001ca50:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ca55:	99                   	cdq    
c001ca56:	f7 fd                	idiv   ebp
c001ca58:	99                   	cdq    
c001ca59:	f7 fb                	idiv   ebx
c001ca5b:	8d 42 30             	lea    eax,[edx+0x30]
c001ca5e:	0f b6 c0             	movzx  eax,al
c001ca61:	50                   	push   eax
c001ca62:	e8 c1 ef ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001ca67:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ca6d:	5e                   	pop    esi
c001ca6e:	5f                   	pop    edi
c001ca6f:	6a 0f                	push   0xf
c001ca71:	bf e8 03 00 00       	mov    edi,0x3e8
c001ca76:	6a 00                	push   0x0
c001ca78:	e8 bc ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001ca7d:	5a                   	pop    edx
c001ca7e:	59                   	pop    ecx
c001ca7f:	0f b6 c0             	movzx  eax,al
c001ca82:	50                   	push   eax
c001ca83:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ca88:	99                   	cdq    
c001ca89:	f7 ff                	idiv   edi
c001ca8b:	99                   	cdq    
c001ca8c:	f7 fb                	idiv   ebx
c001ca8e:	8d 42 30             	lea    eax,[edx+0x30]
c001ca91:	0f b6 c0             	movzx  eax,al
c001ca94:	50                   	push   eax
c001ca95:	e8 8e ef ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001ca9a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001caa0:	5e                   	pop    esi
c001caa1:	be 64 00 00 00       	mov    esi,0x64
c001caa6:	58                   	pop    eax
c001caa7:	6a 0f                	push   0xf
c001caa9:	6a 00                	push   0x0
c001caab:	e8 89 ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cab0:	5a                   	pop    edx
c001cab1:	59                   	pop    ecx
c001cab2:	0f b6 c0             	movzx  eax,al
c001cab5:	50                   	push   eax
c001cab6:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001cabb:	99                   	cdq    
c001cabc:	f7 fe                	idiv   esi
c001cabe:	99                   	cdq    
c001cabf:	f7 fb                	idiv   ebx
c001cac1:	8d 42 30             	lea    eax,[edx+0x30]
c001cac4:	0f b6 c0             	movzx  eax,al
c001cac7:	50                   	push   eax
c001cac8:	e8 5b ef ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cacd:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cad3:	58                   	pop    eax
c001cad4:	5a                   	pop    edx
c001cad5:	6a 0f                	push   0xf
c001cad7:	6a 00                	push   0x0
c001cad9:	e8 5b ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cade:	59                   	pop    ecx
c001cadf:	5a                   	pop    edx
c001cae0:	0f b6 c0             	movzx  eax,al
c001cae3:	50                   	push   eax
c001cae4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001cae9:	99                   	cdq    
c001caea:	f7 fb                	idiv   ebx
c001caec:	99                   	cdq    
c001caed:	f7 fb                	idiv   ebx
c001caef:	8d 42 30             	lea    eax,[edx+0x30]
c001caf2:	0f b6 c0             	movzx  eax,al
c001caf5:	50                   	push   eax
c001caf6:	e8 2d ef ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cafb:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cb01:	59                   	pop    ecx
c001cb02:	58                   	pop    eax
c001cb03:	6a 0f                	push   0xf
c001cb05:	6a 00                	push   0x0
c001cb07:	e8 2d ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cb0c:	5a                   	pop    edx
c001cb0d:	59                   	pop    ecx
c001cb0e:	0f b6 c0             	movzx  eax,al
c001cb11:	50                   	push   eax
c001cb12:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001cb17:	99                   	cdq    
c001cb18:	f7 fb                	idiv   ebx
c001cb1a:	83 c2 30             	add    edx,0x30
c001cb1d:	0f b6 d2             	movzx  edx,dl
c001cb20:	52                   	push   edx
c001cb21:	e8 02 ef ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cb26:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cb2c:	58                   	pop    eax
c001cb2d:	5a                   	pop    edx
c001cb2e:	6a 0f                	push   0xf
c001cb30:	6a 00                	push   0x0
c001cb32:	e8 02 ef ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cb37:	59                   	pop    ecx
c001cb38:	5a                   	pop    edx
c001cb39:	0f b6 c0             	movzx  eax,al
c001cb3c:	50                   	push   eax
c001cb3d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cb42:	99                   	cdq    
c001cb43:	f7 fd                	idiv   ebp
c001cb45:	99                   	cdq    
c001cb46:	f7 fb                	idiv   ebx
c001cb48:	8d 42 30             	lea    eax,[edx+0x30]
c001cb4b:	0f b6 c0             	movzx  eax,al
c001cb4e:	50                   	push   eax
c001cb4f:	e8 d4 ee ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cb54:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cb5a:	59                   	pop    ecx
c001cb5b:	5d                   	pop    ebp
c001cb5c:	6a 0f                	push   0xf
c001cb5e:	6a 00                	push   0x0
c001cb60:	e8 d4 ee ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cb65:	5a                   	pop    edx
c001cb66:	59                   	pop    ecx
c001cb67:	0f b6 c0             	movzx  eax,al
c001cb6a:	50                   	push   eax
c001cb6b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cb70:	99                   	cdq    
c001cb71:	f7 ff                	idiv   edi
c001cb73:	99                   	cdq    
c001cb74:	f7 fb                	idiv   ebx
c001cb76:	8d 42 30             	lea    eax,[edx+0x30]
c001cb79:	0f b6 c0             	movzx  eax,al
c001cb7c:	50                   	push   eax
c001cb7d:	e8 a6 ee ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cb82:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cb88:	5f                   	pop    edi
c001cb89:	5d                   	pop    ebp
c001cb8a:	6a 0f                	push   0xf
c001cb8c:	6a 00                	push   0x0
c001cb8e:	e8 a6 ee ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cb93:	5a                   	pop    edx
c001cb94:	59                   	pop    ecx
c001cb95:	0f b6 c0             	movzx  eax,al
c001cb98:	50                   	push   eax
c001cb99:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cb9e:	99                   	cdq    
c001cb9f:	f7 fe                	idiv   esi
c001cba1:	99                   	cdq    
c001cba2:	f7 fb                	idiv   ebx
c001cba4:	8d 42 30             	lea    eax,[edx+0x30]
c001cba7:	0f b6 c0             	movzx  eax,al
c001cbaa:	50                   	push   eax
c001cbab:	e8 78 ee ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cbb0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cbb6:	5e                   	pop    esi
c001cbb7:	5f                   	pop    edi
c001cbb8:	6a 0f                	push   0xf
c001cbba:	6a 00                	push   0x0
c001cbbc:	e8 78 ee ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cbc1:	5d                   	pop    ebp
c001cbc2:	5a                   	pop    edx
c001cbc3:	0f b6 c0             	movzx  eax,al
c001cbc6:	50                   	push   eax
c001cbc7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cbcc:	99                   	cdq    
c001cbcd:	f7 fb                	idiv   ebx
c001cbcf:	99                   	cdq    
c001cbd0:	f7 fb                	idiv   ebx
c001cbd2:	8d 42 30             	lea    eax,[edx+0x30]
c001cbd5:	0f b6 c0             	movzx  eax,al
c001cbd8:	50                   	push   eax
c001cbd9:	e8 4a ee ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cbde:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cbe4:	59                   	pop    ecx
c001cbe5:	5e                   	pop    esi
c001cbe6:	6a 0f                	push   0xf
c001cbe8:	6a 00                	push   0x0
c001cbea:	e8 4a ee ff ff       	call   c001ba39 <combineColours(unsigned char, unsigned char)>
c001cbef:	5f                   	pop    edi
c001cbf0:	5d                   	pop    ebp
c001cbf1:	0f b6 c0             	movzx  eax,al
c001cbf4:	50                   	push   eax
c001cbf5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cbfa:	99                   	cdq    
c001cbfb:	f7 fb                	idiv   ebx
c001cbfd:	83 c2 30             	add    edx,0x30
c001cc00:	0f b6 d2             	movzx  edx,dl
c001cc03:	52                   	push   edx
c001cc04:	e8 1f ee ff ff       	call   c001ba28 <combineCharAndColour(char, unsigned char)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cc12:	31 c0                	xor    eax,eax
c001cc14:	83 c4 1c             	add    esp,0x1c
c001cc17:	5b                   	pop    ebx
c001cc18:	5e                   	pop    esi
c001cc19:	5f                   	pop    edi
c001cc1a:	5d                   	pop    ebp
c001cc1b:	c3                   	ret    

c001cc1c <SATAPI::write(unsigned long long, int, void*)>:
c001cc1c:	b8 03 00 00 00       	mov    eax,0x3
c001cc21:	c3                   	ret    

c001cc22 <SATAPI::close(int, int, void*)>:
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc29:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc2f:	85 c0                	test   eax,eax
c001cc31:	74 0c                	je     c001cc3f <SATAPI::close(int, int, void*)+0x1d>
c001cc33:	83 ec 0c             	sub    esp,0xc
c001cc36:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc38:	50                   	push   eax
c001cc39:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc3c:	83 c4 10             	add    esp,0x10
c001cc3f:	31 c0                	xor    eax,eax
c001cc41:	83 c4 0c             	add    esp,0xc
c001cc44:	c3                   	ret    
c001cc45:	90                   	nop

c001cc46 <SATAPI::SATAPI()>:
c001cc46:	83 ec 0c             	sub    esp,0xc
c001cc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4d:	83 ec 04             	sub    esp,0x4
c001cc50:	68 00 08 00 00       	push   0x800
c001cc55:	68 dc 16 02 c0       	push   0xc00216dc
c001cc5a:	50                   	push   eax
c001cc5b:	e8 26 f2 fe ff       	call   c000be86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc60:	83 c4 10             	add    esp,0x10
c001cc63:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	89 10                	mov    DWORD PTR [eax],edx
c001cc6e:	90                   	nop
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	c3                   	ret    
c001cc73:	90                   	nop

c001cc74 <SATAPI::diskRemoved()>:
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop

c001cc76 <SATAPI::diskInserted()>:
c001cc76:	83 ec 18             	sub    esp,0x18
c001cc79:	68 e8 16 02 c0       	push   0xc00216e8
c001cc7e:	e8 e6 d9 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001cc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc87:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001cc8e:	83 c4 1c             	add    esp,0x1c
c001cc91:	c3                   	ret    

c001cc92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001cc92:	55                   	push   ebp
c001cc93:	57                   	push   edi
c001cc94:	56                   	push   esi
c001cc95:	53                   	push   ebx
c001cc96:	83 ec 34             	sub    esp,0x34
c001cc99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc9d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cca1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cca5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cca9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ccad:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ccb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccbd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ccc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccc7:	83 c0 02             	add    eax,0x2
c001ccca:	c1 e0 07             	shl    eax,0x7
c001cccd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ccd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccd9:	c1 e0 07             	shl    eax,0x7
c001ccdc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cce0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cce4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ccee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ccf8:	e8 f7 e4 ff ff       	call   c001b1f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ccfd:	83 c4 10             	add    esp,0x10
c001cd00:	89 c2                	mov    edx,eax
c001cd02:	b8 01 00 00 00       	mov    eax,0x1
c001cd07:	83 fa ff             	cmp    edx,0xffffffff
c001cd0a:	0f 84 5c 02 00 00    	je     c001cf6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2da>
c001cd10:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cd16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cd1e:	8b 80 00 01 00 00    	mov    eax,DWORD PTR [eax+0x100]
c001cd24:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cd2a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cd30:	89 d1                	mov    ecx,edx
c001cd32:	c1 e1 05             	shl    ecx,0x5
c001cd35:	01 c8                	add    eax,ecx
c001cd37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cd39:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001cd3f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001cd45:	89 08                	mov    DWORD PTR [eax],ecx
c001cd47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cd4d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001cd53:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001cd59:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001cd5c:	50                   	push   eax
c001cd5d:	68 90 00 00 00       	push   0x90
c001cd62:	8d 7b 40             	lea    edi,[ebx+0x40]
c001cd65:	6a 00                	push   0x0
c001cd67:	53                   	push   ebx
c001cd68:	e8 13 38 fe ff       	call   c0000580 <memset>
c001cd6d:	b9 0c 00 00 00       	mov    ecx,0xc
c001cd72:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001cd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd78:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001cd7e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001cd82:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001cd86:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001cd8c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cd90:	48                   	dec    eax
c001cd91:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cd96:	89 c1                	mov    ecx,eax
c001cd98:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001cd9e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cda3:	09 c8                	or     eax,ecx
c001cda5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001cdab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001cdae:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001cdb5:	66 25 00 7f          	and    ax,0x7f00
c001cdb9:	66 0d 27 80          	or     ax,0x8027
c001cdbd:	66 89 03             	mov    WORD PTR [ebx],ax
c001cdc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdc4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001cdc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdcc:	c1 e8 10             	shr    eax,0x10
c001cdcf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001cdd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdd6:	c1 e8 18             	shr    eax,0x18
c001cdd9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001cddc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001cde0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001cde3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cde7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001cdea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cdf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdf9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001cdfd:	31 c0                	xor    eax,eax
c001cdff:	8b 99 20 01 00 00    	mov    ebx,DWORD PTR [ecx+0x120]
c001ce05:	80 e3 88             	and    bl,0x88
c001ce08:	74 0a                	je     c001ce14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ce0a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ce0f:	74 0a                	je     c001ce1b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ce11:	40                   	inc    eax
c001ce12:	eb eb                	jmp    c001cdff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ce14:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ce19:	75 43                	jne    c001ce5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ce1b:	83 ec 0c             	sub    esp,0xc
c001ce1e:	68 00 17 02 c0       	push   0xc0021700
c001ce23:	e8 41 d8 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001ce28:	58                   	pop    eax
c001ce29:	5a                   	pop    edx
c001ce2a:	68 15 17 02 c0       	push   0xc0021715
c001ce2f:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001ce35:	e8 28 ba fe ff       	call   c0008862 <VgaText::puts(char const*)>
c001ce3a:	59                   	pop    ecx
c001ce3b:	5b                   	pop    ebx
c001ce3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce40:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ce46:	e8 43 e4 ff ff       	call   c001b28e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ce4b:	5e                   	pop    esi
c001ce4c:	5f                   	pop    edi
c001ce4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce51:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ce57:	e8 12 e4 ff ff       	call   c001b26e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ce5c:	eb 4b                	jmp    c001cea9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c001ce5e:	be 01 00 00 00       	mov    esi,0x1
c001ce63:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ce67:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ce6c:	c4 e2 69 f7 f6       	shlx   esi,esi,edx
c001ce71:	89 b1 38 01 00 00    	mov    DWORD PTR [ecx+0x138],esi
c001ce77:	c1 e7 07             	shl    edi,0x7
c001ce7a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ce7e:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ce84:	85 c6                	test   esi,eax
c001ce86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce8a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ce90:	0f 84 a3 00 00 00    	je     c001cf39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a7>
c001ce96:	0f ba e0 1e          	bt     eax,0x1e
c001ce9a:	73 1a                	jae    c001ceb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x224>
c001ce9c:	83 ec 0c             	sub    esp,0xc
c001ce9f:	68 27 17 02 c0       	push   0xc0021727
c001cea4:	e8 c0 d7 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001cea9:	83 c4 10             	add    esp,0x10
c001ceac:	b8 01 00 00 00       	mov    eax,0x1
c001ceb1:	e9 b6 00 00 00       	jmp    c001cf6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2da>
c001ceb6:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001cebc:	83 f8 0d             	cmp    eax,0xd
c001cebf:	77 0a                	ja     c001cecb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001cec1:	83 ec 0c             	sub    esp,0xc
c001cec4:	68 c8 00 00 00       	push   0xc8
c001cec9:	eb 28                	jmp    c001cef3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x261>
c001cecb:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ced1:	83 f8 0d             	cmp    eax,0xd
c001ced4:	77 0a                	ja     c001cee0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24e>
c001ced6:	83 ec 0c             	sub    esp,0xc
c001ced9:	68 58 02 00 00       	push   0x258
c001cede:	eb 13                	jmp    c001cef3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x261>
c001cee0:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001cee6:	83 f8 06             	cmp    eax,0x6
c001cee9:	77 10                	ja     c001cefb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001ceeb:	83 ec 0c             	sub    esp,0xc
c001ceee:	68 dc 05 00 00       	push   0x5dc
c001cef3:	e8 b8 80 ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ceff:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cf02:	75 06                	jne    c001cf0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x278>
c001cf04:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cf08:	74 15                	je     c001cf1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28d>
c001cf0a:	83 fb 06             	cmp    ebx,0x6
c001cf0d:	77 10                	ja     c001cf1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28d>
c001cf0f:	83 ec 0c             	sub    esp,0xc
c001cf12:	68 c4 09 00 00       	push   0x9c4
c001cf17:	e8 94 80 ff ff       	call   c0014fb0 <milliTenthSleep(unsigned int)>
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	43                   	inc    ebx
c001cf20:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001cf26:	0f 85 52 ff ff ff    	jne    c001ce7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ec>
c001cf2c:	83 ec 0c             	sub    esp,0xc
c001cf2f:	68 3a 17 02 c0       	push   0xc002173a
c001cf34:	e9 6b ff ff ff       	jmp    c001cea4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001cf39:	0f ba e0 1e          	bt     eax,0x1e
c001cf3d:	73 0d                	jae    c001cf4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ba>
c001cf3f:	83 ec 0c             	sub    esp,0xc
c001cf42:	68 4e 17 02 c0       	push   0xc002174e
c001cf47:	e9 58 ff ff ff       	jmp    c001cea4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001cf4c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001cf51:	74 17                	je     c001cf6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d8>
c001cf53:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001cf58:	74 10                	je     c001cf6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d8>
c001cf5a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001cf60:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001cf64:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001cf68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf6a:	31 c0                	xor    eax,eax
c001cf6c:	83 c4 2c             	add    esp,0x2c
c001cf6f:	5b                   	pop    ebx
c001cf70:	5e                   	pop    esi
c001cf71:	5f                   	pop    edi
c001cf72:	5d                   	pop    ebp
c001cf73:	c3                   	ret    

c001cf74 <SATAPI::eject()>:
c001cf74:	57                   	push   edi
c001cf75:	b9 03 00 00 00       	mov    ecx,0x3
c001cf7a:	83 ec 18             	sub    esp,0x18
c001cf7d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cf81:	fc                   	cld    
c001cf82:	31 c0                	xor    eax,eax
c001cf84:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf86:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cf8b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cf90:	50                   	push   eax
c001cf91:	6a 00                	push   0x0
c001cf93:	6a 00                	push   0x0
c001cf95:	6a 00                	push   0x0
c001cf97:	6a 00                	push   0x0
c001cf99:	6a 02                	push   0x2
c001cf9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf9f:	50                   	push   eax
c001cfa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfa4:	e8 e9 fc ff ff       	call   c001cc92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cfa9:	83 c4 38             	add    esp,0x38
c001cfac:	31 c0                	xor    eax,eax
c001cfae:	5f                   	pop    edi
c001cfaf:	c3                   	ret    

c001cfb0 <SATAPI::detectMedia()>:
c001cfb0:	53                   	push   ebx
c001cfb1:	83 ec 14             	sub    esp,0x14
c001cfb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cfb8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cfbe:	e8 b1 07 ff ff       	call   c000d774 <VCache::writeWriteBuffer()>
c001cfc3:	59                   	pop    ecx
c001cfc4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cfca:	e8 95 07 ff ff       	call   c000d764 <VCache::invalidateReadBuffer()>
c001cfcf:	c7 04 24 63 17 02 c0 	mov    DWORD PTR [esp],0xc0021763
c001cfd6:	e8 8e d6 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	31 c0                	xor    eax,eax
c001cfe0:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001cfe7:	85 d2                	test   edx,edx
c001cfe9:	74 0f                	je     c001cffa <SATAPI::detectMedia()+0x4a>
c001cfeb:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001cff1:	75 07                	jne    c001cffa <SATAPI::detectMedia()+0x4a>
c001cff3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cffa:	40                   	inc    eax
c001cffb:	83 f8 1a             	cmp    eax,0x1a
c001cffe:	75 e0                	jne    c001cfe0 <SATAPI::detectMedia()+0x30>
c001d000:	83 c4 08             	add    esp,0x8
c001d003:	5b                   	pop    ebx
c001d004:	c3                   	ret    
c001d005:	90                   	nop

c001d006 <SATAPI::open(int, int, void*)>:
c001d006:	56                   	push   esi
c001d007:	53                   	push   ebx
c001d008:	51                   	push   ecx
c001d009:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d00d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d011:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d01b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d025:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d02f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d035:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d03f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d046:	e8 15 ab fe ff       	call   c0007b60 <Phys::allocatePage()>
c001d04b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d051:	89 c6                	mov    esi,eax
c001d053:	81 c6 00 10 00 00    	add    esi,0x1000
c001d059:	e8 02 ab fe ff       	call   c0007b60 <Phys::allocatePage()>
c001d05e:	39 c6                	cmp    esi,eax
c001d060:	74 10                	je     c001d072 <SATAPI::open(int, int, void*)+0x6c>
c001d062:	83 ec 0c             	sub    esp,0xc
c001d065:	68 78 17 02 c0       	push   0xc0021778
c001d06a:	e8 4e 34 ff ff       	call   c00104bd <KePanic(char const*)>
c001d06f:	83 c4 10             	add    esp,0x10
c001d072:	83 ec 0c             	sub    esp,0xc
c001d075:	6a 02                	push   0x2
c001d077:	e8 43 c3 fe ff       	call   c00093bf <Virt::allocateKernelVirtualPages(int)>
c001d07c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d082:	6a 03                	push   0x3
c001d084:	50                   	push   eax
c001d085:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d08b:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001d091:	e8 e4 c9 fe ff       	call   c0009a7a <VAS::mapPage(unsigned long, unsigned long, int)>
c001d096:	83 c4 14             	add    esp,0x14
c001d099:	68 78 01 00 00       	push   0x178
c001d09e:	e8 d8 a7 fe ff       	call   c000787b <malloc>
c001d0a3:	83 c4 0c             	add    esp,0xc
c001d0a6:	6a 00                	push   0x0
c001d0a8:	89 c6                	mov    esi,eax
c001d0aa:	68 ff ff ff 7f       	push   0x7fffffff
c001d0af:	6a 00                	push   0x0
c001d0b1:	6a 00                	push   0x0
c001d0b3:	53                   	push   ebx
c001d0b4:	68 8e 17 02 c0       	push   0xc002178e
c001d0b9:	50                   	push   eax
c001d0ba:	e8 e9 fa fe ff       	call   c000cba8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d0bf:	83 c4 14             	add    esp,0x14
c001d0c2:	56                   	push   esi
c001d0c3:	e8 a0 fb fe ff       	call   c000cc68 <LogicalDisk::assignDriveLetter()>
c001d0c8:	5a                   	pop    edx
c001d0c9:	59                   	pop    ecx
c001d0ca:	0f be c0             	movsx  eax,al
c001d0cd:	50                   	push   eax
c001d0ce:	68 e0 15 02 c0       	push   0xc00215e0
c001d0d3:	e8 91 d5 fe ff       	call   c000a669 <Dbg::kprintf(char const*, ...)>
c001d0d8:	58                   	pop    eax
c001d0d9:	5a                   	pop    edx
c001d0da:	56                   	push   esi
c001d0db:	53                   	push   ebx
c001d0dc:	e8 d7 e9 fe ff       	call   c000bab8 <Device::addChild(Device*)>
c001d0e1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d0e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ea:	e8 ff ed fe ff       	call   c000beee <PhysicalDisk::startCache()>
c001d0ef:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d0f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f9:	e8 b2 fe ff ff       	call   c001cfb0 <SATAPI::detectMedia()>
c001d0fe:	83 c4 14             	add    esp,0x14
c001d101:	31 c0                	xor    eax,eax
c001d103:	5b                   	pop    ebx
c001d104:	5e                   	pop    esi
c001d105:	c3                   	ret    

c001d106 <SATAPI::read(unsigned long long, int, void*)>:
c001d106:	55                   	push   ebp
c001d107:	57                   	push   edi
c001d108:	56                   	push   esi
c001d109:	53                   	push   ebx
c001d10a:	83 ec 3c             	sub    esp,0x3c
c001d10d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d111:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d115:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d119:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d11d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d121:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d125:	83 fd 04             	cmp    ebp,0x4
c001d128:	7e 10                	jle    c001d13a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	68 9c 17 02 c0       	push   0xc002179c
c001d132:	e8 86 33 ff ff       	call   c00104bd <KePanic(char const*)>
c001d137:	83 c4 10             	add    esp,0x10
c001d13a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d140:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d146:	51                   	push   ecx
c001d147:	50                   	push   eax
c001d148:	83 c0 02             	add    eax,0x2
c001d14b:	c1 e0 07             	shl    eax,0x7
c001d14e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d154:	50                   	push   eax
c001d155:	52                   	push   edx
c001d156:	e8 5d e1 ff ff       	call   c001b2b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d15b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d15f:	b9 03 00 00 00       	mov    ecx,0x3
c001d164:	fc                   	cld    
c001d165:	31 c0                	xor    eax,eax
c001d167:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d169:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d16e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d173:	83 c4 0c             	add    esp,0xc
c001d176:	6a 00                	push   0x0
c001d178:	6a 00                	push   0x0
c001d17a:	6a 00                	push   0x0
c001d17c:	6a 00                	push   0x0
c001d17e:	6a 02                	push   0x2
c001d180:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d184:	50                   	push   eax
c001d185:	53                   	push   ebx
c001d186:	e8 07 fb ff ff       	call   c001cc92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d18b:	83 c4 20             	add    esp,0x20
c001d18e:	89 c6                	mov    esi,eax
c001d190:	85 c0                	test   eax,eax
c001d192:	75 46                	jne    c001d1da <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d194:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d198:	b9 03 00 00 00       	mov    ecx,0x3
c001d19d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d19f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1a3:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d1a8:	0f 38 f1 44 24 26    	movbe  DWORD PTR [esp+0x26],eax
c001d1ae:	89 e8                	mov    eax,ebp
c001d1b0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d1b4:	50                   	push   eax
c001d1b5:	55                   	push   ebp
c001d1b6:	c1 e5 0b             	shl    ebp,0xb
c001d1b9:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d1bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1c5:	55                   	push   ebp
c001d1c6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1ca:	50                   	push   eax
c001d1cb:	53                   	push   ebx
c001d1cc:	e8 c1 fa ff ff       	call   c001cc92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d1d1:	83 c4 20             	add    esp,0x20
c001d1d4:	89 c6                	mov    esi,eax
c001d1d6:	85 c0                	test   eax,eax
c001d1d8:	74 0c                	je     c001d1e6 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d1da:	83 ec 0c             	sub    esp,0xc
c001d1dd:	53                   	push   ebx
c001d1de:	e8 cd fd ff ff       	call   c001cfb0 <SATAPI::detectMedia()>
c001d1e3:	83 c4 10             	add    esp,0x10
c001d1e6:	83 c4 3c             	add    esp,0x3c
c001d1e9:	89 f0                	mov    eax,esi
c001d1eb:	5b                   	pop    ebx
c001d1ec:	5e                   	pop    esi
c001d1ed:	5f                   	pop    edi
c001d1ee:	5d                   	pop    ebp
c001d1ef:	c3                   	ret    

c001d1f0 <IOAPIC::close(int, int, void*)>:
c001d1f0:	b8 00 00 00 00       	mov    eax,0x0
c001d1f5:	c3                   	ret    

c001d1f6 <apicGetBase()>:
c001d1f6:	55                   	push   ebp
c001d1f7:	89 e5                	mov    ebp,esp
c001d1f9:	83 ec 18             	sub    esp,0x18
c001d1fc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d201:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d207:	83 e0 08             	and    eax,0x8
c001d20a:	84 c0                	test   al,al
c001d20c:	75 07                	jne    c001d215 <apicGetBase()+0x1f>
c001d20e:	b8 00 00 00 00       	mov    eax,0x0
c001d213:	eb 20                	jmp    c001d235 <apicGetBase()+0x3f>
c001d215:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d21a:	83 ec 08             	sub    esp,0x8
c001d21d:	6a 1b                	push   0x1b
c001d21f:	50                   	push   eax
c001d220:	e8 95 9c fe ff       	call   c0006eba <Computer::rdmsr(unsigned int)>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d22b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d22e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d231:	66 b8 00 00          	mov    ax,0x0
c001d235:	c9                   	leave  
c001d236:	c3                   	ret    
c001d237:	90                   	nop

c001d238 <IOAPIC::IOAPIC()>:
c001d238:	83 ec 0c             	sub    esp,0xc
c001d23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23f:	83 ec 08             	sub    esp,0x8
c001d242:	68 00 18 02 c0       	push   0xc0021800
c001d247:	50                   	push   eax
c001d248:	e8 03 ea fe ff       	call   c000bc50 <Device::Device(char const*)>
c001d24d:	83 c4 10             	add    esp,0x10
c001d250:	ba 10 18 02 c0       	mov    edx,0xc0021810
c001d255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d259:	89 10                	mov    DWORD PTR [eax],edx
c001d25b:	90                   	nop
c001d25c:	83 c4 0c             	add    esp,0xc
c001d25f:	c3                   	ret    

c001d260 <apicOpen()>:
c001d260:	55                   	push   ebp
c001d261:	89 e5                	mov    ebp,esp
c001d263:	53                   	push   ebx
c001d264:	83 ec 34             	sub    esp,0x34
c001d267:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001d26c:	83 f0 01             	xor    eax,0x1
c001d26f:	84 c0                	test   al,al
c001d271:	0f 84 91 00 00 00    	je     c001d308 <apicOpen()+0xa8>
c001d277:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d27b:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001d280:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d283:	73 7c                	jae    c001d301 <apicOpen()+0xa1>
c001d285:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d28c:	83 ec 0c             	sub    esp,0xc
c001d28f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d292:	e8 e4 a5 fe ff       	call   c000787b <malloc>
c001d297:	83 c4 10             	add    esp,0x10
c001d29a:	89 c3                	mov    ebx,eax
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	53                   	push   ebx
c001d2a0:	e8 93 ff ff ff       	call   c001d238 <IOAPIC::IOAPIC()>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d2ab:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d2af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d2b2:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001d2b9:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001d2be:	40                   	inc    eax
c001d2bf:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001d2c4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d2c9:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d2cf:	83 ec 08             	sub    esp,0x8
c001d2d2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d2d5:	50                   	push   eax
c001d2d6:	e8 dd e7 fe ff       	call   c000bab8 <Device::addChild(Device*)>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d2e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2e3:	83 c0 08             	add    eax,0x8
c001d2e6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2e8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d2ec:	6a 00                	push   0x0
c001d2ee:	6a 00                	push   0x0
c001d2f0:	50                   	push   eax
c001d2f1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d2f4:	ff d2                	call   edx
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d2fc:	e9 7a ff ff ff       	jmp    c001d27b <apicOpen()+0x1b>
c001d301:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001d308:	e8 e9 fe ff ff       	call   c001d1f6 <apicGetBase()>
c001d30d:	05 f0 00 00 00       	add    eax,0xf0
c001d312:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d315:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d318:	8b 00                	mov    eax,DWORD PTR [eax]
c001d31a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d31d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d324:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d32b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d32e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d331:	89 10                	mov    DWORD PTR [eax],edx
c001d333:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d33a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d33f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d342:	7d 70                	jge    c001d3b4 <apicOpen()+0x154>
c001d344:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d347:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d34e:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d351:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d354:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d35b:	c1 e8 08             	shr    eax,0x8
c001d35e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d362:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d365:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d36c:	c1 e8 18             	shr    eax,0x18
c001d36f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d372:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d376:	75 37                	jne    c001d3af <apicOpen()+0x14f>
c001d378:	e8 79 fe ff ff       	call   c001d1f6 <apicGetBase()>
c001d37d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d381:	75 07                	jne    c001d38a <apicOpen()+0x12a>
c001d383:	ba 60 03 00 00       	mov    edx,0x360
c001d388:	eb 05                	jmp    c001d38f <apicOpen()+0x12f>
c001d38a:	ba 50 03 00 00       	mov    edx,0x350
c001d38f:	01 d0                	add    eax,edx
c001d391:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d394:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d397:	8b 00                	mov    eax,DWORD PTR [eax]
c001d399:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d39c:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d3a3:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d3a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d3aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d3ad:	89 10                	mov    DWORD PTR [eax],edx
c001d3af:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d3b2:	eb 86                	jmp    c001d33a <apicOpen()+0xda>
c001d3b4:	90                   	nop
c001d3b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d3b8:	c9                   	leave  
c001d3b9:	c3                   	ret    

c001d3ba <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d3ba:	55                   	push   ebp
c001d3bb:	89 e5                	mov    ebp,esp
c001d3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3c6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d3c9:	72 1d                	jb     c001d3e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3ce:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d3d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3d7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d3dd:	01 d0                	add    eax,edx
c001d3df:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d3e2:	73 04                	jae    c001d3e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d3e4:	b0 01                	mov    al,0x1
c001d3e6:	eb 02                	jmp    c001d3ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d3e8:	b0 00                	mov    al,0x0
c001d3ea:	5d                   	pop    ebp
c001d3eb:	c3                   	ret    

c001d3ec <IOAPIC::read(int)>:
c001d3ec:	55                   	push   ebp
c001d3ed:	89 e5                	mov    ebp,esp
c001d3ef:	83 ec 10             	sub    esp,0x10
c001d3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d3fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d3fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d401:	0f b6 c0             	movzx  eax,al
c001d404:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
c001d407:	89 02                	mov    DWORD PTR [edx],eax
c001d409:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d40c:	83 c0 10             	add    eax,0x10
c001d40f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d411:	c9                   	leave  
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <IOAPIC::open(int, int, void*)>:
c001d414:	55                   	push   ebp
c001d415:	89 e5                	mov    ebp,esp
c001d417:	53                   	push   ebx
c001d418:	83 ec 04             	sub    esp,0x4
c001d41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d41e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d421:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d42a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d430:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d43a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d443:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d449:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d453:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d45c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d465:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d46b:	0f b6 d8             	movzx  ebx,al
c001d46e:	89 d0                	mov    eax,edx
c001d470:	ba 00 00 00 00       	mov    edx,0x0
c001d475:	81 e2 ff 00 00 00    	and    edx,0xff
c001d47b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d47e:	83 c3 08             	add    ebx,0x8
c001d481:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d485:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d489:	83 e0 00             	and    eax,0x0
c001d48c:	09 d0                	or     eax,edx
c001d48e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d495:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d49b:	8d 50 01             	lea    edx,[eax+0x1]
c001d49e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d4a1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d4a7:	0f b6 d0             	movzx  edx,al
c001d4aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4ad:	83 c2 08             	add    edx,0x8
c001d4b0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d4b4:	0f b6 c9             	movzx  ecx,cl
c001d4b7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d4bd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d4c1:	6a 01                	push   0x1
c001d4c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4c6:	e8 21 ff ff ff       	call   c001d3ec <IOAPIC::read(int)>
c001d4cb:	83 c4 08             	add    esp,0x8
c001d4ce:	c1 f8 10             	sar    eax,0x10
c001d4d1:	0f b6 c0             	movzx  eax,al
c001d4d4:	8d 50 01             	lea    edx,[eax+0x1]
c001d4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4da:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d4e0:	b8 00 00 00 00       	mov    eax,0x0
c001d4e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d4e8:	c9                   	leave  
c001d4e9:	c3                   	ret    

c001d4ea <IOAPIC::write(int, int)>:
c001d4ea:	55                   	push   ebp
c001d4eb:	89 e5                	mov    ebp,esp
c001d4ed:	83 ec 10             	sub    esp,0x10
c001d4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d4f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d4fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d4ff:	0f b6 c0             	movzx  eax,al
c001d502:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
c001d505:	89 02                	mov    DWORD PTR [edx],eax
c001d507:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d50a:	83 c0 10             	add    eax,0x10
c001d50d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d510:	89 10                	mov    DWORD PTR [eax],edx
c001d512:	90                   	nop
c001d513:	c9                   	leave  
c001d514:	c3                   	ret    
c001d515:	90                   	nop

c001d516 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d516:	55                   	push   ebp
c001d517:	89 e5                	mov    ebp,esp
c001d519:	53                   	push   ebx
c001d51a:	83 ec 2c             	sub    esp,0x2c
c001d51d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d520:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d523:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d526:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d529:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d52c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d52f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d532:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d535:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d538:	88 d8                	mov    al,bl
c001d53a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d53d:	88 c8                	mov    al,cl
c001d53f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d542:	88 d0                	mov    al,dl
c001d544:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d547:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d54b:	83 c0 08             	add    eax,0x8
c001d54e:	01 c0                	add    eax,eax
c001d550:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d553:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d557:	83 c0 08             	add    eax,0x8
c001d55a:	01 c0                	add    eax,eax
c001d55c:	40                   	inc    eax
c001d55d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d560:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d563:	50                   	push   eax
c001d564:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d567:	e8 80 fe ff ff       	call   c001d3ec <IOAPIC::read(int)>
c001d56c:	83 c4 08             	add    esp,0x8
c001d56f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d572:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d579:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d57c:	c1 e0 18             	shl    eax,0x18
c001d57f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d582:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d585:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d588:	52                   	push   edx
c001d589:	50                   	push   eax
c001d58a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d58d:	e8 58 ff ff ff       	call   c001d4ea <IOAPIC::write(int, int)>
c001d592:	83 c4 0c             	add    esp,0xc
c001d595:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d598:	50                   	push   eax
c001d599:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d59c:	e8 4b fe ff ff       	call   c001d3ec <IOAPIC::read(int)>
c001d5a1:	83 c4 08             	add    esp,0x8
c001d5a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d5a7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d5ae:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d5b5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d5bc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d5c0:	74 09                	je     c001d5cb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001d5c2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d5c9:	eb 07                	jmp    c001d5d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001d5cb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d5d2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d5d6:	74 09                	je     c001d5e1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001d5d8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d5df:	eb 07                	jmp    c001d5e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001d5e1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d5e8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d5ef:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001d5f3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d5f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d5f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5fc:	52                   	push   edx
c001d5fd:	50                   	push   eax
c001d5fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d601:	e8 e4 fe ff ff       	call   c001d4ea <IOAPIC::write(int, int)>
c001d606:	83 c4 0c             	add    esp,0xc
c001d609:	90                   	nop
c001d60a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d60d:	c9                   	leave  
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <APICTimer::close(int, int, void*)>:
c001d610:	b8 00 00 00 00       	mov    eax,0x0
c001d615:	c3                   	ret    
c001d616:	66 90                	xchg   ax,ax

c001d618 <apicTimerHandler(regs*, void*)>:
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d61f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d621:	b8 10 27 00 00       	mov    eax,0x2710
c001d626:	ba 00 00 00 00       	mov    edx,0x0
c001d62b:	f7 f1                	div    ecx
c001d62d:	83 ec 0c             	sub    esp,0xc
c001d630:	50                   	push   eax
c001d631:	e8 56 fe fe ff       	call   c000d48c <timerHandler(unsigned int)>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	90                   	nop
c001d63a:	83 c4 0c             	add    esp,0xc
c001d63d:	c3                   	ret    
c001d63e:	66 90                	xchg   ax,ax

c001d640 <APICTimer::open(int, int, void*)>:
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d647:	8b 00                	mov    eax,DWORD PTR [eax]
c001d649:	83 c0 24             	add    eax,0x24
c001d64c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d64e:	83 ec 08             	sub    esp,0x8
c001d651:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d659:	ff d0                	call   eax
c001d65b:	83 c4 10             	add    esp,0x10
c001d65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d662:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d666:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d674:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d67a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d67e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d684:	83 ec 0c             	sub    esp,0xc
c001d687:	51                   	push   ecx
c001d688:	6a 01                	push   0x1
c001d68a:	68 18 d6 01 c0       	push   0xc001d618
c001d68f:	52                   	push   edx
c001d690:	50                   	push   eax
c001d691:	e8 ce e3 fe ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d696:	83 c4 20             	add    esp,0x20
c001d699:	89 c2                	mov    edx,eax
c001d69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d69f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d6a5:	b8 00 00 00 00       	mov    eax,0x0
c001d6aa:	83 c4 0c             	add    esp,0xc
c001d6ad:	c3                   	ret    
c001d6ae:	66 90                	xchg   ax,ax

c001d6b0 <APICTimer::write(int)>:
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	83 ec 0c             	sub    esp,0xc
c001d6b6:	68 34 18 02 c0       	push   0xc0021834
c001d6bb:	e8 fd 2d ff ff       	call   c00104bd <KePanic(char const*)>
c001d6c0:	83 c4 10             	add    esp,0x10
c001d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d6d1:	90                   	nop
c001d6d2:	83 c4 0c             	add    esp,0xc
c001d6d5:	c3                   	ret    
c001d6d6:	66 90                	xchg   ax,ax

c001d6d8 <APICTimer::APICTimer()>:
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6df:	83 ec 08             	sub    esp,0x8
c001d6e2:	68 44 18 02 c0       	push   0xc0021844
c001d6e7:	50                   	push   eax
c001d6e8:	e8 d3 fc fe ff       	call   c000d3c0 <Timer::Timer(char const*)>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	ba 58 18 02 c0       	mov    edx,0xc0021858
c001d6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f9:	89 10                	mov    DWORD PTR [eax],edx
c001d6fb:	90                   	nop
c001d6fc:	83 c4 0c             	add    esp,0xc
c001d6ff:	c3                   	ret    

c001d700 <PIT::write(int)>:
c001d700:	83 ec 10             	sub    esp,0x10
c001d703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d70b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d711:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d715:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d71a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d71f:	99                   	cdq    
c001d720:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d728:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d72f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d734:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d738:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d73d:	ee                   	out    dx,al
c001d73e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d742:	0f b6 c0             	movzx  eax,al
c001d745:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d74c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d750:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d754:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d759:	ee                   	out    dx,al
c001d75a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d75e:	c1 f8 08             	sar    eax,0x8
c001d761:	0f b6 c0             	movzx  eax,al
c001d764:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d76b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d76f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d773:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d778:	ee                   	out    dx,al
c001d779:	90                   	nop
c001d77a:	83 c4 10             	add    esp,0x10
c001d77d:	c3                   	ret    
c001d77e:	66 90                	xchg   ax,ax

c001d780 <pitHandler(regs*, void*)>:
c001d780:	83 ec 0c             	sub    esp,0xc
c001d783:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d789:	b8 10 27 00 00       	mov    eax,0x2710
c001d78e:	99                   	cdq    
c001d78f:	f7 f9                	idiv   ecx
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	50                   	push   eax
c001d795:	e8 f2 fc fe ff       	call   c000d48c <timerHandler(unsigned int)>
c001d79a:	83 c4 10             	add    esp,0x10
c001d79d:	90                   	nop
c001d79e:	83 c4 0c             	add    esp,0xc
c001d7a1:	c3                   	ret    
c001d7a2:	66 90                	xchg   ax,ax

c001d7a4 <PIT::open(int, int, void*)>:
c001d7a4:	83 ec 0c             	sub    esp,0xc
c001d7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7ad:	83 c0 24             	add    eax,0x24
c001d7b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7b2:	83 ec 08             	sub    esp,0x8
c001d7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7bd:	ff d0                	call   eax
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c6:	83 ec 0c             	sub    esp,0xc
c001d7c9:	6a 00                	push   0x0
c001d7cb:	6a 01                	push   0x1
c001d7cd:	68 80 d7 01 c0       	push   0xc001d780
c001d7d2:	6a 00                	push   0x0
c001d7d4:	50                   	push   eax
c001d7d5:	e8 8a e2 fe ff       	call   c000ba64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d7da:	83 c4 20             	add    esp,0x20
c001d7dd:	89 c2                	mov    edx,eax
c001d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d7e9:	b8 00 00 00 00       	mov    eax,0x0
c001d7ee:	83 c4 0c             	add    esp,0xc
c001d7f1:	c3                   	ret    
c001d7f2:	66 90                	xchg   ax,ax

c001d7f4 <PIT::close(int, int, void*)>:
c001d7f4:	83 ec 0c             	sub    esp,0xc
c001d7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7fb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d809:	6a 01                	push   0x1
c001d80b:	68 80 d7 01 c0       	push   0xc001d780
c001d810:	6a 00                	push   0x0
c001d812:	50                   	push   eax
c001d813:	e8 82 e2 fe ff       	call   c000ba9a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	b8 00 00 00 00       	mov    eax,0x0
c001d820:	83 c4 0c             	add    esp,0xc
c001d823:	c3                   	ret    

c001d824 <PIT::PIT()>:
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82b:	83 ec 08             	sub    esp,0x8
c001d82e:	68 80 18 02 c0       	push   0xc0021880
c001d833:	50                   	push   eax
c001d834:	e8 87 fb fe ff       	call   c000d3c0 <Timer::Timer(char const*)>
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c001d841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d845:	89 10                	mov    DWORD PTR [eax],edx
c001d847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d84b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d851:	0f b6 c0             	movzx  eax,al
c001d854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d858:	66 c7 44 82 04 40 00 	mov    WORD PTR [edx+eax*4+0x4],0x40
c001d85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d863:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d869:	0f b6 c0             	movzx  eax,al
c001d86c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d870:	c6 44 82 06 04       	mov    BYTE PTR [edx+eax*4+0x6],0x4
c001d875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d879:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d87f:	8d 50 01             	lea    edx,[eax+0x1]
c001d882:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d886:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d88c:	0f b6 c0             	movzx  eax,al
c001d88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d893:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c001d897:	83 e1 3f             	and    ecx,0x3f
c001d89a:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c001d89e:	90                   	nop
c001d89f:	83 c4 0c             	add    esp,0xc
c001d8a2:	c3                   	ret    
c001d8a3:	66 90                	xchg   ax,ax
c001d8a5:	66 90                	xchg   ax,ax
c001d8a7:	66 90                	xchg   ax,ax
c001d8a9:	66 90                	xchg   ax,ax
c001d8ab:	66 90                	xchg   ax,ax
c001d8ad:	66 90                	xchg   ax,ax
c001d8af:	90                   	nop

c001d8b0 <avxDetect>:
c001d8b0:	b8 01 00 00 00       	mov    eax,0x1
c001d8b5:	0f a2                	cpuid  
c001d8b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d8bd:	74 15                	je     c001d8d4 <avxDetect.noAVX>
c001d8bf:	b8 01 00 00 00       	mov    eax,0x1
c001d8c4:	0f a2                	cpuid  
c001d8c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d8cc:	74 06                	je     c001d8d4 <avxDetect.noAVX>
c001d8ce:	b8 01 00 00 00       	mov    eax,0x1
c001d8d3:	c3                   	ret    

c001d8d4 <avxDetect.noAVX>:
c001d8d4:	b8 00 00 00 00       	mov    eax,0x0
c001d8d9:	c3                   	ret    

c001d8da <avxSave>:
c001d8da:	53                   	push   ebx
c001d8db:	52                   	push   edx
c001d8dc:	31 c0                	xor    eax,eax
c001d8de:	48                   	dec    eax
c001d8df:	89 c2                	mov    edx,eax
c001d8e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d8e5:	0f ae 23             	xsave  [ebx]
c001d8e8:	5a                   	pop    edx
c001d8e9:	5b                   	pop    ebx
c001d8ea:	c3                   	ret    

c001d8eb <avxLoad>:
c001d8eb:	53                   	push   ebx
c001d8ec:	52                   	push   edx
c001d8ed:	31 c0                	xor    eax,eax
c001d8ef:	48                   	dec    eax
c001d8f0:	89 c2                	mov    edx,eax
c001d8f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d8f6:	0f ae 2b             	xrstor [ebx]
c001d8f9:	5a                   	pop    edx
c001d8fa:	5b                   	pop    ebx
c001d8fb:	c3                   	ret    

c001d8fc <avxInit>:
c001d8fc:	e8 67 03 00 00       	call   c001dc68 <sseInit>
c001d901:	50                   	push   eax
c001d902:	51                   	push   ecx
c001d903:	0f 20 e0             	mov    eax,cr4
c001d906:	0d 00 00 04 00       	or     eax,0x40000
c001d90b:	0f 22 e0             	mov    cr4,eax
c001d90e:	31 c9                	xor    ecx,ecx
c001d910:	0f 01 d0             	xgetbv 
c001d913:	0d 07 00 00 00       	or     eax,0x7
c001d918:	0f 01 d1             	xsetbv 
c001d91b:	59                   	pop    ecx
c001d91c:	58                   	pop    eax
c001d91d:	c3                   	ret    

c001d91e <avxClose>:
c001d91e:	c3                   	ret    

c001d91f <wouldSheSayYes>:
c001d91f:	c3                   	ret    
c001d920:	49                   	dec    ecx
c001d921:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d925:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d929:	75 20                	jne    c001d94b <isr0+0xb>
c001d92b:	4e                   	dec    esi
c001d92c:	79 61                	jns    c001d98f <isr7+0x3>
c001d92e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d933:	66 90                	xchg   ax,ax
c001d935:	66 90                	xchg   ax,ax
c001d937:	66 90                	xchg   ax,ax
c001d939:	66 90                	xchg   ax,ax
c001d93b:	66 90                	xchg   ax,ax
c001d93d:	66 90                	xchg   ax,ax
c001d93f:	90                   	nop

c001d940 <isr0>:
c001d940:	fa                   	cli    
c001d941:	68 00 00 00 00       	push   0x0
c001d946:	68 00 00 00 00       	push   0x0
c001d94b:	e9 56 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d950 <isr1>:
c001d950:	fa                   	cli    
c001d951:	6a 00                	push   0x0
c001d953:	6a 01                	push   0x1
c001d955:	e9 4c 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d95a <isr2>:
c001d95a:	fa                   	cli    
c001d95b:	6a 00                	push   0x0
c001d95d:	6a 02                	push   0x2
c001d95f:	e9 42 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d964 <isr3>:
c001d964:	fa                   	cli    
c001d965:	6a 00                	push   0x0
c001d967:	6a 03                	push   0x3
c001d969:	e9 38 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d96e <isr4>:
c001d96e:	fa                   	cli    
c001d96f:	6a 00                	push   0x0
c001d971:	6a 04                	push   0x4
c001d973:	e9 2e 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d978 <isr5>:
c001d978:	fa                   	cli    
c001d979:	6a 00                	push   0x0
c001d97b:	6a 05                	push   0x5
c001d97d:	e9 24 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d982 <isr6>:
c001d982:	fa                   	cli    
c001d983:	6a 00                	push   0x0
c001d985:	6a 06                	push   0x6
c001d987:	e9 1a 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d98c <isr7>:
c001d98c:	fa                   	cli    
c001d98d:	6a 00                	push   0x0
c001d98f:	6a 07                	push   0x7
c001d991:	e9 10 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d996 <isr8>:
c001d996:	fa                   	cli    
c001d997:	6a 08                	push   0x8
c001d999:	e9 08 01 00 00       	jmp    c001daa6 <int_common_stub>

c001d99e <isr9>:
c001d99e:	fa                   	cli    
c001d99f:	6a 00                	push   0x0
c001d9a1:	6a 09                	push   0x9
c001d9a3:	e9 fe 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9a8 <isr10>:
c001d9a8:	fa                   	cli    
c001d9a9:	6a 0a                	push   0xa
c001d9ab:	e9 f6 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9b0 <isr11>:
c001d9b0:	fa                   	cli    
c001d9b1:	6a 0b                	push   0xb
c001d9b3:	e9 ee 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9b8 <isr12>:
c001d9b8:	fa                   	cli    
c001d9b9:	6a 0c                	push   0xc
c001d9bb:	e9 e6 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9c0 <isr13>:
c001d9c0:	fa                   	cli    
c001d9c1:	6a 0d                	push   0xd
c001d9c3:	53                   	push   ebx
c001d9c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d9c8:	81 fb 96 db 01 c0    	cmp    ebx,0xc001db96
c001d9ce:	5b                   	pop    ebx
c001d9cf:	0f 84 c3 01 00 00    	je     c001db98 <finishSignal2>
c001d9d5:	e9 cc 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9da <isr14>:
c001d9da:	fa                   	cli    
c001d9db:	6a 0e                	push   0xe
c001d9dd:	e9 c4 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9e2 <isr15>:
c001d9e2:	fa                   	cli    
c001d9e3:	6a 00                	push   0x0
c001d9e5:	6a 0f                	push   0xf
c001d9e7:	e9 ba 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9ec <isr16>:
c001d9ec:	fa                   	cli    
c001d9ed:	6a 00                	push   0x0
c001d9ef:	6a 10                	push   0x10
c001d9f1:	e9 b0 00 00 00       	jmp    c001daa6 <int_common_stub>

c001d9f6 <isr17>:
c001d9f6:	fa                   	cli    
c001d9f7:	6a 00                	push   0x0
c001d9f9:	6a 11                	push   0x11
c001d9fb:	e9 a6 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da00 <isr18>:
c001da00:	fa                   	cli    
c001da01:	6a 00                	push   0x0
c001da03:	6a 12                	push   0x12
c001da05:	e9 9c 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da0a <irq3>:
c001da0a:	fa                   	cli    
c001da0b:	6a 00                	push   0x0
c001da0d:	6a 23                	push   0x23
c001da0f:	e9 92 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da14 <irq4>:
c001da14:	fa                   	cli    
c001da15:	6a 00                	push   0x0
c001da17:	6a 24                	push   0x24
c001da19:	e9 88 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da1e <irq5>:
c001da1e:	fa                   	cli    
c001da1f:	6a 00                	push   0x0
c001da21:	6a 25                	push   0x25
c001da23:	e9 7e 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da28 <irq6>:
c001da28:	fa                   	cli    
c001da29:	6a 00                	push   0x0
c001da2b:	6a 26                	push   0x26
c001da2d:	e9 74 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da32 <irq7>:
c001da32:	fa                   	cli    
c001da33:	6a 00                	push   0x0
c001da35:	6a 27                	push   0x27
c001da37:	e9 6a 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da3c <irq8>:
c001da3c:	fa                   	cli    
c001da3d:	6a 00                	push   0x0
c001da3f:	6a 28                	push   0x28
c001da41:	e9 60 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da46 <irq9>:
c001da46:	fa                   	cli    
c001da47:	6a 00                	push   0x0
c001da49:	6a 29                	push   0x29
c001da4b:	e9 56 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da50 <irq10>:
c001da50:	fa                   	cli    
c001da51:	6a 00                	push   0x0
c001da53:	6a 2a                	push   0x2a
c001da55:	e9 4c 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da5a <irq11>:
c001da5a:	fa                   	cli    
c001da5b:	6a 00                	push   0x0
c001da5d:	6a 2b                	push   0x2b
c001da5f:	e9 42 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da64 <irq12>:
c001da64:	fa                   	cli    
c001da65:	6a 00                	push   0x0
c001da67:	6a 2c                	push   0x2c
c001da69:	e9 38 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da6e <irq13>:
c001da6e:	fa                   	cli    
c001da6f:	6a 00                	push   0x0
c001da71:	6a 2d                	push   0x2d
c001da73:	e9 2e 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da78 <irq14>:
c001da78:	fa                   	cli    
c001da79:	6a 00                	push   0x0
c001da7b:	6a 2e                	push   0x2e
c001da7d:	e9 24 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da82 <irq15>:
c001da82:	fa                   	cli    
c001da83:	6a 00                	push   0x0
c001da85:	6a 2f                	push   0x2f
c001da87:	e9 1a 00 00 00       	jmp    c001daa6 <int_common_stub>

c001da8c <irq1>:
c001da8c:	fa                   	cli    
c001da8d:	6a 00                	push   0x0
c001da8f:	6a 21                	push   0x21
c001da91:	eb 13                	jmp    c001daa6 <int_common_stub>

c001da93 <irq2>:
c001da93:	fa                   	cli    
c001da94:	6a 00                	push   0x0
c001da96:	6a 22                	push   0x22
c001da98:	eb 0c                	jmp    c001daa6 <int_common_stub>

c001da9a <isr96>:
c001da9a:	6a 00                	push   0x0
c001da9c:	6a 60                	push   0x60
c001da9e:	fb                   	sti    
c001da9f:	eb 37                	jmp    c001dad8 <syscall_common_stub>

c001daa1 <irq0>:
c001daa1:	fa                   	cli    
c001daa2:	6a 00                	push   0x0
c001daa4:	6a 20                	push   0x20

c001daa6 <int_common_stub>:
c001daa6:	60                   	pusha  
c001daa7:	1e                   	push   ds
c001daa8:	06                   	push   es
c001daa9:	0f a0                	push   fs
c001daab:	0f a8                	push   gs
c001daad:	66 b8 10 00          	mov    ax,0x10
c001dab1:	66 8e d8             	mov    ds,ax
c001dab4:	66 8e c0             	mov    es,ax
c001dab7:	66 8e e0             	mov    fs,ax
c001daba:	66 8e e8             	mov    gs,ax
c001dabd:	54                   	push   esp
c001dabe:	fc                   	cld    
c001dabf:	e8 a0 e4 fe ff       	call   c000bf64 <int_handler>
c001dac4:	81 c4 04 00 00 00    	add    esp,0x4
c001daca:	0f a9                	pop    gs
c001dacc:	0f a1                	pop    fs
c001dace:	07                   	pop    es
c001dacf:	1f                   	pop    ds
c001dad0:	61                   	popa   
c001dad1:	81 c4 08 00 00 00    	add    esp,0x8
c001dad7:	cf                   	iret   

c001dad8 <syscall_common_stub>:
c001dad8:	60                   	pusha  
c001dad9:	1e                   	push   ds
c001dada:	06                   	push   es
c001dadb:	0f a0                	push   fs
c001dadd:	0f a8                	push   gs
c001dadf:	66 b8 10 00          	mov    ax,0x10
c001dae3:	66 8e d8             	mov    ds,ax
c001dae6:	66 8e c0             	mov    es,ax
c001dae9:	66 8e e0             	mov    fs,ax
c001daec:	66 8e e8             	mov    gs,ax
c001daef:	54                   	push   esp
c001daf0:	fc                   	cld    
c001daf1:	e8 6e e4 fe ff       	call   c000bf64 <int_handler>
c001daf6:	81 c4 04 00 00 00    	add    esp,0x4
c001dafc:	0f a9                	pop    gs
c001dafe:	0f a1                	pop    fs
c001db00:	07                   	pop    es
c001db01:	1f                   	pop    ds
c001db02:	e8 92 2f ff ff       	call   c0010a99 <KiCheckSignalZ>
c001db07:	3d 00 00 00 00       	cmp    eax,0x0
c001db0c:	0f 84 c0 00 00 00    	je     c001dbd2 <skipSignals>
c001db12:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001db17:	61                   	popa   
c001db18:	53                   	push   ebx
c001db19:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001db1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001db22:	5b                   	pop    ebx
c001db23:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001db28:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001db2b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001db2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db31:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001db34:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001db37:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001db3a:	81 c4 08 00 00 00    	add    esp,0x8
c001db40:	5e                   	pop    esi
c001db41:	5b                   	pop    ebx
c001db42:	59                   	pop    ecx
c001db43:	5a                   	pop    edx
c001db44:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001db47:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001db4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001db4d:	52                   	push   edx
c001db4e:	51                   	push   ecx
c001db4f:	53                   	push   ebx
c001db50:	56                   	push   esi
c001db51:	81 ec 08 00 00 00    	sub    esp,0x8
c001db57:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001db5a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001db5d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001db60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db66:	60                   	pusha  
c001db67:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001db6d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001db70:	89 e3                	mov    ebx,esp
c001db72:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001db75:	52                   	push   edx
c001db76:	68 96 db 01 c0       	push   0xc001db96
c001db7b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001db7e:	89 dc                	mov    esp,ebx
c001db80:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001db83:	68 23 00 00 00       	push   0x23
c001db88:	51                   	push   ecx
c001db89:	68 02 02 00 00       	push   0x202
c001db8e:	68 1b 00 00 00       	push   0x1b
c001db93:	ff 36                	push   DWORD PTR [esi]
c001db95:	cf                   	iret   

c001db96 <finishSignal>:
c001db96:	cd 0f                	int    0xf

c001db98 <finishSignal2>:
c001db98:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001db9e:	e8 76 2f ff ff       	call   c0010b19 <KiFinishSignalZ>
c001dba3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001dba9:	68 23 00 00 00       	push   0x23
c001dbae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001dbb1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001dbb4:	68 1b 00 00 00       	push   0x1b
c001dbb9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001dbbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbbf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001dbc2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001dbc5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dbc8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001dbcb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001dbce:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001dbd1:	cf                   	iret   

c001dbd2 <skipSignals>:
c001dbd2:	61                   	popa   
c001dbd3:	81 c4 08 00 00 00    	add    esp,0x8
c001dbd9:	cf                   	iret   
c001dbda:	90                   	nop
c001dbdb:	90                   	nop

c001dbdc <irq16>:
c001dbdc:	fa                   	cli    
c001dbdd:	6a 00                	push   0x0
c001dbdf:	6a 30                	push   0x30
c001dbe1:	e9 c0 fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dbe6 <irq17>:
c001dbe6:	fa                   	cli    
c001dbe7:	6a 00                	push   0x0
c001dbe9:	6a 31                	push   0x31
c001dbeb:	e9 b6 fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dbf0 <irq18>:
c001dbf0:	fa                   	cli    
c001dbf1:	6a 00                	push   0x0
c001dbf3:	6a 32                	push   0x32
c001dbf5:	e9 ac fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dbfa <irq19>:
c001dbfa:	fa                   	cli    
c001dbfb:	6a 00                	push   0x0
c001dbfd:	6a 33                	push   0x33
c001dbff:	e9 a2 fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dc04 <irq20>:
c001dc04:	fa                   	cli    
c001dc05:	6a 00                	push   0x0
c001dc07:	6a 34                	push   0x34
c001dc09:	e9 98 fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dc0e <irq21>:
c001dc0e:	fa                   	cli    
c001dc0f:	6a 00                	push   0x0
c001dc11:	6a 35                	push   0x35
c001dc13:	e9 8e fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dc18 <irq22>:
c001dc18:	fa                   	cli    
c001dc19:	6a 00                	push   0x0
c001dc1b:	6a 36                	push   0x36
c001dc1d:	e9 84 fe ff ff       	jmp    c001daa6 <int_common_stub>

c001dc22 <irq23>:
c001dc22:	fa                   	cli    
c001dc23:	6a 00                	push   0x0
c001dc25:	6a 37                	push   0x37
c001dc27:	e9 7a fe ff ff       	jmp    c001daa6 <int_common_stub>
c001dc2c:	66 90                	xchg   ax,ax
c001dc2e:	66 90                	xchg   ax,ax

c001dc30 <i386GetRDRAND>:
c001dc30:	b9 64 00 00 00       	mov    ecx,0x64

c001dc35 <retry>:
c001dc35:	0f c7 f0             	rdrand eax
c001dc38:	72 05                	jb     c001dc3f <retry.done>
c001dc3a:	e2 f9                	loop   c001dc35 <retry>

c001dc3c <retry.fail>:
c001dc3c:	31 c0                	xor    eax,eax
c001dc3e:	c3                   	ret    

c001dc3f <retry.done>:
c001dc3f:	c3                   	ret    

c001dc40 <absolutelyNoChanceInHell>:
c001dc40:	b8 01 00 00 00       	mov    eax,0x1
c001dc45:	0f a2                	cpuid  
c001dc47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dc4d:	74 06                	je     c001dc55 <sseDetect.noSSE>
c001dc4f:	b8 01 00 00 00       	mov    eax,0x1
c001dc54:	c3                   	ret    

c001dc55 <sseDetect.noSSE>:
c001dc55:	31 c0                	xor    eax,eax
c001dc57:	c3                   	ret    

c001dc58 <sseSave>:
c001dc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc5c:	0f ae 00             	fxsave [eax]
c001dc5f:	c3                   	ret    

c001dc60 <sseLoad>:
c001dc60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc64:	0f ae 08             	fxrstor [eax]
c001dc67:	c3                   	ret    

c001dc68 <sseInit>:
c001dc68:	e8 42 00 00 00       	call   c001dcaf <x87Init>
c001dc6d:	0f 20 e0             	mov    eax,cr4
c001dc70:	66 0d 00 06          	or     ax,0x600
c001dc74:	0f 22 e0             	mov    cr4,eax
c001dc77:	c3                   	ret    

c001dc78 <sseClose>:
c001dc78:	c3                   	ret    
c001dc79:	66 90                	xchg   ax,ax
c001dc7b:	66 90                	xchg   ax,ax
c001dc7d:	66 90                	xchg   ax,ax
c001dc7f:	90                   	nop

c001dc80 <value_37F>:
c001dc80:	7f 03                	jg     c001dc85 <value_37A+0x1>

c001dc82 <value_37E>:
c001dc82:	7e 03                	jle    c001dc87 <x87Detect+0x1>

c001dc84 <value_37A>:
c001dc84:	7a 03                	jp     c001dc89 <x87Detect+0x3>

c001dc86 <x87Detect>:
c001dc86:	b8 01 00 00 00       	mov    eax,0x1
c001dc8b:	0f a2                	cpuid  
c001dc8d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dc93:	74 06                	je     c001dc9b <x87Detect.nox87>
c001dc95:	b8 01 00 00 00       	mov    eax,0x1
c001dc9a:	c3                   	ret    

c001dc9b <x87Detect.nox87>:
c001dc9b:	b8 00 00 00 00       	mov    eax,0x0
c001dca0:	c3                   	ret    

c001dca1 <x87Save>:
c001dca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dca5:	dd 30                	fnsave [eax]
c001dca7:	c3                   	ret    

c001dca8 <x87Load>:
c001dca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcac:	dd 20                	frstor [eax]
c001dcae:	c3                   	ret    

c001dcaf <x87Init>:
c001dcaf:	0f 20 c0             	mov    eax,cr0
c001dcb2:	66 25 fb ff          	and    ax,0xfffb
c001dcb6:	66 0d 22 00          	or     ax,0x22
c001dcba:	0f 22 c0             	mov    cr0,eax
c001dcbd:	db e3                	fninit 
c001dcbf:	0f 06                	clts   
c001dcc1:	d9 2d 84 dc 01 c0    	fldcw  WORD PTR ds:0xc001dc84
c001dcc7:	c3                   	ret    

c001dcc8 <x87Close>:
c001dcc8:	c3                   	ret    
c001dcc9:	66 90                	xchg   ax,ax
c001dccb:	90                   	nop

c001dccc <__do_global_ctors_aux>:
c001dccc:	a1 7c ec 01 c0       	mov    eax,ds:0xc001ec7c
c001dcd1:	83 f8 ff             	cmp    eax,0xffffffff
c001dcd4:	74 1a                	je     c001dcf0 <__do_global_ctors_aux+0x24>
c001dcd6:	55                   	push   ebp
c001dcd7:	89 e5                	mov    ebp,esp
c001dcd9:	53                   	push   ebx
c001dcda:	52                   	push   edx
c001dcdb:	bb 7c ec 01 c0       	mov    ebx,0xc001ec7c
c001dce0:	ff d0                	call   eax
c001dce2:	83 eb 04             	sub    ebx,0x4
c001dce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dce7:	83 f8 ff             	cmp    eax,0xffffffff
c001dcea:	75 f4                	jne    c001dce0 <__do_global_ctors_aux+0x14>
c001dcec:	58                   	pop    eax
c001dced:	5b                   	pop    ebx
c001dcee:	5d                   	pop    ebp
c001dcef:	c3                   	ret    
c001dcf0:	c3                   	ret    
c001dcf1:	66 90                	xchg   ax,ax
c001dcf3:	90                   	nop

c001dcf4 <__divdi3>:
c001dcf4:	55                   	push   ebp
c001dcf5:	57                   	push   edi
c001dcf6:	56                   	push   esi
c001dcf7:	53                   	push   ebx
c001dcf8:	83 ec 1c             	sub    esp,0x1c
c001dcfb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dcff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dd06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dd0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd0e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd12:	85 db                	test   ebx,ebx
c001dd14:	0f 88 8e 00 00 00    	js     c001dda8 <__divdi3+0xb4>
c001dd1a:	89 dd                	mov    ebp,ebx
c001dd1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dd24:	89 d3                	mov    ebx,edx
c001dd26:	85 d2                	test   edx,edx
c001dd28:	79 0d                	jns    c001dd37 <__divdi3+0x43>
c001dd2a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001dd2e:	f7 d8                	neg    eax
c001dd30:	83 d2 00             	adc    edx,0x0
c001dd33:	f7 da                	neg    edx
c001dd35:	89 d3                	mov    ebx,edx
c001dd37:	89 c7                	mov    edi,eax
c001dd39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dd3c:	85 db                	test   ebx,ebx
c001dd3e:	75 48                	jne    c001dd88 <__divdi3+0x94>
c001dd40:	39 ef                	cmp    edi,ebp
c001dd42:	76 24                	jbe    c001dd68 <__divdi3+0x74>
c001dd44:	89 ea                	mov    edx,ebp
c001dd46:	f7 f7                	div    edi
c001dd48:	89 c1                	mov    ecx,eax
c001dd4a:	31 f6                	xor    esi,esi
c001dd4c:	89 c8                	mov    eax,ecx
c001dd4e:	89 f2                	mov    edx,esi
c001dd50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd54:	85 c9                	test   ecx,ecx
c001dd56:	74 07                	je     c001dd5f <__divdi3+0x6b>
c001dd58:	f7 d8                	neg    eax
c001dd5a:	83 d2 00             	adc    edx,0x0
c001dd5d:	f7 da                	neg    edx
c001dd5f:	83 c4 1c             	add    esp,0x1c
c001dd62:	5b                   	pop    ebx
c001dd63:	5e                   	pop    esi
c001dd64:	5f                   	pop    edi
c001dd65:	5d                   	pop    ebp
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop
c001dd68:	85 ff                	test   edi,edi
c001dd6a:	75 0b                	jne    c001dd77 <__divdi3+0x83>
c001dd6c:	b8 01 00 00 00       	mov    eax,0x1
c001dd71:	31 d2                	xor    edx,edx
c001dd73:	f7 f3                	div    ebx
c001dd75:	89 c7                	mov    edi,eax
c001dd77:	31 d2                	xor    edx,edx
c001dd79:	89 e8                	mov    eax,ebp
c001dd7b:	f7 f7                	div    edi
c001dd7d:	89 c6                	mov    esi,eax
c001dd7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dd82:	f7 f7                	div    edi
c001dd84:	89 c1                	mov    ecx,eax
c001dd86:	eb c4                	jmp    c001dd4c <__divdi3+0x58>
c001dd88:	39 eb                	cmp    ebx,ebp
c001dd8a:	77 3c                	ja     c001ddc8 <__divdi3+0xd4>
c001dd8c:	0f bd f3             	bsr    esi,ebx
c001dd8f:	83 f6 1f             	xor    esi,0x1f
c001dd92:	75 40                	jne    c001ddd4 <__divdi3+0xe0>
c001dd94:	39 eb                	cmp    ebx,ebp
c001dd96:	72 09                	jb     c001dda1 <__divdi3+0xad>
c001dd98:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dd9b:	0f 87 97 00 00 00    	ja     c001de38 <__divdi3+0x144>
c001dda1:	b9 01 00 00 00       	mov    ecx,0x1
c001dda6:	eb a4                	jmp    c001dd4c <__divdi3+0x58>
c001dda8:	f7 d9                	neg    ecx
c001ddaa:	83 d3 00             	adc    ebx,0x0
c001ddad:	f7 db                	neg    ebx
c001ddaf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ddb2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ddb6:	89 dd                	mov    ebp,ebx
c001ddb8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ddc0:	e9 5f ff ff ff       	jmp    c001dd24 <__divdi3+0x30>
c001ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c001ddc8:	31 f6                	xor    esi,esi
c001ddca:	31 c9                	xor    ecx,ecx
c001ddcc:	e9 7b ff ff ff       	jmp    c001dd4c <__divdi3+0x58>
c001ddd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ddd4:	b8 20 00 00 00       	mov    eax,0x20
c001ddd9:	29 f0                	sub    eax,esi
c001dddb:	89 f1                	mov    ecx,esi
c001dddd:	d3 e3                	shl    ebx,cl
c001dddf:	89 fa                	mov    edx,edi
c001dde1:	88 c1                	mov    cl,al
c001dde3:	d3 ea                	shr    edx,cl
c001dde5:	09 da                	or     edx,ebx
c001dde7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ddeb:	89 f1                	mov    ecx,esi
c001dded:	d3 e7                	shl    edi,cl
c001ddef:	89 eb                	mov    ebx,ebp
c001ddf1:	88 c1                	mov    cl,al
c001ddf3:	d3 eb                	shr    ebx,cl
c001ddf5:	89 f1                	mov    ecx,esi
c001ddf7:	d3 e5                	shl    ebp,cl
c001ddf9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ddfc:	88 c1                	mov    cl,al
c001ddfe:	d3 ea                	shr    edx,cl
c001de00:	09 d5                	or     ebp,edx
c001de02:	89 e8                	mov    eax,ebp
c001de04:	89 da                	mov    edx,ebx
c001de06:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001de0a:	89 d3                	mov    ebx,edx
c001de0c:	89 c5                	mov    ebp,eax
c001de0e:	f7 e7                	mul    edi
c001de10:	39 d3                	cmp    ebx,edx
c001de12:	72 18                	jb     c001de2c <__divdi3+0x138>
c001de14:	74 0a                	je     c001de20 <__divdi3+0x12c>
c001de16:	89 e9                	mov    ecx,ebp
c001de18:	31 f6                	xor    esi,esi
c001de1a:	e9 2d ff ff ff       	jmp    c001dd4c <__divdi3+0x58>
c001de1f:	90                   	nop
c001de20:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001de23:	89 f1                	mov    ecx,esi
c001de25:	d3 e7                	shl    edi,cl
c001de27:	39 c7                	cmp    edi,eax
c001de29:	73 eb                	jae    c001de16 <__divdi3+0x122>
c001de2b:	90                   	nop
c001de2c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001de2f:	31 f6                	xor    esi,esi
c001de31:	e9 16 ff ff ff       	jmp    c001dd4c <__divdi3+0x58>
c001de36:	66 90                	xchg   ax,ax
c001de38:	31 c9                	xor    ecx,ecx
c001de3a:	e9 0d ff ff ff       	jmp    c001dd4c <__divdi3+0x58>
c001de3f:	90                   	nop

c001de40 <__moddi3>:
c001de40:	55                   	push   ebp
c001de41:	57                   	push   edi
c001de42:	56                   	push   esi
c001de43:	53                   	push   ebx
c001de44:	83 ec 2c             	sub    esp,0x2c
c001de47:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001de4b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001de4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001de53:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001de57:	85 db                	test   ebx,ebx
c001de59:	0f 88 85 00 00 00    	js     c001dee4 <__moddi3+0xa4>
c001de5f:	89 de                	mov    esi,ebx
c001de61:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001de69:	89 d7                	mov    edi,edx
c001de6b:	85 d2                	test   edx,edx
c001de6d:	79 09                	jns    c001de78 <__moddi3+0x38>
c001de6f:	f7 d8                	neg    eax
c001de71:	83 d2 00             	adc    edx,0x0
c001de74:	f7 da                	neg    edx
c001de76:	89 d7                	mov    edi,edx
c001de78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de7c:	89 cd                	mov    ebp,ecx
c001de7e:	85 ff                	test   edi,edi
c001de80:	75 52                	jne    c001ded4 <__moddi3+0x94>
c001de82:	89 c3                	mov    ebx,eax
c001de84:	39 f0                	cmp    eax,esi
c001de86:	76 24                	jbe    c001deac <__moddi3+0x6c>
c001de88:	89 c8                	mov    eax,ecx
c001de8a:	89 f2                	mov    edx,esi
c001de8c:	f7 f3                	div    ebx
c001de8e:	89 d6                	mov    esi,edx
c001de90:	89 f0                	mov    eax,esi
c001de92:	31 d2                	xor    edx,edx
c001de94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de98:	85 c9                	test   ecx,ecx
c001de9a:	74 07                	je     c001dea3 <__moddi3+0x63>
c001de9c:	f7 d8                	neg    eax
c001de9e:	83 d2 00             	adc    edx,0x0
c001dea1:	f7 da                	neg    edx
c001dea3:	83 c4 2c             	add    esp,0x2c
c001dea6:	5b                   	pop    ebx
c001dea7:	5e                   	pop    esi
c001dea8:	5f                   	pop    edi
c001dea9:	5d                   	pop    ebp
c001deaa:	c3                   	ret    
c001deab:	90                   	nop
c001deac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001deb0:	85 db                	test   ebx,ebx
c001deb2:	75 0d                	jne    c001dec1 <__moddi3+0x81>
c001deb4:	b8 01 00 00 00       	mov    eax,0x1
c001deb9:	31 d2                	xor    edx,edx
c001debb:	f7 f7                	div    edi
c001debd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dec1:	89 f0                	mov    eax,esi
c001dec3:	31 d2                	xor    edx,edx
c001dec5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dec9:	f7 f7                	div    edi
c001decb:	89 e8                	mov    eax,ebp
c001decd:	f7 f7                	div    edi
c001decf:	89 d6                	mov    esi,edx
c001ded1:	eb bd                	jmp    c001de90 <__moddi3+0x50>
c001ded3:	90                   	nop
c001ded4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ded8:	39 f7                	cmp    edi,esi
c001deda:	76 20                	jbe    c001defc <__moddi3+0xbc>
c001dedc:	89 c8                	mov    eax,ecx
c001dede:	89 f2                	mov    edx,esi
c001dee0:	eb b2                	jmp    c001de94 <__moddi3+0x54>
c001dee2:	66 90                	xchg   ax,ax
c001dee4:	f7 d9                	neg    ecx
c001dee6:	83 d3 00             	adc    ebx,0x0
c001dee9:	f7 db                	neg    ebx
c001deeb:	89 de                	mov    esi,ebx
c001deed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001def5:	e9 6f ff ff ff       	jmp    c001de69 <__moddi3+0x29>
c001defa:	66 90                	xchg   ax,ax
c001defc:	0f bd c7             	bsr    eax,edi
c001deff:	83 f0 1f             	xor    eax,0x1f
c001df02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df06:	75 24                	jne    c001df2c <__moddi3+0xec>
c001df08:	39 f7                	cmp    edi,esi
c001df0a:	72 06                	jb     c001df12 <__moddi3+0xd2>
c001df0c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001df10:	77 0c                	ja     c001df1e <__moddi3+0xde>
c001df12:	89 e9                	mov    ecx,ebp
c001df14:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001df18:	19 fe                	sbb    esi,edi
c001df1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001df1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df22:	89 f2                	mov    edx,esi
c001df24:	e9 6b ff ff ff       	jmp    c001de94 <__moddi3+0x54>
c001df29:	8d 76 00             	lea    esi,[esi+0x0]
c001df2c:	b8 20 00 00 00       	mov    eax,0x20
c001df31:	89 c2                	mov    edx,eax
c001df33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df37:	29 da                	sub    edx,ebx
c001df39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001df3d:	88 d9                	mov    cl,bl
c001df3f:	d3 e7                	shl    edi,cl
c001df41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df45:	88 d1                	mov    cl,dl
c001df47:	d3 e8                	shr    eax,cl
c001df49:	09 c7                	or     edi,eax
c001df4b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001df4f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001df53:	89 d8                	mov    eax,ebx
c001df55:	88 d9                	mov    cl,bl
c001df57:	d3 e7                	shl    edi,cl
c001df59:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001df5d:	89 f3                	mov    ebx,esi
c001df5f:	88 d1                	mov    cl,dl
c001df61:	d3 eb                	shr    ebx,cl
c001df63:	89 c7                	mov    edi,eax
c001df65:	88 c1                	mov    cl,al
c001df67:	d3 e6                	shl    esi,cl
c001df69:	89 e8                	mov    eax,ebp
c001df6b:	88 d1                	mov    cl,dl
c001df6d:	d3 e8                	shr    eax,cl
c001df6f:	09 f0                	or     eax,esi
c001df71:	89 f9                	mov    ecx,edi
c001df73:	d3 e5                	shl    ebp,cl
c001df75:	89 da                	mov    edx,ebx
c001df77:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001df7b:	89 d3                	mov    ebx,edx
c001df7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001df81:	89 c6                	mov    esi,eax
c001df83:	89 d1                	mov    ecx,edx
c001df85:	39 d3                	cmp    ebx,edx
c001df87:	72 27                	jb     c001dfb0 <__moddi3+0x170>
c001df89:	74 21                	je     c001dfac <__moddi3+0x16c>
c001df8b:	29 f5                	sub    ebp,esi
c001df8d:	19 cb                	sbb    ebx,ecx
c001df8f:	89 de                	mov    esi,ebx
c001df91:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001df95:	d3 e6                	shl    esi,cl
c001df97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001df9b:	89 f9                	mov    ecx,edi
c001df9d:	d3 ed                	shr    ebp,cl
c001df9f:	09 ee                	or     esi,ebp
c001dfa1:	89 f0                	mov    eax,esi
c001dfa3:	d3 eb                	shr    ebx,cl
c001dfa5:	89 da                	mov    edx,ebx
c001dfa7:	e9 e8 fe ff ff       	jmp    c001de94 <__moddi3+0x54>
c001dfac:	39 c5                	cmp    ebp,eax
c001dfae:	73 db                	jae    c001df8b <__moddi3+0x14b>
c001dfb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dfb4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001dfb8:	89 d1                	mov    ecx,edx
c001dfba:	89 c6                	mov    esi,eax
c001dfbc:	eb cd                	jmp    c001df8b <__moddi3+0x14b>
c001dfbe:	66 90                	xchg   ax,ax

c001dfc0 <__udivdi3>:
c001dfc0:	55                   	push   ebp
c001dfc1:	57                   	push   edi
c001dfc2:	56                   	push   esi
c001dfc3:	53                   	push   ebx
c001dfc4:	83 ec 1c             	sub    esp,0x1c
c001dfc7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dfcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dfcf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dfd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfd7:	85 d2                	test   edx,edx
c001dfd9:	75 41                	jne    c001e01c <__udivdi3+0x5c>
c001dfdb:	39 f7                	cmp    edi,esi
c001dfdd:	76 15                	jbe    c001dff4 <__udivdi3+0x34>
c001dfdf:	89 e8                	mov    eax,ebp
c001dfe1:	89 f2                	mov    edx,esi
c001dfe3:	f7 f7                	div    edi
c001dfe5:	31 db                	xor    ebx,ebx
c001dfe7:	89 da                	mov    edx,ebx
c001dfe9:	83 c4 1c             	add    esp,0x1c
c001dfec:	5b                   	pop    ebx
c001dfed:	5e                   	pop    esi
c001dfee:	5f                   	pop    edi
c001dfef:	5d                   	pop    ebp
c001dff0:	c3                   	ret    
c001dff1:	8d 76 00             	lea    esi,[esi+0x0]
c001dff4:	89 f9                	mov    ecx,edi
c001dff6:	85 ff                	test   edi,edi
c001dff8:	75 0b                	jne    c001e005 <__udivdi3+0x45>
c001dffa:	b8 01 00 00 00       	mov    eax,0x1
c001dfff:	31 d2                	xor    edx,edx
c001e001:	f7 f7                	div    edi
c001e003:	89 c1                	mov    ecx,eax
c001e005:	31 d2                	xor    edx,edx
c001e007:	89 f0                	mov    eax,esi
c001e009:	f7 f1                	div    ecx
c001e00b:	89 c3                	mov    ebx,eax
c001e00d:	89 e8                	mov    eax,ebp
c001e00f:	f7 f1                	div    ecx
c001e011:	89 da                	mov    edx,ebx
c001e013:	83 c4 1c             	add    esp,0x1c
c001e016:	5b                   	pop    ebx
c001e017:	5e                   	pop    esi
c001e018:	5f                   	pop    edi
c001e019:	5d                   	pop    ebp
c001e01a:	c3                   	ret    
c001e01b:	90                   	nop
c001e01c:	39 f2                	cmp    edx,esi
c001e01e:	77 1c                	ja     c001e03c <__udivdi3+0x7c>
c001e020:	0f bd da             	bsr    ebx,edx
c001e023:	83 f3 1f             	xor    ebx,0x1f
c001e026:	75 24                	jne    c001e04c <__udivdi3+0x8c>
c001e028:	39 f2                	cmp    edx,esi
c001e02a:	72 08                	jb     c001e034 <__udivdi3+0x74>
c001e02c:	39 ef                	cmp    edi,ebp
c001e02e:	0f 87 84 00 00 00    	ja     c001e0b8 <__udivdi3+0xf8>
c001e034:	b8 01 00 00 00       	mov    eax,0x1
c001e039:	eb ac                	jmp    c001dfe7 <__udivdi3+0x27>
c001e03b:	90                   	nop
c001e03c:	31 db                	xor    ebx,ebx
c001e03e:	31 c0                	xor    eax,eax
c001e040:	89 da                	mov    edx,ebx
c001e042:	83 c4 1c             	add    esp,0x1c
c001e045:	5b                   	pop    ebx
c001e046:	5e                   	pop    esi
c001e047:	5f                   	pop    edi
c001e048:	5d                   	pop    ebp
c001e049:	c3                   	ret    
c001e04a:	66 90                	xchg   ax,ax
c001e04c:	b8 20 00 00 00       	mov    eax,0x20
c001e051:	29 d8                	sub    eax,ebx
c001e053:	88 d9                	mov    cl,bl
c001e055:	d3 e2                	shl    edx,cl
c001e057:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e05b:	89 fa                	mov    edx,edi
c001e05d:	88 c1                	mov    cl,al
c001e05f:	d3 ea                	shr    edx,cl
c001e061:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e065:	09 d1                	or     ecx,edx
c001e067:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e06b:	88 d9                	mov    cl,bl
c001e06d:	d3 e7                	shl    edi,cl
c001e06f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e073:	89 f7                	mov    edi,esi
c001e075:	88 c1                	mov    cl,al
c001e077:	d3 ef                	shr    edi,cl
c001e079:	88 d9                	mov    cl,bl
c001e07b:	d3 e6                	shl    esi,cl
c001e07d:	89 ea                	mov    edx,ebp
c001e07f:	88 c1                	mov    cl,al
c001e081:	d3 ea                	shr    edx,cl
c001e083:	09 d6                	or     esi,edx
c001e085:	89 f0                	mov    eax,esi
c001e087:	89 fa                	mov    edx,edi
c001e089:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e08d:	89 d7                	mov    edi,edx
c001e08f:	89 c6                	mov    esi,eax
c001e091:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e095:	39 d7                	cmp    edi,edx
c001e097:	72 13                	jb     c001e0ac <__udivdi3+0xec>
c001e099:	74 09                	je     c001e0a4 <__udivdi3+0xe4>
c001e09b:	89 f0                	mov    eax,esi
c001e09d:	31 db                	xor    ebx,ebx
c001e09f:	e9 43 ff ff ff       	jmp    c001dfe7 <__udivdi3+0x27>
c001e0a4:	88 d9                	mov    cl,bl
c001e0a6:	d3 e5                	shl    ebp,cl
c001e0a8:	39 c5                	cmp    ebp,eax
c001e0aa:	73 ef                	jae    c001e09b <__udivdi3+0xdb>
c001e0ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001e0af:	31 db                	xor    ebx,ebx
c001e0b1:	e9 31 ff ff ff       	jmp    c001dfe7 <__udivdi3+0x27>
c001e0b6:	66 90                	xchg   ax,ax
c001e0b8:	31 c0                	xor    eax,eax
c001e0ba:	e9 28 ff ff ff       	jmp    c001dfe7 <__udivdi3+0x27>
c001e0bf:	90                   	nop

c001e0c0 <__umoddi3>:
c001e0c0:	55                   	push   ebp
c001e0c1:	57                   	push   edi
c001e0c2:	56                   	push   esi
c001e0c3:	53                   	push   ebx
c001e0c4:	83 ec 1c             	sub    esp,0x1c
c001e0c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e0cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e0d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0d7:	89 da                	mov    edx,ebx
c001e0d9:	85 c0                	test   eax,eax
c001e0db:	75 37                	jne    c001e114 <__umoddi3+0x54>
c001e0dd:	39 df                	cmp    edi,ebx
c001e0df:	76 13                	jbe    c001e0f4 <__umoddi3+0x34>
c001e0e1:	89 f0                	mov    eax,esi
c001e0e3:	f7 f7                	div    edi
c001e0e5:	89 d0                	mov    eax,edx
c001e0e7:	31 d2                	xor    edx,edx
c001e0e9:	83 c4 1c             	add    esp,0x1c
c001e0ec:	5b                   	pop    ebx
c001e0ed:	5e                   	pop    esi
c001e0ee:	5f                   	pop    edi
c001e0ef:	5d                   	pop    ebp
c001e0f0:	c3                   	ret    
c001e0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0f4:	89 fd                	mov    ebp,edi
c001e0f6:	85 ff                	test   edi,edi
c001e0f8:	75 0b                	jne    c001e105 <__umoddi3+0x45>
c001e0fa:	b8 01 00 00 00       	mov    eax,0x1
c001e0ff:	31 d2                	xor    edx,edx
c001e101:	f7 f7                	div    edi
c001e103:	89 c5                	mov    ebp,eax
c001e105:	89 d8                	mov    eax,ebx
c001e107:	31 d2                	xor    edx,edx
c001e109:	f7 f5                	div    ebp
c001e10b:	89 f0                	mov    eax,esi
c001e10d:	f7 f5                	div    ebp
c001e10f:	89 d0                	mov    eax,edx
c001e111:	eb d4                	jmp    c001e0e7 <__umoddi3+0x27>
c001e113:	90                   	nop
c001e114:	89 f1                	mov    ecx,esi
c001e116:	39 d8                	cmp    eax,ebx
c001e118:	76 0a                	jbe    c001e124 <__umoddi3+0x64>
c001e11a:	89 f0                	mov    eax,esi
c001e11c:	83 c4 1c             	add    esp,0x1c
c001e11f:	5b                   	pop    ebx
c001e120:	5e                   	pop    esi
c001e121:	5f                   	pop    edi
c001e122:	5d                   	pop    ebp
c001e123:	c3                   	ret    
c001e124:	0f bd e8             	bsr    ebp,eax
c001e127:	83 f5 1f             	xor    ebp,0x1f
c001e12a:	75 1c                	jne    c001e148 <__umoddi3+0x88>
c001e12c:	39 d8                	cmp    eax,ebx
c001e12e:	72 04                	jb     c001e134 <__umoddi3+0x74>
c001e130:	39 f7                	cmp    edi,esi
c001e132:	77 08                	ja     c001e13c <__umoddi3+0x7c>
c001e134:	89 da                	mov    edx,ebx
c001e136:	29 fe                	sub    esi,edi
c001e138:	19 c2                	sbb    edx,eax
c001e13a:	89 f1                	mov    ecx,esi
c001e13c:	89 c8                	mov    eax,ecx
c001e13e:	83 c4 1c             	add    esp,0x1c
c001e141:	5b                   	pop    ebx
c001e142:	5e                   	pop    esi
c001e143:	5f                   	pop    edi
c001e144:	5d                   	pop    ebp
c001e145:	c3                   	ret    
c001e146:	66 90                	xchg   ax,ax
c001e148:	ba 20 00 00 00       	mov    edx,0x20
c001e14d:	29 ea                	sub    edx,ebp
c001e14f:	89 e9                	mov    ecx,ebp
c001e151:	d3 e0                	shl    eax,cl
c001e153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e157:	89 f8                	mov    eax,edi
c001e159:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e15d:	88 d1                	mov    cl,dl
c001e15f:	d3 e8                	shr    eax,cl
c001e161:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e165:	09 c1                	or     ecx,eax
c001e167:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e16b:	89 e9                	mov    ecx,ebp
c001e16d:	d3 e7                	shl    edi,cl
c001e16f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e173:	89 d8                	mov    eax,ebx
c001e175:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e179:	88 d1                	mov    cl,dl
c001e17b:	d3 e8                	shr    eax,cl
c001e17d:	89 c7                	mov    edi,eax
c001e17f:	89 e9                	mov    ecx,ebp
c001e181:	d3 e3                	shl    ebx,cl
c001e183:	89 f0                	mov    eax,esi
c001e185:	88 d1                	mov    cl,dl
c001e187:	d3 e8                	shr    eax,cl
c001e189:	09 d8                	or     eax,ebx
c001e18b:	89 e9                	mov    ecx,ebp
c001e18d:	d3 e6                	shl    esi,cl
c001e18f:	89 f3                	mov    ebx,esi
c001e191:	89 fa                	mov    edx,edi
c001e193:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e197:	89 d1                	mov    ecx,edx
c001e199:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e19d:	89 c6                	mov    esi,eax
c001e19f:	89 d7                	mov    edi,edx
c001e1a1:	39 d1                	cmp    ecx,edx
c001e1a3:	72 27                	jb     c001e1cc <__umoddi3+0x10c>
c001e1a5:	74 21                	je     c001e1c8 <__umoddi3+0x108>
c001e1a7:	89 ca                	mov    edx,ecx
c001e1a9:	29 f3                	sub    ebx,esi
c001e1ab:	19 fa                	sbb    edx,edi
c001e1ad:	89 d0                	mov    eax,edx
c001e1af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e1b3:	d3 e0                	shl    eax,cl
c001e1b5:	89 e9                	mov    ecx,ebp
c001e1b7:	d3 eb                	shr    ebx,cl
c001e1b9:	09 d8                	or     eax,ebx
c001e1bb:	d3 ea                	shr    edx,cl
c001e1bd:	83 c4 1c             	add    esp,0x1c
c001e1c0:	5b                   	pop    ebx
c001e1c1:	5e                   	pop    esi
c001e1c2:	5f                   	pop    edi
c001e1c3:	5d                   	pop    ebp
c001e1c4:	c3                   	ret    
c001e1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001e1c8:	39 c3                	cmp    ebx,eax
c001e1ca:	73 db                	jae    c001e1a7 <__umoddi3+0xe7>
c001e1cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e1d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e1d4:	89 d7                	mov    edi,edx
c001e1d6:	89 c6                	mov    esi,eax
c001e1d8:	eb cd                	jmp    c001e1a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e1da <_init>:
c001e1da:	55                   	push   ebp
c001e1db:	89 e5                	mov    ebp,esp
c001e1dd:	e8 12 1f fe ff       	call   c00000f4 <frame_dummy>
c001e1e2:	e8 e5 fa ff ff       	call   c001dccc <__do_global_ctors_aux>
c001e1e7:	5d                   	pop    ebp
c001e1e8:	c3                   	ret    

Disassembly of section .fini:

c001e1e9 <_fini>:
c001e1e9:	55                   	push   ebp
c001e1ea:	89 e5                	mov    ebp,esp
c001e1ec:	e8 93 1e fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e1f1:	5d                   	pop    ebp
c001e1f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e1f4 <Computer::~Computer()>:
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	ba 14 f5 01 c0       	mov    edx,0xc001f514
c001e1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e200:	89 10                	mov    DWORD PTR [eax],edx
c001e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	50                   	push   eax
c001e20a:	e8 ab d7 fe ff       	call   c000b9ba <Device::~Device()>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	90                   	nop
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e218 <Computer::~Computer()>:
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e222:	e8 cd ff ff ff       	call   c001e1f4 <Computer::~Computer()>
c001e227:	83 c4 10             	add    esp,0x10
c001e22a:	83 ec 08             	sub    esp,0x8
c001e22d:	68 70 01 00 00       	push   0x170
c001e232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e236:	e8 39 c3 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	83 c4 0c             	add    esp,0xc
c001e241:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e242 <idleCommon()>:
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	fa                   	cli    
c001e246:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001e24c:	e8 6f 6a ff ff       	call   c0014cc0 <schedule()>
c001e251:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001e256:	48                   	dec    eax
c001e257:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001e25c:	75 01                	jne    c001e25f <idleCommon()+0x1d>
c001e25e:	fb                   	sti    
c001e25f:	83 c4 0c             	add    esp,0xc
c001e262:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e264 <LinkedList<UnixFile>::~LinkedList()>:
c001e264:	90                   	nop
c001e265:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e266 <LinkedList<UnixFile>::LinkedList()>:
c001e266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e26a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e274:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e27b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e28a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e294:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e29b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e2a6:	90                   	nop
c001e2a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e2a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e2b0:	75 10                	jne    c001e2c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e2b2:	83 ec 0c             	sub    esp,0xc
c001e2b5:	68 50 f7 01 c0       	push   0xc001f750
c001e2ba:	e8 fe 21 ff ff       	call   c00104bd <KePanic(char const*)>
c001e2bf:	83 c4 10             	add    esp,0x10
c001e2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2c8:	85 c0                	test   eax,eax
c001e2ca:	74 34                	je     c001e300 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2d3:	85 c0                	test   eax,eax
c001e2d5:	74 29                	je     c001e300 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e2fe:	eb 65                	jmp    c001e365 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e304:	8b 00                	mov    eax,DWORD PTR [eax]
c001e306:	85 c0                	test   eax,eax
c001e308:	75 4b                	jne    c001e355 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e311:	85 c0                	test   eax,eax
c001e313:	75 40                	jne    c001e355 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e319:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e31d:	89 10                	mov    DWORD PTR [eax],edx
c001e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e323:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e327:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e331:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e33f:	85 c0                	test   eax,eax
c001e341:	74 22                	je     c001e365 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e343:	83 ec 0c             	sub    esp,0xc
c001e346:	68 72 f7 01 c0       	push   0xc001f772
c001e34b:	e8 6d 21 ff ff       	call   c00104bd <KePanic(char const*)>
c001e350:	83 c4 10             	add    esp,0x10
c001e353:	eb 10                	jmp    c001e365 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e355:	83 ec 0c             	sub    esp,0xc
c001e358:	68 7c f7 01 c0       	push   0xc001f77c
c001e35d:	e8 5b 21 ff ff       	call   c00104bd <KePanic(char const*)>
c001e362:	83 c4 10             	add    esp,0x10
c001e365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e369:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e36c:	8d 50 01             	lea    edx,[eax+0x1]
c001e36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e373:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e376:	90                   	nop
c001e377:	83 c4 0c             	add    esp,0xc
c001e37a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e37c <LinkedList<UnixFile>::getFirstElement()>:
c001e37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e380:	8b 00                	mov    eax,DWORD PTR [eax]
c001e382:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e384 <LinkedList<UnixFile>::removeFirst()>:
c001e384:	83 ec 0c             	sub    esp,0xc
c001e387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e38d:	85 c0                	test   eax,eax
c001e38f:	75 12                	jne    c001e3a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e391:	83 ec 0c             	sub    esp,0xc
c001e394:	68 88 f7 01 c0       	push   0xc001f788
c001e399:	e8 1f 21 ff ff       	call   c00104bd <KePanic(char const*)>
c001e39e:	83 c4 10             	add    esp,0x10
c001e3a1:	eb 7e                	jmp    c001e421 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3ad:	85 c0                	test   eax,eax
c001e3af:	74 10                	je     c001e3c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e3b1:	83 ec 0c             	sub    esp,0xc
c001e3b4:	68 d3 f7 01 c0       	push   0xc001f7d3
c001e3b9:	e8 ff 20 ff ff       	call   c00104bd <KePanic(char const*)>
c001e3be:	83 c4 10             	add    esp,0x10
c001e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3ca:	85 c0                	test   eax,eax
c001e3cc:	75 33                	jne    c001e401 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3ea:	83 f8 01             	cmp    eax,0x1
c001e3ed:	74 21                	je     c001e410 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e3ef:	83 ec 0c             	sub    esp,0xc
c001e3f2:	68 ac f7 01 c0       	push   0xc001f7ac
c001e3f7:	e8 c1 20 ff ff       	call   c00104bd <KePanic(char const*)>
c001e3fc:	83 c4 10             	add    esp,0x10
c001e3ff:	eb 0f                	jmp    c001e410 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e405:	8b 00                	mov    eax,DWORD PTR [eax]
c001e407:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40e:	89 10                	mov    DWORD PTR [eax],edx
c001e410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e414:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e417:	8d 50 ff             	lea    edx,[eax-0x1]
c001e41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e421:	83 c4 0c             	add    esp,0xc
c001e424:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e426 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e42a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e42d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e42e <DriverlessDevice::~DriverlessDevice()>:
c001e42e:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c001e433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e437:	89 10                	mov    DWORD PTR [eax],edx
c001e439:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e43d:	50                   	push   eax
c001e43e:	e8 77 d5 fe ff       	call   c000b9ba <Device::~Device()>
c001e443:	83 c4 04             	add    esp,0x4
c001e446:	90                   	nop
c001e447:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e448 <DriverlessDevice::~DriverlessDevice()>:
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	83 ec 0c             	sub    esp,0xc
c001e44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e452:	e8 d7 ff ff ff       	call   c001e42e <DriverlessDevice::~DriverlessDevice()>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	83 ec 08             	sub    esp,0x8
c001e45d:	68 58 01 00 00       	push   0x158
c001e462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e466:	e8 09 c1 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e46b:	83 c4 10             	add    esp,0x10
c001e46e:	83 c4 0c             	add    esp,0xc
c001e471:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e472 <LinkedList<Device>::addElement(Device*)>:
c001e472:	83 ec 0c             	sub    esp,0xc
c001e475:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e47a:	75 10                	jne    c001e48c <LinkedList<Device>::addElement(Device*)+0x1a>
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	68 50 f7 01 c0       	push   0xc001f750
c001e484:	e8 34 20 ff ff       	call   c00104bd <KePanic(char const*)>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e490:	8b 00                	mov    eax,DWORD PTR [eax]
c001e492:	85 c0                	test   eax,eax
c001e494:	74 3a                	je     c001e4d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e49d:	85 c0                	test   eax,eax
c001e49f:	74 2f                	je     c001e4d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e4ce:	eb 68                	jmp    c001e538 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4d6:	85 c0                	test   eax,eax
c001e4d8:	75 4e                	jne    c001e528 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4e1:	85 c0                	test   eax,eax
c001e4e3:	75 43                	jne    c001e528 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4ed:	89 10                	mov    DWORD PTR [eax],edx
c001e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e501:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e512:	85 c0                	test   eax,eax
c001e514:	74 22                	je     c001e538 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e516:	83 ec 0c             	sub    esp,0xc
c001e519:	68 72 f7 01 c0       	push   0xc001f772
c001e51e:	e8 9a 1f ff ff       	call   c00104bd <KePanic(char const*)>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	eb 10                	jmp    c001e538 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e528:	83 ec 0c             	sub    esp,0xc
c001e52b:	68 7c f7 01 c0       	push   0xc001f77c
c001e530:	e8 88 1f ff ff       	call   c00104bd <KePanic(char const*)>
c001e535:	83 c4 10             	add    esp,0x10
c001e538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e53c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e53f:	8d 50 01             	lea    edx,[eax+0x1]
c001e542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e546:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e549:	90                   	nop
c001e54a:	83 c4 0c             	add    esp,0xc
c001e54d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e54e <LinkedList<Device>::LinkedList()>:
c001e54e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e55c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e567:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e572:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e57c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e587:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e58e:	90                   	nop
c001e58f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e590 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e594:	8b 00                	mov    eax,DWORD PTR [eax]
c001e596:	85 c0                	test   eax,eax
c001e598:	75 0e                	jne    c001e5a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e59a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5a1:	85 c0                	test   eax,eax
c001e5a3:	75 03                	jne    c001e5a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e5a5:	b0 01                	mov    al,0x1
c001e5a7:	c3                   	ret    
c001e5a8:	b0 00                	mov    al,0x0
c001e5aa:	90                   	nop
c001e5ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e5ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e5b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5bd:	85 c0                	test   eax,eax
c001e5bf:	75 17                	jne    c001e5d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e5c1:	83 ec 0c             	sub    esp,0xc
c001e5c4:	68 88 f7 01 c0       	push   0xc001f788
c001e5c9:	e8 ef 1e ff ff       	call   c00104bd <KePanic(char const*)>
c001e5ce:	83 c4 10             	add    esp,0x10
c001e5d1:	e9 92 00 00 00       	jmp    c001e668 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e5d6:	66 90                	xchg   ax,ax
c001e5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e5e2:	85 c0                	test   eax,eax
c001e5e4:	0f 95 c0             	setne  al
c001e5e7:	84 c0                	test   al,al
c001e5e9:	74 11                	je     c001e5fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e5eb:	83 ec 0c             	sub    esp,0xc
c001e5ee:	68 d3 f7 01 c0       	push   0xc001f7d3
c001e5f3:	e8 c5 1e ff ff       	call   c00104bd <KePanic(char const*)>
c001e5f8:	83 c4 10             	add    esp,0x10
c001e5fb:	90                   	nop
c001e5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e600:	8b 00                	mov    eax,DWORD PTR [eax]
c001e602:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e605:	85 c0                	test   eax,eax
c001e607:	0f 94 c0             	sete   al
c001e60a:	84 c0                	test   al,al
c001e60c:	74 36                	je     c001e644 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e61c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e62a:	83 f8 01             	cmp    eax,0x1
c001e62d:	74 25                	je     c001e654 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e62f:	83 ec 0c             	sub    esp,0xc
c001e632:	68 ac f7 01 c0       	push   0xc001f7ac
c001e637:	e8 81 1e ff ff       	call   c00104bd <KePanic(char const*)>
c001e63c:	83 c4 10             	add    esp,0x10
c001e63f:	eb 13                	jmp    c001e654 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e641:	8d 76 00             	lea    esi,[esi+0x0]
c001e644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e648:	8b 00                	mov    eax,DWORD PTR [eax]
c001e64a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e651:	89 10                	mov    DWORD PTR [eax],edx
c001e653:	90                   	nop
c001e654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e65b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e665:	8d 76 00             	lea    esi,[esi+0x0]
c001e668:	83 c4 0c             	add    esp,0xc
c001e66b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e674:	75 12                	jne    c001e688 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	68 50 f7 01 c0       	push   0xc001f750
c001e67e:	e8 3a 1e ff ff       	call   c00104bd <KePanic(char const*)>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	66 90                	xchg   ax,ax
c001e688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e68c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e68e:	85 c0                	test   eax,eax
c001e690:	74 36                	je     c001e6c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e699:	85 c0                	test   eax,eax
c001e69b:	74 2b                	je     c001e6c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e6c4:	eb 6a                	jmp    c001e730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e6c6:	66 90                	xchg   ax,ax
c001e6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ce:	85 c0                	test   eax,eax
c001e6d0:	75 4e                	jne    c001e720 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6d9:	85 c0                	test   eax,eax
c001e6db:	75 43                	jne    c001e720 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6e5:	89 10                	mov    DWORD PTR [eax],edx
c001e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e707:	85 c0                	test   eax,eax
c001e709:	74 25                	je     c001e730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e70b:	83 ec 0c             	sub    esp,0xc
c001e70e:	68 72 f7 01 c0       	push   0xc001f772
c001e713:	e8 a5 1d ff ff       	call   c00104bd <KePanic(char const*)>
c001e718:	83 c4 10             	add    esp,0x10
c001e71b:	eb 13                	jmp    c001e730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e71d:	8d 76 00             	lea    esi,[esi+0x0]
c001e720:	83 ec 0c             	sub    esp,0xc
c001e723:	68 7c f7 01 c0       	push   0xc001f77c
c001e728:	e8 90 1d ff ff       	call   c00104bd <KePanic(char const*)>
c001e72d:	83 c4 10             	add    esp,0x10
c001e730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e734:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e737:	8d 50 01             	lea    edx,[eax+0x1]
c001e73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e741:	90                   	nop
c001e742:	83 c4 0c             	add    esp,0xc
c001e745:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e748 <ACPI::~ACPI()>:
c001e748:	83 ec 0c             	sub    esp,0xc
c001e74b:	ba f8 03 02 c0       	mov    edx,0xc00203f8
c001e750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e754:	89 10                	mov    DWORD PTR [eax],edx
c001e756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	50                   	push   eax
c001e75e:	e8 57 d2 fe ff       	call   c000b9ba <Device::~Device()>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	90                   	nop
c001e767:	83 c4 0c             	add    esp,0xc
c001e76a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e76c <ACPI::~ACPI()>:
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	83 ec 0c             	sub    esp,0xc
c001e772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e776:	e8 cd ff ff ff       	call   c001e748 <ACPI::~ACPI()>
c001e77b:	83 c4 10             	add    esp,0x10
c001e77e:	83 ec 08             	sub    esp,0x8
c001e781:	68 64 12 00 00       	push   0x1264
c001e786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e78a:	e8 e5 bd fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e78f:	83 c4 10             	add    esp,0x10
c001e792:	83 c4 0c             	add    esp,0xc
c001e795:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e798 <LinkedList<Device>::~LinkedList()>:
c001e798:	90                   	nop
c001e799:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e79c <LinkedList<Device>::isEmpty()>:
c001e79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a2:	85 c0                	test   eax,eax
c001e7a4:	75 0e                	jne    c001e7b4 <LinkedList<Device>::isEmpty()+0x18>
c001e7a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7ad:	85 c0                	test   eax,eax
c001e7af:	75 03                	jne    c001e7b4 <LinkedList<Device>::isEmpty()+0x18>
c001e7b1:	b0 01                	mov    al,0x1
c001e7b3:	c3                   	ret    
c001e7b4:	b0 00                	mov    al,0x0
c001e7b6:	90                   	nop
c001e7b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e7b8 <LinkedList<Device>::getFirstElement()>:
c001e7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e7c0 <LinkedList<Device>::removeFirst()>:
c001e7c0:	83 ec 0c             	sub    esp,0xc
c001e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c9:	85 c0                	test   eax,eax
c001e7cb:	75 17                	jne    c001e7e4 <LinkedList<Device>::removeFirst()+0x24>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	68 88 f7 01 c0       	push   0xc001f788
c001e7d5:	e8 e3 1c ff ff       	call   c00104bd <KePanic(char const*)>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	e9 92 00 00 00       	jmp    c001e874 <LinkedList<Device>::removeFirst()+0xb4>
c001e7e2:	66 90                	xchg   ax,ax
c001e7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7eb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e7f1:	85 c0                	test   eax,eax
c001e7f3:	74 13                	je     c001e808 <LinkedList<Device>::removeFirst()+0x48>
c001e7f5:	83 ec 0c             	sub    esp,0xc
c001e7f8:	68 d3 f7 01 c0       	push   0xc001f7d3
c001e7fd:	e8 bb 1c ff ff       	call   c00104bd <KePanic(char const*)>
c001e802:	83 c4 10             	add    esp,0x10
c001e805:	8d 76 00             	lea    esi,[esi+0x0]
c001e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e80e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e814:	85 c0                	test   eax,eax
c001e816:	75 34                	jne    c001e84c <LinkedList<Device>::removeFirst()+0x8c>
c001e818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e826:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e831:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e834:	83 f8 01             	cmp    eax,0x1
c001e837:	74 27                	je     c001e860 <LinkedList<Device>::removeFirst()+0xa0>
c001e839:	83 ec 0c             	sub    esp,0xc
c001e83c:	68 ac f7 01 c0       	push   0xc001f7ac
c001e841:	e8 77 1c ff ff       	call   c00104bd <KePanic(char const*)>
c001e846:	83 c4 10             	add    esp,0x10
c001e849:	eb 15                	jmp    c001e860 <LinkedList<Device>::removeFirst()+0xa0>
c001e84b:	90                   	nop
c001e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e850:	8b 00                	mov    eax,DWORD PTR [eax]
c001e852:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85c:	89 10                	mov    DWORD PTR [eax],edx
c001e85e:	66 90                	xchg   ax,ax
c001e860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e867:	8d 50 ff             	lea    edx,[eax-0x1]
c001e86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e86e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e871:	8d 76 00             	lea    esi,[esi+0x0]
c001e874:	83 c4 0c             	add    esp,0xc
c001e877:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e878 <CPU::~CPU()>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	ba 94 05 02 c0       	mov    edx,0xc0020594
c001e880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e884:	89 10                	mov    DWORD PTR [eax],edx
c001e886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	50                   	push   eax
c001e88e:	e8 27 d1 fe ff       	call   c000b9ba <Device::~Device()>
c001e893:	83 c4 10             	add    esp,0x10
c001e896:	90                   	nop
c001e897:	83 c4 0c             	add    esp,0xc
c001e89a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e89c <CPU::~CPU()>:
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a6:	e8 cd ff ff ff       	call   c001e878 <CPU::~CPU()>
c001e8ab:	83 c4 10             	add    esp,0x10
c001e8ae:	83 ec 08             	sub    esp,0x8
c001e8b1:	68 94 11 00 00       	push   0x1194
c001e8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ba:	e8 b5 bc fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	83 c4 0c             	add    esp,0xc
c001e8c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e8c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e8c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e8cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e8d0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e8d0:	90                   	nop
c001e8d1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e8d4 <ThreadControlBlock::ThreadControlBlock()>:
c001e8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8d8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e8df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8e3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ee:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e8f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8f9:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e904:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e90b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e917:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e91b:	90                   	nop
c001e91c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e924:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e92e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e939:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e94e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e959:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e960:	90                   	nop
c001e961:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e962 <PCI::~PCI()>:
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	ba 6c 14 02 c0       	mov    edx,0xc002146c
c001e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96e:	89 10                	mov    DWORD PTR [eax],edx
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	50                   	push   eax
c001e978:	e8 9f ca fe ff       	call   c000b41c <Bus::~Bus()>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	90                   	nop
c001e981:	83 c4 0c             	add    esp,0xc
c001e984:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e986 <PCI::~PCI()>:
c001e986:	83 ec 0c             	sub    esp,0xc
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e990:	e8 cd ff ff ff       	call   c001e962 <PCI::~PCI()>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	83 ec 08             	sub    esp,0x8
c001e99b:	68 5c 01 00 00       	push   0x15c
c001e9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a4:	e8 cb bb fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	83 c4 0c             	add    esp,0xc
c001e9af:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e9b0 <IDE::~IDE()>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	ba 20 15 02 c0       	mov    edx,0xc0021520
c001e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bc:	89 10                	mov    DWORD PTR [eax],edx
c001e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	50                   	push   eax
c001e9c6:	e8 69 d4 fe ff       	call   c000be34 <HardDiskController::~HardDiskController()>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	90                   	nop
c001e9cf:	83 c4 0c             	add    esp,0xc
c001e9d2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e9d4 <IDE::~IDE()>:
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	83 ec 0c             	sub    esp,0xc
c001e9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9de:	e8 cd ff ff ff       	call   c001e9b0 <IDE::~IDE()>
c001e9e3:	83 c4 10             	add    esp,0x10
c001e9e6:	83 ec 08             	sub    esp,0x8
c001e9e9:	68 70 02 00 00       	push   0x270
c001e9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f2:	e8 7d bb fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	83 c4 0c             	add    esp,0xc
c001e9fd:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e9fe <SATABus::~SATABus()>:
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	ba 70 15 02 c0       	mov    edx,0xc0021570
c001ea06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0a:	89 10                	mov    DWORD PTR [eax],edx
c001ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea10:	83 ec 0c             	sub    esp,0xc
c001ea13:	50                   	push   eax
c001ea14:	e8 1b d4 fe ff       	call   c000be34 <HardDiskController::~HardDiskController()>
c001ea19:	83 c4 10             	add    esp,0x10
c001ea1c:	90                   	nop
c001ea1d:	83 c4 0c             	add    esp,0xc
c001ea20:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ea22 <SATABus::~SATABus()>:
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	83 ec 0c             	sub    esp,0xc
c001ea28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea2c:	e8 cd ff ff ff       	call   c001e9fe <SATABus::~SATABus()>
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	83 ec 08             	sub    esp,0x8
c001ea37:	68 64 01 00 00       	push   0x164
c001ea3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea40:	e8 2f bb fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001ea45:	83 c4 10             	add    esp,0x10
c001ea48:	83 c4 0c             	add    esp,0xc
c001ea4b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ea4c <ATA::~ATA()>:
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c001ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea58:	89 10                	mov    DWORD PTR [eax],edx
c001ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5e:	83 ec 0c             	sub    esp,0xc
c001ea61:	50                   	push   eax
c001ea62:	e8 af d4 fe ff       	call   c000bf16 <PhysicalDisk::~PhysicalDisk()>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	90                   	nop
c001ea6b:	83 c4 0c             	add    esp,0xc
c001ea6e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ea70 <ATA::~ATA()>:
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	83 ec 0c             	sub    esp,0xc
c001ea76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea7a:	e8 cd ff ff ff       	call   c001ea4c <ATA::~ATA()>
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	83 ec 08             	sub    esp,0x8
c001ea85:	68 7c 01 00 00       	push   0x17c
c001ea8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea8e:	e8 e1 ba fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	83 c4 0c             	add    esp,0xc
c001ea99:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ea9a <ATAPI::~ATAPI()>:
c001ea9a:	83 ec 0c             	sub    esp,0xc
c001ea9d:	ba f8 15 02 c0       	mov    edx,0xc00215f8
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	89 10                	mov    DWORD PTR [eax],edx
c001eaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaac:	83 ec 0c             	sub    esp,0xc
c001eaaf:	50                   	push   eax
c001eab0:	e8 61 d4 fe ff       	call   c000bf16 <PhysicalDisk::~PhysicalDisk()>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	90                   	nop
c001eab9:	83 c4 0c             	add    esp,0xc
c001eabc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001eabe <ATAPI::~ATAPI()>:
c001eabe:	83 ec 0c             	sub    esp,0xc
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac8:	e8 cd ff ff ff       	call   c001ea9a <ATAPI::~ATAPI()>
c001eacd:	83 c4 10             	add    esp,0x10
c001ead0:	83 ec 08             	sub    esp,0x8
c001ead3:	68 84 01 00 00       	push   0x184
c001ead8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eadc:	e8 93 ba fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001eae1:	83 c4 10             	add    esp,0x10
c001eae4:	83 c4 0c             	add    esp,0xc
c001eae7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001eae8 <SATA::~SATA()>:
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c001eaf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf4:	89 10                	mov    DWORD PTR [eax],edx
c001eaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	50                   	push   eax
c001eafe:	e8 13 d4 fe ff       	call   c000bf16 <PhysicalDisk::~PhysicalDisk()>
c001eb03:	83 c4 10             	add    esp,0x10
c001eb06:	90                   	nop
c001eb07:	83 c4 0c             	add    esp,0xc
c001eb0a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001eb0c <SATA::~SATA()>:
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	83 ec 0c             	sub    esp,0xc
c001eb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb16:	e8 cd ff ff ff       	call   c001eae8 <SATA::~SATA()>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	83 ec 08             	sub    esp,0x8
c001eb21:	68 7c 01 00 00       	push   0x17c
c001eb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb2a:	e8 45 ba fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001eb2f:	83 c4 10             	add    esp,0x10
c001eb32:	83 c4 0c             	add    esp,0xc
c001eb35:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001eb36 <SATAPI::~SATAPI()>:
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001eb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb42:	89 10                	mov    DWORD PTR [eax],edx
c001eb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	50                   	push   eax
c001eb4c:	e8 c5 d3 fe ff       	call   c000bf16 <PhysicalDisk::~PhysicalDisk()>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	90                   	nop
c001eb55:	83 c4 0c             	add    esp,0xc
c001eb58:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001eb5a <SATAPI::~SATAPI()>:
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	83 ec 0c             	sub    esp,0xc
c001eb60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb64:	e8 cd ff ff ff       	call   c001eb36 <SATAPI::~SATAPI()>
c001eb69:	83 c4 10             	add    esp,0x10
c001eb6c:	83 ec 08             	sub    esp,0x8
c001eb6f:	68 84 01 00 00       	push   0x184
c001eb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb78:	e8 f7 b9 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	83 c4 0c             	add    esp,0xc
c001eb83:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001eb84 <IOAPIC::~IOAPIC()>:
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	ba 10 18 02 c0       	mov    edx,0xc0021810
c001eb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb90:	89 10                	mov    DWORD PTR [eax],edx
c001eb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	50                   	push   eax
c001eb9a:	e8 1b ce fe ff       	call   c000b9ba <Device::~Device()>
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	90                   	nop
c001eba3:	83 c4 0c             	add    esp,0xc
c001eba6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001eba8 <IOAPIC::~IOAPIC()>:
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	83 ec 0c             	sub    esp,0xc
c001ebae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebb2:	e8 cd ff ff ff       	call   c001eb84 <IOAPIC::~IOAPIC()>
c001ebb7:	83 c4 10             	add    esp,0x10
c001ebba:	83 ec 08             	sub    esp,0x8
c001ebbd:	68 68 01 00 00       	push   0x168
c001ebc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebc6:	e8 a9 b9 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	83 c4 0c             	add    esp,0xc
c001ebd1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ebd4 <APICTimer::~APICTimer()>:
c001ebd4:	83 ec 0c             	sub    esp,0xc
c001ebd7:	ba 58 18 02 c0       	mov    edx,0xc0021858
c001ebdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe0:	89 10                	mov    DWORD PTR [eax],edx
c001ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	50                   	push   eax
c001ebea:	e8 09 e8 fe ff       	call   c000d3f8 <Timer::~Timer()>
c001ebef:	83 c4 10             	add    esp,0x10
c001ebf2:	90                   	nop
c001ebf3:	83 c4 0c             	add    esp,0xc
c001ebf6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ebf8 <APICTimer::~APICTimer()>:
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	83 ec 0c             	sub    esp,0xc
c001ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec02:	e8 cd ff ff ff       	call   c001ebd4 <APICTimer::~APICTimer()>
c001ec07:	83 c4 10             	add    esp,0x10
c001ec0a:	83 ec 08             	sub    esp,0x8
c001ec0d:	68 60 01 00 00       	push   0x160
c001ec12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec16:	e8 59 b9 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	83 c4 0c             	add    esp,0xc
c001ec21:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ec24 <PIT::~PIT()>:
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c001ec2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec30:	89 10                	mov    DWORD PTR [eax],edx
c001ec32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec36:	83 ec 0c             	sub    esp,0xc
c001ec39:	50                   	push   eax
c001ec3a:	e8 b9 e7 fe ff       	call   c000d3f8 <Timer::~Timer()>
c001ec3f:	83 c4 10             	add    esp,0x10
c001ec42:	90                   	nop
c001ec43:	83 c4 0c             	add    esp,0xc
c001ec46:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ec48 <PIT::~PIT()>:
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	83 ec 0c             	sub    esp,0xc
c001ec4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec52:	e8 cd ff ff ff       	call   c001ec24 <PIT::~PIT()>
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	83 ec 08             	sub    esp,0x8
c001ec5d:	68 5c 01 00 00       	push   0x15c
c001ec62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec66:	e8 09 b9 fe ff       	call   c000a574 <operator delete(void*, unsigned long)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	83 c4 0c             	add    esp,0xc
c001ec71:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 85 06 02 c0       	mov    esi,0xc0020685
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be a1 06 02 c0       	mov    esi,0xc00206a1
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002205e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0022062:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022074:	89 c2                	mov    edx,eax
c0022076:	31 c0                	xor    eax,eax
c0022078:	89 d3                	mov    ebx,edx
c002207a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002207e:	89 c1                	mov    ecx,eax
c0022080:	83 c4 10             	add    esp,0x10
c0022083:	89 d0                	mov    eax,edx
c0022085:	31 d2                	xor    edx,edx
c0022087:	09 da                	or     edx,ebx
c0022089:	09 c8                	or     eax,ecx
c002208b:	5b                   	pop    ebx
c002208c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
