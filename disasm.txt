
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 10 7b 00 00       	call   c0007b30 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 43 02 c0       	mov    eax,0xc0024324
c0000025:	3d 24 43 02 c0       	cmp    eax,0xc0024324
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 43 02 c0       	push   0xc0024324
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 43 02 c0       	mov    eax,0xc0024324
c0000051:	2d 24 43 02 c0       	sub    eax,0xc0024324
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 43 02 c0       	push   0xc0024324
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc 04 02 c0       	mov    ebx,0xc00204bc
c0000097:	81 eb b8 04 02 c0    	sub    ebx,0xc00204b8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 04 02 c0       	mov    esi,0xc00204b8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 43 02 c0       	push   0xc0024324
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 24 43 02 c0       	push   0xc0024324
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 03 57 01 00       	call   c00159b0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 28 a4 00 00       	call   c000a6ed <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e1 56 01 00       	call   c00159b0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ee 5b 01 00       	call   c0015edc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 62 01 00       	call   c00165a4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 03 13 01 00       	jmp    c0011682 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb40],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb40],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb40],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb40],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb40],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 d0 6a 00 00       	call   c00079a8 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 15 6a 00 00       	call   c00079a8 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 ff 69 00 00       	call   c00079a8 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 db 69 00 00       	call   c00079a8 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 c4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa3c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 aa 7d 01 00       	jmp    c0019b4c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 d4 7d 01 00       	jmp    c0019b8c <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 f5 7d 01 00       	jmp    c0019bcc <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 20 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8e0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 20 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8e0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 38 2f 02 c0       	mov    edx,0xc0022f38
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba dc 05 02 c0       	mov    edx,0xc00205dc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 e2 05 02 c0       	mov    eax,0xc00205e2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf a0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf960]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 eb 05 02 c0       	mov    eax,0xc00205eb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 20 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8e0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 70 06 02 c0       	mov    eax,0xc0020670
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 60 06 02 c0       	mov    ebx,0xc0020660
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 40 06 02 c0       	mov    eax,0xc0020640
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 50 06 02 c0       	mov    eax,0xc0020650
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba f2 05 02 c0       	mov    edx,0xc00205f2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba fe 05 02 c0       	mov    edx,0xc00205fe
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 12 06 02 c0       	mov    edx,0xc0020612
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 a7 1e 00 00       	call   c0007ad6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 9f 1e 00 00       	call   c0007ae6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 40 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a40
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 40 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a40
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 40 08 02 c0       	mov    eax,0xc0020840
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 80 07 02 c0       	mov    eax,0xc0020780
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 40 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8c0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 40 0b 02 c0       	push   0xc0020b40
c000611b:	e8 c8 43 01 00       	call   c001a4e8 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 4e 0b 02 c0       	push   0xc0020b4e
c0006153:	e8 90 43 01 00       	call   c001a4e8 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 f9 42 01 00       	call   c001a48c <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 5d 0b 02 c0       	push   0xc0020b5d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 60 0b 02 c0       	push   0xc0020b60
c0006812:	e8 d1 3c 01 00       	call   c001a4e8 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 e5 3c 01 00       	call   c001a504 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 65 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b65
c000682c:	e8 b7 3c 01 00       	call   c001a4e8 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 c7 3c 01 00       	call   c001a504 <iso_kprintfd>
c000683d:	c7 04 24 6b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b6b
c0006844:	e8 9f 3c 01 00       	call   c001a4e8 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 af 3c 01 00       	call   c001a504 <iso_kprintfd>
c0006855:	c7 04 24 71 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b71
c000685c:	e8 87 3c 01 00       	call   c001a4e8 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 97 3c 01 00       	call   c001a504 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 5d 0b 02 c0       	push   0xc0020b5d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 7a 0b 02 c0       	push   0xc0020b7a
c0006a31:	e8 b2 3a 01 00       	call   c001a4e8 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 85 0b 02 c0       	push   0xc0020b85
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 8c 0b 02 c0       	push   0xc0020b8c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 93 0b 02 c0       	push   0xc0020b93
c0006b48:	e8 9b 39 01 00       	call   c001a4e8 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 9e 0b 02 c0       	push   0xc0020b9e
c0006b63:	e8 80 39 01 00       	call   c001a4e8 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 44 0f 00 00       	call   c0007ad6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 33 0f 00 00       	call   c0007ad6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 1e 0f 00 00       	call   c0007ad6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 05 0f 00 00       	call   c0007ad6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 e3 0e 00 00       	call   c0007ae6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 d5 0e 00 00       	call   c0007ae6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 bb 0e 00 00       	call   c0007ae6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 a6 0e 00 00       	call   c0007ae6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	83 ec 0c             	sub    esp,0xc
c0006c70:	68 af 0b 02 c0       	push   0xc0020baf
c0006c75:	e8 eb 3c 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0006c7a:	e8 39 a2 00 00       	call   c0010eb8 <KeExecuteAtexit()>
c0006c7f:	c7 04 24 bd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bbd
c0006c86:	e8 da 3c 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0006c8b:	58                   	pop    eax
c0006c8c:	8b 93 68 01 00 00    	mov    edx,DWORD PTR [ebx+0x168]
c0006c92:	52                   	push   edx
c0006c93:	e8 6c 5e 00 00       	call   c000cb04 <Device::closeAll()>
c0006c98:	c7 04 24 ca 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bca
c0006c9f:	e8 c1 3c 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0006ca4:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006caa:	83 c4 10             	add    esp,0x10
c0006cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0006caf:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb3:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cbb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc3:	5b                   	pop    ebx
c0006cc4:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc7:	5e                   	pop    esi
c0006cc8:	5f                   	pop    edi
c0006cc9:	ff e0                	jmp    eax

c0006ccb <Krnl::firstTask()>:
c0006ccb:	53                   	push   ebx
c0006ccc:	83 ec 14             	sub    esp,0x14
c0006ccf:	fb                   	sti    
c0006cd0:	68 d9 0b 02 c0       	push   0xc0020bd9
c0006cd5:	e8 bd a2 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006cda:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce1:	e8 f0 0d 00 00       	call   c0007ad6 <malloc>
c0006ce6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ced:	89 c3                	mov    ebx,eax
c0006cef:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf4:	50                   	push   eax
c0006cf5:	68 f2 0b 02 c0       	push   0xc0020bf2
c0006cfa:	6a 01                	push   0x1
c0006cfc:	53                   	push   ebx
c0006cfd:	e8 06 f0 00 00       	call   c0015d08 <Process::Process(bool, char const*, Process*, char**)>
c0006d02:	83 c4 20             	add    esp,0x20
c0006d05:	68 ff 00 00 00       	push   0xff
c0006d0a:	6a 00                	push   0x0
c0006d0c:	68 1f 75 00 c0       	push   0xc000751f
c0006d11:	53                   	push   ebx
c0006d12:	e8 15 f2 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c0006d17:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1d:	6a 7a                	push   0x7a
c0006d1f:	6a 00                	push   0x0
c0006d21:	68 14 6a 01 c0       	push   0xc0016a14
c0006d26:	52                   	push   edx
c0006d27:	e8 00 f2 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c0006d2c:	83 c4 14             	add    esp,0x14
c0006d2f:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d34:	68 f0 0c 02 c0       	push   0xc0020cf0
c0006d39:	e8 59 a2 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006d3e:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d45:	e8 06 ab 00 00       	call   c0011850 <KeInitRand()>
c0006d4a:	e8 e8 00 01 00       	call   c0016e37 <Vm::initialise8086()>
c0006d4f:	e8 f6 4a 00 00       	call   c000b84a <Fs::initVFS()>
c0006d54:	c7 04 24 ff 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bff
c0006d5b:	e8 37 a2 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006d60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d65:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6d:	6a 00                	push   0x0
c0006d6f:	6a 00                	push   0x0
c0006d71:	6a 00                	push   0x0
c0006d73:	50                   	push   eax
c0006d74:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d77:	83 c4 14             	add    esp,0x14
c0006d7a:	68 f0 0c 02 c0       	push   0xc0020cf0
c0006d7f:	e8 13 a2 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006d84:	e8 5b 42 00 00       	call   c000afe4 <KeInitialiseSymlinks()>
c0006d89:	e8 6c a7 00 00       	call   c00114fa <KeLoadSystemEnv()>
c0006d8e:	e8 c9 a9 00 00       	call   c001175c <KeSetupPowerManager()>
c0006d93:	83 c4 0c             	add    esp,0xc
c0006d96:	6a 3a                	push   0x3a
c0006d98:	68 19 0c 02 c0       	push   0xc0020c19
c0006d9d:	68 22 0c 02 c0       	push   0xc0020c22
c0006da2:	e8 39 d1 00 00       	call   c0013ee0 <Reg::readIntWithDefault(char*, char*, int)>
c0006da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0006daa:	e8 b5 56 00 00       	call   c000c464 <User::loadClockSettings(int)>
c0006daf:	c7 04 24 14 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d14
c0006db6:	e8 dc a1 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006dbb:	59                   	pop    ecx
c0006dbc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dc1:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc7:	53                   	push   ebx
c0006dc8:	e8 35 5d 00 00       	call   c000cb02 <Device::loadDriversForAll()>
c0006dcd:	c7 04 24 2a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c2a
c0006dd4:	e8 be a1 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0006dd9:	58                   	pop    eax
c0006dda:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006de0:	5a                   	pop    edx
c0006de1:	6a 01                	push   0x1
c0006de3:	68 3b 0c 02 c0       	push   0xc0020c3b
c0006de8:	e8 30 e9 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c0006ded:	59                   	pop    ecx
c0006dee:	5a                   	pop    edx
c0006def:	53                   	push   ebx
c0006df0:	50                   	push   eax
c0006df1:	e8 58 eb 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c0006df6:	83 c4 10             	add    esp,0x10
c0006df9:	83 ec 0c             	sub    esp,0xc
c0006dfc:	6a 02                	push   0x2
c0006dfe:	e8 8d f5 00 00       	call   c0016390 <blockTask(TaskState)>
c0006e03:	83 c4 10             	add    esp,0x10
c0006e06:	eb f1                	jmp    c0006df9 <Krnl::firstTask()+0x12e>

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 57 0c 02 c0       	push   0xc0020c57
c0006e17:	50                   	push   eax
c0006e18:	e8 61 5d 00 00       	call   c000cb7e <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 60 0d 02 c0       	mov    edx,0xc0020d60
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	83 e0 fd             	and    eax,0xfffffffd
c0006eec:	d1 e2                	shl    edx,1
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 9f 85 01 00       	call   c001f4b6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	88 c2                	mov    dl,al
c0006f32:	a8 10                	test   al,0x10
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 7b 94 00 00       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 54 94 00 00       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 32 94 00 00       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 10 94 00 00       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 1d 93 00 00       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 f8 92 00 00       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 fe 83 01 00       	call   c001f470 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	c1 e0 07             	shl    eax,0x7
c000707b:	83 e2 7f             	and    edx,0x7f
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 4c 80 01 00       	call   c001f0e0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 0e 93 00 00       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 60 0c 02 c0       	push   0xc0020c60
c0007104:	e8 8e a5 00 00       	call   c0011697 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 66 0c 02 c0       	push   0xc0020c66
c0007140:	e8 52 a5 00 00       	call   c0011697 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 5b 8c 00 00       	jmp    c000fde8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000719e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a2:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00071a9:	75 09                	jne    c00071b4 <Computer::readCMOS(unsigned char)+0x1a>
c00071ab:	b2 80                	mov    dl,0x80
c00071ad:	09 d0                	or     eax,edx
c00071af:	e6 70                	out    0x70,al
c00071b1:	e4 71                	in     al,0x71
c00071b3:	c3                   	ret    
c00071b4:	31 d2                	xor    edx,edx
c00071b6:	eb f5                	jmp    c00071ad <Computer::readCMOS(unsigned char)+0x13>

c00071b8 <Computer::enableNMI(bool)>:
c00071b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00071bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071c0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ce:	eb ca                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 10             	sub    esp,0x10
c00071d5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d9:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071e0:	68 6c 0c 02 c0       	push   0xc0020c6c
c00071e5:	0f 94 05 80 37 02 c0 	sete   BYTE PTR ds:0xc0023780
c00071ec:	e8 a6 9d 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c00071f1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f8:	e8 d9 08 00 00       	call   c0007ad6 <malloc>
c00071fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007200:	89 c6                	mov    esi,eax
c0007202:	e8 55 87 00 00       	call   c000f95c <ACPI::ACPI()>
c0007207:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720d:	58                   	pop    eax
c000720e:	5a                   	pop    edx
c000720f:	56                   	push   esi
c0007210:	53                   	push   ebx
c0007211:	e8 d0 57 00 00       	call   c000c9e6 <Device::addChild(Device*)>
c0007216:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007219:	e8 9c fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721e:	59                   	pop    ecx
c000721f:	5e                   	pop    esi
c0007220:	6a 01                	push   0x1
c0007222:	53                   	push   ebx
c0007223:	e8 90 ff ff ff       	call   c00071b8 <Computer::enableNMI(bool)>
c0007228:	c7 04 24 84 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c84
c000722f:	e8 63 9d 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0007234:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000723b:	e8 96 08 00 00       	call   c0007ad6 <malloc>
c0007240:	89 04 24             	mov    DWORD PTR [esp],eax
c0007243:	89 c6                	mov    esi,eax
c0007245:	e8 3e 92 00 00       	call   c0010488 <CPU::CPU()>
c000724a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007250:	58                   	pop    eax
c0007251:	5a                   	pop    edx
c0007252:	56                   	push   esi
c0007253:	53                   	push   ebx
c0007254:	e8 8d 57 00 00       	call   c000c9e6 <Device::addChild(Device*)>
c0007259:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007263:	8b 10                	mov    edx,DWORD PTR [eax]
c0007265:	51                   	push   ecx
c0007266:	6a 00                	push   0x0
c0007268:	6a 00                	push   0x0
c000726a:	50                   	push   eax
c000726b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	68 34 0d 02 c0       	push   0xc0020d34
c0007276:	e8 1c 9d 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000727b:	e8 f4 0d 01 00       	call   c0018074 <HalInitialiseCoprocessor()>
c0007280:	c7 04 24 9e 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c9e
c0007287:	e8 0b 9d 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000728c:	c7 04 24 cb 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ccb
c0007293:	e8 c0 ed 00 00       	call   c0016058 <setupMultitasking(void (*)())>
c0007298:	83 c4 14             	add    esp,0x14
c000729b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072a0:	5b                   	pop    ebx
c00072a1:	5e                   	pop    esi
c00072a2:	c3                   	ret    
c00072a3:	90                   	nop

c00072a4 <Computer::disableNMI()>:
c00072a4:	6a 00                	push   0x0
c00072a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072aa:	50                   	push   eax
c00072ab:	e8 08 ff ff ff       	call   c00071b8 <Computer::enableNMI(bool)>
c00072b0:	5a                   	pop    edx
c00072b1:	59                   	pop    ecx
c00072b2:	c3                   	ret    
c00072b3:	90                   	nop

c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072c0:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072c7:	75 0b                	jne    c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072c9:	b1 80                	mov    cl,0x80
c00072cb:	09 c8                	or     eax,ecx
c00072cd:	e6 70                	out    0x70,al
c00072cf:	88 d0                	mov    al,dl
c00072d1:	e6 71                	out    0x71,al
c00072d3:	c3                   	ret    
c00072d4:	31 c9                	xor    ecx,ecx
c00072d6:	eb f3                	jmp    c00072cb <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072d8 <Computer::handleNMI()>:
c00072d8:	56                   	push   esi
c00072d9:	53                   	push   ebx
c00072da:	83 ec 10             	sub    esp,0x10
c00072dd:	e4 92                	in     al,0x92
c00072df:	89 c6                	mov    esi,eax
c00072e1:	e4 61                	in     al,0x61
c00072e3:	68 b9 0c 02 c0       	push   0xc0020cb9
c00072e8:	88 c3                	mov    bl,al
c00072ea:	e8 76 36 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00072ef:	83 c4 10             	add    esp,0x10
c00072f2:	83 e6 10             	and    esi,0x10
c00072f5:	75 10                	jne    c0007307 <Computer::handleNMI()+0x2f>
c00072f7:	f6 c3 40             	test   bl,0x40
c00072fa:	75 20                	jne    c000731c <Computer::handleNMI()+0x44>
c00072fc:	80 e3 80             	and    bl,0x80
c00072ff:	75 30                	jne    c0007331 <Computer::handleNMI()+0x59>
c0007301:	83 c4 04             	add    esp,0x4
c0007304:	5b                   	pop    ebx
c0007305:	5e                   	pop    esi
c0007306:	c3                   	ret    
c0007307:	83 ec 0c             	sub    esp,0xc
c000730a:	68 ca 0c 02 c0       	push   0xc0020cca
c000730f:	e8 83 a3 00 00       	call   c0011697 <KePanic(char const*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	f6 c3 40             	test   bl,0x40
c000731a:	74 e0                	je     c00072fc <Computer::handleNMI()+0x24>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 d7 0c 02 c0       	push   0xc0020cd7
c0007324:	e8 6e a3 00 00       	call   c0011697 <KePanic(char const*)>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	80 e3 80             	and    bl,0x80
c000732f:	74 d0                	je     c0007301 <Computer::handleNMI()+0x29>
c0007331:	c7 44 24 10 e1 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ce1
c0007339:	83 c4 04             	add    esp,0x4
c000733c:	5b                   	pop    ebx
c000733d:	5e                   	pop    esi
c000733e:	e9 54 a3 00 00       	jmp    c0011697 <KePanic(char const*)>
c0007343:	90                   	nop

c0007344 <GDTEntry::setBase(unsigned int)>:
c0007344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734c:	89 c1                	mov    ecx,eax
c000734e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007352:	c1 e9 10             	shr    ecx,0x10
c0007355:	c1 e8 18             	shr    eax,0x18
c0007358:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000735b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735e:	c3                   	ret    
c000735f:	90                   	nop

c0007360 <GDTEntry::setLimit(unsigned int)>:
c0007360:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007368:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000736b:	66 89 01             	mov    WORD PTR [ecx],ax
c000736e:	83 e2 f0             	and    edx,0xfffffff0
c0007371:	c1 e8 10             	shr    eax,0x10
c0007374:	83 e0 0f             	and    eax,0xf
c0007377:	09 d0                	or     eax,edx
c0007379:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737c:	c3                   	ret    
c000737d:	90                   	nop

c000737e <GDT::GDT()>:
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007392:	90                   	nop
c0007393:	c3                   	ret    

c0007394 <GDT::addEntry(GDTEntry)>:
c0007394:	53                   	push   ebx
c0007395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007399:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739d:	8b 02                	mov    eax,DWORD PTR [edx]
c000739f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073a3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00073ae:	c1 e0 03             	shl    eax,0x3
c00073b1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b3:	5b                   	pop    ebx
c00073b4:	c3                   	ret    
c00073b5:	90                   	nop

c00073b6 <GDT::getNumberOfEntries()>:
c00073b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00073bc:	c3                   	ret    
c00073bd:	90                   	nop

c00073be <GDT::flush()>:
c00073be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c4:	83 c0 04             	add    eax,0x4
c00073c7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ce:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073d3:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073da:	e9 7b 8f ff ff       	jmp    c000035a <loadGDT>
c00073df:	90                   	nop

c00073e0 <GDT::setup()>:
c00073e0:	57                   	push   edi
c00073e1:	56                   	push   esi
c00073e2:	53                   	push   ebx
c00073e3:	83 ec 30             	sub    esp,0x30
c00073e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ea:	6a 00                	push   0x0
c00073ec:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073f0:	56                   	push   esi
c00073f1:	e8 4e ff ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c00073f6:	6a 00                	push   0x0
c00073f8:	56                   	push   esi
c00073f9:	e8 62 ff ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c00073fe:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007406:	6a 00                	push   0x0
c0007408:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740c:	56                   	push   esi
c000740d:	e8 32 ff ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007412:	68 ff ff ff 00       	push   0xffffff
c0007417:	56                   	push   esi
c0007418:	e8 43 ff ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c000741d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007421:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007425:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007429:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000742d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007432:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007437:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000743b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743f:	89 f8                	mov    eax,edi
c0007441:	89 fa                	mov    edx,edi
c0007443:	80 e4 f7             	and    ah,0xf7
c0007446:	80 ce 60             	or     dh,0x60
c0007449:	89 c7                	mov    edi,eax
c000744b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744f:	80 cc 60             	or     ah,0x60
c0007452:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007456:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000745a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000745e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007462:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007466:	83 c4 20             	add    esp,0x20
c0007469:	6a 00                	push   0x0
c000746b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746f:	50                   	push   eax
c0007470:	e8 cf fe ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007475:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007479:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007481:	83 e0 3f             	and    eax,0x3f
c0007484:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007488:	6a 00                	push   0x0
c000748a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748e:	50                   	push   eax
c000748f:	e8 b0 fe ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c0007494:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007498:	83 e0 3f             	and    eax,0x3f
c000749b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	53                   	push   ebx
c00074ab:	e8 e4 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074b0:	83 c4 0c             	add    esp,0xc
c00074b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074bb:	53                   	push   ebx
c00074bc:	e8 d3 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074c1:	83 c4 0c             	add    esp,0xc
c00074c4:	57                   	push   edi
c00074c5:	56                   	push   esi
c00074c6:	53                   	push   ebx
c00074c7:	e8 c8 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d7:	53                   	push   ebx
c00074d8:	e8 b7 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e8:	53                   	push   ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074ee:	83 c4 0c             	add    esp,0xc
c00074f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f9:	53                   	push   ebx
c00074fa:	e8 95 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00074ff:	83 c4 0c             	add    esp,0xc
c0007502:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007506:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000750a:	53                   	push   ebx
c000750b:	e8 84 fe ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c0007510:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007513:	e8 a6 fe ff ff       	call   c00073be <GDT::flush()>
c0007518:	83 c4 40             	add    esp,0x40
c000751b:	5b                   	pop    ebx
c000751c:	5e                   	pop    esi
c000751d:	5f                   	pop    edi
c000751e:	c3                   	ret    

c000751f <idleFunction(void*)>:
c000751f:	83 ec 0c             	sub    esp,0xc
c0007522:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007527:	48                   	dec    eax
c0007528:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752d:	75 01                	jne    c0007530 <idleFunction(void*)+0x11>
c000752f:	fb                   	sti    
c0007530:	e8 0b 08 01 00       	call   c0017d40 <HalSystemIdle()>
c0007535:	e8 38 85 01 00       	call   c001fa72 <idleCommon()>
c000753a:	eb f4                	jmp    c0007530 <idleFunction(void*)+0x11>

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 70 f1 01 c0       	push   0xc001f170
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 80 f1 01 c0       	push   0xc001f180
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 8a f1 01 c0       	push   0xc001f18a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 94 f1 01 c0       	push   0xc001f194
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 9e f1 01 c0       	push   0xc001f19e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 a8 f1 01 c0       	push   0xc001f1a8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 b2 f1 01 c0       	push   0xc001f1b2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 bc f1 01 c0       	push   0xc001f1bc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 c6 f1 01 c0       	push   0xc001f1c6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 ce f1 01 c0       	push   0xc001f1ce
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 d8 f1 01 c0       	push   0xc001f1d8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 e0 f1 01 c0       	push   0xc001f1e0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 f0 f1 01 c0       	push   0xc001f1f0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 0a f2 01 c0       	push   0xc001f20a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 12 f2 01 c0       	push   0xc001f212
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 1c f2 01 c0       	push   0xc001f21c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 26 f2 01 c0       	push   0xc001f226
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 30 f2 01 c0       	push   0xc001f230
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 ca f2 01 c0       	push   0xc001f2ca
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 d1 f2 01 c0       	push   0xc001f2d1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 bc f2 01 c0       	push   0xc001f2bc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 c3 f2 01 c0       	push   0xc001f2c3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 3a f2 01 c0       	push   0xc001f23a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 44 f2 01 c0       	push   0xc001f244
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 4e f2 01 c0       	push   0xc001f24e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 58 f2 01 c0       	push   0xc001f258
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 62 f2 01 c0       	push   0xc001f262
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 6c f2 01 c0       	push   0xc001f26c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 76 f2 01 c0       	push   0xc001f276
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 80 f2 01 c0       	push   0xc001f280
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 8a f2 01 c0       	push   0xc001f28a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 94 f2 01 c0       	push   0xc001f294
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 9e f2 01 c0       	push   0xc001f29e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 a8 f2 01 c0       	push   0xc001f2a8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 b2 f2 01 c0       	push   0xc001f2b2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 0c f4 01 c0       	push   0xc001f40c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 16 f4 01 c0       	push   0xc001f416
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 20 f4 01 c0       	push   0xc001f420
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 2a f4 01 c0       	push   0xc001f42a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 34 f4 01 c0       	push   0xc001f434
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 3e f4 01 c0       	push   0xc001f43e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 48 f4 01 c0       	push   0xc001f448
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 52 f4 01 c0       	push   0xc001f452
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 13 25 00 00       	call   c0009e44 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 97 01 00 00       	call   c0007ad6 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 15 16 00 00       	call   c0008f64 <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 c6 f1 01 c0       	push   0xc001f1c6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 4a 16 00 00       	call   c0008fa8 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007984:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 61                	je     c0007a18 <sbrk+0x70>
c00079b7:	78 66                	js     c0007a1f <sbrk+0x77>
c00079b9:	8b 15 68 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023768
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	05 ff 0f 00 00       	add    eax,0xfff
c00079c8:	89 c5                	mov    ebp,eax
c00079ca:	78 6b                	js     c0007a37 <sbrk+0x8f>
c00079cc:	c1 fd 0c             	sar    ebp,0xc
c00079cf:	bb 00 00 00 00       	mov    ebx,0x0
c00079d4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079da:	8b 3d 68 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023768
c00079e0:	e8 fa 03 00 00       	call   c0007ddf <Phys::allocatePage()>
c00079e5:	68 01 04 00 00       	push   0x401
c00079ea:	57                   	push   edi
c00079eb:	50                   	push   eax
c00079ec:	56                   	push   esi
c00079ed:	e8 4e 23 00 00       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f2:	81 05 68 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023768,0x1000
c00079fc:	83 c3 01             	add    ebx,0x1
c00079ff:	83 c4 10             	add    esp,0x10
c0007a02:	39 dd                	cmp    ebp,ebx
c0007a04:	75 ce                	jne    c00079d4 <sbrk+0x2c>
c0007a06:	0f 20 d8             	mov    eax,cr3
c0007a09:	0f 22 d8             	mov    cr3,eax
c0007a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a10:	83 c4 1c             	add    esp,0x1c
c0007a13:	5b                   	pop    ebx
c0007a14:	5e                   	pop    esi
c0007a15:	5f                   	pop    edi
c0007a16:	5d                   	pop    ebp
c0007a17:	c3                   	ret    
c0007a18:	a1 68 37 02 c0       	mov    eax,ds:0xc0023768
c0007a1d:	eb f1                	jmp    c0007a10 <sbrk+0x68>
c0007a1f:	83 ec 08             	sub    esp,0x8
c0007a22:	50                   	push   eax
c0007a23:	68 84 0d 02 c0       	push   0xc0020d84
c0007a28:	e8 38 2f 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0007a2d:	83 c4 10             	add    esp,0x10
c0007a30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a35:	eb d9                	jmp    c0007a10 <sbrk+0x68>
c0007a37:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a3d:	eb 8d                	jmp    c00079cc <sbrk+0x24>

c0007a3f <mmap>:
c0007a3f:	83 ec 18             	sub    esp,0x18
c0007a42:	68 b4 0d 02 c0       	push   0xc0020db4
c0007a47:	e8 4b 9c 00 00       	call   c0011697 <KePanic(char const*)>
c0007a4c:	b8 00 00 00 00       	mov    eax,0x0
c0007a51:	83 c4 1c             	add    esp,0x1c
c0007a54:	c3                   	ret    

c0007a55 <munmap>:
c0007a55:	83 ec 18             	sub    esp,0x18
c0007a58:	68 b9 0d 02 c0       	push   0xc0020db9
c0007a5d:	e8 35 9c 00 00       	call   c0011697 <KePanic(char const*)>
c0007a62:	b8 00 00 00 00       	mov    eax,0x0
c0007a67:	83 c4 1c             	add    esp,0x1c
c0007a6a:	c3                   	ret    

c0007a6b <liballoc_lock()>:
c0007a6b:	fa                   	cli    
c0007a6c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a73:	b8 00 00 00 00       	mov    eax,0x0
c0007a78:	c3                   	ret    

c0007a79 <liballoc_unlock()>:
c0007a79:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7e:	83 e8 01             	sub    eax,0x1
c0007a81:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a86:	75 01                	jne    c0007a89 <liballoc_unlock()+0x10>
c0007a88:	fb                   	sti    
c0007a89:	b8 00 00 00 00       	mov    eax,0x0
c0007a8e:	c3                   	ret    

c0007a8f <liballoc_alloc(int)>:
c0007a8f:	83 ec 10             	sub    esp,0x10
c0007a92:	6a 01                	push   0x1
c0007a94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a98:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9e:	e8 a1 23 00 00       	call   c0009e44 <VAS::allocatePages(int, int)>
c0007aa3:	83 c4 1c             	add    esp,0x1c
c0007aa6:	c3                   	ret    

c0007aa7 <liballoc_free(void*, int)>:
c0007aa7:	83 ec 14             	sub    esp,0x14
c0007aaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aae:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab4:	e8 cf 1f 00 00       	call   c0009a88 <VAS::freeAllocatedPages(unsigned long)>
c0007ab9:	b8 00 00 00 00       	mov    eax,0x0
c0007abe:	83 c4 1c             	add    esp,0x1c
c0007ac1:	c3                   	ret    

c0007ac2 <realloc>:
c0007ac2:	83 ec 14             	sub    esp,0x14
c0007ac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 16 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <malloc>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 c9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <free>:
c0007ae6:	83 ec 18             	sub    esp,0x18
c0007ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aed:	e8 61 92 ff ff       	call   c0000d53 <dlfree>
c0007af2:	83 c4 1c             	add    esp,0x1c
c0007af5:	c3                   	ret    

c0007af6 <rfree>:
c0007af6:	83 ec 18             	sub    esp,0x18
c0007af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afd:	e8 51 92 ff ff       	call   c0000d53 <dlfree>
c0007b02:	83 c4 1c             	add    esp,0x1c
c0007b05:	c3                   	ret    

c0007b06 <calloc>:
c0007b06:	56                   	push   esi
c0007b07:	53                   	push   ebx
c0007b08:	83 ec 10             	sub    esp,0x10
c0007b0b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b14:	53                   	push   ebx
c0007b15:	e8 bc ff ff ff       	call   c0007ad6 <malloc>
c0007b1a:	89 c6                	mov    esi,eax
c0007b1c:	83 c4 0c             	add    esp,0xc
c0007b1f:	53                   	push   ebx
c0007b20:	6a 00                	push   0x0
c0007b22:	50                   	push   eax
c0007b23:	e8 c8 89 ff ff       	call   c00004f0 <memset>
c0007b28:	89 f0                	mov    eax,esi
c0007b2a:	83 c4 14             	add    esp,0x14
c0007b2d:	5b                   	pop    ebx
c0007b2e:	5e                   	pop    esi
c0007b2f:	c3                   	ret    

c0007b30 <KeEntryPoint>:
c0007b30:	57                   	push   edi
c0007b31:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b36:	56                   	push   esi
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	53                   	push   ebx
c0007b3a:	31 f6                	xor    esi,esi
c0007b3c:	83 ec 2c             	sub    esp,0x2c
c0007b3f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b44:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b49:	89 f0                	mov    eax,esi
c0007b4b:	ee                   	out    dx,al
c0007b4c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b51:	b0 80                	mov    al,0x80
c0007b53:	89 da                	mov    edx,ebx
c0007b55:	ee                   	out    dx,al
c0007b56:	b1 03                	mov    cl,0x3
c0007b58:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5d:	88 c8                	mov    al,cl
c0007b5f:	ee                   	out    dx,al
c0007b60:	89 f0                	mov    eax,esi
c0007b62:	89 fa                	mov    edx,edi
c0007b64:	ee                   	out    dx,al
c0007b65:	88 c8                	mov    al,cl
c0007b67:	89 da                	mov    edx,ebx
c0007b69:	ee                   	out    dx,al
c0007b6a:	b0 c7                	mov    al,0xc7
c0007b6c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b71:	ee                   	out    dx,al
c0007b72:	b0 0b                	mov    al,0xb
c0007b74:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b79:	ee                   	out    dx,al
c0007b7a:	68 c0 0d 02 c0       	push   0xc0020dc0
c0007b7f:	e8 e1 2d 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0007b84:	e8 92 93 00 00       	call   c0010f1b <KeDisplaySplashScreen()>
c0007b89:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b98:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b9b:	e8 ad 03 00 00       	call   c0007f4d <Phys::physicalMemorySetup(unsigned int)>
c0007ba0:	e8 66 1c 00 00       	call   c000980b <Virt::virtualMemorySetup()>
c0007ba5:	e8 bb 92 00 00       	call   c0010e65 <KeInitialiseAtexit()>
c0007baa:	58                   	pop    eax
c0007bab:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007baf:	53                   	push   ebx
c0007bb0:	e8 53 1f 00 00       	call   c0009b08 <VAS::VAS()>
c0007bb5:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bbb:	e8 4a 7e 01 00       	call   c001fa0a <_init>
c0007bc0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc7:	e8 0a ff ff ff       	call   c0007ad6 <malloc>
c0007bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcf:	89 c6                	mov    esi,eax
c0007bd1:	e8 32 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd6:	53                   	push   ebx
c0007bd7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdd:	6a 00                	push   0x0
c0007bdf:	6a 00                	push   0x0
c0007be1:	56                   	push   esi
c0007be2:	e8 e9 f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007be7:	83 c4 14             	add    esp,0x14
c0007bea:	53                   	push   ebx
c0007beb:	e8 e2 1f 00 00       	call   c0009bd2 <VAS::~VAS()>
c0007bf0:	83 c4 30             	add    esp,0x30
c0007bf3:	5b                   	pop    ebx
c0007bf4:	5e                   	pop    esi
c0007bf5:	5f                   	pop    edi
c0007bf6:	c3                   	ret    

c0007bf7 <Phys::allocateDMA(unsigned long)>:
c0007bf7:	55                   	push   ebp
c0007bf8:	31 ed                	xor    ebp,ebp
c0007bfa:	57                   	push   edi
c0007bfb:	56                   	push   esi
c0007bfc:	53                   	push   ebx
c0007bfd:	31 db                	xor    ebx,ebx
c0007bff:	83 ec 1c             	sub    esp,0x1c
c0007c02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c06:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007c0e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007c14:	31 c0                	xor    eax,eax
c0007c16:	c1 ef 0c             	shr    edi,0xc
c0007c19:	eb 1b                	jmp    c0007c36 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1b:	85 c0                	test   eax,eax
c0007c1d:	75 06                	jne    c0007c25 <Phys::allocateDMA(unsigned long)+0x2e>
c0007c1f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c23:	89 dd                	mov    ebp,ebx
c0007c25:	8d 70 01             	lea    esi,[eax+0x1]
c0007c28:	39 f7                	cmp    edi,esi
c0007c2a:	74 37                	je     c0007c63 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c2c:	89 f0                	mov    eax,esi
c0007c2e:	83 c3 01             	add    ebx,0x1
c0007c31:	83 fb 0f             	cmp    ebx,0xf
c0007c34:	7f 13                	jg     c0007c49 <Phys::allocateDMA(unsigned long)+0x52>
c0007c36:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c3d:	74 dc                	je     c0007c1b <Phys::allocateDMA(unsigned long)+0x24>
c0007c3f:	31 c0                	xor    eax,eax
c0007c41:	83 c3 01             	add    ebx,0x1
c0007c44:	83 fb 0f             	cmp    ebx,0xf
c0007c47:	7e ed                	jle    c0007c36 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c49:	83 ec 0c             	sub    esp,0xc
c0007c4c:	68 d8 0d 02 c0       	push   0xc0020dd8
c0007c51:	e8 41 9a 00 00       	call   c0011697 <KePanic(char const*)>
c0007c56:	83 c4 10             	add    esp,0x10
c0007c59:	31 c0                	xor    eax,eax
c0007c5b:	83 c4 1c             	add    esp,0x1c
c0007c5e:	5b                   	pop    ebx
c0007c5f:	5e                   	pop    esi
c0007c60:	5f                   	pop    edi
c0007c61:	5d                   	pop    ebp
c0007c62:	c3                   	ret    
c0007c63:	89 e9                	mov    ecx,ebp
c0007c65:	c1 f9 04             	sar    ecx,0x4
c0007c68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c6c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c70:	89 ca                	mov    edx,ecx
c0007c72:	83 ea 01             	sub    edx,0x1
c0007c75:	79 03                	jns    c0007c7a <Phys::allocateDMA(unsigned long)+0x83>
c0007c77:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c7a:	c1 fa 04             	sar    edx,0x4
c0007c7d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c81:	74 08                	je     c0007c8b <Phys::allocateDMA(unsigned long)+0x94>
c0007c83:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c87:	31 c0                	xor    eax,eax
c0007c89:	eb b6                	jmp    c0007c41 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c8b:	85 f6                	test   esi,esi
c0007c8d:	74 17                	je     c0007ca6 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c95:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c9c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9f:	83 c2 01             	add    edx,0x1
c0007ca2:	39 d0                	cmp    eax,edx
c0007ca4:	75 f6                	jne    c0007c9c <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca6:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007caf:	01 f8                	add    eax,edi
c0007cb1:	85 d2                	test   edx,edx
c0007cb3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cb8:	74 17                	je     c0007cd1 <Phys::allocateDMA(unsigned long)+0xda>
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	68 d8 0d 02 c0       	push   0xc0020dd8
c0007cc2:	e8 d0 99 00 00       	call   c0011697 <KePanic(char const*)>
c0007cc7:	83 c4 10             	add    esp,0x10
c0007cca:	89 f0                	mov    eax,esi
c0007ccc:	e9 5d ff ff ff       	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x37>
c0007cd1:	c1 e5 0c             	shl    ebp,0xc
c0007cd4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cda:	e9 7c ff ff ff       	jmp    c0007c5b <Phys::allocateDMA(unsigned long)+0x64>

c0007cdf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cee:	c1 ea 0c             	shr    edx,0xc
c0007cf1:	29 d0                	sub    eax,edx
c0007cf3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cfc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d01:	c1 e8 0c             	shr    eax,0xc
c0007d04:	85 d2                	test   edx,edx
c0007d06:	74 11                	je     c0007d19 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d08:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d0d:	01 c2                	add    edx,eax
c0007d0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	39 d0                	cmp    eax,edx
c0007d17:	75 f6                	jne    c0007d0f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d19:	c3                   	ret    

c0007d1a <Phys::setPageState(unsigned long, bool)>:
c0007d1a:	57                   	push   edi
c0007d1b:	56                   	push   esi
c0007d1c:	8b 35 6c 37 02 c0    	mov    esi,DWORD PTR ds:0xc002376c
c0007d22:	53                   	push   ebx
c0007d23:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d30:	0f b6 c0             	movzx  eax,al
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	d3 c3                	rol    ebx,cl
c0007d3d:	01 d6                	add    esi,edx
c0007d3f:	d3 e0                	shl    eax,cl
c0007d41:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d44:	21 fb                	and    ebx,edi
c0007d46:	88 1e                	mov    BYTE PTR [esi],bl
c0007d48:	8b 1d 6c 37 02 c0    	mov    ebx,DWORD PTR ds:0xc002376c
c0007d4e:	01 da                	add    edx,ebx
c0007d50:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d52:	09 c8                	or     eax,ecx
c0007d54:	88 02                	mov    BYTE PTR [edx],al
c0007d56:	5b                   	pop    ebx
c0007d57:	5e                   	pop    esi
c0007d58:	5f                   	pop    edi
c0007d59:	c3                   	ret    

c0007d5a <Phys::getPageState(unsigned long)>:
c0007d5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d5e:	8b 15 6c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002376c
c0007d64:	89 c8                	mov    eax,ecx
c0007d66:	83 e1 07             	and    ecx,0x7
c0007d69:	c1 e8 03             	shr    eax,0x3
c0007d6c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d70:	d3 f8                	sar    eax,cl
c0007d72:	83 e0 01             	and    eax,0x1
c0007d75:	c3                   	ret    

c0007d76 <Phys::freePage(unsigned long)>:
c0007d76:	53                   	push   ebx
c0007d77:	83 ec 08             	sub    esp,0x8
c0007d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d84:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8a:	76 41                	jbe    c0007dcd <Phys::freePage(unsigned long)+0x57>
c0007d8c:	c1 e8 0c             	shr    eax,0xc
c0007d8f:	50                   	push   eax
c0007d90:	89 c3                	mov    ebx,eax
c0007d92:	e8 c3 ff ff ff       	call   c0007d5a <Phys::getPageState(unsigned long)>
c0007d97:	5a                   	pop    edx
c0007d98:	84 c0                	test   al,al
c0007d9a:	74 20                	je     c0007dbc <Phys::freePage(unsigned long)+0x46>
c0007d9c:	83 ec 08             	sub    esp,0x8
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	6a 00                	push   0x0
c0007da6:	83 e8 01             	sub    eax,0x1
c0007da9:	53                   	push   ebx
c0007daa:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007daf:	e8 66 ff ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0007db4:	83 c4 10             	add    esp,0x10
c0007db7:	83 c4 08             	add    esp,0x8
c0007dba:	5b                   	pop    ebx
c0007dbb:	c3                   	ret    
c0007dbc:	c7 44 24 10 7d 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e7d
c0007dc4:	83 c4 08             	add    esp,0x8
c0007dc7:	5b                   	pop    ebx
c0007dc8:	e9 ca 98 00 00       	jmp    c0011697 <KePanic(char const*)>
c0007dcd:	68 00 10 00 00       	push   0x1000
c0007dd2:	50                   	push   eax
c0007dd3:	e8 07 ff ff ff       	call   c0007cdf <Phys::freeDMA(unsigned long, unsigned long)>
c0007dd8:	59                   	pop    ecx
c0007dd9:	5b                   	pop    ebx
c0007dda:	83 c4 08             	add    esp,0x8
c0007ddd:	5b                   	pop    ebx
c0007dde:	c3                   	ret    

c0007ddf <Phys::allocatePage()>:
c0007ddf:	56                   	push   esi
c0007de0:	53                   	push   ebx
c0007de1:	83 ec 14             	sub    esp,0x14
c0007de4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dea:	89 f3                	mov    ebx,esi
c0007dec:	eb 0a                	jmp    c0007df8 <Phys::allocatePage()+0x19>
c0007dee:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df4:	39 de                	cmp    esi,ebx
c0007df6:	74 26                	je     c0007e1e <Phys::allocatePage()+0x3f>
c0007df8:	53                   	push   ebx
c0007df9:	e8 5c ff ff ff       	call   c0007d5a <Phys::getPageState(unsigned long)>
c0007dfe:	5a                   	pop    edx
c0007dff:	84 c0                	test   al,al
c0007e01:	74 67                	je     c0007e6a <Phys::allocatePage()+0x8b>
c0007e03:	83 c3 01             	add    ebx,0x1
c0007e06:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0c:	75 e0                	jne    c0007dee <Phys::allocatePage()+0xf>
c0007e0e:	31 db                	xor    ebx,ebx
c0007e10:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1a:	39 de                	cmp    esi,ebx
c0007e1c:	75 da                	jne    c0007df8 <Phys::allocatePage()+0x19>
c0007e1e:	83 ec 0c             	sub    esp,0xc
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 f0 01             	xor    eax,0x1
c0007e29:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e36:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3c:	50                   	push   eax
c0007e3d:	e8 a8 27 00 00       	call   c000a5ea <VAS::scanForEviction()>
c0007e42:	83 c4 10             	add    esp,0x10
c0007e45:	85 c0                	test   eax,eax
c0007e47:	75 48                	jne    c0007e91 <Phys::allocatePage()+0xb2>
c0007e49:	83 ec 0c             	sub    esp,0xc
c0007e4c:	68 00 0e 02 c0       	push   0xc0020e00
c0007e51:	e8 41 98 00 00       	call   c0011697 <KePanic(char const*)>
c0007e56:	83 c4 10             	add    esp,0x10
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	53                   	push   ebx
c0007e60:	e8 f5 fe ff ff       	call   c0007d5a <Phys::getPageState(unsigned long)>
c0007e65:	5a                   	pop    edx
c0007e66:	84 c0                	test   al,al
c0007e68:	75 99                	jne    c0007e03 <Phys::allocatePage()+0x24>
c0007e6a:	6a 01                	push   0x1
c0007e6c:	53                   	push   ebx
c0007e6d:	e8 a8 fe ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0007e72:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e78:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e7d:	83 c2 01             	add    edx,0x1
c0007e80:	59                   	pop    ecx
c0007e81:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e87:	c1 e0 0c             	shl    eax,0xc
c0007e8a:	5b                   	pop    ebx
c0007e8b:	83 c4 14             	add    esp,0x14
c0007e8e:	5b                   	pop    ebx
c0007e8f:	5e                   	pop    esi
c0007e90:	c3                   	ret    
c0007e91:	83 ec 08             	sub    esp,0x8
c0007e94:	89 c2                	mov    edx,eax
c0007e96:	6a 01                	push   0x1
c0007e98:	c1 ea 0c             	shr    edx,0xc
c0007e9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e9f:	52                   	push   edx
c0007ea0:	e8 75 fe ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0007ea5:	83 c4 10             	add    esp,0x10
c0007ea8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eac:	eb dd                	jmp    c0007e8b <Phys::allocatePage()+0xac>

c0007eae <Phys::allocateContiguousPages(int)>:
c0007eae:	57                   	push   edi
c0007eaf:	56                   	push   esi
c0007eb0:	53                   	push   ebx
c0007eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb5:	fa                   	cli    
c0007eb6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebb:	31 db                	xor    ebx,ebx
c0007ebd:	83 c0 01             	add    eax,0x1
c0007ec0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec5:	85 db                	test   ebx,ebx
c0007ec7:	75 11                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x2c>
c0007ec9:	e8 11 ff ff ff       	call   c0007ddf <Phys::allocatePage()>
c0007ece:	83 fe 01             	cmp    esi,0x1
c0007ed1:	89 c7                	mov    edi,eax
c0007ed3:	74 21                	je     c0007ef6 <Phys::allocateContiguousPages(int)+0x48>
c0007ed5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eda:	e8 00 ff ff ff       	call   c0007ddf <Phys::allocatePage()>
c0007edf:	89 da                	mov    edx,ebx
c0007ee1:	c1 e2 0c             	shl    edx,0xc
c0007ee4:	01 fa                	add    edx,edi
c0007ee6:	39 c2                	cmp    edx,eax
c0007ee8:	74 22                	je     c0007f0c <Phys::allocateContiguousPages(int)+0x5e>
c0007eea:	bb 01 00 00 00       	mov    ebx,0x1
c0007eef:	89 c7                	mov    edi,eax
c0007ef1:	83 fe 01             	cmp    esi,0x1
c0007ef4:	75 e4                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x2c>
c0007ef6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efb:	83 e8 01             	sub    eax,0x1
c0007efe:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f03:	75 01                	jne    c0007f06 <Phys::allocateContiguousPages(int)+0x58>
c0007f05:	fb                   	sti    
c0007f06:	89 f8                	mov    eax,edi
c0007f08:	5b                   	pop    ebx
c0007f09:	5e                   	pop    esi
c0007f0a:	5f                   	pop    edi
c0007f0b:	c3                   	ret    
c0007f0c:	83 c3 01             	add    ebx,0x1
c0007f0f:	39 f3                	cmp    ebx,esi
c0007f11:	75 b2                	jne    c0007ec5 <Phys::allocateContiguousPages(int)+0x17>
c0007f13:	eb e1                	jmp    c0007ef6 <Phys::allocateContiguousPages(int)+0x48>

c0007f15 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f15:	56                   	push   esi
c0007f16:	53                   	push   ebx
c0007f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1b:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f21:	73 06                	jae    c0007f29 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f23:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f2d:	c1 eb 0c             	shr    ebx,0xc
c0007f30:	c1 e8 0c             	shr    eax,0xc
c0007f33:	39 d8                	cmp    eax,ebx
c0007f35:	73 13                	jae    c0007f4a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f37:	6a 00                	push   0x0
c0007f39:	8d 70 01             	lea    esi,[eax+0x1]
c0007f3c:	50                   	push   eax
c0007f3d:	e8 d8 fd ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0007f42:	5a                   	pop    edx
c0007f43:	89 f0                	mov    eax,esi
c0007f45:	59                   	pop    ecx
c0007f46:	39 f3                	cmp    ebx,esi
c0007f48:	75 ed                	jne    c0007f37 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4a:	5b                   	pop    ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	c3                   	ret    

c0007f4d <Phys::physicalMemorySetup(unsigned int)>:
c0007f4d:	55                   	push   ebp
c0007f4e:	57                   	push   edi
c0007f4f:	56                   	push   esi
c0007f50:	53                   	push   ebx
c0007f51:	83 ec 40             	sub    esp,0x40
c0007f54:	6a 10                	push   0x10
c0007f56:	6a 00                	push   0x0
c0007f58:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f5d:	e8 8e 85 ff ff       	call   c00004f0 <memset>
c0007f62:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f6b:	05 00 10 00 00       	add    eax,0x1000
c0007f70:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f74:	5b                   	pop    ebx
c0007f75:	31 db                	xor    ebx,ebx
c0007f77:	5e                   	pop    esi
c0007f78:	50                   	push   eax
c0007f79:	68 93 0e 02 c0       	push   0xc0020e93
c0007f7e:	e8 e2 29 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	83 ec 08             	sub    esp,0x8
c0007f89:	6a 01                	push   0x1
c0007f8b:	53                   	push   ebx
c0007f8c:	83 c3 01             	add    ebx,0x1
c0007f8f:	e8 86 fd ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0007f94:	83 c4 10             	add    esp,0x10
c0007f97:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f9d:	75 e7                	jne    c0007f86 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f9f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fad:	c1 e0 08             	shl    eax,0x8
c0007fb0:	09 c2                	or     edx,eax
c0007fb2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007fb6:	0f 84 98 01 00 00    	je     c0008154 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fc0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fd1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fd9:	eb 1c                	jmp    c0007ff7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fdb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fdf:	83 c3 18             	add    ebx,0x18
c0007fe2:	83 c6 01             	add    esi,0x1
c0007fe5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fed:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007ff1:	0f 84 6d 01 00 00    	je     c0008164 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007ff7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007ffa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007ffd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008004:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008008:	8b 33                	mov    esi,DWORD PTR [ebx]
c000800a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000800d:	01 f0                	add    eax,esi
c000800f:	55                   	push   ebp
c0008010:	11 fa                	adc    edx,edi
c0008012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008016:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000801a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000801e:	51                   	push   ecx
c000801f:	56                   	push   esi
c0008020:	68 30 0e 02 c0       	push   0xc0020e30
c0008025:	e8 3b 29 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000802a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000802e:	83 c4 10             	add    esp,0x10
c0008031:	09 f8                	or     eax,edi
c0008033:	0f 85 2b 01 00 00    	jne    c0008164 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008039:	83 fd 01             	cmp    ebp,0x1
c000803c:	75 9d                	jne    c0007fdb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000803e:	ba 00 00 08 00       	mov    edx,0x80000
c0008043:	89 c1                	mov    ecx,eax
c0008045:	39 f2                	cmp    edx,esi
c0008047:	19 f9                	sbb    ecx,edi
c0008049:	0f 82 ab 00 00 00    	jb     c00080fa <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000804f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008053:	89 c1                	mov    ecx,eax
c0008055:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008059:	0f 83 9b 00 00 00    	jae    c00080fa <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000805f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008064:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008068:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000806c:	39 fa                	cmp    edx,edi
c000806e:	19 e8                	sbb    eax,ebp
c0008070:	0f 82 b0 01 00 00    	jb     c0008226 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008076:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000807a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000807e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008084:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008089:	83 d5 ff             	adc    ebp,0xffffffff
c000808c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008090:	31 c0                	xor    eax,eax
c0008092:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008096:	39 fa                	cmp    edx,edi
c0008098:	89 c1                	mov    ecx,eax
c000809a:	19 e9                	sbb    ecx,ebp
c000809c:	0f 83 39 ff ff ff    	jae    c0007fdb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080a2:	be 00 00 08 00       	mov    esi,0x80000
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00080ae:	57                   	push   edi
c00080af:	56                   	push   esi
c00080b0:	68 54 0e 02 c0       	push   0xc0020e54
c00080b5:	e8 ab 28 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00080ba:	5d                   	pop    ebp
c00080bb:	58                   	pop    eax
c00080bc:	57                   	push   edi
c00080bd:	56                   	push   esi
c00080be:	e8 52 fe ff ff       	call   c0007f15 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080cb:	83 c4 0c             	add    esp,0xc
c00080ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080d2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080d8:	01 d0                	add    eax,edx
c00080da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080e1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080e6:	52                   	push   edx
c00080e7:	50                   	push   eax
c00080e8:	68 b9 0e 02 c0       	push   0xc0020eb9
c00080ed:	e8 73 28 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00080f2:	83 c4 10             	add    esp,0x10
c00080f5:	e9 e1 fe ff ff       	jmp    c0007fdb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080fa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008102:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008106:	39 ea                	cmp    edx,ebp
c0008108:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000810c:	0f 82 c9 fe ff ff    	jb     c0007fdb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008112:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008117:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000811b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000811f:	0f 83 b6 fe ff ff    	jae    c0007fdb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008125:	39 ee                	cmp    esi,ebp
c0008127:	89 f8                	mov    eax,edi
c0008129:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000812d:	0f 83 74 ff ff ff    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008133:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008137:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000813b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000813f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008143:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008147:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000814b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000814f:	e9 53 ff ff ff       	jmp    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008154:	83 ec 0c             	sub    esp,0xc
c0008157:	68 ab 0e 02 c0       	push   0xc0020eab
c000815c:	e8 36 95 00 00       	call   c0011697 <KePanic(char const*)>
c0008161:	83 c4 10             	add    esp,0x10
c0008164:	83 ec 08             	sub    esp,0x8
c0008167:	bb 60 00 00 00       	mov    ebx,0x60
c000816c:	6a 00                	push   0x0
c000816e:	6a 06                	push   0x6
c0008170:	e8 a5 fb ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0008175:	58                   	pop    eax
c0008176:	5a                   	pop    edx
c0008177:	6a 00                	push   0x0
c0008179:	6a 07                	push   0x7
c000817b:	e8 9a fb ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0008180:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008186:	83 c4 10             	add    esp,0x10
c0008189:	83 c1 02             	add    ecx,0x2
c000818c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008192:	83 ec 08             	sub    esp,0x8
c0008195:	6a 00                	push   0x0
c0008197:	53                   	push   ebx
c0008198:	83 c3 01             	add    ebx,0x1
c000819b:	e8 7a fb ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00081a9:	75 e7                	jne    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081ab:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b0:	bb 40 01 00 00       	mov    ebx,0x140
c00081b5:	83 c0 20             	add    eax,0x20
c00081b8:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081bd:	eb 26                	jmp    c00081e5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00081bf:	83 ec 08             	sub    esp,0x8
c00081c2:	6a 00                	push   0x0
c00081c4:	53                   	push   ebx
c00081c5:	83 c3 01             	add    ebx,0x1
c00081c8:	e8 4d fb ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c00081cd:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081d2:	83 c4 10             	add    esp,0x10
c00081d5:	83 c0 01             	add    eax,0x1
c00081d8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081de:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081e3:	74 07                	je     c00081ec <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081e5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ea:	7e d3                	jle    c00081bf <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081ec:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081f6:	7f 26                	jg     c000821e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081f8:	83 ec 08             	sub    esp,0x8
c00081fb:	6a 00                	push   0x0
c00081fd:	53                   	push   ebx
c00081fe:	83 c3 01             	add    ebx,0x1
c0008201:	e8 14 fb ff ff       	call   c0007d1a <Phys::setPageState(unsigned long, bool)>
c0008206:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000820b:	83 c4 10             	add    esp,0x10
c000820e:	83 c0 01             	add    eax,0x1
c0008211:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	75 d3                	jne    c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000821e:	83 c4 3c             	add    esp,0x3c
c0008221:	5b                   	pop    ebx
c0008222:	5e                   	pop    esi
c0008223:	5f                   	pop    edi
c0008224:	5d                   	pop    ebp
c0008225:	c3                   	ret    
c0008226:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000822e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008236:	e9 3b fe ff ff       	jmp    c0008076 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000823b:	90                   	nop

c000823c <Pipe::isAtty()>:
c000823c:	31 c0                	xor    eax,eax
c000823e:	c3                   	ret    
c000823f:	90                   	nop

c0008240 <Pipe::~Pipe()>:
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c0008248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824c:	89 10                	mov    DWORD PTR [eax],edx
c000824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	50                   	push   eax
c0008256:	e8 69 11 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <Pipe::~Pipe()>:
c0008264:	83 ec 0c             	sub    esp,0xc
c0008267:	83 ec 0c             	sub    esp,0xc
c000826a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826e:	e8 cd ff ff ff       	call   c0008240 <Pipe::~Pipe()>
c0008273:	83 c4 10             	add    esp,0x10
c0008276:	83 ec 08             	sub    esp,0x8
c0008279:	6a 20                	push   0x20
c000827b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827f:	e8 b4 25 00 00       	call   c000a838 <operator delete(void*, unsigned long)>
c0008284:	83 c4 10             	add    esp,0x10
c0008287:	83 c4 0c             	add    esp,0xc
c000828a:	c3                   	ret    
c000828b:	90                   	nop

c000828c <Pipe::write(unsigned long long, void*, int*)>:
c000828c:	55                   	push   ebp
c000828d:	57                   	push   edi
c000828e:	56                   	push   esi
c000828f:	53                   	push   ebx
c0008290:	83 ec 1c             	sub    esp,0x1c
c0008293:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a9:	89 d8                	mov    eax,ebx
c00082ab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082ae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082b2:	89 d6                	mov    esi,edx
c00082b4:	89 d7                	mov    edi,edx
c00082b6:	c1 ff 1f             	sar    edi,0x1f
c00082b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00082bc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082c0:	c1 f8 1f             	sar    eax,0x1f
c00082c3:	39 f3                	cmp    ebx,esi
c00082c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082cd:	19 f8                	sbb    eax,edi
c00082cf:	b8 01 00 00 00       	mov    eax,0x1
c00082d4:	72 6e                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082e2:	29 d3                	sub    ebx,edx
c00082e4:	89 d7                	mov    edi,edx
c00082e6:	89 de                	mov    esi,ebx
c00082e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082eb:	c1 fb 1f             	sar    ebx,0x1f
c00082ee:	39 f2                	cmp    edx,esi
c00082f0:	19 d8                	sbb    eax,ebx
c00082f2:	b8 00 00 00 00       	mov    eax,0x0
c00082f7:	72 04                	jb     c00082fd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082f9:	89 d0                	mov    eax,edx
c00082fb:	29 f0                	sub    eax,esi
c00082fd:	89 d3                	mov    ebx,edx
c00082ff:	29 c3                	sub    ebx,eax
c0008301:	74 0b                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008303:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008306:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830a:	89 d9                	mov    ecx,ebx
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 c0                	test   eax,eax
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008312:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008316:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008319:	89 de                	mov    esi,ebx
c000831b:	89 c1                	mov    ecx,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 d5 0e 02 c0       	push   0xc0020ed5
c0008331:	e8 61 93 00 00       	call   c0011697 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 fd dd 00 00       	call   c001617c <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	39 f8                	cmp    eax,edi
c0008391:	89 d1                	mov    ecx,edx
c0008393:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008396:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000839a:	19 f1                	sbb    ecx,esi
c000839c:	73 07                	jae    c00083a5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000839e:	89 04 24             	mov    DWORD PTR [esp],eax
c00083a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00083a5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083a8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ab:	29 f7                	sub    edi,esi
c00083ad:	89 f8                	mov    eax,edi
c00083af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00083b3:	99                   	cdq    
c00083b4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00083b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083bb:	19 d0                	sbb    eax,edx
c00083bd:	73 07                	jae    c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00083bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083c6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083d4:	74 0d                	je     c00083e3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083d6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083e3:	85 d2                	test   edx,edx
c00083e5:	74 11                	je     c00083f8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083eb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ee:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083f2:	89 d1                	mov    ecx,edx
c00083f4:	89 c7                	mov    edi,eax
c00083f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083fb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083fe:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008401:	99                   	cdq    
c0008402:	89 f7                	mov    edi,esi
c0008404:	03 04 24             	add    eax,DWORD PTR [esp]
c0008407:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000840b:	c1 ff 1f             	sar    edi,0x1f
c000840e:	57                   	push   edi
c000840f:	56                   	push   esi
c0008410:	52                   	push   edx
c0008411:	50                   	push   eax
c0008412:	e8 d9 74 01 00       	call   c001f8f0 <__umoddi3>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000841d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008422:	75 10                	jne    c0008434 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008424:	83 ec 0c             	sub    esp,0xc
c0008427:	68 f2 0e 02 c0       	push   0xc0020ef2
c000842c:	e8 66 92 00 00       	call   c0011697 <KePanic(char const*)>
c0008431:	83 c4 10             	add    esp,0x10
c0008434:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008438:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000843b:	89 10                	mov    DWORD PTR [eax],edx
c000843d:	83 c4 1c             	add    esp,0x1c
c0008440:	31 c0                	xor    eax,eax
c0008442:	5b                   	pop    ebx
c0008443:	5e                   	pop    esi
c0008444:	5f                   	pop    edi
c0008445:	5d                   	pop    ebp
c0008446:	c3                   	ret    
c0008447:	90                   	nop

c0008448 <Pipe::Pipe(int)>:
c0008448:	83 ec 0c             	sub    esp,0xc
c000844b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844f:	83 ec 08             	sub    esp,0x8
c0008452:	6a 00                	push   0x0
c0008454:	50                   	push   eax
c0008455:	e8 84 0d 00 00       	call   c00091de <UnixFile::UnixFile(int)>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c0008462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008466:	89 10                	mov    DWORD PTR [eax],edx
c0008468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008470:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008477:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000847e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008482:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008489:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000848d:	83 ec 0c             	sub    esp,0xc
c0008490:	50                   	push   eax
c0008491:	e8 40 f6 ff ff       	call   c0007ad6 <malloc>
c0008496:	83 c4 10             	add    esp,0x10
c0008499:	89 c2                	mov    edx,eax
c000849b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084aa:	90                   	nop
c00084ab:	83 c4 0c             	add    esp,0xc
c00084ae:	c3                   	ret    
c00084af:	90                   	nop

c00084b0 <VgaText::isAtty()>:
c00084b0:	b0 01                	mov    al,0x1
c00084b2:	c3                   	ret    
c00084b3:	90                   	nop

c00084b4 <VgaText::~VgaText()>:
c00084b4:	83 ec 0c             	sub    esp,0xc
c00084b7:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c00084bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c0:	89 10                	mov    DWORD PTR [eax],edx
c00084c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c6:	83 ec 0c             	sub    esp,0xc
c00084c9:	50                   	push   eax
c00084ca:	e8 f5 0e 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c00084cf:	83 c4 10             	add    esp,0x10
c00084d2:	90                   	nop
c00084d3:	83 c4 0c             	add    esp,0xc
c00084d6:	c3                   	ret    
c00084d7:	90                   	nop

c00084d8 <VgaText::~VgaText()>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	83 ec 0c             	sub    esp,0xc
c00084de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e2:	e8 cd ff ff ff       	call   c00084b4 <VgaText::~VgaText()>
c00084e7:	83 c4 10             	add    esp,0x10
c00084ea:	83 ec 08             	sub    esp,0x8
c00084ed:	68 84 01 00 00       	push   0x184
c00084f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f6:	e8 3d 23 00 00       	call   c000a838 <operator delete(void*, unsigned long)>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	83 c4 0c             	add    esp,0xc
c0008501:	c3                   	ret    

c0008502 <VgaText::read(unsigned long long, void*, int*)>:
c0008502:	83 ec 10             	sub    esp,0x10
c0008505:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008509:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000850d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008511:	e8 aa 53 00 00       	call   c000d8c0 <readKeyboard(VgaText*, char*, unsigned long)>
c0008516:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000851a:	89 02                	mov    DWORD PTR [edx],eax
c000851c:	31 c0                	xor    eax,eax
c000851e:	83 c4 1c             	add    esp,0x1c
c0008521:	c3                   	ret    

c0008522 <setTerminalScrollLock(bool)>:
c0008522:	c3                   	ret    

c0008523 <doTerminalCycle()>:
c0008523:	c3                   	ret    

c0008524 <addToTerminalCycle(VgaText*)>:
c0008524:	c3                   	ret    

c0008525 <scrollTerminalScrollLock(int)>:
c0008525:	c3                   	ret    

c0008526 <VgaText::updateTitle()>:
c0008526:	c3                   	ret    
c0008527:	90                   	nop

c0008528 <VgaText::load()>:
c0008528:	c3                   	ret    
c0008529:	90                   	nop

c000852a <VgaText::updateCursor()>:
c000852a:	83 ec 14             	sub    esp,0x14
c000852d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008531:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008534:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008537:	e8 f8 09 01 00       	call   c0018f34 <HalConsoleCursorUpdate(int, int)>
c000853c:	83 c4 1c             	add    esp,0x1c
c000853f:	c3                   	ret    

c0008540 <VgaText::doANSI_SGR(int)>:
c0008540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008548:	85 d2                	test   edx,edx
c000854a:	75 0b                	jne    c0008557 <VgaText::doANSI_SGR(int)+0x17>
c000854c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000854f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008552:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008555:	eb 59                	jmp    c00085b0 <VgaText::doANSI_SGR(int)+0x70>
c0008557:	83 fa 07             	cmp    edx,0x7
c000855a:	75 0b                	jne    c0008567 <VgaText::doANSI_SGR(int)+0x27>
c000855c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000855f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008562:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008565:	eb 49                	jmp    c00085b0 <VgaText::doANSI_SGR(int)+0x70>
c0008567:	83 fa 1b             	cmp    edx,0x1b
c000856a:	74 e0                	je     c000854c <VgaText::doANSI_SGR(int)+0xc>
c000856c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000856f:	83 f9 07             	cmp    ecx,0x7
c0008572:	77 09                	ja     c000857d <VgaText::doANSI_SGR(int)+0x3d>
c0008574:	8b 14 8d a0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc860]
c000857b:	eb 20                	jmp    c000859d <VgaText::doANSI_SGR(int)+0x5d>
c000857d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008580:	83 f9 07             	cmp    ecx,0x7
c0008583:	77 09                	ja     c000858e <VgaText::doANSI_SGR(int)+0x4e>
c0008585:	8b 14 8d a0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc860]
c000858c:	eb 22                	jmp    c00085b0 <VgaText::doANSI_SGR(int)+0x70>
c000858e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008591:	83 f9 07             	cmp    ecx,0x7
c0008594:	77 0b                	ja     c00085a1 <VgaText::doANSI_SGR(int)+0x61>
c0008596:	8b 14 95 58 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9a8]
c000859d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a0:	c3                   	ret    
c00085a1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085a4:	83 f9 07             	cmp    ecx,0x7
c00085a7:	77 0a                	ja     c00085b3 <VgaText::doANSI_SGR(int)+0x73>
c00085a9:	8b 14 95 30 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9d0]
c00085b0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b3:	c3                   	ret    

c00085b4 <VgaText::setDefaultBgColour(VgaColour)>:
c00085b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085bc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085bf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c2:	c3                   	ret    
c00085c3:	90                   	nop

c00085c4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085d2:	c3                   	ret    
c00085d3:	90                   	nop

c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085d4:	53                   	push   ebx
c00085d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085e1:	51                   	push   ecx
c00085e2:	e8 cd ff ff ff       	call   c00085b4 <VgaText::setDefaultBgColour(VgaColour)>
c00085e7:	58                   	pop    eax
c00085e8:	5a                   	pop    edx
c00085e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085f1:	5b                   	pop    ebx
c00085f2:	eb d0                	jmp    c00085c4 <VgaText::setDefaultFgColour(VgaColour)>

c00085f4 <VgaText::setTitleTextColour(VgaColour)>:
c00085f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::setTitleColour(VgaColour)>:
c0008600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008608:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000860b:	c3                   	ret    

c000860c <VgaText::setTitle(char*)>:
c000860c:	c3                   	ret    
c000860d:	90                   	nop

c000860e <VgaText::combineColours(unsigned char, unsigned char)>:
c000860e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008612:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008617:	83 e0 0f             	and    eax,0xf
c000861a:	c1 e2 04             	shl    edx,0x4
c000861d:	09 d0                	or     eax,edx
c000861f:	c3                   	ret    

c0008620 <VgaText::scrollScreen()>:
c0008620:	55                   	push   ebp
c0008621:	57                   	push   edi
c0008622:	56                   	push   esi
c0008623:	be 01 00 00 00       	mov    esi,0x1
c0008628:	53                   	push   ebx
c0008629:	83 ec 0c             	sub    esp,0xc
c000862c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008630:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008633:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008639:	31 ff                	xor    edi,edi
c000863b:	01 e9                	add    ecx,ebp
c000863d:	8a 01                	mov    al,BYTE PTR [ecx]
c000863f:	83 fe 18             	cmp    esi,0x18
c0008642:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008648:	75 20                	jne    c000866a <VgaText::scrollScreen()+0x4a>
c000864a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008650:	74 15                	je     c0008667 <VgaText::scrollScreen()+0x47>
c0008652:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008656:	50                   	push   eax
c0008657:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000865b:	50                   	push   eax
c000865c:	e8 ad ff ff ff       	call   c000860e <VgaText::combineColours(unsigned char, unsigned char)>
c0008661:	5a                   	pop    edx
c0008662:	5a                   	pop    edx
c0008663:	88 01                	mov    BYTE PTR [ecx],al
c0008665:	eb 03                	jmp    c000866a <VgaText::scrollScreen()+0x4a>
c0008667:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000866a:	47                   	inc    edi
c000866b:	41                   	inc    ecx
c000866c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008672:	75 c9                	jne    c000863d <VgaText::scrollScreen()+0x1d>
c0008674:	46                   	inc    esi
c0008675:	83 fe 19             	cmp    esi,0x19
c0008678:	75 b9                	jne    c0008633 <VgaText::scrollScreen()+0x13>
c000867a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008680:	75 1f                	jne    c00086a1 <VgaText::scrollScreen()+0x81>
c0008682:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008686:	74 05                	je     c000868d <VgaText::scrollScreen()+0x6d>
c0008688:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000868b:	eb 14                	jmp    c00086a1 <VgaText::scrollScreen()+0x81>
c000868d:	50                   	push   eax
c000868e:	50                   	push   eax
c000868f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008693:	50                   	push   eax
c0008694:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008698:	50                   	push   eax
c0008699:	e8 2a 07 01 00       	call   c0018dc8 <HalConsoleScroll(int, int)>
c000869e:	83 c4 10             	add    esp,0x10
c00086a1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086a5:	83 c4 0c             	add    esp,0xc
c00086a8:	5b                   	pop    ebx
c00086a9:	5e                   	pop    esi
c00086aa:	5f                   	pop    edi
c00086ab:	5d                   	pop    ebp
c00086ac:	e9 79 fe ff ff       	jmp    c000852a <VgaText::updateCursor()>
c00086b1:	90                   	nop

c00086b2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086b7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086bc:	c1 e0 08             	shl    eax,0x8
c00086bf:	09 d0                	or     eax,edx
c00086c1:	c3                   	ret    

c00086c2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086c2:	55                   	push   ebp
c00086c3:	57                   	push   edi
c00086c4:	56                   	push   esi
c00086c5:	53                   	push   ebx
c00086c6:	83 ec 1c             	sub    esp,0x1c
c00086c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086dd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086e1:	0f b6 c3             	movzx  eax,bl
c00086e4:	50                   	push   eax
c00086e5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ea:	50                   	push   eax
c00086eb:	e8 1e ff ff ff       	call   c000860e <VgaText::combineColours(unsigned char, unsigned char)>
c00086f0:	5a                   	pop    edx
c00086f1:	0f b6 c0             	movzx  eax,al
c00086f4:	59                   	pop    ecx
c00086f5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086fa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086fe:	50                   	push   eax
c00086ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008703:	e8 aa ff ff ff       	call   c00086b2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008708:	5a                   	pop    edx
c0008709:	6b d7 50             	imul   edx,edi,0x50
c000870c:	59                   	pop    ecx
c000870d:	01 f2                	add    edx,esi
c000870f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008712:	0f b7 d2             	movzx  edx,dx
c0008715:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008719:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c000871f:	75 28                	jne    c0008749 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008725:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008729:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000872d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008731:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008739:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000873d:	83 c4 1c             	add    esp,0x1c
c0008740:	5b                   	pop    ebx
c0008741:	5e                   	pop    esi
c0008742:	5f                   	pop    edi
c0008743:	5d                   	pop    ebp
c0008744:	e9 87 07 01 00       	jmp    c0018ed0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008749:	83 c4 1c             	add    esp,0x1c
c000874c:	5b                   	pop    ebx
c000874d:	5e                   	pop    esi
c000874e:	5f                   	pop    edi
c000874f:	5d                   	pop    ebp
c0008750:	c3                   	ret    
c0008751:	90                   	nop

c0008752 <VgaText::getCursorX()>:
c0008752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008756:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008759:	c3                   	ret    

c000875a <VgaText::getCursorY()>:
c000875a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008761:	c3                   	ret    

c0008762 <VgaText::setCursor(int, int)>:
c0008762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000876a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000876d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008771:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008774:	e9 b1 fd ff ff       	jmp    c000852a <VgaText::updateCursor()>

c0008779 <setActiveTerminal(VgaText*)>:
c0008779:	53                   	push   ebx
c000877a:	83 ec 08             	sub    esp,0x8
c000877d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008781:	85 db                	test   ebx,ebx
c0008783:	75 11                	jne    c0008796 <setActiveTerminal(VgaText*)+0x1d>
c0008785:	c7 44 24 10 2c 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f2c
c000878d:	83 c4 08             	add    esp,0x8
c0008790:	5b                   	pop    ebx
c0008791:	e9 01 8f 00 00       	jmp    c0011697 <KePanic(char const*)>
c0008796:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000879b:	85 c0                	test   eax,eax
c000879d:	74 0c                	je     c00087ab <setActiveTerminal(VgaText*)+0x32>
c000879f:	83 ec 0c             	sub    esp,0xc
c00087a2:	50                   	push   eax
c00087a3:	e8 82 fd ff ff       	call   c000852a <VgaText::updateCursor()>
c00087a8:	83 c4 10             	add    esp,0x10
c00087ab:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087b1:	50                   	push   eax
c00087b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087b8:	53                   	push   ebx
c00087b9:	e8 a4 ff ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c00087be:	83 c4 18             	add    esp,0x18
c00087c1:	5b                   	pop    ebx
c00087c2:	c3                   	ret    
c00087c3:	90                   	nop

c00087c4 <VgaText::clearScreen()>:
c00087c4:	57                   	push   edi
c00087c5:	56                   	push   esi
c00087c6:	31 f6                	xor    esi,esi
c00087c8:	53                   	push   ebx
c00087c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087cd:	52                   	push   edx
c00087ce:	6a 00                	push   0x0
c00087d0:	6a 00                	push   0x0
c00087d2:	53                   	push   ebx
c00087d3:	e8 8a ff ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c00087d8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087df:	83 c4 10             	add    esp,0x10
c00087e2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087e5:	7e 20                	jle    c0008807 <VgaText::clearScreen()+0x43>
c00087e7:	31 ff                	xor    edi,edi
c00087e9:	50                   	push   eax
c00087ea:	50                   	push   eax
c00087eb:	56                   	push   esi
c00087ec:	57                   	push   edi
c00087ed:	47                   	inc    edi
c00087ee:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087f1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087f4:	6a 20                	push   0x20
c00087f6:	53                   	push   ebx
c00087f7:	e8 c6 fe ff ff       	call   c00086c2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087fc:	83 c4 20             	add    esp,0x20
c00087ff:	83 ff 50             	cmp    edi,0x50
c0008802:	75 e5                	jne    c00087e9 <VgaText::clearScreen()+0x25>
c0008804:	46                   	inc    esi
c0008805:	eb db                	jmp    c00087e2 <VgaText::clearScreen()+0x1e>
c0008807:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000880e:	5b                   	pop    ebx
c000880f:	5e                   	pop    esi
c0008810:	5f                   	pop    edi
c0008811:	c3                   	ret    

c0008812 <VgaText::setCursorX(int)>:
c0008812:	83 ec 10             	sub    esp,0x10
c0008815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008819:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000881c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008820:	50                   	push   eax
c0008821:	e8 3c ff ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c0008826:	83 c4 1c             	add    esp,0x1c
c0008829:	c3                   	ret    

c000882a <VgaText::setCursorY(int)>:
c000882a:	83 ec 10             	sub    esp,0x10
c000882d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008831:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008835:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008838:	50                   	push   eax
c0008839:	e8 24 ff ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c000883e:	83 c4 1c             	add    esp,0x1c
c0008841:	c3                   	ret    

c0008842 <VgaText::incrementCursor(bool)>:
c0008842:	56                   	push   esi
c0008843:	53                   	push   ebx
c0008844:	51                   	push   ecx
c0008845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008849:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000884d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008850:	40                   	inc    eax
c0008851:	83 f8 50             	cmp    eax,0x50
c0008854:	74 05                	je     c000885b <VgaText::incrementCursor(bool)+0x19>
c0008856:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008859:	eb 24                	jmp    c000887f <VgaText::incrementCursor(bool)+0x3d>
c000885b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008865:	8d 50 01             	lea    edx,[eax+0x1]
c0008868:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000886b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000886e:	75 0f                	jne    c000887f <VgaText::incrementCursor(bool)+0x3d>
c0008870:	83 ec 0c             	sub    esp,0xc
c0008873:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008876:	53                   	push   ebx
c0008877:	e8 a4 fd ff ff       	call   c0008620 <VgaText::scrollScreen()>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	89 f0                	mov    eax,esi
c0008881:	84 c0                	test   al,al
c0008883:	74 0c                	je     c0008891 <VgaText::incrementCursor(bool)+0x4f>
c0008885:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008889:	5a                   	pop    edx
c000888a:	5b                   	pop    ebx
c000888b:	5e                   	pop    esi
c000888c:	e9 99 fc ff ff       	jmp    c000852a <VgaText::updateCursor()>
c0008891:	58                   	pop    eax
c0008892:	5b                   	pop    ebx
c0008893:	5e                   	pop    esi
c0008894:	c3                   	ret    
c0008895:	90                   	nop

c0008896 <VgaText::decrementCursor(bool)>:
c0008896:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000889a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000889e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a1:	85 c0                	test   eax,eax
c00088a3:	74 04                	je     c00088a9 <VgaText::decrementCursor(bool)+0x13>
c00088a5:	48                   	dec    eax
c00088a6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088a9:	84 c9                	test   cl,cl
c00088ab:	74 09                	je     c00088b6 <VgaText::decrementCursor(bool)+0x20>
c00088ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088b1:	e9 74 fc ff ff       	jmp    c000852a <VgaText::updateCursor()>
c00088b6:	c3                   	ret    
c00088b7:	90                   	nop

c00088b8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088b8:	53                   	push   ebx
c00088b9:	83 ec 08             	sub    esp,0x8
c00088bc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088cd:	83 f8 07             	cmp    eax,0x7
c00088d0:	75 21                	jne    c00088f3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088da:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088e2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ea:	83 c4 08             	add    esp,0x8
c00088ed:	5b                   	pop    ebx
c00088ee:	e9 18 3b 00 00       	jmp    c000c40b <Krnl::beep(int, int, bool)>
c00088f3:	83 f8 0d             	cmp    eax,0xd
c00088f6:	75 09                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ff:	eb 2d                	jmp    c000892e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008901:	83 f8 0a             	cmp    eax,0xa
c0008904:	75 31                	jne    c0008937 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008906:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008909:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008910:	8d 50 01             	lea    edx,[eax+0x1]
c0008913:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008916:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008919:	75 0f                	jne    c000892a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008921:	53                   	push   ebx
c0008922:	e8 f9 fc ff ff       	call   c0008620 <VgaText::scrollScreen()>
c0008927:	83 c4 10             	add    esp,0x10
c000892a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000892e:	83 c4 08             	add    esp,0x8
c0008931:	5b                   	pop    ebx
c0008932:	e9 f3 fb ff ff       	jmp    c000852a <VgaText::updateCursor()>
c0008937:	83 f8 08             	cmp    eax,0x8
c000893a:	75 25                	jne    c0008961 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000893c:	50                   	push   eax
c000893d:	50                   	push   eax
c000893e:	6a 01                	push   0x1
c0008940:	53                   	push   ebx
c0008941:	e8 50 ff ff ff       	call   c0008896 <VgaText::decrementCursor(bool)>
c0008946:	5a                   	pop    edx
c0008947:	59                   	pop    ecx
c0008948:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000894b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008951:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008954:	6a 20                	push   0x20
c0008956:	53                   	push   ebx
c0008957:	e8 66 fd ff ff       	call   c00086c2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000895c:	83 c4 28             	add    esp,0x28
c000895f:	5b                   	pop    ebx
c0008960:	c3                   	ret    
c0008961:	83 ec 08             	sub    esp,0x8
c0008964:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008967:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000896a:	51                   	push   ecx
c000896b:	52                   	push   edx
c000896c:	50                   	push   eax
c000896d:	53                   	push   ebx
c000896e:	e8 4f fd ff ff       	call   c00086c2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008973:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008977:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000897f:	83 c4 28             	add    esp,0x28
c0008982:	5b                   	pop    ebx
c0008983:	e9 ba fe ff ff       	jmp    c0008842 <VgaText::incrementCursor(bool)>

c0008988 <VgaText::putchar(char)>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	83 ec 10             	sub    esp,0x10
c000898e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008992:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008996:	89 f8                	mov    eax,edi
c0008998:	0f be c0             	movsx  eax,al
c000899b:	83 f8 5b             	cmp    eax,0x5b
c000899e:	75 18                	jne    c00089b8 <VgaText::putchar(char)+0x30>
c00089a0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089a4:	74 20                	je     c00089c6 <VgaText::putchar(char)+0x3e>
c00089a6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089ac:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089b3:	e9 c1 00 00 00       	jmp    c0008a79 <VgaText::putchar(char)+0xf1>
c00089b8:	83 f8 1b             	cmp    eax,0x1b
c00089bb:	75 09                	jne    c00089c6 <VgaText::putchar(char)+0x3e>
c00089bd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089c1:	e9 b3 00 00 00       	jmp    c0008a79 <VgaText::putchar(char)+0xf1>
c00089c6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089c9:	84 c9                	test   cl,cl
c00089cb:	0f 84 98 00 00 00    	je     c0008a69 <VgaText::putchar(char)+0xe1>
c00089d1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089d4:	89 f2                	mov    edx,esi
c00089d6:	80 fa 3e             	cmp    dl,0x3e
c00089d9:	77 78                	ja     c0008a53 <VgaText::putchar(char)+0xcb>
c00089db:	83 f8 6d             	cmp    eax,0x6d
c00089de:	75 47                	jne    c0008a27 <VgaText::putchar(char)+0x9f>
c00089e0:	31 f6                	xor    esi,esi
c00089e2:	31 d2                	xor    edx,edx
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089e9:	7e 2d                	jle    c0008a18 <VgaText::putchar(char)+0x90>
c00089eb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089f0:	83 fa 3b             	cmp    edx,0x3b
c00089f3:	75 17                	jne    c0008a0c <VgaText::putchar(char)+0x84>
c00089f5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089f9:	50                   	push   eax
c00089fa:	53                   	push   ebx
c00089fb:	e8 40 fb ff ff       	call   c0008540 <VgaText::doANSI_SGR(int)>
c0008a00:	59                   	pop    ecx
c0008a01:	31 d2                	xor    edx,edx
c0008a03:	5f                   	pop    edi
c0008a04:	31 c0                	xor    eax,eax
c0008a06:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008a0a:	eb 09                	jmp    c0008a15 <VgaText::putchar(char)+0x8d>
c0008a0c:	6b c0 0a             	imul   eax,eax,0xa
c0008a0f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a13:	88 ca                	mov    dl,cl
c0008a15:	46                   	inc    esi
c0008a16:	eb ce                	jmp    c00089e6 <VgaText::putchar(char)+0x5e>
c0008a18:	84 d2                	test   dl,dl
c0008a1a:	74 2f                	je     c0008a4b <VgaText::putchar(char)+0xc3>
c0008a1c:	50                   	push   eax
c0008a1d:	53                   	push   ebx
c0008a1e:	e8 1d fb ff ff       	call   c0008540 <VgaText::doANSI_SGR(int)>
c0008a23:	58                   	pop    eax
c0008a24:	5a                   	pop    edx
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xc3>
c0008a27:	83 f8 4a             	cmp    eax,0x4a
c0008a2a:	75 1f                	jne    c0008a4b <VgaText::putchar(char)+0xc3>
c0008a2c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a30:	75 19                	jne    c0008a4b <VgaText::putchar(char)+0xc3>
c0008a32:	83 ec 0c             	sub    esp,0xc
c0008a35:	53                   	push   ebx
c0008a36:	e8 89 fd ff ff       	call   c00087c4 <VgaText::clearScreen()>
c0008a3b:	83 c4 0c             	add    esp,0xc
c0008a3e:	6a 00                	push   0x0
c0008a40:	6a 00                	push   0x0
c0008a42:	53                   	push   ebx
c0008a43:	e8 1a fd ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a51:	eb 26                	jmp    c0008a79 <VgaText::putchar(char)+0xf1>
c0008a53:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a56:	83 f8 0e             	cmp    eax,0xe
c0008a59:	7f 1e                	jg     c0008a79 <VgaText::putchar(char)+0xf1>
c0008a5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a5e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a61:	89 f9                	mov    ecx,edi
c0008a63:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a67:	eb 10                	jmp    c0008a79 <VgaText::putchar(char)+0xf1>
c0008a69:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a6c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a6f:	50                   	push   eax
c0008a70:	53                   	push   ebx
c0008a71:	e8 42 fe ff ff       	call   c00088b8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	83 c4 10             	add    esp,0x10
c0008a7c:	5b                   	pop    ebx
c0008a7d:	5e                   	pop    esi
c0008a7e:	5f                   	pop    edi
c0008a7f:	c3                   	ret    

c0008a80 <VgaText::putx(unsigned int)>:
c0008a80:	57                   	push   edi
c0008a81:	b9 11 00 00 00       	mov    ecx,0x11
c0008a86:	56                   	push   esi
c0008a87:	be 3a 0f 02 c0       	mov    esi,0xc0020f3a
c0008a8c:	53                   	push   ebx
c0008a8d:	83 ec 20             	sub    esp,0x20
c0008a90:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a94:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a98:	fc                   	cld    
c0008a99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a9b:	be 08 00 00 00       	mov    esi,0x8
c0008aa0:	50                   	push   eax
c0008aa1:	50                   	push   eax
c0008aa2:	89 d8                	mov    eax,ebx
c0008aa4:	c1 e3 04             	shl    ebx,0x4
c0008aa7:	c1 e8 1c             	shr    eax,0x1c
c0008aaa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008aaf:	50                   	push   eax
c0008ab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ab4:	e8 cf fe ff ff       	call   c0008988 <VgaText::putchar(char)>
c0008ab9:	83 c4 10             	add    esp,0x10
c0008abc:	4e                   	dec    esi
c0008abd:	75 e1                	jne    c0008aa0 <VgaText::putx(unsigned int)+0x20>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	c3                   	ret    

c0008ac6 <VgaText::puts(char const*)>:
c0008ac6:	53                   	push   ebx
c0008ac7:	83 ec 08             	sub    esp,0x8
c0008aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ace:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ad1:	85 c0                	test   eax,eax
c0008ad3:	74 12                	je     c0008ae7 <VgaText::puts(char const*)+0x21>
c0008ad5:	43                   	inc    ebx
c0008ad6:	51                   	push   ecx
c0008ad7:	51                   	push   ecx
c0008ad8:	50                   	push   eax
c0008ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008add:	e8 a6 fe ff ff       	call   c0008988 <VgaText::putchar(char)>
c0008ae2:	83 c4 10             	add    esp,0x10
c0008ae5:	eb e7                	jmp    c0008ace <VgaText::puts(char const*)+0x8>
c0008ae7:	83 c4 08             	add    esp,0x8
c0008aea:	5b                   	pop    ebx
c0008aeb:	c3                   	ret    

c0008aec <VgaText::write(unsigned long long, void*, int*)>:
c0008aec:	55                   	push   ebp
c0008aed:	57                   	push   edi
c0008aee:	56                   	push   esi
c0008aef:	53                   	push   ebx
c0008af0:	83 ec 0c             	sub    esp,0xc
c0008af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b09:	39 eb                	cmp    ebx,ebp
c0008b0b:	74 13                	je     c0008b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b0d:	43                   	inc    ebx
c0008b0e:	50                   	push   eax
c0008b0f:	50                   	push   eax
c0008b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b14:	50                   	push   eax
c0008b15:	56                   	push   esi
c0008b16:	e8 6d fe ff ff       	call   c0008988 <VgaText::putchar(char)>
c0008b1b:	83 c4 10             	add    esp,0x10
c0008b1e:	eb e9                	jmp    c0008b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b20:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b2b:	89 38                	mov    DWORD PTR [eax],edi
c0008b2d:	83 c4 0c             	add    esp,0xc
c0008b30:	31 c0                	xor    eax,eax
c0008b32:	5b                   	pop    ebx
c0008b33:	5e                   	pop    esi
c0008b34:	5f                   	pop    edi
c0008b35:	5d                   	pop    ebp
c0008b36:	c3                   	ret    
c0008b37:	90                   	nop

c0008b38 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b38:	55                   	push   ebp
c0008b39:	57                   	push   edi
c0008b3a:	56                   	push   esi
c0008b3b:	53                   	push   ebx
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b48:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b4f:	50                   	push   eax
c0008b50:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b55:	50                   	push   eax
c0008b56:	e8 b3 fa ff ff       	call   c000860e <VgaText::combineColours(unsigned char, unsigned char)>
c0008b5b:	5a                   	pop    edx
c0008b5c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b60:	59                   	pop    ecx
c0008b61:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b64:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b68:	0f b7 f6             	movzx  esi,si
c0008b6b:	0f b6 e8             	movzx  ebp,al
c0008b6e:	01 f6                	add    esi,esi
c0008b70:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b73:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b76:	85 c0                	test   eax,eax
c0008b78:	0f 84 ef 00 00 00    	je     c0008c6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b7e:	83 f8 0d             	cmp    eax,0xd
c0008b81:	75 0c                	jne    c0008b8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b83:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b8a:	e9 d8 00 00 00       	jmp    c0008c67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b8f:	83 f8 0a             	cmp    eax,0xa
c0008b92:	75 44                	jne    c0008bd8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b97:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008ba1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008ba4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008ba7:	75 0f                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008ba9:	83 ec 0c             	sub    esp,0xc
c0008bac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008baf:	53                   	push   ebx
c0008bb0:	e8 6b fa ff ff       	call   c0008620 <VgaText::scrollScreen()>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	53                   	push   ebx
c0008bbc:	e8 69 f9 ff ff       	call   c000852a <VgaText::updateCursor()>
c0008bc1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bc5:	83 c4 10             	add    esp,0x10
c0008bc8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bcb:	0f b7 f6             	movzx  esi,si
c0008bce:	01 f6                	add    esi,esi
c0008bd0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd3:	e9 8f 00 00 00       	jmp    c0008c67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bd8:	83 f8 08             	cmp    eax,0x8
c0008bdb:	75 34                	jne    c0008c11 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bdd:	51                   	push   ecx
c0008bde:	51                   	push   ecx
c0008bdf:	6a 01                	push   0x1
c0008be1:	53                   	push   ebx
c0008be2:	e8 af fc ff ff       	call   c0008896 <VgaText::decrementCursor(bool)>
c0008be7:	5e                   	pop    esi
c0008be8:	58                   	pop    eax
c0008be9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bef:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bf5:	6a 20                	push   0x20
c0008bf7:	53                   	push   ebx
c0008bf8:	e8 c5 fa ff ff       	call   c00086c2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bfd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c01:	83 c4 20             	add    esp,0x20
c0008c04:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c07:	0f b7 f6             	movzx  esi,si
c0008c0a:	01 f6                	add    esi,esi
c0008c0c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c0f:	eb 56                	jmp    c0008c67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c11:	52                   	push   edx
c0008c12:	52                   	push   edx
c0008c13:	55                   	push   ebp
c0008c14:	50                   	push   eax
c0008c15:	e8 98 fa ff ff       	call   c00086b2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	66 89 06             	mov    WORD PTR [esi],ax
c0008c20:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c26:	75 1d                	jne    c0008c45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c28:	83 ec 0c             	sub    esp,0xc
c0008c2b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c2e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c39:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c3c:	50                   	push   eax
c0008c3d:	e8 8e 02 01 00       	call   c0018ed0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c42:	83 c4 20             	add    esp,0x20
c0008c45:	83 c6 02             	add    esi,0x2
c0008c48:	50                   	push   eax
c0008c49:	50                   	push   eax
c0008c4a:	6a 00                	push   0x0
c0008c4c:	53                   	push   ebx
c0008c4d:	e8 f0 fb ff ff       	call   c0008842 <VgaText::incrementCursor(bool)>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c59:	75 0c                	jne    c0008c67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c5b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c5f:	0f b7 f6             	movzx  esi,si
c0008c62:	01 f6                	add    esi,esi
c0008c64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c67:	47                   	inc    edi
c0008c68:	e9 06 ff ff ff       	jmp    c0008b73 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 b4 f8 ff ff       	call   c000852a <VgaText::updateCursor()>
c0008c76:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c7d:	83 c4 1c             	add    esp,0x1c
c0008c80:	5b                   	pop    ebx
c0008c81:	5e                   	pop    esi
c0008c82:	5f                   	pop    edi
c0008c83:	5d                   	pop    ebp
c0008c84:	c3                   	ret    
c0008c85:	90                   	nop

c0008c86 <VgaText::VgaText(char const*)>:
c0008c86:	56                   	push   esi
c0008c87:	53                   	push   ebx
c0008c88:	83 ec 04             	sub    esp,0x4
c0008c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8f:	83 ec 08             	sub    esp,0x8
c0008c92:	6a 00                	push   0x0
c0008c94:	50                   	push   eax
c0008c95:	e8 44 05 00 00       	call   c00091de <UnixFile::UnixFile(int)>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c0008ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca6:	89 10                	mov    DWORD PTR [eax],edx
c0008ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cac:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cca:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d05:	83 ec 0c             	sub    esp,0xc
c0008d08:	6a 01                	push   0x1
c0008d0a:	e8 1e 09 00 00       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	89 c2                	mov    edx,eax
c0008d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d18:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d1b:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d28:	89 c6                	mov    esi,eax
c0008d2a:	e8 b0 f0 ff ff       	call   c0007ddf <Phys::allocatePage()>
c0008d2f:	68 05 0c 00 00       	push   0xc05
c0008d34:	56                   	push   esi
c0008d35:	50                   	push   eax
c0008d36:	53                   	push   ebx
c0008d37:	e8 04 10 00 00       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d46:	83 ec 04             	sub    esp,0x4
c0008d49:	68 a0 0f 00 00       	push   0xfa0
c0008d4e:	6a 00                	push   0x0
c0008d50:	50                   	push   eax
c0008d51:	e8 9a 77 ff ff       	call   c00004f0 <memset>
c0008d56:	83 c4 10             	add    esp,0x10
c0008d59:	83 ec 04             	sub    esp,0x4
c0008d5c:	6a 00                	push   0x0
c0008d5e:	6a 07                	push   0x7
c0008d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d64:	e8 6b f8 ff ff       	call   c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d69:	83 c4 10             	add    esp,0x10
c0008d6c:	83 ec 04             	sub    esp,0x4
c0008d6f:	6a 00                	push   0x0
c0008d71:	6a 00                	push   0x0
c0008d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d77:	e8 e6 f9 ff ff       	call   c0008762 <VgaText::setCursor(int, int)>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	83 ec 0c             	sub    esp,0xc
c0008d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d86:	e8 39 fa ff ff       	call   c00087c4 <VgaText::clearScreen()>
c0008d8b:	83 c4 10             	add    esp,0x10
c0008d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d92:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9a:	05 82 00 00 00       	add    eax,0x82
c0008d9f:	83 ec 04             	sub    esp,0x4
c0008da2:	68 80 00 00 00       	push   0x80
c0008da7:	6a 00                	push   0x0
c0008da9:	50                   	push   eax
c0008daa:	e8 41 77 ff ff       	call   c00004f0 <memset>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db6:	05 02 01 00 00       	add    eax,0x102
c0008dbb:	83 ec 04             	sub    esp,0x4
c0008dbe:	68 80 00 00 00       	push   0x80
c0008dc3:	6a 00                	push   0x0
c0008dc5:	50                   	push   eax
c0008dc6:	e8 25 77 ff ff       	call   c00004f0 <memset>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	90                   	nop
c0008dcf:	83 c4 04             	add    esp,0x4
c0008dd2:	5b                   	pop    ebx
c0008dd3:	5e                   	pop    esi
c0008dd4:	c3                   	ret    
c0008dd5:	90                   	nop

c0008dd6 <VgaText::receiveKey(unsigned char)>:
c0008dd6:	55                   	push   ebp
c0008dd7:	57                   	push   edi
c0008dd8:	56                   	push   esi
c0008dd9:	53                   	push   ebx
c0008dda:	83 ec 2c             	sub    esp,0x2c
c0008ddd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008de1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008de5:	89 ef                	mov    edi,ebp
c0008de7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008ded:	0f 84 66 01 00 00    	je     c0008f59 <VgaText::receiveKey(unsigned char)+0x183>
c0008df3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008df9:	83 ff 08             	cmp    edi,0x8
c0008dfc:	75 73                	jne    c0008e71 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dfe:	83 ec 0c             	sub    esp,0xc
c0008e01:	56                   	push   esi
c0008e02:	e8 69 77 ff ff       	call   c0000570 <strlen>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	85 c0                	test   eax,eax
c0008e0c:	0f 84 02 01 00 00    	je     c0008f14 <VgaText::receiveKey(unsigned char)+0x13e>
c0008e12:	50                   	push   eax
c0008e13:	50                   	push   eax
c0008e14:	6a 08                	push   0x8
c0008e16:	53                   	push   ebx
c0008e17:	e8 6c fb ff ff       	call   c0008988 <VgaText::putchar(char)>
c0008e1c:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e1f:	e8 4c 77 ff ff       	call   c0000570 <strlen>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e2f:	83 fa 0d             	cmp    edx,0xd
c0008e32:	89 d0                	mov    eax,edx
c0008e34:	0f 95 c1             	setne  cl
c0008e37:	83 fa 1f             	cmp    edx,0x1f
c0008e3a:	0f 9e c2             	setle  dl
c0008e3d:	0f b6 d2             	movzx  edx,dl
c0008e40:	85 ca                	test   edx,ecx
c0008e42:	74 17                	je     c0008e5b <VgaText::receiveKey(unsigned char)+0x85>
c0008e44:	83 e8 08             	sub    eax,0x8
c0008e47:	3c 02                	cmp    al,0x2
c0008e49:	76 10                	jbe    c0008e5b <VgaText::receiveKey(unsigned char)+0x85>
c0008e4b:	55                   	push   ebp
c0008e4c:	55                   	push   ebp
c0008e4d:	68 4b 0f 02 c0       	push   0xc0020f4b
c0008e52:	53                   	push   ebx
c0008e53:	e8 6e fc ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0008e58:	83 c4 10             	add    esp,0x10
c0008e5b:	83 ec 0c             	sub    esp,0xc
c0008e5e:	56                   	push   esi
c0008e5f:	e8 0c 77 ff ff       	call   c0000570 <strlen>
c0008e64:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e6c:	e9 a0 00 00 00       	jmp    c0008f11 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e71:	83 ec 0c             	sub    esp,0xc
c0008e74:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e7a:	50                   	push   eax
c0008e7b:	e8 f0 76 ff ff       	call   c0000570 <strlen>
c0008e80:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e87:	e8 e4 76 ff ff       	call   c0000570 <strlen>
c0008e8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e97:	3d 80 00 00 00       	cmp    eax,0x80
c0008e9c:	0f 87 b7 00 00 00    	ja     c0008f59 <VgaText::receiveKey(unsigned char)+0x183>
c0008ea2:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008ea5:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008ea8:	3c 1e                	cmp    al,0x1e
c0008eaa:	0f 96 c0             	setbe  al
c0008ead:	80 fa 01             	cmp    dl,0x1
c0008eb0:	0f 97 c2             	seta   dl
c0008eb3:	0f b6 d2             	movzx  edx,dl
c0008eb6:	85 c2                	test   edx,eax
c0008eb8:	74 2e                	je     c0008ee8 <VgaText::receiveKey(unsigned char)+0x112>
c0008eba:	83 ff 0d             	cmp    edi,0xd
c0008ebd:	74 29                	je     c0008ee8 <VgaText::receiveKey(unsigned char)+0x112>
c0008ebf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ec2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ec5:	68 51 0f 02 c0       	push   0xc0020f51
c0008eca:	53                   	push   ebx
c0008ecb:	e8 68 fc ff ff       	call   c0008b38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ed0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ed3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ed6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ed9:	0f b6 c0             	movzx  eax,al
c0008edc:	50                   	push   eax
c0008edd:	53                   	push   ebx
c0008ede:	e8 d5 f9 ff ff       	call   c00088b8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ee3:	83 c4 20             	add    esp,0x20
c0008ee6:	eb 11                	jmp    c0008ef9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ee8:	89 e8                	mov    eax,ebp
c0008eea:	51                   	push   ecx
c0008eeb:	0f be c0             	movsx  eax,al
c0008eee:	51                   	push   ecx
c0008eef:	50                   	push   eax
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 92 fa ff ff       	call   c0008988 <VgaText::putchar(char)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008efe:	89 e8                	mov    eax,ebp
c0008f00:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f04:	52                   	push   edx
c0008f05:	52                   	push   edx
c0008f06:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f0a:	50                   	push   eax
c0008f0b:	56                   	push   esi
c0008f0c:	e8 2f 79 ff ff       	call   c0000840 <strcat>
c0008f11:	83 c4 10             	add    esp,0x10
c0008f14:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	83 ff 1c             	cmp    edi,0x1c
c0008f1f:	77 0e                	ja     c0008f2f <VgaText::receiveKey(unsigned char)+0x159>
c0008f21:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f26:	89 f9                	mov    ecx,edi
c0008f28:	d3 e8                	shr    eax,cl
c0008f2a:	f7 d0                	not    eax
c0008f2c:	83 e0 01             	and    eax,0x1
c0008f2f:	84 c0                	test   al,al
c0008f31:	74 04                	je     c0008f37 <VgaText::receiveKey(unsigned char)+0x161>
c0008f33:	84 d2                	test   dl,dl
c0008f35:	74 22                	je     c0008f59 <VgaText::receiveKey(unsigned char)+0x183>
c0008f37:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f3d:	50                   	push   eax
c0008f3e:	50                   	push   eax
c0008f3f:	56                   	push   esi
c0008f40:	53                   	push   ebx
c0008f41:	e8 fa 78 ff ff       	call   c0000840 <strcat>
c0008f46:	83 c4 0c             	add    esp,0xc
c0008f49:	68 80 00 00 00       	push   0x80
c0008f4e:	6a 00                	push   0x0
c0008f50:	56                   	push   esi
c0008f51:	e8 9a 75 ff ff       	call   c00004f0 <memset>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	83 c4 2c             	add    esp,0x2c
c0008f5c:	5b                   	pop    ebx
c0008f5d:	5e                   	pop    esi
c0008f5e:	5f                   	pop    edi
c0008f5f:	5d                   	pop    ebp
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop

c0008f62 <VgaText::doUpdate()>:
c0008f62:	c3                   	ret    
c0008f63:	90                   	nop

c0008f64 <TSS::TSS()>:
c0008f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f6f:	90                   	nop
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop
c0008f72:	66 90                	xchg   ax,ax

c0008f74 <TSS::setESP(unsigned long)>:
c0008f74:	55                   	push   ebp
c0008f75:	89 e5                	mov    ebp,esp
c0008f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f83:	90                   	nop
c0008f84:	5d                   	pop    ebp
c0008f85:	c3                   	ret    
c0008f86:	66 90                	xchg   ax,ax

c0008f88 <TSS::flush()>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 10             	sub    esp,0x10
c0008f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f93:	83 c8 03             	or     eax,0x3
c0008f96:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f9a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f9e:	66 89 d0             	mov    ax,dx
c0008fa1:	0f 00 d8             	ltr    ax
c0008fa4:	90                   	nop
c0008fa5:	c9                   	leave  
c0008fa6:	c3                   	ret    
c0008fa7:	90                   	nop

c0008fa8 <TSS::setup(unsigned long, unsigned long)>:
c0008fa8:	55                   	push   ebp
c0008fa9:	89 e5                	mov    ebp,esp
c0008fab:	83 ec 18             	sub    esp,0x18
c0008fae:	83 ec 0c             	sub    esp,0xc
c0008fb1:	6a 68                	push   0x68
c0008fb3:	e8 1e eb ff ff       	call   c0007ad6 <malloc>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	89 c2                	mov    edx,eax
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc9:	83 ec 04             	sub    esp,0x4
c0008fcc:	6a 68                	push   0x68
c0008fce:	6a 00                	push   0x0
c0008fd0:	50                   	push   eax
c0008fd1:	e8 1a 75 ff ff       	call   c00004f0 <memset>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008feb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ffa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009003:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009027:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000902d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009033:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000904e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000905a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000905d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009063:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000906a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009070:	0f 20 da             	mov    edx,cr3
c0009073:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009076:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009079:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000907c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009089:	50                   	push   eax
c000908a:	e8 b5 e2 ff ff       	call   c0007344 <GDTEntry::setBase(unsigned int)>
c000908f:	83 c4 10             	add    esp,0x10
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	6a 68                	push   0x68
c0009097:	8d 45 ec             	lea    eax,[ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 c0 e2 ff ff       	call   c0007360 <GDTEntry::setLimit(unsigned int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090a7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090aa:	83 e0 0f             	and    eax,0xf
c00090ad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090b0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090b3:	83 c8 40             	or     eax,0x40
c00090b6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090b9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c4:	05 78 01 00 00       	add    eax,0x178
c00090c9:	83 ec 04             	sub    esp,0x4
c00090cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090d2:	50                   	push   eax
c00090d3:	e8 bc e2 ff ff       	call   c0007394 <GDT::addEntry(GDTEntry)>
c00090d8:	83 c4 10             	add    esp,0x10
c00090db:	89 c2                	mov    edx,eax
c00090dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e0:	89 10                	mov    DWORD PTR [eax],edx
c00090e2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090ed:	05 78 01 00 00       	add    eax,0x178
c00090f2:	83 ec 0c             	sub    esp,0xc
c00090f5:	50                   	push   eax
c00090f6:	e8 c3 e2 ff ff       	call   c00073be <GDT::flush()>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009101:	8b 00                	mov    eax,DWORD PTR [eax]
c0009103:	c9                   	leave  
c0009104:	c3                   	ret    
c0009105:	90                   	nop

c0009106 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000910a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000910e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009111:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009116:	75 08                	jne    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009118:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000911e:	eb 38                	jmp    c0009158 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009120:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009125:	75 17                	jne    c000913e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000912c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000912f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009135:	8b 10                	mov    edx,DWORD PTR [eax]
c0009137:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000913b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000913e:	89 c1                	mov    ecx,eax
c0009140:	83 e1 fd             	and    ecx,0xfffffffd
c0009143:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009149:	74 cd                	je     c0009118 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000914b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009150:	83 e0 ef             	and    eax,0xffffffef
c0009153:	83 f8 08             	cmp    eax,0x8
c0009156:	76 c0                	jbe    c0009118 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009158:	31 c0                	xor    eax,eax
c000915a:	c3                   	ret    
c000915b:	90                   	nop

c000915c <ReservedFilename::isAtty()>:
c000915c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009160:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009163:	31 c0                	xor    eax,eax
c0009165:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000916b:	74 09                	je     c0009176 <ReservedFilename::isAtty()+0x1a>
c000916d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009173:	0f 94 c0             	sete   al
c0009176:	c3                   	ret    
c0009177:	90                   	nop

c0009178 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000917c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009180:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009183:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009187:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000918c:	75 08                	jne    c0009196 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000918e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009194:	eb 3d                	jmp    c00091d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009196:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000919b:	75 17                	jne    c00091b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000919d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00091ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091b9:	75 04                	jne    c00091bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091bb:	89 0a                	mov    DWORD PTR [edx],ecx
c00091bd:	eb 14                	jmp    c00091d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091c4:	74 c8                	je     c000918e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091cb:	83 e0 ef             	and    eax,0xffffffef
c00091ce:	83 f8 08             	cmp    eax,0x8
c00091d1:	76 bb                	jbe    c000918e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	c3                   	ret    

c00091d6 <UnixFile::getFileDescriptor()>:
c00091d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091dd:	c3                   	ret    

c00091de <UnixFile::UnixFile(int)>:
c00091de:	53                   	push   ebx
c00091df:	83 ec 28             	sub    esp,0x28
c00091e2:	ba 28 10 02 c0       	mov    edx,0xc0021028
c00091e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091eb:	89 10                	mov    DWORD PTR [eax],edx
c00091ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091f5:	0f 8f 90 01 00 00    	jg     c000938b <UnixFile::UnixFile(int)+0x1ad>
c00091fb:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c0009200:	8d 50 01             	lea    edx,[eax+0x1]
c0009203:	89 15 e0 37 02 c0    	mov    DWORD PTR ds:0xc00237e0,edx
c0009209:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000920d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009210:	83 ec 08             	sub    esp,0x8
c0009213:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009217:	68 98 6f 02 c0       	push   0xc0026f98
c000921c:	e8 b7 68 01 00       	call   c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009229:	83 f0 01             	xor    eax,0x1
c000922c:	0f b6 c0             	movzx  eax,al
c000922f:	85 c0                	test   eax,eax
c0009231:	0f 84 55 01 00 00    	je     c000938c <UnixFile::UnixFile(int)+0x1ae>
c0009237:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000923e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009246:	83 ec 0c             	sub    esp,0xc
c0009249:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000924d:	e8 84 e8 ff ff       	call   c0007ad6 <malloc>
c0009252:	83 c4 10             	add    esp,0x10
c0009255:	89 c3                	mov    ebx,eax
c0009257:	83 ec 08             	sub    esp,0x8
c000925a:	68 03 ff ff 0f       	push   0xfffff03
c000925f:	53                   	push   ebx
c0009260:	e8 2d 01 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009265:	83 c4 10             	add    esp,0x10
c0009268:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000926e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009276:	83 ec 0c             	sub    esp,0xc
c0009279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927d:	e8 54 e8 ff ff       	call   c0007ad6 <malloc>
c0009282:	83 c4 10             	add    esp,0x10
c0009285:	89 c3                	mov    ebx,eax
c0009287:	83 ec 08             	sub    esp,0x8
c000928a:	68 01 ff ff 0f       	push   0xfffff01
c000928f:	53                   	push   ebx
c0009290:	e8 fd 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000929e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00092a6:	83 ec 0c             	sub    esp,0xc
c00092a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ad:	e8 24 e8 ff ff       	call   c0007ad6 <malloc>
c00092b2:	83 c4 10             	add    esp,0x10
c00092b5:	89 c3                	mov    ebx,eax
c00092b7:	83 ec 08             	sub    esp,0x8
c00092ba:	68 00 ff ff 0f       	push   0xfffff00
c00092bf:	53                   	push   ebx
c00092c0:	e8 cd 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ce:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092d6:	83 ec 0c             	sub    esp,0xc
c00092d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092dd:	e8 f4 e7 ff ff       	call   c0007ad6 <malloc>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 c3                	mov    ebx,eax
c00092e7:	83 ec 08             	sub    esp,0x8
c00092ea:	68 02 ff ff 0f       	push   0xfffff02
c00092ef:	53                   	push   ebx
c00092f0:	e8 9d 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092fe:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009306:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000930b:	7f 7f                	jg     c000938c <UnixFile::UnixFile(int)+0x1ae>
c000930d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009315:	83 ec 0c             	sub    esp,0xc
c0009318:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000931c:	e8 b5 e7 ff ff       	call   c0007ad6 <malloc>
c0009321:	83 c4 10             	add    esp,0x10
c0009324:	89 c3                	mov    ebx,eax
c0009326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000932f:	83 ec 08             	sub    esp,0x8
c0009332:	50                   	push   eax
c0009333:	53                   	push   ebx
c0009334:	e8 59 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009339:	83 c4 10             	add    esp,0x10
c000933c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009340:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009347:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000934f:	83 ec 0c             	sub    esp,0xc
c0009352:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009356:	e8 7b e7 ff ff       	call   c0007ad6 <malloc>
c000935b:	83 c4 10             	add    esp,0x10
c000935e:	89 c3                	mov    ebx,eax
c0009360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009364:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009369:	83 ec 08             	sub    esp,0x8
c000936c:	50                   	push   eax
c000936d:	53                   	push   ebx
c000936e:	e8 1f 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000937a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009381:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009386:	e9 7b ff ff ff       	jmp    c0009306 <UnixFile::UnixFile(int)+0x128>
c000938b:	90                   	nop
c000938c:	83 c4 28             	add    esp,0x28
c000938f:	5b                   	pop    ebx
c0009390:	c3                   	ret    
c0009391:	90                   	nop

c0009392 <ReservedFilename::ReservedFilename(int)>:
c0009392:	83 ec 0c             	sub    esp,0xc
c0009395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009399:	83 ec 08             	sub    esp,0x8
c000939c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a0:	50                   	push   eax
c00093a1:	e8 38 fe ff ff       	call   c00091de <UnixFile::UnixFile(int)>
c00093a6:	83 c4 10             	add    esp,0x10
c00093a9:	ba 44 10 02 c0       	mov    edx,0xc0021044
c00093ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b2:	89 10                	mov    DWORD PTR [eax],edx
c00093b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093bf:	90                   	nop
c00093c0:	83 c4 0c             	add    esp,0xc
c00093c3:	c3                   	ret    

c00093c4 <UnixFile::~UnixFile()>:
c00093c4:	83 ec 1c             	sub    esp,0x1c
c00093c7:	ba 28 10 02 c0       	mov    edx,0xc0021028
c00093cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093d0:	89 10                	mov    DWORD PTR [eax],edx
c00093d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093de:	7f 76                	jg     c0009456 <UnixFile::~UnixFile()+0x92>
c00093e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093e8:	83 ec 0c             	sub    esp,0xc
c00093eb:	68 98 6f 02 c0       	push   0xc0026f98
c00093f0:	e8 b7 67 01 00       	call   c001fbac <LinkedList<UnixFile>::getFirstElement()>
c00093f5:	83 c4 10             	add    esp,0x10
c00093f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093fc:	83 ec 0c             	sub    esp,0xc
c00093ff:	68 98 6f 02 c0       	push   0xc0026f98
c0009404:	e8 ab 67 01 00       	call   c001fbb4 <LinkedList<UnixFile>::removeFirst()>
c0009409:	83 c4 10             	add    esp,0x10
c000940c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009410:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009414:	74 43                	je     c0009459 <UnixFile::~UnixFile()+0x95>
c0009416:	83 ec 08             	sub    esp,0x8
c0009419:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000941d:	68 98 6f 02 c0       	push   0xc0026f98
c0009422:	e8 b1 66 01 00       	call   c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009427:	83 c4 10             	add    esp,0x10
c000942a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942e:	8d 50 01             	lea    edx,[eax+0x1]
c0009431:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009435:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000943a:	0f 94 c0             	sete   al
c000943d:	0f b6 c0             	movzx  eax,al
c0009440:	85 c0                	test   eax,eax
c0009442:	74 a4                	je     c00093e8 <UnixFile::~UnixFile()+0x24>
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	68 00 10 02 c0       	push   0xc0021000
c000944c:	e8 46 82 00 00       	call   c0011697 <KePanic(char const*)>
c0009451:	83 c4 10             	add    esp,0x10
c0009454:	eb 92                	jmp    c00093e8 <UnixFile::~UnixFile()+0x24>
c0009456:	90                   	nop
c0009457:	eb 01                	jmp    c000945a <UnixFile::~UnixFile()+0x96>
c0009459:	90                   	nop
c000945a:	90                   	nop
c000945b:	83 c4 1c             	add    esp,0x1c
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <UnixFile::~UnixFile()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	83 ec 0c             	sub    esp,0xc
c0009466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946a:	e8 55 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000946f:	83 c4 10             	add    esp,0x10
c0009472:	83 ec 08             	sub    esp,0x8
c0009475:	6a 0c                	push   0xc
c0009477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947b:	e8 b8 13 00 00       	call   c000a838 <operator delete(void*, unsigned long)>
c0009480:	83 c4 10             	add    esp,0x10
c0009483:	83 c4 0c             	add    esp,0xc
c0009486:	c3                   	ret    
c0009487:	90                   	nop

c0009488 <ReservedFilename::~ReservedFilename()>:
c0009488:	83 ec 0c             	sub    esp,0xc
c000948b:	ba 44 10 02 c0       	mov    edx,0xc0021044
c0009490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009494:	89 10                	mov    DWORD PTR [eax],edx
c0009496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949a:	83 ec 0c             	sub    esp,0xc
c000949d:	50                   	push   eax
c000949e:	e8 21 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c00094a3:	83 c4 10             	add    esp,0x10
c00094a6:	90                   	nop
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    
c00094ab:	90                   	nop

c00094ac <ReservedFilename::~ReservedFilename()>:
c00094ac:	83 ec 0c             	sub    esp,0xc
c00094af:	83 ec 0c             	sub    esp,0xc
c00094b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b6:	e8 cd ff ff ff       	call   c0009488 <ReservedFilename::~ReservedFilename()>
c00094bb:	83 c4 10             	add    esp,0x10
c00094be:	83 ec 08             	sub    esp,0x8
c00094c1:	6a 0c                	push   0xc
c00094c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094c7:	e8 6c 13 00 00       	call   c000a838 <operator delete(void*, unsigned long)>
c00094cc:	83 c4 10             	add    esp,0x10
c00094cf:	83 c4 0c             	add    esp,0xc
c00094d2:	c3                   	ret    

c00094d3 <KeGetFileFromDescriptor(int)>:
c00094d3:	53                   	push   ebx
c00094d4:	83 ec 08             	sub    esp,0x8
c00094d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094db:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094e1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094e7:	7f 2c                	jg     c0009515 <KeGetFileFromDescriptor(int)+0x42>
c00094e9:	83 ec 0c             	sub    esp,0xc
c00094ec:	68 98 6f 02 c0       	push   0xc0026f98
c00094f1:	e8 b6 66 01 00       	call   c001fbac <LinkedList<UnixFile>::getFirstElement()>
c00094f6:	83 c4 10             	add    esp,0x10
c00094f9:	85 c0                	test   eax,eax
c00094fb:	75 04                	jne    c0009501 <KeGetFileFromDescriptor(int)+0x2e>
c00094fd:	31 c0                	xor    eax,eax
c00094ff:	eb 6e                	jmp    c000956f <KeGetFileFromDescriptor(int)+0x9c>
c0009501:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009504:	74 69                	je     c000956f <KeGetFileFromDescriptor(int)+0x9c>
c0009506:	52                   	push   edx
c0009507:	52                   	push   edx
c0009508:	50                   	push   eax
c0009509:	68 98 6f 02 c0       	push   0xc0026f98
c000950e:	e8 43 67 01 00       	call   c001fc56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009513:	eb e1                	jmp    c00094f6 <KeGetFileFromDescriptor(int)+0x23>
c0009515:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c000951a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009520:	74 4d                	je     c000956f <KeGetFileFromDescriptor(int)+0x9c>
c0009522:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009527:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000952d:	74 40                	je     c000956f <KeGetFileFromDescriptor(int)+0x9c>
c000952f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009534:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000953a:	74 33                	je     c000956f <KeGetFileFromDescriptor(int)+0x9c>
c000953c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009541:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009547:	74 26                	je     c000956f <KeGetFileFromDescriptor(int)+0x9c>
c0009549:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000954f:	83 f8 08             	cmp    eax,0x8
c0009552:	77 09                	ja     c000955d <KeGetFileFromDescriptor(int)+0x8a>
c0009554:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000955b:	eb 12                	jmp    c000956f <KeGetFileFromDescriptor(int)+0x9c>
c000955d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009563:	83 fb 08             	cmp    ebx,0x8
c0009566:	77 95                	ja     c00094fd <KeGetFileFromDescriptor(int)+0x2a>
c0009568:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000956f:	83 c4 08             	add    esp,0x8
c0009572:	5b                   	pop    ebx
c0009573:	c3                   	ret    

c0009574 <__static_initialization_and_destruction_0(int, int)>:
c0009574:	83 ec 0c             	sub    esp,0xc
c0009577:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000957c:	75 34                	jne    c00095b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000957e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009586:	75 2a                	jne    c00095b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009588:	83 ec 0c             	sub    esp,0xc
c000958b:	68 98 6f 02 c0       	push   0xc0026f98
c0009590:	e8 01 65 01 00       	call   c001fa96 <LinkedList<UnixFile>::LinkedList()>
c0009595:	83 c4 10             	add    esp,0x10
c0009598:	83 ec 04             	sub    esp,0x4
c000959b:	68 64 37 02 c0       	push   0xc0023764
c00095a0:	68 98 6f 02 c0       	push   0xc0026f98
c00095a5:	68 94 fa 01 c0       	push   0xc001fa94
c00095aa:	e8 39 12 00 00       	call   c000a7e8 <__cxa_atexit>
c00095af:	83 c4 10             	add    esp,0x10
c00095b2:	90                   	nop
c00095b3:	83 c4 0c             	add    esp,0xc
c00095b6:	c3                   	ret    

c00095b7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095b7:	83 ec 0c             	sub    esp,0xc
c00095ba:	83 ec 08             	sub    esp,0x8
c00095bd:	68 ff ff 00 00       	push   0xffff
c00095c2:	6a 01                	push   0x1
c00095c4:	e8 ab ff ff ff       	call   c0009574 <__static_initialization_and_destruction_0(int, int)>
c00095c9:	83 c4 10             	add    esp,0x10
c00095cc:	83 c4 0c             	add    esp,0xc
c00095cf:	c3                   	ret    

c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095d0:	53                   	push   ebx
c00095d1:	8b 15 e8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237e8
c00095d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095df:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095e5:	89 d8                	mov    eax,ebx
c00095e7:	d1 e8                	shr    eax,1
c00095e9:	01 d0                	add    eax,edx
c00095eb:	80 e3 01             	and    bl,0x1
c00095ee:	8a 10                	mov    dl,BYTE PTR [eax]
c00095f0:	75 09                	jne    c00095fb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095f2:	83 e2 f0             	and    edx,0xfffffff0
c00095f5:	09 ca                	or     edx,ecx
c00095f7:	88 10                	mov    BYTE PTR [eax],dl
c00095f9:	5b                   	pop    ebx
c00095fa:	c3                   	ret    
c00095fb:	83 e2 0f             	and    edx,0xf
c00095fe:	0f b6 c9             	movzx  ecx,cl
c0009601:	c1 e1 04             	shl    ecx,0x4
c0009604:	09 ca                	or     edx,ecx
c0009606:	88 10                	mov    BYTE PTR [eax],dl
c0009608:	5b                   	pop    ebx
c0009609:	c3                   	ret    

c000960a <Virt::getPageState(unsigned long)>:
c000960a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960e:	8b 0d e8 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237e8
c0009614:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000961a:	89 d0                	mov    eax,edx
c000961c:	d1 e8                	shr    eax,1
c000961e:	80 e2 01             	and    dl,0x1
c0009621:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009624:	74 03                	je     c0009629 <Virt::getPageState(unsigned long)+0x1f>
c0009626:	c1 e8 04             	shr    eax,0x4
c0009629:	83 e0 0f             	and    eax,0xf
c000962c:	c3                   	ret    

c000962d <Virt::allocateKernelVirtualPages(int)>:
c000962d:	55                   	push   ebp
c000962e:	31 ed                	xor    ebp,ebp
c0009630:	57                   	push   edi
c0009631:	31 ff                	xor    edi,edi
c0009633:	56                   	push   esi
c0009634:	53                   	push   ebx
c0009635:	31 db                	xor    ebx,ebx
c0009637:	83 ec 0c             	sub    esp,0xc
c000963a:	8b 35 e4 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237e4
c0009640:	56                   	push   esi
c0009641:	e8 c4 ff ff ff       	call   c000960a <Virt::getPageState(unsigned long)>
c0009646:	5a                   	pop    edx
c0009647:	84 c0                	test   al,al
c0009649:	75 41                	jne    c000968c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000964b:	85 db                	test   ebx,ebx
c000964d:	75 02                	jne    c0009651 <Virt::allocateKernelVirtualPages(int)+0x24>
c000964f:	89 f5                	mov    ebp,esi
c0009651:	83 c3 01             	add    ebx,0x1
c0009654:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009658:	74 5f                	je     c00096b9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000965a:	83 c6 01             	add    esi,0x1
c000965d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009663:	76 34                	jbe    c0009699 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009665:	c7 05 e4 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00237e4,0xc8000
c000966f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009675:	75 2a                	jne    c00096a1 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009677:	be 00 80 0c 00       	mov    esi,0xc8000
c000967c:	bf 01 00 00 00       	mov    edi,0x1
c0009681:	56                   	push   esi
c0009682:	e8 83 ff ff ff       	call   c000960a <Virt::getPageState(unsigned long)>
c0009687:	5a                   	pop    edx
c0009688:	84 c0                	test   al,al
c000968a:	74 bf                	je     c000964b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000968c:	31 db                	xor    ebx,ebx
c000968e:	83 c6 01             	add    esi,0x1
c0009691:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009697:	77 cc                	ja     c0009665 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009699:	89 35 e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,esi
c000969f:	eb 9f                	jmp    c0009640 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	68 58 10 02 c0       	push   0xc0021058
c00096a9:	e8 e9 7f 00 00       	call   c0011697 <KePanic(char const*)>
c00096ae:	8b 35 e4 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237e4
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	eb 87                	jmp    c0009640 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096b9:	89 2d e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,ebp
c00096bf:	83 fb 01             	cmp    ebx,0x1
c00096c2:	74 6f                	je     c0009733 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096c4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c8:	85 c9                	test   ecx,ecx
c00096ca:	74 49                	je     c0009715 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	89 e8                	mov    eax,ebp
c00096d2:	31 db                	xor    ebx,ebx
c00096d4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096d7:	eb 18                	jmp    c00096f1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096d9:	6a 01                	push   0x1
c00096db:	83 c3 01             	add    ebx,0x1
c00096de:	50                   	push   eax
c00096df:	e8 ec fe ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e4:	58                   	pop    eax
c00096e5:	5a                   	pop    edx
c00096e6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ea:	74 29                	je     c0009715 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ec:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c00096f1:	8d 50 01             	lea    edx,[eax+0x1]
c00096f4:	85 db                	test   ebx,ebx
c00096f6:	89 15 e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,edx
c00096fc:	74 24                	je     c0009722 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096fe:	39 df                	cmp    edi,ebx
c0009700:	75 d7                	jne    c00096d9 <Virt::allocateKernelVirtualPages(int)+0xac>
c0009702:	6a 03                	push   0x3
c0009704:	83 c3 01             	add    ebx,0x1
c0009707:	50                   	push   eax
c0009708:	e8 c3 fe ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970d:	59                   	pop    ecx
c000970e:	5e                   	pop    esi
c000970f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009713:	75 d7                	jne    c00096ec <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009715:	83 c4 0c             	add    esp,0xc
c0009718:	89 e8                	mov    eax,ebp
c000971a:	5b                   	pop    ebx
c000971b:	c1 e0 0c             	shl    eax,0xc
c000971e:	5e                   	pop    esi
c000971f:	5f                   	pop    edi
c0009720:	5d                   	pop    ebp
c0009721:	c3                   	ret    
c0009722:	6a 02                	push   0x2
c0009724:	bb 01 00 00 00       	mov    ebx,0x1
c0009729:	50                   	push   eax
c000972a:	e8 a1 fe ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972f:	58                   	pop    eax
c0009730:	5a                   	pop    edx
c0009731:	eb b9                	jmp    c00096ec <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009733:	6a 04                	push   0x4
c0009735:	8d 45 01             	lea    eax,[ebp+0x1]
c0009738:	55                   	push   ebp
c0009739:	a3 e4 37 02 c0       	mov    ds:0xc00237e4,eax
c000973e:	e8 8d fe ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009743:	5b                   	pop    ebx
c0009744:	89 e8                	mov    eax,ebp
c0009746:	5e                   	pop    esi
c0009747:	c1 e0 0c             	shl    eax,0xc
c000974a:	83 c4 0c             	add    esp,0xc
c000974d:	5b                   	pop    ebx
c000974e:	5e                   	pop    esi
c000974f:	5f                   	pop    edi
c0009750:	5d                   	pop    ebp
c0009751:	c3                   	ret    

c0009752 <Virt::freeSwapfilePage(unsigned long)>:
c0009752:	53                   	push   ebx
c0009753:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009759:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000975d:	b8 01 00 00 00       	mov    eax,0x1
c0009762:	89 cb                	mov    ebx,ecx
c0009764:	d3 e0                	shl    eax,cl
c0009766:	c1 eb 05             	shr    ebx,0x5
c0009769:	f7 d0                	not    eax
c000976b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000976e:	21 c1                	and    ecx,eax
c0009770:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009773:	5b                   	pop    ebx
c0009774:	c3                   	ret    

c0009775 <Virt::swapIDToSector(unsigned long)>:
c0009775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009779:	8b 15 ec 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237ec
c000977f:	8b 0d f4 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237f4
c0009785:	0f af c2             	imul   eax,edx
c0009788:	01 c8                	add    eax,ecx
c000978a:	c3                   	ret    

c000978b <Virt::allocateSwapfilePage()>:
c000978b:	55                   	push   ebp
c000978c:	31 d2                	xor    edx,edx
c000978e:	57                   	push   edi
c000978f:	56                   	push   esi
c0009790:	53                   	push   ebx
c0009791:	83 ec 0c             	sub    esp,0xc
c0009794:	8b 0d ec 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ec
c000979a:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c000979f:	f7 f1                	div    ecx
c00097a1:	39 0d f0 37 02 c0    	cmp    DWORD PTR ds:0xc00237f0,ecx
c00097a7:	72 2f                	jb     c00097d8 <Virt::allocateSwapfilePage()+0x4d>
c00097a9:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c00097af:	8b 16                	mov    edx,DWORD PTR [esi]
c00097b1:	f6 c2 01             	test   dl,0x1
c00097b4:	74 3e                	je     c00097f4 <Virt::allocateSwapfilePage()+0x69>
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	bf 01 00 00 00       	mov    edi,0x1
c00097bd:	eb 12                	jmp    c00097d1 <Virt::allocateSwapfilePage()+0x46>
c00097bf:	89 fd                	mov    ebp,edi
c00097c1:	89 ca                	mov    edx,ecx
c00097c3:	d3 e5                	shl    ebp,cl
c00097c5:	c1 ea 05             	shr    edx,0x5
c00097c8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097cd:	85 ea                	test   edx,ebp
c00097cf:	74 2c                	je     c00097fd <Virt::allocateSwapfilePage()+0x72>
c00097d1:	83 c1 01             	add    ecx,0x1
c00097d4:	39 c8                	cmp    eax,ecx
c00097d6:	77 e7                	ja     c00097bf <Virt::allocateSwapfilePage()+0x34>
c00097d8:	83 ec 0c             	sub    esp,0xc
c00097db:	68 ec 12 02 c0       	push   0xc00212ec
c00097e0:	e8 b2 7e 00 00       	call   c0011697 <KePanic(char const*)>
c00097e5:	83 c4 10             	add    esp,0x10
c00097e8:	31 c9                	xor    ecx,ecx
c00097ea:	83 c4 0c             	add    esp,0xc
c00097ed:	89 c8                	mov    eax,ecx
c00097ef:	5b                   	pop    ebx
c00097f0:	5e                   	pop    esi
c00097f1:	5f                   	pop    edi
c00097f2:	5d                   	pop    ebp
c00097f3:	c3                   	ret    
c00097f4:	89 f3                	mov    ebx,esi
c00097f6:	bd 01 00 00 00       	mov    ebp,0x1
c00097fb:	31 c9                	xor    ecx,ecx
c00097fd:	09 ea                	or     edx,ebp
c00097ff:	89 c8                	mov    eax,ecx
c0009801:	89 13                	mov    DWORD PTR [ebx],edx
c0009803:	83 c4 0c             	add    esp,0xc
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <Virt::virtualMemorySetup()>:
c000980b:	53                   	push   ebx
c000980c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009811:	6a 0f                	push   0xf
c0009813:	53                   	push   ebx
c0009814:	83 c3 01             	add    ebx,0x1
c0009817:	e8 b4 fd ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981c:	58                   	pop    eax
c000981d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009823:	5a                   	pop    edx
c0009824:	75 eb                	jne    c0009811 <Virt::virtualMemorySetup()+0x6>
c0009826:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000982b:	6a 00                	push   0x0
c000982d:	53                   	push   ebx
c000982e:	83 c3 01             	add    ebx,0x1
c0009831:	e8 9a fd ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009836:	59                   	pop    ecx
c0009837:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000983d:	58                   	pop    eax
c000983e:	75 eb                	jne    c000982b <Virt::virtualMemorySetup()+0x20>
c0009840:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009845:	6a 0f                	push   0xf
c0009847:	53                   	push   ebx
c0009848:	83 c3 01             	add    ebx,0x1
c000984b:	e8 80 fd ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009850:	58                   	pop    eax
c0009851:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009857:	5a                   	pop    edx
c0009858:	75 eb                	jne    c0009845 <Virt::virtualMemorySetup()+0x3a>
c000985a:	5b                   	pop    ebx
c000985b:	c3                   	ret    

c000985c <Virt::setupPageSwapping(int)>:
c000985c:	53                   	push   ebx
c000985d:	83 ec 0c             	sub    esp,0xc
c0009860:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009864:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009869:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000986f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009871:	53                   	push   ebx
c0009872:	c1 e3 0b             	shl    ebx,0xb
c0009875:	68 03 13 02 c0       	push   0xc0021303
c000987a:	50                   	push   eax
c000987b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000987e:	89 1d f0 37 02 c0    	mov    DWORD PTR ds:0xc00237f0,ebx
c0009884:	c6 05 f8 37 02 c0 43 	mov    BYTE PTR ds:0xc00237f8,0x43
c000988b:	c1 eb 08             	shr    ebx,0x8
c000988e:	a3 f4 37 02 c0       	mov    ds:0xc00237f4,eax
c0009893:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009896:	c7 05 ec 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x8
c00098a0:	e8 31 e2 ff ff       	call   c0007ad6 <malloc>
c00098a5:	83 c4 0c             	add    esp,0xc
c00098a8:	89 c1                	mov    ecx,eax
c00098aa:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c00098af:	31 d2                	xor    edx,edx
c00098b1:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c00098b6:	f7 35 ec 37 02 c0    	div    DWORD PTR ds:0xc00237ec
c00098bc:	c1 e8 05             	shr    eax,0x5
c00098bf:	50                   	push   eax
c00098c0:	6a 00                	push   0x0
c00098c2:	51                   	push   ecx
c00098c3:	e8 28 6c ff ff       	call   c00004f0 <memset>
c00098c8:	83 c4 18             	add    esp,0x18
c00098cb:	5b                   	pop    ebx
c00098cc:	c3                   	ret    
c00098cd:	90                   	nop

c00098ce <VAS::setCPUSpecific(unsigned long)>:
c00098ce:	c3                   	ret    
c00098cf:	90                   	nop

c00098d0 <VAS::VAS(VAS*)>:
c00098d0:	83 ec 0c             	sub    esp,0xc
c00098d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098e9:	83 ec 0c             	sub    esp,0xc
c00098ec:	68 78 10 02 c0       	push   0xc0021078
c00098f1:	e8 a1 7d 00 00       	call   c0011697 <KePanic(char const*)>
c00098f6:	83 c4 10             	add    esp,0x10
c00098f9:	90                   	nop
c00098fa:	83 c4 0c             	add    esp,0xc
c00098fd:	c3                   	ret    

c00098fe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009902:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009907:	89 c2                	mov    edx,eax
c0009909:	c1 e8 0a             	shr    eax,0xa
c000990c:	c1 ea 16             	shr    edx,0x16
c000990f:	83 f9 01             	cmp    ecx,0x1
c0009912:	19 c9                	sbb    ecx,ecx
c0009914:	c1 e2 0c             	shl    edx,0xc
c0009917:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000991d:	25 fc 0f 00 00       	and    eax,0xffc
c0009922:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009929:	01 d0                	add    eax,edx
c000992b:	c3                   	ret    

c000992c <VAS::getPageTableEntry(unsigned long)>:
c000992c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009930:	89 ca                	mov    edx,ecx
c0009932:	c1 e9 0a             	shr    ecx,0xa
c0009935:	c1 ea 16             	shr    edx,0x16
c0009938:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000993e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009944:	c1 e0 0c             	shl    eax,0xc
c0009947:	8d 04 08             	lea    eax,[eax+ecx*1]
c000994a:	c3                   	ret    

c000994b <Virt::freeKernelVirtualPages(unsigned long)>:
c000994b:	55                   	push   ebp
c000994c:	57                   	push   edi
c000994d:	bf 01 00 00 00       	mov    edi,0x1
c0009952:	56                   	push   esi
c0009953:	53                   	push   ebx
c0009954:	83 ec 1c             	sub    esp,0x1c
c0009957:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000995b:	c1 ee 0c             	shr    esi,0xc
c000995e:	eb 48                	jmp    c00099a8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009960:	83 ec 08             	sub    esp,0x8
c0009963:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009968:	55                   	push   ebp
c0009969:	50                   	push   eax
c000996a:	e8 bd ff ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c000996f:	83 c4 10             	add    esp,0x10
c0009972:	8b 10                	mov    edx,DWORD PTR [eax]
c0009974:	f6 c6 04             	test   dh,0x4
c0009977:	75 70                	jne    c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009979:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000997f:	83 fb 04             	cmp    ebx,0x4
c0009982:	0f 84 8a 00 00 00    	je     c0009a12 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009988:	83 fb 02             	cmp    ebx,0x2
c000998b:	0f 84 9a 00 00 00    	je     c0009a2b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009991:	83 fb 03             	cmp    ebx,0x3
c0009994:	0f 84 be 00 00 00    	je     c0009a58 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000999a:	83 fb 01             	cmp    ebx,0x1
c000999d:	0f 84 a2 00 00 00    	je     c0009a45 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099a3:	83 c6 01             	add    esi,0x1
c00099a6:	31 ff                	xor    edi,edi
c00099a8:	56                   	push   esi
c00099a9:	89 f5                	mov    ebp,esi
c00099ab:	e8 5a fc ff ff       	call   c000960a <Virt::getPageState(unsigned long)>
c00099b0:	c1 e5 0c             	shl    ebp,0xc
c00099b3:	0f b6 d8             	movzx  ebx,al
c00099b6:	5a                   	pop    edx
c00099b7:	85 db                	test   ebx,ebx
c00099b9:	75 a5                	jne    c0009960 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	68 1a 13 02 c0       	push   0xc002131a
c00099c3:	e8 cf 7c 00 00       	call   c0011697 <KePanic(char const*)>
c00099c8:	5a                   	pop    edx
c00099c9:	59                   	pop    ecx
c00099ca:	55                   	push   ebp
c00099cb:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099d1:	55                   	push   ebp
c00099d2:	e8 55 ff ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c00099d7:	83 c4 10             	add    esp,0x10
c00099da:	8b 10                	mov    edx,DWORD PTR [eax]
c00099dc:	f6 c6 04             	test   dh,0x4
c00099df:	75 08                	jne    c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099e7:	eb ba                	jmp    c00099a3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099f3:	83 ec 0c             	sub    esp,0xc
c00099f6:	52                   	push   edx
c00099f7:	e8 7a e3 ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c00099fc:	83 c4 10             	add    esp,0x10
c00099ff:	83 fb 04             	cmp    ebx,0x4
c0009a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a0c:	0f 85 76 ff ff ff    	jne    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a12:	83 e7 01             	and    edi,0x1
c0009a15:	75 46                	jne    c0009a5d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a17:	c7 44 24 30 9c 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc002109c
c0009a1f:	83 c4 1c             	add    esp,0x1c
c0009a22:	5b                   	pop    ebx
c0009a23:	5e                   	pop    esi
c0009a24:	5f                   	pop    edi
c0009a25:	5d                   	pop    ebp
c0009a26:	e9 6c 7c 00 00       	jmp    c0011697 <KePanic(char const*)>
c0009a2b:	83 e7 01             	and    edi,0x1
c0009a2e:	75 15                	jne    c0009a45 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a30:	83 ec 0c             	sub    esp,0xc
c0009a33:	68 36 13 02 c0       	push   0xc0021336
c0009a38:	e8 5a 7c 00 00       	call   c0011697 <KePanic(char const*)>
c0009a3d:	83 c4 10             	add    esp,0x10
c0009a40:	e9 5e ff ff ff       	jmp    c00099a3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a45:	83 ec 08             	sub    esp,0x8
c0009a48:	6a 00                	push   0x0
c0009a4a:	56                   	push   esi
c0009a4b:	e8 80 fb ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a50:	83 c4 10             	add    esp,0x10
c0009a53:	e9 4b ff ff ff       	jmp    c00099a3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a58:	83 e7 01             	and    edi,0x1
c0009a5b:	75 16                	jne    c0009a73 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a5d:	83 ec 08             	sub    esp,0x8
c0009a60:	6a 00                	push   0x0
c0009a62:	56                   	push   esi
c0009a63:	e8 68 fb ff ff       	call   c00095d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a68:	83 c4 10             	add    esp,0x10
c0009a6b:	83 c4 1c             	add    esp,0x1c
c0009a6e:	5b                   	pop    ebx
c0009a6f:	5e                   	pop    esi
c0009a70:	5f                   	pop    edi
c0009a71:	5d                   	pop    ebp
c0009a72:	c3                   	ret    
c0009a73:	c7 44 24 30 52 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021352
c0009a7b:	83 c4 1c             	add    esp,0x1c
c0009a7e:	5b                   	pop    ebx
c0009a7f:	5e                   	pop    esi
c0009a80:	5f                   	pop    edi
c0009a81:	5d                   	pop    ebp
c0009a82:	e9 10 7c 00 00       	jmp    c0011697 <KePanic(char const*)>
c0009a87:	90                   	nop

c0009a88 <VAS::freeAllocatedPages(unsigned long)>:
c0009a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a90:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a94:	74 09                	je     c0009a9f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a9a:	e9 ac fe ff ff       	jmp    c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a9f:	c7 44 24 04 c0 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210c0
c0009aa7:	e9 b9 0e 00 00       	jmp    c000a965 <Dbg::kprintf(char const*, ...)>

c0009aac <VAS::virtualToPhysical(unsigned long)>:
c0009aac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ab0:	50                   	push   eax
c0009ab1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ab5:	52                   	push   edx
c0009ab6:	e8 71 fe ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c0009abb:	59                   	pop    ecx
c0009abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009abe:	5a                   	pop    edx
c0009abf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ac6:	55                   	push   ebp
c0009ac7:	57                   	push   edi
c0009ac8:	56                   	push   esi
c0009ac9:	53                   	push   ebx
c0009aca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ace:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ad2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ad6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009ada:	85 db                	test   ebx,ebx
c0009adc:	7e 24                	jle    c0009b02 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ade:	c1 e3 0c             	shl    ebx,0xc
c0009ae1:	01 f3                	add    ebx,esi
c0009ae3:	56                   	push   esi
c0009ae4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aea:	55                   	push   ebp
c0009aeb:	e8 3c fe ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c0009af0:	5a                   	pop    edx
c0009af1:	59                   	pop    ecx
c0009af2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009af4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009af8:	21 f9                	and    ecx,edi
c0009afa:	09 d1                	or     ecx,edx
c0009afc:	39 f3                	cmp    ebx,esi
c0009afe:	89 08                	mov    DWORD PTR [eax],ecx
c0009b00:	75 e1                	jne    c0009ae3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009b02:	5b                   	pop    ebx
c0009b03:	5e                   	pop    esi
c0009b04:	5f                   	pop    edi
c0009b05:	5d                   	pop    ebp
c0009b06:	c3                   	ret    
c0009b07:	90                   	nop

c0009b08 <VAS::VAS()>:
c0009b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b22:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b2b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b33:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b3a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b41:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b46:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b4b:	29 c2                	sub    edx,eax
c0009b4d:	89 d0                	mov    eax,edx
c0009b4f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b54:	c1 e8 0c             	shr    eax,0xc
c0009b57:	89 c2                	mov    edx,eax
c0009b59:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b5e:	6a 04                	push   0x4
c0009b60:	6a ff                	push   0xffffffff
c0009b62:	52                   	push   edx
c0009b63:	50                   	push   eax
c0009b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b68:	e8 59 ff ff ff       	call   c0009ac6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b6d:	83 c4 14             	add    esp,0x14
c0009b70:	90                   	nop
c0009b71:	c3                   	ret    

c0009b72 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b72:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b7d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b84:	75 01                	jne    c0009b87 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b86:	c3                   	ret    
c0009b87:	68 80 00 00 00       	push   0x80
c0009b8c:	6a ff                	push   0xffffffff
c0009b8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b92:	50                   	push   eax
c0009b93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b97:	52                   	push   edx
c0009b98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b9c:	51                   	push   ecx
c0009b9d:	e8 24 ff ff ff       	call   c0009ac6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009ba2:	83 c4 14             	add    esp,0x14
c0009ba5:	c3                   	ret    

c0009ba6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009baa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bb1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009bb9:	83 f8 01             	cmp    eax,0x1
c0009bbc:	19 c0                	sbb    eax,eax
c0009bbe:	83 ca 03             	or     edx,0x3
c0009bc1:	83 e0 fc             	and    eax,0xfffffffc
c0009bc4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bcb:	0f 20 d8             	mov    eax,cr3
c0009bce:	0f 22 d8             	mov    cr3,eax
c0009bd1:	c3                   	ret    

c0009bd2 <VAS::~VAS()>:
c0009bd2:	83 ec 2c             	sub    esp,0x2c
c0009bd5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bdd:	fa                   	cli    
c0009bde:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009be3:	83 c0 01             	add    eax,0x1
c0009be6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009beb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bff:	6a 01                	push   0x1
c0009c01:	50                   	push   eax
c0009c02:	e8 9f ff ff ff       	call   c0009ba6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c07:	83 c4 0c             	add    esp,0xc
c0009c0a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c12:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c1a:	0f 8f d8 00 00 00    	jg     c0009cf8 <VAS::~VAS()+0x126>
c0009c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c2b:	c1 e2 02             	shl    edx,0x2
c0009c2e:	01 d0                	add    eax,edx
c0009c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c3a:	83 e0 01             	and    eax,0x1
c0009c3d:	0f 84 ab 00 00 00    	je     c0009cee <VAS::~VAS()+0x11c>
c0009c43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c4b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c53:	7f 74                	jg     c0009cc9 <VAS::~VAS()+0xf7>
c0009c55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c59:	c1 e0 0a             	shl    eax,0xa
c0009c5c:	89 c2                	mov    edx,eax
c0009c5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c62:	01 d0                	add    eax,edx
c0009c64:	c1 e0 0c             	shl    eax,0xc
c0009c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c6b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c75:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c7f:	6a 01                	push   0x1
c0009c81:	50                   	push   eax
c0009c82:	e8 77 fc ff ff       	call   c00098fe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c87:	83 c4 0c             	add    esp,0xc
c0009c8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c9c:	25 01 04 00 00       	and    eax,0x401
c0009ca1:	3d 01 04 00 00       	cmp    eax,0x401
c0009ca6:	75 1a                	jne    c0009cc2 <VAS::~VAS()+0xf0>
c0009ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 bc e0 ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cc7:	eb 82                	jmp    c0009c4b <VAS::~VAS()+0x79>
c0009cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ccd:	25 00 04 00 00       	and    eax,0x400
c0009cd2:	74 1a                	je     c0009cee <VAS::~VAS()+0x11c>
c0009cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 90 e0 ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cee:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cf3:	e9 1a ff ff ff       	jmp    c0009c12 <VAS::~VAS()+0x40>
c0009cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cfc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cff:	83 ec 0c             	sub    esp,0xc
c0009d02:	50                   	push   eax
c0009d03:	e8 43 fc ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c0009d08:	83 c4 10             	add    esp,0x10
c0009d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d12:	83 ec 0c             	sub    esp,0xc
c0009d15:	50                   	push   eax
c0009d16:	e8 5b e0 ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d23:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d28:	83 e8 01             	sub    eax,0x1
c0009d2b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d30:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d35:	85 c0                	test   eax,eax
c0009d37:	75 01                	jne    c0009d3a <VAS::~VAS()+0x168>
c0009d39:	fb                   	sti    
c0009d3a:	90                   	nop
c0009d3b:	83 c4 2c             	add    esp,0x2c
c0009d3e:	c3                   	ret    
c0009d3f:	90                   	nop

c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d40:	55                   	push   ebp
c0009d41:	57                   	push   edi
c0009d42:	56                   	push   esi
c0009d43:	53                   	push   ebx
c0009d44:	83 ec 1c             	sub    esp,0x1c
c0009d47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d4f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d55:	77 08                	ja     c0009d5f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d57:	0f 20 d8             	mov    eax,cr3
c0009d5a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d5d:	75 49                	jne    c0009da8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d63:	09 d8                	or     eax,ebx
c0009d65:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d6a:	75 59                	jne    c0009dc5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d6c:	89 de                	mov    esi,ebx
c0009d6e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d71:	c1 ee 16             	shr    esi,0x16
c0009d74:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d7b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d7f:	74 56                	je     c0009dd7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d85:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d89:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d8f:	c1 eb 0a             	shr    ebx,0xa
c0009d92:	c1 e6 0c             	shl    esi,0xc
c0009d95:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d9b:	09 d0                	or     eax,edx
c0009d9d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009da0:	83 c4 1c             	add    esp,0x1c
c0009da3:	5b                   	pop    ebx
c0009da4:	5e                   	pop    esi
c0009da5:	5f                   	pop    edi
c0009da6:	5d                   	pop    ebp
c0009da7:	c3                   	ret    
c0009da8:	83 ec 0c             	sub    esp,0xc
c0009dab:	68 e4 10 02 c0       	push   0xc00210e4
c0009db0:	e8 b0 0b 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dbc:	09 d8                	or     eax,ebx
c0009dbe:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dc3:	74 a7                	je     c0009d6c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dc5:	83 ec 0c             	sub    esp,0xc
c0009dc8:	68 4c 11 02 c0       	push   0xc002114c
c0009dcd:	e8 c5 78 00 00       	call   c0011697 <KePanic(char const*)>
c0009dd2:	83 c4 10             	add    esp,0x10
c0009dd5:	eb 95                	jmp    c0009d6c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ddb:	e8 ff df ff ff       	call   c0007ddf <Phys::allocatePage()>
c0009de0:	83 ec 0c             	sub    esp,0xc
c0009de3:	89 c5                	mov    ebp,eax
c0009de5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009deb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009def:	6a 01                	push   0x1
c0009df1:	e8 37 f8 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c0009df6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dfd:	6a 01                	push   0x1
c0009dff:	50                   	push   eax
c0009e00:	55                   	push   ebp
c0009e01:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e07:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e0b:	51                   	push   ecx
c0009e0c:	e8 29 01 00 00       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e11:	83 c4 1c             	add    esp,0x1c
c0009e14:	68 00 10 00 00       	push   0x1000
c0009e19:	6a 00                	push   0x0
c0009e1b:	50                   	push   eax
c0009e1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e20:	e8 cb 66 ff ff       	call   c00004f0 <memset>
c0009e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e29:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2c:	e8 1a fb ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e38:	83 c4 10             	add    esp,0x10
c0009e3b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e3e:	e9 3e ff ff ff       	jmp    c0009d81 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e43:	90                   	nop

c0009e44 <VAS::allocatePages(int, int)>:
c0009e44:	55                   	push   ebp
c0009e45:	57                   	push   edi
c0009e46:	56                   	push   esi
c0009e47:	53                   	push   ebx
c0009e48:	83 ec 1c             	sub    esp,0x1c
c0009e4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e53:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e57:	75 71                	jne    c0009eca <VAS::allocatePages(int, int)+0x86>
c0009e59:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e60:	85 c0                	test   eax,eax
c0009e62:	74 4d                	je     c0009eb1 <VAS::allocatePages(int, int)+0x6d>
c0009e64:	89 dd                	mov    ebp,ebx
c0009e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e6a:	c1 e5 0c             	shl    ebp,0xc
c0009e6d:	01 c5                	add    ebp,eax
c0009e6f:	85 db                	test   ebx,ebx
c0009e71:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e74:	7e 29                	jle    c0009e9f <VAS::allocatePages(int, int)+0x5b>
c0009e76:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e7a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e7e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e84:	e8 56 df ff ff       	call   c0007ddf <Phys::allocatePage()>
c0009e89:	57                   	push   edi
c0009e8a:	53                   	push   ebx
c0009e8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e91:	50                   	push   eax
c0009e92:	56                   	push   esi
c0009e93:	e8 a8 fe ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e98:	83 c4 10             	add    esp,0x10
c0009e9b:	39 dd                	cmp    ebp,ebx
c0009e9d:	75 e5                	jne    c0009e84 <VAS::allocatePages(int, int)+0x40>
c0009e9f:	0f 20 d8             	mov    eax,cr3
c0009ea2:	0f 22 d8             	mov    cr3,eax
c0009ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea9:	83 c4 1c             	add    esp,0x1c
c0009eac:	5b                   	pop    ebx
c0009ead:	5e                   	pop    esi
c0009eae:	5f                   	pop    edi
c0009eaf:	5d                   	pop    ebp
c0009eb0:	c3                   	ret    
c0009eb1:	83 ec 0c             	sub    esp,0xc
c0009eb4:	68 70 11 02 c0       	push   0xc0021170
c0009eb9:	e8 d9 77 00 00       	call   c0011697 <KePanic(char const*)>
c0009ebe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ec1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	eb 9a                	jmp    c0009e64 <VAS::allocatePages(int, int)+0x20>
c0009eca:	83 ec 0c             	sub    esp,0xc
c0009ecd:	53                   	push   ebx
c0009ece:	e8 5a f7 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c0009ed3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009edf:	77 37                	ja     c0009f18 <VAS::allocatePages(int, int)+0xd4>
c0009ee1:	85 db                	test   ebx,ebx
c0009ee3:	7e ba                	jle    c0009e9f <VAS::allocatePages(int, int)+0x5b>
c0009ee5:	c1 e3 0c             	shl    ebx,0xc
c0009ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ef0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ef3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ef9:	89 c3                	mov    ebx,eax
c0009efb:	e8 df de ff ff       	call   c0007ddf <Phys::allocatePage()>
c0009f00:	57                   	push   edi
c0009f01:	53                   	push   ebx
c0009f02:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f08:	50                   	push   eax
c0009f09:	56                   	push   esi
c0009f0a:	e8 31 fe ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	39 dd                	cmp    ebp,ebx
c0009f14:	75 e5                	jne    c0009efb <VAS::allocatePages(int, int)+0xb7>
c0009f16:	eb 87                	jmp    c0009e9f <VAS::allocatePages(int, int)+0x5b>
c0009f18:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f23:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f2a:	74 b5                	je     c0009ee1 <VAS::allocatePages(int, int)+0x9d>
c0009f2c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f30:	80 ce 01             	or     dh,0x1
c0009f33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f37:	eb a8                	jmp    c0009ee1 <VAS::allocatePages(int, int)+0x9d>
c0009f39:	90                   	nop

c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f3a:	55                   	push   ebp
c0009f3b:	57                   	push   edi
c0009f3c:	56                   	push   esi
c0009f3d:	53                   	push   ebx
c0009f3e:	83 ec 0c             	sub    esp,0xc
c0009f41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f4d:	85 db                	test   ebx,ebx
c0009f4f:	7e 2f                	jle    c0009f80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f51:	c1 e3 0c             	shl    ebx,0xc
c0009f54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f58:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f5c:	01 d3                	add    ebx,edx
c0009f5e:	55                   	push   ebp
c0009f5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f67:	29 c2                	sub    edx,eax
c0009f69:	01 f2                	add    edx,esi
c0009f6b:	52                   	push   edx
c0009f6c:	56                   	push   esi
c0009f6d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f73:	57                   	push   edi
c0009f74:	e8 c7 fd ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f79:	83 c4 10             	add    esp,0x10
c0009f7c:	39 de                	cmp    esi,ebx
c0009f7e:	75 de                	jne    c0009f5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f80:	0f 20 d8             	mov    eax,cr3
c0009f83:	0f 22 d8             	mov    cr3,eax
c0009f86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8a:	83 c4 0c             	add    esp,0xc
c0009f8d:	5b                   	pop    ebx
c0009f8e:	5e                   	pop    esi
c0009f8f:	5f                   	pop    edi
c0009f90:	5d                   	pop    ebp
c0009f91:	c3                   	ret    

c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f92:	55                   	push   ebp
c0009f93:	57                   	push   edi
c0009f94:	56                   	push   esi
c0009f95:	53                   	push   ebx
c0009f96:	83 ec 1c             	sub    esp,0x1c
c0009f99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009fa1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fa5:	09 f8                	or     eax,edi
c0009fa7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009fab:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fb0:	75 4f                	jne    c000a001 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fb2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fb6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009fb9:	c1 eb 16             	shr    ebx,0x16
c0009fbc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fc3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fc7:	74 52                	je     c000a01b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fc9:	0f b6 f2             	movzx  esi,dl
c0009fcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fd0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fd4:	c1 e8 0a             	shr    eax,0xa
c0009fd7:	83 fe 01             	cmp    esi,0x1
c0009fda:	19 d2                	sbb    edx,edx
c0009fdc:	c1 e3 0c             	shl    ebx,0xc
c0009fdf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fe5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fea:	01 d8                	add    eax,ebx
c0009fec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009ff0:	09 d9                	or     ecx,ebx
c0009ff2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	5b                   	pop    ebx
c0009ffd:	5e                   	pop    esi
c0009ffe:	5f                   	pop    edi
c0009fff:	5d                   	pop    ebp
c000a000:	c3                   	ret    
c000a001:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a005:	83 ec 0c             	sub    esp,0xc
c000a008:	68 9c 11 02 c0       	push   0xc002119c
c000a00d:	e8 85 76 00 00       	call   c0011697 <KePanic(char const*)>
c000a012:	83 c4 10             	add    esp,0x10
c000a015:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a019:	eb 97                	jmp    c0009fb2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a01b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a01f:	e8 bb dd ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a024:	83 ec 0c             	sub    esp,0xc
c000a027:	89 c5                	mov    ebp,eax
c000a029:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a02f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a033:	6a 01                	push   0x1
c000a035:	e8 f3 f5 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000a03a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a041:	6a 01                	push   0x1
c000a043:	50                   	push   eax
c000a044:	55                   	push   ebp
c000a045:	81 cd 07 04 00 00    	or     ebp,0x407
c000a04b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a04f:	51                   	push   ecx
c000a050:	e8 e5 fe ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a055:	83 c4 1c             	add    esp,0x1c
c000a058:	68 00 10 00 00       	push   0x1000
c000a05d:	6a 00                	push   0x0
c000a05f:	50                   	push   eax
c000a060:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a064:	e8 87 64 ff ff       	call   c00004f0 <memset>
c000a069:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a06d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a070:	e8 d6 f8 ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c000a075:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a078:	83 c4 10             	add    esp,0x10
c000a07b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a07e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a082:	e9 42 ff ff ff       	jmp    c0009fc9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a087:	90                   	nop

c000a088 <VAS::VAS(bool)>:
c000a088:	53                   	push   ebx
c000a089:	83 ec 28             	sub    esp,0x28
c000a08c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a090:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a098:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a09f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ae:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0b2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0b5:	e8 25 dd ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a0ba:	89 c2                	mov    edx,eax
c000a0bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0c3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0c9:	83 ec 0c             	sub    esp,0xc
c000a0cc:	6a 01                	push   0x1
c000a0ce:	e8 5a f5 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000a0d3:	83 c4 10             	add    esp,0x10
c000a0d6:	89 c2                	mov    edx,eax
c000a0d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0df:	83 ec 0c             	sub    esp,0xc
c000a0e2:	6a 03                	push   0x3
c000a0e4:	6a 01                	push   0x1
c000a0e6:	52                   	push   edx
c000a0e7:	50                   	push   eax
c000a0e8:	53                   	push   ebx
c000a0e9:	e8 4c fe ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ee:	83 c4 20             	add    esp,0x20
c000a0f1:	89 c2                	mov    edx,eax
c000a0f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0fa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a102:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a10a:	7f 1d                	jg     c000a129 <VAS::VAS(bool)+0xa1>
c000a10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a113:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a117:	c1 e2 02             	shl    edx,0x2
c000a11a:	01 d0                	add    eax,edx
c000a11c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a122:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a127:	eb d9                	jmp    c000a102 <VAS::VAS(bool)+0x7a>
c000a129:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a131:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a139:	7f 7e                	jg     c000a1b9 <VAS::VAS(bool)+0x131>
c000a13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a13f:	2d 00 02 00 00       	sub    eax,0x200
c000a144:	c1 e0 0c             	shl    eax,0xc
c000a147:	83 c8 05             	or     eax,0x5
c000a14a:	89 c2                	mov    edx,eax
c000a14c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a151:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a157:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a15d:	83 e0 10             	and    eax,0x10
c000a160:	0f b6 c0             	movzx  eax,al
c000a163:	85 c0                	test   eax,eax
c000a165:	74 07                	je     c000a16e <VAS::VAS(bool)+0xe6>
c000a167:	b8 00 01 00 00       	mov    eax,0x100
c000a16c:	eb 05                	jmp    c000a173 <VAS::VAS(bool)+0xeb>
c000a16e:	b8 00 00 00 00       	mov    eax,0x0
c000a173:	09 d0                	or     eax,edx
c000a175:	89 c1                	mov    ecx,eax
c000a177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a17e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a182:	c1 e2 02             	shl    edx,0x2
c000a185:	01 d0                	add    eax,edx
c000a187:	89 ca                	mov    edx,ecx
c000a189:	89 10                	mov    DWORD PTR [eax],edx
c000a18b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a18f:	2d 40 03 00 00       	sub    eax,0x340
c000a194:	83 f8 7f             	cmp    eax,0x7f
c000a197:	77 16                	ja     c000a1af <VAS::VAS(bool)+0x127>
c000a199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a19d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a4:	c1 e2 02             	shl    edx,0x2
c000a1a7:	01 d0                	add    eax,edx
c000a1a9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1af:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1b4:	e9 78 ff ff ff       	jmp    c000a131 <VAS::VAS(bool)+0xa9>
c000a1b9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1c4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1ca:	83 e0 10             	and    eax,0x10
c000a1cd:	0f b6 c0             	movzx  eax,al
c000a1d0:	85 c0                	test   eax,eax
c000a1d2:	74 07                	je     c000a1db <VAS::VAS(bool)+0x153>
c000a1d4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1d9:	eb 05                	jmp    c000a1e0 <VAS::VAS(bool)+0x158>
c000a1db:	b8 03 40 00 00       	mov    eax,0x4003
c000a1e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1e4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1e7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1ed:	89 02                	mov    DWORD PTR [edx],eax
c000a1ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a201:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a207:	83 e0 10             	and    eax,0x10
c000a20a:	0f b6 c0             	movzx  eax,al
c000a20d:	85 c0                	test   eax,eax
c000a20f:	74 07                	je     c000a218 <VAS::VAS(bool)+0x190>
c000a211:	b8 00 01 00 00       	mov    eax,0x100
c000a216:	eb 05                	jmp    c000a21d <VAS::VAS(bool)+0x195>
c000a218:	b8 00 00 00 00       	mov    eax,0x0
c000a21d:	09 c2                	or     edx,eax
c000a21f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a223:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a226:	05 fc 0f 00 00       	add    eax,0xffc
c000a22b:	83 ca 03             	or     edx,0x3
c000a22e:	89 10                	mov    DWORD PTR [eax],edx
c000a230:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a235:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	50                   	push   eax
c000a23f:	e8 36 2a 00 00       	call   c000cc7a <Device::getName()>
c000a244:	83 c4 10             	add    esp,0x10
c000a247:	83 ec 08             	sub    esp,0x8
c000a24a:	68 6c 13 02 c0       	push   0xc002136c
c000a24f:	50                   	push   eax
c000a250:	e8 fb 64 ff ff       	call   c0000750 <strcmp>
c000a255:	83 c4 10             	add    esp,0x10
c000a258:	85 c0                	test   eax,eax
c000a25a:	0f 94 c0             	sete   al
c000a25d:	0f b6 c0             	movzx  eax,al
c000a260:	85 c0                	test   eax,eax
c000a262:	74 68                	je     c000a2cc <VAS::VAS(bool)+0x244>
c000a264:	fa                   	cli    
c000a265:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a270:	05 7c 09 00 00       	add    eax,0x97c
c000a275:	83 ec 0c             	sub    esp,0xc
c000a278:	50                   	push   eax
c000a279:	e8 50 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a286:	89 c3                	mov    ebx,eax
c000a288:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a28d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a293:	05 7c 09 00 00       	add    eax,0x97c
c000a298:	83 ec 0c             	sub    esp,0xc
c000a29b:	50                   	push   eax
c000a29c:	e8 2d d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2a1:	83 c4 10             	add    esp,0x10
c000a2a4:	83 ec 08             	sub    esp,0x8
c000a2a7:	50                   	push   eax
c000a2a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2ac:	e8 7b f6 ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c000a2b1:	83 c4 10             	add    esp,0x10
c000a2b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bb:	6a 11                	push   0x11
c000a2bd:	53                   	push   ebx
c000a2be:	50                   	push   eax
c000a2bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2c3:	e8 78 fa ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2c8:	83 c4 10             	add    esp,0x10
c000a2cb:	fb                   	sti    
c000a2cc:	90                   	nop
c000a2cd:	83 c4 28             	add    esp,0x28
c000a2d0:	5b                   	pop    ebx
c000a2d1:	c3                   	ret    

c000a2d2 <VAS::evict(unsigned long)>:
c000a2d2:	55                   	push   ebp
c000a2d3:	57                   	push   edi
c000a2d4:	56                   	push   esi
c000a2d5:	53                   	push   ebx
c000a2d6:	83 ec 1c             	sub    esp,0x1c
c000a2d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2dd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2e5:	e8 a1 f4 ff ff       	call   c000978b <Virt::allocateSwapfilePage()>
c000a2ea:	89 c7                	mov    edi,eax
c000a2ec:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c000a2f1:	85 c0                	test   eax,eax
c000a2f3:	7e 40                	jle    c000a335 <VAS::evict(unsigned long)+0x63>
c000a2f5:	89 ee                	mov    esi,ebp
c000a2f7:	31 db                	xor    ebx,ebx
c000a2f9:	83 ec 0c             	sub    esp,0xc
c000a2fc:	57                   	push   edi
c000a2fd:	e8 73 f4 ff ff       	call   c0009775 <Virt::swapIDToSector(unsigned long)>
c000a302:	89 34 24             	mov    DWORD PTR [esp],esi
c000a305:	01 d8                	add    eax,ebx
c000a307:	6a 01                	push   0x1
c000a309:	31 d2                	xor    edx,edx
c000a30b:	83 c3 01             	add    ebx,0x1
c000a30e:	52                   	push   edx
c000a30f:	81 c6 00 02 00 00    	add    esi,0x200
c000a315:	50                   	push   eax
c000a316:	0f be 05 f8 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237f8
c000a31d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a324:	50                   	push   eax
c000a325:	e8 0a 3b 00 00       	call   c000de34 <LogicalDisk::write(unsigned long long, int, void*)>
c000a32a:	83 c4 20             	add    esp,0x20
c000a32d:	39 1d ec 37 02 c0    	cmp    DWORD PTR ds:0xc00237ec,ebx
c000a333:	7f c4                	jg     c000a2f9 <VAS::evict(unsigned long)+0x27>
c000a335:	83 ec 08             	sub    esp,0x8
c000a338:	c1 e7 0c             	shl    edi,0xc
c000a33b:	55                   	push   ebp
c000a33c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a340:	50                   	push   eax
c000a341:	e8 e6 f5 ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c000a346:	8b 10                	mov    edx,DWORD PTR [eax]
c000a348:	89 d3                	mov    ebx,edx
c000a34a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a350:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a356:	09 d7                	or     edi,edx
c000a358:	89 38                	mov    DWORD PTR [eax],edi
c000a35a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a35d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a363:	83 c2 01             	add    edx,0x1
c000a366:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a36c:	e8 05 da ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c000a371:	0f 20 d8             	mov    eax,cr3
c000a374:	0f 22 d8             	mov    cr3,eax
c000a377:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a37d:	51                   	push   ecx
c000a37e:	55                   	push   ebp
c000a37f:	53                   	push   ebx
c000a380:	68 c0 11 02 c0       	push   0xc00211c0
c000a385:	e8 db 05 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a38a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a38f:	c7 44 24 50 7a 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002137a
c000a397:	8d 50 01             	lea    edx,[eax+0x1]
c000a39a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a39e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a3a4:	83 c4 3c             	add    esp,0x3c
c000a3a7:	5b                   	pop    ebx
c000a3a8:	5e                   	pop    esi
c000a3a9:	5f                   	pop    edi
c000a3aa:	5d                   	pop    ebp
c000a3ab:	e9 b5 05 00 00       	jmp    c000a965 <Dbg::kprintf(char const*, ...)>

c000a3b0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3b0:	55                   	push   ebp
c000a3b1:	57                   	push   edi
c000a3b2:	56                   	push   esi
c000a3b3:	53                   	push   ebx
c000a3b4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3ba:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3c1:	89 f3                	mov    ebx,esi
c000a3c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3c9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3cf:	77 22                	ja     c000a3f3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3d1:	83 ec 08             	sub    esp,0x8
c000a3d4:	56                   	push   esi
c000a3d5:	68 9d 13 02 c0       	push   0xc002139d
c000a3da:	e8 86 05 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a3df:	83 c4 10             	add    esp,0x10
c000a3e2:	85 db                	test   ebx,ebx
c000a3e4:	75 2a                	jne    c000a410 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3e6:	31 c0                	xor    eax,eax
c000a3e8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ee:	5b                   	pop    ebx
c000a3ef:	5e                   	pop    esi
c000a3f0:	5f                   	pop    edi
c000a3f1:	5d                   	pop    ebp
c000a3f2:	c3                   	ret    
c000a3f3:	83 ec 0c             	sub    esp,0xc
c000a3f6:	68 8b 13 02 c0       	push   0xc002138b
c000a3fb:	e8 97 72 00 00       	call   c0011697 <KePanic(char const*)>
c000a400:	5f                   	pop    edi
c000a401:	5d                   	pop    ebp
c000a402:	56                   	push   esi
c000a403:	68 9d 13 02 c0       	push   0xc002139d
c000a408:	e8 58 05 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a40d:	83 c4 10             	add    esp,0x10
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	53                   	push   ebx
c000a414:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a41b:	51                   	push   ecx
c000a41c:	e8 0b f5 ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c000a421:	83 c4 10             	add    esp,0x10
c000a424:	89 c2                	mov    edx,eax
c000a426:	85 c0                	test   eax,eax
c000a428:	74 bc                	je     c000a3e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a42a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a42c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a432:	0f 85 c0 00 00 00    	jne    c000a4f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a438:	89 e8                	mov    eax,ebp
c000a43a:	25 01 04 00 00       	and    eax,0x401
c000a43f:	3d 00 04 00 00       	cmp    eax,0x400
c000a444:	75 a0                	jne    c000a3e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a446:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a44a:	c1 ed 0c             	shr    ebp,0xc
c000a44d:	e8 8d d9 ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a452:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a456:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a458:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a45e:	09 c1                	or     ecx,eax
c000a460:	81 c9 01 08 00 00    	or     ecx,0x801
c000a466:	89 0a                	mov    DWORD PTR [edx],ecx
c000a468:	8b 15 ec 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237ec
c000a46e:	85 d2                	test   edx,edx
c000a470:	7e 40                	jle    c000a4b2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a472:	89 df                	mov    edi,ebx
c000a474:	31 f6                	xor    esi,esi
c000a476:	83 ec 0c             	sub    esp,0xc
c000a479:	55                   	push   ebp
c000a47a:	e8 f6 f2 ff ff       	call   c0009775 <Virt::swapIDToSector(unsigned long)>
c000a47f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a482:	01 f0                	add    eax,esi
c000a484:	6a 01                	push   0x1
c000a486:	31 d2                	xor    edx,edx
c000a488:	83 c6 01             	add    esi,0x1
c000a48b:	52                   	push   edx
c000a48c:	81 c7 00 02 00 00    	add    edi,0x200
c000a492:	50                   	push   eax
c000a493:	0f be 05 f8 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237f8
c000a49a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a4a1:	50                   	push   eax
c000a4a2:	e8 21 39 00 00       	call   c000ddc8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4a7:	83 c4 20             	add    esp,0x20
c000a4aa:	39 35 ec 37 02 c0    	cmp    DWORD PTR ds:0xc00237ec,esi
c000a4b0:	7f c4                	jg     c000a476 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a4b2:	83 ec 04             	sub    esp,0x4
c000a4b5:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4ba:	83 e8 01             	sub    eax,0x1
c000a4bd:	50                   	push   eax
c000a4be:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4c3:	53                   	push   ebx
c000a4c4:	68 b0 13 02 c0       	push   0xc00213b0
c000a4c9:	e8 97 04 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a4ce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4d1:	e8 7c f2 ff ff       	call   c0009752 <Virt::freeSwapfilePage(unsigned long)>
c000a4d6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4db:	83 c4 10             	add    esp,0x10
c000a4de:	83 e8 01             	sub    eax,0x1
c000a4e1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4e6:	85 c0                	test   eax,eax
c000a4e8:	75 01                	jne    c000a4eb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ea:	fb                   	sti    
c000a4eb:	0f 20 d8             	mov    eax,cr3
c000a4ee:	0f 22 d8             	mov    cr3,eax
c000a4f1:	b0 01                	mov    al,0x1
c000a4f3:	e9 f0 fe ff ff       	jmp    c000a3e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4fc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a501:	83 ec 0c             	sub    esp,0xc
c000a504:	89 de                	mov    esi,ebx
c000a506:	68 f0 11 02 c0       	push   0xc00211f0
c000a50b:	e8 55 04 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a510:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a514:	e8 c6 d8 ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a519:	89 e9                	mov    ecx,ebp
c000a51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a51d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a521:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a523:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a529:	09 c8                	or     eax,ecx
c000a52b:	83 c8 02             	or     eax,0x2
c000a52e:	89 02                	mov    DWORD PTR [edx],eax
c000a530:	0f 20 d8             	mov    eax,cr3
c000a533:	0f 22 d8             	mov    cr3,eax
c000a536:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a53a:	89 df                	mov    edi,ebx
c000a53c:	89 e9                	mov    ecx,ebp
c000a53e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a540:	b0 01                	mov    al,0x1
c000a542:	83 c4 10             	add    esp,0x10
c000a545:	e9 9e fe ff ff       	jmp    c000a3e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a54a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a54a:	55                   	push   ebp
c000a54b:	57                   	push   edi
c000a54c:	56                   	push   esi
c000a54d:	53                   	push   ebx
c000a54e:	83 ec 28             	sub    esp,0x28
c000a551:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a555:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a559:	50                   	push   eax
c000a55a:	e8 ce f0 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	89 c5                	mov    ebp,eax
c000a564:	6a 07                	push   0x7
c000a566:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a56a:	52                   	push   edx
c000a56b:	56                   	push   esi
c000a56c:	e8 d3 f8 ff ff       	call   c0009e44 <VAS::allocatePages(int, int)>
c000a571:	83 c4 10             	add    esp,0x10
c000a574:	89 c7                	mov    edi,eax
c000a576:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a57a:	85 c9                	test   ecx,ecx
c000a57c:	74 2f                	je     c000a5ad <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a57e:	31 db                	xor    ebx,ebx
c000a580:	e8 5a d8 ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a585:	83 c3 01             	add    ebx,0x1
c000a588:	6a 03                	push   0x3
c000a58a:	55                   	push   ebp
c000a58b:	50                   	push   eax
c000a58c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a590:	56                   	push   esi
c000a591:	e8 aa f7 ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a596:	6a 07                	push   0x7
c000a598:	57                   	push   edi
c000a599:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a59d:	50                   	push   eax
c000a59e:	56                   	push   esi
c000a59f:	e8 9c f7 ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a4:	83 c4 20             	add    esp,0x20
c000a5a7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a5ab:	75 d3                	jne    c000a580 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5b1:	89 28                	mov    DWORD PTR [eax],ebp
c000a5b3:	83 c4 1c             	add    esp,0x1c
c000a5b6:	89 f8                	mov    eax,edi
c000a5b8:	5b                   	pop    ebx
c000a5b9:	5e                   	pop    esi
c000a5ba:	5f                   	pop    edi
c000a5bb:	5d                   	pop    ebp
c000a5bc:	c3                   	ret    
c000a5bd:	90                   	nop

c000a5be <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5be:	53                   	push   ebx
c000a5bf:	83 ec 14             	sub    esp,0x14
c000a5c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5c6:	68 10 12 02 c0       	push   0xc0021210
c000a5cb:	e8 95 03 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a5d0:	c7 04 24 70 12 02 c0 	mov    DWORD PTR [esp],0xc0021270
c000a5d7:	e8 89 03 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a5dc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5e0:	83 c4 18             	add    esp,0x18
c000a5e3:	5b                   	pop    ebx
c000a5e4:	e9 62 f3 ff ff       	jmp    c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5e9:	90                   	nop

c000a5ea <VAS::scanForEviction()>:
c000a5ea:	57                   	push   edi
c000a5eb:	56                   	push   esi
c000a5ec:	31 f6                	xor    esi,esi
c000a5ee:	53                   	push   ebx
c000a5ef:	83 ec 10             	sub    esp,0x10
c000a5f2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5f6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5f9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5ff:	75 0e                	jne    c000a60f <VAS::scanForEviction()+0x25>
c000a601:	89 da                	mov    edx,ebx
c000a603:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a606:	c1 ea 16             	shr    edx,0x16
c000a609:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a60d:	74 57                	je     c000a666 <VAS::scanForEviction()+0x7c>
c000a60f:	53                   	push   ebx
c000a610:	57                   	push   edi
c000a611:	e8 16 f3 ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c000a616:	5a                   	pop    edx
c000a617:	8b 10                	mov    edx,DWORD PTR [eax]
c000a619:	59                   	pop    ecx
c000a61a:	89 d1                	mov    ecx,edx
c000a61c:	c1 e9 0c             	shr    ecx,0xc
c000a61f:	74 10                	je     c000a631 <VAS::scanForEviction()+0x47>
c000a621:	89 d1                	mov    ecx,edx
c000a623:	81 e1 01 08 00 00    	and    ecx,0x801
c000a629:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a62f:	74 40                	je     c000a671 <VAS::scanForEviction()+0x87>
c000a631:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a637:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a63d:	76 2d                	jbe    c000a66c <VAS::scanForEviction()+0x82>
c000a63f:	83 c6 01             	add    esi,0x1
c000a642:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a649:	83 fe 03             	cmp    esi,0x3
c000a64c:	74 32                	je     c000a680 <VAS::scanForEviction()+0x96>
c000a64e:	31 db                	xor    ebx,ebx
c000a650:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a656:	75 b7                	jne    c000a60f <VAS::scanForEviction()+0x25>
c000a658:	89 da                	mov    edx,ebx
c000a65a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a65d:	c1 ea 16             	shr    edx,0x16
c000a660:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a664:	75 a9                	jne    c000a60f <VAS::scanForEviction()+0x25>
c000a666:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a66c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a66f:	eb 88                	jmp    c000a5f9 <VAS::scanForEviction()+0xf>
c000a671:	f6 c2 20             	test   dl,0x20
c000a674:	74 13                	je     c000a689 <VAS::scanForEviction()+0x9f>
c000a676:	83 e2 df             	and    edx,0xffffffdf
c000a679:	89 10                	mov    DWORD PTR [eax],edx
c000a67b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a67e:	eb b1                	jmp    c000a631 <VAS::scanForEviction()+0x47>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	31 c0                	xor    eax,eax
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	5f                   	pop    edi
c000a688:	c3                   	ret    
c000a689:	83 ec 08             	sub    esp,0x8
c000a68c:	89 d0                	mov    eax,edx
c000a68e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a693:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a697:	53                   	push   ebx
c000a698:	68 c5 13 02 c0       	push   0xc00213c5
c000a69d:	e8 c3 02 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a6a2:	58                   	pop    eax
c000a6a3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6a6:	5a                   	pop    edx
c000a6a7:	51                   	push   ecx
c000a6a8:	57                   	push   edi
c000a6a9:	e8 24 fc ff ff       	call   c000a2d2 <VAS::evict(unsigned long)>
c000a6ae:	5b                   	pop    ebx
c000a6af:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6b2:	5e                   	pop    esi
c000a6b3:	50                   	push   eax
c000a6b4:	68 d9 13 02 c0       	push   0xc00213d9
c000a6b9:	e8 a7 02 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a6be:	58                   	pop    eax
c000a6bf:	5a                   	pop    edx
c000a6c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6c4:	50                   	push   eax
c000a6c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c9:	68 ec 13 02 c0       	push   0xc00213ec
c000a6ce:	e8 92 02 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a6d3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6d6:	83 c4 10             	add    esp,0x10
c000a6d9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6e3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	5b                   	pop    ebx
c000a6ea:	5e                   	pop    esi
c000a6eb:	5f                   	pop    edi
c000a6ec:	c3                   	ret    

c000a6ed <mapVASFirstTime>:
c000a6ed:	55                   	push   ebp
c000a6ee:	57                   	push   edi
c000a6ef:	56                   	push   esi
c000a6f0:	53                   	push   ebx
c000a6f1:	83 ec 0c             	sub    esp,0xc
c000a6f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6fc:	83 fa 01             	cmp    edx,0x1
c000a6ff:	0f 84 cb 00 00 00    	je     c000a7d0 <mapVASFirstTime+0xe3>
c000a705:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a708:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a70b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a710:	c1 e5 15             	shl    ebp,0x15
c000a713:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a718:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a71e:	29 eb                	sub    ebx,ebp
c000a720:	29 ef                	sub    edi,ebp
c000a722:	e8 b8 d6 ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a727:	83 ec 0c             	sub    esp,0xc
c000a72a:	68 03 04 00 00       	push   0x403
c000a72f:	6a 01                	push   0x1
c000a731:	53                   	push   ebx
c000a732:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a738:	50                   	push   eax
c000a739:	56                   	push   esi
c000a73a:	e8 fb f7 ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a73f:	83 c4 20             	add    esp,0x20
c000a742:	39 fb                	cmp    ebx,edi
c000a744:	75 dc                	jne    c000a722 <mapVASFirstTime+0x35>
c000a746:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a74b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a750:	29 eb                	sub    ebx,ebp
c000a752:	29 ef                	sub    edi,ebp
c000a754:	e8 86 d6 ff ff       	call   c0007ddf <Phys::allocatePage()>
c000a759:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a75d:	83 fa 01             	cmp    edx,0x1
c000a760:	19 d2                	sbb    edx,edx
c000a762:	83 ec 0c             	sub    esp,0xc
c000a765:	83 e2 04             	and    edx,0x4
c000a768:	81 c2 03 04 00 00    	add    edx,0x403
c000a76e:	52                   	push   edx
c000a76f:	6a 01                	push   0x1
c000a771:	53                   	push   ebx
c000a772:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a778:	50                   	push   eax
c000a779:	56                   	push   esi
c000a77a:	e8 bb f7 ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a77f:	83 c4 20             	add    esp,0x20
c000a782:	39 df                	cmp    edi,ebx
c000a784:	75 ce                	jne    c000a754 <mapVASFirstTime+0x67>
c000a786:	83 ec 0c             	sub    esp,0xc
c000a789:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a78e:	6a 04                	push   0x4
c000a790:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a796:	6a ff                	push   0xffffffff
c000a798:	c1 eb 0c             	shr    ebx,0xc
c000a79b:	53                   	push   ebx
c000a79c:	68 00 50 02 c0       	push   0xc0025000
c000a7a1:	56                   	push   esi
c000a7a2:	e8 1f f3 ff ff       	call   c0009ac6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7a7:	83 c4 14             	add    esp,0x14
c000a7aa:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7af:	6a 04                	push   0x4
c000a7b1:	6a ff                	push   0xffffffff
c000a7b3:	53                   	push   ebx
c000a7b4:	68 00 50 02 c0       	push   0xc0025000
c000a7b9:	50                   	push   eax
c000a7ba:	e8 07 f3 ff ff       	call   c0009ac6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7bf:	0f 20 d8             	mov    eax,cr3
c000a7c2:	0f 22 d8             	mov    cr3,eax
c000a7c5:	83 c4 20             	add    esp,0x20
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	5b                   	pop    ebx
c000a7cc:	5e                   	pop    esi
c000a7cd:	5f                   	pop    edi
c000a7ce:	5d                   	pop    ebp
c000a7cf:	c3                   	ret    
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	68 f9 13 02 c0       	push   0xc00213f9
c000a7d8:	e8 88 01 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	83 c4 0c             	add    esp,0xc
c000a7e3:	5b                   	pop    ebx
c000a7e4:	5e                   	pop    esi
c000a7e5:	5f                   	pop    edi
c000a7e6:	5d                   	pop    ebp
c000a7e7:	c3                   	ret    

c000a7e8 <__cxa_atexit>:
c000a7e8:	31 c0                	xor    eax,eax
c000a7ea:	c3                   	ret    

c000a7eb <__cxa_finalize>:
c000a7eb:	c3                   	ret    

c000a7ec <__stack_chk_fail>:
c000a7ec:	55                   	push   ebp
c000a7ed:	89 e5                	mov    ebp,esp
c000a7ef:	83 ec 10             	sub    esp,0x10
c000a7f2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7f5:	68 12 14 02 c0       	push   0xc0021412
c000a7fa:	e8 66 01 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a7ff:	58                   	pop    eax
c000a800:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a803:	5a                   	pop    edx
c000a804:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a807:	68 12 14 02 c0       	push   0xc0021412
c000a80c:	e8 54 01 00 00       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000a811:	c7 04 24 1a 14 02 c0 	mov    DWORD PTR [esp],0xc002141a
c000a818:	e8 7a 6e 00 00       	call   c0011697 <KePanic(char const*)>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	c9                   	leave  
c000a821:	c3                   	ret    

c000a822 <__cxa_pure_virtual>:
c000a822:	83 ec 18             	sub    esp,0x18
c000a825:	68 32 14 02 c0       	push   0xc0021432
c000a82a:	e8 68 6e 00 00       	call   c0011697 <KePanic(char const*)>
c000a82f:	83 c4 1c             	add    esp,0x1c
c000a832:	c3                   	ret    

c000a833 <operator new[](unsigned long)>:
c000a833:	e9 9e d2 ff ff       	jmp    c0007ad6 <malloc>

c000a838 <operator delete(void*, unsigned long)>:
c000a838:	e9 b9 d2 ff ff       	jmp    c0007af6 <rfree>

c000a83d <operator delete[](void*)>:
c000a83d:	e9 b4 d2 ff ff       	jmp    c0007af6 <rfree>

c000a842 <operator delete[](void*, unsigned long)>:
c000a842:	e9 af d2 ff ff       	jmp    c0007af6 <rfree>

c000a847 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a847:	55                   	push   ebp
c000a848:	57                   	push   edi
c000a849:	56                   	push   esi
c000a84a:	be 3b 0f 02 c0       	mov    esi,0xc0020f3b
c000a84f:	53                   	push   ebx
c000a850:	83 ec 20             	sub    esp,0x20
c000a853:	a0 3a 0f 02 c0       	mov    al,ds:0xc0020f3a
c000a858:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a85c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a860:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a864:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a868:	b8 10 00 00 00       	mov    eax,0x10
c000a86d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a873:	75 60                	jne    c000a8d5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a875:	89 c1                	mov    ecx,eax
c000a877:	c1 e9 02             	shr    ecx,0x2
c000a87a:	fc                   	cld    
c000a87b:	31 d2                	xor    edx,edx
c000a87d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a87f:	a8 02                	test   al,0x2
c000a881:	74 0b                	je     c000a88e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a883:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a886:	66 89 17             	mov    WORD PTR [edi],dx
c000a889:	ba 02 00 00 00       	mov    edx,0x2
c000a88e:	a8 01                	test   al,0x1
c000a890:	74 06                	je     c000a898 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a892:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a895:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a898:	89 ee                	mov    esi,ebp
c000a89a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a89e:	eb 02                	jmp    c000a8a2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8a0:	89 c6                	mov    esi,eax
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	83 c1 01             	add    ecx,0x1
c000a8a7:	89 f0                	mov    eax,esi
c000a8a9:	f7 f3                	div    ebx
c000a8ab:	39 de                	cmp    esi,ebx
c000a8ad:	73 f1                	jae    c000a8a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8af:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8b2:	eb 02                	jmp    c000a8b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8b4:	89 c5                	mov    ebp,eax
c000a8b6:	31 d2                	xor    edx,edx
c000a8b8:	83 e9 01             	sub    ecx,0x1
c000a8bb:	89 e8                	mov    eax,ebp
c000a8bd:	f7 f3                	div    ebx
c000a8bf:	39 dd                	cmp    ebp,ebx
c000a8c1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8c5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8c7:	73 eb                	jae    c000a8b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8cd:	83 c4 20             	add    esp,0x20
c000a8d0:	5b                   	pop    ebx
c000a8d1:	5e                   	pop    esi
c000a8d2:	5f                   	pop    edi
c000a8d3:	5d                   	pop    ebp
c000a8d4:	c3                   	ret    
c000a8d5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8d8:	83 c7 02             	add    edi,0x2
c000a8db:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8df:	83 c6 02             	add    esi,0x2
c000a8e2:	83 e8 02             	sub    eax,0x2
c000a8e5:	eb 8e                	jmp    c000a875 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8e7 <Dbg::logc(char)>:
c000a8e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8eb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8f2:	75 12                	jne    c000a906 <Dbg::logc(char)+0x1f>
c000a8f4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8f9:	ec                   	in     al,dx
c000a8fa:	a8 20                	test   al,0x20
c000a8fc:	74 fb                	je     c000a8f9 <Dbg::logc(char)+0x12>
c000a8fe:	ba f8 03 00 00       	mov    edx,0x3f8
c000a903:	88 c8                	mov    al,cl
c000a905:	ee                   	out    dx,al
c000a906:	c3                   	ret    

c000a907 <Dbg::logs(char*)>:
c000a907:	53                   	push   ebx
c000a908:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a90c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a90f:	85 c0                	test   eax,eax
c000a911:	74 11                	je     c000a924 <Dbg::logs(char*)+0x1d>
c000a913:	83 c3 01             	add    ebx,0x1
c000a916:	50                   	push   eax
c000a917:	e8 cb ff ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000a91c:	58                   	pop    eax
c000a91d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a920:	85 c0                	test   eax,eax
c000a922:	75 ef                	jne    c000a913 <Dbg::logs(char*)+0xc>
c000a924:	5b                   	pop    ebx
c000a925:	c3                   	ret    

c000a926 <Dbg::logWriteInt(unsigned int)>:
c000a926:	83 ec 10             	sub    esp,0x10
c000a929:	6a 0a                	push   0xa
c000a92b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a92f:	50                   	push   eax
c000a930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a934:	50                   	push   eax
c000a935:	e8 0d ff ff ff       	call   c000a847 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93a:	50                   	push   eax
c000a93b:	e8 c7 ff ff ff       	call   c000a907 <Dbg::logs(char*)>
c000a940:	83 c4 20             	add    esp,0x20
c000a943:	c3                   	ret    

c000a944 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a944:	83 ec 10             	sub    esp,0x10
c000a947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a94b:	50                   	push   eax
c000a94c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a950:	50                   	push   eax
c000a951:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a955:	52                   	push   edx
c000a956:	e8 ec fe ff ff       	call   c000a847 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a95b:	50                   	push   eax
c000a95c:	e8 a6 ff ff ff       	call   c000a907 <Dbg::logs(char*)>
c000a961:	83 c4 20             	add    esp,0x20
c000a964:	c3                   	ret    

c000a965 <Dbg::kprintf(char const*, ...)>:
c000a965:	55                   	push   ebp
c000a966:	57                   	push   edi
c000a967:	56                   	push   esi
c000a968:	53                   	push   ebx
c000a969:	83 ec 0c             	sub    esp,0xc
c000a96c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a970:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a977:	74 08                	je     c000a981 <Dbg::kprintf(char const*, ...)+0x1c>
c000a979:	83 c4 0c             	add    esp,0xc
c000a97c:	5b                   	pop    ebx
c000a97d:	5e                   	pop    esi
c000a97e:	5f                   	pop    edi
c000a97f:	5d                   	pop    ebp
c000a980:	c3                   	ret    
c000a981:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a985:	31 ff                	xor    edi,edi
c000a987:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a98b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a98e:	85 c0                	test   eax,eax
c000a990:	74 e7                	je     c000a979 <Dbg::kprintf(char const*, ...)+0x14>
c000a992:	8d 77 01             	lea    esi,[edi+0x1]
c000a995:	83 f8 25             	cmp    eax,0x25
c000a998:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a99b:	75 47                	jne    c000a9e4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a99d:	83 c7 02             	add    edi,0x2
c000a9a0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9a3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9a6:	83 e8 25             	sub    eax,0x25
c000a9a9:	0f b6 c0             	movzx  eax,al
c000a9ac:	83 f8 53             	cmp    eax,0x53
c000a9af:	0f 87 ce 00 00 00    	ja     c000aa83 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9b5:	ff 24 85 48 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdebb8]
c000a9bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9c0:	89 c8                	mov    eax,ecx
c000a9c2:	83 c1 04             	add    ecx,0x4
c000a9c5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9c9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9cb:	55                   	push   ebp
c000a9cc:	e8 55 ff ff ff       	call   c000a926 <Dbg::logWriteInt(unsigned int)>
c000a9d1:	58                   	pop    eax
c000a9d2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9d5:	85 c0                	test   eax,eax
c000a9d7:	74 a0                	je     c000a979 <Dbg::kprintf(char const*, ...)+0x14>
c000a9d9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9dc:	83 f8 25             	cmp    eax,0x25
c000a9df:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9e2:	74 b9                	je     c000a99d <Dbg::kprintf(char const*, ...)+0x38>
c000a9e4:	50                   	push   eax
c000a9e5:	89 f7                	mov    edi,esi
c000a9e7:	e8 fb fe ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000a9ec:	89 ee                	mov    esi,ebp
c000a9ee:	58                   	pop    eax
c000a9ef:	eb e1                	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9f5:	89 c8                	mov    eax,ecx
c000a9f7:	83 c1 04             	add    ecx,0x4
c000a9fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9fc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa00:	50                   	push   eax
c000aa01:	e8 01 ff ff ff       	call   c000a907 <Dbg::logs(char*)>
c000aa06:	58                   	pop    eax
c000aa07:	eb c9                	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa0d:	89 d0                	mov    eax,edx
c000aa0f:	83 c2 04             	add    edx,0x4
c000aa12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa16:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa18:	50                   	push   eax
c000aa19:	e8 08 ff ff ff       	call   c000a926 <Dbg::logWriteInt(unsigned int)>
c000aa1e:	58                   	pop    eax
c000aa1f:	eb b1                	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa25:	89 d0                	mov    eax,edx
c000aa27:	83 c2 04             	add    edx,0x4
c000aa2a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa31:	50                   	push   eax
c000aa32:	e8 b0 fe ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000aa37:	58                   	pop    eax
c000aa38:	eb 98                	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa3e:	89 c8                	mov    eax,ecx
c000aa40:	83 c1 04             	add    ecx,0x4
c000aa43:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa47:	6a 10                	push   0x10
c000aa49:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa4b:	51                   	push   ecx
c000aa4c:	e8 f3 fe ff ff       	call   c000a944 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa51:	5d                   	pop    ebp
c000aa52:	58                   	pop    eax
c000aa53:	e9 7a ff ff ff       	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa5c:	89 d0                	mov    eax,edx
c000aa5e:	83 c2 08             	add    edx,0x8
c000aa61:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa65:	6a 10                	push   0x10
c000aa67:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa69:	50                   	push   eax
c000aa6a:	e8 d5 fe ff ff       	call   c000a944 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa6f:	58                   	pop    eax
c000aa70:	5a                   	pop    edx
c000aa71:	e9 5c ff ff ff       	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa76:	6a 25                	push   0x25
c000aa78:	e8 6a fe ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000aa7d:	5a                   	pop    edx
c000aa7e:	e9 4f ff ff ff       	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa83:	6a 25                	push   0x25
c000aa85:	e8 5d fe ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000aa8a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa8e:	50                   	push   eax
c000aa8f:	e8 53 fe ff ff       	call   c000a8e7 <Dbg::logc(char)>
c000aa94:	5a                   	pop    edx
c000aa95:	59                   	pop    ecx
c000aa96:	e9 37 ff ff ff       	jmp    c000a9d2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa9b:	90                   	nop

c000aa9c <KiUbsanPrintDetails(char const*, void*)>:
c000aa9c:	83 ec 1c             	sub    esp,0x1c
c000aa9f:	83 ec 08             	sub    esp,0x8
c000aaa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaa6:	68 98 15 02 c0       	push   0xc0021598
c000aaab:	e8 b5 fe ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000aab0:	83 c4 10             	add    esp,0x10
c000aab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aabb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aabf:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac1:	83 ec 08             	sub    esp,0x8
c000aac4:	50                   	push   eax
c000aac5:	68 ac 15 02 c0       	push   0xc00215ac
c000aaca:	e8 96 fe ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000aacf:	83 c4 10             	add    esp,0x10
c000aad2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aad9:	83 ec 08             	sub    esp,0x8
c000aadc:	50                   	push   eax
c000aadd:	68 b6 15 02 c0       	push   0xc00215b6
c000aae2:	e8 7e fe ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000aae7:	83 c4 10             	add    esp,0x10
c000aaea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aaf1:	83 ec 08             	sub    esp,0x8
c000aaf4:	50                   	push   eax
c000aaf5:	68 c0 15 02 c0       	push   0xc00215c0
c000aafa:	e8 66 fe ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000aaff:	83 c4 10             	add    esp,0x10
c000ab02:	90                   	nop
c000ab03:	83 c4 1c             	add    esp,0x1c
c000ab06:	c3                   	ret    
c000ab07:	90                   	nop

c000ab08 <__ubsan_handle_type_mismatch_v1>:
c000ab08:	83 ec 0c             	sub    esp,0xc
c000ab0b:	83 ec 08             	sub    esp,0x8
c000ab0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab12:	68 04 17 02 c0       	push   0xc0021704
c000ab17:	e8 80 ff ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ab1c:	83 c4 10             	add    esp,0x10
c000ab1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab24:	75 16                	jne    c000ab3c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab26:	83 ec 0c             	sub    esp,0xc
c000ab29:	68 ca 15 02 c0       	push   0xc00215ca
c000ab2e:	e8 32 fe ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	e9 91 00 00 00       	jmp    c000abcc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab3b:	90                   	nop
c000ab3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab40:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab43:	85 c0                	test   eax,eax
c000ab45:	74 29                	je     c000ab70 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab4e:	83 e8 01             	sub    eax,0x1
c000ab51:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab55:	75 19                	jne    c000ab70 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab57:	83 ec 08             	sub    esp,0x8
c000ab5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab5e:	68 24 17 02 c0       	push   0xc0021724
c000ab63:	e8 fd fd ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ab68:	83 c4 10             	add    esp,0x10
c000ab6b:	eb 5f                	jmp    c000abcc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 df 15 02 c0       	push   0xc00215df
c000ab78:	e8 e8 fd ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab84:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab87:	0f b6 c0             	movzx  eax,al
c000ab8a:	83 ec 08             	sub    esp,0x8
c000ab8d:	50                   	push   eax
c000ab8e:	68 f9 15 02 c0       	push   0xc00215f9
c000ab93:	e8 cd fd ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ab98:	83 c4 10             	add    esp,0x10
c000ab9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aba2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000aba5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abb0:	0f b6 c0             	movzx  eax,al
c000abb3:	8b 04 85 00 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc800]
c000abba:	51                   	push   ecx
c000abbb:	52                   	push   edx
c000abbc:	50                   	push   eax
c000abbd:	68 4c 17 02 c0       	push   0xc002174c
c000abc2:	e8 9e fd ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000abc7:	83 c4 10             	add    esp,0x10
c000abca:	66 90                	xchg   ax,ax
c000abcc:	83 ec 0c             	sub    esp,0xc
c000abcf:	68 04 17 02 c0       	push   0xc0021704
c000abd4:	e8 be 6a 00 00       	call   c0011697 <KePanic(char const*)>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	90                   	nop
c000abdd:	83 c4 0c             	add    esp,0xc
c000abe0:	c3                   	ret    
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]

c000abe4 <__ubsan_handle_pointer_overflow>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 94 17 02 c0       	push   0xc0021794
c000abf3:	e8 a4 fe ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 94 17 02 c0       	push   0xc0021794
c000ac03:	e8 8f 6a 00 00       	call   c0011697 <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_out_of_bounds>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 04 16 02 c0       	push   0xc0021604
c000ac1f:	e8 78 fe ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 04 16 02 c0       	push   0xc0021604
c000ac2f:	e8 63 6a 00 00       	call   c0011697 <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_add_overflow>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 21 16 02 c0       	push   0xc0021621
c000ac4b:	e8 4c fe ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 21 16 02 c0       	push   0xc0021621
c000ac5b:	e8 37 6a 00 00       	call   c0011697 <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_load_invalid_value>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 b4 17 02 c0       	push   0xc00217b4
c000ac77:	e8 20 fe ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 b4 17 02 c0       	push   0xc00217b4
c000ac87:	e8 0b 6a 00 00       	call   c0011697 <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_divrem_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 d8 17 02 c0       	push   0xc00217d8
c000aca3:	e8 f4 fd ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 d8 17 02 c0       	push   0xc00217d8
c000acb3:	e8 df 69 00 00       	call   c0011697 <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_mul_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 3d 16 02 c0       	push   0xc002163d
c000accf:	e8 c8 fd ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 3d 16 02 c0       	push   0xc002163d
c000acdf:	e8 b3 69 00 00       	call   c0011697 <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_sub_overflow>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 59 16 02 c0       	push   0xc0021659
c000acfb:	e8 9c fd ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 59 16 02 c0       	push   0xc0021659
c000ad0b:	e8 87 69 00 00       	call   c0011697 <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_shift_out_of_bounds>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 f8 17 02 c0       	push   0xc00217f8
c000ad27:	e8 70 fd ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 f8 17 02 c0       	push   0xc00217f8
c000ad37:	e8 5b 69 00 00       	call   c0011697 <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <__ubsan_handle_negate_overflow>:
c000ad44:	83 ec 0c             	sub    esp,0xc
c000ad47:	83 ec 08             	sub    esp,0x8
c000ad4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad4e:	68 1c 18 02 c0       	push   0xc002181c
c000ad53:	e8 44 fd ff ff       	call   c000aa9c <KiUbsanPrintDetails(char const*, void*)>
c000ad58:	83 c4 10             	add    esp,0x10
c000ad5b:	83 ec 0c             	sub    esp,0xc
c000ad5e:	68 1c 18 02 c0       	push   0xc002181c
c000ad63:	e8 2f 69 00 00       	call   c0011697 <KePanic(char const*)>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	90                   	nop
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	c3                   	ret    

c000ad70 <KiIsHashInTable(unsigned short)>:
c000ad70:	0f b7 d0             	movzx  edx,ax
c000ad73:	83 e0 07             	and    eax,0x7
c000ad76:	c1 fa 03             	sar    edx,0x3
c000ad79:	88 c1                	mov    cl,al
c000ad7b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad82:	d3 fa                	sar    edx,cl
c000ad84:	89 d0                	mov    eax,edx
c000ad86:	83 e0 01             	and    eax,0x1
c000ad89:	c3                   	ret    

c000ad8a <KiSetHashInTable(unsigned short, bool)>:
c000ad8a:	56                   	push   esi
c000ad8b:	53                   	push   ebx
c000ad8c:	0f b7 d8             	movzx  ebx,ax
c000ad8f:	83 e0 07             	and    eax,0x7
c000ad92:	c1 fb 03             	sar    ebx,0x3
c000ad95:	89 c1                	mov    ecx,eax
c000ad97:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad9e:	b8 01 00 00 00       	mov    eax,0x1
c000ada3:	d3 e0                	shl    eax,cl
c000ada5:	84 d2                	test   dl,dl
c000ada7:	74 04                	je     c000adad <KiSetHashInTable(unsigned short, bool)+0x23>
c000ada9:	09 f0                	or     eax,esi
c000adab:	eb 04                	jmp    c000adb1 <KiSetHashInTable(unsigned short, bool)+0x27>
c000adad:	f7 d0                	not    eax
c000adaf:	21 f0                	and    eax,esi
c000adb1:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	c3                   	ret    

c000adba <KiFlushSymlinkChanges()>:
c000adba:	57                   	push   edi
c000adbb:	56                   	push   esi
c000adbc:	53                   	push   ebx
c000adbd:	83 ec 1c             	sub    esp,0x1c
c000adc0:	68 14 01 00 00       	push   0x114
c000adc5:	e8 0c cd ff ff       	call   c0007ad6 <malloc>
c000adca:	83 c4 0c             	add    esp,0xc
c000adcd:	89 c3                	mov    ebx,eax
c000adcf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000add5:	68 3b 18 02 c0       	push   0xc002183b
c000adda:	50                   	push   eax
c000addb:	e8 8c 0d 00 00       	call   c000bb6c <File::File(char const*, Process*)>
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	85 db                	test   ebx,ebx
c000ade5:	75 10                	jne    c000adf7 <KiFlushSymlinkChanges()+0x3d>
c000ade7:	83 ec 0c             	sub    esp,0xc
c000adea:	68 59 18 02 c0       	push   0xc0021859
c000adef:	e8 a3 68 00 00       	call   c0011697 <KePanic(char const*)>
c000adf4:	83 c4 10             	add    esp,0x10
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	6a 06                	push   0x6
c000adfb:	53                   	push   ebx
c000adfc:	e8 89 0d 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000ae01:	83 c4 10             	add    esp,0x10
c000ae04:	85 c0                	test   eax,eax
c000ae06:	74 10                	je     c000ae18 <KiFlushSymlinkChanges()+0x5e>
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	68 73 18 02 c0       	push   0xc0021873
c000ae10:	e8 82 68 00 00       	call   c0011697 <KePanic(char const*)>
c000ae15:	83 c4 10             	add    esp,0x10
c000ae18:	31 f6                	xor    esi,esi
c000ae1a:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae20:	7e 70                	jle    c000ae92 <KiFlushSymlinkChanges()+0xd8>
c000ae22:	83 ec 0c             	sub    esp,0xc
c000ae25:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae27:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae2b:	89 f0                	mov    eax,esi
c000ae2d:	57                   	push   edi
c000ae2e:	c1 e0 08             	shl    eax,0x8
c000ae31:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae36:	50                   	push   eax
c000ae37:	6a 00                	push   0x0
c000ae39:	68 00 01 00 00       	push   0x100
c000ae3e:	53                   	push   ebx
c000ae3f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae42:	83 c4 20             	add    esp,0x20
c000ae45:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4d:	74 10                	je     c000ae5f <KiFlushSymlinkChanges()+0xa5>
c000ae4f:	83 ec 0c             	sub    esp,0xc
c000ae52:	68 8d 18 02 c0       	push   0xc002188d
c000ae57:	e8 3b 68 00 00       	call   c0011697 <KePanic(char const*)>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae64:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae6b:	57                   	push   edi
c000ae6c:	52                   	push   edx
c000ae6d:	6a 00                	push   0x0
c000ae6f:	6a 08                	push   0x8
c000ae71:	53                   	push   ebx
c000ae72:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae75:	83 c4 20             	add    esp,0x20
c000ae78:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae7d:	74 10                	je     c000ae8f <KiFlushSymlinkChanges()+0xd5>
c000ae7f:	83 ec 0c             	sub    esp,0xc
c000ae82:	68 a7 18 02 c0       	push   0xc00218a7
c000ae87:	e8 0b 68 00 00       	call   c0011697 <KePanic(char const*)>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	46                   	inc    esi
c000ae90:	eb 88                	jmp    c000ae1a <KiFlushSymlinkChanges()+0x60>
c000ae92:	83 ec 0c             	sub    esp,0xc
c000ae95:	53                   	push   ebx
c000ae96:	e8 4d 0d 00 00       	call   c000bbe8 <File::close()>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	85 db                	test   ebx,ebx
c000aea0:	74 0c                	je     c000aeae <KiFlushSymlinkChanges()+0xf4>
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aea7:	53                   	push   ebx
c000aea8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	5b                   	pop    ebx
c000aebc:	5e                   	pop    esi
c000aebd:	5f                   	pop    edi
c000aebe:	c3                   	ret    

c000aebf <KiDeinitialiseSymlinks(void*)>:
c000aebf:	e9 f6 fe ff ff       	jmp    c000adba <KiFlushSymlinkChanges()>

c000aec4 <KiGetSymlinkHash(char const*)>:
c000aec4:	53                   	push   ebx
c000aec5:	89 c3                	mov    ebx,eax
c000aec7:	83 ec 14             	sub    esp,0x14
c000aeca:	50                   	push   eax
c000aecb:	e8 a0 56 ff ff       	call   c0000570 <strlen>
c000aed0:	5a                   	pop    edx
c000aed1:	59                   	pop    ecx
c000aed2:	50                   	push   eax
c000aed3:	53                   	push   ebx
c000aed4:	e8 40 61 00 00       	call   c0011019 <KeCalculateCRC32(unsigned char*, int)>
c000aed9:	83 c4 18             	add    esp,0x18
c000aedc:	89 c2                	mov    edx,eax
c000aede:	5b                   	pop    ebx
c000aedf:	c1 ea 10             	shr    edx,0x10
c000aee2:	31 d0                	xor    eax,edx
c000aee4:	c3                   	ret    

c000aee5 <KiCreateSymlinkID()>:
c000aee5:	55                   	push   ebp
c000aee6:	57                   	push   edi
c000aee7:	56                   	push   esi
c000aee8:	53                   	push   ebx
c000aee9:	31 db                	xor    ebx,ebx
c000aeeb:	83 ec 1c             	sub    esp,0x1c
c000aeee:	e8 f2 68 00 00       	call   c00117e5 <KeRand()>
c000aef3:	43                   	inc    ebx
c000aef4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aefa:	31 d2                	xor    edx,edx
c000aefc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aeff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af03:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af09:	c1 e0 1f             	shl    eax,0x1f
c000af0c:	89 d7                	mov    edi,edx
c000af0e:	89 c6                	mov    esi,eax
c000af10:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af1c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af22:	75 10                	jne    c000af34 <KiCreateSymlinkID()+0x4f>
c000af24:	83 ec 0c             	sub    esp,0xc
c000af27:	68 c1 18 02 c0       	push   0xc00218c1
c000af2c:	e8 66 67 00 00       	call   c0011697 <KePanic(char const*)>
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af38:	75 04                	jne    c000af3e <KiCreateSymlinkID()+0x59>
c000af3a:	39 f5                	cmp    ebp,esi
c000af3c:	74 b0                	je     c000aeee <KiCreateSymlinkID()+0x9>
c000af3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af46:	31 f0                	xor    eax,esi
c000af48:	83 c4 1c             	add    esp,0x1c
c000af4b:	31 fa                	xor    edx,edi
c000af4d:	5b                   	pop    ebx
c000af4e:	5e                   	pop    esi
c000af4f:	5f                   	pop    edi
c000af50:	5d                   	pop    ebp
c000af51:	c3                   	ret    

c000af52 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af52:	53                   	push   ebx
c000af53:	83 ec 0c             	sub    esp,0xc
c000af56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af62:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af67:	68 00 01 00 00       	push   0x100
c000af6c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af73:	6a 00                	push   0x0
c000af75:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af7c:	c1 e0 08             	shl    eax,0x8
c000af7f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af84:	50                   	push   eax
c000af85:	e8 66 55 ff ff       	call   c00004f0 <memset>
c000af8a:	58                   	pop    eax
c000af8b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af90:	5a                   	pop    edx
c000af91:	c1 e0 08             	shl    eax,0x8
c000af94:	53                   	push   ebx
c000af95:	05 00 70 02 c0       	add    eax,0xc0027000
c000af9a:	50                   	push   eax
c000af9b:	e8 a0 56 ff ff       	call   c0000640 <strcpy>
c000afa0:	89 d8                	mov    eax,ebx
c000afa2:	e8 1d ff ff ff       	call   c000aec4 <KiGetSymlinkHash(char const*)>
c000afa7:	59                   	pop    ecx
c000afa8:	0f b7 d8             	movzx  ebx,ax
c000afab:	58                   	pop    eax
c000afac:	53                   	push   ebx
c000afad:	68 ca 18 02 c0       	push   0xc00218ca
c000afb2:	e8 ae f9 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000afb7:	89 d8                	mov    eax,ebx
c000afb9:	ba 01 00 00 00       	mov    edx,0x1
c000afbe:	e8 c7 fd ff ff       	call   c000ad8a <KiSetHashInTable(unsigned short, bool)>
c000afc3:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	40                   	inc    eax
c000afcc:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afd1:	83 f8 03             	cmp    eax,0x3
c000afd4:	7e 09                	jle    c000afdf <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afd6:	83 c4 08             	add    esp,0x8
c000afd9:	5b                   	pop    ebx
c000afda:	e9 db fd ff ff       	jmp    c000adba <KiFlushSymlinkChanges()>
c000afdf:	83 c4 08             	add    esp,0x8
c000afe2:	5b                   	pop    ebx
c000afe3:	c3                   	ret    

c000afe4 <KeInitialiseSymlinks()>:
c000afe4:	57                   	push   edi
c000afe5:	56                   	push   esi
c000afe6:	53                   	push   ebx
c000afe7:	81 ec 14 01 00 00    	sub    esp,0x114
c000afed:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000aff7:	68 00 20 00 00       	push   0x2000
c000affc:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b006:	6a 00                	push   0x0
c000b008:	68 00 74 02 c0       	push   0xc0027400
c000b00d:	e8 de 54 ff ff       	call   c00004f0 <memset>
c000b012:	59                   	pop    ecx
c000b013:	5b                   	pop    ebx
c000b014:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b01a:	68 de 18 02 c0       	push   0xc00218de
c000b01f:	e8 41 f9 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000b024:	5e                   	pop    esi
c000b025:	5f                   	pop    edi
c000b026:	6a 00                	push   0x0
c000b028:	68 bf ae 00 c0       	push   0xc000aebf
c000b02d:	e8 52 5e 00 00       	call   c0010e84 <KeRegisterAtexit(void (*)(void*), void*)>
c000b032:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b039:	e8 98 ca ff ff       	call   c0007ad6 <malloc>
c000b03e:	83 c4 0c             	add    esp,0xc
c000b041:	89 c3                	mov    ebx,eax
c000b043:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b049:	68 3b 18 02 c0       	push   0xc002183b
c000b04e:	50                   	push   eax
c000b04f:	e8 18 0b 00 00       	call   c000bb6c <File::File(char const*, Process*)>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	85 db                	test   ebx,ebx
c000b059:	75 10                	jne    c000b06b <KeInitialiseSymlinks()+0x87>
c000b05b:	83 ec 0c             	sub    esp,0xc
c000b05e:	68 fb 18 02 c0       	push   0xc00218fb
c000b063:	e8 2f 66 00 00       	call   c0011697 <KePanic(char const*)>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	83 ec 0c             	sub    esp,0xc
c000b06e:	53                   	push   ebx
c000b06f:	e8 da 0d 00 00       	call   c000be4e <File::exists()>
c000b074:	83 c4 10             	add    esp,0x10
c000b077:	84 c0                	test   al,al
c000b079:	75 3a                	jne    c000b0b5 <KeInitialiseSymlinks()+0xd1>
c000b07b:	52                   	push   edx
c000b07c:	52                   	push   edx
c000b07d:	6a 12                	push   0x12
c000b07f:	53                   	push   ebx
c000b080:	e8 05 0b 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	85 c0                	test   eax,eax
c000b08a:	74 10                	je     c000b09c <KeInitialiseSymlinks()+0xb8>
c000b08c:	83 ec 0c             	sub    esp,0xc
c000b08f:	68 18 19 02 c0       	push   0xc0021918
c000b094:	e8 fe 65 00 00       	call   c0011697 <KePanic(char const*)>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	83 ec 0c             	sub    esp,0xc
c000b09f:	53                   	push   ebx
c000b0a0:	e8 43 0b 00 00       	call   c000bbe8 <File::close()>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	85 db                	test   ebx,ebx
c000b0aa:	0f 84 9e 00 00 00    	je     c000b14e <KeInitialiseSymlinks()+0x16a>
c000b0b0:	e9 8d 00 00 00       	jmp    c000b142 <KeInitialiseSymlinks()+0x15e>
c000b0b5:	50                   	push   eax
c000b0b6:	50                   	push   eax
c000b0b7:	6a 01                	push   0x1
c000b0b9:	53                   	push   ebx
c000b0ba:	e8 cb 0a 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000b0bf:	83 c4 10             	add    esp,0x10
c000b0c2:	85 c0                	test   eax,eax
c000b0c4:	74 10                	je     c000b0d6 <KeInitialiseSymlinks()+0xf2>
c000b0c6:	83 ec 0c             	sub    esp,0xc
c000b0c9:	68 35 19 02 c0       	push   0xc0021935
c000b0ce:	e8 c4 65 00 00       	call   c0011697 <KePanic(char const*)>
c000b0d3:	83 c4 10             	add    esp,0x10
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0df:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e5:	57                   	push   edi
c000b0e6:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ea:	56                   	push   esi
c000b0eb:	6a 00                	push   0x0
c000b0ed:	68 00 01 00 00       	push   0x100
c000b0f2:	53                   	push   ebx
c000b0f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0f6:	83 c4 20             	add    esp,0x20
c000b0f9:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b101:	75 33                	jne    c000b136 <KeInitialiseSymlinks()+0x152>
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b108:	57                   	push   edi
c000b109:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b10d:	52                   	push   edx
c000b10e:	6a 00                	push   0x0
c000b110:	6a 08                	push   0x8
c000b112:	53                   	push   ebx
c000b113:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b116:	83 c4 20             	add    esp,0x20
c000b119:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b11e:	75 16                	jne    c000b136 <KeInitialiseSymlinks()+0x152>
c000b120:	89 f0                	mov    eax,esi
c000b122:	e8 9d fd ff ff       	call   c000aec4 <KiGetSymlinkHash(char const*)>
c000b127:	ba 01 00 00 00       	mov    edx,0x1
c000b12c:	0f b7 c0             	movzx  eax,ax
c000b12f:	e8 56 fc ff ff       	call   c000ad8a <KiSetHashInTable(unsigned short, bool)>
c000b134:	eb a0                	jmp    c000b0d6 <KeInitialiseSymlinks()+0xf2>
c000b136:	83 ec 0c             	sub    esp,0xc
c000b139:	53                   	push   ebx
c000b13a:	e8 a9 0a 00 00       	call   c000bbe8 <File::close()>
c000b13f:	83 c4 10             	add    esp,0x10
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b147:	53                   	push   ebx
c000b148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	81 c4 10 01 00 00    	add    esp,0x110
c000b154:	5b                   	pop    ebx
c000b155:	5e                   	pop    esi
c000b156:	5f                   	pop    edi
c000b157:	c3                   	ret    

c000b158 <KiIsSymlinkRegistered(char const*)>:
c000b158:	55                   	push   ebp
c000b159:	57                   	push   edi
c000b15a:	56                   	push   esi
c000b15b:	53                   	push   ebx
c000b15c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b162:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b169:	89 f0                	mov    eax,esi
c000b16b:	e8 54 fd ff ff       	call   c000aec4 <KiGetSymlinkHash(char const*)>
c000b170:	0f b7 c0             	movzx  eax,ax
c000b173:	53                   	push   ebx
c000b174:	56                   	push   esi
c000b175:	50                   	push   eax
c000b176:	68 50 19 02 c0       	push   0xc0021950
c000b17b:	e8 e5 f7 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000b180:	89 f0                	mov    eax,esi
c000b182:	e8 3d fd ff ff       	call   c000aec4 <KiGetSymlinkHash(char const*)>
c000b187:	0f b7 c0             	movzx  eax,ax
c000b18a:	e8 e1 fb ff ff       	call   c000ad70 <KiIsHashInTable(unsigned short)>
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	88 c1                	mov    cl,al
c000b194:	31 d2                	xor    edx,edx
c000b196:	31 c0                	xor    eax,eax
c000b198:	84 c9                	test   cl,cl
c000b19a:	0f 84 31 01 00 00    	je     c000b2d1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1a0:	31 db                	xor    ebx,ebx
c000b1a2:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b1a8:	7e 30                	jle    c000b1da <KiIsSymlinkRegistered(char const*)+0x82>
c000b1aa:	89 d8                	mov    eax,ebx
c000b1ac:	51                   	push   ecx
c000b1ad:	c1 e0 08             	shl    eax,0x8
c000b1b0:	51                   	push   ecx
c000b1b1:	05 00 70 02 c0       	add    eax,0xc0027000
c000b1b6:	50                   	push   eax
c000b1b7:	56                   	push   esi
c000b1b8:	e8 93 55 ff ff       	call   c0000750 <strcmp>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	85 c0                	test   eax,eax
c000b1c2:	75 13                	jne    c000b1d7 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1c4:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1cb:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1d2:	e9 fa 00 00 00       	jmp    c000b2d1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1d7:	43                   	inc    ebx
c000b1d8:	eb c8                	jmp    c000b1a2 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	68 14 01 00 00       	push   0x114
c000b1e2:	e8 ef c8 ff ff       	call   c0007ad6 <malloc>
c000b1e7:	83 c4 0c             	add    esp,0xc
c000b1ea:	89 c3                	mov    ebx,eax
c000b1ec:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1f2:	68 3b 18 02 c0       	push   0xc002183b
c000b1f7:	50                   	push   eax
c000b1f8:	e8 6f 09 00 00       	call   c000bb6c <File::File(char const*, Process*)>
c000b1fd:	83 c4 10             	add    esp,0x10
c000b200:	85 db                	test   ebx,ebx
c000b202:	75 12                	jne    c000b216 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b204:	83 ec 0c             	sub    esp,0xc
c000b207:	68 65 19 02 c0       	push   0xc0021965
c000b20c:	e8 86 64 00 00       	call   c0011697 <KePanic(char const*)>
c000b211:	83 c4 10             	add    esp,0x10
c000b214:	eb 10                	jmp    c000b226 <KiIsSymlinkRegistered(char const*)+0xce>
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	53                   	push   ebx
c000b21a:	e8 2f 0c 00 00       	call   c000be4e <File::exists()>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	84 c0                	test   al,al
c000b224:	74 de                	je     c000b204 <KiIsSymlinkRegistered(char const*)+0xac>
c000b226:	52                   	push   edx
c000b227:	52                   	push   edx
c000b228:	6a 01                	push   0x1
c000b22a:	53                   	push   ebx
c000b22b:	e8 5a 09 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	85 c0                	test   eax,eax
c000b235:	74 10                	je     c000b247 <KiIsSymlinkRegistered(char const*)+0xef>
c000b237:	83 ec 0c             	sub    esp,0xc
c000b23a:	68 80 19 02 c0       	push   0xc0021980
c000b23f:	e8 53 64 00 00       	call   c0011697 <KePanic(char const*)>
c000b244:	83 c4 10             	add    esp,0x10
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b24c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b250:	55                   	push   ebp
c000b251:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b255:	57                   	push   edi
c000b256:	6a 00                	push   0x0
c000b258:	68 00 01 00 00       	push   0x100
c000b25d:	53                   	push   ebx
c000b25e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b261:	83 c4 20             	add    esp,0x20
c000b264:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b26c:	75 4b                	jne    c000b2b9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b273:	55                   	push   ebp
c000b274:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b278:	52                   	push   edx
c000b279:	6a 00                	push   0x0
c000b27b:	6a 08                	push   0x8
c000b27d:	53                   	push   ebx
c000b27e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b281:	83 c4 20             	add    esp,0x20
c000b284:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b289:	75 2e                	jne    c000b2b9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b28b:	50                   	push   eax
c000b28c:	50                   	push   eax
c000b28d:	57                   	push   edi
c000b28e:	56                   	push   esi
c000b28f:	e8 bc 54 ff ff       	call   c0000750 <strcmp>
c000b294:	83 c4 10             	add    esp,0x10
c000b297:	85 c0                	test   eax,eax
c000b299:	75 ac                	jne    c000b247 <KiIsSymlinkRegistered(char const*)+0xef>
c000b29b:	83 ec 0c             	sub    esp,0xc
c000b29e:	53                   	push   ebx
c000b29f:	e8 44 09 00 00       	call   c000bbe8 <File::close()>
c000b2a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	eb 18                	jmp    c000b2d1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b2b9:	83 ec 0c             	sub    esp,0xc
c000b2bc:	53                   	push   ebx
c000b2bd:	e8 26 09 00 00       	call   c000bbe8 <File::close()>
c000b2c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2ca:	83 c4 10             	add    esp,0x10
c000b2cd:	31 c0                	xor    eax,eax
c000b2cf:	31 d2                	xor    edx,edx
c000b2d1:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2d7:	5b                   	pop    ebx
c000b2d8:	5e                   	pop    esi
c000b2d9:	5f                   	pop    edi
c000b2da:	5d                   	pop    ebp
c000b2db:	c3                   	ret    

c000b2dc <KeDereferenceSymlink(char const*, char*)>:
c000b2dc:	55                   	push   ebp
c000b2dd:	57                   	push   edi
c000b2de:	56                   	push   esi
c000b2df:	53                   	push   ebx
c000b2e0:	83 ec 48             	sub    esp,0x48
c000b2e3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2e7:	56                   	push   esi
c000b2e8:	e8 6b fe ff ff       	call   c000b158 <KiIsSymlinkRegistered(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	89 c7                	mov    edi,eax
c000b2f2:	89 d0                	mov    eax,edx
c000b2f4:	09 f8                	or     eax,edi
c000b2f6:	75 07                	jne    c000b2ff <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2f8:	31 c0                	xor    eax,eax
c000b2fa:	e9 7c 01 00 00       	jmp    c000b47b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2ff:	83 ec 0c             	sub    esp,0xc
c000b302:	89 d5                	mov    ebp,edx
c000b304:	68 14 01 00 00       	push   0x114
c000b309:	e8 c8 c7 ff ff       	call   c0007ad6 <malloc>
c000b30e:	83 c4 0c             	add    esp,0xc
c000b311:	89 c3                	mov    ebx,eax
c000b313:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b319:	56                   	push   esi
c000b31a:	50                   	push   eax
c000b31b:	e8 4c 08 00 00       	call   c000bb6c <File::File(char const*, Process*)>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	85 db                	test   ebx,ebx
c000b325:	0f 84 32 01 00 00    	je     c000b45d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b32b:	56                   	push   esi
c000b32c:	56                   	push   esi
c000b32d:	6a 01                	push   0x1
c000b32f:	53                   	push   ebx
c000b330:	e8 55 08 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	85 c0                	test   eax,eax
c000b33a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b33c:	74 09                	je     c000b347 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b33e:	83 ec 0c             	sub    esp,0xc
c000b341:	53                   	push   ebx
c000b342:	e9 10 01 00 00       	jmp    c000b457 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b347:	83 ec 0c             	sub    esp,0xc
c000b34a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b34e:	56                   	push   esi
c000b34f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b353:	52                   	push   edx
c000b354:	6a 00                	push   0x0
c000b356:	6a 08                	push   0x8
c000b358:	53                   	push   ebx
c000b359:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b35c:	83 c4 20             	add    esp,0x20
c000b35f:	85 c0                	test   eax,eax
c000b361:	0f 85 e2 00 00 00    	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b367:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b36c:	0f 85 d7 00 00 00    	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b372:	83 ec 0c             	sub    esp,0xc
c000b375:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b377:	56                   	push   esi
c000b378:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b37c:	52                   	push   edx
c000b37d:	6a 00                	push   0x0
c000b37f:	6a 08                	push   0x8
c000b381:	53                   	push   ebx
c000b382:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b385:	83 c4 20             	add    esp,0x20
c000b388:	85 c0                	test   eax,eax
c000b38a:	0f 85 b9 00 00 00    	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b390:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b395:	0f 85 ae 00 00 00    	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b39b:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b39f:	0f 85 53 ff ff ff    	jne    c000b2f8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3a5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b3a9:	0f 85 49 ff ff ff    	jne    c000b2f8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3af:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b3b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3bf:	51                   	push   ecx
c000b3c0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3c4:	50                   	push   eax
c000b3c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3c9:	50                   	push   eax
c000b3ca:	53                   	push   ebx
c000b3cb:	e8 bc 0a 00 00       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c000b3d0:	83 c4 10             	add    esp,0x10
c000b3d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3d8:	75 6f                	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3da:	31 c9                	xor    ecx,ecx
c000b3dc:	bf 0f 00 00 00       	mov    edi,0xf
c000b3e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3e9:	39 c7                	cmp    edi,eax
c000b3eb:	89 cf                	mov    edi,ecx
c000b3ed:	19 d7                	sbb    edi,edx
c000b3ef:	73 58                	jae    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3f1:	83 c0 f0             	add    eax,0xfffffff0
c000b3f4:	bf ff 00 00 00       	mov    edi,0xff
c000b3f9:	83 d2 ff             	adc    edx,0xffffffff
c000b3fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b400:	39 c7                	cmp    edi,eax
c000b402:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b406:	19 d1                	sbb    ecx,edx
c000b408:	72 53                	jb     c000b45d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b40a:	40                   	inc    eax
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	6a 00                	push   0x0
c000b40f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b413:	e8 d8 50 ff ff       	call   c00004f0 <memset>
c000b418:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b41d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b421:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b425:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b429:	53                   	push   ebx
c000b42a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b42d:	83 c4 20             	add    esp,0x20
c000b430:	85 c0                	test   eax,eax
c000b432:	75 15                	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b438:	89 c7                	mov    edi,eax
c000b43a:	c1 ff 1f             	sar    edi,0x1f
c000b43d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b441:	75 06                	jne    c000b449 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b443:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b447:	74 19                	je     c000b462 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b449:	83 ec 0c             	sub    esp,0xc
c000b44c:	53                   	push   ebx
c000b44d:	e8 96 07 00 00       	call   c000bbe8 <File::close()>
c000b452:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b454:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b457:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	83 c8 ff             	or     eax,0xffffffff
c000b460:	eb 19                	jmp    c000b47b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b462:	83 ec 0c             	sub    esp,0xc
c000b465:	53                   	push   ebx
c000b466:	e8 7d 07 00 00       	call   c000bbe8 <File::close()>
c000b46b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b46d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b470:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b473:	83 c4 10             	add    esp,0x10
c000b476:	b8 01 00 00 00       	mov    eax,0x1
c000b47b:	83 c4 3c             	add    esp,0x3c
c000b47e:	5b                   	pop    ebx
c000b47f:	5e                   	pop    esi
c000b480:	5f                   	pop    edi
c000b481:	5d                   	pop    ebp
c000b482:	c3                   	ret    

c000b483 <KeCreateSymlink(char const*, char const*)>:
c000b483:	55                   	push   ebp
c000b484:	57                   	push   edi
c000b485:	56                   	push   esi
c000b486:	53                   	push   ebx
c000b487:	83 ec 38             	sub    esp,0x38
c000b48a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b48e:	68 14 01 00 00       	push   0x114
c000b493:	e8 3e c6 ff ff       	call   c0007ad6 <malloc>
c000b498:	6a 00                	push   0x0
c000b49a:	89 c3                	mov    ebx,eax
c000b49c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b4a6:	50                   	push   eax
c000b4a7:	e8 e2 05 00 00       	call   c000ba8e <File::File(char const*, Process*, bool)>
c000b4ac:	83 c4 20             	add    esp,0x20
c000b4af:	b8 01 00 00 00       	mov    eax,0x1
c000b4b4:	85 db                	test   ebx,ebx
c000b4b6:	0f 84 19 01 00 00    	je     c000b5d5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4bc:	52                   	push   edx
c000b4bd:	52                   	push   edx
c000b4be:	6a 12                	push   0x12
c000b4c0:	53                   	push   ebx
c000b4c1:	e8 c4 06 00 00       	call   c000bb8a <File::open(FileOpenMode)>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	85 c0                	test   eax,eax
c000b4cb:	74 0b                	je     c000b4d8 <KeCreateSymlink(char const*, char const*)+0x55>
c000b4cd:	83 ec 0c             	sub    esp,0xc
c000b4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d2:	53                   	push   ebx
c000b4d3:	e9 f2 00 00 00       	jmp    c000b5ca <KeCreateSymlink(char const*, char const*)+0x147>
c000b4d8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4dc:	be cd 19 02 c0       	mov    esi,0xc00219cd
c000b4e1:	b9 09 00 00 00       	mov    ecx,0x9
c000b4e6:	fc                   	cld    
c000b4e7:	83 ec 0c             	sub    esp,0xc
c000b4ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4ec:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f2:	56                   	push   esi
c000b4f3:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4f7:	52                   	push   edx
c000b4f8:	6a 00                	push   0x0
c000b4fa:	6a 08                	push   0x8
c000b4fc:	53                   	push   ebx
c000b4fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b500:	83 c4 20             	add    esp,0x20
c000b503:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b508:	0f 85 ae 00 00 00    	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b50e:	85 c0                	test   eax,eax
c000b510:	0f 85 a6 00 00 00    	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b516:	e8 ca f9 ff ff       	call   c000aee5 <KiCreateSymlinkID()>
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b522:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b526:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b528:	56                   	push   esi
c000b529:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b52d:	52                   	push   edx
c000b52e:	6a 00                	push   0x0
c000b530:	6a 08                	push   0x8
c000b532:	53                   	push   ebx
c000b533:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b536:	83 c4 20             	add    esp,0x20
c000b539:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b53e:	75 7c                	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b540:	85 c0                	test   eax,eax
c000b542:	75 78                	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b549:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b54c:	55                   	push   ebp
c000b54d:	e8 1e 50 ff ff       	call   c0000570 <strlen>
c000b552:	89 34 24             	mov    DWORD PTR [esp],esi
c000b555:	31 d2                	xor    edx,edx
c000b557:	55                   	push   ebp
c000b558:	52                   	push   edx
c000b559:	50                   	push   eax
c000b55a:	53                   	push   ebx
c000b55b:	ff d7                	call   edi
c000b55d:	83 c4 14             	add    esp,0x14
c000b560:	89 c6                	mov    esi,eax
c000b562:	55                   	push   ebp
c000b563:	e8 08 50 ff ff       	call   c0000570 <strlen>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b56f:	75 4b                	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b571:	85 f6                	test   esi,esi
c000b573:	75 47                	jne    c000b5bc <KeCreateSymlink(char const*, char const*)+0x139>
c000b575:	50                   	push   eax
c000b576:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b57a:	55                   	push   ebp
c000b57b:	68 9b 19 02 c0       	push   0xc002199b
c000b580:	e8 e0 f3 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000b585:	83 c4 0c             	add    esp,0xc
c000b588:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b58c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b590:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b594:	e8 b9 f9 ff ff       	call   c000af52 <KeRegisterSymlink(char const*, unsigned long long)>
c000b599:	c7 04 24 c0 19 02 c0 	mov    DWORD PTR [esp],0xc00219c0
c000b5a0:	e8 c0 f3 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000b5a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5a8:	e8 3b 06 00 00       	call   c000bbe8 <File::close()>
c000b5ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5b5:	83 c4 10             	add    esp,0x10
c000b5b8:	31 c0                	xor    eax,eax
c000b5ba:	eb 19                	jmp    c000b5d5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	53                   	push   ebx
c000b5c0:	e8 23 06 00 00       	call   c000bbe8 <File::close()>
c000b5c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5cd:	83 c4 10             	add    esp,0x10
c000b5d0:	b8 01 00 00 00       	mov    eax,0x1
c000b5d5:	83 c4 2c             	add    esp,0x2c
c000b5d8:	5b                   	pop    ebx
c000b5d9:	5e                   	pop    esi
c000b5da:	5f                   	pop    edi
c000b5db:	5d                   	pop    ebp
c000b5dc:	c3                   	ret    
c000b5dd:	90                   	nop

c000b5de <File::read(unsigned long long, void*, int*)>:
c000b5de:	53                   	push   ebx
c000b5df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ee:	83 f8 19             	cmp    eax,0x19
c000b5f1:	77 35                	ja     c000b628 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5f3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5fa:	85 c0                	test   eax,eax
c000b5fc:	74 2a                	je     c000b628 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5fe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b604:	85 c0                	test   eax,eax
c000b606:	74 20                	je     c000b628 <File::read(unsigned long long, void*, int*)+0x4a>
c000b608:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60c:	74 21                	je     c000b62f <File::read(unsigned long long, void*, int*)+0x51>
c000b60e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b610:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b614:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	5b                   	pop    ebx
c000b623:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b626:	ff e0                	jmp    eax
c000b628:	b8 0b 00 00 00       	mov    eax,0xb
c000b62d:	eb 05                	jmp    c000b634 <File::read(unsigned long long, void*, int*)+0x56>
c000b62f:	b8 05 00 00 00       	mov    eax,0x5
c000b634:	5b                   	pop    ebx
c000b635:	c3                   	ret    

c000b636 <File::write(unsigned long long, void*, int*)>:
c000b636:	53                   	push   ebx
c000b637:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b63b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b63f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b646:	83 f8 19             	cmp    eax,0x19
c000b649:	77 35                	ja     c000b680 <File::write(unsigned long long, void*, int*)+0x4a>
c000b64b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b652:	85 c0                	test   eax,eax
c000b654:	74 2a                	je     c000b680 <File::write(unsigned long long, void*, int*)+0x4a>
c000b656:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b65c:	85 c0                	test   eax,eax
c000b65e:	74 20                	je     c000b680 <File::write(unsigned long long, void*, int*)+0x4a>
c000b660:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b664:	74 21                	je     c000b687 <File::write(unsigned long long, void*, int*)+0x51>
c000b666:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b668:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b66c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67a:	5b                   	pop    ebx
c000b67b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b67e:	ff e0                	jmp    eax
c000b680:	b8 0b 00 00 00       	mov    eax,0xb
c000b685:	eb 05                	jmp    c000b68c <File::write(unsigned long long, void*, int*)+0x56>
c000b687:	b8 05 00 00 00       	mov    eax,0x5
c000b68c:	5b                   	pop    ebx
c000b68d:	c3                   	ret    

c000b68e <Directory::read(unsigned long long, void*, int*)>:
c000b68e:	53                   	push   ebx
c000b68f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b693:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b697:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b69e:	83 f8 19             	cmp    eax,0x19
c000b6a1:	77 35                	ja     c000b6d8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6a3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6aa:	85 c0                	test   eax,eax
c000b6ac:	74 2a                	je     c000b6d8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6ae:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6b4:	85 c0                	test   eax,eax
c000b6b6:	74 20                	je     c000b6d8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6bc:	74 21                	je     c000b6df <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6be:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6c4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6d2:	5b                   	pop    ebx
c000b6d3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6d6:	ff e0                	jmp    eax
c000b6d8:	b8 0b 00 00 00       	mov    eax,0xb
c000b6dd:	eb 05                	jmp    c000b6e4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6df:	b8 05 00 00 00       	mov    eax,0x5
c000b6e4:	5b                   	pop    ebx
c000b6e5:	c3                   	ret    

c000b6e6 <Directory::write(unsigned long long, void*, int*)>:
c000b6e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ea:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f6:	83 fa 19             	cmp    edx,0x19
c000b6f9:	77 18                	ja     c000b713 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6fb:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b702:	85 d2                	test   edx,edx
c000b704:	74 0d                	je     c000b713 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b706:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b70d:	19 c0                	sbb    eax,eax
c000b70f:	83 e0 0a             	and    eax,0xa
c000b712:	40                   	inc    eax
c000b713:	c3                   	ret    

c000b714 <File::isAtty()>:
c000b714:	31 c0                	xor    eax,eax
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <Directory::isAtty()>:
c000b718:	31 c0                	xor    eax,eax
c000b71a:	c3                   	ret    
c000b71b:	90                   	nop

c000b71c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b71c:	b8 0a 00 00 00       	mov    eax,0xa
c000b721:	c3                   	ret    

c000b722 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b722:	b8 0a 00 00 00       	mov    eax,0xa
c000b727:	c3                   	ret    

c000b728 <Filesystem::allocateSwapfile(char const*, int)>:
c000b728:	31 c0                	xor    eax,eax
c000b72a:	31 d2                	xor    edx,edx
c000b72c:	c3                   	ret    
c000b72d:	90                   	nop

c000b72e <File::~File()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73a:	89 10                	mov    DWORD PTR [eax],edx
c000b73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b740:	83 ec 0c             	sub    esp,0xc
c000b743:	50                   	push   eax
c000b744:	e8 7b dc ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	90                   	nop
c000b74d:	83 c4 0c             	add    esp,0xc
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <File::~File()>:
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75c:	e8 cd ff ff ff       	call   c000b72e <File::~File()>
c000b761:	83 c4 10             	add    esp,0x10
c000b764:	83 ec 08             	sub    esp,0x8
c000b767:	68 14 01 00 00       	push   0x114
c000b76c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b770:	e8 c3 f0 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	83 c4 0c             	add    esp,0xc
c000b77b:	c3                   	ret    

c000b77c <Directory::~Directory()>:
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	89 10                	mov    DWORD PTR [eax],edx
c000b78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	50                   	push   eax
c000b792:	e8 2d dc ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	90                   	nop
c000b79b:	83 c4 0c             	add    esp,0xc
c000b79e:	c3                   	ret    
c000b79f:	90                   	nop

c000b7a0 <Directory::~Directory()>:
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	83 ec 0c             	sub    esp,0xc
c000b7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7aa:	e8 cd ff ff ff       	call   c000b77c <Directory::~Directory()>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	83 ec 08             	sub    esp,0x8
c000b7b5:	68 14 01 00 00       	push   0x114
c000b7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7be:	e8 75 f0 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000b7c3:	83 c4 10             	add    esp,0x10
c000b7c6:	83 c4 0c             	add    esp,0xc
c000b7c9:	c3                   	ret    

c000b7ca <Filesystem::Filesystem()>:
c000b7ca:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c000b7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d3:	89 10                	mov    DWORD PTR [eax],edx
c000b7d5:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e6:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7eb:	90                   	nop
c000b7ec:	c3                   	ret    
c000b7ed:	90                   	nop

c000b7ee <Filesystem::~Filesystem()>:
c000b7ee:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c000b7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f7:	89 10                	mov    DWORD PTR [eax],edx
c000b7f9:	90                   	nop
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Filesystem::~Filesystem()>:
c000b7fc:	83 ec 0c             	sub    esp,0xc
c000b7ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b803:	e8 e6 ff ff ff       	call   c000b7ee <Filesystem::~Filesystem()>
c000b808:	83 c4 04             	add    esp,0x4
c000b80b:	83 ec 08             	sub    esp,0x8
c000b80e:	6a 08                	push   0x8
c000b810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b814:	e8 1f f0 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000b819:	83 c4 10             	add    esp,0x10
c000b81c:	83 c4 0c             	add    esp,0xc
c000b81f:	c3                   	ret    

c000b820 <Fs::getcwd(Process*, char*, int)>:
c000b820:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b824:	31 c0                	xor    eax,eax
c000b826:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b829:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b82d:	7d 15                	jge    c000b844 <Fs::getcwd(Process*, char*, int)+0x24>
c000b82f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b833:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b83a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b83d:	84 c9                	test   cl,cl
c000b83f:	74 06                	je     c000b847 <Fs::getcwd(Process*, char*, int)+0x27>
c000b841:	40                   	inc    eax
c000b842:	eb e2                	jmp    c000b826 <Fs::getcwd(Process*, char*, int)+0x6>
c000b844:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b847:	31 c0                	xor    eax,eax
c000b849:	c3                   	ret    

c000b84a <Fs::initVFS()>:
c000b84a:	83 ec 18             	sub    esp,0x18
c000b84d:	6a 08                	push   0x8
c000b84f:	e8 82 c2 ff ff       	call   c0007ad6 <malloc>
c000b854:	89 04 24             	mov    DWORD PTR [esp],eax
c000b857:	e8 8c e4 00 00       	call   c0019ce8 <FAT::FAT()>
c000b85c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b863:	e8 6e c2 ff ff       	call   c0007ad6 <malloc>
c000b868:	89 04 24             	mov    DWORD PTR [esp],eax
c000b86b:	e8 a4 f3 00 00       	call   c001ac14 <ISO9660::ISO9660()>
c000b870:	83 c4 1c             	add    esp,0x1c
c000b873:	c3                   	ret    

c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b874:	55                   	push   ebp
c000b875:	57                   	push   edi
c000b876:	56                   	push   esi
c000b877:	53                   	push   ebx
c000b878:	81 ec 10 04 00 00    	sub    esp,0x410
c000b87e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b885:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b88c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b894:	68 00 04 00 00       	push   0x400
c000b899:	6a 00                	push   0x0
c000b89b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b89f:	57                   	push   edi
c000b8a0:	e8 4b 4c ff ff       	call   c00004f0 <memset>
c000b8a5:	83 c4 10             	add    esp,0x10
c000b8a8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8ac:	75 0b                	jne    c000b8b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8ae:	50                   	push   eax
c000b8af:	50                   	push   eax
c000b8b0:	55                   	push   ebp
c000b8b1:	57                   	push   edi
c000b8b2:	e8 89 4d ff ff       	call   c0000640 <strcpy>
c000b8b7:	eb 51                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8b9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8bd:	83 f8 5c             	cmp    eax,0x5c
c000b8c0:	74 05                	je     c000b8c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8c2:	83 f8 2f             	cmp    eax,0x2f
c000b8c5:	75 1e                	jne    c000b8e5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8c7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8ce:	8a 00                	mov    al,BYTE PTR [eax]
c000b8d0:	3c 60                	cmp    al,0x60
c000b8d2:	7e 03                	jle    c000b8d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8d4:	83 e8 20             	sub    eax,0x20
c000b8d7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8da:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8e1:	50                   	push   eax
c000b8e2:	50                   	push   eax
c000b8e3:	eb 1e                	jmp    c000b903 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8e5:	50                   	push   eax
c000b8e6:	50                   	push   eax
c000b8e7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8ee:	57                   	push   edi
c000b8ef:	e8 4c 4d ff ff       	call   c0000640 <strcpy>
c000b8f4:	58                   	pop    eax
c000b8f5:	5a                   	pop    edx
c000b8f6:	68 57 2a 02 c0       	push   0xc0022a57
c000b8fb:	57                   	push   edi
c000b8fc:	e8 3f 4f ff ff       	call   c0000840 <strcat>
c000b901:	59                   	pop    ecx
c000b902:	58                   	pop    eax
c000b903:	55                   	push   ebp
c000b904:	57                   	push   edi
c000b905:	e8 36 4f ff ff       	call   c0000840 <strcat>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b910:	3c 60                	cmp    al,0x60
c000b912:	7e 03                	jle    c000b917 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b914:	83 e8 20             	sub    eax,0x20
c000b917:	88 04 24             	mov    BYTE PTR [esp],al
c000b91a:	88 06                	mov    BYTE PTR [esi],al
c000b91c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b923:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b929:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b92d:	bf 03 00 00 00       	mov    edi,0x3
c000b932:	b8 03 00 00 00       	mov    eax,0x3
c000b937:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b93b:	89 e9                	mov    ecx,ebp
c000b93d:	85 ed                	test   ebp,ebp
c000b93f:	0f 84 97 00 00 00    	je     c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b945:	8d 57 01             	lea    edx,[edi+0x1]
c000b948:	83 fd 5c             	cmp    ebp,0x5c
c000b94b:	74 05                	je     c000b952 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b94d:	83 fd 2f             	cmp    ebp,0x2f
c000b950:	75 12                	jne    c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b952:	89 c5                	mov    ebp,eax
c000b954:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b959:	74 09                	je     c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b95b:	40                   	inc    eax
c000b95c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b960:	89 d7                	mov    edi,edx
c000b962:	eb d3                	jmp    c000b937 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b964:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b969:	0f be e9             	movsx  ebp,cl
c000b96c:	75 5e                	jne    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b96e:	83 fd 2e             	cmp    ebp,0x2e
c000b971:	75 59                	jne    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b973:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b977:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b97c:	74 18                	je     c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b97e:	83 fd 2e             	cmp    ebp,0x2e
c000b981:	74 53                	je     c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b983:	89 fa                	mov    edx,edi
c000b985:	42                   	inc    edx
c000b986:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b98a:	83 f9 2f             	cmp    ecx,0x2f
c000b98d:	74 f6                	je     c000b985 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b98f:	83 f9 5c             	cmp    ecx,0x5c
c000b992:	74 f1                	je     c000b985 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b994:	eb ca                	jmp    c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b996:	83 fd 2e             	cmp    ebp,0x2e
c000b999:	74 3b                	je     c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b99b:	83 f8 03             	cmp    eax,0x3
c000b99e:	74 c0                	je     c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9a0:	42                   	inc    edx
c000b9a1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9a5:	83 f9 5c             	cmp    ecx,0x5c
c000b9a8:	74 f6                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9aa:	83 f9 2f             	cmp    ecx,0x2f
c000b9ad:	74 f1                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9af:	48                   	dec    eax
c000b9b0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9b4:	75 06                	jne    c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9b6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9ba:	eb f3                	jmp    c000b9af <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9bc:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9c0:	74 07                	je     c000b9c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9c2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9c6:	48                   	dec    eax
c000b9c7:	eb f3                	jmp    c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9c9:	40                   	inc    eax
c000b9ca:	eb 94                	jmp    c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9cc:	83 fd 5c             	cmp    ebp,0x5c
c000b9cf:	74 8f                	je     c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9d1:	83 fd 2f             	cmp    ebp,0x2f
c000b9d4:	74 8a                	je     c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9d6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9d9:	40                   	inc    eax
c000b9da:	eb 84                	jmp    c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9dc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	56                   	push   esi
c000b9e4:	e8 87 4b ff ff       	call   c0000570 <strlen>
c000b9e9:	83 c4 10             	add    esp,0x10
c000b9ec:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b9f1:	74 17                	je     c000ba0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	56                   	push   esi
c000b9f7:	e8 74 4b ff ff       	call   c0000570 <strlen>
c000b9fc:	83 c4 10             	add    esp,0x10
c000b9ff:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba04:	74 04                	je     c000ba0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba06:	31 ff                	xor    edi,edi
c000ba08:	eb 5c                	jmp    c000ba66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	56                   	push   esi
c000ba0e:	e8 5d 4b ff ff       	call   c0000570 <strlen>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba1b:	74 e9                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba1d:	83 ec 0c             	sub    esp,0xc
c000ba20:	56                   	push   esi
c000ba21:	e8 4a 4b ff ff       	call   c0000570 <strlen>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba2e:	eb b0                	jmp    c000b9e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba30:	52                   	push   edx
c000ba31:	52                   	push   edx
c000ba32:	56                   	push   esi
c000ba33:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba37:	55                   	push   ebp
c000ba38:	e8 03 4c ff ff       	call   c0000640 <strcpy>
c000ba3d:	59                   	pop    ecx
c000ba3e:	58                   	pop    eax
c000ba3f:	56                   	push   esi
c000ba40:	55                   	push   ebp
c000ba41:	e8 96 f8 ff ff       	call   c000b2dc <KeDereferenceSymlink(char const*, char*)>
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	48                   	dec    eax
c000ba4a:	75 37                	jne    c000ba83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba4c:	50                   	push   eax
c000ba4d:	56                   	push   esi
c000ba4e:	55                   	push   ebp
c000ba4f:	68 d6 19 02 c0       	push   0xc00219d6
c000ba54:	e8 0c ef ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	8d 47 01             	lea    eax,[edi+0x1]
c000ba5f:	83 ff 14             	cmp    edi,0x14
c000ba62:	74 08                	je     c000ba6c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba64:	89 c7                	mov    edi,eax
c000ba66:	85 db                	test   ebx,ebx
c000ba68:	75 c6                	jne    c000ba30 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba6a:	eb 17                	jmp    c000ba83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba6c:	83 ec 0c             	sub    esp,0xc
c000ba6f:	bf 15 00 00 00       	mov    edi,0x15
c000ba74:	68 f1 19 02 c0       	push   0xc00219f1
c000ba79:	e8 19 5c 00 00       	call   c0011697 <KePanic(char const*)>
c000ba7e:	83 c4 10             	add    esp,0x10
c000ba81:	eb e3                	jmp    c000ba66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba83:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	5f                   	pop    edi
c000ba8c:	5d                   	pop    ebp
c000ba8d:	c3                   	ret    

c000ba8e <File::File(char const*, Process*, bool)>:
c000ba8e:	83 ec 1c             	sub    esp,0x1c
c000ba91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba95:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9d:	83 ec 08             	sub    esp,0x8
c000baa0:	6a 00                	push   0x0
c000baa2:	50                   	push   eax
c000baa3:	e8 36 d7 ff ff       	call   c00091de <UnixFile::UnixFile(int)>
c000baa8:	83 c4 10             	add    esp,0x10
c000baab:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000bab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab4:	89 10                	mov    DWORD PTR [eax],edx
c000bab6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000babb:	85 c0                	test   eax,eax
c000babd:	74 0f                	je     c000bace <File::File(char const*, Process*, bool)+0x40>
c000babf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bac4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bac8:	74 04                	je     c000bace <File::File(char const*, Process*, bool)+0x40>
c000baca:	b0 01                	mov    al,0x1
c000bacc:	eb 02                	jmp    c000bad0 <File::File(char const*, Process*, bool)+0x42>
c000bace:	b0 00                	mov    al,0x0
c000bad0:	0f b6 c0             	movzx  eax,al
c000bad3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bad7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000badd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bae1:	83 c2 0d             	add    edx,0xd
c000bae4:	50                   	push   eax
c000bae5:	51                   	push   ecx
c000bae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baea:	52                   	push   edx
c000baeb:	e8 84 fd ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bafa:	83 e8 41             	sub    eax,0x41
c000bafd:	88 c2                	mov    dl,al
c000baff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb03:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb15:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb1b:	0f b6 c0             	movzx  eax,al
c000bb1e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb25:	85 c0                	test   eax,eax
c000bb27:	74 3e                	je     c000bb67 <File::File(char const*, Process*, bool)+0xd9>
c000bb29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb33:	0f b6 c0             	movzx  eax,al
c000bb36:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb3d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb43:	85 c0                	test   eax,eax
c000bb45:	75 20                	jne    c000bb67 <File::File(char const*, Process*, bool)+0xd9>
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb51:	0f b6 c0             	movzx  eax,al
c000bb54:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	50                   	push   eax
c000bb5f:	e8 a2 21 00 00       	call   c000dd06 <LogicalDisk::mount()>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	90                   	nop
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	c3                   	ret    

c000bb6c <File::File(char const*, Process*)>:
c000bb6c:	83 ec 0c             	sub    esp,0xc
c000bb6f:	6a 01                	push   0x1
c000bb71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7d:	e8 0c ff ff ff       	call   c000ba8e <File::File(char const*, Process*, bool)>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	90                   	nop
c000bb86:	83 c4 0c             	add    esp,0xc
c000bb89:	c3                   	ret    

c000bb8a <File::open(FileOpenMode)>:
c000bb8a:	53                   	push   ebx
c000bb8b:	b8 0b 00 00 00       	mov    eax,0xb
c000bb90:	83 ec 08             	sub    esp,0x8
c000bb93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb97:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb9e:	83 fa 19             	cmp    edx,0x19
c000bba1:	77 40                	ja     c000bbe3 <File::open(FileOpenMode)+0x59>
c000bba3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbaa:	85 d2                	test   edx,edx
c000bbac:	74 35                	je     c000bbe3 <File::open(FileOpenMode)+0x59>
c000bbae:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbb4:	85 d2                	test   edx,edx
c000bbb6:	74 2b                	je     c000bbe3 <File::open(FileOpenMode)+0x59>
c000bbb8:	b8 06 00 00 00       	mov    eax,0x6
c000bbbd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbc1:	75 20                	jne    c000bbe3 <File::open(FileOpenMode)+0x59>
c000bbc3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbc5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcf:	51                   	push   ecx
c000bbd0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbd3:	51                   	push   ecx
c000bbd4:	52                   	push   edx
c000bbd5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	85 c0                	test   eax,eax
c000bbdd:	75 04                	jne    c000bbe3 <File::open(FileOpenMode)+0x59>
c000bbdf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbe3:	83 c4 08             	add    esp,0x8
c000bbe6:	5b                   	pop    ebx
c000bbe7:	c3                   	ret    

c000bbe8 <File::close()>:
c000bbe8:	53                   	push   ebx
c000bbe9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbee:	83 ec 08             	sub    esp,0x8
c000bbf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbf5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbfc:	83 f9 19             	cmp    ecx,0x19
c000bbff:	77 41                	ja     c000bc42 <File::close()+0x5a>
c000bc01:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc08:	85 db                	test   ebx,ebx
c000bc0a:	74 36                	je     c000bc42 <File::close()+0x5a>
c000bc0c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc13:	74 2d                	je     c000bc42 <File::close()+0x5a>
c000bc15:	b8 05 00 00 00       	mov    eax,0x5
c000bc1a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc1e:	74 22                	je     c000bc42 <File::close()+0x5a>
c000bc20:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc24:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc2b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc31:	53                   	push   ebx
c000bc32:	53                   	push   ebx
c000bc33:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc35:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc3b:	50                   	push   eax
c000bc3c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc3f:	83 c4 10             	add    esp,0x10
c000bc42:	83 c4 08             	add    esp,0x8
c000bc45:	5b                   	pop    ebx
c000bc46:	c3                   	ret    
c000bc47:	90                   	nop

c000bc48 <File::seek(unsigned long long)>:
c000bc48:	56                   	push   esi
c000bc49:	53                   	push   ebx
c000bc4a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc4f:	51                   	push   ecx
c000bc50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc63:	83 fa 19             	cmp    edx,0x19
c000bc66:	77 31                	ja     c000bc99 <File::seek(unsigned long long)+0x51>
c000bc68:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc6f:	85 d2                	test   edx,edx
c000bc71:	74 26                	je     c000bc99 <File::seek(unsigned long long)+0x51>
c000bc73:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc79:	85 d2                	test   edx,edx
c000bc7b:	74 1c                	je     c000bc99 <File::seek(unsigned long long)+0x51>
c000bc7d:	b8 05 00 00 00       	mov    eax,0x5
c000bc82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc86:	74 11                	je     c000bc99 <File::seek(unsigned long long)+0x51>
c000bc88:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc8a:	53                   	push   ebx
c000bc8b:	51                   	push   ecx
c000bc8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc92:	52                   	push   edx
c000bc93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc96:	83 c4 10             	add    esp,0x10
c000bc99:	5a                   	pop    edx
c000bc9a:	5b                   	pop    ebx
c000bc9b:	5e                   	pop    esi
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <File::truncate(unsigned long long)>:
c000bc9e:	56                   	push   esi
c000bc9f:	53                   	push   ebx
c000bca0:	b8 0b 00 00 00       	mov    eax,0xb
c000bca5:	51                   	push   ecx
c000bca6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcae:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcb9:	83 fa 19             	cmp    edx,0x19
c000bcbc:	77 31                	ja     c000bcef <File::truncate(unsigned long long)+0x51>
c000bcbe:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcc5:	85 d2                	test   edx,edx
c000bcc7:	74 26                	je     c000bcef <File::truncate(unsigned long long)+0x51>
c000bcc9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bccf:	85 d2                	test   edx,edx
c000bcd1:	74 1c                	je     c000bcef <File::truncate(unsigned long long)+0x51>
c000bcd3:	b8 05 00 00 00       	mov    eax,0x5
c000bcd8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcdc:	74 11                	je     c000bcef <File::truncate(unsigned long long)+0x51>
c000bcde:	8b 02                	mov    eax,DWORD PTR [edx]
c000bce0:	53                   	push   ebx
c000bce1:	51                   	push   ecx
c000bce2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bce8:	52                   	push   edx
c000bce9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcec:	83 c4 10             	add    esp,0x10
c000bcef:	5a                   	pop    edx
c000bcf0:	5b                   	pop    ebx
c000bcf1:	5e                   	pop    esi
c000bcf2:	c3                   	ret    
c000bcf3:	90                   	nop

c000bcf4 <File::tell(unsigned long long*)>:
c000bcf4:	83 ec 0c             	sub    esp,0xc
c000bcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000bcfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd00:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd07:	83 fa 19             	cmp    edx,0x19
c000bd0a:	77 34                	ja     c000bd40 <File::tell(unsigned long long*)+0x4c>
c000bd0c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd13:	85 d2                	test   edx,edx
c000bd15:	74 29                	je     c000bd40 <File::tell(unsigned long long*)+0x4c>
c000bd17:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd1d:	85 d2                	test   edx,edx
c000bd1f:	74 1f                	je     c000bd40 <File::tell(unsigned long long*)+0x4c>
c000bd21:	b8 05 00 00 00       	mov    eax,0x5
c000bd26:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd2a:	74 14                	je     c000bd40 <File::tell(unsigned long long*)+0x4c>
c000bd2c:	50                   	push   eax
c000bd2d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd33:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd39:	52                   	push   edx
c000bd3a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd3d:	83 c4 10             	add    esp,0x10
c000bd40:	83 c4 0c             	add    esp,0xc
c000bd43:	c3                   	ret    

c000bd44 <File::rewind()>:
c000bd44:	83 ec 10             	sub    esp,0x10
c000bd47:	6a 00                	push   0x0
c000bd49:	6a 00                	push   0x0
c000bd4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd4f:	e8 f4 fe ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c000bd54:	83 c4 1c             	add    esp,0x1c
c000bd57:	c3                   	ret    

c000bd58 <File::unlink()>:
c000bd58:	83 ec 0c             	sub    esp,0xc
c000bd5b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd6b:	83 f9 19             	cmp    ecx,0x19
c000bd6e:	77 2f                	ja     c000bd9f <File::unlink()+0x47>
c000bd70:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd77:	85 c9                	test   ecx,ecx
c000bd79:	74 24                	je     c000bd9f <File::unlink()+0x47>
c000bd7b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd81:	85 c9                	test   ecx,ecx
c000bd83:	74 1a                	je     c000bd9f <File::unlink()+0x47>
c000bd85:	b8 06 00 00 00       	mov    eax,0x6
c000bd8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd8e:	75 0f                	jne    c000bd9f <File::unlink()+0x47>
c000bd90:	83 c2 0d             	add    edx,0xd
c000bd93:	50                   	push   eax
c000bd94:	50                   	push   eax
c000bd95:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd97:	52                   	push   edx
c000bd98:	51                   	push   ecx
c000bd99:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd9c:	83 c4 10             	add    esp,0x10
c000bd9f:	83 c4 0c             	add    esp,0xc
c000bda2:	c3                   	ret    
c000bda3:	90                   	nop

c000bda4 <File::rename(char const*)>:
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	b8 0b 00 00 00       	mov    eax,0xb
c000bdac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdb0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdb7:	83 f9 19             	cmp    ecx,0x19
c000bdba:	77 32                	ja     c000bdee <File::rename(char const*)+0x4a>
c000bdbc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdc3:	85 c9                	test   ecx,ecx
c000bdc5:	74 27                	je     c000bdee <File::rename(char const*)+0x4a>
c000bdc7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdcd:	85 c9                	test   ecx,ecx
c000bdcf:	74 1d                	je     c000bdee <File::rename(char const*)+0x4a>
c000bdd1:	b8 06 00 00 00       	mov    eax,0x6
c000bdd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdda:	75 12                	jne    c000bdee <File::rename(char const*)+0x4a>
c000bddc:	83 c2 0d             	add    edx,0xd
c000bddf:	50                   	push   eax
c000bde0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bde2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bde6:	52                   	push   edx
c000bde7:	51                   	push   ecx
c000bde8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdeb:	83 c4 10             	add    esp,0x10
c000bdee:	83 c4 0c             	add    esp,0xc
c000bdf1:	c3                   	ret    

c000bdf2 <File::chfatattr(unsigned char, unsigned char)>:
c000bdf2:	57                   	push   edi
c000bdf3:	b8 0b 00 00 00       	mov    eax,0xb
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdfe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be0d:	83 f9 19             	cmp    ecx,0x19
c000be10:	77 37                	ja     c000be49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be12:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be19:	85 c9                	test   ecx,ecx
c000be1b:	74 2c                	je     c000be49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be1d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be23:	85 c9                	test   ecx,ecx
c000be25:	74 22                	je     c000be49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be27:	b8 06 00 00 00       	mov    eax,0x6
c000be2c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be30:	75 17                	jne    c000be49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be32:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be34:	89 f0                	mov    eax,esi
c000be36:	83 c2 0d             	add    edx,0xd
c000be39:	0f b6 f0             	movzx  esi,al
c000be3c:	0f b6 db             	movzx  ebx,bl
c000be3f:	56                   	push   esi
c000be40:	53                   	push   ebx
c000be41:	52                   	push   edx
c000be42:	51                   	push   ecx
c000be43:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	5b                   	pop    ebx
c000be4a:	5e                   	pop    esi
c000be4b:	5f                   	pop    edi
c000be4c:	c3                   	ret    
c000be4d:	90                   	nop

c000be4e <File::exists()>:
c000be4e:	83 ec 0c             	sub    esp,0xc
c000be51:	31 c0                	xor    eax,eax
c000be53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be57:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be5e:	83 f9 19             	cmp    ecx,0x19
c000be61:	77 24                	ja     c000be87 <File::exists()+0x39>
c000be63:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be6a:	85 c9                	test   ecx,ecx
c000be6c:	74 19                	je     c000be87 <File::exists()+0x39>
c000be6e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be74:	85 c9                	test   ecx,ecx
c000be76:	74 0f                	je     c000be87 <File::exists()+0x39>
c000be78:	83 c2 0d             	add    edx,0xd
c000be7b:	50                   	push   eax
c000be7c:	50                   	push   eax
c000be7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be7f:	52                   	push   edx
c000be80:	51                   	push   ecx
c000be81:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	83 c4 0c             	add    esp,0xc
c000be8a:	c3                   	ret    
c000be8b:	90                   	nop

c000be8c <File::stat(unsigned long long*, bool*)>:
c000be8c:	56                   	push   esi
c000be8d:	53                   	push   ebx
c000be8e:	50                   	push   eax
c000be8f:	b8 0b 00 00 00       	mov    eax,0xb
c000be94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bea3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bea7:	83 f9 19             	cmp    ecx,0x19
c000beaa:	77 3d                	ja     c000bee9 <File::stat(unsigned long long*, bool*)+0x5d>
c000beac:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000beb3:	85 c9                	test   ecx,ecx
c000beb5:	74 32                	je     c000bee9 <File::stat(unsigned long long*, bool*)+0x5d>
c000beb7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bebd:	85 c9                	test   ecx,ecx
c000bebf:	74 28                	je     c000bee9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bec1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bec3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bec7:	74 13                	je     c000bedc <File::stat(unsigned long long*, bool*)+0x50>
c000bec9:	83 ec 04             	sub    esp,0x4
c000becc:	56                   	push   esi
c000becd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bed3:	51                   	push   ecx
c000bed4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bed7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beda:	eb 0a                	jmp    c000bee6 <File::stat(unsigned long long*, bool*)+0x5a>
c000bedc:	53                   	push   ebx
c000bedd:	83 c2 0d             	add    edx,0xd
c000bee0:	56                   	push   esi
c000bee1:	52                   	push   edx
c000bee2:	51                   	push   ecx
c000bee3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	5a                   	pop    edx
c000beea:	5b                   	pop    ebx
c000beeb:	5e                   	pop    esi
c000beec:	c3                   	ret    

c000beed <Fs::setcwd(Process*, char*)>:
c000beed:	55                   	push   ebp
c000beee:	57                   	push   edi
c000beef:	56                   	push   esi
c000bef0:	53                   	push   ebx
c000bef1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bef7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000befe:	6a 00                	push   0x0
c000bf00:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf06:	57                   	push   edi
c000bf07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf0e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf12:	56                   	push   esi
c000bf13:	e8 5c f9 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf18:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf1b:	e8 50 46 ff ff       	call   c0000570 <strlen>
c000bf20:	83 c4 10             	add    esp,0x10
c000bf23:	83 f8 02             	cmp    eax,0x2
c000bf26:	77 15                	ja     c000bf3d <Fs::setcwd(Process*, char*)+0x50>
c000bf28:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf2d:	83 eb 41             	sub    ebx,0x41
c000bf30:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf37:	85 c0                	test   eax,eax
c000bf39:	75 1c                	jne    c000bf57 <Fs::setcwd(Process*, char*)+0x6a>
c000bf3b:	eb 2f                	jmp    c000bf6c <Fs::setcwd(Process*, char*)+0x7f>
c000bf3d:	83 ec 0c             	sub    esp,0xc
c000bf40:	56                   	push   esi
c000bf41:	e8 2a 46 ff ff       	call   c0000570 <strlen>
c000bf46:	83 c4 10             	add    esp,0x10
c000bf49:	83 f8 03             	cmp    eax,0x3
c000bf4c:	75 57                	jne    c000bfa5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf4e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf53:	75 50                	jne    c000bfa5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf55:	eb d1                	jmp    c000bf28 <Fs::setcwd(Process*, char*)+0x3b>
c000bf57:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf5e:	75 0c                	jne    c000bf6c <Fs::setcwd(Process*, char*)+0x7f>
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	50                   	push   eax
c000bf64:	e8 9d 1d 00 00       	call   c000dd06 <LogicalDisk::mount()>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	b8 03 00 00 00       	mov    eax,0x3
c000bf71:	83 fb 19             	cmp    ebx,0x19
c000bf74:	0f 87 c6 00 00 00    	ja     c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000bf7a:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf81:	b8 05 00 00 00       	mov    eax,0x5
c000bf86:	85 d2                	test   edx,edx
c000bf88:	0f 84 b2 00 00 00    	je     c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000bf8e:	b8 06 00 00 00       	mov    eax,0x6
c000bf93:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf9a:	0f 85 92 00 00 00    	jne    c000c032 <Fs::setcwd(Process*, char*)+0x145>
c000bfa0:	e9 9b 00 00 00       	jmp    c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000bfa5:	83 ec 0c             	sub    esp,0xc
c000bfa8:	68 14 01 00 00       	push   0x114
c000bfad:	e8 24 bb ff ff       	call   c0007ad6 <malloc>
c000bfb2:	83 c4 0c             	add    esp,0xc
c000bfb5:	89 c3                	mov    ebx,eax
c000bfb7:	55                   	push   ebp
c000bfb8:	56                   	push   esi
c000bfb9:	50                   	push   eax
c000bfba:	e8 ad fb ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c000bfbf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfc4:	83 c4 0c             	add    esp,0xc
c000bfc7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfcb:	50                   	push   eax
c000bfcc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfd0:	50                   	push   eax
c000bfd1:	53                   	push   ebx
c000bfd2:	e8 b5 fe ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	83 f8 02             	cmp    eax,0x2
c000bfdd:	74 27                	je     c000c006 <Fs::setcwd(Process*, char*)+0x119>
c000bfdf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfe4:	75 1c                	jne    c000c002 <Fs::setcwd(Process*, char*)+0x115>
c000bfe6:	b8 02 00 00 00       	mov    eax,0x2
c000bfeb:	85 db                	test   ebx,ebx
c000bfed:	74 51                	je     c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff4:	53                   	push   ebx
c000bff5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bff8:	83 c4 10             	add    esp,0x10
c000bffb:	b8 02 00 00 00       	mov    eax,0x2
c000c000:	eb 3e                	jmp    c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000c002:	85 c0                	test   eax,eax
c000c004:	74 1c                	je     c000c022 <Fs::setcwd(Process*, char*)+0x135>
c000c006:	b8 01 00 00 00       	mov    eax,0x1
c000c00b:	85 db                	test   ebx,ebx
c000c00d:	74 31                	je     c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c014:	53                   	push   ebx
c000c015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c018:	83 c4 10             	add    esp,0x10
c000c01b:	b8 01 00 00 00       	mov    eax,0x1
c000c020:	eb 1e                	jmp    c000c040 <Fs::setcwd(Process*, char*)+0x153>
c000c022:	85 db                	test   ebx,ebx
c000c024:	74 0c                	je     c000c032 <Fs::setcwd(Process*, char*)+0x145>
c000c026:	83 ec 0c             	sub    esp,0xc
c000c029:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c02b:	53                   	push   ebx
c000c02c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	50                   	push   eax
c000c033:	50                   	push   eax
c000c034:	56                   	push   esi
c000c035:	57                   	push   edi
c000c036:	e8 05 46 ff ff       	call   c0000640 <strcpy>
c000c03b:	83 c4 10             	add    esp,0x10
c000c03e:	31 c0                	xor    eax,eax
c000c040:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c046:	5b                   	pop    ebx
c000c047:	5e                   	pop    esi
c000c048:	5f                   	pop    edi
c000c049:	5d                   	pop    ebp
c000c04a:	c3                   	ret    
c000c04b:	90                   	nop

c000c04c <Directory::Directory(char const*, Process*)>:
c000c04c:	83 ec 0c             	sub    esp,0xc
c000c04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c053:	83 ec 08             	sub    esp,0x8
c000c056:	6a 00                	push   0x0
c000c058:	50                   	push   eax
c000c059:	e8 80 d1 ff ff       	call   c00091de <UnixFile::UnixFile(int)>
c000c05e:	83 c4 10             	add    esp,0x10
c000c061:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000c066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06a:	89 10                	mov    DWORD PTR [eax],edx
c000c06c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c071:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c075:	0f 95 c0             	setne  al
c000c078:	0f b6 c0             	movzx  eax,al
c000c07b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c07f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c085:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c089:	83 c2 0d             	add    edx,0xd
c000c08c:	50                   	push   eax
c000c08d:	51                   	push   ecx
c000c08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c092:	52                   	push   edx
c000c093:	e8 dc f7 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c098:	83 c4 10             	add    esp,0x10
c000c09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0a2:	83 e8 41             	sub    eax,0x41
c000c0a5:	88 c2                	mov    dl,al
c000c0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ab:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0c3:	0f b6 c0             	movzx  eax,al
c000c0c6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0cd:	85 c0                	test   eax,eax
c000c0cf:	74 3e                	je     c000c10f <Directory::Directory(char const*, Process*)+0xc3>
c000c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0db:	0f b6 c0             	movzx  eax,al
c000c0de:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0eb:	85 c0                	test   eax,eax
c000c0ed:	75 20                	jne    c000c10f <Directory::Directory(char const*, Process*)+0xc3>
c000c0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0f9:	0f b6 c0             	movzx  eax,al
c000c0fc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	50                   	push   eax
c000c107:	e8 fa 1b 00 00       	call   c000dd06 <LogicalDisk::mount()>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	90                   	nop
c000c110:	83 c4 0c             	add    esp,0xc
c000c113:	c3                   	ret    

c000c114 <Directory::open()>:
c000c114:	53                   	push   ebx
c000c115:	b8 0b 00 00 00       	mov    eax,0xb
c000c11a:	83 ec 08             	sub    esp,0x8
c000c11d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c121:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c128:	83 fa 19             	cmp    edx,0x19
c000c12b:	77 3d                	ja     c000c16a <Directory::open()+0x56>
c000c12d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c134:	85 d2                	test   edx,edx
c000c136:	74 32                	je     c000c16a <Directory::open()+0x56>
c000c138:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c13e:	85 d2                	test   edx,edx
c000c140:	74 28                	je     c000c16a <Directory::open()+0x56>
c000c142:	b8 06 00 00 00       	mov    eax,0x6
c000c147:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c14b:	75 1d                	jne    c000c16a <Directory::open()+0x56>
c000c14d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c153:	50                   	push   eax
c000c154:	8b 02                	mov    eax,DWORD PTR [edx]
c000c156:	51                   	push   ecx
c000c157:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c15a:	51                   	push   ecx
c000c15b:	52                   	push   edx
c000c15c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	75 04                	jne    c000c16a <Directory::open()+0x56>
c000c166:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c16a:	83 c4 08             	add    esp,0x8
c000c16d:	5b                   	pop    ebx
c000c16e:	c3                   	ret    
c000c16f:	90                   	nop

c000c170 <Directory::close()>:
c000c170:	53                   	push   ebx
c000c171:	b8 0b 00 00 00       	mov    eax,0xb
c000c176:	83 ec 08             	sub    esp,0x8
c000c179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c17d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c184:	83 f9 19             	cmp    ecx,0x19
c000c187:	77 41                	ja     c000c1ca <Directory::close()+0x5a>
c000c189:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c190:	85 db                	test   ebx,ebx
c000c192:	74 36                	je     c000c1ca <Directory::close()+0x5a>
c000c194:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c19b:	74 2d                	je     c000c1ca <Directory::close()+0x5a>
c000c19d:	b8 05 00 00 00       	mov    eax,0x5
c000c1a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1a6:	74 22                	je     c000c1ca <Directory::close()+0x5a>
c000c1a8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1ac:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1b3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1b9:	53                   	push   ebx
c000c1ba:	53                   	push   ebx
c000c1bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1bd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1c3:	50                   	push   eax
c000c1c4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	83 c4 08             	add    esp,0x8
c000c1cd:	5b                   	pop    ebx
c000c1ce:	c3                   	ret    
c000c1cf:	90                   	nop

c000c1d0 <Directory::unlink()>:
c000c1d0:	83 ec 0c             	sub    esp,0xc
c000c1d3:	b8 0b 00 00 00       	mov    eax,0xb
c000c1d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1e3:	83 f9 19             	cmp    ecx,0x19
c000c1e6:	77 2f                	ja     c000c217 <Directory::unlink()+0x47>
c000c1e8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1ef:	85 c9                	test   ecx,ecx
c000c1f1:	74 24                	je     c000c217 <Directory::unlink()+0x47>
c000c1f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1f9:	85 c9                	test   ecx,ecx
c000c1fb:	74 1a                	je     c000c217 <Directory::unlink()+0x47>
c000c1fd:	b8 06 00 00 00       	mov    eax,0x6
c000c202:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c206:	75 0f                	jne    c000c217 <Directory::unlink()+0x47>
c000c208:	83 c2 0d             	add    edx,0xd
c000c20b:	50                   	push   eax
c000c20c:	50                   	push   eax
c000c20d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c20f:	52                   	push   edx
c000c210:	51                   	push   ecx
c000c211:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c214:	83 c4 10             	add    esp,0x10
c000c217:	83 c4 0c             	add    esp,0xc
c000c21a:	c3                   	ret    
c000c21b:	90                   	nop

c000c21c <Directory::rename(char const*)>:
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	b8 0b 00 00 00       	mov    eax,0xb
c000c224:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c228:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c22f:	83 f9 19             	cmp    ecx,0x19
c000c232:	77 32                	ja     c000c266 <Directory::rename(char const*)+0x4a>
c000c234:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c23b:	85 c9                	test   ecx,ecx
c000c23d:	74 27                	je     c000c266 <Directory::rename(char const*)+0x4a>
c000c23f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c245:	85 c9                	test   ecx,ecx
c000c247:	74 1d                	je     c000c266 <Directory::rename(char const*)+0x4a>
c000c249:	b8 06 00 00 00       	mov    eax,0x6
c000c24e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c252:	75 12                	jne    c000c266 <Directory::rename(char const*)+0x4a>
c000c254:	83 c2 0d             	add    edx,0xd
c000c257:	50                   	push   eax
c000c258:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c25a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c25e:	52                   	push   edx
c000c25f:	51                   	push   ecx
c000c260:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c263:	83 c4 10             	add    esp,0x10
c000c266:	83 c4 0c             	add    esp,0xc
c000c269:	c3                   	ret    

c000c26a <Directory::exists()>:
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	31 c0                	xor    eax,eax
c000c26f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c273:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c27a:	83 f9 19             	cmp    ecx,0x19
c000c27d:	77 24                	ja     c000c2a3 <Directory::exists()+0x39>
c000c27f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c286:	85 c9                	test   ecx,ecx
c000c288:	74 19                	je     c000c2a3 <Directory::exists()+0x39>
c000c28a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c290:	85 c9                	test   ecx,ecx
c000c292:	74 0f                	je     c000c2a3 <Directory::exists()+0x39>
c000c294:	83 c2 0d             	add    edx,0xd
c000c297:	50                   	push   eax
c000c298:	50                   	push   eax
c000c299:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c29b:	52                   	push   edx
c000c29c:	51                   	push   ecx
c000c29d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	83 c4 0c             	add    esp,0xc
c000c2a6:	c3                   	ret    
c000c2a7:	90                   	nop

c000c2a8 <Directory::read(dirent*)>:
c000c2a8:	83 ec 1c             	sub    esp,0x1c
c000c2ab:	b8 0b 00 00 00       	mov    eax,0xb
c000c2b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2bb:	83 f9 19             	cmp    ecx,0x19
c000c2be:	77 30                	ja     c000c2f0 <Directory::read(dirent*)+0x48>
c000c2c0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2c7:	85 c9                	test   ecx,ecx
c000c2c9:	74 25                	je     c000c2f0 <Directory::read(dirent*)+0x48>
c000c2cb:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2d2:	74 1c                	je     c000c2f0 <Directory::read(dirent*)+0x48>
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2dd:	51                   	push   ecx
c000c2de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2e2:	6a 00                	push   0x0
c000c2e4:	68 10 01 00 00       	push   0x110
c000c2e9:	52                   	push   edx
c000c2ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2ed:	83 c4 20             	add    esp,0x20
c000c2f0:	83 c4 1c             	add    esp,0x1c
c000c2f3:	c3                   	ret    

c000c2f4 <Directory::create()>:
c000c2f4:	83 ec 0c             	sub    esp,0xc
c000c2f7:	b8 0b 00 00 00       	mov    eax,0xb
c000c2fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c300:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c307:	83 f9 19             	cmp    ecx,0x19
c000c30a:	77 2f                	ja     c000c33b <Directory::create()+0x47>
c000c30c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c313:	85 c9                	test   ecx,ecx
c000c315:	74 24                	je     c000c33b <Directory::create()+0x47>
c000c317:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c31d:	85 c9                	test   ecx,ecx
c000c31f:	74 1a                	je     c000c33b <Directory::create()+0x47>
c000c321:	b8 06 00 00 00       	mov    eax,0x6
c000c326:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c32a:	75 0f                	jne    c000c33b <Directory::create()+0x47>
c000c32c:	83 c2 0d             	add    edx,0xd
c000c32f:	50                   	push   eax
c000c330:	50                   	push   eax
c000c331:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c333:	52                   	push   edx
c000c334:	51                   	push   ecx
c000c335:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c338:	83 c4 10             	add    esp,0x10
c000c33b:	83 c4 0c             	add    esp,0xc
c000c33e:	c3                   	ret    
c000c33f:	90                   	nop

c000c340 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c340:	b8 0a 00 00 00       	mov    eax,0xa
c000c345:	c3                   	ret    
c000c346:	66 90                	xchg   ax,ax

c000c348 <Bus::Bus(char const*)>:
c000c348:	83 ec 0c             	sub    esp,0xc
c000c34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34f:	83 ec 08             	sub    esp,0x8
c000c352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c356:	50                   	push   eax
c000c357:	e8 22 08 00 00       	call   c000cb7e <Device::Device(char const*)>
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	ba c4 1a 02 c0       	mov    edx,0xc0021ac4
c000c364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c368:	89 10                	mov    DWORD PTR [eax],edx
c000c36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c378:	90                   	nop
c000c379:	83 c4 0c             	add    esp,0xc
c000c37c:	c3                   	ret    
c000c37d:	90                   	nop
c000c37e:	66 90                	xchg   ax,ax

c000c380 <Bus::~Bus()>:
c000c380:	83 ec 0c             	sub    esp,0xc
c000c383:	ba c4 1a 02 c0       	mov    edx,0xc0021ac4
c000c388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38c:	89 10                	mov    DWORD PTR [eax],edx
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	83 ec 0c             	sub    esp,0xc
c000c395:	50                   	push   eax
c000c396:	e8 4d 05 00 00       	call   c000c8e8 <Device::~Device()>
c000c39b:	83 c4 10             	add    esp,0x10
c000c39e:	90                   	nop
c000c39f:	83 c4 0c             	add    esp,0xc
c000c3a2:	c3                   	ret    
c000c3a3:	90                   	nop

c000c3a4 <Bus::~Bus()>:
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	83 ec 0c             	sub    esp,0xc
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	e8 cd ff ff ff       	call   c000c380 <Bus::~Bus()>
c000c3b3:	83 c4 10             	add    esp,0x10
c000c3b6:	83 ec 08             	sub    esp,0x8
c000c3b9:	68 58 01 00 00       	push   0x158
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	e8 71 e4 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000c3c7:	83 c4 10             	add    esp,0x10
c000c3ca:	83 c4 0c             	add    esp,0xc
c000c3cd:	c3                   	ret    

c000c3ce <beepThread(void*)>:
c000c3ce:	83 ec 0c             	sub    esp,0xc
c000c3d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3da:	48                   	dec    eax
c000c3db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3e0:	75 01                	jne    c000c3e3 <beepThread(void*)+0x15>
c000c3e2:	fb                   	sti    
c000c3e3:	83 ec 0c             	sub    esp,0xc
c000c3e6:	6b c2 0a             	imul   eax,edx,0xa
c000c3e9:	50                   	push   eax
c000c3ea:	e8 bd a0 00 00       	call   c00164ac <milliTenthSleep(unsigned int)>
c000c3ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3f6:	e8 0c c0 00 00       	call   c0018407 <HalMakeBeep(int)>
c000c3fb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c403:	83 c4 1c             	add    esp,0x1c
c000c406:	e9 85 9f 00 00       	jmp    c0016390 <blockTask(TaskState)>

c000c40b <Krnl::beep(int, int, bool)>:
c000c40b:	56                   	push   esi
c000c40c:	53                   	push   ebx
c000c40d:	83 ec 10             	sub    esp,0x10
c000c410:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c414:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41c:	e8 e6 bf 00 00       	call   c0018407 <HalMakeBeep(int)>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	89 f0                	mov    eax,esi
c000c426:	84 c0                	test   al,al
c000c428:	74 1e                	je     c000c448 <Krnl::beep(int, int, bool)+0x3d>
c000c42a:	83 ec 0c             	sub    esp,0xc
c000c42d:	6b db 0a             	imul   ebx,ebx,0xa
c000c430:	53                   	push   ebx
c000c431:	e8 76 a0 00 00       	call   c00164ac <milliTenthSleep(unsigned int)>
c000c436:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c43e:	83 c4 14             	add    esp,0x14
c000c441:	5b                   	pop    ebx
c000c442:	5e                   	pop    esi
c000c443:	e9 bf bf 00 00       	jmp    c0018407 <HalMakeBeep(int)>
c000c448:	68 e6 00 00 00       	push   0xe6
c000c44d:	53                   	push   ebx
c000c44e:	68 ce c3 00 c0       	push   0xc000c3ce
c000c453:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c459:	e8 ce 9a 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c000c45e:	83 c4 14             	add    esp,0x14
c000c461:	5b                   	pop    ebx
c000c462:	5e                   	pop    esi
c000c463:	c3                   	ret    

c000c464 <User::loadClockSettings(int)>:
c000c464:	53                   	push   ebx
c000c465:	83 ec 14             	sub    esp,0x14
c000c468:	68 14 01 00 00       	push   0x114
c000c46d:	e8 64 b6 ff ff       	call   c0007ad6 <malloc>
c000c472:	83 c4 0c             	add    esp,0xc
c000c475:	89 c3                	mov    ebx,eax
c000c477:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c47d:	68 e8 1a 02 c0       	push   0xc0021ae8
c000c482:	50                   	push   eax
c000c483:	e8 e4 f6 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c000c488:	58                   	pop    eax
c000c489:	5a                   	pop    edx
c000c48a:	6a 01                	push   0x1
c000c48c:	53                   	push   ebx
c000c48d:	e8 f8 f6 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c000c492:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c495:	e8 4e f7 ff ff       	call   c000bbe8 <File::close()>
c000c49a:	83 c4 10             	add    esp,0x10
c000c49d:	85 db                	test   ebx,ebx
c000c49f:	74 0f                	je     c000c4b0 <User::loadClockSettings(int)+0x4c>
c000c4a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4aa:	83 c4 08             	add    esp,0x8
c000c4ad:	5b                   	pop    ebx
c000c4ae:	ff e0                	jmp    eax
c000c4b0:	83 c4 08             	add    esp,0x8
c000c4b3:	5b                   	pop    ebx
c000c4b4:	c3                   	ret    
c000c4b5:	90                   	nop

c000c4b6 <Clock::Clock(char const*)>:
c000c4b6:	83 ec 0c             	sub    esp,0xc
c000c4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4bd:	83 ec 08             	sub    esp,0x8
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	50                   	push   eax
c000c4c5:	e8 b4 06 00 00       	call   c000cb7e <Device::Device(char const*)>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000c4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d6:	89 10                	mov    DWORD PTR [eax],edx
c000c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4e6:	90                   	nop
c000c4e7:	83 c4 0c             	add    esp,0xc
c000c4ea:	c3                   	ret    
c000c4eb:	90                   	nop

c000c4ec <Clock::~Clock()>:
c000c4ec:	83 ec 0c             	sub    esp,0xc
c000c4ef:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000c4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f8:	89 10                	mov    DWORD PTR [eax],edx
c000c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fe:	83 ec 0c             	sub    esp,0xc
c000c501:	50                   	push   eax
c000c502:	e8 e1 03 00 00       	call   c000c8e8 <Device::~Device()>
c000c507:	83 c4 10             	add    esp,0x10
c000c50a:	90                   	nop
c000c50b:	83 c4 0c             	add    esp,0xc
c000c50e:	c3                   	ret    
c000c50f:	90                   	nop

c000c510 <Clock::~Clock()>:
c000c510:	83 ec 0c             	sub    esp,0xc
c000c513:	83 ec 0c             	sub    esp,0xc
c000c516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51a:	e8 cd ff ff ff       	call   c000c4ec <Clock::~Clock()>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	83 ec 08             	sub    esp,0x8
c000c525:	68 58 01 00 00       	push   0x158
c000c52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52e:	e8 05 e3 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	83 c4 0c             	add    esp,0xc
c000c539:	c3                   	ret    

c000c53a <Clock::timeInSecondsLocal()>:
c000c53a:	53                   	push   ebx
c000c53b:	83 ec 14             	sub    esp,0x14
c000c53e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c542:	8b 10                	mov    edx,DWORD PTR [eax]
c000c544:	50                   	push   eax
c000c545:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c548:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c54f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c555:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c55b:	89 cb                	mov    ebx,ecx
c000c55d:	c1 fb 1f             	sar    ebx,0x1f
c000c560:	01 c8                	add    eax,ecx
c000c562:	11 da                	adc    edx,ebx
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	31 c9                	xor    ecx,ecx
c000c569:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c570:	74 05                	je     c000c577 <Clock::timeInSecondsLocal()+0x3d>
c000c572:	b9 08 07 00 00       	mov    ecx,0x708
c000c577:	31 db                	xor    ebx,ebx
c000c579:	01 c8                	add    eax,ecx
c000c57b:	11 da                	adc    edx,ebx
c000c57d:	83 c4 08             	add    esp,0x8
c000c580:	5b                   	pop    ebx
c000c581:	c3                   	ret    

c000c582 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c582:	57                   	push   edi
c000c583:	56                   	push   esi
c000c584:	53                   	push   ebx
c000c585:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c589:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c58d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c58f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c593:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c596:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c59d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5a3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5a9:	99                   	cdq    
c000c5aa:	29 c6                	sub    esi,eax
c000c5ac:	19 d7                	sbb    edi,edx
c000c5ae:	89 f0                	mov    eax,esi
c000c5b0:	89 fa                	mov    edx,edi
c000c5b2:	31 f6                	xor    esi,esi
c000c5b4:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5bb:	74 05                	je     c000c5c2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5bd:	be 08 07 00 00       	mov    esi,0x708
c000c5c2:	31 ff                	xor    edi,edi
c000c5c4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5c8:	29 f0                	sub    eax,esi
c000c5ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5ce:	19 fa                	sbb    edx,edi
c000c5d0:	89 d8                	mov    eax,ebx
c000c5d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5d6:	5b                   	pop    ebx
c000c5d7:	5e                   	pop    esi
c000c5d8:	5f                   	pop    edi
c000c5d9:	ff e0                	jmp    eax

c000c5db <datetimeToSeconds(datetime_t)>:
c000c5db:	55                   	push   ebp
c000c5dc:	57                   	push   edi
c000c5dd:	56                   	push   esi
c000c5de:	53                   	push   ebx
c000c5df:	83 ec 0c             	sub    esp,0xc
c000c5e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5e6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5ea:	89 d6                	mov    esi,edx
c000c5ec:	0f b6 c7             	movzx  eax,bh
c000c5ef:	c1 ee 10             	shr    esi,0x10
c000c5f2:	6b e8 3c             	imul   ebp,eax,0x3c
c000c5f5:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5fb:	0f b6 ce             	movzx  ecx,dh
c000c5fe:	89 df                	mov    edi,ebx
c000c600:	49                   	dec    ecx
c000c601:	c1 ef 10             	shr    edi,0x10
c000c604:	0f b6 db             	movzx  ebx,bl
c000c607:	89 f8                	mov    eax,edi
c000c609:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c60f:	0f b6 f8             	movzx  edi,al
c000c612:	0f b6 d2             	movzx  edx,dl
c000c615:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c619:	01 d8                	add    eax,ebx
c000c61b:	0f b7 de             	movzx  ebx,si
c000c61e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c621:	c1 f8 1f             	sar    eax,0x1f
c000c624:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c628:	0f b6 c1             	movzx  eax,cl
c000c62b:	8b 0c 85 60 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4a0]
c000c632:	83 f8 01             	cmp    eax,0x1
c000c635:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c639:	76 27                	jbe    c000c662 <datetimeToSeconds(datetime_t)+0x87>
c000c63b:	83 e6 03             	and    esi,0x3
c000c63e:	75 22                	jne    c000c662 <datetimeToSeconds(datetime_t)+0x87>
c000c640:	31 d2                	xor    edx,edx
c000c642:	be 64 00 00 00       	mov    esi,0x64
c000c647:	89 d8                	mov    eax,ebx
c000c649:	f7 f6                	div    esi
c000c64b:	85 d2                	test   edx,edx
c000c64d:	75 12                	jne    c000c661 <datetimeToSeconds(datetime_t)+0x86>
c000c64f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c655:	be 90 01 00 00       	mov    esi,0x190
c000c65a:	99                   	cdq    
c000c65b:	f7 fe                	idiv   esi
c000c65d:	85 d2                	test   edx,edx
c000c65f:	75 01                	jne    c000c662 <datetimeToSeconds(datetime_t)+0x87>
c000c661:	41                   	inc    ecx
c000c662:	83 fb 46             	cmp    ebx,0x46
c000c665:	76 48                	jbe    c000c6af <datetimeToSeconds(datetime_t)+0xd4>
c000c667:	be 46 00 00 00       	mov    esi,0x46
c000c66c:	bf 64 00 00 00       	mov    edi,0x64
c000c671:	bd 90 01 00 00       	mov    ebp,0x190
c000c676:	b8 6d 01 00 00       	mov    eax,0x16d
c000c67b:	f7 c6 03 00 00 00    	test   esi,0x3
c000c681:	75 23                	jne    c000c6a6 <datetimeToSeconds(datetime_t)+0xcb>
c000c683:	89 f0                	mov    eax,esi
c000c685:	99                   	cdq    
c000c686:	f7 ff                	idiv   edi
c000c688:	b8 6e 01 00 00       	mov    eax,0x16e
c000c68d:	85 d2                	test   edx,edx
c000c68f:	75 15                	jne    c000c6a6 <datetimeToSeconds(datetime_t)+0xcb>
c000c691:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c697:	99                   	cdq    
c000c698:	f7 fd                	idiv   ebp
c000c69a:	83 fa 01             	cmp    edx,0x1
c000c69d:	19 c0                	sbb    eax,eax
c000c69f:	f7 d0                	not    eax
c000c6a1:	05 6e 01 00 00       	add    eax,0x16e
c000c6a6:	01 c1                	add    ecx,eax
c000c6a8:	46                   	inc    esi
c000c6a9:	39 de                	cmp    esi,ebx
c000c6ab:	7c c9                	jl     c000c676 <datetimeToSeconds(datetime_t)+0x9b>
c000c6ad:	eb 34                	jmp    c000c6e3 <datetimeToSeconds(datetime_t)+0x108>
c000c6af:	74 32                	je     c000c6e3 <datetimeToSeconds(datetime_t)+0x108>
c000c6b1:	b8 45 00 00 00       	mov    eax,0x45
c000c6b6:	89 c2                	mov    edx,eax
c000c6b8:	83 e2 03             	and    edx,0x3
c000c6bb:	39 d8                	cmp    eax,ebx
c000c6bd:	7e 0f                	jle    c000c6ce <datetimeToSeconds(datetime_t)+0xf3>
c000c6bf:	83 fa 01             	cmp    edx,0x1
c000c6c2:	19 d2                	sbb    edx,edx
c000c6c4:	48                   	dec    eax
c000c6c5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6cc:	eb e8                	jmp    c000c6b6 <datetimeToSeconds(datetime_t)+0xdb>
c000c6ce:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6d3:	85 d2                	test   edx,edx
c000c6d5:	75 0a                	jne    c000c6e1 <datetimeToSeconds(datetime_t)+0x106>
c000c6d7:	83 fb 01             	cmp    ebx,0x1
c000c6da:	19 c0                	sbb    eax,eax
c000c6dc:	05 6e 01 00 00       	add    eax,0x16e
c000c6e1:	29 c1                	sub    ecx,eax
c000c6e3:	b8 80 51 01 00       	mov    eax,0x15180
c000c6e8:	f7 e9                	imul   ecx
c000c6ea:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6ed:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6f1:	83 c4 0c             	add    esp,0xc
c000c6f4:	5b                   	pop    ebx
c000c6f5:	5e                   	pop    esi
c000c6f6:	5f                   	pop    edi
c000c6f7:	5d                   	pop    ebp
c000c6f8:	c3                   	ret    
c000c6f9:	90                   	nop

c000c6fa <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6fa:	57                   	push   edi
c000c6fb:	56                   	push   esi
c000c6fc:	53                   	push   ebx
c000c6fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c701:	8b 06                	mov    eax,DWORD PTR [esi]
c000c703:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c70a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c70e:	e8 c8 fe ff ff       	call   c000c5db <datetimeToSeconds(datetime_t)>
c000c713:	59                   	pop    ecx
c000c714:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c71b:	5b                   	pop    ebx
c000c71c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c722:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c728:	89 cb                	mov    ebx,ecx
c000c72a:	c1 fb 1f             	sar    ebx,0x1f
c000c72d:	29 c8                	sub    eax,ecx
c000c72f:	19 da                	sbb    edx,ebx
c000c731:	31 c9                	xor    ecx,ecx
c000c733:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c73a:	74 05                	je     c000c741 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c73c:	b9 08 07 00 00       	mov    ecx,0x708
c000c741:	31 db                	xor    ebx,ebx
c000c743:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c747:	29 c8                	sub    eax,ecx
c000c749:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c74d:	19 da                	sbb    edx,ebx
c000c74f:	89 f8                	mov    eax,edi
c000c751:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c755:	5b                   	pop    ebx
c000c756:	5e                   	pop    esi
c000c757:	5f                   	pop    edi
c000c758:	ff e0                	jmp    eax

c000c75a <secondsToDatetime(unsigned long long)>:
c000c75a:	55                   	push   ebp
c000c75b:	57                   	push   edi
c000c75c:	56                   	push   esi
c000c75d:	53                   	push   ebx
c000c75e:	83 ec 1c             	sub    esp,0x1c
c000c761:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c765:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c769:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c76d:	6a 00                	push   0x0
c000c76f:	68 80 51 01 00       	push   0x15180
c000c774:	55                   	push   ebp
c000c775:	57                   	push   edi
c000c776:	e8 75 30 01 00       	call   c001f7f0 <__udivdi3>
c000c77b:	83 c4 10             	add    esp,0x10
c000c77e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c784:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c788:	6a 00                	push   0x0
c000c78a:	68 80 51 01 00       	push   0x15180
c000c78f:	55                   	push   ebp
c000c790:	57                   	push   edi
c000c791:	bf 10 0e 00 00       	mov    edi,0xe10
c000c796:	e8 55 31 01 00       	call   c001f8f0 <__umoddi3>
c000c79b:	83 c4 10             	add    esp,0x10
c000c79e:	99                   	cdq    
c000c79f:	f7 ff                	idiv   edi
c000c7a1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7a6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7a9:	89 d0                	mov    eax,edx
c000c7ab:	99                   	cdq    
c000c7ac:	f7 ff                	idiv   edi
c000c7ae:	85 db                	test   ebx,ebx
c000c7b0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7b3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7b6:	79 11                	jns    c000c7c9 <secondsToDatetime(unsigned long long)+0x6f>
c000c7b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7bc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7c2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7c7:	eb 07                	jmp    c000c7d0 <secondsToDatetime(unsigned long long)+0x76>
c000c7c9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7ce:	89 d8                	mov    eax,ebx
c000c7d0:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7d5:	99                   	cdq    
c000c7d6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7db:	f7 f9                	idiv   ecx
c000c7dd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7e6:	31 d2                	xor    edx,edx
c000c7e8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7f0:	01 c3                	add    ebx,eax
c000c7f2:	89 d8                	mov    eax,ebx
c000c7f4:	f7 f1                	div    ecx
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7fb:	89 d8                	mov    eax,ebx
c000c7fd:	f7 f7                	div    edi
c000c7ff:	31 d2                	xor    edx,edx
c000c801:	29 c1                	sub    ecx,eax
c000c803:	89 d8                	mov    eax,ebx
c000c805:	f7 f5                	div    ebp
c000c807:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c80c:	29 c1                	sub    ecx,eax
c000c80e:	31 d2                	xor    edx,edx
c000c810:	89 c8                	mov    eax,ecx
c000c812:	f7 f5                	div    ebp
c000c814:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c81d:	31 d2                	xor    edx,edx
c000c81f:	89 c8                	mov    eax,ecx
c000c821:	f7 f5                	div    ebp
c000c823:	31 d2                	xor    edx,edx
c000c825:	01 c3                	add    ebx,eax
c000c827:	89 c8                	mov    eax,ecx
c000c829:	f7 f7                	div    edi
c000c82b:	bf 99 00 00 00       	mov    edi,0x99
c000c830:	29 c3                	sub    ebx,eax
c000c832:	31 d2                	xor    edx,edx
c000c834:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c83c:	29 c3                	sub    ebx,eax
c000c83e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c841:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c844:	bb 05 00 00 00       	mov    ebx,0x5
c000c849:	83 c1 02             	add    ecx,0x2
c000c84c:	89 c8                	mov    eax,ecx
c000c84e:	f7 f7                	div    edi
c000c850:	31 d2                	xor    edx,edx
c000c852:	89 c7                	mov    edi,eax
c000c854:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c85a:	83 c0 02             	add    eax,0x2
c000c85d:	f7 f3                	div    ebx
c000c85f:	89 eb                	mov    ebx,ebp
c000c861:	29 c3                	sub    ebx,eax
c000c863:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c869:	88 1e                	mov    BYTE PTR [esi],bl
c000c86b:	19 c0                	sbb    eax,eax
c000c86d:	31 d2                	xor    edx,edx
c000c86f:	83 e0 0c             	and    eax,0xc
c000c872:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c876:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c87e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c882:	83 f9 01             	cmp    ecx,0x1
c000c885:	0f 96 c2             	setbe  dl
c000c888:	41                   	inc    ecx
c000c889:	01 d0                	add    eax,edx
c000c88b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c88e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c892:	83 c4 1c             	add    esp,0x1c
c000c895:	89 f0                	mov    eax,esi
c000c897:	5b                   	pop    ebx
c000c898:	5e                   	pop    esi
c000c899:	5f                   	pop    edi
c000c89a:	5d                   	pop    ebp
c000c89b:	c2 04 00             	ret    0x4

c000c89e <Clock::timeInDatetimeLocal()>:
c000c89e:	53                   	push   ebx
c000c89f:	83 ec 14             	sub    esp,0x14
c000c8a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8aa:	e8 8b fc ff ff       	call   c000c53a <Clock::timeInSecondsLocal()>
c000c8af:	83 c4 0c             	add    esp,0xc
c000c8b2:	52                   	push   edx
c000c8b3:	50                   	push   eax
c000c8b4:	53                   	push   ebx
c000c8b5:	e8 a0 fe ff ff       	call   c000c75a <secondsToDatetime(unsigned long long)>
c000c8ba:	89 d8                	mov    eax,ebx
c000c8bc:	83 c4 14             	add    esp,0x14
c000c8bf:	5b                   	pop    ebx
c000c8c0:	c2 04 00             	ret    0x4
c000c8c3:	90                   	nop

c000c8c4 <Device::hibernate()>:
c000c8c4:	c3                   	ret    
c000c8c5:	90                   	nop

c000c8c6 <Device::wake()>:
c000c8c6:	c3                   	ret    
c000c8c7:	90                   	nop

c000c8c8 <Device::detect()>:
c000c8c8:	c3                   	ret    
c000c8c9:	90                   	nop

c000c8ca <Device::disableLegacy()>:
c000c8ca:	c3                   	ret    
c000c8cb:	90                   	nop

c000c8cc <Device::powerSaving(PowerSavingLevel)>:
c000c8cc:	c3                   	ret    
c000c8cd:	90                   	nop

c000c8ce <DriverlessDevice::close(int, int, void*)>:
c000c8ce:	31 c0                	xor    eax,eax
c000c8d0:	c3                   	ret    
c000c8d1:	90                   	nop

c000c8d2 <DriverlessDevice::detect()>:
c000c8d2:	c3                   	ret    
c000c8d3:	90                   	nop

c000c8d4 <DriverlessDevice::open(int, int, void*)>:
c000c8d4:	83 ec 18             	sub    esp,0x18
c000c8d7:	68 90 1b 02 c0       	push   0xc0021b90
c000c8dc:	e8 b6 4d 00 00       	call   c0011697 <KePanic(char const*)>
c000c8e1:	83 c8 ff             	or     eax,0xffffffff
c000c8e4:	83 c4 1c             	add    esp,0x1c
c000c8e7:	c3                   	ret    

c000c8e8 <Device::~Device()>:
c000c8e8:	ba f0 1b 02 c0       	mov    edx,0xc0021bf0
c000c8ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8f1:	89 10                	mov    DWORD PTR [eax],edx
c000c8f3:	90                   	nop
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Device::~Device()>:
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8fd:	e8 e6 ff ff ff       	call   c000c8e8 <Device::~Device()>
c000c902:	83 c4 04             	add    esp,0x4
c000c905:	83 ec 08             	sub    esp,0x8
c000c908:	68 58 01 00 00       	push   0x158
c000c90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c911:	e8 22 df ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000c916:	83 c4 10             	add    esp,0x10
c000c919:	83 c4 0c             	add    esp,0xc
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <Device::findAndLoadDriver()>:
c000c91e:	c7 44 24 04 ae 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bae
c000c926:	e9 3a e0 ff ff       	jmp    c000a965 <Dbg::kprintf(char const*, ...)>
c000c92b:	90                   	nop

c000c92c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c92c:	57                   	push   edi
c000c92d:	b9 09 00 00 00       	mov    ecx,0x9
c000c932:	56                   	push   esi
c000c933:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c937:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c93b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c945:	81 c7 18 01 00 00    	add    edi,0x118
c000c94b:	fc                   	cld    
c000c94c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c94e:	5e                   	pop    esi
c000c94f:	5f                   	pop    edi
c000c950:	c3                   	ret    
c000c951:	90                   	nop

c000c952 <Device::preOpenACPI(void*, char*, char*)>:
c000c952:	57                   	push   edi
c000c953:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c958:	56                   	push   esi
c000c959:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c95d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c961:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c96b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c971:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c977:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c97b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c97d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c982:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c988:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c98c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c98e:	5e                   	pop    esi
c000c98f:	5f                   	pop    edi
c000c990:	c3                   	ret    
c000c991:	90                   	nop

c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c992:	53                   	push   ebx
c000c993:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c997:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c99b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c99f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9a3:	0f b6 c0             	movzx  eax,al
c000c9a6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9b6:	5b                   	pop    ebx
c000c9b7:	e9 a8 05 00 00       	jmp    c000cf64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9bc <Device::getParent()>:
c000c9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9c0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9c6:	c3                   	ret    
c000c9c7:	90                   	nop

c000c9c8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9d0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9d5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9e1:	e9 e6 06 00 00       	jmp    c000d0cc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9e6 <Device::addChild(Device*)>:
c000c9e6:	53                   	push   ebx
c000c9e7:	83 ec 08             	sub    esp,0x8
c000c9ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9f2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9f8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca00:	85 d2                	test   edx,edx
c000ca02:	74 04                	je     c000ca08 <Device::addChild(Device*)+0x22>
c000ca04:	89 d3                	mov    ebx,edx
c000ca06:	eb f6                	jmp    c000c9fe <Device::addChild(Device*)+0x18>
c000ca08:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca0b:	83 ec 0c             	sub    esp,0xc
c000ca0e:	6a 08                	push   0x8
c000ca10:	e8 c1 b0 ff ff       	call   c0007ad6 <malloc>
c000ca15:	89 03                	mov    DWORD PTR [ebx],eax
c000ca17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca24:	83 c4 18             	add    esp,0x18
c000ca27:	5b                   	pop    ebx
c000ca28:	c3                   	ret    
c000ca29:	90                   	nop

c000ca2a <Device::removeAllChildren()>:
c000ca2a:	56                   	push   esi
c000ca2b:	53                   	push   ebx
c000ca2c:	52                   	push   edx
c000ca2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca31:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca3a:	74 17                	je     c000ca53 <Device::removeAllChildren()+0x29>
c000ca3c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca3f:	85 c0                	test   eax,eax
c000ca41:	74 0c                	je     c000ca4f <Device::removeAllChildren()+0x25>
c000ca43:	83 ec 0c             	sub    esp,0xc
c000ca46:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca48:	50                   	push   eax
c000ca49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca51:	eb e4                	jmp    c000ca37 <Device::removeAllChildren()+0xd>
c000ca53:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca5f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca6c:	58                   	pop    eax
c000ca6d:	5b                   	pop    ebx
c000ca6e:	5e                   	pop    esi
c000ca6f:	c3                   	ret    

c000ca70 <Device::hibernateAll()>:
c000ca70:	53                   	push   ebx
c000ca71:	83 ec 14             	sub    esp,0x14
c000ca74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca7a:	53                   	push   ebx
c000ca7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca8a:	74 0f                	je     c000ca9b <Device::hibernateAll()+0x2b>
c000ca8c:	83 ec 0c             	sub    esp,0xc
c000ca8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca92:	e8 d9 ff ff ff       	call   c000ca70 <Device::hibernateAll()>
c000ca97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca99:	eb e9                	jmp    c000ca84 <Device::hibernateAll()+0x14>
c000ca9b:	83 c4 08             	add    esp,0x8
c000ca9e:	5b                   	pop    ebx
c000ca9f:	c3                   	ret    

c000caa0 <Device::wakeAll()>:
c000caa0:	53                   	push   ebx
c000caa1:	83 ec 14             	sub    esp,0x14
c000caa4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caaa:	53                   	push   ebx
c000caab:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000caae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cab4:	83 c4 10             	add    esp,0x10
c000cab7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caba:	74 0f                	je     c000cacb <Device::wakeAll()+0x2b>
c000cabc:	83 ec 0c             	sub    esp,0xc
c000cabf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cac2:	e8 d9 ff ff ff       	call   c000caa0 <Device::wakeAll()>
c000cac7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cac9:	eb e9                	jmp    c000cab4 <Device::wakeAll()+0x14>
c000cacb:	83 c4 08             	add    esp,0x8
c000cace:	5b                   	pop    ebx
c000cacf:	c3                   	ret    

c000cad0 <Device::detectAll()>:
c000cad0:	53                   	push   ebx
c000cad1:	83 ec 14             	sub    esp,0x14
c000cad4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cad8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cada:	53                   	push   ebx
c000cadb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cade:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cae4:	83 c4 10             	add    esp,0x10
c000cae7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caea:	74 0f                	je     c000cafb <Device::detectAll()+0x2b>
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caf2:	e8 d9 ff ff ff       	call   c000cad0 <Device::detectAll()>
c000caf7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caf9:	eb e9                	jmp    c000cae4 <Device::detectAll()+0x14>
c000cafb:	83 c4 08             	add    esp,0x8
c000cafe:	5b                   	pop    ebx
c000caff:	c3                   	ret    

c000cb00 <Device::disableLegacyAll()>:
c000cb00:	c3                   	ret    
c000cb01:	90                   	nop

c000cb02 <Device::loadDriversForAll()>:
c000cb02:	c3                   	ret    
c000cb03:	90                   	nop

c000cb04 <Device::closeAll()>:
c000cb04:	53                   	push   ebx
c000cb05:	83 ec 08             	sub    esp,0x8
c000cb08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb0e:	6a 00                	push   0x0
c000cb10:	6a 00                	push   0x0
c000cb12:	6a 00                	push   0x0
c000cb14:	53                   	push   ebx
c000cb15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb1e:	83 c4 10             	add    esp,0x10
c000cb21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb24:	74 0f                	je     c000cb35 <Device::closeAll()+0x31>
c000cb26:	83 ec 0c             	sub    esp,0xc
c000cb29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb2c:	e8 d3 ff ff ff       	call   c000cb04 <Device::closeAll()>
c000cb31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb33:	eb e9                	jmp    c000cb1e <Device::closeAll()+0x1a>
c000cb35:	83 c4 08             	add    esp,0x8
c000cb38:	5b                   	pop    ebx
c000cb39:	c3                   	ret    

c000cb3a <Device::powerSavingAll(PowerSavingLevel)>:
c000cb3a:	56                   	push   esi
c000cb3b:	53                   	push   ebx
c000cb3c:	83 ec 0c             	sub    esp,0xc
c000cb3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb43:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb49:	56                   	push   esi
c000cb4a:	53                   	push   ebx
c000cb4b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb54:	83 c4 10             	add    esp,0x10
c000cb57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb5a:	74 0f                	je     c000cb6b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb5c:	52                   	push   edx
c000cb5d:	52                   	push   edx
c000cb5e:	56                   	push   esi
c000cb5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb62:	e8 d3 ff ff ff       	call   c000cb3a <Device::powerSavingAll(PowerSavingLevel)>
c000cb67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb69:	eb e9                	jmp    c000cb54 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb6b:	58                   	pop    eax
c000cb6c:	5b                   	pop    ebx
c000cb6d:	5e                   	pop    esi
c000cb6e:	c3                   	ret    
c000cb6f:	90                   	nop

c000cb70 <Device::setName(char const*)>:
c000cb70:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb78:	e9 c3 3a ff ff       	jmp    c0000640 <strcpy>
c000cb7d:	90                   	nop

c000cb7e <Device::Device(char const*)>:
c000cb7e:	83 ec 1c             	sub    esp,0x1c
c000cb81:	ba f0 1b 02 c0       	mov    edx,0xc0021bf0
c000cb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8a:	89 10                	mov    DWORD PTR [eax],edx
c000cb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb90:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbac:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbba:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbc4:	83 ec 08             	sub    esp,0x8
c000cbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	e8 9c ff ff ff       	call   c000cb70 <Device::setName(char const*)>
c000cbd4:	83 c4 10             	add    esp,0x10
c000cbd7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbe6:	e8 eb ae ff ff       	call   c0007ad6 <malloc>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbfb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbff:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc09:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc19:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc35:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc40:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc5c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc74:	90                   	nop
c000cc75:	83 c4 1c             	add    esp,0x1c
c000cc78:	c3                   	ret    
c000cc79:	90                   	nop

c000cc7a <Device::getName()>:
c000cc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7e:	05 d0 00 00 00       	add    eax,0xd0
c000cc83:	c3                   	ret    

c000cc84 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8b:	83 ec 08             	sub    esp,0x8
c000cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc92:	50                   	push   eax
c000cc93:	e8 e6 fe ff ff       	call   c000cb7e <Device::Device(char const*)>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	ba 1c 1c 02 c0       	mov    edx,0xc0021c1c
c000cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca4:	89 10                	mov    DWORD PTR [eax],edx
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccb4:	90                   	nop
c000ccb5:	83 c4 0c             	add    esp,0xc
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop

c000ccba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccba:	57                   	push   edi
c000ccbb:	56                   	push   esi
c000ccbc:	53                   	push   ebx
c000ccbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccc1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccc5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccc9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cccf:	75 0c                	jne    c000ccdd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccd1:	52                   	push   edx
c000ccd2:	52                   	push   edx
c000ccd3:	53                   	push   ebx
c000ccd4:	56                   	push   esi
c000ccd5:	e8 c8 2f 01 00       	call   c001fca2 <LinkedList<Device>::addElement(Device*)>
c000ccda:	83 c4 10             	add    esp,0x10
c000ccdd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cce3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cce6:	74 12                	je     c000ccfa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cce8:	50                   	push   eax
c000cce9:	57                   	push   edi
c000ccea:	56                   	push   esi
c000cceb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccee:	e8 c7 ff ff ff       	call   c000ccba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccf3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	eb e9                	jmp    c000cce3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccfa:	5b                   	pop    ebx
c000ccfb:	5e                   	pop    esi
c000ccfc:	5f                   	pop    edi
c000ccfd:	c3                   	ret    

c000ccfe <getDevicesOfType(DeviceType)>:
c000ccfe:	53                   	push   ebx
c000ccff:	83 ec 14             	sub    esp,0x14
c000cd02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd06:	53                   	push   ebx
c000cd07:	e8 72 30 01 00       	call   c001fd7e <LinkedList<Device>::LinkedList()>
c000cd0c:	83 c4 0c             	add    esp,0xc
c000cd0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd13:	53                   	push   ebx
c000cd14:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd1a:	e8 9b ff ff ff       	call   c000ccba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd1f:	89 d8                	mov    eax,ebx
c000cd21:	83 c4 18             	add    esp,0x18
c000cd24:	5b                   	pop    ebx
c000cd25:	c2 04 00             	ret    0x4

c000cd28 <HardDiskController::HardDiskController(char const*)>:
c000cd28:	83 ec 0c             	sub    esp,0xc
c000cd2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2f:	83 ec 08             	sub    esp,0x8
c000cd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd36:	50                   	push   eax
c000cd37:	e8 42 fe ff ff       	call   c000cb7e <Device::Device(char const*)>
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	ba 48 1c 02 c0       	mov    edx,0xc0021c48
c000cd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd48:	89 10                	mov    DWORD PTR [eax],edx
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd58:	90                   	nop
c000cd59:	83 c4 0c             	add    esp,0xc
c000cd5c:	c3                   	ret    
c000cd5d:	90                   	nop
c000cd5e:	66 90                	xchg   ax,ax

c000cd60 <HardDiskController::~HardDiskController()>:
c000cd60:	83 ec 0c             	sub    esp,0xc
c000cd63:	ba 48 1c 02 c0       	mov    edx,0xc0021c48
c000cd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6c:	89 10                	mov    DWORD PTR [eax],edx
c000cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd72:	83 ec 0c             	sub    esp,0xc
c000cd75:	50                   	push   eax
c000cd76:	e8 6d fb ff ff       	call   c000c8e8 <Device::~Device()>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	90                   	nop
c000cd7f:	83 c4 0c             	add    esp,0xc
c000cd82:	c3                   	ret    
c000cd83:	90                   	nop

c000cd84 <HardDiskController::~HardDiskController()>:
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	83 ec 0c             	sub    esp,0xc
c000cd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8e:	e8 cd ff ff ff       	call   c000cd60 <HardDiskController::~HardDiskController()>
c000cd93:	83 c4 10             	add    esp,0x10
c000cd96:	83 ec 08             	sub    esp,0x8
c000cd99:	68 58 01 00 00       	push   0x158
c000cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda2:	e8 91 da ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	83 c4 0c             	add    esp,0xc
c000cdad:	c3                   	ret    

c000cdae <PhysicalDisk::eject()>:
c000cdae:	83 c8 ff             	or     eax,0xffffffff
c000cdb1:	c3                   	ret    

c000cdb2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdb2:	83 ec 0c             	sub    esp,0xc
c000cdb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb9:	83 ec 08             	sub    esp,0x8
c000cdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc0:	50                   	push   eax
c000cdc1:	e8 b8 fd ff ff       	call   c000cb7e <Device::Device(char const*)>
c000cdc6:	83 c4 10             	add    esp,0x10
c000cdc9:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000cdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd2:	89 10                	mov    DWORD PTR [eax],edx
c000cdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce00:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce14:	90                   	nop
c000ce15:	83 c4 0c             	add    esp,0xc
c000ce18:	c3                   	ret    
c000ce19:	90                   	nop

c000ce1a <PhysicalDisk::startCache()>:
c000ce1a:	56                   	push   esi
c000ce1b:	53                   	push   ebx
c000ce1c:	83 ec 10             	sub    esp,0x10
c000ce1f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce23:	6a 44                	push   0x44
c000ce25:	e8 ac ac ff ff       	call   c0007ad6 <malloc>
c000ce2a:	89 c6                	mov    esi,eax
c000ce2c:	58                   	pop    eax
c000ce2d:	5a                   	pop    edx
c000ce2e:	53                   	push   ebx
c000ce2f:	56                   	push   esi
c000ce30:	e8 7b 17 00 00       	call   c000e5b0 <VCache::VCache(PhysicalDisk*)>
c000ce35:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce3b:	83 c4 14             	add    esp,0x14
c000ce3e:	5b                   	pop    ebx
c000ce3f:	5e                   	pop    esi
c000ce40:	c3                   	ret    
c000ce41:	90                   	nop

c000ce42 <PhysicalDisk::~PhysicalDisk()>:
c000ce42:	83 ec 0c             	sub    esp,0xc
c000ce45:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4e:	89 10                	mov    DWORD PTR [eax],edx
c000ce50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce54:	83 ec 0c             	sub    esp,0xc
c000ce57:	50                   	push   eax
c000ce58:	e8 8b fa ff ff       	call   c000c8e8 <Device::~Device()>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	90                   	nop
c000ce61:	83 c4 0c             	add    esp,0xc
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop

c000ce66 <PhysicalDisk::~PhysicalDisk()>:
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	83 ec 0c             	sub    esp,0xc
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	e8 cd ff ff ff       	call   c000ce42 <PhysicalDisk::~PhysicalDisk()>
c000ce75:	83 c4 10             	add    esp,0x10
c000ce78:	83 ec 08             	sub    esp,0x8
c000ce7b:	68 6c 01 00 00       	push   0x16c
c000ce80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce84:	e8 af d9 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	83 c4 0c             	add    esp,0xc
c000ce8f:	c3                   	ret    

c000ce90 <int_handler>:
c000ce90:	55                   	push   ebp
c000ce91:	57                   	push   edi
c000ce92:	56                   	push   esi
c000ce93:	53                   	push   ebx
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce9b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cea2:	74 0b                	je     c000ceaf <int_handler+0x1f>
c000cea4:	fa                   	cli    
c000cea5:	f4                   	hlt    
c000cea6:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cead:	75 f5                	jne    c000cea4 <int_handler+0x14>
c000ceaf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ceb2:	8d 46 e0             	lea    eax,[esi-0x20]
c000ceb5:	83 f8 17             	cmp    eax,0x17
c000ceb8:	76 40                	jbe    c000cefa <int_handler+0x6a>
c000ceba:	c1 e6 04             	shl    esi,0x4
c000cebd:	31 db                	xor    ebx,ebx
c000cebf:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cec5:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cecb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cecf:	85 c0                	test   eax,eax
c000ced1:	74 13                	je     c000cee6 <int_handler+0x56>
c000ced3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ced6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceda:	74 2c                	je     c000cf08 <int_handler+0x78>
c000cedc:	83 ec 08             	sub    esp,0x8
c000cedf:	52                   	push   edx
c000cee0:	57                   	push   edi
c000cee1:	ff d0                	call   eax
c000cee3:	83 c4 10             	add    esp,0x10
c000cee6:	83 c3 01             	add    ebx,0x1
c000cee9:	83 fb 04             	cmp    ebx,0x4
c000ceec:	75 dd                	jne    c000cecb <int_handler+0x3b>
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	31 c0                	xor    eax,eax
c000cef3:	5b                   	pop    ebx
c000cef4:	31 d2                	xor    edx,edx
c000cef6:	5e                   	pop    esi
c000cef7:	5f                   	pop    edi
c000cef8:	5d                   	pop    ebp
c000cef9:	c3                   	ret    
c000cefa:	83 ec 0c             	sub    esp,0xc
c000cefd:	50                   	push   eax
c000cefe:	e8 41 b5 00 00       	call   c0018444 <HalEndOfInterrupt(int)>
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	eb b2                	jmp    c000ceba <int_handler+0x2a>
c000cf08:	83 ec 08             	sub    esp,0x8
c000cf0b:	52                   	push   edx
c000cf0c:	57                   	push   edi
c000cf0d:	ff d0                	call   eax
c000cf0f:	83 c4 10             	add    esp,0x10
c000cf12:	83 c4 0c             	add    esp,0xc
c000cf15:	5b                   	pop    ebx
c000cf16:	5e                   	pop    esi
c000cf17:	5f                   	pop    edi
c000cf18:	5d                   	pop    ebp
c000cf19:	c3                   	ret    

c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf1a:	56                   	push   esi
c000cf1b:	31 c0                	xor    eax,eax
c000cf1d:	53                   	push   ebx
c000cf1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf26:	89 ca                	mov    edx,ecx
c000cf28:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf2c:	c1 e2 04             	shl    edx,0x4
c000cf2f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf37:	74 17                	je     c000cf50 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf39:	83 c0 01             	add    eax,0x1
c000cf3c:	83 f8 04             	cmp    eax,0x4
c000cf3f:	75 ee                	jne    c000cf2f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf41:	c7 44 24 0c a4 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ca4
c000cf49:	5b                   	pop    ebx
c000cf4a:	5e                   	pop    esi
c000cf4b:	e9 47 47 00 00       	jmp    c0011697 <KePanic(char const*)>
c000cf50:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf53:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf5a:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf61:	5b                   	pop    ebx
c000cf62:	5e                   	pop    esi
c000cf63:	c3                   	ret    

c000cf64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf64:	57                   	push   edi
c000cf65:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf6b:	56                   	push   esi
c000cf6c:	53                   	push   ebx
c000cf6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf75:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf7c:	74 54                	je     c000cfd2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf7e:	89 c7                	mov    edi,eax
c000cf80:	84 c0                	test   al,al
c000cf82:	74 1d                	je     c000cfa1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf84:	83 fe 0f             	cmp    esi,0xf
c000cf87:	0f 8f d5 00 00 00    	jg     c000d062 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf8d:	0f b6 b6 28 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc7d8]
c000cf94:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf9c:	d1 ef                	shr    edi,1
c000cf9e:	83 e7 01             	and    edi,0x1
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfa9:	31 db                	xor    ebx,ebx
c000cfab:	50                   	push   eax
c000cfac:	68 b1 1c 02 c0       	push   0xc0021cb1
c000cfb1:	e8 af d9 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000cfb6:	83 c4 10             	add    esp,0x10
c000cfb9:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	7f 55                	jg     c000d017 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	68 c8 1c 02 c0       	push   0xc0021cc8
c000cfca:	e8 c8 46 00 00       	call   c0011697 <KePanic(char const*)>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfd5:	89 f8                	mov    eax,edi
c000cfd7:	31 d2                	xor    edx,edx
c000cfd9:	c1 e0 04             	shl    eax,0x4
c000cfdc:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfe3:	85 c9                	test   ecx,ecx
c000cfe5:	0f 84 8e 00 00 00    	je     c000d079 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfeb:	83 c2 01             	add    edx,0x1
c000cfee:	83 fa 04             	cmp    edx,0x4
c000cff1:	75 e9                	jne    c000cfdc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cff3:	83 ec 0c             	sub    esp,0xc
c000cff6:	68 1c 1d 02 c0       	push   0xc0021d1c
c000cffb:	e8 97 46 00 00       	call   c0011697 <KePanic(char const*)>
c000d000:	83 c4 10             	add    esp,0x10
c000d003:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d008:	5b                   	pop    ebx
c000d009:	5e                   	pop    esi
c000d00a:	5f                   	pop    edi
c000d00b:	c3                   	ret    
c000d00c:	83 c3 01             	add    ebx,0x1
c000d00f:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d015:	7e ab                	jle    c000cfc2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d017:	83 ec 08             	sub    esp,0x8
c000d01a:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d021:	56                   	push   esi
c000d022:	50                   	push   eax
c000d023:	e8 a6 1b 01 00       	call   c001ebce <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d028:	83 c4 10             	add    esp,0x10
c000d02b:	84 c0                	test   al,al
c000d02d:	74 dd                	je     c000d00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d02f:	83 ec 04             	sub    esp,0x4
c000d032:	89 f8                	mov    eax,edi
c000d034:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d03b:	0f b6 f8             	movzx  edi,al
c000d03e:	57                   	push   edi
c000d03f:	8d 7e 20             	lea    edi,[esi+0x20]
c000d042:	6a 00                	push   0x0
c000d044:	89 f8                	mov    eax,edi
c000d046:	0f b6 c0             	movzx  eax,al
c000d049:	50                   	push   eax
c000d04a:	89 f0                	mov    eax,esi
c000d04c:	6a 00                	push   0x0
c000d04e:	0f b6 c0             	movzx  eax,al
c000d051:	6a 00                	push   0x0
c000d053:	50                   	push   eax
c000d054:	53                   	push   ebx
c000d055:	e8 e0 1c 01 00       	call   c001ed3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d05a:	83 c4 20             	add    esp,0x20
c000d05d:	e9 73 ff ff ff       	jmp    c000cfd5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d062:	83 ec 0c             	sub    esp,0xc
c000d065:	31 ff                	xor    edi,edi
c000d067:	68 e4 1c 02 c0       	push   0xc0021ce4
c000d06c:	e8 26 46 00 00       	call   c0011697 <KePanic(char const*)>
c000d071:	83 c4 10             	add    esp,0x10
c000d074:	e9 28 ff ff ff       	jmp    c000cfa1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d079:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d07c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d080:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d087:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d08b:	5b                   	pop    ebx
c000d08c:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d093:	89 f0                	mov    eax,esi
c000d095:	5e                   	pop    esi
c000d096:	5f                   	pop    edi
c000d097:	c3                   	ret    

c000d098 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d09c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0a0:	c1 e0 04             	shl    eax,0x4
c000d0a3:	8d 50 10             	lea    edx,[eax+0x10]
c000d0a6:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0ac:	74 08                	je     c000d0b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0ae:	83 c0 04             	add    eax,0x4
c000d0b1:	39 d0                	cmp    eax,edx
c000d0b3:	75 f1                	jne    c000d0a6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0b5:	c3                   	ret    
c000d0b6:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0c0:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0ca:	eb e2                	jmp    c000d0ae <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0cc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0cc:	53                   	push   ebx
c000d0cd:	83 ec 08             	sub    esp,0x8
c000d0d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0d4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0d9:	74 0e                	je     c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0db:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0e0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0e7:	75 37                	jne    c000d120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ed:	83 c0 20             	add    eax,0x20
c000d0f0:	c1 e0 04             	shl    eax,0x4
c000d0f3:	8d 50 10             	lea    edx,[eax+0x10]
c000d0f6:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0fc:	74 0c                	je     c000d10a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0fe:	83 c0 04             	add    eax,0x4
c000d101:	39 d0                	cmp    eax,edx
c000d103:	75 f1                	jne    c000d0f6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d105:	83 c4 08             	add    esp,0x8
c000d108:	5b                   	pop    ebx
c000d109:	c3                   	ret    
c000d10a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d114:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d11e:	eb de                	jmp    c000d0fe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d120:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d125:	7f 11                	jg     c000d138 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12b:	0f b6 80 28 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7d8]
c000d132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d136:	eb b1                	jmp    c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d138:	83 ec 0c             	sub    esp,0xc
c000d13b:	68 d5 1c 02 c0       	push   0xc0021cd5
c000d140:	e8 52 45 00 00       	call   c0011697 <KePanic(char const*)>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	eb 9f                	jmp    c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d14a <setupINTS()>:
c000d14a:	31 c0                	xor    eax,eax
c000d14c:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d156:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d160:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d16a:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d174:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d17e:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d188:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d192:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d19c:	83 c0 10             	add    eax,0x10
c000d19f:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1a4:	75 a6                	jne    c000d14c <setupINTS()+0x2>
c000d1a6:	c3                   	ret    

c000d1a7 <convertLegacyIRQNumber(int)>:
c000d1a7:	83 ec 0c             	sub    esp,0xc
c000d1aa:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1bb:	74 0c                	je     c000d1c9 <convertLegacyIRQNumber(int)+0x22>
c000d1bd:	83 f8 0f             	cmp    eax,0xf
c000d1c0:	7f 0b                	jg     c000d1cd <convertLegacyIRQNumber(int)+0x26>
c000d1c2:	0f b6 80 28 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7d8]
c000d1c9:	83 c4 0c             	add    esp,0xc
c000d1cc:	c3                   	ret    
c000d1cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1d1:	83 ec 0c             	sub    esp,0xc
c000d1d4:	68 e4 1c 02 c0       	push   0xc0021ce4
c000d1d9:	e8 b9 44 00 00       	call   c0011697 <KePanic(char const*)>
c000d1de:	83 c4 10             	add    esp,0x10
c000d1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e5:	83 c4 0c             	add    esp,0xc
c000d1e8:	c3                   	ret    
c000d1e9:	90                   	nop

c000d1ea <startGUI(void*)>:
c000d1ea:	55                   	push   ebp
c000d1eb:	89 e5                	mov    ebp,esp
c000d1ed:	53                   	push   ebx
c000d1ee:	83 ec 04             	sub    esp,0x4
c000d1f1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1f6:	83 e8 01             	sub    eax,0x1
c000d1f9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d203:	85 c0                	test   eax,eax
c000d205:	75 01                	jne    c000d208 <startGUI(void*)+0x1e>
c000d207:	fb                   	sti    
c000d208:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d20e:	83 ec 08             	sub    esp,0x8
c000d211:	6a 01                	push   0x1
c000d213:	68 41 1d 02 c0       	push   0xc0021d41
c000d218:	e8 00 85 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	83 ec 08             	sub    esp,0x8
c000d223:	53                   	push   ebx
c000d224:	50                   	push   eax
c000d225:	e8 24 87 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d233:	83 ec 08             	sub    esp,0x8
c000d236:	6a 01                	push   0x1
c000d238:	68 5b 1d 02 c0       	push   0xc0021d5b
c000d23d:	e8 db 84 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	83 ec 08             	sub    esp,0x8
c000d248:	53                   	push   ebx
c000d249:	50                   	push   eax
c000d24a:	e8 ff 86 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c000d24f:	83 c4 10             	add    esp,0x10
c000d252:	90                   	nop
c000d253:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d256:	c9                   	leave  
c000d257:	c3                   	ret    

c000d258 <startGUIVESA(void*)>:
c000d258:	55                   	push   ebp
c000d259:	89 e5                	mov    ebp,esp
c000d25b:	53                   	push   ebx
c000d25c:	83 ec 04             	sub    esp,0x4
c000d25f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d264:	83 e8 01             	sub    eax,0x1
c000d267:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d26c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d271:	85 c0                	test   eax,eax
c000d273:	75 01                	jne    c000d276 <startGUIVESA(void*)+0x1e>
c000d275:	fb                   	sti    
c000d276:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d27c:	83 ec 08             	sub    esp,0x8
c000d27f:	6a 01                	push   0x1
c000d281:	68 79 1d 02 c0       	push   0xc0021d79
c000d286:	e8 92 84 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c000d28b:	83 c4 10             	add    esp,0x10
c000d28e:	83 ec 08             	sub    esp,0x8
c000d291:	53                   	push   ebx
c000d292:	50                   	push   eax
c000d293:	e8 b6 86 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c000d298:	83 c4 10             	add    esp,0x10
c000d29b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2a1:	83 ec 08             	sub    esp,0x8
c000d2a4:	6a 01                	push   0x1
c000d2a6:	68 5b 1d 02 c0       	push   0xc0021d5b
c000d2ab:	e8 6d 84 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c000d2b0:	83 c4 10             	add    esp,0x10
c000d2b3:	83 ec 08             	sub    esp,0x8
c000d2b6:	53                   	push   ebx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 91 86 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	90                   	nop
c000d2c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2c4:	c9                   	leave  
c000d2c5:	c3                   	ret    

c000d2c6 <sendKeyToTerminal(unsigned char)>:
c000d2c6:	55                   	push   ebp
c000d2c7:	89 e5                	mov    ebp,esp
c000d2c9:	83 ec 28             	sub    esp,0x28
c000d2cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2d2:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2d7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2db:	83 ec 08             	sub    esp,0x8
c000d2de:	52                   	push   edx
c000d2df:	50                   	push   eax
c000d2e0:	e8 f1 ba ff ff       	call   c0008dd6 <VgaText::receiveKey(unsigned char)>
c000d2e5:	83 c4 10             	add    esp,0x10
c000d2e8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ec:	83 f8 0a             	cmp    eax,0xa
c000d2ef:	74 16                	je     c000d307 <sendKeyToTerminal(unsigned char)+0x41>
c000d2f1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2f5:	83 f8 03             	cmp    eax,0x3
c000d2f8:	74 0d                	je     c000d307 <sendKeyToTerminal(unsigned char)+0x41>
c000d2fa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2fe:	83 f8 1c             	cmp    eax,0x1c
c000d301:	0f 85 97 00 00 00    	jne    c000d39e <sendKeyToTerminal(unsigned char)+0xd8>
c000d307:	fa                   	cli    
c000d308:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d30d:	83 c0 01             	add    eax,0x1
c000d310:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d315:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d31a:	83 c0 01             	add    eax,0x1
c000d31d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d322:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d327:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d32a:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d334:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d338:	74 1f                	je     c000d359 <sendKeyToTerminal(unsigned char)+0x93>
c000d33a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d33d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d340:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d343:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d346:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d349:	83 ec 0c             	sub    esp,0xc
c000d34c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d34f:	e8 40 93 00 00       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c000d354:	83 c4 10             	add    esp,0x10
c000d357:	eb db                	jmp    c000d334 <sendKeyToTerminal(unsigned char)+0x6e>
c000d359:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d35e:	83 e8 01             	sub    eax,0x1
c000d361:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d366:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d36b:	85 c0                	test   eax,eax
c000d36d:	75 18                	jne    c000d387 <sendKeyToTerminal(unsigned char)+0xc1>
c000d36f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d374:	85 c0                	test   eax,eax
c000d376:	74 0f                	je     c000d387 <sendKeyToTerminal(unsigned char)+0xc1>
c000d378:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d382:	e8 f5 8d 00 00       	call   c001617c <schedule()>
c000d387:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d38c:	83 e8 01             	sub    eax,0x1
c000d38f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d394:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d399:	85 c0                	test   eax,eax
c000d39b:	75 01                	jne    c000d39e <sendKeyToTerminal(unsigned char)+0xd8>
c000d39d:	fb                   	sti    
c000d39e:	90                   	nop
c000d39f:	c9                   	leave  
c000d3a0:	c3                   	ret    

c000d3a1 <sendKeyboardToken(KeyboardToken)>:
c000d3a1:	55                   	push   ebp
c000d3a2:	89 e5                	mov    ebp,esp
c000d3a4:	83 ec 18             	sub    esp,0x18
c000d3a7:	e8 3b 43 00 00       	call   c00116e7 <KeUserIOReceived()>
c000d3ac:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b2:	0f b7 c0             	movzx  eax,ax
c000d3b5:	83 f2 01             	xor    edx,0x1
c000d3b8:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3be:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3c3:	85 c0                	test   eax,eax
c000d3c5:	74 24                	je     c000d3eb <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3c7:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3cd:	83 ec 04             	sub    esp,0x4
c000d3d0:	68 40 b4 02 c0       	push   0xc002b440
c000d3d5:	83 ec 08             	sub    esp,0x8
c000d3d8:	89 e2                	mov    edx,esp
c000d3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3dd:	89 02                	mov    DWORD PTR [edx],eax
c000d3df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3e2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3e6:	ff d1                	call   ecx
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3ef:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3f2:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3f7:	0f b6 d2             	movzx  edx,dl
c000d3fa:	0f b6 c0             	movzx  eax,al
c000d3fd:	39 c2                	cmp    edx,eax
c000d3ff:	74 1c                	je     c000d41d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d401:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d404:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d409:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d40e:	0f b6 c0             	movzx  eax,al
c000d411:	83 ec 0c             	sub    esp,0xc
c000d414:	50                   	push   eax
c000d415:	e8 08 b1 ff ff       	call   c0008522 <setTerminalScrollLock(bool)>
c000d41a:	83 c4 10             	add    esp,0x10
c000d41d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d420:	0f b6 c0             	movzx  eax,al
c000d423:	85 c0                	test   eax,eax
c000d425:	0f 84 da 00 00 00    	je     c000d505 <sendKeyboardToken(KeyboardToken)+0x164>
c000d42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42e:	0f b7 c0             	movzx  eax,ax
c000d431:	3d 18 03 00 00       	cmp    eax,0x318
c000d436:	75 06                	jne    c000d43e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d438:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d43e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d441:	0f b7 c0             	movzx  eax,ax
c000d444:	3d 19 03 00 00       	cmp    eax,0x319
c000d449:	75 06                	jne    c000d451 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d44b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d454:	0f b7 c0             	movzx  eax,ax
c000d457:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d45c:	75 06                	jne    c000d464 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d45e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d467:	0f b7 c0             	movzx  eax,ax
c000d46a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d46f:	75 06                	jne    c000d477 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d471:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47a:	0f b7 c0             	movzx  eax,ax
c000d47d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d482:	75 06                	jne    c000d48a <sendKeyboardToken(KeyboardToken)+0xe9>
c000d484:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48d:	0f b7 c0             	movzx  eax,ax
c000d490:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d495:	75 06                	jne    c000d49d <sendKeyboardToken(KeyboardToken)+0xfc>
c000d497:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a0:	0f b7 c0             	movzx  eax,ax
c000d4a3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4a8:	75 06                	jne    c000d4b0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4aa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b3:	0f b7 c0             	movzx  eax,ax
c000d4b6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4bb:	75 06                	jne    c000d4c3 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4bd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c6:	0f b7 c0             	movzx  eax,ax
c000d4c9:	3d 20 03 00 00       	cmp    eax,0x320
c000d4ce:	75 06                	jne    c000d4d6 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4d0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d9:	0f b7 c0             	movzx  eax,ax
c000d4dc:	3d 21 03 00 00       	cmp    eax,0x321
c000d4e1:	75 06                	jne    c000d4e9 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4e3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ec:	0f b7 c0             	movzx  eax,ax
c000d4ef:	3d 22 03 00 00       	cmp    eax,0x322
c000d4f4:	0f 85 f1 00 00 00    	jne    c000d5eb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4fa:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d500:	e9 e6 00 00 00       	jmp    c000d5eb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d508:	0f b7 c0             	movzx  eax,ax
c000d50b:	3d 18 03 00 00       	cmp    eax,0x318
c000d510:	75 0a                	jne    c000d51c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d512:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d518:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51f:	0f b7 c0             	movzx  eax,ax
c000d522:	3d 19 03 00 00       	cmp    eax,0x319
c000d527:	75 0a                	jne    c000d533 <sendKeyboardToken(KeyboardToken)+0x192>
c000d529:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d52f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d536:	0f b7 c0             	movzx  eax,ax
c000d539:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d53e:	75 0a                	jne    c000d54a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d540:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d546:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54d:	0f b7 c0             	movzx  eax,ax
c000d550:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d555:	75 0a                	jne    c000d561 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d557:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d55d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d564:	0f b7 c0             	movzx  eax,ax
c000d567:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d56c:	75 0a                	jne    c000d578 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d56e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d574:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57b:	0f b7 c0             	movzx  eax,ax
c000d57e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d583:	75 0a                	jne    c000d58f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d585:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d58b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d592:	0f b7 c0             	movzx  eax,ax
c000d595:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d59a:	75 0a                	jne    c000d5a6 <sendKeyboardToken(KeyboardToken)+0x205>
c000d59c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a9:	0f b7 c0             	movzx  eax,ax
c000d5ac:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5b1:	75 0a                	jne    c000d5bd <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5b3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c0:	0f b7 c0             	movzx  eax,ax
c000d5c3:	3d 20 03 00 00       	cmp    eax,0x320
c000d5c8:	75 0a                	jne    c000d5d4 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5ca:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d7:	0f b7 c0             	movzx  eax,ax
c000d5da:	3d 21 03 00 00       	cmp    eax,0x321
c000d5df:	75 0a                	jne    c000d5eb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5e1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ee:	0f b7 c0             	movzx  eax,ax
c000d5f1:	3d 00 02 00 00       	cmp    eax,0x200
c000d5f6:	75 2f                	jne    c000d627 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5f8:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5fd:	83 f0 01             	xor    eax,0x1
c000d600:	0f b6 c0             	movzx  eax,al
c000d603:	85 c0                	test   eax,eax
c000d605:	74 20                	je     c000d627 <sendKeyboardToken(KeyboardToken)+0x286>
c000d607:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d60c:	6a 01                	push   0x1
c000d60e:	6a 00                	push   0x0
c000d610:	68 ea d1 00 c0       	push   0xc000d1ea
c000d615:	50                   	push   eax
c000d616:	e8 11 89 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c000d61b:	83 c4 10             	add    esp,0x10
c000d61e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d625:	eb 3a                	jmp    c000d661 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d62a:	0f b7 c0             	movzx  eax,ax
c000d62d:	3d 01 02 00 00       	cmp    eax,0x201
c000d632:	75 2d                	jne    c000d661 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d634:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d639:	83 f0 01             	xor    eax,0x1
c000d63c:	0f b6 c0             	movzx  eax,al
c000d63f:	85 c0                	test   eax,eax
c000d641:	74 1e                	je     c000d661 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d643:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d648:	6a 01                	push   0x1
c000d64a:	6a 00                	push   0x0
c000d64c:	68 58 d2 00 c0       	push   0xc000d258
c000d651:	50                   	push   eax
c000d652:	e8 d5 88 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c000d657:	83 c4 10             	add    esp,0x10
c000d65a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d664:	0f b7 c0             	movzx  eax,ax
c000d667:	3d 25 03 00 00       	cmp    eax,0x325
c000d66c:	75 06                	jne    c000d674 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d66e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d677:	0f b7 c0             	movzx  eax,ax
c000d67a:	3d 24 03 00 00       	cmp    eax,0x324
c000d67f:	75 06                	jne    c000d687 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d681:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68a:	0f b7 c0             	movzx  eax,ax
c000d68d:	3d 23 03 00 00       	cmp    eax,0x323
c000d692:	75 06                	jne    c000d69a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d694:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69d:	0f b7 c0             	movzx  eax,ax
c000d6a0:	3d 26 03 00 00       	cmp    eax,0x326
c000d6a5:	75 06                	jne    c000d6ad <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6a7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b0:	0f b7 c0             	movzx  eax,ax
c000d6b3:	3d 27 03 00 00       	cmp    eax,0x327
c000d6b8:	75 06                	jne    c000d6c0 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6ba:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c3:	0f b7 c0             	movzx  eax,ax
c000d6c6:	3d 22 03 00 00       	cmp    eax,0x322
c000d6cb:	75 06                	jne    c000d6d3 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6cd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6d3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6d7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6da:	83 f0 01             	xor    eax,0x1
c000d6dd:	0f b6 c0             	movzx  eax,al
c000d6e0:	85 c0                	test   eax,eax
c000d6e2:	74 7c                	je     c000d760 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6e4:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6e9:	0f b6 c0             	movzx  eax,al
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	74 43                	je     c000d733 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6f4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6f8:	85 c0                	test   eax,eax
c000d6fa:	74 2b                	je     c000d727 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6fc:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d702:	89 d0                	mov    eax,edx
c000d704:	c1 e0 02             	shl    eax,0x2
c000d707:	01 d0                	add    eax,edx
c000d709:	01 c0                	add    eax,eax
c000d70b:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d713:	0f b7 c0             	movzx  eax,ax
c000d716:	8d 50 d0             	lea    edx,[eax-0x30]
c000d719:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71e:	01 d0                	add    eax,edx
c000d720:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d725:	eb 71                	jmp    c000d798 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d727:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d731:	eb 65                	jmp    c000d798 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d733:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d738:	85 c0                	test   eax,eax
c000d73a:	74 18                	je     c000d754 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d73c:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d741:	0f b6 c0             	movzx  eax,al
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	50                   	push   eax
c000d748:	e8 79 fb ff ff       	call   c000d2c6 <sendKeyToTerminal(unsigned char)>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d754:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d75e:	eb 38                	jmp    c000d798 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d763:	0f b7 c0             	movzx  eax,ax
c000d766:	3d 01 01 00 00       	cmp    eax,0x101
c000d76b:	75 2b                	jne    c000d798 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d76d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d772:	85 c0                	test   eax,eax
c000d774:	74 18                	je     c000d78e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d776:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d77b:	0f b6 c0             	movzx  eax,al
c000d77e:	83 ec 0c             	sub    esp,0xc
c000d781:	50                   	push   eax
c000d782:	e8 3f fb ff ff       	call   c000d2c6 <sendKeyToTerminal(unsigned char)>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d78e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d798:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d79b:	83 f0 01             	xor    eax,0x1
c000d79e:	0f b6 c0             	movzx  eax,al
c000d7a1:	85 c0                	test   eax,eax
c000d7a3:	74 5a                	je     c000d7ff <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7a5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7a8:	83 f0 01             	xor    eax,0x1
c000d7ab:	0f b6 c0             	movzx  eax,al
c000d7ae:	85 c0                	test   eax,eax
c000d7b0:	74 4d                	je     c000d7ff <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7b2:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7b7:	83 f0 01             	xor    eax,0x1
c000d7ba:	0f b6 c0             	movzx  eax,al
c000d7bd:	85 c0                	test   eax,eax
c000d7bf:	74 3e                	je     c000d7ff <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c4:	0f b7 c0             	movzx  eax,ax
c000d7c7:	83 f8 1f             	cmp    eax,0x1f
c000d7ca:	76 0b                	jbe    c000d7d7 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7cf:	0f b7 c0             	movzx  eax,ax
c000d7d2:	83 f8 7e             	cmp    eax,0x7e
c000d7d5:	76 16                	jbe    c000d7ed <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7da:	0f b7 c0             	movzx  eax,ax
c000d7dd:	83 f8 0a             	cmp    eax,0xa
c000d7e0:	74 0b                	je     c000d7ed <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e5:	0f b7 c0             	movzx  eax,ax
c000d7e8:	83 f8 08             	cmp    eax,0x8
c000d7eb:	75 12                	jne    c000d7ff <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f0:	0f b6 c0             	movzx  eax,al
c000d7f3:	83 ec 0c             	sub    esp,0xc
c000d7f6:	50                   	push   eax
c000d7f7:	e8 ca fa ff ff       	call   c000d2c6 <sendKeyToTerminal(unsigned char)>
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d802:	83 f0 01             	xor    eax,0x1
c000d805:	0f b6 c0             	movzx  eax,al
c000d808:	85 c0                	test   eax,eax
c000d80a:	74 5d                	je     c000d869 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d80c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d80f:	83 f0 01             	xor    eax,0x1
c000d812:	0f b6 c0             	movzx  eax,al
c000d815:	85 c0                	test   eax,eax
c000d817:	74 50                	je     c000d869 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d819:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d81e:	0f b6 c0             	movzx  eax,al
c000d821:	85 c0                	test   eax,eax
c000d823:	74 44                	je     c000d869 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d828:	0f b7 c0             	movzx  eax,ax
c000d82b:	83 f8 3f             	cmp    eax,0x3f
c000d82e:	76 39                	jbe    c000d869 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d833:	0f b7 c0             	movzx  eax,ax
c000d836:	83 f8 7f             	cmp    eax,0x7f
c000d839:	77 2e                	ja     c000d869 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83e:	88 c2                	mov    dl,al
c000d840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d843:	0f b7 c0             	movzx  eax,ax
c000d846:	83 f8 5f             	cmp    eax,0x5f
c000d849:	76 04                	jbe    c000d84f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d84b:	b0 20                	mov    al,0x20
c000d84d:	eb 02                	jmp    c000d851 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d84f:	b0 00                	mov    al,0x0
c000d851:	89 d1                	mov    ecx,edx
c000d853:	29 c1                	sub    ecx,eax
c000d855:	89 c8                	mov    eax,ecx
c000d857:	83 e8 40             	sub    eax,0x40
c000d85a:	0f b6 c0             	movzx  eax,al
c000d85d:	83 ec 0c             	sub    esp,0xc
c000d860:	50                   	push   eax
c000d861:	e8 60 fa ff ff       	call   c000d2c6 <sendKeyToTerminal(unsigned char)>
c000d866:	83 c4 10             	add    esp,0x10
c000d869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d86c:	0f b7 c0             	movzx  eax,ax
c000d86f:	3d 00 03 00 00       	cmp    eax,0x300
c000d874:	75 12                	jne    c000d888 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d876:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d879:	83 f0 01             	xor    eax,0x1
c000d87c:	0f b6 c0             	movzx  eax,al
c000d87f:	85 c0                	test   eax,eax
c000d881:	74 05                	je     c000d888 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d883:	e8 9b ac ff ff       	call   c0008523 <doTerminalCycle()>
c000d888:	90                   	nop
c000d889:	c9                   	leave  
c000d88a:	c3                   	ret    

c000d88b <clearInternalKeybuffer(VgaText*)>:
c000d88b:	55                   	push   ebp
c000d88c:	89 e5                	mov    ebp,esp
c000d88e:	83 ec 08             	sub    esp,0x8
c000d891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d894:	05 02 01 00 00       	add    eax,0x102
c000d899:	83 ec 0c             	sub    esp,0xc
c000d89c:	50                   	push   eax
c000d89d:	e8 ce 2c ff ff       	call   c0000570 <strlen>
c000d8a2:	83 c4 10             	add    esp,0x10
c000d8a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8a8:	81 c2 02 01 00 00    	add    edx,0x102
c000d8ae:	83 ec 04             	sub    esp,0x4
c000d8b1:	50                   	push   eax
c000d8b2:	6a 00                	push   0x0
c000d8b4:	52                   	push   edx
c000d8b5:	e8 36 2c ff ff       	call   c00004f0 <memset>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	90                   	nop
c000d8be:	c9                   	leave  
c000d8bf:	c3                   	ret    

c000d8c0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8c0:	55                   	push   ebp
c000d8c1:	89 e5                	mov    ebp,esp
c000d8c3:	83 ec 18             	sub    esp,0x18
c000d8c6:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8cb:	85 c0                	test   eax,eax
c000d8cd:	74 2a                	je     c000d8f9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8cf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8d5:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8db:	83 ec 04             	sub    esp,0x4
c000d8de:	68 40 b4 02 c0       	push   0xc002b440
c000d8e3:	83 ec 08             	sub    esp,0x8
c000d8e6:	89 e2                	mov    edx,esp
c000d8e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8eb:	89 02                	mov    DWORD PTR [edx],eax
c000d8ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d8f0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d8f4:	ff d1                	call   ecx
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	fb                   	sti    
c000d8fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d901:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d905:	0f 84 0d 01 00 00    	je     c000da18 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d90b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d90e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d914:	0f be c0             	movsx  eax,al
c000d917:	85 c0                	test   eax,eax
c000d919:	75 2c                	jne    c000d947 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d91b:	fa                   	cli    
c000d91c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d921:	83 c0 01             	add    eax,0x1
c000d924:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d929:	e8 4e 88 00 00       	call   c001617c <schedule()>
c000d92e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d933:	83 e8 01             	sub    eax,0x1
c000d936:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d93b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d940:	85 c0                	test   eax,eax
c000d942:	75 c7                	jne    c000d90b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d944:	fb                   	sti    
c000d945:	eb c4                	jmp    c000d90b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d947:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d94a:	8d 50 01             	lea    edx,[eax+0x1]
c000d94d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d950:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d953:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d959:	88 10                	mov    BYTE PTR [eax],dl
c000d95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d95e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d964:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d967:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d96b:	83 f8 03             	cmp    eax,0x3
c000d96e:	75 1e                	jne    c000d98e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d970:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d975:	8b 00                	mov    eax,DWORD PTR [eax]
c000d977:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d97a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d980:	83 ec 08             	sub    esp,0x8
c000d983:	6a 02                	push   0x2
c000d985:	50                   	push   eax
c000d986:	e8 af 41 00 00       	call   c0011b3a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d992:	83 f8 1c             	cmp    eax,0x1c
c000d995:	75 1e                	jne    c000d9b5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d997:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d99c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d99e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9a1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9a7:	83 ec 08             	sub    esp,0x8
c000d9aa:	6a 09                	push   0x9
c000d9ac:	50                   	push   eax
c000d9ad:	e8 88 41 00 00       	call   c0011b3a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9b2:	83 c4 10             	add    esp,0x10
c000d9b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9b8:	05 02 01 00 00       	add    eax,0x102
c000d9bd:	83 ec 0c             	sub    esp,0xc
c000d9c0:	50                   	push   eax
c000d9c1:	e8 aa 2b ff ff       	call   c0000570 <strlen>
c000d9c6:	83 c4 10             	add    esp,0x10
c000d9c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9cc:	81 c2 02 01 00 00    	add    edx,0x102
c000d9d2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9d8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9de:	83 ec 04             	sub    esp,0x4
c000d9e1:	50                   	push   eax
c000d9e2:	51                   	push   ecx
c000d9e3:	52                   	push   edx
c000d9e4:	e8 e7 29 ff ff       	call   c00003d0 <memmove>
c000d9e9:	83 c4 10             	add    esp,0x10
c000d9ec:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9f0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9f4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f8:	83 f8 0a             	cmp    eax,0xa
c000d9fb:	74 16                	je     c000da13 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9fd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da01:	83 f8 03             	cmp    eax,0x3
c000da04:	74 0d                	je     c000da13 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da06:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da0a:	83 f8 1c             	cmp    eax,0x1c
c000da0d:	0f 85 ee fe ff ff    	jne    c000d901 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da16:	eb 03                	jmp    c000da1b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da1b:	c9                   	leave  
c000da1c:	c3                   	ret    
c000da1d:	90                   	nop

c000da1e <Keyboard::Keyboard(char const*)>:
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da25:	83 ec 08             	sub    esp,0x8
c000da28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2c:	50                   	push   eax
c000da2d:	e8 4c f1 ff ff       	call   c000cb7e <Device::Device(char const*)>
c000da32:	83 c4 10             	add    esp,0x10
c000da35:	ba 9c 1d 02 c0       	mov    edx,0xc0021d9c
c000da3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3e:	89 10                	mov    DWORD PTR [eax],edx
c000da40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da44:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da4e:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da55:	90                   	nop
c000da56:	83 c4 0c             	add    esp,0xc
c000da59:	c3                   	ret    

c000da5a <Keyboard::~Keyboard()>:
c000da5a:	83 ec 0c             	sub    esp,0xc
c000da5d:	ba 9c 1d 02 c0       	mov    edx,0xc0021d9c
c000da62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da66:	89 10                	mov    DWORD PTR [eax],edx
c000da68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	50                   	push   eax
c000da70:	e8 73 ee ff ff       	call   c000c8e8 <Device::~Device()>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	90                   	nop
c000da79:	83 c4 0c             	add    esp,0xc
c000da7c:	c3                   	ret    
c000da7d:	90                   	nop

c000da7e <Keyboard::~Keyboard()>:
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	83 ec 0c             	sub    esp,0xc
c000da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da88:	e8 cd ff ff ff       	call   c000da5a <Keyboard::~Keyboard()>
c000da8d:	83 c4 10             	add    esp,0x10
c000da90:	83 ec 08             	sub    esp,0x8
c000da93:	68 5c 01 00 00       	push   0x15c
c000da98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da9c:	e8 97 cd ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	83 c4 0c             	add    esp,0xc
c000daa7:	c3                   	ret    

c000daa8 <LogicalDisk::close(int, int, void*)>:
c000daa8:	83 c8 ff             	or     eax,0xffffffff
c000daab:	c3                   	ret    

c000daac <LogicalDisk::~LogicalDisk()>:
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	ba 14 1e 02 c0       	mov    edx,0xc0021e14
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	89 10                	mov    DWORD PTR [eax],edx
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	50                   	push   eax
c000dac2:	e8 21 ee ff ff       	call   c000c8e8 <Device::~Device()>
c000dac7:	83 c4 10             	add    esp,0x10
c000daca:	90                   	nop
c000dacb:	83 c4 0c             	add    esp,0xc
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <LogicalDisk::~LogicalDisk()>:
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dada:	e8 cd ff ff ff       	call   c000daac <LogicalDisk::~LogicalDisk()>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	83 ec 08             	sub    esp,0x8
c000dae5:	68 78 01 00 00       	push   0x178
c000daea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daee:	e8 45 cd ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	83 c4 0c             	add    esp,0xc
c000daf9:	c3                   	ret    

c000dafa <LogicalDisk::open(int, int, void*)>:
c000dafa:	83 ec 18             	sub    esp,0x18
c000dafd:	68 c8 1d 02 c0       	push   0xc0021dc8
c000db02:	e8 90 3b 00 00       	call   c0011697 <KePanic(char const*)>
c000db07:	83 c8 ff             	or     eax,0xffffffff
c000db0a:	83 c4 1c             	add    esp,0x1c
c000db0d:	c3                   	ret    

c000db0e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db0e:	53                   	push   ebx
c000db0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db1b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db21:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db27:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db2d:	77 10                	ja     c000db3f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db2f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db35:	89 d3                	mov    ebx,edx
c000db37:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db3d:	72 05                	jb     c000db44 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db3f:	83 c8 ff             	or     eax,0xffffffff
c000db42:	89 c2                	mov    edx,eax
c000db44:	5b                   	pop    ebx
c000db45:	c3                   	ret    

c000db46 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db46:	56                   	push   esi
c000db47:	83 c8 ff             	or     eax,0xffffffff
c000db4a:	53                   	push   ebx
c000db4b:	89 c2                	mov    edx,eax
c000db4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db51:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db59:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db5f:	77 27                	ja     c000db88 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db61:	89 d8                	mov    eax,ebx
c000db63:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db69:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db74:	89 c2                	mov    edx,eax
c000db76:	73 10                	jae    c000db88 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db78:	89 c8                	mov    eax,ecx
c000db7a:	89 da                	mov    edx,ebx
c000db7c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db82:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db88:	5b                   	pop    ebx
c000db89:	5e                   	pop    esi
c000db8a:	c3                   	ret    
c000db8b:	90                   	nop

c000db8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db8c:	83 ec 1c             	sub    esp,0x1c
c000db8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dba3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb2:	83 ec 08             	sub    esp,0x8
c000dbb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbb9:	50                   	push   eax
c000dbba:	e8 bf ef ff ff       	call   c000cb7e <Device::Device(char const*)>
c000dbbf:	83 c4 10             	add    esp,0x10
c000dbc2:	ba 14 1e 02 c0       	mov    edx,0xc0021e14
c000dbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcb:	89 10                	mov    DWORD PTR [eax],edx
c000dbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbfc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc08:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc0e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc1f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc25:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc33:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc47:	90                   	nop
c000dc48:	83 c4 1c             	add    esp,0x1c
c000dc4b:	c3                   	ret    

c000dc4c <LogicalDisk::assignDriveLetter()>:
c000dc4c:	55                   	push   ebp
c000dc4d:	57                   	push   edi
c000dc4e:	56                   	push   esi
c000dc4f:	53                   	push   ebx
c000dc50:	83 ec 14             	sub    esp,0x14
c000dc53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc57:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc5d:	b0 41                	mov    al,0x41
c000dc5f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc65:	84 d2                	test   dl,dl
c000dc67:	75 02                	jne    c000dc6b <LogicalDisk::assignDriveLetter()+0x1f>
c000dc69:	b0 43                	mov    al,0x43
c000dc6b:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc71:	0f b6 ca             	movzx  ecx,dl
c000dc74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc78:	0f be e8             	movsx  ebp,al
c000dc7b:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc81:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc85:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc89:	3c 43                	cmp    al,0x43
c000dc8b:	75 10                	jne    c000dc9d <LogicalDisk::assignDriveLetter()+0x51>
c000dc8d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc94:	75 5a                	jne    c000dcf0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc96:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc9b:	75 53                	jne    c000dcf0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc9d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dca0:	ba 01 00 00 00       	mov    edx,0x1
c000dca5:	89 34 24             	mov    DWORD PTR [esp],esi
c000dca8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcab:	d3 e2                	shl    edx,cl
c000dcad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcb1:	89 d7                	mov    edi,edx
c000dcb3:	89 d6                	mov    esi,edx
c000dcb5:	c1 ff 1f             	sar    edi,0x1f
c000dcb8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcbc:	21 f9                	and    ecx,edi
c000dcbe:	09 d1                	or     ecx,edx
c000dcc0:	75 2e                	jne    c000dcf0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcc2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcca:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcd0:	09 f2                	or     edx,esi
c000dcd2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcd5:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcdb:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dce2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dce6:	09 fa                	or     edx,edi
c000dce8:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcee:	eb 0d                	jmp    c000dcfd <LogicalDisk::assignDriveLetter()+0xb1>
c000dcf0:	8d 50 01             	lea    edx,[eax+0x1]
c000dcf3:	45                   	inc    ebp
c000dcf4:	88 d0                	mov    al,dl
c000dcf6:	80 fa 5b             	cmp    dl,0x5b
c000dcf9:	75 8e                	jne    c000dc89 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcfb:	31 c0                	xor    eax,eax
c000dcfd:	83 c4 14             	add    esp,0x14
c000dd00:	5b                   	pop    ebx
c000dd01:	5e                   	pop    esi
c000dd02:	5f                   	pop    edi
c000dd03:	5d                   	pop    ebp
c000dd04:	c3                   	ret    
c000dd05:	90                   	nop

c000dd06 <LogicalDisk::mount()>:
c000dd06:	56                   	push   esi
c000dd07:	53                   	push   ebx
c000dd08:	53                   	push   ebx
c000dd09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd0d:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd13:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd1d:	85 db                	test   ebx,ebx
c000dd1f:	74 27                	je     c000dd48 <LogicalDisk::mount()+0x42>
c000dd21:	51                   	push   ecx
c000dd22:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd29:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd2b:	83 e8 41             	sub    eax,0x41
c000dd2e:	50                   	push   eax
c000dd2f:	56                   	push   esi
c000dd30:	53                   	push   ebx
c000dd31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd34:	83 c4 10             	add    esp,0x10
c000dd37:	84 c0                	test   al,al
c000dd39:	74 08                	je     c000dd43 <LogicalDisk::mount()+0x3d>
c000dd3b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd41:	eb 07                	jmp    c000dd4a <LogicalDisk::mount()+0x44>
c000dd43:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd46:	eb d5                	jmp    c000dd1d <LogicalDisk::mount()+0x17>
c000dd48:	31 c0                	xor    eax,eax
c000dd4a:	5a                   	pop    edx
c000dd4b:	5b                   	pop    ebx
c000dd4c:	5e                   	pop    esi
c000dd4d:	c3                   	ret    

c000dd4e <LogicalDisk::unmount()>:
c000dd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd52:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <LogicalDisk::eject()>:
c000dd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd68:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd6e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd71:	90                   	nop

c000dd72 <LogicalDisk::unassignDriveLetter()>:
c000dd72:	57                   	push   edi
c000dd73:	56                   	push   esi
c000dd74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd78:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd7f:	85 c9                	test   ecx,ecx
c000dd81:	75 0f                	jne    c000dd92 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd83:	c7 44 24 0c ec 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dec
c000dd8b:	5e                   	pop    esi
c000dd8c:	5f                   	pop    edi
c000dd8d:	e9 05 39 00 00       	jmp    c0011697 <KePanic(char const*)>
c000dd92:	83 e9 41             	sub    ecx,0x41
c000dd95:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd9c:	b8 01 00 00 00       	mov    eax,0x1
c000dda1:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddac:	d3 e0                	shl    eax,cl
c000ddae:	89 c7                	mov    edi,eax
c000ddb0:	f7 d0                	not    eax
c000ddb2:	c1 ff 1f             	sar    edi,0x1f
c000ddb5:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddbb:	89 fe                	mov    esi,edi
c000ddbd:	f7 d6                	not    esi
c000ddbf:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddc5:	5e                   	pop    esi
c000ddc6:	5f                   	pop    edi
c000ddc7:	c3                   	ret    

c000ddc8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddc8:	57                   	push   edi
c000ddc9:	56                   	push   esi
c000ddca:	53                   	push   ebx
c000ddcb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddd3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dddb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dde1:	77 41                	ja     c000de24 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dde3:	99                   	cdq    
c000dde4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddea:	01 c8                	add    eax,ecx
c000ddec:	11 da                	adc    edx,ebx
c000ddee:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddf4:	19 d7                	sbb    edi,edx
c000ddf6:	72 33                	jb     c000de2b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddf8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddfe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de08:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de0c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de1c:	5b                   	pop    ebx
c000de1d:	5e                   	pop    esi
c000de1e:	5f                   	pop    edi
c000de1f:	e9 c6 0a 00 00       	jmp    c000e8ea <VCache::read(unsigned long long, int, void*)>
c000de24:	b8 05 00 00 00       	mov    eax,0x5
c000de29:	eb 05                	jmp    c000de30 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de2b:	b8 07 00 00 00       	mov    eax,0x7
c000de30:	5b                   	pop    ebx
c000de31:	5e                   	pop    esi
c000de32:	5f                   	pop    edi
c000de33:	c3                   	ret    

c000de34 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de34:	57                   	push   edi
c000de35:	56                   	push   esi
c000de36:	53                   	push   ebx
c000de37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de47:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de4d:	77 41                	ja     c000de90 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de4f:	99                   	cdq    
c000de50:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de56:	01 c8                	add    eax,ecx
c000de58:	11 da                	adc    edx,ebx
c000de5a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de60:	19 d7                	sbb    edi,edx
c000de62:	72 33                	jb     c000de97 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de64:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de6a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de74:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de78:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de88:	5b                   	pop    ebx
c000de89:	5e                   	pop    esi
c000de8a:	5f                   	pop    edi
c000de8b:	e9 6c 09 00 00       	jmp    c000e7fc <VCache::write(unsigned long long, int, void*)>
c000de90:	b8 05 00 00 00       	mov    eax,0x5
c000de95:	eb 05                	jmp    c000de9c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de97:	b8 07 00 00 00       	mov    eax,0x7
c000de9c:	5b                   	pop    ebx
c000de9d:	5e                   	pop    esi
c000de9e:	5f                   	pop    edi
c000de9f:	c3                   	ret    

c000dea0 <Mouse::Mouse(char const*)>:
c000dea0:	83 ec 0c             	sub    esp,0xc
c000dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea7:	83 ec 08             	sub    esp,0x8
c000deaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deae:	50                   	push   eax
c000deaf:	e8 ca ec ff ff       	call   c000cb7e <Device::Device(char const*)>
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ded0:	90                   	nop
c000ded1:	83 c4 0c             	add    esp,0xc
c000ded4:	c3                   	ret    
c000ded5:	90                   	nop
c000ded6:	66 90                	xchg   ax,ax

c000ded8 <Mouse::~Mouse()>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000dee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deea:	83 ec 0c             	sub    esp,0xc
c000deed:	50                   	push   eax
c000deee:	e8 f5 e9 ff ff       	call   c000c8e8 <Device::~Device()>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	90                   	nop
c000def7:	83 c4 0c             	add    esp,0xc
c000defa:	c3                   	ret    
c000defb:	90                   	nop

c000defc <Mouse::~Mouse()>:
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	83 ec 0c             	sub    esp,0xc
c000df02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df06:	e8 cd ff ff ff       	call   c000ded8 <Mouse::~Mouse()>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	83 ec 08             	sub    esp,0x8
c000df11:	68 58 01 00 00       	push   0x158
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 19 c9 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 c4 0c             	add    esp,0xc
c000df25:	c3                   	ret    

c000df26 <NIC::getMAC()>:
c000df26:	31 c0                	xor    eax,eax
c000df28:	31 d2                	xor    edx,edx
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <NIC::write(int, unsigned char*, int*)>:
c000df2c:	b8 01 00 00 00       	mov    eax,0x1
c000df31:	c3                   	ret    

c000df32 <NIC::NIC(char const*)>:
c000df32:	83 ec 0c             	sub    esp,0xc
c000df35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df39:	83 ec 08             	sub    esp,0x8
c000df3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df40:	50                   	push   eax
c000df41:	e8 38 ec ff ff       	call   c000cb7e <Device::Device(char const*)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	89 10                	mov    DWORD PTR [eax],edx
c000df54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df58:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df62:	90                   	nop
c000df63:	83 c4 0c             	add    esp,0xc
c000df66:	c3                   	ret    
c000df67:	90                   	nop

c000df68 <NIC::~NIC()>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df74:	89 10                	mov    DWORD PTR [eax],edx
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	50                   	push   eax
c000df7e:	e8 65 e9 ff ff       	call   c000c8e8 <Device::~Device()>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	90                   	nop
c000df87:	83 c4 0c             	add    esp,0xc
c000df8a:	c3                   	ret    
c000df8b:	90                   	nop

c000df8c <NIC::~NIC()>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	e8 cd ff ff ff       	call   c000df68 <NIC::~NIC()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	83 ec 08             	sub    esp,0x8
c000dfa1:	68 58 01 00 00       	push   0x158
c000dfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfaa:	e8 89 c8 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	83 c4 0c             	add    esp,0xc
c000dfb5:	c3                   	ret    

c000dfb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfb6:	55                   	push   ebp
c000dfb7:	57                   	push   edi
c000dfb8:	56                   	push   esi
c000dfb9:	53                   	push   ebx
c000dfba:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfc0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfc7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfd5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfe0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfe4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfeb:	e8 8a ec ff ff       	call   c000cc7a <Device::getName()>
c000dff0:	5a                   	pop    edx
c000dff1:	59                   	pop    ecx
c000dff2:	50                   	push   eax
c000dff3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dff7:	55                   	push   ebp
c000dff8:	e8 43 26 ff ff       	call   c0000640 <strcpy>
c000dffd:	5b                   	pop    ebx
c000dffe:	58                   	pop    eax
c000dfff:	68 98 1e 02 c0       	push   0xc0021e98
c000e004:	55                   	push   ebp
c000e005:	e8 36 28 ff ff       	call   c0000840 <strcat>
c000e00a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e011:	e8 c0 9a ff ff       	call   c0007ad6 <malloc>
c000e016:	83 c4 0c             	add    esp,0xc
c000e019:	89 c3                	mov    ebx,eax
c000e01b:	57                   	push   edi
c000e01c:	56                   	push   esi
c000e01d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e021:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e025:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e02c:	55                   	push   ebp
c000e02d:	50                   	push   eax
c000e02e:	e8 59 fb ff ff       	call   c000db8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e033:	83 c4 14             	add    esp,0x14
c000e036:	53                   	push   ebx
c000e037:	e8 10 fc ff ff       	call   c000dc4c <LogicalDisk::assignDriveLetter()>
c000e03c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e03f:	e8 c2 fc ff ff       	call   c000dd06 <LogicalDisk::mount()>
c000e044:	58                   	pop    eax
c000e045:	5a                   	pop    edx
c000e046:	53                   	push   ebx
c000e047:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e04e:	e8 93 e9 ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c000e053:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e059:	5b                   	pop    ebx
c000e05a:	5e                   	pop    esi
c000e05b:	5f                   	pop    edi
c000e05c:	5d                   	pop    ebp
c000e05d:	c3                   	ret    

c000e05e <createPartitionsForDisk(PhysicalDisk*)>:
c000e05e:	55                   	push   ebp
c000e05f:	57                   	push   edi
c000e060:	56                   	push   esi
c000e061:	53                   	push   ebx
c000e062:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e068:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e06f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e075:	3d 00 02 00 00       	cmp    eax,0x200
c000e07a:	74 27                	je     c000e0a3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e07c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e082:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e088:	83 ec 10             	sub    esp,0x10
c000e08b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e08f:	99                   	cdq    
c000e090:	c1 e6 0a             	shl    esi,0xa
c000e093:	52                   	push   edx
c000e094:	89 fd                	mov    ebp,edi
c000e096:	50                   	push   eax
c000e097:	55                   	push   ebp
c000e098:	56                   	push   esi
c000e099:	e8 52 17 01 00       	call   c001f7f0 <__udivdi3>
c000e09e:	e9 b9 00 00 00       	jmp    c000e15c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0a8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0ac:	56                   	push   esi
c000e0ad:	6a 01                	push   0x1
c000e0af:	6a 00                	push   0x0
c000e0b1:	6a 00                	push   0x0
c000e0b3:	53                   	push   ebx
c000e0b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0b7:	83 c4 20             	add    esp,0x20
c000e0ba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0c2:	75 0a                	jne    c000e0ce <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0c4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0cc:	74 2c                	je     c000e0fa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0e0:	83 ec 10             	sub    esp,0x10
c000e0e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0e7:	89 f7                	mov    edi,esi
c000e0e9:	c1 e0 0a             	shl    eax,0xa
c000e0ec:	c1 ff 1f             	sar    edi,0x1f
c000e0ef:	57                   	push   edi
c000e0f0:	56                   	push   esi
c000e0f1:	52                   	push   edx
c000e0f2:	50                   	push   eax
c000e0f3:	e8 f8 16 01 00       	call   c001f7f0 <__udivdi3>
c000e0f8:	eb 62                	jmp    c000e15c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0fa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e101:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e108:	89 cf                	mov    edi,ecx
c000e10a:	83 e2 7f             	and    edx,0x7f
c000e10d:	83 e7 7f             	and    edi,0x7f
c000e110:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e117:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e11a:	83 e0 7f             	and    eax,0x7f
c000e11d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e120:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e127:	83 e0 7f             	and    eax,0x7f
c000e12a:	01 d0                	add    eax,edx
c000e12c:	89 c5                	mov    ebp,eax
c000e12e:	84 c0                	test   al,al
c000e130:	74 41                	je     c000e173 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e132:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e138:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e13e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e144:	83 ec 10             	sub    esp,0x10
c000e147:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e14b:	89 f7                	mov    edi,esi
c000e14d:	c1 e0 0a             	shl    eax,0xa
c000e150:	c1 ff 1f             	sar    edi,0x1f
c000e153:	57                   	push   edi
c000e154:	56                   	push   esi
c000e155:	52                   	push   edx
c000e156:	50                   	push   eax
c000e157:	e8 94 16 01 00       	call   c001f7f0 <__udivdi3>
c000e15c:	83 c4 14             	add    esp,0x14
c000e15f:	52                   	push   edx
c000e160:	50                   	push   eax
c000e161:	6a 00                	push   0x0
c000e163:	6a 00                	push   0x0
c000e165:	53                   	push   ebx
c000e166:	e8 4b fe ff ff       	call   c000dfb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e16b:	83 c4 20             	add    esp,0x20
c000e16e:	e9 73 01 00 00       	jmp    c000e2e6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e173:	89 f0                	mov    eax,esi
c000e175:	31 c9                	xor    ecx,ecx
c000e177:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e17e:	75 02                	jne    c000e182 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e180:	89 cd                	mov    ebp,ecx
c000e182:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e189:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e190:	c1 e2 08             	shl    edx,0x8
c000e193:	c1 e6 10             	shl    esi,0x10
c000e196:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e19e:	09 f2                	or     edx,esi
c000e1a0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1a8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1af:	83 c0 10             	add    eax,0x10
c000e1b2:	09 f2                	or     edx,esi
c000e1b4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1bb:	c1 e6 18             	shl    esi,0x18
c000e1be:	09 f2                	or     edx,esi
c000e1c0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1c7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1cb:	c1 e6 10             	shl    esi,0x10
c000e1ce:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1d5:	c1 e2 08             	shl    edx,0x8
c000e1d8:	09 f2                	or     edx,esi
c000e1da:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1e1:	09 f2                	or     edx,esi
c000e1e3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1ea:	c1 e6 18             	shl    esi,0x18
c000e1ed:	09 f2                	or     edx,esi
c000e1ef:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1f3:	41                   	inc    ecx
c000e1f4:	83 f9 04             	cmp    ecx,0x4
c000e1f7:	0f 85 7a ff ff ff    	jne    c000e177 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e201:	83 f0 01             	xor    eax,0x1
c000e204:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e208:	75 4f                	jne    c000e259 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e20a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e20e:	83 f0 01             	xor    eax,0x1
c000e211:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e215:	75 42                	jne    c000e259 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e217:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e21f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e227:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e22d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e233:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e239:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e23d:	89 f7                	mov    edi,esi
c000e23f:	c1 e0 0a             	shl    eax,0xa
c000e242:	c1 ff 1f             	sar    edi,0x1f
c000e245:	57                   	push   edi
c000e246:	56                   	push   esi
c000e247:	52                   	push   edx
c000e248:	50                   	push   eax
c000e249:	e8 a2 15 01 00       	call   c001f7f0 <__udivdi3>
c000e24e:	83 c4 10             	add    esp,0x10
c000e251:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e255:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e259:	89 e8                	mov    eax,ebp
c000e25b:	0f b6 e8             	movzx  ebp,al
c000e25e:	85 ed                	test   ebp,ebp
c000e260:	74 50                	je     c000e2b2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e266:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e26a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e26e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e272:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e276:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e27a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e27e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e28e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e292:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e296:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e29a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e29e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2a2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2a6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2aa:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2ae:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2b2:	31 ed                	xor    ebp,ebp
c000e2b4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2b8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2bc:	89 f8                	mov    eax,edi
c000e2be:	09 f0                	or     eax,esi
c000e2c0:	74 1e                	je     c000e2e0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2c2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2c6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ca:	89 d1                	mov    ecx,edx
c000e2cc:	09 c1                	or     ecx,eax
c000e2ce:	74 10                	je     c000e2e0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	57                   	push   edi
c000e2d4:	56                   	push   esi
c000e2d5:	52                   	push   edx
c000e2d6:	50                   	push   eax
c000e2d7:	53                   	push   ebx
c000e2d8:	e8 d9 fc ff ff       	call   c000dfb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2dd:	83 c4 20             	add    esp,0x20
c000e2e0:	45                   	inc    ebp
c000e2e1:	83 fd 04             	cmp    ebp,0x4
c000e2e4:	75 ce                	jne    c000e2b4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2e6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2ec:	5b                   	pop    ebx
c000e2ed:	5e                   	pop    esi
c000e2ee:	5f                   	pop    edi
c000e2ef:	5d                   	pop    ebp
c000e2f0:	c3                   	ret    
c000e2f1:	66 90                	xchg   ax,ax
c000e2f3:	90                   	nop

c000e2f4 <Serial::Serial(char const*)>:
c000e2f4:	83 ec 0c             	sub    esp,0xc
c000e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fb:	83 ec 08             	sub    esp,0x8
c000e2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e302:	50                   	push   eax
c000e303:	e8 76 e8 ff ff       	call   c000cb7e <Device::Device(char const*)>
c000e308:	83 c4 10             	add    esp,0x10
c000e30b:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c000e310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e314:	89 10                	mov    DWORD PTR [eax],edx
c000e316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e324:	90                   	nop
c000e325:	83 c4 0c             	add    esp,0xc
c000e328:	c3                   	ret    
c000e329:	90                   	nop
c000e32a:	66 90                	xchg   ax,ax

c000e32c <Serial::~Serial()>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c000e334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e338:	89 10                	mov    DWORD PTR [eax],edx
c000e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	50                   	push   eax
c000e342:	e8 a1 e5 ff ff       	call   c000c8e8 <Device::~Device()>
c000e347:	83 c4 10             	add    esp,0x10
c000e34a:	90                   	nop
c000e34b:	83 c4 0c             	add    esp,0xc
c000e34e:	c3                   	ret    
c000e34f:	90                   	nop

c000e350 <Serial::~Serial()>:
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	83 ec 0c             	sub    esp,0xc
c000e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35a:	e8 cd ff ff ff       	call   c000e32c <Serial::~Serial()>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	83 ec 08             	sub    esp,0x8
c000e365:	68 58 01 00 00       	push   0x158
c000e36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36e:	e8 c5 c4 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	83 c4 0c             	add    esp,0xc
c000e379:	c3                   	ret    
c000e37a:	66 90                	xchg   ax,ax

c000e37c <Timer::Timer(char const*)>:
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e383:	83 ec 08             	sub    esp,0x8
c000e386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e38a:	50                   	push   eax
c000e38b:	e8 ee e7 ff ff       	call   c000cb7e <Device::Device(char const*)>
c000e390:	83 c4 10             	add    esp,0x10
c000e393:	ba f0 1e 02 c0       	mov    edx,0xc0021ef0
c000e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39c:	89 10                	mov    DWORD PTR [eax],edx
c000e39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3ac:	90                   	nop
c000e3ad:	83 c4 0c             	add    esp,0xc
c000e3b0:	c3                   	ret    
c000e3b1:	90                   	nop
c000e3b2:	66 90                	xchg   ax,ax

c000e3b4 <Timer::~Timer()>:
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	ba f0 1e 02 c0       	mov    edx,0xc0021ef0
c000e3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c0:	89 10                	mov    DWORD PTR [eax],edx
c000e3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c6:	83 ec 0c             	sub    esp,0xc
c000e3c9:	50                   	push   eax
c000e3ca:	e8 19 e5 ff ff       	call   c000c8e8 <Device::~Device()>
c000e3cf:	83 c4 10             	add    esp,0x10
c000e3d2:	90                   	nop
c000e3d3:	83 c4 0c             	add    esp,0xc
c000e3d6:	c3                   	ret    
c000e3d7:	90                   	nop

c000e3d8 <Timer::~Timer()>:
c000e3d8:	83 ec 0c             	sub    esp,0xc
c000e3db:	83 ec 0c             	sub    esp,0xc
c000e3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3e2:	e8 cd ff ff ff       	call   c000e3b4 <Timer::~Timer()>
c000e3e7:	83 c4 10             	add    esp,0x10
c000e3ea:	83 ec 08             	sub    esp,0x8
c000e3ed:	68 5c 01 00 00       	push   0x15c
c000e3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f6:	e8 3d c4 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	83 c4 0c             	add    esp,0xc
c000e401:	c3                   	ret    

c000e402 <Timer::read()>:
c000e402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e406:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e40c:	c3                   	ret    

c000e40d <setupTimer(int)>:
c000e40d:	53                   	push   ebx
c000e40e:	83 ec 14             	sub    esp,0x14
c000e411:	68 5c 01 00 00       	push   0x15c
c000e416:	e8 bb 96 ff ff       	call   c0007ad6 <malloc>
c000e41b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e41e:	89 c3                	mov    ebx,eax
c000e420:	e8 33 0c 01 00       	call   c001f058 <PIT::PIT()>
c000e425:	58                   	pop    eax
c000e426:	5a                   	pop    edx
c000e427:	53                   	push   ebx
c000e428:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e42e:	e8 b3 e5 ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c000e433:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e435:	6a 00                	push   0x0
c000e437:	6a 00                	push   0x0
c000e439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e43d:	53                   	push   ebx
c000e43e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e441:	89 d8                	mov    eax,ebx
c000e443:	83 c4 28             	add    esp,0x28
c000e446:	5b                   	pop    ebx
c000e447:	c3                   	ret    

c000e448 <timerHandler(unsigned int)>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	51                   	push   ecx
c000e44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e44f:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e455:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e45c:	0f 84 4a 01 00 00    	je     c000e5ac <timerHandler(unsigned int)+0x164>
c000e462:	fa                   	cli    
c000e463:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e472:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e477:	e8 44 19 01 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	84 c0                	test   al,al
c000e481:	0f 85 a1 00 00 00    	jne    c000e528 <timerHandler(unsigned int)+0xe0>
c000e487:	83 ec 0c             	sub    esp,0xc
c000e48a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e48f:	e8 48 19 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e494:	83 c4 10             	add    esp,0x10
c000e497:	89 c6                	mov    esi,eax
c000e499:	8d 76 00             	lea    esi,[esi+0x0]
c000e49c:	83 ec 0c             	sub    esp,0xc
c000e49f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a4:	e8 33 19 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a9:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4b0:	89 c3                	mov    ebx,eax
c000e4b2:	e8 2d 19 01 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4ba:	83 c4 10             	add    esp,0x10
c000e4bd:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4c3:	77 23                	ja     c000e4e8 <timerHandler(unsigned int)+0xa0>
c000e4c5:	83 ec 0c             	sub    esp,0xc
c000e4c8:	53                   	push   ebx
c000e4c9:	e8 c6 81 00 00       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c000e4ce:	83 c4 10             	add    esp,0x10
c000e4d1:	39 de                	cmp    esi,ebx
c000e4d3:	75 27                	jne    c000e4fc <timerHandler(unsigned int)+0xb4>
c000e4d5:	83 ec 0c             	sub    esp,0xc
c000e4d8:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4dd:	e8 fa 18 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e2:	89 c6                	mov    esi,eax
c000e4e4:	eb 12                	jmp    c000e4f8 <timerHandler(unsigned int)+0xb0>
c000e4e6:	66 90                	xchg   ax,ax
c000e4e8:	52                   	push   edx
c000e4e9:	52                   	push   edx
c000e4ea:	53                   	push   ebx
c000e4eb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f0:	e8 ab 19 01 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f8:	83 c4 10             	add    esp,0x10
c000e4fb:	90                   	nop
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e504:	e8 b7 18 01 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	84 c0                	test   al,al
c000e50e:	75 18                	jne    c000e528 <timerHandler(unsigned int)+0xe0>
c000e510:	83 ec 0c             	sub    esp,0xc
c000e513:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e518:	e8 bf 18 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e51d:	83 c4 10             	add    esp,0x10
c000e520:	39 f0                	cmp    eax,esi
c000e522:	0f 85 74 ff ff ff    	jne    c000e49c <timerHandler(unsigned int)+0x54>
c000e528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e52d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e531:	74 41                	je     c000e574 <timerHandler(unsigned int)+0x12c>
c000e533:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e53a:	74 38                	je     c000e574 <timerHandler(unsigned int)+0x12c>
c000e53c:	fa                   	cli    
c000e53d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e543:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e548:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e54e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e551:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e557:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e55a:	72 08                	jb     c000e564 <timerHandler(unsigned int)+0x11c>
c000e55c:	e8 1b 7c 00 00       	call   c001617c <schedule()>
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e569:	48                   	dec    eax
c000e56a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e56f:	75 03                	jne    c000e574 <timerHandler(unsigned int)+0x12c>
c000e571:	fb                   	sti    
c000e572:	66 90                	xchg   ax,ax
c000e574:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e579:	48                   	dec    eax
c000e57a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e57f:	75 1b                	jne    c000e59c <timerHandler(unsigned int)+0x154>
c000e581:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e588:	74 12                	je     c000e59c <timerHandler(unsigned int)+0x154>
c000e58a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e594:	e8 e3 7b 00 00       	call   c001617c <schedule()>
c000e599:	8d 76 00             	lea    esi,[esi+0x0]
c000e59c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5a1:	48                   	dec    eax
c000e5a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5a7:	75 03                	jne    c000e5ac <timerHandler(unsigned int)+0x164>
c000e5a9:	fb                   	sti    
c000e5aa:	66 90                	xchg   ax,ax
c000e5ac:	58                   	pop    eax
c000e5ad:	5b                   	pop    ebx
c000e5ae:	5e                   	pop    esi
c000e5af:	c3                   	ret    

c000e5b0 <VCache::VCache(PhysicalDisk*)>:
c000e5b0:	53                   	push   ebx
c000e5b1:	83 ec 18             	sub    esp,0x18
c000e5b4:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c000e5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5bd:	89 10                	mov    DWORD PTR [eax],edx
c000e5bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ce:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5f2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e608:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e60c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e610:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e617:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e61e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e622:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e632:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e641:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e649:	83 ec 0c             	sub    esp,0xc
c000e64c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e650:	e8 81 94 ff ff       	call   c0007ad6 <malloc>
c000e655:	83 c4 10             	add    esp,0x10
c000e658:	89 c3                	mov    ebx,eax
c000e65a:	83 ec 0c             	sub    esp,0xc
c000e65d:	53                   	push   ebx
c000e65e:	e8 b5 78 00 00       	call   c0015f18 <Mutex::Mutex()>
c000e663:	83 c4 10             	add    esp,0x10
c000e666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e671:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e675:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e683:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e687:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e691:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e694:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e698:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e69e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6a8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6ab:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6c0:	05 00 02 00 00       	add    eax,0x200
c000e6c5:	c1 e0 03             	shl    eax,0x3
c000e6c8:	83 ec 0c             	sub    esp,0xc
c000e6cb:	50                   	push   eax
c000e6cc:	e8 05 94 ff ff       	call   c0007ad6 <malloc>
c000e6d1:	83 c4 10             	add    esp,0x10
c000e6d4:	89 c2                	mov    edx,eax
c000e6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6f4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6fa:	89 d0                	mov    eax,edx
c000e6fc:	c1 e0 02             	shl    eax,0x2
c000e6ff:	01 d0                	add    eax,edx
c000e701:	c1 e0 04             	shl    eax,0x4
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	50                   	push   eax
c000e708:	e8 c9 93 ff ff       	call   c0007ad6 <malloc>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	89 c2                	mov    edx,eax
c000e712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e716:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e719:	90                   	nop
c000e71a:	83 c4 18             	add    esp,0x18
c000e71d:	5b                   	pop    ebx
c000e71e:	c3                   	ret    
c000e71f:	90                   	nop

c000e720 <VCache::invalidateReadBuffer()>:
c000e720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e724:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e72a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e72e:	c3                   	ret    
c000e72f:	90                   	nop

c000e730 <VCache::writeWriteBuffer()>:
c000e730:	53                   	push   ebx
c000e731:	83 ec 08             	sub    esp,0x8
c000e734:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e738:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e73c:	74 1e                	je     c000e75c <VCache::writeWriteBuffer()+0x2c>
c000e73e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e741:	83 ec 0c             	sub    esp,0xc
c000e744:	8b 10                	mov    edx,DWORD PTR [eax]
c000e746:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e749:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e74c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e74f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e752:	50                   	push   eax
c000e753:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e756:	83 c4 20             	add    esp,0x20
c000e759:	8d 76 00             	lea    esi,[esi+0x0]
c000e75c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e763:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e76a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e76e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e775:	83 c4 08             	add    esp,0x8
c000e778:	5b                   	pop    ebx
c000e779:	c3                   	ret    
c000e77a:	66 90                	xchg   ax,ax

c000e77c <VCache::~VCache()>:
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c000e784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e788:	89 10                	mov    DWORD PTR [eax],edx
c000e78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e791:	0f b6 c0             	movzx  eax,al
c000e794:	85 c0                	test   eax,eax
c000e796:	74 10                	je     c000e7a8 <VCache::~VCache()+0x2c>
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e79f:	e8 8c ff ff ff       	call   c000e730 <VCache::writeWriteBuffer()>
c000e7a4:	83 c4 10             	add    esp,0x10
c000e7a7:	90                   	nop
c000e7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	50                   	push   eax
c000e7b3:	e8 2e 93 ff ff       	call   c0007ae6 <free>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7c2:	83 ec 0c             	sub    esp,0xc
c000e7c5:	50                   	push   eax
c000e7c6:	e8 1b 93 ff ff       	call   c0007ae6 <free>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	90                   	nop
c000e7cf:	83 c4 0c             	add    esp,0xc
c000e7d2:	c3                   	ret    
c000e7d3:	90                   	nop

c000e7d4 <VCache::~VCache()>:
c000e7d4:	83 ec 0c             	sub    esp,0xc
c000e7d7:	83 ec 0c             	sub    esp,0xc
c000e7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7de:	e8 99 ff ff ff       	call   c000e77c <VCache::~VCache()>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	83 ec 08             	sub    esp,0x8
c000e7e9:	6a 44                	push   0x44
c000e7eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ef:	e8 44 c0 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000e7f4:	83 c4 10             	add    esp,0x10
c000e7f7:	83 c4 0c             	add    esp,0xc
c000e7fa:	c3                   	ret    
c000e7fb:	90                   	nop

c000e7fc <VCache::write(unsigned long long, int, void*)>:
c000e7fc:	55                   	push   ebp
c000e7fd:	57                   	push   edi
c000e7fe:	56                   	push   esi
c000e7ff:	53                   	push   ebx
c000e800:	83 ec 1c             	sub    esp,0x1c
c000e803:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e807:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e80b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e813:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e817:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e81b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e81f:	74 07                	je     c000e828 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e821:	53                   	push   ebx
c000e822:	e8 f9 fe ff ff       	call   c000e720 <VCache::invalidateReadBuffer()>
c000e827:	58                   	pop    eax
c000e828:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e82c:	74 62                	je     c000e890 <VCache::write(unsigned long long, int, void*)+0x94>
c000e82e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e831:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e835:	99                   	cdq    
c000e836:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e83a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e83d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e840:	31 c1                	xor    ecx,eax
c000e842:	89 d0                	mov    eax,edx
c000e844:	89 ca                	mov    edx,ecx
c000e846:	31 e8                	xor    eax,ebp
c000e848:	09 c2                	or     edx,eax
c000e84a:	75 38                	jne    c000e884 <VCache::write(unsigned long long, int, void*)+0x88>
c000e84c:	83 ff 01             	cmp    edi,0x1
c000e84f:	75 33                	jne    c000e884 <VCache::write(unsigned long long, int, void*)+0x88>
c000e851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e854:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e858:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e85e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e861:	0f af c8             	imul   ecx,eax
c000e864:	01 cf                	add    edi,ecx
c000e866:	89 c1                	mov    ecx,eax
c000e868:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e86a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e86d:	40                   	inc    eax
c000e86e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e871:	83 f8 50             	cmp    eax,0x50
c000e874:	75 6a                	jne    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	53                   	push   ebx
c000e87a:	e8 b1 fe ff ff       	call   c000e730 <VCache::writeWriteBuffer()>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	eb 5c                	jmp    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e884:	83 ec 0c             	sub    esp,0xc
c000e887:	53                   	push   ebx
c000e888:	e8 a3 fe ff ff       	call   c000e730 <VCache::writeWriteBuffer()>
c000e88d:	83 c4 10             	add    esp,0x10
c000e890:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e893:	83 ff 4f             	cmp    edi,0x4f
c000e896:	7f 20                	jg     c000e8b8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e898:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e89b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e89f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8a2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8a5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8a9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8ac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b4:	eb 2a                	jmp    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8b6:	66 90                	xchg   ax,ax
c000e8b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8be:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8c2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8c6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8ca:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8d2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8d5:	83 c4 1c             	add    esp,0x1c
c000e8d8:	5b                   	pop    ebx
c000e8d9:	5e                   	pop    esi
c000e8da:	5f                   	pop    edi
c000e8db:	5d                   	pop    ebp
c000e8dc:	ff e0                	jmp    eax
c000e8de:	66 90                	xchg   ax,ax
c000e8e0:	83 c4 1c             	add    esp,0x1c
c000e8e3:	31 c0                	xor    eax,eax
c000e8e5:	5b                   	pop    ebx
c000e8e6:	5e                   	pop    esi
c000e8e7:	5f                   	pop    edi
c000e8e8:	5d                   	pop    ebp
c000e8e9:	c3                   	ret    

c000e8ea <VCache::read(unsigned long long, int, void*)>:
c000e8ea:	55                   	push   ebp
c000e8eb:	57                   	push   edi
c000e8ec:	56                   	push   esi
c000e8ed:	53                   	push   ebx
c000e8ee:	83 ec 1c             	sub    esp,0x1c
c000e8f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e901:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e905:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e909:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e90d:	74 0d                	je     c000e91c <VCache::read(unsigned long long, int, void*)+0x32>
c000e90f:	83 ec 0c             	sub    esp,0xc
c000e912:	57                   	push   edi
c000e913:	e8 18 fe ff ff       	call   c000e730 <VCache::writeWriteBuffer()>
c000e918:	83 c4 10             	add    esp,0x10
c000e91b:	90                   	nop
c000e91c:	83 fd 01             	cmp    ebp,0x1
c000e91f:	0f 85 93 00 00 00    	jne    c000e9b8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e925:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e928:	89 04 24             	mov    DWORD PTR [esp],eax
c000e92b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e932:	0f 85 80 00 00 00    	jne    c000e9b8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e938:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e93b:	89 e9                	mov    ecx,ebp
c000e93d:	f7 d9                	neg    ecx
c000e93f:	89 c8                	mov    eax,ecx
c000e941:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e945:	c1 f8 1f             	sar    eax,0x1f
c000e948:	21 d9                	and    ecx,ebx
c000e94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94e:	89 c8                	mov    eax,ecx
c000e950:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e954:	21 f1                	and    ecx,esi
c000e956:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e95a:	89 ca                	mov    edx,ecx
c000e95c:	74 2e                	je     c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e95e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e961:	75 29                	jne    c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e963:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e966:	75 24                	jne    c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e968:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e96b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e971:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e974:	8d 70 ff             	lea    esi,[eax-0x1]
c000e977:	21 f3                	and    ebx,esi
c000e979:	0f af d9             	imul   ebx,ecx
c000e97c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e97f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e983:	89 de                	mov    esi,ebx
c000e985:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e987:	31 c0                	xor    eax,eax
c000e989:	eb 61                	jmp    c000e9ec <VCache::read(unsigned long long, int, void*)+0x102>
c000e98b:	90                   	nop
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e993:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e997:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e99a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e99d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e99f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9a2:	55                   	push   ebp
c000e9a3:	52                   	push   edx
c000e9a4:	50                   	push   eax
c000e9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9ac:	83 c4 20             	add    esp,0x20
c000e9af:	85 c0                	test   eax,eax
c000e9b1:	75 39                	jne    c000e9ec <VCache::read(unsigned long long, int, void*)+0x102>
c000e9b3:	eb b3                	jmp    c000e968 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b8:	83 ec 0c             	sub    esp,0xc
c000e9bb:	57                   	push   edi
c000e9bc:	e8 5f fd ff ff       	call   c000e720 <VCache::invalidateReadBuffer()>
c000e9c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9ca:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9ce:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9d2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9d6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9de:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9e1:	83 c4 2c             	add    esp,0x2c
c000e9e4:	5b                   	pop    ebx
c000e9e5:	5e                   	pop    esi
c000e9e6:	5f                   	pop    edi
c000e9e7:	5d                   	pop    ebp
c000e9e8:	ff e0                	jmp    eax
c000e9ea:	66 90                	xchg   ax,ax
c000e9ec:	83 c4 1c             	add    esp,0x1c
c000e9ef:	5b                   	pop    ebx
c000e9f0:	5e                   	pop    esi
c000e9f1:	5f                   	pop    edi
c000e9f2:	5d                   	pop    ebp
c000e9f3:	c3                   	ret    

c000e9f4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9f4:	55                   	push   ebp
c000e9f5:	57                   	push   edi
c000e9f6:	56                   	push   esi
c000e9f7:	53                   	push   ebx
c000e9f8:	83 ec 1c             	sub    esp,0x1c
c000e9fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea07:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea13:	01 df                	add    edi,ebx
c000ea15:	39 fb                	cmp    ebx,edi
c000ea17:	7d 1f                	jge    c000ea38 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea1d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea21:	7d 12                	jge    c000ea35 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea23:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea29:	53                   	push   ebx
c000ea2a:	55                   	push   ebp
c000ea2b:	45                   	inc    ebp
c000ea2c:	56                   	push   esi
c000ea2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	eb e8                	jmp    c000ea1d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea35:	43                   	inc    ebx
c000ea36:	eb dd                	jmp    c000ea15 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea38:	83 c4 1c             	add    esp,0x1c
c000ea3b:	5b                   	pop    ebx
c000ea3c:	5e                   	pop    esi
c000ea3d:	5f                   	pop    edi
c000ea3e:	5d                   	pop    ebp
c000ea3f:	c3                   	ret    

c000ea40 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea40:	55                   	push   ebp
c000ea41:	57                   	push   edi
c000ea42:	31 ff                	xor    edi,edi
c000ea44:	56                   	push   esi
c000ea45:	53                   	push   ebx
c000ea46:	83 ec 1c             	sub    esp,0x1c
c000ea49:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea4d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea51:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea58:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea61:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea69:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea70:	01 f9                	add    ecx,edi
c000ea72:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea76:	7d 2f                	jge    c000eaa7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea78:	31 f6                	xor    esi,esi
c000ea7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea7e:	01 f2                	add    edx,esi
c000ea80:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea84:	7d 1a                	jge    c000eaa0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea89:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea8c:	46                   	inc    esi
c000ea8d:	51                   	push   ecx
c000ea8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea92:	52                   	push   edx
c000ea93:	55                   	push   ebp
c000ea94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea97:	83 c4 10             	add    esp,0x10
c000ea9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea9e:	eb da                	jmp    c000ea7a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eaa0:	47                   	inc    edi
c000eaa1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaa5:	eb c5                	jmp    c000ea6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaa7:	83 c4 1c             	add    esp,0x1c
c000eaaa:	5b                   	pop    ebx
c000eaab:	5e                   	pop    esi
c000eaac:	5f                   	pop    edi
c000eaad:	5d                   	pop    ebp
c000eaae:	c3                   	ret    
c000eaaf:	90                   	nop

c000eab0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eab0:	55                   	push   ebp
c000eab1:	57                   	push   edi
c000eab2:	56                   	push   esi
c000eab3:	53                   	push   ebx
c000eab4:	83 ec 1c             	sub    esp,0x1c
c000eab7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eabb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eabf:	85 c0                	test   eax,eax
c000eac1:	79 02                	jns    c000eac5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eac3:	31 c0                	xor    eax,eax
c000eac5:	c1 e0 02             	shl    eax,0x2
c000eac8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eacc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ead0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ead4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ead8:	39 d8                	cmp    eax,ebx
c000eada:	7e 49                	jle    c000eb25 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eadc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eae2:	7c 41                	jl     c000eb25 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eae4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eae8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaf0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eaf4:	39 f9                	cmp    ecx,edi
c000eaf6:	7e 22                	jle    c000eb1a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eaf8:	83 c5 04             	add    ebp,0x4
c000eafb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb01:	7c 14                	jl     c000eb17 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb03:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb05:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb10:	56                   	push   esi
c000eb11:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb14:	83 c4 10             	add    esp,0x10
c000eb17:	47                   	inc    edi
c000eb18:	eb d2                	jmp    c000eaec <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb1e:	43                   	inc    ebx
c000eb1f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb23:	eb ab                	jmp    c000ead0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb25:	83 c4 1c             	add    esp,0x1c
c000eb28:	5b                   	pop    ebx
c000eb29:	5e                   	pop    esi
c000eb2a:	5f                   	pop    edi
c000eb2b:	5d                   	pop    ebp
c000eb2c:	c3                   	ret    
c000eb2d:	90                   	nop

c000eb2e <Video::clearScreen(unsigned int)>:
c000eb2e:	57                   	push   edi
c000eb2f:	56                   	push   esi
c000eb30:	53                   	push   ebx
c000eb31:	31 db                	xor    ebx,ebx
c000eb33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb37:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb3d:	7e 1f                	jle    c000eb5e <Video::clearScreen(unsigned int)+0x30>
c000eb3f:	31 ff                	xor    edi,edi
c000eb41:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb47:	7e 12                	jle    c000eb5b <Video::clearScreen(unsigned int)+0x2d>
c000eb49:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb4f:	53                   	push   ebx
c000eb50:	57                   	push   edi
c000eb51:	47                   	inc    edi
c000eb52:	56                   	push   esi
c000eb53:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb56:	83 c4 10             	add    esp,0x10
c000eb59:	eb e6                	jmp    c000eb41 <Video::clearScreen(unsigned int)+0x13>
c000eb5b:	43                   	inc    ebx
c000eb5c:	eb d9                	jmp    c000eb37 <Video::clearScreen(unsigned int)+0x9>
c000eb5e:	5b                   	pop    ebx
c000eb5f:	5e                   	pop    esi
c000eb60:	5f                   	pop    edi
c000eb61:	c3                   	ret    

c000eb62 <Video::putpixel(int, int, unsigned int)>:
c000eb62:	c7 44 24 04 28 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f28
c000eb6a:	e9 28 2b 00 00       	jmp    c0011697 <KePanic(char const*)>
c000eb6f:	90                   	nop

c000eb70 <Video::readPixelApprox(int, int)>:
c000eb70:	83 ec 18             	sub    esp,0x18
c000eb73:	68 49 1f 02 c0       	push   0xc0021f49
c000eb78:	e8 1a 2b 00 00       	call   c0011697 <KePanic(char const*)>
c000eb7d:	31 c0                	xor    eax,eax
c000eb7f:	83 c4 1c             	add    esp,0x1c
c000eb82:	c3                   	ret    
c000eb83:	90                   	nop

c000eb84 <Video::Video(char const*)>:
c000eb84:	83 ec 0c             	sub    esp,0xc
c000eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8b:	83 ec 08             	sub    esp,0x8
c000eb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb92:	50                   	push   eax
c000eb93:	e8 e6 df ff ff       	call   c000cb7e <Device::Device(char const*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	ba c4 1f 02 c0       	mov    edx,0xc0021fc4
c000eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba4:	89 10                	mov    DWORD PTR [eax],edx
c000eba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebaa:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebb4:	90                   	nop
c000ebb5:	83 c4 0c             	add    esp,0xc
c000ebb8:	c3                   	ret    
c000ebb9:	90                   	nop

c000ebba <Video::~Video()>:
c000ebba:	83 ec 0c             	sub    esp,0xc
c000ebbd:	ba c4 1f 02 c0       	mov    edx,0xc0021fc4
c000ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc6:	89 10                	mov    DWORD PTR [eax],edx
c000ebc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	50                   	push   eax
c000ebd0:	e8 13 dd ff ff       	call   c000c8e8 <Device::~Device()>
c000ebd5:	83 c4 10             	add    esp,0x10
c000ebd8:	90                   	nop
c000ebd9:	83 c4 0c             	add    esp,0xc
c000ebdc:	c3                   	ret    
c000ebdd:	90                   	nop

c000ebde <Video::~Video()>:
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	83 ec 0c             	sub    esp,0xc
c000ebe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe8:	e8 cd ff ff ff       	call   c000ebba <Video::~Video()>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	83 ec 08             	sub    esp,0x8
c000ebf3:	68 64 01 00 00       	push   0x164
c000ebf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfc:	e8 37 bc ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c000ec01:	83 c4 10             	add    esp,0x10
c000ec04:	83 c4 0c             	add    esp,0xc
c000ec07:	c3                   	ret    

c000ec08 <Video::isMonochrome()>:
c000ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec0c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec12:	c3                   	ret    
c000ec13:	90                   	nop

c000ec14 <Video::getWidth()>:
c000ec14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Video::getHeight()>:
c000ec20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec2c:	55                   	push   ebp
c000ec2d:	57                   	push   edi
c000ec2e:	56                   	push   esi
c000ec2f:	53                   	push   ebx
c000ec30:	83 ec 2c             	sub    esp,0x2c
c000ec33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec3b:	83 f8 01             	cmp    eax,0x1
c000ec3e:	19 c9                	sbb    ecx,ecx
c000ec40:	31 db                	xor    ebx,ebx
c000ec42:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec46:	89 cd                	mov    ebp,ecx
c000ec48:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec50:	f7 d5                	not    ebp
c000ec52:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec5c:	01 d8                	add    eax,ebx
c000ec5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec62:	56                   	push   esi
c000ec63:	e8 b8 ff ff ff       	call   c000ec20 <Video::getHeight()>
c000ec68:	59                   	pop    ecx
c000ec69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec6d:	7e 70                	jle    c000ecdf <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec6f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec73:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec77:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec82:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8d:	89 f8                	mov    eax,edi
c000ec8f:	83 c0 20             	add    eax,0x20
c000ec92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec96:	56                   	push   esi
c000ec97:	e8 78 ff ff ff       	call   c000ec14 <Video::getWidth()>
c000ec9c:	5a                   	pop    edx
c000ec9d:	39 c7                	cmp    edi,eax
c000ec9f:	7d 34                	jge    c000ecd5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000eca1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000eca6:	74 05                	je     c000ecad <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000eca8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecaa:	55                   	push   ebp
c000ecab:	eb 0d                	jmp    c000ecba <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecad:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecb2:	74 12                	je     c000ecc6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecb4:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecbe:	57                   	push   edi
c000ecbf:	56                   	push   esi
c000ecc0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecc3:	83 c4 10             	add    esp,0x10
c000ecc6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecca:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecce:	47                   	inc    edi
c000eccf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ecd3:	75 c1                	jne    c000ec96 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecd5:	43                   	inc    ebx
c000ecd6:	83 fb 20             	cmp    ebx,0x20
c000ecd9:	0f 85 79 ff ff ff    	jne    c000ec58 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecdf:	83 c4 2c             	add    esp,0x2c
c000ece2:	5b                   	pop    ebx
c000ece3:	5e                   	pop    esi
c000ece4:	5f                   	pop    edi
c000ece5:	5d                   	pop    ebp
c000ece6:	c3                   	ret    
c000ece7:	90                   	nop

c000ece8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ece8:	55                   	push   ebp
c000ece9:	57                   	push   edi
c000ecea:	56                   	push   esi
c000eceb:	53                   	push   ebx
c000ecec:	83 ec 28             	sub    esp,0x28
c000ecef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecf3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecf7:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ecfb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ecff:	c1 e6 08             	shl    esi,0x8
c000ed02:	01 c6                	add    esi,eax
c000ed04:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed08:	c1 e0 08             	shl    eax,0x8
c000ed0b:	01 d0                	add    eax,edx
c000ed0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed15:	0f af c6             	imul   eax,esi
c000ed18:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed1f:	50                   	push   eax
c000ed20:	e8 b1 8d ff ff       	call   c0007ad6 <malloc>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	89 c7                	mov    edi,eax
c000ed2a:	85 c0                	test   eax,eax
c000ed2c:	75 10                	jne    c000ed3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed2e:	83 ec 0c             	sub    esp,0xc
c000ed31:	68 74 1f 02 c0       	push   0xc0021f74
c000ed36:	e8 5c 29 00 00       	call   c0011697 <KePanic(char const*)>
c000ed3b:	83 c4 10             	add    esp,0x10
c000ed3e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed42:	ba 12 00 00 00       	mov    edx,0x12
c000ed47:	85 c0                	test   eax,eax
c000ed49:	74 11                	je     c000ed5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed4b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed4f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed53:	c1 fa 03             	sar    edx,0x3
c000ed56:	0f af d1             	imul   edx,ecx
c000ed59:	83 c2 12             	add    edx,0x12
c000ed5c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed60:	74 04                	je     c000ed66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed62:	85 f6                	test   esi,esi
c000ed64:	75 12                	jne    c000ed78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed66:	83 ec 0c             	sub    esp,0xc
c000ed69:	68 84 1f 02 c0       	push   0xc0021f84
c000ed6e:	e8 f2 bb ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ed73:	e9 b8 00 00 00       	jmp    c000ee30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed78:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed7c:	83 f9 02             	cmp    ecx,0x2
c000ed7f:	0f 85 96 00 00 00    	jne    c000ee1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed85:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed8a:	75 0e                	jne    c000ed9a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed8c:	85 c0                	test   eax,eax
c000ed8e:	75 0a                	jne    c000ed9a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed90:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed93:	83 e8 18             	sub    eax,0x18
c000ed96:	a8 f7                	test   al,0xf7
c000ed98:	74 0a                	je     c000eda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	68 99 1f 02 c0       	push   0xc0021f99
c000eda2:	eb 7f                	jmp    c000ee23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eda4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edb4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000edb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edc0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edc4:	75 0c                	jne    c000edd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edc6:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000edcb:	c1 e0 18             	shl    eax,0x18
c000edce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edd2:	45                   	inc    ebp
c000edd3:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edd8:	c1 e1 10             	shl    ecx,0x10
c000eddb:	89 c8                	mov    eax,ecx
c000eddd:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ede2:	c1 e1 08             	shl    ecx,0x8
c000ede5:	09 c1                	or     ecx,eax
c000ede7:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edeb:	09 c1                	or     ecx,eax
c000eded:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edf1:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000edf5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edf9:	c1 f8 03             	sar    eax,0x3
c000edfc:	01 c2                	add    edx,eax
c000edfe:	89 e8                	mov    eax,ebp
c000ee00:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee04:	39 c6                	cmp    esi,eax
c000ee06:	7f b0                	jg     c000edb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee08:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee10:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee13:	7e 22                	jle    c000ee37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee15:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee19:	eb 99                	jmp    c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee1b:	50                   	push   eax
c000ee1c:	50                   	push   eax
c000ee1d:	51                   	push   ecx
c000ee1e:	68 a7 1f 02 c0       	push   0xc0021fa7
c000ee23:	e8 3d bb ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ee28:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee2b:	e8 b6 8c ff ff       	call   c0007ae6 <free>
c000ee30:	83 c4 10             	add    esp,0x10
c000ee33:	31 ff                	xor    edi,edi
c000ee35:	eb 0f                	jmp    c000ee46 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee3b:	89 30                	mov    DWORD PTR [eax],esi
c000ee3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee41:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee44:	89 30                	mov    DWORD PTR [eax],esi
c000ee46:	83 c4 1c             	add    esp,0x1c
c000ee49:	89 f8                	mov    eax,edi
c000ee4b:	5b                   	pop    ebx
c000ee4c:	5e                   	pop    esi
c000ee4d:	5f                   	pop    edi
c000ee4e:	5d                   	pop    ebp
c000ee4f:	c3                   	ret    

c000ee50 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee50:	55                   	push   ebp
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	53                   	push   ebx
c000ee54:	83 ec 28             	sub    esp,0x28
c000ee57:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee5f:	50                   	push   eax
c000ee60:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee64:	50                   	push   eax
c000ee65:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee69:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee6d:	56                   	push   esi
c000ee6e:	e8 75 fe ff ff       	call   c000ece8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee73:	83 c4 20             	add    esp,0x20
c000ee76:	85 c0                	test   eax,eax
c000ee78:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee7c:	74 35                	je     c000eeb3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee7e:	89 c7                	mov    edi,eax
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee88:	39 d8                	cmp    eax,ebx
c000ee8a:	7e 27                	jle    c000eeb3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee8c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee94:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee98:	39 e8                	cmp    eax,ebp
c000ee9a:	7e 14                	jle    c000eeb0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee9c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee9e:	83 c7 04             	add    edi,0x4
c000eea1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eea4:	53                   	push   ebx
c000eea5:	55                   	push   ebp
c000eea6:	45                   	inc    ebp
c000eea7:	56                   	push   esi
c000eea8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	eb e0                	jmp    c000ee90 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eeb0:	43                   	inc    ebx
c000eeb1:	eb cd                	jmp    c000ee80 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eeb3:	83 c4 1c             	add    esp,0x1c
c000eeb6:	5b                   	pop    ebx
c000eeb7:	5e                   	pop    esi
c000eeb8:	5f                   	pop    edi
c000eeb9:	5d                   	pop    ebp
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <ACPI::close(int, int, void*)>:
c000eebc:	83 ec 1c             	sub    esp,0x1c
c000eebf:	83 ec 0c             	sub    esp,0xc
c000eec2:	68 08 20 02 c0       	push   0xc0022008
c000eec7:	e8 99 ba ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eed7:	74 0b                	je     c000eee4 <ACPI::close(int, int, void*)+0x28>
c000eed9:	b8 00 00 00 00       	mov    eax,0x0
c000eede:	e9 e1 00 00 00       	jmp    c000efc4 <ACPI::close(int, int, void*)+0x108>
c000eee3:	90                   	nop
c000eee4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eee9:	75 45                	jne    c000ef30 <ACPI::close(int, int, void*)+0x74>
c000eeeb:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eef0:	83 ec 08             	sub    esp,0x8
c000eef3:	50                   	push   eax
c000eef4:	68 15 20 02 c0       	push   0xc0022015
c000eef9:	e8 67 ba ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000eefe:	83 c4 10             	add    esp,0x10
c000ef01:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef06:	85 c0                	test   eax,eax
c000ef08:	74 0a                	je     c000ef14 <ACPI::close(int, int, void*)+0x58>
c000ef0a:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef0f:	ff d0                	call   eax
c000ef11:	8d 76 00             	lea    esi,[esi+0x0]
c000ef14:	83 ec 0c             	sub    esp,0xc
c000ef17:	68 d4 21 02 c0       	push   0xc00221d4
c000ef1c:	e8 76 27 00 00       	call   c0011697 <KePanic(char const*)>
c000ef21:	83 c4 10             	add    esp,0x10
c000ef24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef29:	e9 96 00 00 00       	jmp    c000efc4 <ACPI::close(int, int, void*)+0x108>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef35:	0f 85 81 00 00 00    	jne    c000efbc <ACPI::close(int, int, void*)+0x100>
c000ef3b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef40:	83 ec 08             	sub    esp,0x8
c000ef43:	50                   	push   eax
c000ef44:	68 33 20 02 c0       	push   0xc0022033
c000ef49:	e8 17 ba ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef56:	85 c0                	test   eax,eax
c000ef58:	74 0a                	je     c000ef64 <ACPI::close(int, int, void*)+0xa8>
c000ef5a:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef5f:	ff d0                	call   eax
c000ef61:	8d 76 00             	lea    esi,[esi+0x0]
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	68 4e 20 02 c0       	push   0xc002204e
c000ef6c:	e8 f4 b9 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef79:	8d 76 00             	lea    esi,[esi+0x0]
c000ef7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef81:	83 e0 02             	and    eax,0x2
c000ef84:	74 1e                	je     c000efa4 <ACPI::close(int, int, void*)+0xe8>
c000ef86:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef91:	89 c2                	mov    edx,eax
c000ef93:	ec                   	in     al,dx
c000ef94:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef98:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efa0:	eb da                	jmp    c000ef7c <ACPI::close(int, int, void*)+0xc0>
c000efa2:	66 90                	xchg   ax,ax
c000efa4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efab:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efb0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb8:	ee                   	out    dx,al
c000efb9:	8d 76 00             	lea    esi,[esi+0x0]
c000efbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc1:	8d 76 00             	lea    esi,[esi+0x0]
c000efc4:	83 c4 1c             	add    esp,0x1c
c000efc7:	c3                   	ret    

c000efc8 <findRSDP()>:
c000efc8:	83 ec 1c             	sub    esp,0x1c
c000efcb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efd0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efd6:	83 e0 04             	and    eax,0x4
c000efd9:	0f b6 c0             	movzx  eax,al
c000efdc:	85 c0                	test   eax,eax
c000efde:	75 08                	jne    c000efe8 <findRSDP()+0x20>
c000efe0:	b8 00 00 00 00       	mov    eax,0x0
c000efe5:	eb 75                	jmp    c000f05c <findRSDP()+0x94>
c000efe7:	90                   	nop
c000efe8:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000efed:	3d ff 07 00 00       	cmp    eax,0x7ff
c000eff2:	7f 1c                	jg     c000f010 <findRSDP()+0x48>
c000eff4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000efff:	83 e2 fb             	and    edx,0xfffffffb
c000f002:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f008:	b8 00 00 00 00       	mov    eax,0x0
c000f00d:	eb 4d                	jmp    c000f05c <findRSDP()+0x94>
c000f00f:	90                   	nop
c000f010:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f018:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f020:	77 32                	ja     c000f054 <findRSDP()+0x8c>
c000f022:	83 ec 04             	sub    esp,0x4
c000f025:	6a 08                	push   0x8
c000f027:	68 60 20 02 c0       	push   0xc0022060
c000f02c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f030:	e8 4b 13 ff ff       	call   c0000380 <memcmp>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	85 c0                	test   eax,eax
c000f03a:	0f 94 c0             	sete   al
c000f03d:	0f b6 c0             	movzx  eax,al
c000f040:	85 c0                	test   eax,eax
c000f042:	74 08                	je     c000f04c <findRSDP()+0x84>
c000f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f048:	eb 12                	jmp    c000f05c <findRSDP()+0x94>
c000f04a:	66 90                	xchg   ax,ax
c000f04c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f051:	eb c5                	jmp    c000f018 <findRSDP()+0x50>
c000f053:	90                   	nop
c000f054:	b8 00 00 00 00       	mov    eax,0x0
c000f059:	8d 76 00             	lea    esi,[esi+0x0]
c000f05c:	83 c4 1c             	add    esp,0x1c
c000f05f:	c3                   	ret    

c000f060 <loadACPITables(unsigned char*)>:
c000f060:	57                   	push   edi
c000f061:	56                   	push   esi
c000f062:	53                   	push   ebx
c000f063:	83 ec 60             	sub    esp,0x60
c000f066:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f06b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f071:	83 e0 04             	and    eax,0x4
c000f074:	0f b6 c0             	movzx  eax,al
c000f077:	85 c0                	test   eax,eax
c000f079:	0f 84 41 02 00 00    	je     c000f2c0 <loadACPITables(unsigned char*)+0x260>
c000f07f:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f084:	0f b6 c0             	movzx  eax,al
c000f087:	85 c0                	test   eax,eax
c000f089:	74 79                	je     c000f104 <loadACPITables(unsigned char*)+0xa4>
c000f08b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f08f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f093:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f09a:	83 e8 24             	sub    eax,0x24
c000f09d:	c1 e8 03             	shr    eax,0x3
c000f0a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0a4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0b0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0b4:	0f 8d ba 00 00 00    	jge    c000f174 <loadACPITables(unsigned char*)+0x114>
c000f0ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0be:	83 c0 24             	add    eax,0x24
c000f0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0d1:	c1 e0 03             	shl    eax,0x3
c000f0d4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e1:	89 c1                	mov    ecx,eax
c000f0e3:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0e8:	8d 50 01             	lea    edx,[eax+0x1]
c000f0eb:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0f1:	89 ca                	mov    edx,ecx
c000f0f3:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0fa:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f0ff:	eb ab                	jmp    c000f0ac <loadACPITables(unsigned char*)+0x4c>
c000f101:	8d 76 00             	lea    esi,[esi+0x0]
c000f104:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f108:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f10c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f110:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f113:	83 e8 24             	sub    eax,0x24
c000f116:	c1 e8 02             	shr    eax,0x2
c000f119:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f11d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f125:	8d 76 00             	lea    esi,[esi+0x0]
c000f128:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f12c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f130:	7d 42                	jge    c000f174 <loadACPITables(unsigned char*)+0x114>
c000f132:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f136:	83 c0 24             	add    eax,0x24
c000f139:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f13d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f141:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f145:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f149:	c1 e0 02             	shl    eax,0x2
c000f14c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f150:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f154:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f156:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f15b:	8d 50 01             	lea    edx,[eax+0x1]
c000f15e:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f164:	89 ca                	mov    edx,ecx
c000f166:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f16d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f172:	eb b4                	jmp    c000f128 <loadACPITables(unsigned char*)+0xc8>
c000f174:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f17c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f181:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f185:	0f 8d 39 01 00 00    	jge    c000f2c4 <loadACPITables(unsigned char*)+0x264>
c000f18b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f18f:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f196:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f19a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f19e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a6:	25 ff 0f 00 00       	and    eax,0xfff
c000f1ab:	89 c6                	mov    esi,eax
c000f1ad:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1b3:	83 ec 0c             	sub    esp,0xc
c000f1b6:	6a 01                	push   0x1
c000f1b8:	e8 70 a4 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000f1bd:	83 c4 10             	add    esp,0x10
c000f1c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1ca:	83 ec 0c             	sub    esp,0xc
c000f1cd:	6a 01                	push   0x1
c000f1cf:	6a 01                	push   0x1
c000f1d1:	50                   	push   eax
c000f1d2:	52                   	push   edx
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 61 ad ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1d9:	83 c4 20             	add    esp,0x20
c000f1dc:	09 f0                	or     eax,esi
c000f1de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1e6:	c1 e0 03             	shl    eax,0x3
c000f1e9:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f20e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f212:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f216:	89 c6                	mov    esi,eax
c000f218:	89 d7                	mov    edi,edx
c000f21a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f21c:	89 c8                	mov    eax,ecx
c000f21e:	89 fa                	mov    edx,edi
c000f220:	89 f3                	mov    ebx,esi
c000f222:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f226:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f22e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f235:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f239:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23d:	05 00 10 00 00       	add    eax,0x1000
c000f242:	c1 e8 0c             	shr    eax,0xc
c000f245:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f24d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f255:	25 ff 0f 00 00       	and    eax,0xfff
c000f25a:	89 c6                	mov    esi,eax
c000f25c:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f262:	83 ec 0c             	sub    esp,0xc
c000f265:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f269:	e8 bf a3 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000f26e:	83 c4 10             	add    esp,0x10
c000f271:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f275:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f27b:	83 ec 0c             	sub    esp,0xc
c000f27e:	6a 01                	push   0x1
c000f280:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f284:	50                   	push   eax
c000f285:	52                   	push   edx
c000f286:	53                   	push   ebx
c000f287:	e8 ae ac ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f28c:	83 c4 20             	add    esp,0x20
c000f28f:	09 f0                	or     eax,esi
c000f291:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f299:	83 ec 0c             	sub    esp,0xc
c000f29c:	50                   	push   eax
c000f29d:	e8 a9 a6 ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c000f2a2:	83 c4 10             	add    esp,0x10
c000f2a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2ad:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2b4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2b9:	e9 be fe ff ff       	jmp    c000f17c <loadACPITables(unsigned char*)+0x11c>
c000f2be:	66 90                	xchg   ax,ax
c000f2c0:	90                   	nop
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	83 c4 60             	add    esp,0x60
c000f2c7:	5b                   	pop    ebx
c000f2c8:	5e                   	pop    esi
c000f2c9:	5f                   	pop    edi
c000f2ca:	c3                   	ret    
c000f2cb:	90                   	nop

c000f2cc <findRSDT(unsigned char*)>:
c000f2cc:	57                   	push   edi
c000f2cd:	56                   	push   esi
c000f2ce:	53                   	push   ebx
c000f2cf:	83 ec 50             	sub    esp,0x50
c000f2d2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2dd:	83 e0 04             	and    eax,0x4
c000f2e0:	0f b6 c0             	movzx  eax,al
c000f2e3:	85 c0                	test   eax,eax
c000f2e5:	75 0d                	jne    c000f2f4 <findRSDT(unsigned char*)+0x28>
c000f2e7:	b8 00 00 00 00       	mov    eax,0x0
c000f2ec:	e9 2b 01 00 00       	jmp    c000f41c <findRSDT(unsigned char*)+0x150>
c000f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f4:	89 e0                	mov    eax,esp
c000f2f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f302:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f30a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f30e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f312:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f316:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f31a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f31e:	89 c6                	mov    esi,eax
c000f320:	89 d7                	mov    edi,edx
c000f322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f324:	89 c8                	mov    eax,ecx
c000f326:	89 fa                	mov    edx,edi
c000f328:	89 f3                	mov    ebx,esi
c000f32a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f32e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f332:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f336:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f33a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f33e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f34a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f34e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f356:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f35a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f35e:	25 ff 0f 00 00       	and    eax,0xfff
c000f363:	89 c6                	mov    esi,eax
c000f365:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f36b:	83 ec 0c             	sub    esp,0xc
c000f36e:	6a 02                	push   0x2
c000f370:	e8 b8 a2 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f37c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f382:	83 ec 0c             	sub    esp,0xc
c000f385:	6a 01                	push   0x1
c000f387:	6a 02                	push   0x2
c000f389:	50                   	push   eax
c000f38a:	52                   	push   edx
c000f38b:	53                   	push   ebx
c000f38c:	e8 a9 ab ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f391:	83 c4 20             	add    esp,0x20
c000f394:	09 f0                	or     eax,esi
c000f396:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f39a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f39e:	25 ff 0f 00 00       	and    eax,0xfff
c000f3a3:	89 c6                	mov    esi,eax
c000f3a5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3ab:	83 ec 0c             	sub    esp,0xc
c000f3ae:	6a 02                	push   0x2
c000f3b0:	e8 78 a2 ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3c2:	83 ec 0c             	sub    esp,0xc
c000f3c5:	6a 01                	push   0x1
c000f3c7:	6a 02                	push   0x2
c000f3c9:	50                   	push   eax
c000f3ca:	52                   	push   edx
c000f3cb:	53                   	push   ebx
c000f3cc:	e8 69 ab ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3d1:	83 c4 20             	add    esp,0x20
c000f3d4:	09 f0                	or     eax,esi
c000f3d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3da:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3df:	85 c0                	test   eax,eax
c000f3e1:	75 11                	jne    c000f3f4 <findRSDT(unsigned char*)+0x128>
c000f3e3:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3f2:	eb 24                	jmp    c000f418 <findRSDT(unsigned char*)+0x14c>
c000f3f4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3f9:	83 f8 02             	cmp    eax,0x2
c000f3fc:	75 12                	jne    c000f410 <findRSDT(unsigned char*)+0x144>
c000f3fe:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f405:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f409:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f40d:	eb 09                	jmp    c000f418 <findRSDT(unsigned char*)+0x14c>
c000f40f:	90                   	nop
c000f410:	b8 00 00 00 00       	mov    eax,0x0
c000f415:	eb 05                	jmp    c000f41c <findRSDT(unsigned char*)+0x150>
c000f417:	90                   	nop
c000f418:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f41c:	83 c4 50             	add    esp,0x50
c000f41f:	5b                   	pop    ebx
c000f420:	5e                   	pop    esi
c000f421:	5f                   	pop    edi
c000f422:	c3                   	ret    
c000f423:	90                   	nop

c000f424 <findDataTable(unsigned char*, char*)>:
c000f424:	83 ec 1c             	sub    esp,0x1c
c000f427:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f42c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f432:	83 e0 04             	and    eax,0x4
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	85 c0                	test   eax,eax
c000f43a:	75 08                	jne    c000f444 <findDataTable(unsigned char*, char*)+0x20>
c000f43c:	b8 00 00 00 00       	mov    eax,0x0
c000f441:	eb 5d                	jmp    c000f4a0 <findDataTable(unsigned char*, char*)+0x7c>
c000f443:	90                   	nop
c000f444:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f44c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f451:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f455:	7d 41                	jge    c000f498 <findDataTable(unsigned char*, char*)+0x74>
c000f457:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f45b:	c1 e0 03             	shl    eax,0x3
c000f45e:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f463:	83 ec 04             	sub    esp,0x4
c000f466:	6a 04                	push   0x4
c000f468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f46c:	50                   	push   eax
c000f46d:	e8 0e 0f ff ff       	call   c0000380 <memcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	0f 94 c0             	sete   al
c000f47a:	0f b6 c0             	movzx  eax,al
c000f47d:	85 c0                	test   eax,eax
c000f47f:	74 0f                	je     c000f490 <findDataTable(unsigned char*, char*)+0x6c>
c000f481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f485:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f48c:	eb 12                	jmp    c000f4a0 <findDataTable(unsigned char*, char*)+0x7c>
c000f48e:	66 90                	xchg   ax,ax
c000f490:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f495:	eb b5                	jmp    c000f44c <findDataTable(unsigned char*, char*)+0x28>
c000f497:	90                   	nop
c000f498:	b8 00 00 00 00       	mov    eax,0x0
c000f49d:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a0:	83 c4 1c             	add    esp,0x1c
c000f4a3:	c3                   	ret    

c000f4a4 <scanMADT()>:
c000f4a4:	53                   	push   ebx
c000f4a5:	83 ec 38             	sub    esp,0x38
c000f4a8:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4ad:	25 00 04 00 00       	and    eax,0x400
c000f4b2:	74 14                	je     c000f4c8 <scanMADT()+0x24>
c000f4b4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4bf:	83 e2 fb             	and    edx,0xfffffffb
c000f4c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4d3:	83 e0 04             	and    eax,0x4
c000f4d6:	0f b6 c0             	movzx  eax,al
c000f4d9:	85 c0                	test   eax,eax
c000f4db:	0f 84 6b 04 00 00    	je     c000f94c <scanMADT()+0x4a8>
c000f4e1:	e8 e2 fa ff ff       	call   c000efc8 <findRSDP()>
c000f4e6:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4eb:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4f0:	85 c0                	test   eax,eax
c000f4f2:	75 1c                	jne    c000f510 <scanMADT()+0x6c>
c000f4f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4ff:	83 e2 fb             	and    edx,0xfffffffb
c000f502:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f508:	e9 47 04 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f50d:	8d 76 00             	lea    esi,[esi+0x0]
c000f510:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f515:	83 ec 0c             	sub    esp,0xc
c000f518:	50                   	push   eax
c000f519:	e8 ae fd ff ff       	call   c000f2cc <findRSDT(unsigned char*)>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f526:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f52b:	85 c0                	test   eax,eax
c000f52d:	75 19                	jne    c000f548 <scanMADT()+0xa4>
c000f52f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f534:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f53a:	83 e2 fb             	and    edx,0xfffffffb
c000f53d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f543:	e9 0c 04 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f548:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f54d:	83 ec 0c             	sub    esp,0xc
c000f550:	50                   	push   eax
c000f551:	e8 0a fb ff ff       	call   c000f060 <loadACPITables(unsigned char*)>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55e:	83 ec 08             	sub    esp,0x8
c000f561:	68 69 20 02 c0       	push   0xc0022069
c000f566:	50                   	push   eax
c000f567:	e8 b8 fe ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c000f56c:	83 c4 10             	add    esp,0x10
c000f56f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f573:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f578:	75 1a                	jne    c000f594 <scanMADT()+0xf0>
c000f57a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f57f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f585:	83 e2 fe             	and    edx,0xfffffffe
c000f588:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f58e:	e9 c1 03 00 00       	jmp    c000f954 <scanMADT()+0x4b0>
c000f593:	90                   	nop
c000f594:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f59c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5a3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5a7:	0f 87 a7 03 00 00    	ja     c000f954 <scanMADT()+0x4b0>
c000f5ad:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5b5:	0f 87 99 03 00 00    	ja     c000f954 <scanMADT()+0x4b0>
c000f5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5de:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5ed:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5f1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5f6:	83 f8 02             	cmp    eax,0x2
c000f5f9:	0f 86 51 03 00 00    	jbe    c000f950 <scanMADT()+0x4ac>
c000f5ff:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f604:	85 c0                	test   eax,eax
c000f606:	75 58                	jne    c000f660 <scanMADT()+0x1bc>
c000f608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60c:	8d 50 01             	lea    edx,[eax+0x1]
c000f60f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f613:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f619:	0f b6 d2             	movzx  edx,dl
c000f61c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f620:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f624:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62e:	8d 50 01             	lea    edx,[eax+0x1]
c000f631:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f635:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f63b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f63e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f644:	0f b6 d2             	movzx  edx,dl
c000f647:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f64f:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f655:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f65a:	e9 d9 02 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f65f:	90                   	nop
c000f660:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f665:	83 f8 01             	cmp    eax,0x1
c000f668:	0f 85 1a 01 00 00    	jne    c000f788 <scanMADT()+0x2e4>
c000f66e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f672:	8d 50 01             	lea    edx,[eax+0x1]
c000f675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f679:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f67f:	0f b6 d2             	movzx  edx,dl
c000f682:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f686:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f68a:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f690:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f695:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f699:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69d:	01 d0                	add    eax,edx
c000f69f:	83 c0 2c             	add    eax,0x2c
c000f6a2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a4:	0f b6 d0             	movzx  edx,al
c000f6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ab:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6b6:	0f b6 c0             	movzx  eax,al
c000f6b9:	c1 e0 08             	shl    eax,0x8
c000f6bc:	89 d1                	mov    ecx,edx
c000f6be:	09 c1                	or     ecx,eax
c000f6c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c4:	8d 50 02             	lea    edx,[eax+0x2]
c000f6c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6cf:	0f b6 c0             	movzx  eax,al
c000f6d2:	c1 e0 10             	shl    eax,0x10
c000f6d5:	09 c1                	or     ecx,eax
c000f6d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6db:	8d 50 03             	lea    edx,[eax+0x3]
c000f6de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e6:	0f b6 c0             	movzx  eax,al
c000f6e9:	c1 e0 18             	shl    eax,0x18
c000f6ec:	09 c1                	or     ecx,eax
c000f6ee:	89 ca                	mov    edx,ecx
c000f6f0:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f5:	0f b6 c0             	movzx  eax,al
c000f6f8:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f6ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	01 d0                	add    eax,edx
c000f70e:	83 c0 2c             	add    eax,0x2c
c000f711:	8a 00                	mov    al,BYTE PTR [eax]
c000f713:	0f b6 d0             	movzx  edx,al
c000f716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f71d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f721:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	c1 e0 08             	shl    eax,0x8
c000f72b:	89 d1                	mov    ecx,edx
c000f72d:	09 c1                	or     ecx,eax
c000f72f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f733:	8d 50 02             	lea    edx,[eax+0x2]
c000f736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f73e:	0f b6 c0             	movzx  eax,al
c000f741:	c1 e0 10             	shl    eax,0x10
c000f744:	09 c1                	or     ecx,eax
c000f746:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74a:	8d 50 03             	lea    edx,[eax+0x3]
c000f74d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f751:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	c1 e0 18             	shl    eax,0x18
c000f75b:	09 c1                	or     ecx,eax
c000f75d:	89 ca                	mov    edx,ecx
c000f75f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f764:	0f b6 c0             	movzx  eax,al
c000f767:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f76e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f773:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f778:	83 c0 01             	add    eax,0x1
c000f77b:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f780:	e9 b3 01 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f785:	8d 76 00             	lea    esi,[esi+0x0]
c000f788:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f78d:	83 f8 02             	cmp    eax,0x2
c000f790:	0f 85 ea 00 00 00    	jne    c000f880 <scanMADT()+0x3dc>
c000f796:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f79a:	8d 50 01             	lea    edx,[eax+0x1]
c000f79d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7a9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b1:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7bc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7cc:	01 d0                	add    eax,edx
c000f7ce:	83 c0 2c             	add    eax,0x2c
c000f7d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f7d3:	0f b6 d0             	movzx  edx,al
c000f7d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7da:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7e5:	0f b6 c0             	movzx  eax,al
c000f7e8:	c1 e0 08             	shl    eax,0x8
c000f7eb:	89 d1                	mov    ecx,edx
c000f7ed:	09 c1                	or     ecx,eax
c000f7ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f3:	8d 50 02             	lea    edx,[eax+0x2]
c000f7f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7fe:	0f b6 c0             	movzx  eax,al
c000f801:	c1 e0 10             	shl    eax,0x10
c000f804:	09 c1                	or     ecx,eax
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 50 03             	lea    edx,[eax+0x3]
c000f80d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f811:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	c1 e0 18             	shl    eax,0x18
c000f81b:	09 c8                	or     eax,ecx
c000f81d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f821:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f826:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f82a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82e:	01 d0                	add    eax,edx
c000f830:	83 c0 2c             	add    eax,0x2c
c000f833:	8a 00                	mov    al,BYTE PTR [eax]
c000f835:	0f b6 c0             	movzx  eax,al
c000f838:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f83c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f83f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f843:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f847:	0f b6 d2             	movzx  edx,dl
c000f84a:	c1 e2 08             	shl    edx,0x8
c000f84d:	09 d0                	or     eax,edx
c000f84f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f854:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f859:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f85e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f862:	88 90 28 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc7d8],dl
c000f868:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f86d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f872:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f87a:	e9 b9 00 00 00       	jmp    c000f938 <scanMADT()+0x494>
c000f87f:	90                   	nop
c000f880:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f885:	83 f8 04             	cmp    eax,0x4
c000f888:	0f 85 9a 00 00 00    	jne    c000f928 <scanMADT()+0x484>
c000f88e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f892:	8d 50 01             	lea    edx,[eax+0x1]
c000f895:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f899:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f89d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8a1:	0f b6 c0             	movzx  eax,al
c000f8a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8b0:	01 d0                	add    eax,edx
c000f8b2:	83 c0 2c             	add    eax,0x2c
c000f8b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b7:	0f b6 d0             	movzx  edx,al
c000f8ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8be:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8c9:	0f b6 c0             	movzx  eax,al
c000f8cc:	c1 e0 08             	shl    eax,0x8
c000f8cf:	09 d0                	or     eax,edx
c000f8d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8de:	8d 50 01             	lea    edx,[eax+0x1]
c000f8e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8ed:	0f b6 c0             	movzx  eax,al
c000f8f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f8:	c1 e0 08             	shl    eax,0x8
c000f8fb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f8ff:	89 c1                	mov    ecx,eax
c000f901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f905:	c1 e0 18             	shl    eax,0x18
c000f908:	89 c3                	mov    ebx,eax
c000f90a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f90f:	8d 50 01             	lea    edx,[eax+0x1]
c000f912:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f918:	09 d9                	or     ecx,ebx
c000f91a:	89 ca                	mov    edx,ecx
c000f91c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f923:	eb 13                	jmp    c000f938 <scanMADT()+0x494>
c000f925:	8d 76 00             	lea    esi,[esi+0x0]
c000f928:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f92d:	83 f8 05             	cmp    eax,0x5
c000f930:	75 06                	jne    c000f938 <scanMADT()+0x494>
c000f932:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f937:	90                   	nop
c000f938:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f93d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f941:	01 d0                	add    eax,edx
c000f943:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f947:	e9 50 fc ff ff       	jmp    c000f59c <scanMADT()+0xf8>
c000f94c:	90                   	nop
c000f94d:	eb 05                	jmp    c000f954 <scanMADT()+0x4b0>
c000f94f:	90                   	nop
c000f950:	90                   	nop
c000f951:	8d 76 00             	lea    esi,[esi+0x0]
c000f954:	83 c4 38             	add    esp,0x38
c000f957:	5b                   	pop    ebx
c000f958:	c3                   	ret    
c000f959:	90                   	nop
c000f95a:	66 90                	xchg   ax,ax

c000f95c <ACPI::ACPI()>:
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	83 ec 08             	sub    esp,0x8
c000f966:	68 6e 20 02 c0       	push   0xc002206e
c000f96b:	50                   	push   eax
c000f96c:	e8 0d d2 ff ff       	call   c000cb7e <Device::Device(char const*)>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	ba 78 22 02 c0       	mov    edx,0xc0022278
c000f979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97d:	89 10                	mov    DWORD PTR [eax],edx
c000f97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f983:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9a6:	e8 f9 fa ff ff       	call   c000f4a4 <scanMADT()>
c000f9ab:	90                   	nop
c000f9ac:	83 c4 0c             	add    esp,0xc
c000f9af:	c3                   	ret    

c000f9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9b0:	83 ec 2c             	sub    esp,0x2c
c000f9b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9c8:	88 d0                	mov    al,dl
c000f9ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9db:	90                   	nop
c000f9dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9ea:	0f 8d b0 00 00 00    	jge    c000faa0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9f8:	83 c2 2a             	add    edx,0x2a
c000f9fb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f9ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa04:	0f b7 c0             	movzx  eax,ax
c000fa07:	39 c2                	cmp    edx,eax
c000fa09:	0f 85 85 00 00 00    	jne    c000fa94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa17:	83 c2 2a             	add    edx,0x2a
c000fa1a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa1e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa23:	0f b6 c0             	movzx  eax,al
c000fa26:	39 c2                	cmp    edx,eax
c000fa28:	75 6a                	jne    c000fa94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa2a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa2f:	85 c0                	test   eax,eax
c000fa31:	74 3d                	je     c000fa70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa3b:	83 c2 2a             	add    edx,0x2a
c000fa3e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa49:	39 c2                	cmp    edx,eax
c000fa4b:	74 13                	je     c000fa60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa4d:	83 ec 0c             	sub    esp,0xc
c000fa50:	68 f8 21 02 c0       	push   0xc00221f8
c000fa55:	e8 3d 1c 00 00       	call   c0011697 <KePanic(char const*)>
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa60:	83 ec 0c             	sub    esp,0xc
c000fa63:	68 73 20 02 c0       	push   0xc0022073
c000fa68:	e8 2a 1c 00 00       	call   c0011697 <KePanic(char const*)>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa7c:	83 c2 2a             	add    edx,0x2a
c000fa7f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa83:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa85:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa88:	89 01                	mov    DWORD PTR [ecx],eax
c000fa8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa8d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa92:	66 90                	xchg   ax,ax
c000fa94:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa99:	e9 3e ff ff ff       	jmp    c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa9e:	66 90                	xchg   ax,ax
c000faa0:	90                   	nop
c000faa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa5:	83 c4 2c             	add    esp,0x2c
c000faa8:	c2 04 00             	ret    0x4
c000faab:	90                   	nop

c000faac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000faac:	83 ec 1c             	sub    esp,0x1c
c000faaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fab3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fab7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fabb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fac0:	88 c8                	mov    al,cl
c000fac2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fac6:	88 d0                	mov    al,dl
c000fac8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000facc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fada:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fadd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fae1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000faf3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000faf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fafa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb03:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb09:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb0d:	83 c0 01             	add    eax,0x1
c000fb10:	88 c1                	mov    cl,al
c000fb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb16:	83 c2 2a             	add    edx,0x2a
c000fb19:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb32:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb40:	8d 50 01             	lea    edx,[eax+0x1]
c000fb43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb47:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb57:	3d 00 02 00 00       	cmp    eax,0x200
c000fb5c:	75 12                	jne    c000fb70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb5e:	83 ec 0c             	sub    esp,0xc
c000fb61:	68 82 20 02 c0       	push   0xc0022082
c000fb66:	e8 2c 1b 00 00       	call   c0011697 <KePanic(char const*)>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	66 90                	xchg   ax,ax
c000fb70:	90                   	nop
c000fb71:	83 c4 1c             	add    esp,0x1c
c000fb74:	c3                   	ret    
c000fb75:	90                   	nop
c000fb76:	66 90                	xchg   ax,ax

c000fb78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb78:	b8 00 00 00 00       	mov    eax,0x0
c000fb7d:	c3                   	ret    
c000fb7e:	66 90                	xchg   ax,ax

c000fb80 <ACPI::detectPCI()>:
c000fb80:	53                   	push   ebx
c000fb81:	83 ec 28             	sub    esp,0x28
c000fb84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb89:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb8e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb99:	83 e0 04             	and    eax,0x4
c000fb9c:	0f b6 c0             	movzx  eax,al
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	74 2d                	je     c000fbd0 <ACPI::detectPCI()+0x50>
c000fba3:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	68 9f 20 02 c0       	push   0xc002209f
c000fbb0:	50                   	push   eax
c000fbb1:	e8 6e f8 ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c000fbb6:	83 c4 10             	add    esp,0x10
c000fbb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbbd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbc2:	74 0c                	je     c000fbd0 <ACPI::detectPCI()+0x50>
c000fbc4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbc9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbce:	66 90                	xchg   ax,ax
c000fbd0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbdc:	8a 00                	mov    al,BYTE PTR [eax]
c000fbde:	0f b6 c0             	movzx  eax,al
c000fbe1:	83 f8 01             	cmp    eax,0x1
c000fbe4:	75 0e                	jne    c000fbf4 <ACPI::detectPCI()+0x74>
c000fbe6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbeb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbf0:	eb 2e                	jmp    c000fc20 <ACPI::detectPCI()+0xa0>
c000fbf2:	66 90                	xchg   ax,ax
c000fbf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf8:	8a 00                	mov    al,BYTE PTR [eax]
c000fbfa:	0f b6 c0             	movzx  eax,al
c000fbfd:	83 f8 02             	cmp    eax,0x2
c000fc00:	75 1e                	jne    c000fc20 <ACPI::detectPCI()+0xa0>
c000fc02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc07:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	74 10                	je     c000fc20 <ACPI::detectPCI()+0xa0>
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	68 28 22 02 c0       	push   0xc0022228
c000fc18:	e8 7a 1a 00 00       	call   c0011697 <KePanic(char const*)>
c000fc1d:	83 c4 10             	add    esp,0x10
c000fc20:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc24:	83 f0 01             	xor    eax,0x1
c000fc27:	0f b6 c0             	movzx  eax,al
c000fc2a:	85 c0                	test   eax,eax
c000fc2c:	74 46                	je     c000fc74 <ACPI::detectPCI()+0xf4>
c000fc2e:	e8 fd 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc3c:	75 0e                	jne    c000fc4c <ACPI::detectPCI()+0xcc>
c000fc3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc43:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc48:	eb 2a                	jmp    c000fc74 <ACPI::detectPCI()+0xf4>
c000fc4a:	66 90                	xchg   ax,ax
c000fc4c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc51:	75 21                	jne    c000fc74 <ACPI::detectPCI()+0xf4>
c000fc53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc58:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	74 13                	je     c000fc74 <ACPI::detectPCI()+0xf4>
c000fc61:	83 ec 0c             	sub    esp,0xc
c000fc64:	68 28 22 02 c0       	push   0xc0022228
c000fc69:	e8 29 1a 00 00       	call   c0011697 <KePanic(char const*)>
c000fc6e:	83 c4 10             	add    esp,0x10
c000fc71:	8d 76 00             	lea    esi,[esi+0x0]
c000fc74:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	0f 84 87 00 00 00    	je     c000fd08 <ACPI::detectPCI()+0x188>
c000fc81:	83 ec 0c             	sub    esp,0xc
c000fc84:	68 a4 20 02 c0       	push   0xc00220a4
c000fc89:	e8 09 13 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000fc8e:	83 c4 10             	add    esp,0x10
c000fc91:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fca0:	e8 31 7e ff ff       	call   c0007ad6 <malloc>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 c3                	mov    ebx,eax
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	53                   	push   ebx
c000fcae:	e8 a1 b5 00 00       	call   c001b254 <PCI::PCI()>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcbe:	83 ec 08             	sub    esp,0x8
c000fcc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcc5:	50                   	push   eax
c000fcc6:	e8 1b cd ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd4:	83 c0 08             	add    eax,0x8
c000fcd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fcde:	85 d2                	test   edx,edx
c000fce0:	74 0a                	je     c000fcec <ACPI::detectPCI()+0x16c>
c000fce2:	ba 01 00 00 00       	mov    edx,0x1
c000fce7:	eb 0b                	jmp    c000fcf4 <ACPI::detectPCI()+0x174>
c000fce9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcec:	ba 02 00 00 00       	mov    edx,0x2
c000fcf1:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	52                   	push   edx
c000fcf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcfd:	ff d0                	call   eax
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	e9 91 00 00 00       	jmp    c000fd98 <ACPI::detectPCI()+0x218>
c000fd07:	90                   	nop
c000fd08:	83 ec 0c             	sub    esp,0xc
c000fd0b:	68 bc 20 02 c0       	push   0xc00220bc
c000fd10:	e8 82 12 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd26:	e8 ab 7d ff ff       	call   c0007ad6 <malloc>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	89 c3                	mov    ebx,eax
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	53                   	push   ebx
c000fd34:	e8 b5 c0 00 00       	call   c001bdee <IDE::IDE()>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd44:	83 ec 08             	sub    esp,0x8
c000fd47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd4b:	50                   	push   eax
c000fd4c:	e8 95 cc ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd82:	83 c0 08             	add    eax,0x8
c000fd85:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd87:	6a 00                	push   0x0
c000fd89:	6a 00                	push   0x0
c000fd8b:	6a 00                	push   0x0
c000fd8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd91:	ff d0                	call   eax
c000fd93:	83 c4 10             	add    esp,0x10
c000fd96:	66 90                	xchg   ax,ax
c000fd98:	90                   	nop
c000fd99:	83 c4 28             	add    esp,0x28
c000fd9c:	5b                   	pop    ebx
c000fd9d:	c3                   	ret    
c000fd9e:	66 90                	xchg   ax,ax

c000fda0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fda0:	83 ec 1c             	sub    esp,0x1c
c000fda3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdb3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdb8:	83 ec 08             	sub    esp,0x8
c000fdbb:	52                   	push   edx
c000fdbc:	50                   	push   eax
c000fdbd:	e8 d8 73 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdc9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdd3:	83 ec 04             	sub    esp,0x4
c000fdd6:	6a 01                	push   0x1
c000fdd8:	52                   	push   edx
c000fdd9:	50                   	push   eax
c000fdda:	e8 d5 74 ff ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	90                   	nop
c000fde3:	83 c4 1c             	add    esp,0x1c
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <ACPI::sleep()>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf0:	85 c0                	test   eax,eax
c000fdf2:	74 08                	je     c000fdfc <ACPI::sleep()+0x14>
c000fdf4:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf9:	ff d0                	call   eax
c000fdfb:	90                   	nop
c000fdfc:	90                   	nop
c000fdfd:	83 c4 0c             	add    esp,0xc
c000fe00:	c3                   	ret    
c000fe01:	90                   	nop
c000fe02:	66 90                	xchg   ax,ax

c000fe04 <ACPI::open(int, int, void*)>:
c000fe04:	57                   	push   edi
c000fe05:	56                   	push   esi
c000fe06:	53                   	push   ebx
c000fe07:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe0d:	83 ec 0c             	sub    esp,0xc
c000fe10:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe17:	e8 64 fd ff ff       	call   c000fb80 <ACPI::detectPCI()>
c000fe1c:	83 c4 10             	add    esp,0x10
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	68 50 22 02 c0       	push   0xc0022250
c000fe27:	e8 6b 11 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe34:	8a 00                	mov    al,BYTE PTR [eax]
c000fe36:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe3d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe45:	83 f8 01             	cmp    eax,0x1
c000fe48:	75 12                	jne    c000fe5c <ACPI::open(int, int, void*)+0x58>
c000fe4a:	83 ec 0c             	sub    esp,0xc
c000fe4d:	68 d1 20 02 c0       	push   0xc00220d1
c000fe52:	e8 4c 4e 00 00       	call   c0014ca3 <Thr::loadKernelSymbolTable(char const*)>
c000fe57:	83 c4 10             	add    esp,0x10
c000fe5a:	eb 34                	jmp    c000fe90 <ACPI::open(int, int, void*)+0x8c>
c000fe5c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe64:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe69:	75 15                	jne    c000fe80 <ACPI::open(int, int, void*)+0x7c>
c000fe6b:	83 ec 0c             	sub    esp,0xc
c000fe6e:	68 ef 20 02 c0       	push   0xc00220ef
c000fe73:	e8 2b 4e 00 00       	call   c0014ca3 <Thr::loadKernelSymbolTable(char const*)>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	eb 13                	jmp    c000fe90 <ACPI::open(int, int, void*)+0x8c>
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	68 0d 21 02 c0       	push   0xc002210d
c000fe88:	e8 0a 18 00 00       	call   c0011697 <KePanic(char const*)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe98:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fea3:	83 ec 0c             	sub    esp,0xc
c000fea6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fead:	e8 24 7c ff ff       	call   c0007ad6 <malloc>
c000feb2:	83 c4 10             	add    esp,0x10
c000feb5:	89 c3                	mov    ebx,eax
c000feb7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000febc:	83 ec 04             	sub    esp,0x4
c000febf:	50                   	push   eax
c000fec0:	68 27 21 02 c0       	push   0xc0022127
c000fec5:	53                   	push   ebx
c000fec6:	e8 a1 bc ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fed5:	83 ec 08             	sub    esp,0x8
c000fed8:	6a 01                	push   0x1
c000feda:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fee1:	e8 a4 bc ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fef0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fef8:	75 16                	jne    c000ff10 <ACPI::open(int, int, void*)+0x10c>
c000fefa:	83 ec 0c             	sub    esp,0xc
c000fefd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff04:	e8 df bc ff ff       	call   c000bbe8 <File::close()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	eb 0a                	jmp    c000ff18 <ACPI::open(int, int, void*)+0x114>
c000ff0e:	66 90                	xchg   ax,ax
c000ff10:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff18:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff20:	74 1e                	je     c000ff40 <ACPI::open(int, int, void*)+0x13c>
c000ff22:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff29:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2b:	83 c0 08             	add    eax,0x8
c000ff2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff30:	83 ec 0c             	sub    esp,0xc
c000ff33:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff3a:	ff d0                	call   eax
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	90                   	nop
c000ff40:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff47:	83 f0 01             	xor    eax,0x1
c000ff4a:	0f b6 c0             	movzx  eax,al
c000ff4d:	85 c0                	test   eax,eax
c000ff4f:	74 43                	je     c000ff94 <ACPI::open(int, int, void*)+0x190>
c000ff51:	83 ec 0c             	sub    esp,0xc
c000ff54:	68 45 21 02 c0       	push   0xc0022145
c000ff59:	e8 39 10 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	83 ec 04             	sub    esp,0x4
c000ff64:	6a 0c                	push   0xc
c000ff66:	68 60 21 02 c0       	push   0xc0022160
c000ff6b:	68 71 21 02 c0       	push   0xc0022171
c000ff70:	e8 6b 3f 00 00       	call   c0013ee0 <Reg::readIntWithDefault(char*, char*, int)>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff7f:	83 ec 0c             	sub    esp,0xc
c000ff82:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff89:	e8 ce 98 ff ff       	call   c000985c <Virt::setupPageSwapping(int)>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	8d 76 00             	lea    esi,[esi+0x0]
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	68 ff 0b 02 c0       	push   0xc0020bff
c000ff9c:	e8 f6 0f 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffab:	83 ec 08             	sub    esp,0x8
c000ffae:	6a 13                	push   0x13
c000ffb0:	50                   	push   eax
c000ffb1:	e8 48 cd ff ff       	call   c000ccfe <getDevicesOfType(DeviceType)>
c000ffb6:	83 c4 0c             	add    esp,0xc
c000ffb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffc6:	50                   	push   eax
c000ffc7:	e8 04 00 01 00       	call   c001ffd0 <LinkedList<Device>::isEmpty()>
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	83 f0 01             	xor    eax,0x1
c000ffd2:	0f b6 c0             	movzx  eax,al
c000ffd5:	85 c0                	test   eax,eax
c000ffd7:	0f 84 47 01 00 00    	je     c0010124 <ACPI::open(int, int, void*)+0x320>
c000ffdd:	83 ec 0c             	sub    esp,0xc
c000ffe0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffe7:	50                   	push   eax
c000ffe8:	e8 ff ff 00 00       	call   c001ffec <LinkedList<Device>::getFirstElement()>
c000ffed:	83 c4 10             	add    esp,0x10
c000fff0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fff7:	83 ec 0c             	sub    esp,0xc
c000fffa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010001:	50                   	push   eax
c0010002:	e8 ed ff 00 00       	call   c001fff4 <LinkedList<Device>::removeFirst()>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010011:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010018:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001001f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010023:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010029:	ba 09 00 00 00       	mov    edx,0x9
c001002e:	fc                   	cld    
c001002f:	89 c7                	mov    edi,eax
c0010031:	89 de                	mov    esi,ebx
c0010033:	89 d1                	mov    ecx,edx
c0010035:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010037:	83 ec 08             	sub    esp,0x8
c001003a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001003e:	50                   	push   eax
c001003f:	83 ec 24             	sub    esp,0x24
c0010042:	89 e0                	mov    eax,esp
c0010044:	89 c3                	mov    ebx,eax
c0010046:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001004a:	ba 09 00 00 00       	mov    edx,0x9
c001004f:	89 df                	mov    edi,ebx
c0010051:	89 c6                	mov    esi,eax
c0010053:	89 d1                	mov    ecx,edx
c0010055:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010057:	e8 e2 b6 00 00       	call   c001b73e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001005c:	83 c4 30             	add    esp,0x30
c001005f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010066:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001006e:	0f 84 48 ff ff ff    	je     c000ffbc <ACPI::open(int, int, void*)+0x1b8>
c0010074:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001007f:	83 ec 0c             	sub    esp,0xc
c0010082:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010089:	e8 48 7a ff ff       	call   c0007ad6 <malloc>
c001008e:	83 c4 10             	add    esp,0x10
c0010091:	89 c3                	mov    ebx,eax
c0010093:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010098:	83 ec 04             	sub    esp,0x4
c001009b:	50                   	push   eax
c001009c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100a3:	53                   	push   ebx
c00100a4:	e8 c3 ba ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100b3:	83 ec 0c             	sub    esp,0xc
c00100b6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100bd:	e8 8c bd ff ff       	call   c000be4e <File::exists()>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	0f b6 c0             	movzx  eax,al
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 28                	je     c00100f4 <ACPI::open(int, int, void*)+0x2f0>
c00100cc:	83 ec 08             	sub    esp,0x8
c00100cf:	6a 01                	push   0x1
c00100d1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100d8:	e8 40 56 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	83 ec 08             	sub    esp,0x8
c00100e3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100ea:	50                   	push   eax
c00100eb:	e8 5e 58 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	90                   	nop
c00100f4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00100fc:	0f 84 ba fe ff ff    	je     c000ffbc <ACPI::open(int, int, void*)+0x1b8>
c0010102:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010109:	8b 00                	mov    eax,DWORD PTR [eax]
c001010b:	83 c0 08             	add    eax,0x8
c001010e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001011a:	ff d0                	call   eax
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	e9 98 fe ff ff       	jmp    c000ffbc <ACPI::open(int, int, void*)+0x1b8>
c0010124:	83 ec 0c             	sub    esp,0xc
c0010127:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001012e:	50                   	push   eax
c001012f:	e8 98 fe 00 00       	call   c001ffcc <LinkedList<Device>::~LinkedList()>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001013d:	83 ec 08             	sub    esp,0x8
c0010140:	6a 01                	push   0x1
c0010142:	68 78 21 02 c0       	push   0xc0022178
c0010147:	e8 d1 55 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	83 ec 08             	sub    esp,0x8
c0010152:	53                   	push   ebx
c0010153:	50                   	push   eax
c0010154:	e8 f5 57 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010161:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010167:	83 e0 04             	and    eax,0x4
c001016a:	0f b6 c0             	movzx  eax,al
c001016d:	85 c0                	test   eax,eax
c001016f:	0f 84 1b 01 00 00    	je     c0010290 <ACPI::open(int, int, void*)+0x48c>
c0010175:	83 ec 0c             	sub    esp,0xc
c0010178:	68 95 21 02 c0       	push   0xc0022195
c001017d:	e8 15 0e 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0010182:	83 c4 10             	add    esp,0x10
c0010185:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0010190:	83 ec 0c             	sub    esp,0xc
c0010193:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001019a:	e8 37 79 ff ff       	call   c0007ad6 <malloc>
c001019f:	83 c4 10             	add    esp,0x10
c00101a2:	89 c3                	mov    ebx,eax
c00101a4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101a9:	83 ec 04             	sub    esp,0x4
c00101ac:	50                   	push   eax
c00101ad:	68 b2 21 02 c0       	push   0xc00221b2
c00101b2:	53                   	push   ebx
c00101b3:	e8 b4 b9 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c00101b8:	83 c4 10             	add    esp,0x10
c00101bb:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101ca:	74 20                	je     c00101ec <ACPI::open(int, int, void*)+0x3e8>
c00101cc:	83 ec 0c             	sub    esp,0xc
c00101cf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101d6:	e8 73 bc ff ff       	call   c000be4e <File::exists()>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	0f b6 c0             	movzx  eax,al
c00101e1:	85 c0                	test   eax,eax
c00101e3:	74 07                	je     c00101ec <ACPI::open(int, int, void*)+0x3e8>
c00101e5:	b0 01                	mov    al,0x1
c00101e7:	eb 07                	jmp    c00101f0 <ACPI::open(int, int, void*)+0x3ec>
c00101e9:	8d 76 00             	lea    esi,[esi+0x0]
c00101ec:	b0 00                	mov    al,0x0
c00101ee:	66 90                	xchg   ax,ax
c00101f0:	0f b6 c0             	movzx  eax,al
c00101f3:	85 c0                	test   eax,eax
c00101f5:	74 25                	je     c001021c <ACPI::open(int, int, void*)+0x418>
c00101f7:	83 ec 08             	sub    esp,0x8
c00101fa:	6a 01                	push   0x1
c00101fc:	68 b2 21 02 c0       	push   0xc00221b2
c0010201:	e8 17 55 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c0010206:	83 c4 10             	add    esp,0x10
c0010209:	83 ec 08             	sub    esp,0x8
c001020c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010213:	50                   	push   eax
c0010214:	e8 35 57 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010224:	74 2a                	je     c0010250 <ACPI::open(int, int, void*)+0x44c>
c0010226:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001022e:	74 20                	je     c0010250 <ACPI::open(int, int, void*)+0x44c>
c0010230:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010237:	8b 00                	mov    eax,DWORD PTR [eax]
c0010239:	83 c0 08             	add    eax,0x8
c001023c:	8b 00                	mov    eax,DWORD PTR [eax]
c001023e:	83 ec 0c             	sub    esp,0xc
c0010241:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010248:	ff d0                	call   eax
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	8d 76 00             	lea    esi,[esi+0x0]
c0010250:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010255:	83 ec 08             	sub    esp,0x8
c0010258:	68 cf 21 02 c0       	push   0xc00221cf
c001025d:	50                   	push   eax
c001025e:	e8 c1 f1 ff ff       	call   c000f424 <findDataTable(unsigned char*, char*)>
c0010263:	83 c4 10             	add    esp,0x10
c0010266:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001026d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010275:	74 19                	je     c0010290 <ACPI::open(int, int, void*)+0x48c>
c0010277:	83 ec 08             	sub    esp,0x8
c001027a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010281:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010288:	e8 13 fb ff ff       	call   c000fda0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	b8 00 00 00 00       	mov    eax,0x0
c0010295:	81 c4 70 01 00 00    	add    esp,0x170
c001029b:	5b                   	pop    ebx
c001029c:	5e                   	pop    esi
c001029d:	5f                   	pop    edi
c001029e:	c3                   	ret    
c001029f:	90                   	nop

c00102a0 <CPU::close(int, int, void*)>:
c00102a0:	31 c0                	xor    eax,eax
c00102a2:	c3                   	ret    
c00102a3:	90                   	nop

c00102a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102a4:	60                   	pusha  
c00102a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102b1:	9c                   	pushf  
c00102b2:	fa                   	cli    
c00102b3:	0f 09                	wbinvd 
c00102b5:	0f 30                	wrmsr  
c00102b7:	9d                   	popf   
c00102b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102bc:	89 02                	mov    DWORD PTR [edx],eax
c00102be:	61                   	popa   
c00102bf:	c3                   	ret    

c00102c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102c0:	60                   	pusha  
c00102c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102c5:	9c                   	pushf  
c00102c6:	fa                   	cli    
c00102c7:	0f 09                	wbinvd 
c00102c9:	31 c0                	xor    eax,eax
c00102cb:	31 d2                	xor    edx,edx
c00102cd:	0f 32                	rdmsr  
c00102cf:	9d                   	popf   
c00102d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d4:	89 02                	mov    DWORD PTR [edx],eax
c00102d6:	61                   	popa   
c00102d7:	c3                   	ret    

c00102d8 <CPU::AMD_K6_writeback(int, int, int)>:
c00102d8:	56                   	push   esi
c00102d9:	53                   	push   ebx
c00102da:	83 ec 10             	sub    esp,0x10
c00102dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102e1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00102e6:	75 5d                	jne    c0010345 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102e8:	83 f8 08             	cmp    eax,0x8
c00102eb:	75 09                	jne    c00102f6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00102ed:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00102f2:	7e 13                	jle    c0010307 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102f4:	eb 30                	jmp    c0010326 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102f6:	83 f8 06             	cmp    eax,0x6
c00102f9:	7c 4a                	jl     c0010345 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102fb:	83 f8 07             	cmp    eax,0x7
c00102fe:	7e 07                	jle    c0010307 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010300:	83 f8 09             	cmp    eax,0x9
c0010303:	74 21                	je     c0010326 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010305:	eb 3e                	jmp    c0010345 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010307:	89 e6                	mov    esi,esp
c0010309:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001030f:	56                   	push   esi
c0010310:	c1 eb 15             	shr    ebx,0x15
c0010313:	68 82 00 00 c0       	push   0xc0000082
c0010318:	83 e3 7e             	and    ebx,0x7e
c001031b:	e8 a0 ff ff ff       	call   c00102c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010320:	56                   	push   esi
c0010321:	6a 00                	push   0x0
c0010323:	53                   	push   ebx
c0010324:	eb 12                	jmp    c0010338 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010326:	89 e3                	mov    ebx,esp
c0010328:	53                   	push   ebx
c0010329:	68 82 00 00 c0       	push   0xc0000082
c001032e:	e8 8d ff ff ff       	call   c00102c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010333:	53                   	push   ebx
c0010334:	6a 00                	push   0x0
c0010336:	6a 00                	push   0x0
c0010338:	68 82 00 00 c0       	push   0xc0000082
c001033d:	e8 62 ff ff ff       	call   c00102a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010342:	83 c4 18             	add    esp,0x18
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	5b                   	pop    ebx
c0010349:	5e                   	pop    esi
c001034a:	c3                   	ret    
c001034b:	90                   	nop

c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001034c:	55                   	push   ebp
c001034d:	57                   	push   edi
c001034e:	56                   	push   esi
c001034f:	53                   	push   ebx
c0010350:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010354:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010358:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001035c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010360:	39 05 38 38 02 c0    	cmp    DWORD PTR ds:0xc0023838,eax
c0010366:	75 23                	jne    c001038b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010368:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c001036d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010371:	89 06                	mov    DWORD PTR [esi],eax
c0010373:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010378:	89 07                	mov    DWORD PTR [edi],eax
c001037a:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c001037f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010382:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010387:	89 02                	mov    DWORD PTR [edx],eax
c0010389:	eb 3f                	jmp    c00103ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001038b:	31 c9                	xor    ecx,ecx
c001038d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010391:	0f a2                	cpuid  
c0010393:	89 06                	mov    DWORD PTR [esi],eax
c0010395:	89 1f                	mov    DWORD PTR [edi],ebx
c0010397:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001039b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001039e:	89 10                	mov    DWORD PTR [eax],edx
c00103a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103a4:	a3 38 38 02 c0       	mov    ds:0xc0023838,eax
c00103a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00103ab:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00103b2:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103ba:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c5:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103ca:	5b                   	pop    ebx
c00103cb:	5e                   	pop    esi
c00103cc:	5f                   	pop    edi
c00103cd:	5d                   	pop    ebp
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <CPU::cpuidCheckEDX(unsigned int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d7:	50                   	push   eax
c00103d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103dc:	50                   	push   eax
c00103dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e1:	50                   	push   eax
c00103e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e6:	50                   	push   eax
c00103e7:	6a 01                	push   0x1
c00103e9:	e8 5e ff ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00103f6:	0f 95 c0             	setne  al
c00103f9:	83 c4 24             	add    esp,0x24
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <CPU::cpuidCheckECX(unsigned int)>:
c00103fe:	83 ec 10             	sub    esp,0x10
c0010401:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010405:	50                   	push   eax
c0010406:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040a:	50                   	push   eax
c001040b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040f:	50                   	push   eax
c0010410:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010414:	50                   	push   eax
c0010415:	6a 01                	push   0x1
c0010417:	e8 30 ff ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001041c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010420:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010424:	0f 95 c0             	setne  al
c0010427:	83 c4 24             	add    esp,0x24
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001042c:	83 ec 10             	sub    esp,0x10
c001042f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010433:	50                   	push   eax
c0010434:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010438:	50                   	push   eax
c0010439:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043d:	50                   	push   eax
c001043e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010442:	50                   	push   eax
c0010443:	6a 07                	push   0x7
c0010445:	e8 02 ff ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001044a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001044e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010452:	0f 95 c0             	setne  al
c0010455:	83 c4 24             	add    esp,0x24
c0010458:	c3                   	ret    
c0010459:	90                   	nop

c001045a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001045a:	83 ec 10             	sub    esp,0x10
c001045d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010461:	50                   	push   eax
c0010462:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010466:	50                   	push   eax
c0010467:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046b:	50                   	push   eax
c001046c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010470:	50                   	push   eax
c0010471:	6a 07                	push   0x7
c0010473:	e8 d4 fe ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010478:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001047c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010480:	0f 95 c0             	setne  al
c0010483:	83 c4 24             	add    esp,0x24
c0010486:	c3                   	ret    
c0010487:	90                   	nop

c0010488 <CPU::CPU()>:
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048f:	83 ec 08             	sub    esp,0x8
c0010492:	68 8d 23 02 c0       	push   0xc002238d
c0010497:	50                   	push   eax
c0010498:	e8 e1 c6 ff ff       	call   c000cb7e <Device::Device(char const*)>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	ba 20 24 02 c0       	mov    edx,0xc0022420
c00104a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a9:	89 10                	mov    DWORD PTR [eax],edx
c00104ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104af:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bd:	05 78 01 00 00       	add    eax,0x178
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	50                   	push   eax
c00104c6:	e8 b3 6e ff ff       	call   c000737e <GDT::GDT()>
c00104cb:	83 c4 10             	add    esp,0x10
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	05 7c 09 00 00       	add    eax,0x97c
c00104d7:	83 ec 0c             	sub    esp,0xc
c00104da:	50                   	push   eax
c00104db:	e8 ec 70 ff ff       	call   c00075cc <IDT::IDT()>
c00104e0:	83 c4 10             	add    esp,0x10
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	05 7c 11 00 00       	add    eax,0x117c
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	50                   	push   eax
c00104f0:	e8 6f 8a ff ff       	call   c0008f64 <TSS::TSS()>
c00104f5:	83 c4 10             	add    esp,0x10
c00104f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010507:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010511:	90                   	nop
c0010512:	83 c4 0c             	add    esp,0xc
c0010515:	c3                   	ret    

c0010516 <CPU::displayFeatures()>:
c0010516:	c3                   	ret    
c0010517:	90                   	nop

c0010518 <CPU::detectFeatures()>:
c0010518:	55                   	push   ebp
c0010519:	57                   	push   edi
c001051a:	56                   	push   esi
c001051b:	53                   	push   ebx
c001051c:	83 ec 30             	sub    esp,0x30
c001051f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010523:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001052d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010534:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001053a:	6a 0d                	push   0xd
c001053c:	6a 00                	push   0x0
c001053e:	55                   	push   ebp
c001053f:	e8 ac ff fe ff       	call   c00004f0 <memset>
c0010544:	83 c4 10             	add    esp,0x10
c0010547:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001054c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010553:	0f 84 db 05 00 00    	je     c0010b34 <CPU::detectFeatures()+0x61c>
c0010559:	83 ec 0c             	sub    esp,0xc
c001055c:	89 ef                	mov    edi,ebp
c001055e:	6a 10                	push   0x10
c0010560:	e8 6b fe ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0010565:	83 e0 01             	and    eax,0x1
c0010568:	8d 14 00             	lea    edx,[eax+eax*1]
c001056b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010571:	83 e0 fd             	and    eax,0xfffffffd
c0010574:	09 d0                	or     eax,edx
c0010576:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001057c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010583:	e8 48 fe ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0010588:	83 e0 01             	and    eax,0x1
c001058b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010592:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010598:	83 e0 fb             	and    eax,0xfffffffb
c001059b:	09 d0                	or     eax,edx
c001059d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105a3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105aa:	e8 21 fe ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c00105af:	83 e0 01             	and    eax,0x1
c00105b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105bf:	83 e0 f7             	and    eax,0xfffffff7
c00105c2:	09 d0                	or     eax,edx
c00105c4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105ca:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00105d1:	e8 fa fd ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c00105d6:	83 e0 01             	and    eax,0x1
c00105d9:	c1 e0 04             	shl    eax,0x4
c00105dc:	89 c2                	mov    edx,eax
c00105de:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105e4:	83 e0 ef             	and    eax,0xffffffef
c00105e7:	09 d0                	or     eax,edx
c00105e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105ef:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00105f6:	e8 d5 fd ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c00105fb:	83 e0 01             	and    eax,0x1
c00105fe:	c1 e0 05             	shl    eax,0x5
c0010601:	89 c2                	mov    edx,eax
c0010603:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010609:	83 e0 df             	and    eax,0xffffffdf
c001060c:	09 d0                	or     eax,edx
c001060e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010614:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001061b:	e8 b0 fd ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0010620:	83 e0 01             	and    eax,0x1
c0010623:	8d 14 00             	lea    edx,[eax+eax*1]
c0010626:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001062c:	83 e0 fd             	and    eax,0xfffffffd
c001062f:	09 d0                	or     eax,edx
c0010631:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010637:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001063e:	e8 8d fd ff ff       	call   c00103d0 <CPU::cpuidCheckEDX(unsigned int)>
c0010643:	83 e0 01             	and    eax,0x1
c0010646:	c1 e0 06             	shl    eax,0x6
c0010649:	89 c2                	mov    edx,eax
c001064b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010651:	83 e0 bf             	and    eax,0xffffffbf
c0010654:	09 d0                	or     eax,edx
c0010656:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001065c:	58                   	pop    eax
c001065d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010661:	50                   	push   eax
c0010662:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010666:	50                   	push   eax
c0010667:	8d 74 24 28          	lea    esi,[esp+0x28]
c001066b:	56                   	push   esi
c001066c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010670:	50                   	push   eax
c0010671:	6a 00                	push   0x0
c0010673:	e8 d4 fc ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010678:	b8 04 00 00 00       	mov    eax,0x4
c001067d:	89 c1                	mov    ecx,eax
c001067f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010681:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010687:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001068b:	89 c1                	mov    ecx,eax
c001068d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001068f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010695:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010699:	89 c1                	mov    ecx,eax
c001069b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001069d:	83 c4 18             	add    esp,0x18
c00106a0:	68 9c 22 02 c0       	push   0xc002229c
c00106a5:	55                   	push   ebp
c00106a6:	e8 a5 00 ff ff       	call   c0000750 <strcmp>
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	85 c0                	test   eax,eax
c00106b0:	75 0f                	jne    c00106c1 <CPU::detectFeatures()+0x1a9>
c00106b2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106bc:	e9 22 02 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c00106c1:	50                   	push   eax
c00106c2:	50                   	push   eax
c00106c3:	68 a9 22 02 c0       	push   0xc00222a9
c00106c8:	55                   	push   ebp
c00106c9:	e8 82 00 ff ff       	call   c0000750 <strcmp>
c00106ce:	83 c4 10             	add    esp,0x10
c00106d1:	85 c0                	test   eax,eax
c00106d3:	74 dd                	je     c00106b2 <CPU::detectFeatures()+0x19a>
c00106d5:	50                   	push   eax
c00106d6:	50                   	push   eax
c00106d7:	68 b6 22 02 c0       	push   0xc00222b6
c00106dc:	55                   	push   ebp
c00106dd:	e8 6e 00 ff ff       	call   c0000750 <strcmp>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	85 c0                	test   eax,eax
c00106e7:	74 2a                	je     c0010713 <CPU::detectFeatures()+0x1fb>
c00106e9:	50                   	push   eax
c00106ea:	50                   	push   eax
c00106eb:	68 c3 22 02 c0       	push   0xc00222c3
c00106f0:	55                   	push   ebp
c00106f1:	e8 5a 00 ff ff       	call   c0000750 <strcmp>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	85 c0                	test   eax,eax
c00106fb:	74 16                	je     c0010713 <CPU::detectFeatures()+0x1fb>
c00106fd:	50                   	push   eax
c00106fe:	50                   	push   eax
c00106ff:	68 d0 22 02 c0       	push   0xc00222d0
c0010704:	55                   	push   ebp
c0010705:	e8 46 00 ff ff       	call   c0000750 <strcmp>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	85 c0                	test   eax,eax
c001070f:	74 48                	je     c0010759 <CPU::detectFeatures()+0x241>
c0010711:	eb 0f                	jmp    c0010722 <CPU::detectFeatures()+0x20a>
c0010713:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001071d:	e9 c1 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c0010722:	50                   	push   eax
c0010723:	50                   	push   eax
c0010724:	68 dd 22 02 c0       	push   0xc00222dd
c0010729:	55                   	push   ebp
c001072a:	e8 21 00 ff ff       	call   c0000750 <strcmp>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	85 c0                	test   eax,eax
c0010734:	74 23                	je     c0010759 <CPU::detectFeatures()+0x241>
c0010736:	57                   	push   edi
c0010737:	57                   	push   edi
c0010738:	68 ea 22 02 c0       	push   0xc00222ea
c001073d:	55                   	push   ebp
c001073e:	e8 0d 00 ff ff       	call   c0000750 <strcmp>
c0010743:	83 c4 10             	add    esp,0x10
c0010746:	85 c0                	test   eax,eax
c0010748:	75 1e                	jne    c0010768 <CPU::detectFeatures()+0x250>
c001074a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010754:	e9 8a 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c0010759:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010763:	e9 7b 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c0010768:	56                   	push   esi
c0010769:	56                   	push   esi
c001076a:	68 f7 22 02 c0       	push   0xc00222f7
c001076f:	55                   	push   ebp
c0010770:	e8 db ff fe ff       	call   c0000750 <strcmp>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	85 c0                	test   eax,eax
c001077a:	75 0f                	jne    c001078b <CPU::detectFeatures()+0x273>
c001077c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010786:	e9 58 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c001078b:	51                   	push   ecx
c001078c:	51                   	push   ecx
c001078d:	68 b6 22 02 c0       	push   0xc00222b6
c0010792:	55                   	push   ebp
c0010793:	e8 b8 ff fe ff       	call   c0000750 <strcmp>
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	85 c0                	test   eax,eax
c001079d:	75 0f                	jne    c00107ae <CPU::detectFeatures()+0x296>
c001079f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107a9:	e9 35 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c00107ae:	52                   	push   edx
c00107af:	52                   	push   edx
c00107b0:	68 04 23 02 c0       	push   0xc0022304
c00107b5:	55                   	push   ebp
c00107b6:	e8 95 ff fe ff       	call   c0000750 <strcmp>
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	85 c0                	test   eax,eax
c00107c0:	75 0f                	jne    c00107d1 <CPU::detectFeatures()+0x2b9>
c00107c2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107cc:	e9 12 01 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c00107d1:	50                   	push   eax
c00107d2:	50                   	push   eax
c00107d3:	68 11 23 02 c0       	push   0xc0022311
c00107d8:	55                   	push   ebp
c00107d9:	e8 72 ff fe ff       	call   c0000750 <strcmp>
c00107de:	83 c4 10             	add    esp,0x10
c00107e1:	85 c0                	test   eax,eax
c00107e3:	75 0f                	jne    c00107f4 <CPU::detectFeatures()+0x2dc>
c00107e5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00107ef:	e9 ef 00 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c00107f4:	50                   	push   eax
c00107f5:	50                   	push   eax
c00107f6:	68 1e 23 02 c0       	push   0xc002231e
c00107fb:	55                   	push   ebp
c00107fc:	e8 4f ff fe ff       	call   c0000750 <strcmp>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	85 c0                	test   eax,eax
c0010806:	75 0f                	jne    c0010817 <CPU::detectFeatures()+0x2ff>
c0010808:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010812:	e9 cc 00 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c0010817:	50                   	push   eax
c0010818:	50                   	push   eax
c0010819:	68 2b 23 02 c0       	push   0xc002232b
c001081e:	55                   	push   ebp
c001081f:	e8 2c ff fe ff       	call   c0000750 <strcmp>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	85 c0                	test   eax,eax
c0010829:	75 0f                	jne    c001083a <CPU::detectFeatures()+0x322>
c001082b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010835:	e9 a9 00 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	68 38 23 02 c0       	push   0xc0022338
c0010841:	55                   	push   ebp
c0010842:	e8 09 ff fe ff       	call   c0000750 <strcmp>
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	85 c0                	test   eax,eax
c001084c:	75 0f                	jne    c001085d <CPU::detectFeatures()+0x345>
c001084e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010858:	e9 86 00 00 00       	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c001085d:	50                   	push   eax
c001085e:	50                   	push   eax
c001085f:	68 45 23 02 c0       	push   0xc0022345
c0010864:	55                   	push   ebp
c0010865:	e8 e6 fe fe ff       	call   c0000750 <strcmp>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	85 c0                	test   eax,eax
c001086f:	75 0c                	jne    c001087d <CPU::detectFeatures()+0x365>
c0010871:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001087b:	eb 66                	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c001087d:	50                   	push   eax
c001087e:	50                   	push   eax
c001087f:	68 52 23 02 c0       	push   0xc0022352
c0010884:	55                   	push   ebp
c0010885:	e8 c6 fe fe ff       	call   c0000750 <strcmp>
c001088a:	83 c4 10             	add    esp,0x10
c001088d:	85 c0                	test   eax,eax
c001088f:	75 0c                	jne    c001089d <CPU::detectFeatures()+0x385>
c0010891:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001089b:	eb 46                	jmp    c00108e3 <CPU::detectFeatures()+0x3cb>
c001089d:	57                   	push   edi
c001089e:	57                   	push   edi
c001089f:	68 5f 23 02 c0       	push   0xc002235f
c00108a4:	55                   	push   ebp
c00108a5:	e8 a6 fe fe ff       	call   c0000750 <strcmp>
c00108aa:	83 c4 10             	add    esp,0x10
c00108ad:	85 c0                	test   eax,eax
c00108af:	74 e0                	je     c0010891 <CPU::detectFeatures()+0x379>
c00108b1:	56                   	push   esi
c00108b2:	56                   	push   esi
c00108b3:	68 6c 23 02 c0       	push   0xc002236c
c00108b8:	55                   	push   ebp
c00108b9:	e8 92 fe fe ff       	call   c0000750 <strcmp>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	85 c0                	test   eax,eax
c00108c3:	74 cc                	je     c0010891 <CPU::detectFeatures()+0x379>
c00108c5:	51                   	push   ecx
c00108c6:	51                   	push   ecx
c00108c7:	68 79 23 02 c0       	push   0xc0022379
c00108cc:	55                   	push   ebp
c00108cd:	e8 7e fe fe ff       	call   c0000750 <strcmp>
c00108d2:	83 c4 10             	add    esp,0x10
c00108d5:	85 c0                	test   eax,eax
c00108d7:	74 b8                	je     c0010891 <CPU::detectFeatures()+0x379>
c00108d9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00108e3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00108e8:	0f 86 be 00 00 00    	jbe    c00109ac <CPU::detectFeatures()+0x494>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	68 80 00 00 00       	push   0x80
c00108f6:	e8 31 fb ff ff       	call   c001042c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108fb:	83 e0 01             	and    eax,0x1
c00108fe:	c1 e0 06             	shl    eax,0x6
c0010901:	89 c2                	mov    edx,eax
c0010903:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010909:	83 e0 bf             	and    eax,0xffffffbf
c001090c:	09 d0                	or     eax,edx
c001090e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010914:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001091b:	e8 0c fb ff ff       	call   c001042c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010920:	83 e0 01             	and    eax,0x1
c0010923:	c1 e0 04             	shl    eax,0x4
c0010926:	89 c2                	mov    edx,eax
c0010928:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001092e:	83 e0 ef             	and    eax,0xffffffef
c0010931:	09 d0                	or     eax,edx
c0010933:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010939:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010940:	e8 e7 fa ff ff       	call   c001042c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010945:	89 c2                	mov    edx,eax
c0010947:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001094d:	c1 e2 07             	shl    edx,0x7
c0010950:	83 e0 7f             	and    eax,0x7f
c0010953:	09 d0                	or     eax,edx
c0010955:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001095b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010962:	e8 f3 fa ff ff       	call   c001045a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010967:	83 e0 01             	and    eax,0x1
c001096a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010971:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010977:	83 e0 f7             	and    eax,0xfffffff7
c001097a:	09 d0                	or     eax,edx
c001097c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010982:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010989:	e8 cc fa ff ff       	call   c001045a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001098e:	83 c4 10             	add    esp,0x10
c0010991:	83 e0 01             	and    eax,0x1
c0010994:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001099b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109a1:	83 e0 fb             	and    eax,0xfffffffb
c00109a4:	09 d0                	or     eax,edx
c00109a6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109b3:	50                   	push   eax
c00109b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109b8:	50                   	push   eax
c00109b9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109bd:	57                   	push   edi
c00109be:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109c2:	56                   	push   esi
c00109c3:	6a 01                	push   0x1
c00109c5:	e8 82 f9 ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109ce:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00109d4:	89 c1                	mov    ecx,eax
c00109d6:	83 e2 f0             	and    edx,0xfffffff0
c00109d9:	83 e1 0f             	and    ecx,0xf
c00109dc:	09 ca                	or     edx,ecx
c00109de:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00109e4:	89 c2                	mov    edx,eax
c00109e6:	c1 ea 04             	shr    edx,0x4
c00109e9:	83 e2 0f             	and    edx,0xf
c00109ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109f0:	89 d1                	mov    ecx,edx
c00109f2:	83 c4 20             	add    esp,0x20
c00109f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00109fb:	c1 e1 06             	shl    ecx,0x6
c00109fe:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a04:	09 ca                	or     edx,ecx
c0010a06:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a0d:	89 c2                	mov    edx,eax
c0010a0f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a15:	c1 ea 08             	shr    edx,0x8
c0010a18:	83 e1 3f             	and    ecx,0x3f
c0010a1b:	83 e2 0f             	and    edx,0xf
c0010a1e:	89 d5                	mov    ebp,edx
c0010a20:	83 e5 03             	and    ebp,0x3
c0010a23:	c1 e5 06             	shl    ebp,0x6
c0010a26:	09 e9                	or     ecx,ebp
c0010a28:	89 d5                	mov    ebp,edx
c0010a2a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a30:	c1 ed 02             	shr    ebp,0x2
c0010a33:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a39:	83 e1 c0             	and    ecx,0xffffffc0
c0010a3c:	09 e9                	or     ecx,ebp
c0010a3e:	89 c5                	mov    ebp,eax
c0010a40:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a46:	c1 ed 08             	shr    ebp,0x8
c0010a49:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a4f:	83 e5 30             	and    ebp,0x30
c0010a52:	83 e1 cf             	and    ecx,0xffffffcf
c0010a55:	09 e9                	or     ecx,ebp
c0010a57:	83 fa 06             	cmp    edx,0x6
c0010a5a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a60:	74 05                	je     c0010a67 <CPU::detectFeatures()+0x54f>
c0010a62:	83 fa 0f             	cmp    edx,0xf
c0010a65:	75 64                	jne    c0010acb <CPU::detectFeatures()+0x5b3>
c0010a67:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a6d:	89 c1                	mov    ecx,eax
c0010a6f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a75:	c1 e9 10             	shr    ecx,0x10
c0010a78:	c1 e1 04             	shl    ecx,0x4
c0010a7b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a7f:	0f b6 c9             	movzx  ecx,cl
c0010a82:	c1 e1 06             	shl    ecx,0x6
c0010a85:	09 e9                	or     ecx,ebp
c0010a87:	83 fa 0f             	cmp    edx,0xf
c0010a8a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a91:	75 38                	jne    c0010acb <CPU::detectFeatures()+0x5b3>
c0010a93:	c1 e8 14             	shr    eax,0x14
c0010a96:	83 c0 0f             	add    eax,0xf
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	89 c2                	mov    edx,eax
c0010a9e:	c1 e8 02             	shr    eax,0x2
c0010aa1:	83 e2 03             	and    edx,0x3
c0010aa4:	89 d1                	mov    ecx,edx
c0010aa6:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010aac:	c1 e1 06             	shl    ecx,0x6
c0010aaf:	83 e2 3f             	and    edx,0x3f
c0010ab2:	09 ca                	or     edx,ecx
c0010ab4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010aba:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010ac0:	83 e2 c0             	and    edx,0xffffffc0
c0010ac3:	09 d0                	or     eax,edx
c0010ac5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010acb:	83 ec 0c             	sub    esp,0xc
c0010ace:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010ad4:	83 c8 07             	or     eax,0x7
c0010ad7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010add:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010ae1:	50                   	push   eax
c0010ae2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010ae6:	55                   	push   ebp
c0010ae7:	57                   	push   edi
c0010ae8:	56                   	push   esi
c0010ae9:	68 00 00 00 80       	push   0x80000000
c0010aee:	e8 59 f8 ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010af3:	83 c4 20             	add    esp,0x20
c0010af6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010afe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b02:	76 1e                	jbe    c0010b22 <CPU::detectFeatures()+0x60a>
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	50                   	push   eax
c0010b08:	55                   	push   ebp
c0010b09:	57                   	push   edi
c0010b0a:	56                   	push   esi
c0010b0b:	68 01 00 00 80       	push   0x80000001
c0010b10:	e8 37 f8 ff ff       	call   c001034c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b15:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b1f:	83 c4 20             	add    esp,0x20
c0010b22:	52                   	push   edx
c0010b23:	52                   	push   edx
c0010b24:	68 85 23 02 c0       	push   0xc0022385
c0010b29:	53                   	push   ebx
c0010b2a:	e8 41 c0 ff ff       	call   c000cb70 <Device::setName(char const*)>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	eb 69                	jmp    c0010b9d <CPU::detectFeatures()+0x685>
c0010b34:	50                   	push   eax
c0010b35:	50                   	push   eax
c0010b36:	68 ea 22 02 c0       	push   0xc00222ea
c0010b3b:	55                   	push   ebp
c0010b3c:	e8 ff fa fe ff       	call   c0000640 <strcpy>
c0010b41:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b4b:	e8 73 f6 fe ff       	call   c00001c3 <is486>
c0010b50:	83 c4 10             	add    esp,0x10
c0010b53:	85 c0                	test   eax,eax
c0010b55:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b5b:	74 1f                	je     c0010b7c <CPU::detectFeatures()+0x664>
c0010b5d:	83 c8 07             	or     eax,0x7
c0010b60:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b66:	0f 20 c0             	mov    eax,cr0
c0010b69:	83 e0 14             	and    eax,0x14
c0010b6c:	83 f8 04             	cmp    eax,0x4
c0010b6f:	75 10                	jne    c0010b81 <CPU::detectFeatures()+0x669>
c0010b71:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b77:	83 e0 fd             	and    eax,0xfffffffd
c0010b7a:	eb 1b                	jmp    c0010b97 <CPU::detectFeatures()+0x67f>
c0010b7c:	83 e0 f8             	and    eax,0xfffffff8
c0010b7f:	eb df                	jmp    c0010b60 <CPU::detectFeatures()+0x648>
c0010b81:	e8 18 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b86:	83 e0 01             	and    eax,0x1
c0010b89:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b8c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b92:	83 e0 fd             	and    eax,0xfffffffd
c0010b95:	09 d0                	or     eax,edx
c0010b97:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b9d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010ba4:	74 17                	je     c0010bbd <CPU::detectFeatures()+0x6a5>
c0010ba6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010bac:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010bb2:	83 c8 10             	or     eax,0x10
c0010bb5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010bbb:	eb 20                	jmp    c0010bdd <CPU::detectFeatures()+0x6c5>
c0010bbd:	e8 dc f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bc2:	83 e0 01             	and    eax,0x1
c0010bc5:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bc8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bce:	83 e0 fd             	and    eax,0xfffffffd
c0010bd1:	09 d0                	or     eax,edx
c0010bd3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bd9:	a8 02                	test   al,0x2
c0010bdb:	75 c9                	jne    c0010ba6 <CPU::detectFeatures()+0x68e>
c0010bdd:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010be4:	83 c4 2c             	add    esp,0x2c
c0010be7:	5b                   	pop    ebx
c0010be8:	5e                   	pop    esi
c0010be9:	5f                   	pop    edi
c0010bea:	5d                   	pop    ebp
c0010beb:	c3                   	ret    

c0010bec <CPU::setupSMEP()>:
c0010bec:	0f 20 e0             	mov    eax,cr4
c0010bef:	0d 00 00 10 00       	or     eax,0x100000
c0010bf4:	0f 22 e0             	mov    cr4,eax
c0010bf7:	c3                   	ret    

c0010bf8 <CPU::setupUMIP()>:
c0010bf8:	0f 20 e0             	mov    eax,cr4
c0010bfb:	80 cc 08             	or     ah,0x8
c0010bfe:	0f 22 e0             	mov    cr4,eax
c0010c01:	c3                   	ret    

c0010c02 <CPU::setupTSC()>:
c0010c02:	0f 20 e0             	mov    eax,cr4
c0010c05:	83 c8 04             	or     eax,0x4
c0010c08:	0f 22 e0             	mov    cr4,eax
c0010c0b:	c3                   	ret    

c0010c0c <CPU::setupLargePages()>:
c0010c0c:	0f 20 e0             	mov    eax,cr4
c0010c0f:	83 c8 10             	or     eax,0x10
c0010c12:	0f 22 e0             	mov    cr4,eax
c0010c15:	c3                   	ret    

c0010c16 <CPU::setupPAT()>:
c0010c16:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c1b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c22:	74 2c                	je     c0010c50 <CPU::setupPAT()+0x3a>
c0010c24:	53                   	push   ebx
c0010c25:	83 ec 10             	sub    esp,0x10
c0010c28:	68 77 02 00 00       	push   0x277
c0010c2d:	50                   	push   eax
c0010c2e:	e8 af 64 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010c33:	83 e2 f8             	and    edx,0xfffffff8
c0010c36:	83 ca 01             	or     edx,0x1
c0010c39:	52                   	push   edx
c0010c3a:	50                   	push   eax
c0010c3b:	68 77 02 00 00       	push   0x277
c0010c40:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c46:	e8 c3 64 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c4b:	83 c4 28             	add    esp,0x28
c0010c4e:	5b                   	pop    ebx
c0010c4f:	c3                   	ret    
c0010c50:	c3                   	ret    
c0010c51:	90                   	nop

c0010c52 <CPU::setupMTRR()>:
c0010c52:	c3                   	ret    
c0010c53:	90                   	nop

c0010c54 <CPU::setupGlobalPages()>:
c0010c54:	0f 20 e0             	mov    eax,cr4
c0010c57:	0c 80                	or     al,0x80
c0010c59:	0f 22 e0             	mov    cr4,eax
c0010c5c:	c3                   	ret    
c0010c5d:	90                   	nop

c0010c5e <CPU::allowUsermodeDataAccess()>:
c0010c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c62:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c69:	74 03                	je     c0010c6e <CPU::allowUsermodeDataAccess()+0x10>
c0010c6b:	0f 01 cb             	stac   
c0010c6e:	c3                   	ret    
c0010c6f:	90                   	nop

c0010c70 <CPU::prohibitUsermodeDataAccess()>:
c0010c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c74:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c7b:	74 03                	je     c0010c80 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c7d:	0f 01 ca             	clac   
c0010c80:	c3                   	ret    
c0010c81:	90                   	nop

c0010c82 <CPU::setupSMAP()>:
c0010c82:	0f 20 e0             	mov    eax,cr4
c0010c85:	0d 00 00 20 00       	or     eax,0x200000
c0010c8a:	0f 22 e0             	mov    cr4,eax
c0010c8d:	eb e1                	jmp    c0010c70 <CPU::prohibitUsermodeDataAccess()>
c0010c8f:	90                   	nop

c0010c90 <CPU::setupFeatures()>:
c0010c90:	53                   	push   ebx
c0010c91:	83 ec 08             	sub    esp,0x8
c0010c94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c98:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c9f:	74 18                	je     c0010cb9 <CPU::setupFeatures()+0x29>
c0010ca1:	83 ec 0c             	sub    esp,0xc
c0010ca4:	68 91 23 02 c0       	push   0xc0022391
c0010ca9:	e8 b7 9c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010cae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb1:	e8 42 ff ff ff       	call   c0010bf8 <CPU::setupUMIP()>
c0010cb6:	83 c4 10             	add    esp,0x10
c0010cb9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010cc0:	74 18                	je     c0010cda <CPU::setupFeatures()+0x4a>
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	68 9b 23 02 c0       	push   0xc002239b
c0010cca:	e8 96 9c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd2:	e8 2b ff ff ff       	call   c0010c02 <CPU::setupTSC()>
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010ce1:	74 18                	je     c0010cfb <CPU::setupFeatures()+0x6b>
c0010ce3:	83 ec 0c             	sub    esp,0xc
c0010ce6:	68 a4 23 02 c0       	push   0xc00223a4
c0010ceb:	e8 75 9c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf3:	e8 14 ff ff ff       	call   c0010c0c <CPU::setupLargePages()>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d02:	74 18                	je     c0010d1c <CPU::setupFeatures()+0x8c>
c0010d04:	83 ec 0c             	sub    esp,0xc
c0010d07:	68 ad 23 02 c0       	push   0xc00223ad
c0010d0c:	e8 54 9c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010d11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d14:	e8 3b ff ff ff       	call   c0010c54 <CPU::setupGlobalPages()>
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d23:	74 18                	je     c0010d3d <CPU::setupFeatures()+0xad>
c0010d25:	83 ec 0c             	sub    esp,0xc
c0010d28:	68 bf 23 02 c0       	push   0xc00223bf
c0010d2d:	e8 33 9c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d35:	e8 dc fe ff ff       	call   c0010c16 <CPU::setupPAT()>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d44:	74 11                	je     c0010d57 <CPU::setupFeatures()+0xc7>
c0010d46:	c7 44 24 10 c8 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223c8
c0010d4e:	83 c4 08             	add    esp,0x8
c0010d51:	5b                   	pop    ebx
c0010d52:	e9 0e 9c ff ff       	jmp    c000a965 <Dbg::kprintf(char const*, ...)>
c0010d57:	83 c4 08             	add    esp,0x8
c0010d5a:	5b                   	pop    ebx
c0010d5b:	c3                   	ret    

c0010d5c <CPU::open(int, int, void*)>:
c0010d5c:	55                   	push   ebp
c0010d5d:	57                   	push   edi
c0010d5e:	56                   	push   esi
c0010d5f:	53                   	push   ebx
c0010d60:	83 ec 18             	sub    esp,0x18
c0010d63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d6b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d6f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d75:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d7b:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d81:	50                   	push   eax
c0010d82:	e8 59 66 ff ff       	call   c00073e0 <GDT::setup()>
c0010d87:	83 c4 0c             	add    esp,0xc
c0010d8a:	6a 00                	push   0x0
c0010d8c:	68 ef be ad de       	push   0xdeadbeef
c0010d91:	55                   	push   ebp
c0010d92:	e8 11 82 ff ff       	call   c0008fa8 <TSS::setup(unsigned long, unsigned long)>
c0010d97:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d9a:	e8 e9 81 ff ff       	call   c0008f88 <TSS::flush()>
c0010d9f:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010da5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da8:	e8 95 68 ff ff       	call   c0007642 <IDT::setup()>
c0010dad:	b8 00 04 00 00       	mov    eax,0x400
c0010db2:	0f 23 f8             	mov    db7,eax
c0010db5:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010dbf:	e8 1b 70 ff ff       	call   c0007ddf <Phys::allocatePage()>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010dcd:	85 f6                	test   esi,esi
c0010dcf:	89 38                	mov    DWORD PTR [eax],edi
c0010dd1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010dd7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010dda:	74 10                	je     c0010dec <CPU::open(int, int, void*)+0x90>
c0010ddc:	50                   	push   eax
c0010ddd:	50                   	push   eax
c0010dde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010de4:	56                   	push   esi
c0010de5:	e8 e4 8a ff ff       	call   c00098ce <VAS::setCPUSpecific(unsigned long)>
c0010dea:	eb 0d                	jmp    c0010df9 <CPU::open(int, int, void*)+0x9d>
c0010dec:	83 ec 0c             	sub    esp,0xc
c0010def:	68 d2 23 02 c0       	push   0xc00223d2
c0010df4:	e8 9e 08 00 00       	call   c0011697 <KePanic(char const*)>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	68 e0 23 02 c0       	push   0xc00223e0
c0010e04:	e8 8e 01 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0010e09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e0c:	e8 07 f7 ff ff       	call   c0010518 <CPU::detectFeatures()>
c0010e11:	c7 04 24 03 24 02 c0 	mov    DWORD PTR [esp],0xc0022403
c0010e18:	e8 7a 01 00 00       	call   c0010f97 <KeSetBootMessage(char const*)>
c0010e1d:	e8 2f 74 00 00       	call   c0018251 <HalInitialise()>
c0010e22:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e27:	83 e0 10             	and    eax,0x10
c0010e2a:	83 f8 01             	cmp    eax,0x1
c0010e2d:	19 c0                	sbb    eax,eax
c0010e2f:	83 e0 46             	and    eax,0x46
c0010e32:	83 c0 1e             	add    eax,0x1e
c0010e35:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e38:	e8 d0 d5 ff ff       	call   c000e40d <setupTimer(int)>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e46:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e4d:	74 0c                	je     c0010e5b <CPU::open(int, int, void*)+0xff>
c0010e4f:	83 ec 0c             	sub    esp,0xc
c0010e52:	53                   	push   ebx
c0010e53:	e8 38 fe ff ff       	call   c0010c90 <CPU::setupFeatures()>
c0010e58:	83 c4 10             	add    esp,0x10
c0010e5b:	83 c4 0c             	add    esp,0xc
c0010e5e:	31 c0                	xor    eax,eax
c0010e60:	5b                   	pop    ebx
c0010e61:	5e                   	pop    esi
c0010e62:	5f                   	pop    edi
c0010e63:	5d                   	pop    ebp
c0010e64:	c3                   	ret    

c0010e65 <KeInitialiseAtexit()>:
c0010e65:	83 ec 10             	sub    esp,0x10
c0010e68:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e72:	6a 60                	push   0x60
c0010e74:	6a 00                	push   0x0
c0010e76:	68 20 be 02 c0       	push   0xc002be20
c0010e7b:	e8 70 f6 fe ff       	call   c00004f0 <memset>
c0010e80:	83 c4 1c             	add    esp,0x1c
c0010e83:	c3                   	ret    

c0010e84 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e84:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e8d:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e98:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e9f:	40                   	inc    eax
c0010ea0:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ea5:	83 f8 17             	cmp    eax,0x17
c0010ea8:	7e 0d                	jle    c0010eb7 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010eaa:	c7 44 24 04 44 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022444
c0010eb2:	e9 e0 07 00 00       	jmp    c0011697 <KePanic(char const*)>
c0010eb7:	c3                   	ret    

c0010eb8 <KeExecuteAtexit()>:
c0010eb8:	53                   	push   ebx
c0010eb9:	31 db                	xor    ebx,ebx
c0010ebb:	83 ec 08             	sub    esp,0x8
c0010ebe:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010ec4:	7e 50                	jle    c0010f16 <KeExecuteAtexit()+0x5e>
c0010ec6:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ecd:	85 c0                	test   eax,eax
c0010ecf:	74 42                	je     c0010f13 <KeExecuteAtexit()+0x5b>
c0010ed1:	51                   	push   ecx
c0010ed2:	50                   	push   eax
c0010ed3:	53                   	push   ebx
c0010ed4:	68 5d 24 02 c0       	push   0xc002245d
c0010ed9:	e8 87 9a ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010ede:	58                   	pop    eax
c0010edf:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010ee6:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010eed:	c7 04 24 7f 24 02 c0 	mov    DWORD PTR [esp],0xc002247f
c0010ef4:	e8 6c 9a ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010ef9:	c7 04 24 df 35 02 c0 	mov    DWORD PTR [esp],0xc00235df
c0010f00:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f0b:	e8 55 9a ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	43                   	inc    ebx
c0010f14:	eb a8                	jmp    c0010ebe <KeExecuteAtexit()+0x6>
c0010f16:	83 c4 08             	add    esp,0x8
c0010f19:	5b                   	pop    ebx
c0010f1a:	c3                   	ret    

c0010f1b <KeDisplaySplashScreen()>:
c0010f1b:	55                   	push   ebp
c0010f1c:	bd 05 00 00 00       	mov    ebp,0x5
c0010f21:	57                   	push   edi
c0010f22:	bf 0a 00 00 00       	mov    edi,0xa
c0010f27:	56                   	push   esi
c0010f28:	31 f6                	xor    esi,esi
c0010f2a:	53                   	push   ebx
c0010f2b:	31 db                	xor    ebx,ebx
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	0f b6 96 40 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc7c0]
c0010f37:	89 d0                	mov    eax,edx
c0010f39:	85 d2                	test   edx,edx
c0010f3b:	74 52                	je     c0010f8f <KeDisplaySplashScreen()+0x74>
c0010f3d:	80 bb 76 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc78a],0xdb
c0010f44:	75 13                	jne    c0010f59 <KeDisplaySplashScreen()+0x3e>
c0010f46:	0f b6 8b 75 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc78b]
c0010f4d:	83 e1 fe             	and    ecx,0xfffffffe
c0010f50:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f56:	75 01                	jne    c0010f59 <KeDisplaySplashScreen()+0x3e>
c0010f58:	47                   	inc    edi
c0010f59:	83 fa 0d             	cmp    edx,0xd
c0010f5c:	74 28                	je     c0010f86 <KeDisplaySplashScreen()+0x6b>
c0010f5e:	83 fa 0a             	cmp    edx,0xa
c0010f61:	75 0a                	jne    c0010f6d <KeDisplaySplashScreen()+0x52>
c0010f63:	45                   	inc    ebp
c0010f64:	bf 0a 00 00 00       	mov    edi,0xa
c0010f69:	31 db                	xor    ebx,ebx
c0010f6b:	eb 19                	jmp    c0010f86 <KeDisplaySplashScreen()+0x6b>
c0010f6d:	83 ec 0c             	sub    esp,0xc
c0010f70:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f73:	55                   	push   ebp
c0010f74:	0f be c0             	movsx  eax,al
c0010f77:	52                   	push   edx
c0010f78:	43                   	inc    ebx
c0010f79:	6a 00                	push   0x0
c0010f7b:	6a 0e                	push   0xe
c0010f7d:	50                   	push   eax
c0010f7e:	e8 4d 7f 00 00       	call   c0018ed0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f83:	83 c4 20             	add    esp,0x20
c0010f86:	46                   	inc    esi
c0010f87:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f8d:	75 a1                	jne    c0010f30 <KeDisplaySplashScreen()+0x15>
c0010f8f:	83 c4 0c             	add    esp,0xc
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	5f                   	pop    edi
c0010f95:	5d                   	pop    ebp
c0010f96:	c3                   	ret    

c0010f97 <KeSetBootMessage(char const*)>:
c0010f97:	57                   	push   edi
c0010f98:	56                   	push   esi
c0010f99:	53                   	push   ebx
c0010f9a:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010fa0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fa7:	68 9e 00 00 00       	push   0x9e
c0010fac:	6a 00                	push   0x0
c0010fae:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fb2:	56                   	push   esi
c0010fb3:	e8 38 f5 fe ff       	call   c00004f0 <memset>
c0010fb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fbb:	e8 b0 f5 fe ff       	call   c0000570 <strlen>
c0010fc0:	ba 50 00 00 00       	mov    edx,0x50
c0010fc5:	83 c4 10             	add    esp,0x10
c0010fc8:	29 c2                	sub    edx,eax
c0010fca:	31 c9                	xor    ecx,ecx
c0010fcc:	83 e2 fe             	and    edx,0xfffffffe
c0010fcf:	01 f2                	add    edx,esi
c0010fd1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010fd6:	84 c0                	test   al,al
c0010fd8:	74 0a                	je     c0010fe4 <KeSetBootMessage(char const*)+0x4d>
c0010fda:	80 cc 0f             	or     ah,0xf
c0010fdd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010fe1:	41                   	inc    ecx
c0010fe2:	eb ed                	jmp    c0010fd1 <KeSetBootMessage(char const*)+0x3a>
c0010fe4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010fe9:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010fee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ff0:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ff6:	5b                   	pop    ebx
c0010ff7:	5e                   	pop    esi
c0010ff8:	5f                   	pop    edi
c0010ff9:	c3                   	ret    
c0010ffa:	66 90                	xchg   ax,ax

c0010ffc <Krnl::handlePowerButton()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	e8 ee 06 00 00       	call   c00116f2 <KeHandlePowerButton()>
c0011004:	90                   	nop
c0011005:	83 c4 0c             	add    esp,0xc
c0011008:	c3                   	ret    
c0011009:	8d 76 00             	lea    esi,[esi+0x0]

c001100c <Krnl::handleSleepButton()>:
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	e8 13 07 00 00       	call   c0011727 <KeHandleSleepButton()>
c0011014:	90                   	nop
c0011015:	83 c4 0c             	add    esp,0xc
c0011018:	c3                   	ret    

c0011019 <KeCalculateCRC32(unsigned char*, int)>:
c0011019:	53                   	push   ebx
c001101a:	83 c8 ff             	or     eax,0xffffffff
c001101d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011021:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011025:	01 cb                	add    ebx,ecx
c0011027:	39 d9                	cmp    ecx,ebx
c0011029:	74 15                	je     c0011040 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001102b:	41                   	inc    ecx
c001102c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001102f:	31 c2                	xor    edx,eax
c0011031:	c1 e8 08             	shr    eax,0x8
c0011034:	0f b6 d2             	movzx  edx,dl
c0011037:	33 04 95 a0 39 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc660]
c001103e:	eb e7                	jmp    c0011027 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0011040:	f7 d0                	not    eax
c0011042:	5b                   	pop    ebx
c0011043:	c3                   	ret    

c0011044 <EnvVarContainer::getEnv(char const*)>:
c0011044:	57                   	push   edi
c0011045:	56                   	push   esi
c0011046:	53                   	push   ebx
c0011047:	31 db                	xor    ebx,ebx
c0011049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001104d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001104f:	7e 2b                	jle    c001107c <EnvVarContainer::getEnv(char const*)+0x38>
c0011051:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011058:	50                   	push   eax
c0011059:	50                   	push   eax
c001105a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001105d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011060:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011064:	e8 e7 f6 fe ff       	call   c0000750 <strcmp>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	85 c0                	test   eax,eax
c001106e:	75 09                	jne    c0011079 <EnvVarContainer::getEnv(char const*)+0x35>
c0011070:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011073:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0011077:	eb 05                	jmp    c001107e <EnvVarContainer::getEnv(char const*)+0x3a>
c0011079:	43                   	inc    ebx
c001107a:	eb d1                	jmp    c001104d <EnvVarContainer::getEnv(char const*)+0x9>
c001107c:	31 c0                	xor    eax,eax
c001107e:	5b                   	pop    ebx
c001107f:	5e                   	pop    esi
c0011080:	5f                   	pop    edi
c0011081:	c3                   	ret    

c0011082 <EnvVarContainer::setEnv(char const*, char const*)>:
c0011082:	55                   	push   ebp
c0011083:	57                   	push   edi
c0011084:	56                   	push   esi
c0011085:	53                   	push   ebx
c0011086:	83 ec 28             	sub    esp,0x28
c0011089:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001108d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011091:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011095:	56                   	push   esi
c0011096:	e8 d5 f4 fe ff       	call   c0000570 <strlen>
c001109b:	40                   	inc    eax
c001109c:	89 04 24             	mov    DWORD PTR [esp],eax
c001109f:	e8 32 6a ff ff       	call   c0007ad6 <malloc>
c00110a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110ab:	e8 c0 f4 fe ff       	call   c0000570 <strlen>
c00110b0:	40                   	inc    eax
c00110b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00110b4:	e8 1d 6a ff ff       	call   c0007ad6 <malloc>
c00110b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00110bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110c0:	e8 ab f4 fe ff       	call   c0000570 <strlen>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	40                   	inc    eax
c00110c9:	50                   	push   eax
c00110ca:	6a 00                	push   0x0
c00110cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110d0:	e8 1b f4 fe ff       	call   c00004f0 <memset>
c00110d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00110d8:	e8 93 f4 fe ff       	call   c0000570 <strlen>
c00110dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00110e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110e9:	89 de                	mov    esi,ebx
c00110eb:	e8 80 f4 fe ff       	call   c0000570 <strlen>
c00110f0:	83 c4 0c             	add    esp,0xc
c00110f3:	40                   	inc    eax
c00110f4:	50                   	push   eax
c00110f5:	6a 00                	push   0x0
c00110f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110fb:	e8 f0 f3 fe ff       	call   c00004f0 <memset>
c0011100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011103:	e8 68 f4 fe ff       	call   c0000570 <strlen>
c0011108:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001110c:	8d 48 01             	lea    ecx,[eax+0x1]
c001110f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011111:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011114:	40                   	inc    eax
c0011115:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011118:	c1 e0 03             	shl    eax,0x3
c001111b:	5a                   	pop    edx
c001111c:	59                   	pop    ecx
c001111d:	50                   	push   eax
c001111e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011121:	e8 9c 69 ff ff       	call   c0007ac2 <realloc>
c0011126:	8d 74 24 18          	lea    esi,[esp+0x18]
c001112a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001112d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011130:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011134:	b9 08 00 00 00       	mov    ecx,0x8
c0011139:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001113b:	83 c4 2c             	add    esp,0x2c
c001113e:	5b                   	pop    ebx
c001113f:	5e                   	pop    esi
c0011140:	5f                   	pop    edi
c0011141:	5d                   	pop    ebp
c0011142:	c3                   	ret    
c0011143:	90                   	nop

c0011144 <EnvVarContainer::deleteEnv(char const*)>:
c0011144:	c3                   	ret    
c0011145:	90                   	nop

c0011146 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011146:	55                   	push   ebp
c0011147:	57                   	push   edi
c0011148:	56                   	push   esi
c0011149:	53                   	push   ebx
c001114a:	81 ec 38 01 00 00    	sub    esp,0x138
c0011150:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011157:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001115e:	68 14 01 00 00       	push   0x114
c0011163:	e8 6e 69 ff ff       	call   c0007ad6 <malloc>
c0011168:	83 c4 0c             	add    esp,0xc
c001116b:	89 c3                	mov    ebx,eax
c001116d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011170:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011177:	50                   	push   eax
c0011178:	e8 ef a9 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c001117d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011180:	e8 c9 ac ff ff       	call   c000be4e <File::exists()>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	84 c0                	test   al,al
c001118a:	75 31                	jne    c00111bd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001118c:	50                   	push   eax
c001118d:	50                   	push   eax
c001118e:	6a 12                	push   0x12
c0011190:	53                   	push   ebx
c0011191:	e8 f4 a9 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0011196:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011198:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001119b:	89 34 24             	mov    DWORD PTR [esp],esi
c001119e:	e8 cd f3 fe ff       	call   c0000570 <strlen>
c00111a3:	5a                   	pop    edx
c00111a4:	31 d2                	xor    edx,edx
c00111a6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111aa:	51                   	push   ecx
c00111ab:	56                   	push   esi
c00111ac:	52                   	push   edx
c00111ad:	50                   	push   eax
c00111ae:	53                   	push   ebx
c00111af:	ff d7                	call   edi
c00111b1:	83 c4 14             	add    esp,0x14
c00111b4:	53                   	push   ebx
c00111b5:	e8 2e aa ff ff       	call   c000bbe8 <File::close()>
c00111ba:	83 c4 10             	add    esp,0x10
c00111bd:	56                   	push   esi
c00111be:	31 f6                	xor    esi,esi
c00111c0:	68 00 01 00 00       	push   0x100
c00111c5:	6a 00                	push   0x0
c00111c7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111cb:	50                   	push   eax
c00111cc:	e8 1f f3 fe ff       	call   c00004f0 <memset>
c00111d1:	5f                   	pop    edi
c00111d2:	58                   	pop    eax
c00111d3:	6a 01                	push   0x1
c00111d5:	53                   	push   ebx
c00111d6:	e8 af a9 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111f7:	51                   	push   ecx
c00111f8:	8d 54 24 23          	lea    edx,[esp+0x23]
c00111fc:	52                   	push   edx
c00111fd:	6a 00                	push   0x0
c00111ff:	6a 01                	push   0x1
c0011201:	53                   	push   ebx
c0011202:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011205:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001120a:	83 c4 20             	add    esp,0x20
c001120d:	89 c2                	mov    edx,eax
c001120f:	85 c0                	test   eax,eax
c0011211:	0f 84 36 01 00 00    	je     c001134d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011217:	83 f8 0d             	cmp    eax,0xd
c001121a:	0f 84 22 01 00 00    	je     c0011342 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011220:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011225:	0f 84 f0 00 00 00    	je     c001131b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001122b:	83 f8 0a             	cmp    eax,0xa
c001122e:	74 13                	je     c0011243 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011230:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011235:	74 0c                	je     c0011243 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011237:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001123d:	0f 8e f6 00 00 00    	jle    c0011339 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011243:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011247:	83 ec 0c             	sub    esp,0xc
c001124a:	8d 78 01             	lea    edi,[eax+0x1]
c001124d:	57                   	push   edi
c001124e:	e8 83 68 ff ff       	call   c0007ad6 <malloc>
c0011253:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011257:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001125b:	8d 56 04             	lea    edx,[esi+0x4]
c001125e:	89 14 24             	mov    DWORD PTR [esp],edx
c0011261:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011265:	e8 6c 68 ff ff       	call   c0007ad6 <malloc>
c001126a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001126e:	83 c4 0c             	add    esp,0xc
c0011271:	57                   	push   edi
c0011272:	6a 00                	push   0x0
c0011274:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011278:	e8 73 f2 fe ff       	call   c00004f0 <memset>
c001127d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011281:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011285:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001128b:	83 c4 0c             	add    esp,0xc
c001128e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011292:	52                   	push   edx
c0011293:	6a 00                	push   0x0
c0011295:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011299:	e8 52 f2 fe ff       	call   c00004f0 <memset>
c001129e:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112a2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00112a9:	e8 c2 f2 fe ff       	call   c0000570 <strlen>
c00112ae:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112b2:	89 c1                	mov    ecx,eax
c00112b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112b9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112bc:	40                   	inc    eax
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112c3:	85 d2                	test   edx,edx
c00112c5:	75 0c                	jne    c00112d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112c7:	83 ec 0c             	sub    esp,0xc
c00112ca:	6a 08                	push   0x8
c00112cc:	e8 05 68 ff ff       	call   c0007ad6 <malloc>
c00112d1:	eb 0c                	jmp    c00112df <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00112d3:	c1 e0 03             	shl    eax,0x3
c00112d6:	51                   	push   ecx
c00112d7:	51                   	push   ecx
c00112d8:	50                   	push   eax
c00112d9:	52                   	push   edx
c00112da:	e8 e3 67 ff ff       	call   c0007ac2 <realloc>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00112e5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00112e8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00112eb:	8d 74 24 18          	lea    esi,[esp+0x18]
c00112ef:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00112f3:	b9 08 00 00 00       	mov    ecx,0x8
c00112f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112fa:	31 f6                	xor    esi,esi
c00112fc:	50                   	push   eax
c00112fd:	68 00 01 00 00       	push   0x100
c0011302:	6a 00                	push   0x0
c0011304:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011308:	50                   	push   eax
c0011309:	e8 e2 f1 fe ff       	call   c00004f0 <memset>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011319:	eb 27                	jmp    c0011342 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001131b:	83 f8 3d             	cmp    eax,0x3d
c001131e:	74 1e                	je     c001133e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011320:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011326:	7f 07                	jg     c001132f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011328:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001132c:	46                   	inc    esi
c001132d:	eb 13                	jmp    c0011342 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001132f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011337:	eb 09                	jmp    c0011342 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011339:	83 f8 3d             	cmp    eax,0x3d
c001133c:	75 ea                	jne    c0011328 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001133e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011342:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011347:	0f 85 99 fe ff ff    	jne    c00111e6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001134d:	83 ec 0c             	sub    esp,0xc
c0011350:	53                   	push   ebx
c0011351:	e8 92 a8 ff ff       	call   c000bbe8 <File::close()>
c0011356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001135b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001135e:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011364:	5b                   	pop    ebx
c0011365:	5e                   	pop    esi
c0011366:	5f                   	pop    edi
c0011367:	5d                   	pop    ebp
c0011368:	c3                   	ret    
c0011369:	90                   	nop

c001136a <EnvVarContainer::__loadSystem()>:
c001136a:	83 ec 10             	sub    esp,0x10
c001136d:	68 a0 3d 02 c0       	push   0xc0023da0
c0011372:	68 84 24 02 c0       	push   0xc0022484
c0011377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001137b:	e8 c6 fd ff ff       	call   c0011146 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011380:	83 c4 1c             	add    esp,0x1c
c0011383:	c3                   	ret    

c0011384 <EnvVarContainer::__loadUser()>:
c0011384:	c3                   	ret    
c0011385:	90                   	nop

c0011386 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001138a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011398:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001139b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113a6:	90                   	nop
c00113a7:	c3                   	ret    

c00113a8 <EnvVarContainer::~EnvVarContainer()>:
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113b2:	85 c0                	test   eax,eax
c00113b4:	74 1d                	je     c00113d3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00113bc:	85 c0                	test   eax,eax
c00113be:	74 13                	je     c00113d3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	50                   	push   eax
c00113cb:	e8 16 67 ff ff       	call   c0007ae6 <free>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	90                   	nop
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	c3                   	ret    

c00113d8 <KeGetEnv(Process*, char const*)>:
c00113d8:	53                   	push   ebx
c00113d9:	83 ec 08             	sub    esp,0x8
c00113dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113e4:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00113ea:	74 04                	je     c00113f0 <KeGetEnv(Process*, char const*)+0x18>
c00113ec:	85 c0                	test   eax,eax
c00113ee:	75 0b                	jne    c00113fb <KeGetEnv(Process*, char const*)+0x23>
c00113f0:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113f5:	85 c0                	test   eax,eax
c00113f7:	75 19                	jne    c0011412 <KeGetEnv(Process*, char const*)+0x3a>
c00113f9:	eb 27                	jmp    c0011422 <KeGetEnv(Process*, char const*)+0x4a>
c00113fb:	52                   	push   edx
c00113fc:	52                   	push   edx
c00113fd:	53                   	push   ebx
c00113fe:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011404:	e8 3b fc ff ff       	call   c0011044 <EnvVarContainer::getEnv(char const*)>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	85 c0                	test   eax,eax
c001140e:	75 28                	jne    c0011438 <KeGetEnv(Process*, char const*)+0x60>
c0011410:	eb de                	jmp    c00113f0 <KeGetEnv(Process*, char const*)+0x18>
c0011412:	52                   	push   edx
c0011413:	52                   	push   edx
c0011414:	53                   	push   ebx
c0011415:	50                   	push   eax
c0011416:	e8 29 fc ff ff       	call   c0011044 <EnvVarContainer::getEnv(char const*)>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	85 c0                	test   eax,eax
c0011420:	75 16                	jne    c0011438 <KeGetEnv(Process*, char const*)+0x60>
c0011422:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011426:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001142b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001142f:	83 c4 08             	add    esp,0x8
c0011432:	5b                   	pop    ebx
c0011433:	e9 0c fc ff ff       	jmp    c0011044 <EnvVarContainer::getEnv(char const*)>
c0011438:	83 c4 08             	add    esp,0x8
c001143b:	5b                   	pop    ebx
c001143c:	c3                   	ret    

c001143d <KeSetEnvSystem(char const*, char const*)>:
c001143d:	83 ec 10             	sub    esp,0x10
c0011440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011448:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001144e:	e8 2f fc ff ff       	call   c0011082 <EnvVarContainer::setEnv(char const*, char const*)>
c0011453:	83 c4 1c             	add    esp,0x1c
c0011456:	c3                   	ret    

c0011457 <KeSetEnvUser(char const*, char const*)>:
c0011457:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001145c:	85 c0                	test   eax,eax
c001145e:	74 15                	je     c0011475 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011460:	83 ec 10             	sub    esp,0x10
c0011463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001146b:	50                   	push   eax
c001146c:	e8 11 fc ff ff       	call   c0011082 <EnvVarContainer::setEnv(char const*, char const*)>
c0011471:	83 c4 1c             	add    esp,0x1c
c0011474:	c3                   	ret    
c0011475:	c3                   	ret    

c0011476 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001147a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011480:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011484:	e9 f9 fb ff ff       	jmp    c0011082 <EnvVarContainer::setEnv(char const*, char const*)>

c0011489 <KeDeleteEnvSystem(char const*)>:
c0011489:	c3                   	ret    

c001148a <KeDeleteEnvUser(char const*)>:
c001148a:	c3                   	ret    

c001148b <KeDeleteEnvProcess(Process*, char const*)>:
c001148b:	c3                   	ret    

c001148c <KeNewProcessEnv(Process*)>:
c001148c:	83 ec 28             	sub    esp,0x28
c001148f:	6a 0c                	push   0xc
c0011491:	e8 40 66 ff ff       	call   c0007ad6 <malloc>
c0011496:	5a                   	pop    edx
c0011497:	59                   	pop    ecx
c0011498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001149c:	50                   	push   eax
c001149d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a1:	e8 e0 fe ff ff       	call   c0011386 <EnvVarContainer::EnvVarContainer(Process*)>
c00114a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114aa:	83 c4 2c             	add    esp,0x2c
c00114ad:	c3                   	ret    

c00114ae <KeCopyProcessEnv(Process*, Process*)>:
c00114ae:	57                   	push   edi
c00114af:	56                   	push   esi
c00114b0:	53                   	push   ebx
c00114b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b5:	83 ec 0c             	sub    esp,0xc
c00114b8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114be:	6a 0c                	push   0xc
c00114c0:	e8 11 66 ff ff       	call   c0007ad6 <malloc>
c00114c5:	89 c3                	mov    ebx,eax
c00114c7:	58                   	pop    eax
c00114c8:	5a                   	pop    edx
c00114c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cd:	53                   	push   ebx
c00114ce:	e8 b3 fe ff ff       	call   c0011386 <EnvVarContainer::EnvVarContainer(Process*)>
c00114d3:	8b 07                	mov    eax,DWORD PTR [edi]
c00114d5:	89 03                	mov    DWORD PTR [ebx],eax
c00114d7:	c1 e0 03             	shl    eax,0x3
c00114da:	89 04 24             	mov    DWORD PTR [esp],eax
c00114dd:	e8 f4 65 ff ff       	call   c0007ad6 <malloc>
c00114e2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00114e5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00114e7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00114ea:	c1 e1 03             	shl    ecx,0x3
c00114ed:	89 c7                	mov    edi,eax
c00114ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	89 d8                	mov    eax,ebx
c00114f6:	5b                   	pop    ebx
c00114f7:	5e                   	pop    esi
c00114f8:	5f                   	pop    edi
c00114f9:	c3                   	ret    

c00114fa <KeLoadSystemEnv()>:
c00114fa:	53                   	push   ebx
c00114fb:	83 ec 14             	sub    esp,0x14
c00114fe:	6a 0c                	push   0xc
c0011500:	e8 d1 65 ff ff       	call   c0007ad6 <malloc>
c0011505:	89 c3                	mov    ebx,eax
c0011507:	58                   	pop    eax
c0011508:	5a                   	pop    edx
c0011509:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001150f:	53                   	push   ebx
c0011510:	e8 71 fe ff ff       	call   c0011386 <EnvVarContainer::EnvVarContainer(Process*)>
c0011515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011518:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001151e:	e8 47 fe ff ff       	call   c001136a <EnvVarContainer::__loadSystem()>
c0011523:	83 c4 18             	add    esp,0x18
c0011526:	5b                   	pop    ebx
c0011527:	c3                   	ret    

c0011528 <KeLoadUserEnv()>:
c0011528:	53                   	push   ebx
c0011529:	83 ec 14             	sub    esp,0x14
c001152c:	6a 0c                	push   0xc
c001152e:	e8 a3 65 ff ff       	call   c0007ad6 <malloc>
c0011533:	89 c3                	mov    ebx,eax
c0011535:	58                   	pop    eax
c0011536:	5a                   	pop    edx
c0011537:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001153d:	53                   	push   ebx
c001153e:	e8 43 fe ff ff       	call   c0011386 <EnvVarContainer::EnvVarContainer(Process*)>
c0011543:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011549:	83 c4 18             	add    esp,0x18
c001154c:	5b                   	pop    ebx
c001154d:	c3                   	ret    

c001154e <KeFlushEnv()>:
c001154e:	c3                   	ret    

c001154f <KeGetProcessTotalEnvCount(Process*)>:
c001154f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011553:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011559:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001155f:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011564:	8b 00                	mov    eax,DWORD PTR [eax]
c0011566:	03 01                	add    eax,DWORD PTR [ecx]
c0011568:	85 d2                	test   edx,edx
c001156a:	74 02                	je     c001156e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001156c:	03 02                	add    eax,DWORD PTR [edx]
c001156e:	c3                   	ret    

c001156f <KeGetProcessEnvPair(Process*, int)>:
c001156f:	57                   	push   edi
c0011570:	56                   	push   esi
c0011571:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011577:	53                   	push   ebx
c0011578:	85 f6                	test   esi,esi
c001157a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001157e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011582:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001158c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001158e:	75 16                	jne    c00115a6 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011590:	39 c2                	cmp    edx,eax
c0011592:	7c 16                	jl     c00115aa <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011594:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001159a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001159c:	01 c6                	add    esi,eax
c001159e:	39 d6                	cmp    esi,edx
c00115a0:	7e 3c                	jle    c00115de <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115a2:	29 c2                	sub    edx,eax
c00115a4:	eb 04                	jmp    c00115aa <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115a6:	39 c2                	cmp    edx,eax
c00115a8:	7d 05                	jge    c00115af <KeGetProcessEnvPair(Process*, int)+0x40>
c00115aa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115ad:	eb 20                	jmp    c00115cf <KeGetProcessEnvPair(Process*, int)+0x60>
c00115af:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115b1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115b4:	39 d1                	cmp    ecx,edx
c00115b6:	7e 04                	jle    c00115bc <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115b8:	29 c2                	sub    edx,eax
c00115ba:	eb 10                	jmp    c00115cc <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115bc:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115c2:	03 0e                	add    ecx,DWORD PTR [esi]
c00115c4:	39 d1                	cmp    ecx,edx
c00115c6:	7e 16                	jle    c00115de <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115c8:	29 c2                	sub    edx,eax
c00115ca:	29 fa                	sub    edx,edi
c00115cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115cf:	8d 14 d0             	lea    edx,[eax+edx*8]
c00115d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00115d4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00115d7:	89 03                	mov    DWORD PTR [ebx],eax
c00115d9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00115dc:	eb 1d                	jmp    c00115fb <KeGetProcessEnvPair(Process*, int)+0x8c>
c00115de:	83 ec 0c             	sub    esp,0xc
c00115e1:	68 a6 24 02 c0       	push   0xc00224a6
c00115e6:	e8 ac 00 00 00       	call   c0011697 <KePanic(char const*)>
c00115eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00115f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	89 d8                	mov    eax,ebx
c00115fd:	5b                   	pop    ebx
c00115fe:	5e                   	pop    esi
c00115ff:	5f                   	pop    edi
c0011600:	c2 04 00             	ret    0x4

c0011603 <CPU::current()>:
c0011603:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011608:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001160e:	c3                   	ret    

c001160f <operator new(unsigned long)>:
c001160f:	e9 c2 64 ff ff       	jmp    c0007ad6 <malloc>

c0011614 <operator delete(void*)>:
c0011614:	e9 dd 64 ff ff       	jmp    c0007af6 <rfree>

c0011619 <disableIRQs()>:
c0011619:	fa                   	cli    
c001161a:	c3                   	ret    

c001161b <enableIRQs()>:
c001161b:	fb                   	sti    
c001161c:	c3                   	ret    

c001161d <lockScheduler()>:
c001161d:	fa                   	cli    
c001161e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011624:	c3                   	ret    

c0011625 <unlockScheduler()>:
c0011625:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001162a:	48                   	dec    eax
c001162b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011630:	75 01                	jne    c0011633 <unlockScheduler()+0xe>
c0011632:	fb                   	sti    
c0011633:	c3                   	ret    

c0011634 <lockStuff()>:
c0011634:	fa                   	cli    
c0011635:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001163b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011641:	c3                   	ret    

c0011642 <unlockStuff()>:
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001164a:	48                   	dec    eax
c001164b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011650:	75 18                	jne    c001166a <unlockStuff()+0x28>
c0011652:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011659:	74 0f                	je     c001166a <unlockStuff()+0x28>
c001165b:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011665:	e8 12 4b 00 00       	call   c001617c <schedule()>
c001166a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001166f:	48                   	dec    eax
c0011670:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011675:	75 01                	jne    c0011678 <unlockStuff()+0x36>
c0011677:	fb                   	sti    
c0011678:	83 c4 0c             	add    esp,0xc
c001167b:	c3                   	ret    

c001167c <Virt::getAKernelVAS()>:
c001167c:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011681:	c3                   	ret    

c0011682 <__not_memcpy>:
c0011682:	57                   	push   edi
c0011683:	56                   	push   esi
c0011684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011688:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001168c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011690:	89 c7                	mov    edi,eax
c0011692:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011694:	5e                   	pop    esi
c0011695:	5f                   	pop    edi
c0011696:	c3                   	ret    

c0011697 <KePanic(char const*)>:
c0011697:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001169e:	e9 7f 6a 00 00       	jmp    c0018122 <HalPanic(char const*)>

c00116a3 <KePowerThread(void*)>:
c00116a3:	83 ec 0c             	sub    esp,0xc
c00116a6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116ab:	48                   	dec    eax
c00116ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116b1:	75 01                	jne    c00116b4 <KePowerThread(void*)+0x11>
c00116b3:	fb                   	sti    
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116be:	6a 0a                	push   0xa
c00116c0:	e8 fb 4d 00 00       	call   c00164c0 <sleep(unsigned int)>
c00116c5:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	eb e3                	jmp    c00116b4 <KePowerThread(void*)+0x11>

c00116d1 <KeChangePowerSettings(PowerSettings)>:
c00116d1:	57                   	push   edi
c00116d2:	b9 09 00 00 00       	mov    ecx,0x9
c00116d7:	56                   	push   esi
c00116d8:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00116dd:	fc                   	cld    
c00116de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00116e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116e4:	5e                   	pop    esi
c00116e5:	5f                   	pop    edi
c00116e6:	c3                   	ret    

c00116e7 <KeUserIOReceived()>:
c00116e7:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116f1:	c3                   	ret    

c00116f2 <KeHandlePowerButton()>:
c00116f2:	83 ec 0c             	sub    esp,0xc
c00116f5:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00116fa:	83 f8 02             	cmp    eax,0x2
c00116fd:	75 10                	jne    c001170f <KeHandlePowerButton()+0x1d>
c00116ff:	83 ec 0c             	sub    esp,0xc
c0011702:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011708:	e8 3d 5a ff ff       	call   c000714a <Computer::shutdown()>
c001170d:	eb 11                	jmp    c0011720 <KeHandlePowerButton()+0x2e>
c001170f:	48                   	dec    eax
c0011710:	75 11                	jne    c0011723 <KeHandlePowerButton()+0x31>
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001171b:	e8 5a 5a ff ff       	call   c000717a <Computer::sleep()>
c0011720:	83 c4 10             	add    esp,0x10
c0011723:	83 c4 0c             	add    esp,0xc
c0011726:	c3                   	ret    

c0011727 <KeHandleSleepButton()>:
c0011727:	83 ec 0c             	sub    esp,0xc
c001172a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001172f:	83 f8 02             	cmp    eax,0x2
c0011732:	75 10                	jne    c0011744 <KeHandleSleepButton()+0x1d>
c0011734:	83 ec 0c             	sub    esp,0xc
c0011737:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001173d:	e8 08 5a ff ff       	call   c000714a <Computer::shutdown()>
c0011742:	eb 11                	jmp    c0011755 <KeHandleSleepButton()+0x2e>
c0011744:	48                   	dec    eax
c0011745:	75 11                	jne    c0011758 <KeHandleSleepButton()+0x31>
c0011747:	83 ec 0c             	sub    esp,0xc
c001174a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011750:	e8 25 5a ff ff       	call   c000717a <Computer::sleep()>
c0011755:	83 c4 10             	add    esp,0x10
c0011758:	83 c4 0c             	add    esp,0xc
c001175b:	c3                   	ret    

c001175c <KeSetupPowerManager()>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011769:	68 f0 00 00 00       	push   0xf0
c001176e:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011775:	6a 00                	push   0x0
c0011777:	68 a3 16 01 c0       	push   0xc00116a3
c001177c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011782:	e8 a5 47 00 00       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c0011787:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011791:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001179b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117a5:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117af:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117b9:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117c3:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117cd:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00117d7:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00117e1:	83 c4 1c             	add    esp,0x1c
c00117e4:	c3                   	ret    

c00117e5 <KeRand()>:
c00117e5:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00117ef:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00117f9:	53                   	push   ebx
c00117fa:	01 c1                	add    ecx,eax
c00117fc:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011801:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011807:	01 ca                	add    edx,ecx
c0011809:	05 ef 04 b5 00       	add    eax,0xb504ef
c001180e:	83 d2 00             	adc    edx,0x0
c0011811:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011816:	0f b7 da             	movzx  ebx,dx
c0011819:	89 da                	mov    edx,ebx
c001181b:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011821:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011825:	5b                   	pop    ebx
c0011826:	c3                   	ret    

c0011827 <KeSeedRand(unsigned int)>:
c0011827:	53                   	push   ebx
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001182f:	e8 0d 6c 00 00       	call   c0018441 <HalGetRand()>
c0011834:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001183e:	31 d8                	xor    eax,ebx
c0011840:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011845:	e8 9b ff ff ff       	call   c00117e5 <KeRand()>
c001184a:	83 c4 08             	add    esp,0x8
c001184d:	5b                   	pop    ebx
c001184e:	eb 95                	jmp    c00117e5 <KeRand()>

c0011850 <KeInitRand()>:
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	e8 de 69 00 00       	call   c0018236 <HalQueryPerformanceCounter()>
c0011858:	0f 20 da             	mov    edx,cr3
c001185b:	0f 22 da             	mov    cr3,edx
c001185e:	0f 20 da             	mov    edx,cr3
c0011861:	0f 22 da             	mov    cr3,edx
c0011864:	0f 20 da             	mov    edx,cr3
c0011867:	0f 22 da             	mov    cr3,edx
c001186a:	0f 20 da             	mov    edx,cr3
c001186d:	0f 22 da             	mov    cr3,edx
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011878:	50                   	push   eax
c0011879:	e8 a9 ff ff ff       	call   c0011827 <KeSeedRand(unsigned int)>
c001187e:	83 c4 1c             	add    esp,0x1c
c0011881:	c3                   	ret    
c0011882:	66 90                	xchg   ax,ax

c0011884 <KeResolveCompatibilitySymbol(char*)>:
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	83 ec 08             	sub    esp,0x8
c001188a:	68 c0 24 02 c0       	push   0xc00224c0
c001188f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011893:	e8 b8 ee fe ff       	call   c0000750 <strcmp>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	85 c0                	test   eax,eax
c001189d:	0f 94 c0             	sete   al
c00118a0:	0f b6 c0             	movzx  eax,al
c00118a3:	85 c0                	test   eax,eax
c00118a5:	74 0d                	je     c00118b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00118a7:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118ac:	e9 8b 01 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118b1:	8d 76 00             	lea    esi,[esi+0x0]
c00118b4:	83 ec 08             	sub    esp,0x8
c00118b7:	68 c9 24 02 c0       	push   0xc00224c9
c00118bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c0:	e8 8b ee fe ff       	call   c0000750 <strcmp>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	85 c0                	test   eax,eax
c00118ca:	0f 94 c0             	sete   al
c00118cd:	0f b6 c0             	movzx  eax,al
c00118d0:	85 c0                	test   eax,eax
c00118d2:	74 0c                	je     c00118e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00118d4:	b8 f0 f7 01 c0       	mov    eax,0xc001f7f0
c00118d9:	e9 5e 01 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118de:	66 90                	xchg   ax,ax
c00118e0:	83 ec 08             	sub    esp,0x8
c00118e3:	68 d3 24 02 c0       	push   0xc00224d3
c00118e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ec:	e8 5f ee fe ff       	call   c0000750 <strcmp>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 c0                	test   eax,eax
c00118f6:	0f 94 c0             	sete   al
c00118f9:	0f b6 c0             	movzx  eax,al
c00118fc:	85 c0                	test   eax,eax
c00118fe:	74 0c                	je     c001190c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011900:	b8 24 f5 01 c0       	mov    eax,0xc001f524
c0011905:	e9 32 01 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190a:	66 90                	xchg   ax,ax
c001190c:	83 ec 08             	sub    esp,0x8
c001190f:	68 dc 24 02 c0       	push   0xc00224dc
c0011914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011918:	e8 33 ee fe ff       	call   c0000750 <strcmp>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	85 c0                	test   eax,eax
c0011922:	0f 94 c0             	sete   al
c0011925:	0f b6 c0             	movzx  eax,al
c0011928:	85 c0                	test   eax,eax
c001192a:	74 0c                	je     c0011938 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001192c:	b8 97 16 01 c0       	mov    eax,0xc0011697
c0011931:	e9 06 01 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011936:	66 90                	xchg   ax,ax
c0011938:	83 ec 08             	sub    esp,0x8
c001193b:	68 ef 24 02 c0       	push   0xc00224ef
c0011940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011944:	e8 07 ee fe ff       	call   c0000750 <strcmp>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	85 c0                	test   eax,eax
c001194e:	0f 94 c0             	sete   al
c0011951:	0f b6 c0             	movzx  eax,al
c0011954:	85 c0                	test   eax,eax
c0011956:	74 0c                	je     c0011964 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011958:	b8 97 0f 01 c0       	mov    eax,0xc0010f97
c001195d:	e9 da 00 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011962:	66 90                	xchg   ax,ax
c0011964:	83 ec 08             	sub    esp,0x8
c0011967:	68 0c 25 02 c0       	push   0xc002250c
c001196c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011970:	e8 db ed fe ff       	call   c0000750 <strcmp>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	85 c0                	test   eax,eax
c001197a:	0f 94 c0             	sete   al
c001197d:	0f b6 c0             	movzx  eax,al
c0011980:	85 c0                	test   eax,eax
c0011982:	74 0c                	je     c0011990 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011984:	b8 f0 f8 01 c0       	mov    eax,0xc001f8f0
c0011989:	e9 ae 00 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198e:	66 90                	xchg   ax,ax
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	68 16 25 02 c0       	push   0xc0022516
c0011998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199c:	e8 af ed fe ff       	call   c0000750 <strcmp>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	85 c0                	test   eax,eax
c00119a6:	0f 94 c0             	sete   al
c00119a9:	0f b6 c0             	movzx  eax,al
c00119ac:	85 c0                	test   eax,eax
c00119ae:	74 0c                	je     c00119bc <KeResolveCompatibilitySymbol(char*)+0x138>
c00119b0:	b8 70 f6 01 c0       	mov    eax,0xc001f670
c00119b5:	e9 82 00 00 00       	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ba:	66 90                	xchg   ax,ax
c00119bc:	83 ec 08             	sub    esp,0x8
c00119bf:	68 1f 25 02 c0       	push   0xc002251f
c00119c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c8:	e8 83 ed fe ff       	call   c0000750 <strcmp>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	85 c0                	test   eax,eax
c00119d2:	0f 94 c0             	sete   al
c00119d5:	0f b6 c0             	movzx  eax,al
c00119d8:	85 c0                	test   eax,eax
c00119da:	74 08                	je     c00119e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00119dc:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119e1:	eb 59                	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119e3:	90                   	nop
c00119e4:	83 ec 08             	sub    esp,0x8
c00119e7:	68 37 25 02 c0       	push   0xc0022537
c00119ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f0:	e8 5b ed fe ff       	call   c0000750 <strcmp>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	85 c0                	test   eax,eax
c00119fa:	0f 94 c0             	sete   al
c00119fd:	0f b6 c0             	movzx  eax,al
c0011a00:	85 c0                	test   eax,eax
c0011a02:	74 08                	je     c0011a0c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a04:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a09:	eb 31                	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a0b:	90                   	nop
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	68 44 25 02 c0       	push   0xc0022544
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 33 ed fe ff       	call   c0000750 <strcmp>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	85 c0                	test   eax,eax
c0011a22:	0f 94 c0             	sete   al
c0011a25:	0f b6 c0             	movzx  eax,al
c0011a28:	85 c0                	test   eax,eax
c0011a2a:	74 08                	je     c0011a34 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a2c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a31:	eb 09                	jmp    c0011a3c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a33:	90                   	nop
c0011a34:	b8 00 00 00 00       	mov    eax,0x0
c0011a39:	8d 76 00             	lea    esi,[esi+0x0]
c0011a3c:	83 c4 0c             	add    esp,0xc
c0011a3f:	c3                   	ret    

c0011a40 <KiSigKill(int)>:
c0011a40:	83 ec 0c             	sub    esp,0xc
c0011a43:	6a 00                	push   0x0
c0011a45:	6a 00                	push   0x0
c0011a47:	6a ff                	push   0xffffffff
c0011a49:	6a 01                	push   0x1
c0011a4b:	e8 02 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a50:	83 c4 1c             	add    esp,0x1c
c0011a53:	c3                   	ret    

c0011a54 <KiDefaultSignalHandlerIgnore(int)>:
c0011a54:	c3                   	ret    

c0011a55 <KiDefaultSignalHandlerPause(int)>:
c0011a55:	57                   	push   edi
c0011a56:	b9 07 00 00 00       	mov    ecx,0x7
c0011a5b:	56                   	push   esi
c0011a5c:	be 8d 25 02 c0       	mov    esi,0xc002258d
c0011a61:	83 ec 24             	sub    esp,0x24
c0011a64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a68:	fc                   	cld    
c0011a69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a6b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a6f:	50                   	push   eax
c0011a70:	6a 00                	push   0x0
c0011a72:	6a 00                	push   0x0
c0011a74:	6a 27                	push   0x27
c0011a76:	e8 d7 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a7b:	83 c4 34             	add    esp,0x34
c0011a7e:	5e                   	pop    esi
c0011a7f:	5f                   	pop    edi
c0011a80:	c3                   	ret    

c0011a81 <KiDefaultSignalHandlerResume(int)>:
c0011a81:	57                   	push   edi
c0011a82:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a87:	56                   	push   esi
c0011a88:	be a9 25 02 c0       	mov    esi,0xc00225a9
c0011a8d:	83 ec 24             	sub    esp,0x24
c0011a90:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a94:	fc                   	cld    
c0011a95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a97:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a9b:	50                   	push   eax
c0011a9c:	6a 00                	push   0x0
c0011a9e:	6a 00                	push   0x0
c0011aa0:	6a 27                	push   0x27
c0011aa2:	e8 ab 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011aa7:	83 c4 34             	add    esp,0x34
c0011aaa:	5e                   	pop    esi
c0011aab:	5f                   	pop    edi
c0011aac:	c3                   	ret    

c0011aad <KeDeinitSignals(SigHandlerBlock*)>:
c0011aad:	e9 34 60 ff ff       	jmp    c0007ae6 <free>

c0011ab2 <KeInitSignals()>:
c0011ab2:	53                   	push   ebx
c0011ab3:	83 ec 14             	sub    esp,0x14
c0011ab6:	68 c8 00 00 00       	push   0xc8
c0011abb:	e8 16 60 ff ff       	call   c0007ad6 <malloc>
c0011ac0:	83 c4 0c             	add    esp,0xc
c0011ac3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011acd:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011ad7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011ade:	89 c3                	mov    ebx,eax
c0011ae0:	6a 20                	push   0x20
c0011ae2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011ae8:	6a 00                	push   0x0
c0011aea:	50                   	push   eax
c0011aeb:	e8 00 ea fe ff       	call   c00004f0 <memset>
c0011af0:	83 c4 0c             	add    esp,0xc
c0011af3:	6a 44                	push   0x44
c0011af5:	6a 00                	push   0x0
c0011af7:	53                   	push   ebx
c0011af8:	e8 f3 e9 fe ff       	call   c00004f0 <memset>
c0011afd:	89 d8                	mov    eax,ebx
c0011aff:	83 c4 18             	add    esp,0x18
c0011b02:	5b                   	pop    ebx
c0011b03:	c3                   	ret    

c0011b04 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b04:	53                   	push   ebx
c0011b05:	b8 01 00 00 00       	mov    eax,0x1
c0011b0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b12:	83 f9 10             	cmp    ecx,0x10
c0011b15:	7f 21                	jg     c0011b38 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b17:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b1e:	89 03                	mov    DWORD PTR [ebx],eax
c0011b20:	b8 01 00 00 00       	mov    eax,0x1
c0011b25:	d3 e0                	shl    eax,cl
c0011b27:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b2b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b2e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b36:	31 c0                	xor    eax,eax
c0011b38:	5b                   	pop    ebx
c0011b39:	c3                   	ret    

c0011b3a <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b3a:	55                   	push   ebp
c0011b3b:	57                   	push   edi
c0011b3c:	bf 08 00 00 00       	mov    edi,0x8
c0011b41:	56                   	push   esi
c0011b42:	53                   	push   ebx
c0011b43:	83 ec 18             	sub    esp,0x18
c0011b46:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b4a:	68 c6 25 02 c0       	push   0xc00225c6
c0011b4f:	e8 11 8e ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0011b54:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b5b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	31 c9                	xor    ecx,ecx
c0011b66:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b6a:	99                   	cdq    
c0011b6b:	f7 ff                	idiv   edi
c0011b6d:	8d 42 24             	lea    eax,[edx+0x24]
c0011b70:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b74:	85 f6                	test   esi,esi
c0011b76:	75 1a                	jne    c0011b92 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b78:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b7c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b80:	50                   	push   eax
c0011b81:	50                   	push   eax
c0011b82:	52                   	push   edx
c0011b83:	68 d7 25 02 c0       	push   0xc00225d7
c0011b88:	e8 d8 8d ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	eb 1b                	jmp    c0011bad <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b92:	41                   	inc    ecx
c0011b93:	83 f9 08             	cmp    ecx,0x8
c0011b96:	75 ce                	jne    c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b98:	83 ec 0c             	sub    esp,0xc
c0011b9b:	be 01 00 00 00       	mov    esi,0x1
c0011ba0:	68 f8 25 02 c0       	push   0xc00225f8
c0011ba5:	e8 bb 8d ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	83 c4 0c             	add    esp,0xc
c0011bb0:	89 f0                	mov    eax,esi
c0011bb2:	5b                   	pop    ebx
c0011bb3:	5e                   	pop    esi
c0011bb4:	5f                   	pop    edi
c0011bb5:	5d                   	pop    ebp
c0011bb6:	c3                   	ret    

c0011bb7 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011bb7:	55                   	push   ebp
c0011bb8:	57                   	push   edi
c0011bb9:	56                   	push   esi
c0011bba:	53                   	push   ebx
c0011bbb:	51                   	push   ecx
c0011bbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bc0:	85 db                	test   ebx,ebx
c0011bc2:	0f 84 bc 00 00 00    	je     c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bc8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011bcf:	0f 84 af 00 00 00    	je     c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bd5:	31 c9                	xor    ecx,ecx
c0011bd7:	bf 08 00 00 00       	mov    edi,0x8
c0011bdc:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011be2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011be5:	99                   	cdq    
c0011be6:	f7 ff                	idiv   edi
c0011be8:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011bef:	85 ed                	test   ebp,ebp
c0011bf1:	0f 84 9e 00 00 00    	je     c0011c95 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011bf7:	89 e9                	mov    ecx,ebp
c0011bf9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011bff:	bf 01 00 00 00       	mov    edi,0x1
c0011c04:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c07:	d3 e7                	shl    edi,cl
c0011c09:	31 c9                	xor    ecx,ecx
c0011c0b:	b8 01 00 00 00       	mov    eax,0x1
c0011c10:	d3 e0                	shl    eax,cl
c0011c12:	85 04 24             	test   DWORD PTR [esp],eax
c0011c15:	74 06                	je     c0011c1d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c17:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c1b:	75 67                	jne    c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c1d:	41                   	inc    ecx
c0011c1e:	83 f9 11             	cmp    ecx,0x11
c0011c21:	75 e8                	jne    c0011c0b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c23:	46                   	inc    esi
c0011c24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c27:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c2d:	09 f8                	or     eax,edi
c0011c2f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c3a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c40:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c47:	31 c0                	xor    eax,eax
c0011c49:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c51:	74 09                	je     c0011c5c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c53:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c5a:	eb 06                	jmp    c0011c62 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c5c:	40                   	inc    eax
c0011c5d:	83 f8 08             	cmp    eax,0x8
c0011c60:	75 e7                	jne    c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c62:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c69:	83 fd 09             	cmp    ebp,0x9
c0011c6c:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c6e:	75 07                	jne    c0011c77 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c70:	b8 40 1a 01 c0       	mov    eax,0xc0011a40
c0011c75:	eb 31                	jmp    c0011ca8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c77:	83 f8 01             	cmp    eax,0x1
c0011c7a:	75 0c                	jne    c0011c88 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c7c:	f7 d7                	not    edi
c0011c7e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c84:	31 c0                	xor    eax,eax
c0011c86:	eb 20                	jmp    c0011ca8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c88:	85 c0                	test   eax,eax
c0011c8a:	75 1c                	jne    c0011ca8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c8c:	8b 04 ad 00 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc200]
c0011c93:	eb 13                	jmp    c0011ca8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c95:	46                   	inc    esi
c0011c96:	41                   	inc    ecx
c0011c97:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c9d:	83 f9 08             	cmp    ecx,0x8
c0011ca0:	0f 85 36 ff ff ff    	jne    c0011bdc <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011ca6:	eb dc                	jmp    c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ca8:	5a                   	pop    edx
c0011ca9:	5b                   	pop    ebx
c0011caa:	5e                   	pop    esi
c0011cab:	5f                   	pop    edi
c0011cac:	5d                   	pop    ebp
c0011cad:	c3                   	ret    

c0011cae <KiCheckSignalZ>:
c0011cae:	83 ec 10             	sub    esp,0x10
c0011cb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cb5:	50                   	push   eax
c0011cb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cbe:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cc4:	e8 ee fe ff ff       	call   c0011bb7 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011cc9:	5a                   	pop    edx
c0011cca:	31 d2                	xor    edx,edx
c0011ccc:	59                   	pop    ecx
c0011ccd:	85 c0                	test   eax,eax
c0011ccf:	74 19                	je     c0011cea <KiCheckSignalZ+0x3c>
c0011cd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011cd7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011cda:	89 02                	mov    DWORD PTR [edx],eax
c0011cdc:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011cea:	89 d0                	mov    eax,edx
c0011cec:	83 c4 10             	add    esp,0x10
c0011cef:	c3                   	ret    

c0011cf0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011cf0:	56                   	push   esi
c0011cf1:	53                   	push   ebx
c0011cf2:	bb 01 00 00 00       	mov    ebx,0x1
c0011cf7:	52                   	push   edx
c0011cf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cfc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d00:	d3 e3                	shl    ebx,cl
c0011d02:	83 f9 10             	cmp    ecx,0x10
c0011d05:	7f 08                	jg     c0011d0f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d07:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d0d:	75 10                	jne    c0011d1f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d0f:	83 ec 0c             	sub    esp,0xc
c0011d12:	68 09 26 02 c0       	push   0xc0022609
c0011d17:	e8 7b f9 ff ff       	call   c0011697 <KePanic(char const*)>
c0011d1c:	83 c4 10             	add    esp,0x10
c0011d1f:	f7 d3                	not    ebx
c0011d21:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d27:	58                   	pop    eax
c0011d28:	5b                   	pop    ebx
c0011d29:	5e                   	pop    esi
c0011d2a:	c3                   	ret    

c0011d2b <KiFinishSignalZ>:
c0011d2b:	53                   	push   ebx
c0011d2c:	83 ec 10             	sub    esp,0x10
c0011d2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d33:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d3e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d44:	e8 a7 ff ff ff       	call   c0011cf0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d49:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d5d:	83 c4 18             	add    esp,0x18
c0011d60:	5b                   	pop    ebx
c0011d61:	c3                   	ret    

c0011d62 <SysSeekDir(regs*)>:
c0011d62:	31 c0                	xor    eax,eax
c0011d64:	31 d2                	xor    edx,edx
c0011d66:	c3                   	ret    

c0011d67 <SysTellDir(regs*)>:
c0011d67:	31 c0                	xor    eax,eax
c0011d69:	31 d2                	xor    edx,edx
c0011d6b:	c3                   	ret    

c0011d6c <SysVerify(regs*)>:
c0011d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d70:	31 d2                	xor    edx,edx
c0011d72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d75:	c3                   	ret    

c0011d76 <SysGetArgc(regs*)>:
c0011d76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d84:	89 c2                	mov    edx,eax
c0011d86:	c1 fa 1f             	sar    edx,0x1f
c0011d89:	c3                   	ret    

c0011d8a <SysTTYName(regs*)>:
c0011d8a:	b8 01 00 00 00       	mov    eax,0x1
c0011d8f:	31 d2                	xor    edx,edx
c0011d91:	c3                   	ret    

c0011d92 <SysFormatDisk(regs*)>:
c0011d92:	56                   	push   esi
c0011d93:	53                   	push   ebx
c0011d94:	83 ec 04             	sub    esp,0x4
c0011d97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d9b:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011da1:	eb 28                	jmp    c0011dcb <SysFormatDisk(regs*)+0x39>
c0011da3:	83 ec 0c             	sub    esp,0xc
c0011da6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011da9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011dac:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dae:	51                   	push   ecx
c0011daf:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011db2:	51                   	push   ecx
c0011db3:	50                   	push   eax
c0011db4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011dbb:	50                   	push   eax
c0011dbc:	53                   	push   ebx
c0011dbd:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011dc0:	83 c4 20             	add    esp,0x20
c0011dc3:	83 f8 08             	cmp    eax,0x8
c0011dc6:	75 14                	jne    c0011ddc <SysFormatDisk(regs*)+0x4a>
c0011dc8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011dcb:	85 db                	test   ebx,ebx
c0011dcd:	75 d4                	jne    c0011da3 <SysFormatDisk(regs*)+0x11>
c0011dcf:	83 c4 04             	add    esp,0x4
c0011dd2:	b8 03 00 00 00       	mov    eax,0x3
c0011dd7:	31 d2                	xor    edx,edx
c0011dd9:	5b                   	pop    ebx
c0011dda:	5e                   	pop    esi
c0011ddb:	c3                   	ret    
c0011ddc:	85 c0                	test   eax,eax
c0011dde:	74 1f                	je     c0011dff <SysFormatDisk(regs*)+0x6d>
c0011de0:	83 f8 09             	cmp    eax,0x9
c0011de3:	74 0d                	je     c0011df2 <SysFormatDisk(regs*)+0x60>
c0011de5:	83 c4 04             	add    esp,0x4
c0011de8:	b8 02 00 00 00       	mov    eax,0x2
c0011ded:	31 d2                	xor    edx,edx
c0011def:	5b                   	pop    ebx
c0011df0:	5e                   	pop    esi
c0011df1:	c3                   	ret    
c0011df2:	83 c4 04             	add    esp,0x4
c0011df5:	b8 01 00 00 00       	mov    eax,0x1
c0011dfa:	31 d2                	xor    edx,edx
c0011dfc:	5b                   	pop    ebx
c0011dfd:	5e                   	pop    esi
c0011dfe:	c3                   	ret    
c0011dff:	83 c4 04             	add    esp,0x4
c0011e02:	31 c0                	xor    eax,eax
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	5b                   	pop    ebx
c0011e07:	5e                   	pop    esi
c0011e08:	c3                   	ret    

c0011e09 <SysSetDiskVolumeLabel(regs*)>:
c0011e09:	56                   	push   esi
c0011e0a:	53                   	push   ebx
c0011e0b:	83 ec 04             	sub    esp,0x4
c0011e0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e12:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e15:	83 f8 19             	cmp    eax,0x19
c0011e18:	77 33                	ja     c0011e4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e1a:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e21:	85 c9                	test   ecx,ecx
c0011e23:	74 28                	je     c0011e4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e25:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e28:	85 db                	test   ebx,ebx
c0011e2a:	74 21                	je     c0011e4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e2c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e32:	85 d2                	test   edx,edx
c0011e34:	74 17                	je     c0011e4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e36:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e38:	53                   	push   ebx
c0011e39:	50                   	push   eax
c0011e3a:	51                   	push   ecx
c0011e3b:	52                   	push   edx
c0011e3c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	89 c2                	mov    edx,eax
c0011e44:	83 c4 04             	add    esp,0x4
c0011e47:	c1 fa 1f             	sar    edx,0x1f
c0011e4a:	5b                   	pop    ebx
c0011e4b:	5e                   	pop    esi
c0011e4c:	c3                   	ret    
c0011e4d:	83 c4 04             	add    esp,0x4
c0011e50:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5a:	5b                   	pop    ebx
c0011e5b:	5e                   	pop    esi
c0011e5c:	c3                   	ret    

c0011e5d <SysGetDiskVolumeLabel(regs*)>:
c0011e5d:	57                   	push   edi
c0011e5e:	56                   	push   esi
c0011e5f:	53                   	push   ebx
c0011e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e64:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e67:	83 fa 19             	cmp    edx,0x19
c0011e6a:	77 3c                	ja     c0011ea8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e6c:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e73:	85 c9                	test   ecx,ecx
c0011e75:	74 31                	je     c0011ea8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e77:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e7a:	85 db                	test   ebx,ebx
c0011e7c:	74 2a                	je     c0011ea8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e7e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e81:	85 f6                	test   esi,esi
c0011e83:	74 23                	je     c0011ea8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e85:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e8b:	85 c0                	test   eax,eax
c0011e8d:	74 19                	je     c0011ea8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e8f:	83 ec 0c             	sub    esp,0xc
c0011e92:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e94:	56                   	push   esi
c0011e95:	53                   	push   ebx
c0011e96:	52                   	push   edx
c0011e97:	51                   	push   ecx
c0011e98:	50                   	push   eax
c0011e99:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e9c:	83 c4 20             	add    esp,0x20
c0011e9f:	89 c2                	mov    edx,eax
c0011ea1:	5b                   	pop    ebx
c0011ea2:	c1 fa 1f             	sar    edx,0x1f
c0011ea5:	5e                   	pop    esi
c0011ea6:	5f                   	pop    edi
c0011ea7:	c3                   	ret    
c0011ea8:	5b                   	pop    ebx
c0011ea9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011eae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eb3:	5e                   	pop    esi
c0011eb4:	5f                   	pop    edi
c0011eb5:	c3                   	ret    

c0011eb6 <SysShutdown(regs*)>:
c0011eb6:	83 ec 0c             	sub    esp,0xc
c0011eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ebd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ec0:	85 c0                	test   eax,eax
c0011ec2:	74 18                	je     c0011edc <SysShutdown(regs*)+0x26>
c0011ec4:	83 f8 01             	cmp    eax,0x1
c0011ec7:	74 38                	je     c0011f01 <SysShutdown(regs*)+0x4b>
c0011ec9:	83 f8 02             	cmp    eax,0x2
c0011ecc:	74 24                	je     c0011ef2 <SysShutdown(regs*)+0x3c>
c0011ece:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ed3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed8:	83 c4 0c             	add    esp,0xc
c0011edb:	c3                   	ret    
c0011edc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ee1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ee3:	6a 00                	push   0x0
c0011ee5:	6a 00                	push   0x0
c0011ee7:	6a 00                	push   0x0
c0011ee9:	50                   	push   eax
c0011eea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011eed:	83 c4 10             	add    esp,0x10
c0011ef0:	eb dc                	jmp    c0011ece <SysShutdown(regs*)+0x18>
c0011ef2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ef7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef9:	6a 00                	push   0x0
c0011efb:	6a 00                	push   0x0
c0011efd:	6a 01                	push   0x1
c0011eff:	eb e8                	jmp    c0011ee9 <SysShutdown(regs*)+0x33>
c0011f01:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f06:	85 c0                	test   eax,eax
c0011f08:	74 02                	je     c0011f0c <SysShutdown(regs*)+0x56>
c0011f0a:	ff d0                	call   eax
c0011f0c:	31 c0                	xor    eax,eax
c0011f0e:	31 d2                	xor    edx,edx
c0011f10:	83 c4 0c             	add    esp,0xc
c0011f13:	c3                   	ret    

c0011f14 <SysRealpath(regs*)>:
c0011f14:	83 ec 0c             	sub    esp,0xc
c0011f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f1e:	85 d2                	test   edx,edx
c0011f20:	74 07                	je     c0011f29 <SysRealpath(regs*)+0x15>
c0011f22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f25:	85 c0                	test   eax,eax
c0011f27:	75 0b                	jne    c0011f34 <SysRealpath(regs*)+0x20>
c0011f29:	b8 01 00 00 00       	mov    eax,0x1
c0011f2e:	31 d2                	xor    edx,edx
c0011f30:	83 c4 0c             	add    esp,0xc
c0011f33:	c3                   	ret    
c0011f34:	6a 00                	push   0x0
c0011f36:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f3c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f3f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f45:	51                   	push   ecx
c0011f46:	52                   	push   edx
c0011f47:	50                   	push   eax
c0011f48:	e8 27 99 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f4d:	83 c4 10             	add    esp,0x10
c0011f50:	31 c0                	xor    eax,eax
c0011f52:	31 d2                	xor    edx,edx
c0011f54:	83 c4 0c             	add    esp,0xc
c0011f57:	c3                   	ret    

c0011f58 <SysReadDir(regs*)>:
c0011f58:	53                   	push   ebx
c0011f59:	83 ec 18             	sub    esp,0x18
c0011f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f63:	83 f8 02             	cmp    eax,0x2
c0011f66:	76 61                	jbe    c0011fc9 <SysReadDir(regs*)+0x71>
c0011f68:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f6f:	77 49                	ja     c0011fba <SysReadDir(regs*)+0x62>
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	50                   	push   eax
c0011f75:	e8 59 75 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c0011f7a:	83 c4 10             	add    esp,0x10
c0011f7d:	85 c0                	test   eax,eax
c0011f7f:	74 39                	je     c0011fba <SysReadDir(regs*)+0x62>
c0011f81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f8e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f92:	51                   	push   ecx
c0011f93:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f96:	51                   	push   ecx
c0011f97:	6a 00                	push   0x0
c0011f99:	68 10 01 00 00       	push   0x110
c0011f9e:	50                   	push   eax
c0011f9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011fa2:	83 c4 20             	add    esp,0x20
c0011fa5:	85 c0                	test   eax,eax
c0011fa7:	74 29                	je     c0011fd2 <SysReadDir(regs*)+0x7a>
c0011fa9:	83 f8 07             	cmp    eax,0x7
c0011fac:	74 1b                	je     c0011fc9 <SysReadDir(regs*)+0x71>
c0011fae:	b8 02 00 00 00       	mov    eax,0x2
c0011fb3:	31 d2                	xor    edx,edx
c0011fb5:	83 c4 18             	add    esp,0x18
c0011fb8:	5b                   	pop    ebx
c0011fb9:	c3                   	ret    
c0011fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc4:	83 c4 18             	add    esp,0x18
c0011fc7:	5b                   	pop    ebx
c0011fc8:	c3                   	ret    
c0011fc9:	b8 01 00 00 00       	mov    eax,0x1
c0011fce:	31 d2                	xor    edx,edx
c0011fd0:	eb e3                	jmp    c0011fb5 <SysReadDir(regs*)+0x5d>
c0011fd2:	31 c0                	xor    eax,eax
c0011fd4:	31 d2                	xor    edx,edx
c0011fd6:	eb dd                	jmp    c0011fb5 <SysReadDir(regs*)+0x5d>

c0011fd8 <SysIsATTY(regs*)>:
c0011fd8:	83 ec 0c             	sub    esp,0xc
c0011fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fe2:	83 f8 02             	cmp    eax,0x2
c0011fe5:	76 07                	jbe    c0011fee <SysIsATTY(regs*)+0x16>
c0011fe7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011fec:	75 26                	jne    c0012014 <SysIsATTY(regs*)+0x3c>
c0011fee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ff6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ffc:	85 c0                	test   eax,eax
c0011ffe:	74 24                	je     c0012024 <SysIsATTY(regs*)+0x4c>
c0012000:	83 ec 0c             	sub    esp,0xc
c0012003:	8b 10                	mov    edx,DWORD PTR [eax]
c0012005:	50                   	push   eax
c0012006:	ff 12                	call   DWORD PTR [edx]
c0012008:	31 d2                	xor    edx,edx
c001200a:	0f b6 c0             	movzx  eax,al
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	83 c4 0c             	add    esp,0xc
c0012013:	c3                   	ret    
c0012014:	83 ec 0c             	sub    esp,0xc
c0012017:	50                   	push   eax
c0012018:	e8 b6 74 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	85 c0                	test   eax,eax
c0012022:	75 dc                	jne    c0012000 <SysIsATTY(regs*)+0x28>
c0012024:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012029:	ba ff ff ff ff       	mov    edx,0xffffffff
c001202e:	83 c4 0c             	add    esp,0xc
c0012031:	c3                   	ret    

c0012032 <SysSeek(regs*)>:
c0012032:	53                   	push   ebx
c0012033:	83 ec 08             	sub    esp,0x8
c0012036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001203a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001203d:	8d 50 fd             	lea    edx,[eax-0x3]
c0012040:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012046:	77 32                	ja     c001207a <SysSeek(regs*)+0x48>
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	50                   	push   eax
c001204c:	e8 82 74 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c0012051:	83 c4 0c             	add    esp,0xc
c0012054:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012057:	31 db                	xor    ebx,ebx
c0012059:	53                   	push   ebx
c001205a:	51                   	push   ecx
c001205b:	50                   	push   eax
c001205c:	e8 e7 9b ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	85 c0                	test   eax,eax
c0012066:	0f 95 c0             	setne  al
c0012069:	31 d2                	xor    edx,edx
c001206b:	0f b6 c0             	movzx  eax,al
c001206e:	f7 d8                	neg    eax
c0012070:	83 d2 00             	adc    edx,0x0
c0012073:	83 c4 08             	add    esp,0x8
c0012076:	f7 da                	neg    edx
c0012078:	5b                   	pop    ebx
c0012079:	c3                   	ret    
c001207a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001207f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012084:	83 c4 08             	add    esp,0x8
c0012087:	5b                   	pop    ebx
c0012088:	c3                   	ret    

c0012089 <SysTell(regs*)>:
c0012089:	53                   	push   ebx
c001208a:	83 ec 08             	sub    esp,0x8
c001208d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012091:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012094:	83 f8 02             	cmp    eax,0x2
c0012097:	76 4e                	jbe    c00120e7 <SysTell(regs*)+0x5e>
c0012099:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001209e:	76 19                	jbe    c00120b9 <SysTell(regs*)+0x30>
c00120a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b2:	31 c0                	xor    eax,eax
c00120b4:	83 c4 08             	add    esp,0x8
c00120b7:	5b                   	pop    ebx
c00120b8:	c3                   	ret    
c00120b9:	83 ec 0c             	sub    esp,0xc
c00120bc:	50                   	push   eax
c00120bd:	e8 11 74 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c00120c2:	5a                   	pop    edx
c00120c3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120c6:	59                   	pop    ecx
c00120c7:	53                   	push   ebx
c00120c8:	50                   	push   eax
c00120c9:	e8 26 9c ff ff       	call   c000bcf4 <File::tell(unsigned long long*)>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	85 c0                	test   eax,eax
c00120d3:	0f 95 c0             	setne  al
c00120d6:	31 d2                	xor    edx,edx
c00120d8:	0f b6 c0             	movzx  eax,al
c00120db:	f7 d8                	neg    eax
c00120dd:	83 d2 00             	adc    edx,0x0
c00120e0:	83 c4 08             	add    esp,0x8
c00120e3:	f7 da                	neg    edx
c00120e5:	5b                   	pop    ebx
c00120e6:	c3                   	ret    
c00120e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120f1:	83 c4 08             	add    esp,0x8
c00120f4:	5b                   	pop    ebx
c00120f5:	c3                   	ret    

c00120f6 <SysSize(regs*)>:
c00120f6:	53                   	push   ebx
c00120f7:	83 ec 18             	sub    esp,0x18
c00120fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012101:	83 f8 02             	cmp    eax,0x2
c0012104:	76 54                	jbe    c001215a <SysSize(regs*)+0x64>
c0012106:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001210b:	76 19                	jbe    c0012126 <SysSize(regs*)+0x30>
c001210d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012110:	31 d2                	xor    edx,edx
c0012112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012118:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211f:	31 c0                	xor    eax,eax
c0012121:	83 c4 18             	add    esp,0x18
c0012124:	5b                   	pop    ebx
c0012125:	c3                   	ret    
c0012126:	83 ec 0c             	sub    esp,0xc
c0012129:	50                   	push   eax
c001212a:	e8 a4 73 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c001212f:	83 c4 0c             	add    esp,0xc
c0012132:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012136:	52                   	push   edx
c0012137:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001213a:	52                   	push   edx
c001213b:	50                   	push   eax
c001213c:	e8 4b 9d ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	85 c0                	test   eax,eax
c0012146:	0f 95 c0             	setne  al
c0012149:	31 d2                	xor    edx,edx
c001214b:	0f b6 c0             	movzx  eax,al
c001214e:	f7 d8                	neg    eax
c0012150:	83 d2 00             	adc    edx,0x0
c0012153:	83 c4 18             	add    esp,0x18
c0012156:	f7 da                	neg    edx
c0012158:	5b                   	pop    ebx
c0012159:	c3                   	ret    
c001215a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001215f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012164:	83 c4 18             	add    esp,0x18
c0012167:	5b                   	pop    ebx
c0012168:	c3                   	ret    

c0012169 <SysSizeFromFilename(regs*)>:
c0012169:	55                   	push   ebp
c001216a:	57                   	push   edi
c001216b:	56                   	push   esi
c001216c:	53                   	push   ebx
c001216d:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012173:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001217a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001217d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012180:	85 f6                	test   esi,esi
c0012182:	74 34                	je     c00121b8 <SysSizeFromFilename(regs*)+0x4f>
c0012184:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001218a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001218d:	83 f8 02             	cmp    eax,0x2
c0012190:	76 2d                	jbe    c00121bf <SysSizeFromFilename(regs*)+0x56>
c0012192:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012197:	76 3b                	jbe    c00121d4 <SysSizeFromFilename(regs*)+0x6b>
c0012199:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001219c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121a9:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121af:	31 c0                	xor    eax,eax
c00121b1:	5b                   	pop    ebx
c00121b2:	31 d2                	xor    edx,edx
c00121b4:	5e                   	pop    esi
c00121b5:	5f                   	pop    edi
c00121b6:	5d                   	pop    ebp
c00121b7:	c3                   	ret    
c00121b8:	89 f8                	mov    eax,edi
c00121ba:	83 f8 02             	cmp    eax,0x2
c00121bd:	77 d3                	ja     c0012192 <SysSizeFromFilename(regs*)+0x29>
c00121bf:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121ca:	5b                   	pop    ebx
c00121cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121d0:	5e                   	pop    esi
c00121d1:	5f                   	pop    edi
c00121d2:	5d                   	pop    ebp
c00121d3:	c3                   	ret    
c00121d4:	83 ec 0c             	sub    esp,0xc
c00121d7:	68 14 01 00 00       	push   0x114
c00121dc:	e8 f5 58 ff ff       	call   c0007ad6 <malloc>
c00121e1:	6a 01                	push   0x1
c00121e3:	89 c5                	mov    ebp,eax
c00121e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ea:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121ed:	51                   	push   ecx
c00121ee:	57                   	push   edi
c00121ef:	55                   	push   ebp
c00121f0:	e8 99 98 ff ff       	call   c000ba8e <File::File(char const*, Process*, bool)>
c00121f5:	83 c4 1c             	add    esp,0x1c
c00121f8:	8d 44 24 23          	lea    eax,[esp+0x23]
c00121fc:	50                   	push   eax
c00121fd:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012200:	53                   	push   ebx
c0012201:	55                   	push   ebp
c0012202:	e8 85 9c ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0012207:	83 c4 10             	add    esp,0x10
c001220a:	85 ed                	test   ebp,ebp
c001220c:	74 15                	je     c0012223 <SysSizeFromFilename(regs*)+0xba>
c001220e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012212:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	55                   	push   ebp
c0012219:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012223:	85 c0                	test   eax,eax
c0012225:	75 98                	jne    c00121bf <SysSizeFromFilename(regs*)+0x56>
c0012227:	6a 00                	push   0x0
c0012229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001222e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012231:	05 0c 01 00 00       	add    eax,0x10c
c0012236:	50                   	push   eax
c0012237:	57                   	push   edi
c0012238:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001223f:	53                   	push   ebx
c0012240:	e8 2f 96 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012245:	58                   	pop    eax
c0012246:	5a                   	pop    edx
c0012247:	8d 44 24 28          	lea    eax,[esp+0x28]
c001224b:	50                   	push   eax
c001224c:	53                   	push   ebx
c001224d:	e8 8a 90 ff ff       	call   c000b2dc <KeDereferenceSymlink(char const*, char*)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	83 f8 01             	cmp    eax,0x1
c0012258:	74 1a                	je     c0012274 <SysSizeFromFilename(regs*)+0x10b>
c001225a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001225f:	74 26                	je     c0012287 <SysSizeFromFilename(regs*)+0x11e>
c0012261:	85 f6                	test   esi,esi
c0012263:	0f 84 40 ff ff ff    	je     c00121a9 <SysSizeFromFilename(regs*)+0x40>
c0012269:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001226f:	e9 35 ff ff ff       	jmp    c00121a9 <SysSizeFromFilename(regs*)+0x40>
c0012274:	85 f6                	test   esi,esi
c0012276:	0f 84 2d ff ff ff    	je     c00121a9 <SysSizeFromFilename(regs*)+0x40>
c001227c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012282:	e9 22 ff ff ff       	jmp    c00121a9 <SysSizeFromFilename(regs*)+0x40>
c0012287:	85 f6                	test   esi,esi
c0012289:	0f 84 1a ff ff ff    	je     c00121a9 <SysSizeFromFilename(regs*)+0x40>
c001228f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012295:	e9 0f ff ff ff       	jmp    c00121a9 <SysSizeFromFilename(regs*)+0x40>

c001229a <SysSizeFromFilenameNoSymlink(regs*)>:
c001229a:	55                   	push   ebp
c001229b:	57                   	push   edi
c001229c:	56                   	push   esi
c001229d:	53                   	push   ebx
c001229e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122a4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122ab:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122ae:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122b1:	85 f6                	test   esi,esi
c00122b3:	74 34                	je     c00122e9 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00122b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122be:	83 f8 02             	cmp    eax,0x2
c00122c1:	76 2d                	jbe    c00122f0 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122c3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122c8:	76 3b                	jbe    c0012305 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122da:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122e0:	31 c0                	xor    eax,eax
c00122e2:	5b                   	pop    ebx
c00122e3:	31 d2                	xor    edx,edx
c00122e5:	5e                   	pop    esi
c00122e6:	5f                   	pop    edi
c00122e7:	5d                   	pop    ebp
c00122e8:	c3                   	ret    
c00122e9:	89 f8                	mov    eax,edi
c00122eb:	83 f8 02             	cmp    eax,0x2
c00122ee:	77 d3                	ja     c00122c3 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00122f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122fb:	5b                   	pop    ebx
c00122fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012301:	5e                   	pop    esi
c0012302:	5f                   	pop    edi
c0012303:	5d                   	pop    ebp
c0012304:	c3                   	ret    
c0012305:	83 ec 0c             	sub    esp,0xc
c0012308:	68 14 01 00 00       	push   0x114
c001230d:	e8 c4 57 ff ff       	call   c0007ad6 <malloc>
c0012312:	6a 00                	push   0x0
c0012314:	89 c5                	mov    ebp,eax
c0012316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001231b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001231e:	51                   	push   ecx
c001231f:	57                   	push   edi
c0012320:	55                   	push   ebp
c0012321:	e8 68 97 ff ff       	call   c000ba8e <File::File(char const*, Process*, bool)>
c0012326:	83 c4 1c             	add    esp,0x1c
c0012329:	8d 44 24 23          	lea    eax,[esp+0x23]
c001232d:	50                   	push   eax
c001232e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012331:	53                   	push   ebx
c0012332:	55                   	push   ebp
c0012333:	e8 54 9b ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	85 ed                	test   ebp,ebp
c001233d:	74 15                	je     c0012354 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001233f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012343:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	55                   	push   ebp
c001234a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012354:	85 c0                	test   eax,eax
c0012356:	75 98                	jne    c00122f0 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012358:	6a 00                	push   0x0
c001235a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001235f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012362:	05 0c 01 00 00       	add    eax,0x10c
c0012367:	50                   	push   eax
c0012368:	57                   	push   edi
c0012369:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012370:	53                   	push   ebx
c0012371:	e8 fe 94 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012376:	58                   	pop    eax
c0012377:	5a                   	pop    edx
c0012378:	8d 44 24 28          	lea    eax,[esp+0x28]
c001237c:	50                   	push   eax
c001237d:	53                   	push   ebx
c001237e:	e8 59 8f ff ff       	call   c000b2dc <KeDereferenceSymlink(char const*, char*)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	83 f8 01             	cmp    eax,0x1
c0012389:	74 1a                	je     c00123a5 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c001238b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012390:	74 26                	je     c00123b8 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0012392:	85 f6                	test   esi,esi
c0012394:	0f 84 40 ff ff ff    	je     c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001239a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123a0:	e9 35 ff ff ff       	jmp    c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123a5:	85 f6                	test   esi,esi
c00123a7:	0f 84 2d ff ff ff    	je     c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123ad:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123b3:	e9 22 ff ff ff       	jmp    c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123b8:	85 f6                	test   esi,esi
c00123ba:	0f 84 1a ff ff ff    	je     c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123c0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123c6:	e9 0f ff ff ff       	jmp    c00122da <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123cb <SysClose(regs*)>:
c00123cb:	53                   	push   ebx
c00123cc:	83 ec 08             	sub    esp,0x8
c00123cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123d6:	83 f8 02             	cmp    eax,0x2
c00123d9:	76 41                	jbe    c001241c <SysClose(regs*)+0x51>
c00123db:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00123e1:	83 fa 01             	cmp    edx,0x1
c00123e4:	76 2d                	jbe    c0012413 <SysClose(regs*)+0x48>
c00123e6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00123eb:	77 2f                	ja     c001241c <SysClose(regs*)+0x51>
c00123ed:	83 ec 0c             	sub    esp,0xc
c00123f0:	50                   	push   eax
c00123f1:	e8 dd 70 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c00123f6:	89 c3                	mov    ebx,eax
c00123f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00123fb:	e8 e8 97 ff ff       	call   c000bbe8 <File::close()>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	85 db                	test   ebx,ebx
c0012405:	74 0c                	je     c0012413 <SysClose(regs*)+0x48>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001240c:	53                   	push   ebx
c001240d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	31 c0                	xor    eax,eax
c0012415:	31 d2                	xor    edx,edx
c0012417:	83 c4 08             	add    esp,0x8
c001241a:	5b                   	pop    ebx
c001241b:	c3                   	ret    
c001241c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012421:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012426:	83 c4 08             	add    esp,0x8
c0012429:	5b                   	pop    ebx
c001242a:	c3                   	ret    

c001242b <SysOpenDir(regs*)>:
c001242b:	56                   	push   esi
c001242c:	53                   	push   ebx
c001242d:	83 ec 04             	sub    esp,0x4
c0012430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012434:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012437:	85 c9                	test   ecx,ecx
c0012439:	74 5d                	je     c0012498 <SysOpenDir(regs*)+0x6d>
c001243b:	83 ec 0c             	sub    esp,0xc
c001243e:	68 14 01 00 00       	push   0x114
c0012443:	e8 8e 56 ff ff       	call   c0007ad6 <malloc>
c0012448:	83 c4 0c             	add    esp,0xc
c001244b:	89 c6                	mov    esi,eax
c001244d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012452:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012455:	50                   	push   eax
c0012456:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012459:	52                   	push   edx
c001245a:	56                   	push   esi
c001245b:	e8 ec 9b ff ff       	call   c000c04c <Directory::Directory(char const*, Process*)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	85 f6                	test   esi,esi
c0012465:	74 31                	je     c0012498 <SysOpenDir(regs*)+0x6d>
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	56                   	push   esi
c001246b:	e8 a4 9c ff ff       	call   c000c114 <Directory::open()>
c0012470:	83 c4 10             	add    esp,0x10
c0012473:	85 c0                	test   eax,eax
c0012475:	75 21                	jne    c0012498 <SysOpenDir(regs*)+0x6d>
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	56                   	push   esi
c001247b:	e8 56 6d ff ff       	call   c00091d6 <UnixFile::getFileDescriptor()>
c0012480:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012483:	83 c4 10             	add    esp,0x10
c0012486:	89 02                	mov    DWORD PTR [edx],eax
c0012488:	c1 f8 1f             	sar    eax,0x1f
c001248b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001248e:	83 c4 04             	add    esp,0x4
c0012491:	31 c0                	xor    eax,eax
c0012493:	31 d2                	xor    edx,edx
c0012495:	5b                   	pop    ebx
c0012496:	5e                   	pop    esi
c0012497:	c3                   	ret    
c0012498:	83 c4 04             	add    esp,0x4
c001249b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124a5:	5b                   	pop    ebx
c00124a6:	5e                   	pop    esi
c00124a7:	c3                   	ret    

c00124a8 <SysMakeDir(regs*)>:
c00124a8:	56                   	push   esi
c00124a9:	53                   	push   ebx
c00124aa:	83 ec 10             	sub    esp,0x10
c00124ad:	68 14 01 00 00       	push   0x114
c00124b2:	e8 1f 56 ff ff       	call   c0007ad6 <malloc>
c00124b7:	83 c4 0c             	add    esp,0xc
c00124ba:	89 c3                	mov    ebx,eax
c00124bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124c4:	50                   	push   eax
c00124c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124c9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124cc:	52                   	push   edx
c00124cd:	53                   	push   ebx
c00124ce:	e8 79 9b ff ff       	call   c000c04c <Directory::Directory(char const*, Process*)>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	85 db                	test   ebx,ebx
c00124d8:	74 2c                	je     c0012506 <SysMakeDir(regs*)+0x5e>
c00124da:	83 ec 0c             	sub    esp,0xc
c00124dd:	53                   	push   ebx
c00124de:	e8 11 9e ff ff       	call   c000c2f4 <Directory::create()>
c00124e3:	89 c6                	mov    esi,eax
c00124e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	31 c0                	xor    eax,eax
c00124f2:	85 f6                	test   esi,esi
c00124f4:	0f 95 c0             	setne  al
c00124f7:	31 d2                	xor    edx,edx
c00124f9:	f7 d8                	neg    eax
c00124fb:	83 d2 00             	adc    edx,0x0
c00124fe:	83 c4 04             	add    esp,0x4
c0012501:	f7 da                	neg    edx
c0012503:	5b                   	pop    ebx
c0012504:	5e                   	pop    esi
c0012505:	c3                   	ret    
c0012506:	83 c4 04             	add    esp,0x4
c0012509:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001250e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012513:	5b                   	pop    ebx
c0012514:	5e                   	pop    esi
c0012515:	c3                   	ret    

c0012516 <SysCloseDir(regs*)>:
c0012516:	53                   	push   ebx
c0012517:	83 ec 08             	sub    esp,0x8
c001251a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012521:	8d 50 fd             	lea    edx,[eax-0x3]
c0012524:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001252a:	77 2f                	ja     c001255b <SysCloseDir(regs*)+0x45>
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	50                   	push   eax
c0012530:	e8 9e 6f ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c0012535:	89 c3                	mov    ebx,eax
c0012537:	89 04 24             	mov    DWORD PTR [esp],eax
c001253a:	e8 31 9c ff ff       	call   c000c170 <Directory::close()>
c001253f:	83 c4 10             	add    esp,0x10
c0012542:	85 db                	test   ebx,ebx
c0012544:	74 0c                	je     c0012552 <SysCloseDir(regs*)+0x3c>
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	8b 03                	mov    eax,DWORD PTR [ebx]
c001254b:	53                   	push   ebx
c001254c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	31 c0                	xor    eax,eax
c0012554:	31 d2                	xor    edx,edx
c0012556:	83 c4 08             	add    esp,0x8
c0012559:	5b                   	pop    ebx
c001255a:	c3                   	ret    
c001255b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012560:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012565:	83 c4 08             	add    esp,0x8
c0012568:	5b                   	pop    ebx
c0012569:	c3                   	ret    

c001256a <SysWait(regs*)>:
c001256a:	83 ec 10             	sub    esp,0x10
c001256d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012571:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012574:	52                   	push   edx
c0012575:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012578:	51                   	push   ecx
c0012579:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001257c:	50                   	push   eax
c001257d:	e8 46 3e 00 00       	call   c00163c8 <waitTask(int, int*, int)>
c0012582:	83 c4 1c             	add    esp,0x1c
c0012585:	89 c2                	mov    edx,eax
c0012587:	c1 fa 1f             	sar    edx,0x1f
c001258a:	c3                   	ret    

c001258b <SysNotImpl(regs*)>:
c001258b:	83 ec 18             	sub    esp,0x18
c001258e:	68 1a 26 02 c0       	push   0xc002261a
c0012593:	e8 ff f0 ff ff       	call   c0011697 <KePanic(char const*)>
c0012598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001259d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125a2:	83 c4 1c             	add    esp,0x1c
c00125a5:	c3                   	ret    

c00125a6 <SysPanic(regs*)>:
c00125a6:	83 ec 18             	sub    esp,0x18
c00125a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125ad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125b0:	50                   	push   eax
c00125b1:	e8 e1 f0 ff ff       	call   c0011697 <KePanic(char const*)>
c00125b6:	b8 01 00 00 00       	mov    eax,0x1
c00125bb:	31 d2                	xor    edx,edx
c00125bd:	83 c4 1c             	add    esp,0x1c
c00125c0:	c3                   	ret    

c00125c1 <SysRmdir(regs*)>:
c00125c1:	56                   	push   esi
c00125c2:	53                   	push   ebx
c00125c3:	83 ec 20             	sub    esp,0x20
c00125c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125ca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125cd:	68 14 01 00 00       	push   0x114
c00125d2:	e8 ff 54 ff ff       	call   c0007ad6 <malloc>
c00125d7:	6a 00                	push   0x0
c00125d9:	89 c3                	mov    ebx,eax
c00125db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125e3:	50                   	push   eax
c00125e4:	56                   	push   esi
c00125e5:	53                   	push   ebx
c00125e6:	e8 a3 94 ff ff       	call   c000ba8e <File::File(char const*, Process*, bool)>
c00125eb:	83 c4 14             	add    esp,0x14
c00125ee:	53                   	push   ebx
c00125ef:	e8 64 97 ff ff       	call   c000bd58 <File::unlink()>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	85 db                	test   ebx,ebx
c00125f9:	74 14                	je     c001260f <SysRmdir(regs*)+0x4e>
c00125fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012601:	83 ec 0c             	sub    esp,0xc
c0012604:	53                   	push   ebx
c0012605:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260f:	85 c0                	test   eax,eax
c0012611:	0f 95 c0             	setne  al
c0012614:	31 d2                	xor    edx,edx
c0012616:	0f b6 c0             	movzx  eax,al
c0012619:	f7 d8                	neg    eax
c001261b:	83 d2 00             	adc    edx,0x0
c001261e:	83 c4 14             	add    esp,0x14
c0012621:	f7 da                	neg    edx
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	c3                   	ret    

c0012626 <SysUnlink(regs*)>:
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 20             	sub    esp,0x20
c001262b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012632:	68 14 01 00 00       	push   0x114
c0012637:	e8 9a 54 ff ff       	call   c0007ad6 <malloc>
c001263c:	6a 00                	push   0x0
c001263e:	89 c3                	mov    ebx,eax
c0012640:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012645:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012648:	50                   	push   eax
c0012649:	56                   	push   esi
c001264a:	53                   	push   ebx
c001264b:	e8 3e 94 ff ff       	call   c000ba8e <File::File(char const*, Process*, bool)>
c0012650:	83 c4 14             	add    esp,0x14
c0012653:	53                   	push   ebx
c0012654:	e8 ff 96 ff ff       	call   c000bd58 <File::unlink()>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	85 db                	test   ebx,ebx
c001265e:	74 14                	je     c0012674 <SysUnlink(regs*)+0x4e>
c0012660:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012664:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012666:	83 ec 0c             	sub    esp,0xc
c0012669:	53                   	push   ebx
c001266a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012674:	85 c0                	test   eax,eax
c0012676:	0f 95 c0             	setne  al
c0012679:	31 d2                	xor    edx,edx
c001267b:	0f b6 c0             	movzx  eax,al
c001267e:	f7 d8                	neg    eax
c0012680:	83 d2 00             	adc    edx,0x0
c0012683:	83 c4 14             	add    esp,0x14
c0012686:	f7 da                	neg    edx
c0012688:	5b                   	pop    ebx
c0012689:	5e                   	pop    esi
c001268a:	c3                   	ret    

c001268b <SysGetArgv(regs*)>:
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012692:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012695:	85 c0                	test   eax,eax
c0012697:	78 2c                	js     c00126c5 <SysGetArgv(regs*)+0x3a>
c0012699:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001269f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00126a2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00126a8:	7d 1b                	jge    c00126c5 <SysGetArgv(regs*)+0x3a>
c00126aa:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00126b1:	85 c0                	test   eax,eax
c00126b3:	74 18                	je     c00126cd <SysGetArgv(regs*)+0x42>
c00126b5:	83 ec 08             	sub    esp,0x8
c00126b8:	50                   	push   eax
c00126b9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00126bc:	50                   	push   eax
c00126bd:	e8 7e df fe ff       	call   c0000640 <strcpy>
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	31 c0                	xor    eax,eax
c00126c7:	31 d2                	xor    edx,edx
c00126c9:	83 c4 0c             	add    esp,0xc
c00126cc:	c3                   	ret    
c00126cd:	b8 01 00 00 00       	mov    eax,0x1
c00126d2:	31 d2                	xor    edx,edx
c00126d4:	83 c4 0c             	add    esp,0xc
c00126d7:	c3                   	ret    

c00126d8 <SysUSleep(regs*)>:
c00126d8:	83 ec 1c             	sub    esp,0x1c
c00126db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126df:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00126e2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00126e5:	6a 00                	push   0x0
c00126e7:	6a 64                	push   0x64
c00126e9:	52                   	push   edx
c00126ea:	50                   	push   eax
c00126eb:	e8 00 d1 00 00       	call   c001f7f0 <__udivdi3>
c00126f0:	83 c4 14             	add    esp,0x14
c00126f3:	50                   	push   eax
c00126f4:	e8 b3 3d 00 00       	call   c00164ac <milliTenthSleep(unsigned int)>
c00126f9:	31 c0                	xor    eax,eax
c00126fb:	31 d2                	xor    edx,edx
c00126fd:	83 c4 1c             	add    esp,0x1c
c0012700:	c3                   	ret    

c0012701 <SysSpawn(regs*)>:
c0012701:	56                   	push   esi
c0012702:	53                   	push   ebx
c0012703:	83 ec 04             	sub    esp,0x4
c0012706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001270a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001270d:	85 f6                	test   esi,esi
c001270f:	75 0a                	jne    c001271b <SysSpawn(regs*)+0x1a>
c0012711:	83 c4 04             	add    esp,0x4
c0012714:	31 c0                	xor    eax,eax
c0012716:	31 d2                	xor    edx,edx
c0012718:	5b                   	pop    ebx
c0012719:	5e                   	pop    esi
c001271a:	c3                   	ret    
c001271b:	83 ec 0c             	sub    esp,0xc
c001271e:	68 24 07 00 00       	push   0x724
c0012723:	e8 ae 53 ff ff       	call   c0007ad6 <malloc>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001272e:	89 c6                	mov    esi,eax
c0012730:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012733:	85 c9                	test   ecx,ecx
c0012735:	75 39                	jne    c0012770 <SysSpawn(regs*)+0x6f>
c0012737:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001273c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001273f:	52                   	push   edx
c0012740:	50                   	push   eax
c0012741:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012744:	50                   	push   eax
c0012745:	56                   	push   esi
c0012746:	e8 b1 33 00 00       	call   c0015afc <Process::Process(char const*, Process*, char**)>
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012755:	75 ba                	jne    c0012711 <SysSpawn(regs*)+0x10>
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	56                   	push   esi
c001275b:	e8 d8 38 00 00       	call   c0016038 <Process::createUserThread()>
c0012760:	8b 06                	mov    eax,DWORD PTR [esi]
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	89 c2                	mov    edx,eax
c0012767:	83 c4 04             	add    esp,0x4
c001276a:	c1 fa 1f             	sar    edx,0x1f
c001276d:	5b                   	pop    ebx
c001276e:	5e                   	pop    esi
c001276f:	c3                   	ret    
c0012770:	31 c0                	xor    eax,eax
c0012772:	eb cb                	jmp    c001273f <SysSpawn(regs*)+0x3e>

c0012774 <SysGetEnv(regs*)>:
c0012774:	57                   	push   edi
c0012775:	56                   	push   esi
c0012776:	53                   	push   ebx
c0012777:	83 ec 1c             	sub    esp,0x1c
c001277a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001277e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012783:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012786:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012789:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001278c:	51                   	push   ecx
c001278d:	e8 bd ed ff ff       	call   c001154f <KeGetProcessTotalEnvCount(Process*)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	39 c7                	cmp    edi,eax
c0012797:	7c 14                	jl     c00127ad <SysGetEnv(regs*)+0x39>
c0012799:	85 f6                	test   esi,esi
c001279b:	75 0b                	jne    c00127a8 <SysGetEnv(regs*)+0x34>
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	31 c0                	xor    eax,eax
c00127a2:	5b                   	pop    ebx
c00127a3:	31 d2                	xor    edx,edx
c00127a5:	5e                   	pop    esi
c00127a6:	5f                   	pop    edi
c00127a7:	c3                   	ret    
c00127a8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127ab:	eb f0                	jmp    c001279d <SysGetEnv(regs*)+0x29>
c00127ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127b1:	83 ec 04             	sub    esp,0x4
c00127b4:	57                   	push   edi
c00127b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00127bb:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00127be:	57                   	push   edi
c00127bf:	50                   	push   eax
c00127c0:	e8 aa ed ff ff       	call   c001156f <KeGetProcessEnvPair(Process*, int)>
c00127c5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127d0:	83 c4 0c             	add    esp,0xc
c00127d3:	85 d2                	test   edx,edx
c00127d5:	75 23                	jne    c00127fa <SysGetEnv(regs*)+0x86>
c00127d7:	83 ec 0c             	sub    esp,0xc
c00127da:	50                   	push   eax
c00127db:	e8 90 dd fe ff       	call   c0000570 <strlen>
c00127e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127e3:	89 c3                	mov    ebx,eax
c00127e5:	e8 86 dd fe ff       	call   c0000570 <strlen>
c00127ea:	83 c4 10             	add    esp,0x10
c00127ed:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	31 d2                	xor    edx,edx
c00127f6:	5b                   	pop    ebx
c00127f7:	5e                   	pop    esi
c00127f8:	5f                   	pop    edi
c00127f9:	c3                   	ret    
c00127fa:	83 ec 08             	sub    esp,0x8
c00127fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012800:	50                   	push   eax
c0012801:	56                   	push   esi
c0012802:	e8 39 de fe ff       	call   c0000640 <strcpy>
c0012807:	58                   	pop    eax
c0012808:	5a                   	pop    edx
c0012809:	68 34 26 02 c0       	push   0xc0022634
c001280e:	56                   	push   esi
c001280f:	e8 2c e0 fe ff       	call   c0000840 <strcat>
c0012814:	59                   	pop    ecx
c0012815:	5b                   	pop    ebx
c0012816:	57                   	push   edi
c0012817:	56                   	push   esi
c0012818:	e8 23 e0 fe ff       	call   c0000840 <strcat>
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	e9 78 ff ff ff       	jmp    c001279d <SysGetEnv(regs*)+0x29>

c0012825 <SysSetFatAttrib(regs*)>:
c0012825:	57                   	push   edi
c0012826:	56                   	push   esi
c0012827:	53                   	push   ebx
c0012828:	83 ec 1c             	sub    esp,0x1c
c001282b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001282f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012832:	68 14 01 00 00       	push   0x114
c0012837:	e8 9a 52 ff ff       	call   c0007ad6 <malloc>
c001283c:	83 c4 0c             	add    esp,0xc
c001283f:	89 c3                	mov    ebx,eax
c0012841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012846:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012849:	50                   	push   eax
c001284a:	57                   	push   edi
c001284b:	53                   	push   ebx
c001284c:	e8 1b 93 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0012851:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012854:	83 c4 0c             	add    esp,0xc
c0012857:	0f b6 d4             	movzx  edx,ah
c001285a:	0f b6 c0             	movzx  eax,al
c001285d:	52                   	push   edx
c001285e:	50                   	push   eax
c001285f:	53                   	push   ebx
c0012860:	e8 8d 95 ff ff       	call   c000bdf2 <File::chfatattr(unsigned char, unsigned char)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	85 db                	test   ebx,ebx
c001286a:	74 14                	je     c0012880 <SysSetFatAttrib(regs*)+0x5b>
c001286c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012870:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	53                   	push   ebx
c0012876:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012880:	85 c0                	test   eax,eax
c0012882:	0f 95 c0             	setne  al
c0012885:	31 d2                	xor    edx,edx
c0012887:	0f b6 c0             	movzx  eax,al
c001288a:	f7 d8                	neg    eax
c001288c:	83 d2 00             	adc    edx,0x0
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	f7 da                	neg    edx
c0012894:	5b                   	pop    ebx
c0012895:	5e                   	pop    esi
c0012896:	5f                   	pop    edi
c0012897:	c3                   	ret    

c0012898 <SysPipe(regs*)>:
c0012898:	57                   	push   edi
c0012899:	56                   	push   esi
c001289a:	53                   	push   ebx
c001289b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289f:	83 ec 0c             	sub    esp,0xc
c00128a2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00128a5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00128a8:	6a 20                	push   0x20
c00128aa:	e8 27 52 ff ff       	call   c0007ad6 <malloc>
c00128af:	89 c3                	mov    ebx,eax
c00128b1:	58                   	pop    eax
c00128b2:	5a                   	pop    edx
c00128b3:	68 00 50 00 00       	push   0x5000
c00128b8:	53                   	push   ebx
c00128b9:	e8 8a 5b ff ff       	call   c0008448 <Pipe::Pipe(int)>
c00128be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128c1:	e8 10 69 ff ff       	call   c00091d6 <UnixFile::getFileDescriptor()>
c00128c6:	89 07                	mov    DWORD PTR [edi],eax
c00128c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128cb:	e8 06 69 ff ff       	call   c00091d6 <UnixFile::getFileDescriptor()>
c00128d0:	83 c4 10             	add    esp,0x10
c00128d3:	89 06                	mov    DWORD PTR [esi],eax
c00128d5:	31 d2                	xor    edx,edx
c00128d7:	5b                   	pop    ebx
c00128d8:	31 c0                	xor    eax,eax
c00128da:	5e                   	pop    esi
c00128db:	5f                   	pop    edi
c00128dc:	c3                   	ret    

c00128dd <SysGetUnixTime(regs*)>:
c00128dd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00128e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ec:	e9 49 9c ff ff       	jmp    c000c53a <Clock::timeInSecondsLocal()>

c00128f1 <string_ends_with(char const*, char const*)>:
c00128f1:	57                   	push   edi
c00128f2:	56                   	push   esi
c00128f3:	53                   	push   ebx
c00128f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	53                   	push   ebx
c0012900:	e8 6b dc fe ff       	call   c0000570 <strlen>
c0012905:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012908:	89 c6                	mov    esi,eax
c001290a:	e8 61 dc fe ff       	call   c0000570 <strlen>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	39 c6                	cmp    esi,eax
c0012914:	7d 06                	jge    c001291c <string_ends_with(char const*, char const*)+0x2b>
c0012916:	5b                   	pop    ebx
c0012917:	31 c0                	xor    eax,eax
c0012919:	5e                   	pop    esi
c001291a:	5f                   	pop    edi
c001291b:	c3                   	ret    
c001291c:	83 ec 08             	sub    esp,0x8
c001291f:	29 c6                	sub    esi,eax
c0012921:	57                   	push   edi
c0012922:	01 f3                	add    ebx,esi
c0012924:	53                   	push   ebx
c0012925:	e8 26 de fe ff       	call   c0000750 <strcmp>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	85 c0                	test   eax,eax
c001292f:	5b                   	pop    ebx
c0012930:	0f 94 c0             	sete   al
c0012933:	5e                   	pop    esi
c0012934:	0f b6 c0             	movzx  eax,al
c0012937:	5f                   	pop    edi
c0012938:	c3                   	ret    

c0012939 <SysOpen(regs*)>:
c0012939:	56                   	push   esi
c001293a:	53                   	push   ebx
c001293b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012941:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012948:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001294b:	85 c0                	test   eax,eax
c001294d:	0f 84 bc 01 00 00    	je     c0012b0f <SysOpen(regs*)+0x1d6>
c0012953:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012956:	85 c0                	test   eax,eax
c0012958:	0f 84 b1 01 00 00    	je     c0012b0f <SysOpen(regs*)+0x1d6>
c001295e:	6a 00                	push   0x0
c0012960:	68 36 26 02 c0       	push   0xc0022636
c0012965:	50                   	push   eax
c0012966:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001296a:	56                   	push   esi
c001296b:	e8 04 8f ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012970:	89 34 24             	mov    DWORD PTR [esp],esi
c0012973:	e8 f8 db fe ff       	call   c0000570 <strlen>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	83 e8 01             	sub    eax,0x1
c001297e:	74 21                	je     c00129a1 <SysOpen(regs*)+0x68>
c0012980:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012984:	eb 12                	jmp    c0012998 <SysOpen(regs*)+0x5f>
c0012986:	83 fa 3a             	cmp    edx,0x3a
c0012989:	74 12                	je     c001299d <SysOpen(regs*)+0x64>
c001298b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001298f:	83 e8 01             	sub    eax,0x1
c0012992:	74 0d                	je     c00129a1 <SysOpen(regs*)+0x68>
c0012994:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012998:	83 fa 2e             	cmp    edx,0x2e
c001299b:	75 e9                	jne    c0012986 <SysOpen(regs*)+0x4d>
c001299d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129a1:	83 ec 08             	sub    esp,0x8
c00129a4:	68 3a 26 02 c0       	push   0xc002263a
c00129a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129ac:	50                   	push   eax
c00129ad:	e8 3f ff ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c00129b2:	83 c4 10             	add    esp,0x10
c00129b5:	85 c0                	test   eax,eax
c00129b7:	74 1d                	je     c00129d6 <SysOpen(regs*)+0x9d>
c00129b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129bc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129c9:	81 c4 04 01 00 00    	add    esp,0x104
c00129cf:	31 c0                	xor    eax,eax
c00129d1:	31 d2                	xor    edx,edx
c00129d3:	5b                   	pop    ebx
c00129d4:	5e                   	pop    esi
c00129d5:	c3                   	ret    
c00129d6:	83 ec 08             	sub    esp,0x8
c00129d9:	68 3f 26 02 c0       	push   0xc002263f
c00129de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129e1:	50                   	push   eax
c00129e2:	e8 0a ff ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	85 c0                	test   eax,eax
c00129ec:	75 cb                	jne    c00129b9 <SysOpen(regs*)+0x80>
c00129ee:	83 ec 08             	sub    esp,0x8
c00129f1:	68 3b 26 02 c0       	push   0xc002263b
c00129f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129f9:	50                   	push   eax
c00129fa:	e8 51 dd fe ff       	call   c0000750 <strcmp>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	85 c0                	test   eax,eax
c0012a04:	74 b3                	je     c00129b9 <SysOpen(regs*)+0x80>
c0012a06:	83 ec 08             	sub    esp,0x8
c0012a09:	68 3a 26 02 c0       	push   0xc002263a
c0012a0e:	56                   	push   esi
c0012a0f:	e8 dd fe ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	85 c0                	test   eax,eax
c0012a19:	75 9e                	jne    c00129b9 <SysOpen(regs*)+0x80>
c0012a1b:	83 ec 08             	sub    esp,0x8
c0012a1e:	68 44 26 02 c0       	push   0xc0022644
c0012a23:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a26:	50                   	push   eax
c0012a27:	e8 c5 fe ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c0012a2c:	83 c4 10             	add    esp,0x10
c0012a2f:	85 c0                	test   eax,eax
c0012a31:	0f 85 eb 00 00 00    	jne    c0012b22 <SysOpen(regs*)+0x1e9>
c0012a37:	83 ec 08             	sub    esp,0x8
c0012a3a:	68 49 26 02 c0       	push   0xc0022649
c0012a3f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a42:	50                   	push   eax
c0012a43:	e8 a9 fe ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	85 c0                	test   eax,eax
c0012a4d:	0f 85 cf 00 00 00    	jne    c0012b22 <SysOpen(regs*)+0x1e9>
c0012a53:	83 ec 08             	sub    esp,0x8
c0012a56:	68 45 26 02 c0       	push   0xc0022645
c0012a5b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a5e:	51                   	push   ecx
c0012a5f:	e8 ec dc fe ff       	call   c0000750 <strcmp>
c0012a64:	83 c4 10             	add    esp,0x10
c0012a67:	85 c0                	test   eax,eax
c0012a69:	0f 84 b3 00 00 00    	je     c0012b22 <SysOpen(regs*)+0x1e9>
c0012a6f:	83 ec 08             	sub    esp,0x8
c0012a72:	68 44 26 02 c0       	push   0xc0022644
c0012a77:	56                   	push   esi
c0012a78:	e8 74 fe ff ff       	call   c00128f1 <string_ends_with(char const*, char const*)>
c0012a7d:	83 c4 10             	add    esp,0x10
c0012a80:	85 c0                	test   eax,eax
c0012a82:	0f 85 9a 00 00 00    	jne    c0012b22 <SysOpen(regs*)+0x1e9>
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	68 14 01 00 00       	push   0x114
c0012a90:	e8 41 50 ff ff       	call   c0007ad6 <malloc>
c0012a95:	83 c4 0c             	add    esp,0xc
c0012a98:	89 c6                	mov    esi,eax
c0012a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012aa2:	50                   	push   eax
c0012aa3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012aa6:	52                   	push   edx
c0012aa7:	56                   	push   esi
c0012aa8:	e8 bf 90 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	85 f6                	test   esi,esi
c0012ab2:	74 5b                	je     c0012b0f <SysOpen(regs*)+0x1d6>
c0012ab4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012ab7:	0f b6 c2             	movzx  eax,dl
c0012aba:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012abd:	89 d0                	mov    eax,edx
c0012abf:	83 e0 01             	and    eax,0x1
c0012ac2:	f6 c2 02             	test   dl,0x2
c0012ac5:	74 03                	je     c0012aca <SysOpen(regs*)+0x191>
c0012ac7:	83 c8 02             	or     eax,0x2
c0012aca:	f6 c2 04             	test   dl,0x4
c0012acd:	74 03                	je     c0012ad2 <SysOpen(regs*)+0x199>
c0012acf:	83 c8 04             	or     eax,0x4
c0012ad2:	f6 c2 08             	test   dl,0x8
c0012ad5:	74 03                	je     c0012ada <SysOpen(regs*)+0x1a1>
c0012ad7:	83 c8 0a             	or     eax,0xa
c0012ada:	80 e2 10             	and    dl,0x10
c0012add:	74 03                	je     c0012ae2 <SysOpen(regs*)+0x1a9>
c0012adf:	83 c8 12             	or     eax,0x12
c0012ae2:	83 ec 08             	sub    esp,0x8
c0012ae5:	50                   	push   eax
c0012ae6:	56                   	push   esi
c0012ae7:	e8 9e 90 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	85 c0                	test   eax,eax
c0012af1:	75 1c                	jne    c0012b0f <SysOpen(regs*)+0x1d6>
c0012af3:	83 ec 0c             	sub    esp,0xc
c0012af6:	56                   	push   esi
c0012af7:	e8 da 66 ff ff       	call   c00091d6 <UnixFile::getFileDescriptor()>
c0012afc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	89 02                	mov    DWORD PTR [edx],eax
c0012b04:	c1 f8 1f             	sar    eax,0x1f
c0012b07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b0a:	e9 ba fe ff ff       	jmp    c00129c9 <SysOpen(regs*)+0x90>
c0012b0f:	81 c4 04 01 00 00    	add    esp,0x104
c0012b15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b1f:	5b                   	pop    ebx
c0012b20:	5e                   	pop    esi
c0012b21:	c3                   	ret    
c0012b22:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b25:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b2b:	e9 92 fe ff ff       	jmp    c00129c2 <SysOpen(regs*)+0x89>

c0012b30 <KeSystemCall(regs*, void*)>:
c0012b30:	53                   	push   ebx
c0012b31:	83 ec 08             	sub    esp,0x8
c0012b34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b38:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b3b:	83 f8 3e             	cmp    eax,0x3e
c0012b3e:	77 16                	ja     c0012b56 <KeSystemCall(regs*, void*)+0x26>
c0012b40:	8b 14 85 60 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc1a0]
c0012b47:	85 d2                	test   edx,edx
c0012b49:	74 0b                	je     c0012b56 <KeSystemCall(regs*, void*)+0x26>
c0012b4b:	83 ec 0c             	sub    esp,0xc
c0012b4e:	53                   	push   ebx
c0012b4f:	ff d2                	call   edx
c0012b51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b54:	eb 0d                	jmp    c0012b63 <KeSystemCall(regs*, void*)+0x33>
c0012b56:	52                   	push   edx
c0012b57:	52                   	push   edx
c0012b58:	50                   	push   eax
c0012b59:	68 4e 26 02 c0       	push   0xc002264e
c0012b5e:	e8 02 7e ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b6b:	31 d2                	xor    edx,edx
c0012b6d:	83 c4 08             	add    esp,0x8
c0012b70:	5b                   	pop    ebx
c0012b71:	c3                   	ret    
c0012b72:	66 90                	xchg   ax,ax

c0012b74 <KeSwitchEndian16(unsigned short)>:
c0012b74:	83 ec 04             	sub    esp,0x4
c0012b77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b7b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b7f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b83:	c1 f8 08             	sar    eax,0x8
c0012b86:	89 c2                	mov    edx,eax
c0012b88:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b8c:	c1 e0 08             	shl    eax,0x8
c0012b8f:	09 d0                	or     eax,edx
c0012b91:	83 c4 04             	add    esp,0x4
c0012b94:	c3                   	ret    
c0012b95:	8d 76 00             	lea    esi,[esi+0x0]

c0012b98 <KeSwitchEndian32(unsigned int)>:
c0012b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9c:	c1 e8 18             	shr    eax,0x18
c0012b9f:	89 c2                	mov    edx,eax
c0012ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba5:	c1 e0 08             	shl    eax,0x8
c0012ba8:	25 00 00 ff 00       	and    eax,0xff0000
c0012bad:	09 c2                	or     edx,eax
c0012baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb3:	c1 e8 08             	shr    eax,0x8
c0012bb6:	25 00 ff 00 00       	and    eax,0xff00
c0012bbb:	09 c2                	or     edx,eax
c0012bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc1:	c1 e0 18             	shl    eax,0x18
c0012bc4:	09 d0                	or     eax,edx
c0012bc6:	c3                   	ret    
c0012bc7:	90                   	nop

c0012bc8 <EthernetCRC32(unsigned char*, int)>:
c0012bc8:	83 ec 10             	sub    esp,0x10
c0012bcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012bd0:	75 0a                	jne    c0012bdc <EthernetCRC32(unsigned char*, int)+0x14>
c0012bd2:	b8 00 00 00 00       	mov    eax,0x0
c0012bd7:	e9 8c 00 00 00       	jmp    c0012c68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bdc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012be1:	7f 09                	jg     c0012bec <EthernetCRC32(unsigned char*, int)+0x24>
c0012be3:	b8 00 00 00 00       	mov    eax,0x0
c0012be8:	eb 7e                	jmp    c0012c68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bea:	66 90                	xchg   ax,ax
c0012bec:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012bf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c00:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c04:	7d 5a                	jge    c0012c60 <EthernetCRC32(unsigned char*, int)+0x98>
c0012c06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c0e:	01 d0                	add    eax,edx
c0012c10:	8a 00                	mov    al,BYTE PTR [eax]
c0012c12:	0f b6 c0             	movzx  eax,al
c0012c15:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c21:	8d 76 00             	lea    esi,[esi+0x0]
c0012c24:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c29:	7f 2d                	jg     c0012c58 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c2f:	83 e0 01             	and    eax,0x1
c0012c32:	74 10                	je     c0012c44 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c38:	d1 e8                	shr    eax,1
c0012c3a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c3f:	eb 0b                	jmp    c0012c4c <EthernetCRC32(unsigned char*, int)+0x84>
c0012c41:	8d 76 00             	lea    esi,[esi+0x0]
c0012c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c48:	d1 e8                	shr    eax,1
c0012c4a:	66 90                	xchg   ax,ax
c0012c4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c50:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c55:	eb cd                	jmp    c0012c24 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c57:	90                   	nop
c0012c58:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c5d:	eb 9d                	jmp    c0012bfc <EthernetCRC32(unsigned char*, int)+0x34>
c0012c5f:	90                   	nop
c0012c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c64:	f7 d0                	not    eax
c0012c66:	66 90                	xchg   ax,ax
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	c3                   	ret    

c0012c6c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c6c:	83 ec 2c             	sub    esp,0x2c
c0012c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c73:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c87:	0f b7 c0             	movzx  eax,ax
c0012c8a:	3d 06 08 00 00       	cmp    eax,0x806
c0012c8f:	75 13                	jne    c0012ca4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	68 62 26 02 c0       	push   0xc0022662
c0012c99:	e8 c7 7c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	eb 25                	jmp    c0012cc8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ca3:	90                   	nop
c0012ca4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ca8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cab:	0f b7 c0             	movzx  eax,ax
c0012cae:	3d 00 08 00 00       	cmp    eax,0x800
c0012cb3:	75 13                	jne    c0012cc8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012cb5:	83 ec 0c             	sub    esp,0xc
c0012cb8:	68 78 26 02 c0       	push   0xc0022678
c0012cbd:	e8 a3 7c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc8:	90                   	nop
c0012cc9:	83 c4 2c             	add    esp,0x2c
c0012ccc:	c3                   	ret    

c0012ccd <CmOpen(char const*)>:
c0012ccd:	57                   	push   edi
c0012cce:	56                   	push   esi
c0012ccf:	53                   	push   ebx
c0012cd0:	83 ec 1c             	sub    esp,0x1c
c0012cd3:	6a 30                	push   0x30
c0012cd5:	e8 fc 4d ff ff       	call   c0007ad6 <malloc>
c0012cda:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ce1:	89 c3                	mov    ebx,eax
c0012ce3:	e8 ee 4d ff ff       	call   c0007ad6 <malloc>
c0012ce8:	83 c4 0c             	add    esp,0xc
c0012ceb:	89 c6                	mov    esi,eax
c0012ced:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012cf3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cf7:	50                   	push   eax
c0012cf8:	e8 6f 8e ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0012cfd:	83 c4 0c             	add    esp,0xc
c0012d00:	89 33                	mov    DWORD PTR [ebx],esi
c0012d02:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d06:	50                   	push   eax
c0012d07:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d0b:	50                   	push   eax
c0012d0c:	56                   	push   esi
c0012d0d:	e8 7a 91 ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0012d12:	5a                   	pop    edx
c0012d13:	59                   	pop    ecx
c0012d14:	6a 01                	push   0x1
c0012d16:	ff 33                	push   DWORD PTR [ebx]
c0012d18:	e8 6d 8e ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0012d1d:	5e                   	pop    esi
c0012d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d22:	e8 af 4d ff ff       	call   c0007ad6 <malloc>
c0012d27:	5a                   	pop    edx
c0012d28:	89 c7                	mov    edi,eax
c0012d2a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d30:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d32:	56                   	push   esi
c0012d33:	57                   	push   edi
c0012d34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d3c:	50                   	push   eax
c0012d3d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d40:	83 c4 14             	add    esp,0x14
c0012d43:	ff 33                	push   DWORD PTR [ebx]
c0012d45:	e8 9e 8e ff ff       	call   c000bbe8 <File::close()>
c0012d4a:	59                   	pop    ecx
c0012d4b:	58                   	pop    eax
c0012d4c:	6a 13                	push   0x13
c0012d4e:	ff 33                	push   DWORD PTR [ebx]
c0012d50:	e8 35 8e ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0012d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d57:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d59:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d5c:	57                   	push   edi
c0012d5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d65:	50                   	push   eax
c0012d66:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d69:	83 c4 14             	add    esp,0x14
c0012d6c:	57                   	push   edi
c0012d6d:	e8 74 4d ff ff       	call   c0007ae6 <free>
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d78:	75 10                	jne    c0012d8a <CmOpen(char const*)+0xbd>
c0012d7a:	83 ec 0c             	sub    esp,0xc
c0012d7d:	68 8d 26 02 c0       	push   0xc002268d
c0012d82:	e8 10 e9 ff ff       	call   c0011697 <KePanic(char const*)>
c0012d87:	83 c4 10             	add    esp,0x10
c0012d8a:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d8d:	50                   	push   eax
c0012d8e:	6a 00                	push   0x0
c0012d90:	6a 00                	push   0x0
c0012d92:	ff 33                	push   DWORD PTR [ebx]
c0012d94:	e8 af 8e ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012da0:	57                   	push   edi
c0012da1:	6a 00                	push   0x0
c0012da3:	6a 2b                	push   0x2b
c0012da5:	50                   	push   eax
c0012da6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012da9:	83 c4 1c             	add    esp,0x1c
c0012dac:	6a 00                	push   0x0
c0012dae:	6a 00                	push   0x0
c0012db0:	ff 33                	push   DWORD PTR [ebx]
c0012db2:	e8 91 8e ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012db7:	83 c4 0c             	add    esp,0xc
c0012dba:	6a 08                	push   0x8
c0012dbc:	68 9e 26 02 c0       	push   0xc002269e
c0012dc1:	57                   	push   edi
c0012dc2:	e8 b9 d5 fe ff       	call   c0000380 <memcmp>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	85 c0                	test   eax,eax
c0012dcc:	74 10                	je     c0012dde <CmOpen(char const*)+0x111>
c0012dce:	83 ec 0c             	sub    esp,0xc
c0012dd1:	68 a7 26 02 c0       	push   0xc00226a7
c0012dd6:	e8 bc e8 ff ff       	call   c0011697 <KePanic(char const*)>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012de2:	89 d8                	mov    eax,ebx
c0012de4:	83 c4 10             	add    esp,0x10
c0012de7:	5b                   	pop    ebx
c0012de8:	5e                   	pop    esi
c0012de9:	5f                   	pop    edi
c0012dea:	c3                   	ret    

c0012deb <CmClose(Reghive_Tag*)>:
c0012deb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012def:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012df3:	74 0b                	je     c0012e00 <CmClose(Reghive_Tag*)+0x15>
c0012df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dfb:	e9 e8 8d ff ff       	jmp    c000bbe8 <File::close()>
c0012e00:	c3                   	ret    

c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e01:	53                   	push   ebx
c0012e02:	83 ec 18             	sub    esp,0x18
c0012e05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e09:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e0d:	74 29                	je     c0012e38 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e0f:	50                   	push   eax
c0012e10:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e15:	99                   	cdq    
c0012e16:	52                   	push   edx
c0012e17:	50                   	push   eax
c0012e18:	ff 33                	push   DWORD PTR [ebx]
c0012e1a:	e8 29 8e ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012e1f:	5a                   	pop    edx
c0012e20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e26:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e28:	51                   	push   ecx
c0012e29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e2d:	6a 00                	push   0x0
c0012e2f:	6a 2b                	push   0x2b
c0012e31:	50                   	push   eax
c0012e32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e35:	83 c4 20             	add    esp,0x20
c0012e38:	83 c4 18             	add    esp,0x18
c0012e3b:	5b                   	pop    ebx
c0012e3c:	c3                   	ret    

c0012e3d <CmGetString(Reghive_Tag*, int, char*)>:
c0012e3d:	55                   	push   ebp
c0012e3e:	57                   	push   edi
c0012e3f:	56                   	push   esi
c0012e40:	53                   	push   ebx
c0012e41:	31 db                	xor    ebx,ebx
c0012e43:	83 ec 70             	sub    esp,0x70
c0012e46:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e4d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e51:	50                   	push   eax
c0012e52:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e59:	55                   	push   ebp
c0012e5a:	e8 a2 ff ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e67:	c1 e0 08             	shl    eax,0x8
c0012e6a:	89 c2                	mov    edx,eax
c0012e6c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e71:	09 d0                	or     eax,edx
c0012e73:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e78:	c1 e0 08             	shl    eax,0x8
c0012e7b:	09 d0                	or     eax,edx
c0012e7d:	74 25                	je     c0012ea4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e7f:	6b fb 0d             	imul   edi,ebx,0xd
c0012e82:	52                   	push   edx
c0012e83:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e87:	52                   	push   edx
c0012e88:	50                   	push   eax
c0012e89:	55                   	push   ebp
c0012e8a:	e8 72 ff ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e93:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e9a:	b9 27 00 00 00       	mov    ecx,0x27
c0012e9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	83 c3 03             	add    ebx,0x3
c0012ea7:	83 fb 15             	cmp    ebx,0x15
c0012eaa:	75 b6                	jne    c0012e62 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012eac:	83 c4 6c             	add    esp,0x6c
c0012eaf:	5b                   	pop    ebx
c0012eb0:	5e                   	pop    esi
c0012eb1:	5f                   	pop    edi
c0012eb2:	5d                   	pop    ebp
c0012eb3:	c3                   	ret    

c0012eb4 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012eb4:	83 ec 40             	sub    esp,0x40
c0012eb7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ebb:	50                   	push   eax
c0012ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec4:	e8 38 ff ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ec9:	83 c4 10             	add    esp,0x10
c0012ecc:	83 c8 ff             	or     eax,0xffffffff
c0012ecf:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012ed4:	75 19                	jne    c0012eef <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012ed6:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012edb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012ee0:	c1 e0 08             	shl    eax,0x8
c0012ee3:	09 c2                	or     edx,eax
c0012ee5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012eea:	c1 e0 10             	shl    eax,0x10
c0012eed:	09 d0                	or     eax,edx
c0012eef:	83 c4 3c             	add    esp,0x3c
c0012ef2:	c3                   	ret    

c0012ef3 <CmGetNext(Reghive_Tag*, int)>:
c0012ef3:	83 ec 40             	sub    esp,0x40
c0012ef6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012efa:	50                   	push   eax
c0012efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f03:	e8 f9 fe ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f08:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f0d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f12:	c1 e0 08             	shl    eax,0x8
c0012f15:	09 c2                	or     edx,eax
c0012f17:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f1c:	83 c4 4c             	add    esp,0x4c
c0012f1f:	c1 e0 10             	shl    eax,0x10
c0012f22:	09 d0                	or     eax,edx
c0012f24:	c3                   	ret    

c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f25:	53                   	push   ebx
c0012f26:	83 ec 18             	sub    esp,0x18
c0012f29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f2d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f31:	74 29                	je     c0012f5c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f33:	50                   	push   eax
c0012f34:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f39:	99                   	cdq    
c0012f3a:	52                   	push   edx
c0012f3b:	50                   	push   eax
c0012f3c:	ff 33                	push   DWORD PTR [ebx]
c0012f3e:	e8 05 8d ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012f43:	5a                   	pop    edx
c0012f44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f46:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4c:	51                   	push   ecx
c0012f4d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f51:	6a 00                	push   0x0
c0012f53:	6a 2b                	push   0x2b
c0012f55:	50                   	push   eax
c0012f56:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f59:	83 c4 20             	add    esp,0x20
c0012f5c:	83 c4 18             	add    esp,0x18
c0012f5f:	5b                   	pop    ebx
c0012f60:	c3                   	ret    

c0012f61 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f61:	53                   	push   ebx
c0012f62:	83 ec 3c             	sub    esp,0x3c
c0012f65:	6a 2b                	push   0x2b
c0012f67:	6a 00                	push   0x0
c0012f69:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f6d:	53                   	push   ebx
c0012f6e:	e8 7d d5 fe ff       	call   c00004f0 <memset>
c0012f73:	83 c4 0c             	add    esp,0xc
c0012f76:	53                   	push   ebx
c0012f77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f7f:	e8 a1 ff ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f84:	83 c4 48             	add    esp,0x48
c0012f87:	5b                   	pop    ebx
c0012f88:	c3                   	ret    

c0012f89 <CmUpdateHeader(Reghive_Tag*)>:
c0012f89:	83 ec 0c             	sub    esp,0xc
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f94:	74 10                	je     c0012fa6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f96:	52                   	push   edx
c0012f97:	8d 50 05             	lea    edx,[eax+0x5]
c0012f9a:	52                   	push   edx
c0012f9b:	6a 00                	push   0x0
c0012f9d:	50                   	push   eax
c0012f9e:	e8 82 ff ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fa3:	83 c4 10             	add    esp,0x10
c0012fa6:	83 c4 0c             	add    esp,0xc
c0012fa9:	c3                   	ret    

c0012faa <CmExpand(Reghive_Tag*, int)>:
c0012faa:	57                   	push   edi
c0012fab:	56                   	push   esi
c0012fac:	83 ce ff             	or     esi,0xffffffff
c0012faf:	53                   	push   ebx
c0012fb0:	83 ec 30             	sub    esp,0x30
c0012fb3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fb7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012fbb:	74 5f                	je     c001301c <CmExpand(Reghive_Tag*, int)+0x72>
c0012fbd:	31 d2                	xor    edx,edx
c0012fbf:	31 f6                	xor    esi,esi
c0012fc1:	50                   	push   eax
c0012fc2:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012fc6:	52                   	push   edx
c0012fc7:	50                   	push   eax
c0012fc8:	ff 33                	push   DWORD PTR [ebx]
c0012fca:	e8 79 8c ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0012fcf:	83 c4 0c             	add    esp,0xc
c0012fd2:	6a 2b                	push   0x2b
c0012fd4:	6a 00                	push   0x0
c0012fd6:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012fda:	57                   	push   edi
c0012fdb:	e8 10 d5 fe ff       	call   c00004f0 <memset>
c0012fe0:	83 c4 10             	add    esp,0x10
c0012fe3:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012fe7:	7d 1b                	jge    c0013004 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012fe9:	83 ec 0c             	sub    esp,0xc
c0012fec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fee:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012ff2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff4:	46                   	inc    esi
c0012ff5:	51                   	push   ecx
c0012ff6:	57                   	push   edi
c0012ff7:	6a 00                	push   0x0
c0012ff9:	6a 2b                	push   0x2b
c0012ffb:	50                   	push   eax
c0012ffc:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fff:	83 c4 20             	add    esp,0x20
c0013002:	eb df                	jmp    c0012fe3 <CmExpand(Reghive_Tag*, int)+0x39>
c0013004:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013008:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001300b:	83 ec 0c             	sub    esp,0xc
c001300e:	01 f2                	add    edx,esi
c0013010:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0013013:	53                   	push   ebx
c0013014:	e8 70 ff ff ff       	call   c0012f89 <CmUpdateHeader(Reghive_Tag*)>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	83 c4 30             	add    esp,0x30
c001301f:	89 f0                	mov    eax,esi
c0013021:	5b                   	pop    ebx
c0013022:	5e                   	pop    esi
c0013023:	5f                   	pop    edi
c0013024:	c3                   	ret    

c0013025 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013025:	55                   	push   ebp
c0013026:	57                   	push   edi
c0013027:	56                   	push   esi
c0013028:	53                   	push   ebx
c0013029:	83 cb ff             	or     ebx,0xffffffff
c001302c:	83 ec 1c             	sub    esp,0x1c
c001302f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013033:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013037:	74 68                	je     c00130a1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013039:	be 2b 00 00 00       	mov    esi,0x2b
c001303e:	51                   	push   ecx
c001303f:	31 ff                	xor    edi,edi
c0013041:	6a 00                	push   0x0
c0013043:	31 db                	xor    ebx,ebx
c0013045:	6a 00                	push   0x0
c0013047:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001304a:	e8 f9 8b ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c001304f:	83 c4 10             	add    esp,0x10
c0013052:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013055:	76 3b                	jbe    c0013092 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0013057:	83 ec 0c             	sub    esp,0xc
c001305a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001305d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013061:	8b 10                	mov    edx,DWORD PTR [eax]
c0013063:	51                   	push   ecx
c0013064:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013068:	51                   	push   ecx
c0013069:	6a 00                	push   0x0
c001306b:	6a 01                	push   0x1
c001306d:	50                   	push   eax
c001306e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013071:	83 c4 20             	add    esp,0x20
c0013074:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013079:	74 26                	je     c00130a1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001307b:	43                   	inc    ebx
c001307c:	52                   	push   edx
c001307d:	57                   	push   edi
c001307e:	56                   	push   esi
c001307f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013082:	e8 c1 8b ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0013087:	83 c6 2b             	add    esi,0x2b
c001308a:	83 d7 00             	adc    edi,0x0
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	eb c0                	jmp    c0013052 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013092:	50                   	push   eax
c0013093:	50                   	push   eax
c0013094:	6a 40                	push   0x40
c0013096:	55                   	push   ebp
c0013097:	e8 0e ff ff ff       	call   c0012faa <CmExpand(Reghive_Tag*, int)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	89 c3                	mov    ebx,eax
c00130a1:	83 c4 1c             	add    esp,0x1c
c00130a4:	89 d8                	mov    eax,ebx
c00130a6:	5b                   	pop    ebx
c00130a7:	5e                   	pop    esi
c00130a8:	5f                   	pop    edi
c00130a9:	5d                   	pop    ebp
c00130aa:	c3                   	ret    

c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00130ab:	55                   	push   ebp
c00130ac:	57                   	push   edi
c00130ad:	56                   	push   esi
c00130ae:	53                   	push   ebx
c00130af:	81 ec 88 00 00 00    	sub    esp,0x88
c00130b5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00130bc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130c3:	e8 5d ff ff ff       	call   c0013025 <CmFindUnusedExtent(Reghive_Tag*)>
c00130c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130cc:	83 c4 0c             	add    esp,0xc
c00130cf:	6a 2b                	push   0x2b
c00130d1:	6a 00                	push   0x0
c00130d3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00130d7:	55                   	push   ebp
c00130d8:	e8 13 d4 fe ff       	call   c00004f0 <memset>
c00130dd:	83 c4 10             	add    esp,0x10
c00130e0:	85 db                	test   ebx,ebx
c00130e2:	74 12                	je     c00130f6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00130e4:	51                   	push   ecx
c00130e5:	55                   	push   ebp
c00130e6:	53                   	push   ebx
c00130e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ee:	e8 0e fd ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00130fa:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013101:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013106:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013108:	85 db                	test   ebx,ebx
c001310a:	74 49                	je     c0013155 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001310c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013111:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013116:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001311a:	c1 e0 08             	shl    eax,0x8
c001311d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013123:	09 c8                	or     eax,ecx
c0013125:	74 11                	je     c0013138 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013127:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001312b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001312f:	c1 e8 10             	shr    eax,0x10
c0013132:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013136:	eb 0f                	jmp    c0013147 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013138:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001313d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013142:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013147:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001314b:	c1 ea 08             	shr    edx,0x8
c001314e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0013153:	eb 0f                	jmp    c0013164 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013155:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001315a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001315f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013164:	52                   	push   edx
c0013165:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013169:	50                   	push   eax
c001316a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001316e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013175:	e8 ab fd ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	85 db                	test   ebx,ebx
c001317f:	74 12                	je     c0013193 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013181:	50                   	push   eax
c0013182:	55                   	push   ebp
c0013183:	53                   	push   ebx
c0013184:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001318b:	e8 95 fd ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013197:	83 c4 7c             	add    esp,0x7c
c001319a:	5b                   	pop    ebx
c001319b:	5e                   	pop    esi
c001319c:	5f                   	pop    edi
c001319d:	5d                   	pop    ebp
c001319e:	c3                   	ret    

c001319f <CmSetString(Reghive_Tag*, int, char const*)>:
c001319f:	55                   	push   ebp
c00131a0:	57                   	push   edi
c00131a1:	56                   	push   esi
c00131a2:	53                   	push   ebx
c00131a3:	bb 27 00 00 00       	mov    ebx,0x27
c00131a8:	81 ec 88 00 00 00    	sub    esp,0x88
c00131ae:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00131b5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00131bc:	e8 af d3 fe ff       	call   c0000570 <strlen>
c00131c1:	8d 48 26             	lea    ecx,[eax+0x26]
c00131c4:	89 c8                	mov    eax,ecx
c00131c6:	99                   	cdq    
c00131c7:	f7 fb                	idiv   ebx
c00131c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00131d6:	7e 10                	jle    c00131e8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	68 b8 26 02 c0       	push   0xc00226b8
c00131e0:	e8 b2 e4 ff ff       	call   c0011697 <KePanic(char const*)>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	31 ff                	xor    edi,edi
c00131ea:	50                   	push   eax
c00131eb:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00131ef:	53                   	push   ebx
c00131f0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131f7:	56                   	push   esi
c00131f8:	e8 04 fc ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013204:	89 d0                	mov    eax,edx
c0013206:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001320a:	c1 e0 08             	shl    eax,0x8
c001320d:	09 c2                	or     edx,eax
c001320f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013213:	c1 e2 08             	shl    edx,0x8
c0013216:	09 c2                	or     edx,eax
c0013218:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001321c:	7e 76                	jle    c0013294 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001321e:	85 d2                	test   edx,edx
c0013220:	75 25                	jne    c0013247 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013222:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013227:	8d 44 24 45          	lea    eax,[esp+0x45]
c001322b:	50                   	push   eax
c001322c:	6a 00                	push   0x0
c001322e:	6a 00                	push   0x0
c0013230:	56                   	push   esi
c0013231:	e8 75 fe ff ff       	call   c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	89 c2                	mov    edx,eax
c001323b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001323e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013241:	c1 f8 10             	sar    eax,0x10
c0013244:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013247:	55                   	push   ebp
c0013248:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001324c:	55                   	push   ebp
c001324d:	52                   	push   edx
c001324e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013252:	56                   	push   esi
c0013253:	e8 a9 fb ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013258:	83 c4 0c             	add    esp,0xc
c001325b:	6a 27                	push   0x27
c001325d:	6a 00                	push   0x0
c001325f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013263:	51                   	push   ecx
c0013264:	e8 87 d2 fe ff       	call   c00004f0 <memset>
c0013269:	83 c4 0c             	add    esp,0xc
c001326c:	6b c7 27             	imul   eax,edi,0x27
c001326f:	6a 27                	push   0x27
c0013271:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013278:	50                   	push   eax
c0013279:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001327d:	51                   	push   ecx
c001327e:	e8 fd d3 fe ff       	call   c0000680 <strncpy>
c0013283:	83 c4 0c             	add    esp,0xc
c0013286:	55                   	push   ebp
c0013287:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001328b:	52                   	push   edx
c001328c:	56                   	push   esi
c001328d:	e8 93 fc ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013292:	eb 19                	jmp    c00132ad <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0013294:	85 d2                	test   edx,edx
c0013296:	74 18                	je     c00132b0 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013298:	51                   	push   ecx
c0013299:	51                   	push   ecx
c001329a:	52                   	push   edx
c001329b:	56                   	push   esi
c001329c:	e8 c0 fc ff ff       	call   c0012f61 <CmFreeExtent(Reghive_Tag*, int)>
c00132a1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00132a5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00132a9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	47                   	inc    edi
c00132b1:	83 c3 03             	add    ebx,0x3
c00132b4:	83 ff 07             	cmp    edi,0x7
c00132b7:	0f 85 43 ff ff ff    	jne    c0013200 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00132bd:	50                   	push   eax
c00132be:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132c2:	50                   	push   eax
c00132c3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132ca:	56                   	push   esi
c00132cb:	e8 55 fc ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132d0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00132d6:	5b                   	pop    ebx
c00132d7:	5e                   	pop    esi
c00132d8:	5f                   	pop    edi
c00132d9:	5d                   	pop    ebp
c00132da:	c3                   	ret    

c00132db <CmGetMatch(char*, char*, bool, bool*)>:
c00132db:	56                   	push   esi
c00132dc:	53                   	push   ebx
c00132dd:	50                   	push   eax
c00132de:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00132e7:	74 25                	je     c001330e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00132e9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132ec:	31 db                	xor    ebx,ebx
c00132ee:	50                   	push   eax
c00132ef:	50                   	push   eax
c00132f0:	8d 04 9d 60 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc0a0]
c00132f7:	50                   	push   eax
c00132f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132fc:	e8 4f d4 fe ff       	call   c0000750 <strcmp>
c0013301:	83 c4 10             	add    esp,0x10
c0013304:	85 c0                	test   eax,eax
c0013306:	74 2e                	je     c0013336 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013308:	43                   	inc    ebx
c0013309:	83 fb 3f             	cmp    ebx,0x3f
c001330c:	75 e0                	jne    c00132ee <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001330e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013311:	31 db                	xor    ebx,ebx
c0013313:	8d 04 9d 60 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc0a0]
c001331a:	51                   	push   ecx
c001331b:	51                   	push   ecx
c001331c:	50                   	push   eax
c001331d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013321:	e8 2a d4 fe ff       	call   c0000750 <strcmp>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	85 c0                	test   eax,eax
c001332b:	74 09                	je     c0013336 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001332d:	43                   	inc    ebx
c001332e:	83 fb 3f             	cmp    ebx,0x3f
c0013331:	75 e0                	jne    c0013313 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013333:	83 cb ff             	or     ebx,0xffffffff
c0013336:	89 d8                	mov    eax,ebx
c0013338:	5a                   	pop    edx
c0013339:	5b                   	pop    ebx
c001333a:	5e                   	pop    esi
c001333b:	c3                   	ret    

c001333c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001333c:	55                   	push   ebp
c001333d:	31 c0                	xor    eax,eax
c001333f:	57                   	push   edi
c0013340:	56                   	push   esi
c0013341:	53                   	push   ebx
c0013342:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013346:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001334a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001334c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013350:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0013353:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013357:	83 fd 1f             	cmp    ebp,0x1f
c001335a:	7f 0b                	jg     c0013367 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001335c:	0f b6 c2             	movzx  eax,dl
c001335f:	d3 e0                	shl    eax,cl
c0013361:	09 07                	or     DWORD PTR [edi],eax
c0013363:	b0 01                	mov    al,0x1
c0013365:	01 33                	add    DWORD PTR [ebx],esi
c0013367:	5b                   	pop    ebx
c0013368:	5e                   	pop    esi
c0013369:	5f                   	pop    edi
c001336a:	5d                   	pop    ebp
c001336b:	c3                   	ret    

c001336c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001336c:	57                   	push   edi
c001336d:	56                   	push   esi
c001336e:	53                   	push   ebx
c001336f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013373:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013377:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001337b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001337f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013381:	7c 17                	jl     c001339a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013383:	8b 17                	mov    edx,DWORD PTR [edi]
c0013385:	b8 01 00 00 00       	mov    eax,0x1
c001338a:	d3 e0                	shl    eax,cl
c001338c:	48                   	dec    eax
c001338d:	21 d0                	and    eax,edx
c001338f:	d3 ea                	shr    edx,cl
c0013391:	89 17                	mov    DWORD PTR [edi],edx
c0013393:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013395:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013398:	eb 05                	jmp    c001339f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001339a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001339d:	31 c0                	xor    eax,eax
c001339f:	5b                   	pop    ebx
c00133a0:	5e                   	pop    esi
c00133a1:	5f                   	pop    edi
c00133a2:	c3                   	ret    

c00133a3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00133a3:	83 ec 40             	sub    esp,0x40
c00133a6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133aa:	50                   	push   eax
c00133ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133b3:	e8 49 fa ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00133bc:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133c0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133c4:	89 10                	mov    DWORD PTR [eax],edx
c00133c6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133c9:	83 c4 4c             	add    esp,0x4c
c00133cc:	c3                   	ret    

c00133cd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133cd:	55                   	push   ebp
c00133ce:	57                   	push   edi
c00133cf:	56                   	push   esi
c00133d0:	53                   	push   ebx
c00133d1:	83 ec 40             	sub    esp,0x40
c00133d4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00133d8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00133dc:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00133e0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00133e4:	53                   	push   ebx
c00133e5:	56                   	push   esi
c00133e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133ea:	e8 12 fa ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133ef:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00133f3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00133f7:	83 c4 0c             	add    esp,0xc
c00133fa:	53                   	push   ebx
c00133fb:	56                   	push   esi
c00133fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013400:	e8 20 fb ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013405:	83 c4 4c             	add    esp,0x4c
c0013408:	5b                   	pop    ebx
c0013409:	5e                   	pop    esi
c001340a:	5f                   	pop    edi
c001340b:	5d                   	pop    ebp
c001340c:	c3                   	ret    

c001340d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001340d:	55                   	push   ebp
c001340e:	57                   	push   edi
c001340f:	56                   	push   esi
c0013410:	31 f6                	xor    esi,esi
c0013412:	53                   	push   ebx
c0013413:	31 db                	xor    ebx,ebx
c0013415:	83 ec 40             	sub    esp,0x40
c0013418:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013420:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013428:	6a 12                	push   0x12
c001342a:	68 ee 00 00 00       	push   0xee
c001342f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013433:	e8 b8 d0 fe ff       	call   c00004f0 <memset>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001343f:	6a 08                	push   0x8
c0013441:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013445:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013449:	50                   	push   eax
c001344a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001344e:	55                   	push   ebp
c001344f:	57                   	push   edi
c0013450:	e8 e7 fe ff ff       	call   c001333c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001345c:	50                   	push   eax
c001345d:	6a 06                	push   0x6
c001345f:	55                   	push   ebp
c0013460:	57                   	push   edi
c0013461:	e8 06 ff ff ff       	call   c001336c <CmGetShift(unsigned int*, int*, int, bool*)>
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001346e:	74 07                	je     c0013477 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013470:	46                   	inc    esi
c0013471:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013475:	eb e1                	jmp    c0013458 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013477:	43                   	inc    ebx
c0013478:	83 fb 12             	cmp    ebx,0x12
c001347b:	75 c2                	jne    c001343f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001347d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013481:	31 db                	xor    ebx,ebx
c0013483:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013486:	50                   	push   eax
c0013487:	50                   	push   eax
c0013488:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001348d:	43                   	inc    ebx
c001348e:	8d 04 85 60 3f 02 c0 	lea    eax,[eax*4-0x3ffdc0a0]
c0013495:	50                   	push   eax
c0013496:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001349a:	e8 a1 d3 fe ff       	call   c0000840 <strcat>
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	83 fb 18             	cmp    ebx,0x18
c00134a5:	75 df                	jne    c0013486 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00134a7:	83 c4 3c             	add    esp,0x3c
c00134aa:	31 c0                	xor    eax,eax
c00134ac:	5b                   	pop    ebx
c00134ad:	5e                   	pop    esi
c00134ae:	5f                   	pop    edi
c00134af:	5d                   	pop    ebp
c00134b0:	c3                   	ret    

c00134b1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00134b1:	83 ec 40             	sub    esp,0x40
c00134b4:	8d 44 24 09          	lea    eax,[esp+0x9]
c00134b8:	50                   	push   eax
c00134b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134c1:	e8 3b f9 ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134c6:	58                   	pop    eax
c00134c7:	5a                   	pop    edx
c00134c8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134cc:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134d0:	50                   	push   eax
c00134d1:	e8 37 ff ff ff       	call   c001340d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00134d6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00134db:	83 c4 4c             	add    esp,0x4c
c00134de:	c3                   	ret    

c00134df <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00134df:	55                   	push   ebp
c00134e0:	57                   	push   edi
c00134e1:	56                   	push   esi
c00134e2:	53                   	push   ebx
c00134e3:	31 db                	xor    ebx,ebx
c00134e5:	83 ec 70             	sub    esp,0x70
c00134e8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00134ef:	6a 30                	push   0x30
c00134f1:	6a 00                	push   0x0
c00134f3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00134f7:	56                   	push   esi
c00134f8:	e8 f3 cf fe ff       	call   c00004f0 <memset>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	57                   	push   edi
c0013504:	e8 67 d0 fe ff       	call   c0000570 <strlen>
c0013509:	83 c4 10             	add    esp,0x10
c001350c:	39 d8                	cmp    eax,ebx
c001350e:	76 16                	jbe    c0013526 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013517:	50                   	push   eax
c0013518:	e8 13 d4 fe ff       	call   c0000930 <toupper>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013523:	43                   	inc    ebx
c0013524:	eb da                	jmp    c0013500 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013526:	31 f6                	xor    esi,esi
c0013528:	52                   	push   edx
c0013529:	31 ff                	xor    edi,edi
c001352b:	6a 18                	push   0x18
c001352d:	6a 3f                	push   0x3f
c001352f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013533:	50                   	push   eax
c0013534:	e8 b7 cf fe ff       	call   c00004f0 <memset>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013540:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013544:	84 c0                	test   al,al
c0013546:	0f 84 b0 00 00 00    	je     c00135fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001354c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013550:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013555:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013559:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001355e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013568:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001356c:	53                   	push   ebx
c001356d:	e8 fe cf fe ff       	call   c0000570 <strlen>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	85 c0                	test   eax,eax
c0013577:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001357b:	74 0b                	je     c0013588 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001357d:	50                   	push   eax
c001357e:	6a 01                	push   0x1
c0013580:	53                   	push   ebx
c0013581:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013585:	50                   	push   eax
c0013586:	eb 0a                	jmp    c0013592 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013588:	50                   	push   eax
c0013589:	6a 00                	push   0x0
c001358b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001358f:	50                   	push   eax
c0013590:	6a 00                	push   0x0
c0013592:	e8 44 fd ff ff       	call   c00132db <CmGetMatch(char*, char*, bool, bool*)>
c0013597:	83 c4 10             	add    esp,0x10
c001359a:	83 f8 ff             	cmp    eax,0xffffffff
c001359d:	75 1a                	jne    c00135b9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001359f:	83 ec 0c             	sub    esp,0xc
c00135a2:	68 cd 26 02 c0       	push   0xc00226cd
c00135a7:	e8 eb e0 ff ff       	call   c0011697 <KePanic(char const*)>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	b8 02 00 00 00       	mov    eax,0x2
c00135b4:	e9 bc 00 00 00       	jmp    c0013675 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135b9:	83 ff 18             	cmp    edi,0x18
c00135bc:	75 1a                	jne    c00135d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	68 e2 26 02 c0       	push   0xc00226e2
c00135c6:	e8 cc e0 ff ff       	call   c0011697 <KePanic(char const*)>
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	b8 01 00 00 00       	mov    eax,0x1
c00135d3:	e9 9d 00 00 00       	jmp    c0013675 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135d8:	47                   	inc    edi
c00135d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135de:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00135e2:	74 02                	je     c00135e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00135e4:	89 ee                	mov    esi,ebp
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	53                   	push   ebx
c00135ea:	e8 81 cf fe ff       	call   c0000570 <strlen>
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	85 c0                	test   eax,eax
c00135f4:	74 06                	je     c00135fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00135f6:	46                   	inc    esi
c00135f7:	e9 40 ff ff ff       	jmp    c001353c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00135fc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013604:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001360c:	31 f6                	xor    esi,esi
c001360e:	50                   	push   eax
c001360f:	31 ff                	xor    edi,edi
c0013611:	6a 12                	push   0x12
c0013613:	68 ee 00 00 00       	push   0xee
c0013618:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001361f:	e8 cc ce fe ff       	call   c00004f0 <memset>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	83 fe 17             	cmp    esi,0x17
c001362a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001362e:	7e 26                	jle    c0013656 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013630:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013634:	50                   	push   eax
c0013635:	6a 08                	push   0x8
c0013637:	55                   	push   ebp
c0013638:	53                   	push   ebx
c0013639:	e8 2e fd ff ff       	call   c001336c <CmGetShift(unsigned int*, int*, int, bool*)>
c001363e:	83 c4 10             	add    esp,0x10
c0013641:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013646:	74 26                	je     c001366e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013648:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001364f:	4e                   	dec    esi
c0013650:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013653:	47                   	inc    edi
c0013654:	eb 1c                	jmp    c0013672 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013656:	6a 06                	push   0x6
c0013658:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001365d:	50                   	push   eax
c001365e:	55                   	push   ebp
c001365f:	53                   	push   ebx
c0013660:	e8 d7 fc ff ff       	call   c001333c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013665:	83 c4 10             	add    esp,0x10
c0013668:	84 c0                	test   al,al
c001366a:	75 06                	jne    c0013672 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001366c:	eb c2                	jmp    c0013630 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001366e:	31 c0                	xor    eax,eax
c0013670:	eb 03                	jmp    c0013675 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013672:	46                   	inc    esi
c0013673:	eb b2                	jmp    c0013627 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013675:	83 c4 6c             	add    esp,0x6c
c0013678:	5b                   	pop    ebx
c0013679:	5e                   	pop    esi
c001367a:	5f                   	pop    edi
c001367b:	5d                   	pop    ebp
c001367c:	c3                   	ret    

c001367d <CmCreateString(Reghive_Tag*, int, char const*)>:
c001367d:	53                   	push   ebx
c001367e:	83 ec 3c             	sub    esp,0x3c
c0013681:	6a 2b                	push   0x2b
c0013683:	6a 00                	push   0x0
c0013685:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013689:	53                   	push   ebx
c001368a:	e8 61 ce fe ff       	call   c00004f0 <memset>
c001368f:	58                   	pop    eax
c0013690:	5a                   	pop    edx
c0013691:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013695:	50                   	push   eax
c0013696:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001369a:	e8 40 fe ff ff       	call   c00134df <CmConvertToInternalFilename(char const*, unsigned char*)>
c001369f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00136a4:	83 c4 0c             	add    esp,0xc
c00136a7:	6a 15                	push   0x15
c00136a9:	6a 00                	push   0x0
c00136ab:	8d 44 24 27          	lea    eax,[esp+0x27]
c00136af:	50                   	push   eax
c00136b0:	e8 3b ce fe ff       	call   c00004f0 <memset>
c00136b5:	53                   	push   ebx
c00136b6:	6a 00                	push   0x0
c00136b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136c0:	e8 e6 f9 ff ff       	call   c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136c5:	83 c4 58             	add    esp,0x58
c00136c8:	5b                   	pop    ebx
c00136c9:	c3                   	ret    

c00136ca <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136ca:	56                   	push   esi
c00136cb:	53                   	push   ebx
c00136cc:	83 ec 48             	sub    esp,0x48
c00136cf:	6a 12                	push   0x12
c00136d1:	68 ff 00 00 00       	push   0xff
c00136d6:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00136da:	56                   	push   esi
c00136db:	e8 10 ce fe ff       	call   c00004f0 <memset>
c00136e0:	5a                   	pop    edx
c00136e1:	59                   	pop    ecx
c00136e2:	56                   	push   esi
c00136e3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136e7:	e8 f3 fd ff ff       	call   c00134df <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136f3:	85 db                	test   ebx,ebx
c00136f5:	74 42                	je     c0013739 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00136f7:	50                   	push   eax
c00136f8:	8d 44 24 19          	lea    eax,[esp+0x19]
c00136fc:	50                   	push   eax
c00136fd:	53                   	push   ebx
c00136fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013702:	e8 fa f6 ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	6a 12                	push   0x12
c001370c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013710:	50                   	push   eax
c0013711:	56                   	push   esi
c0013712:	e8 69 cc fe ff       	call   c0000380 <memcmp>
c0013717:	83 c4 10             	add    esp,0x10
c001371a:	85 c0                	test   eax,eax
c001371c:	74 1e                	je     c001373c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001371e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013723:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013728:	c1 e3 08             	shl    ebx,0x8
c001372b:	09 d8                	or     eax,ebx
c001372d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013732:	c1 e3 10             	shl    ebx,0x10
c0013735:	09 c3                	or     ebx,eax
c0013737:	eb ba                	jmp    c00136f3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013739:	83 cb ff             	or     ebx,0xffffffff
c001373c:	89 d8                	mov    eax,ebx
c001373e:	83 c4 44             	add    esp,0x44
c0013741:	5b                   	pop    ebx
c0013742:	5e                   	pop    esi
c0013743:	c3                   	ret    

c0013744 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013744:	57                   	push   edi
c0013745:	56                   	push   esi
c0013746:	53                   	push   ebx
c0013747:	83 ec 34             	sub    esp,0x34
c001374a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001374e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013752:	6a 2b                	push   0x2b
c0013754:	6a 00                	push   0x0
c0013756:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001375a:	53                   	push   ebx
c001375b:	e8 90 cd fe ff       	call   c00004f0 <memset>
c0013760:	58                   	pop    eax
c0013761:	5a                   	pop    edx
c0013762:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013766:	50                   	push   eax
c0013767:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001376b:	e8 6f fd ff ff       	call   c00134df <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013770:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013774:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013778:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001377c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013780:	53                   	push   ebx
c0013781:	6a 00                	push   0x0
c0013783:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013787:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001378b:	e8 1b f9 ff ff       	call   c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013790:	83 c4 50             	add    esp,0x50
c0013793:	5b                   	pop    ebx
c0013794:	5e                   	pop    esi
c0013795:	5f                   	pop    edi
c0013796:	c3                   	ret    

c0013797 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013797:	55                   	push   ebp
c0013798:	57                   	push   edi
c0013799:	56                   	push   esi
c001379a:	53                   	push   ebx
c001379b:	83 ec 40             	sub    esp,0x40
c001379e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00137a2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00137a6:	6a 2b                	push   0x2b
c00137a8:	6a 00                	push   0x0
c00137aa:	8d 74 24 11          	lea    esi,[esp+0x11]
c00137ae:	56                   	push   esi
c00137af:	e8 3c cd fe ff       	call   c00004f0 <memset>
c00137b4:	5f                   	pop    edi
c00137b5:	89 ef                	mov    edi,ebp
c00137b7:	58                   	pop    eax
c00137b8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137bc:	50                   	push   eax
c00137bd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137c1:	e8 19 fd ff ff       	call   c00134df <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137c6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137cb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137d0:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00137d5:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	85 ed                	test   ebp,ebp
c00137df:	74 14                	je     c00137f5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137e1:	51                   	push   ecx
c00137e2:	51                   	push   ecx
c00137e3:	57                   	push   edi
c00137e4:	53                   	push   ebx
c00137e5:	e8 09 f7 ff ff       	call   c0012ef3 <CmGetNext(Reghive_Tag*, int)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	85 c0                	test   eax,eax
c00137ef:	74 04                	je     c00137f5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137f1:	89 c7                	mov    edi,eax
c00137f3:	eb e8                	jmp    c00137dd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00137f5:	56                   	push   esi
c00137f6:	6a 00                	push   0x0
c00137f8:	57                   	push   edi
c00137f9:	53                   	push   ebx
c00137fa:	e8 ac f8 ff ff       	call   c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	89 c7                	mov    edi,eax
c0013804:	56                   	push   esi
c0013805:	50                   	push   eax
c0013806:	53                   	push   ebx
c0013807:	e8 f5 f5 ff ff       	call   c0012e01 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001380c:	58                   	pop    eax
c001380d:	5a                   	pop    edx
c001380e:	6a 6c                	push   0x6c
c0013810:	6a 00                	push   0x0
c0013812:	6a 00                	push   0x0
c0013814:	68 f3 26 02 c0       	push   0xc00226f3
c0013819:	57                   	push   edi
c001381a:	53                   	push   ebx
c001381b:	e8 24 ff ff ff       	call   c0013744 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013820:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013824:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013828:	c1 e8 10             	shr    eax,0x10
c001382b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001382f:	83 c4 1c             	add    esp,0x1c
c0013832:	56                   	push   esi
c0013833:	57                   	push   edi
c0013834:	53                   	push   ebx
c0013835:	e8 eb f6 ff ff       	call   c0012f25 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001383a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001383f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013844:	c1 e0 08             	shl    eax,0x8
c0013847:	09 c2                	or     edx,eax
c0013849:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001384e:	83 c4 4c             	add    esp,0x4c
c0013851:	c1 e0 10             	shl    eax,0x10
c0013854:	5b                   	pop    ebx
c0013855:	09 d0                	or     eax,edx
c0013857:	5e                   	pop    esi
c0013858:	5f                   	pop    edi
c0013859:	5d                   	pop    ebp
c001385a:	c3                   	ret    

c001385b <zStrtok(char*, char const*)>:
c001385b:	55                   	push   ebp
c001385c:	57                   	push   edi
c001385d:	56                   	push   esi
c001385e:	53                   	push   ebx
c001385f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013867:	85 db                	test   ebx,ebx
c0013869:	74 2f                	je     c001389a <zStrtok(char*, char const*)+0x3f>
c001386b:	85 c0                	test   eax,eax
c001386d:	75 09                	jne    c0013878 <zStrtok(char*, char const*)+0x1d>
c001386f:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c0013874:	85 c0                	test   eax,eax
c0013876:	74 50                	je     c00138c8 <zStrtok(char*, char const*)+0x6d>
c0013878:	31 c9                	xor    ecx,ecx
c001387a:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001387e:	74 03                	je     c0013883 <zStrtok(char*, char const*)+0x28>
c0013880:	41                   	inc    ecx
c0013881:	eb f7                	jmp    c001387a <zStrtok(char*, char const*)+0x1f>
c0013883:	31 d2                	xor    edx,edx
c0013885:	39 ca                	cmp    edx,ecx
c0013887:	74 15                	je     c001389e <zStrtok(char*, char const*)+0x43>
c0013889:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001388d:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013890:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013893:	39 ee                	cmp    esi,ebp
c0013895:	74 13                	je     c00138aa <zStrtok(char*, char const*)+0x4f>
c0013897:	42                   	inc    edx
c0013898:	eb eb                	jmp    c0013885 <zStrtok(char*, char const*)+0x2a>
c001389a:	31 c0                	xor    eax,eax
c001389c:	eb 2a                	jmp    c00138c8 <zStrtok(char*, char const*)+0x6d>
c001389e:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00138a8:	eb 1e                	jmp    c00138c8 <zStrtok(char*, char const*)+0x6d>
c00138aa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138ad:	39 ce                	cmp    esi,ecx
c00138af:	75 0a                	jne    c00138bb <zStrtok(char*, char const*)+0x60>
c00138b1:	40                   	inc    eax
c00138b2:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00138b7:	89 d8                	mov    eax,ebx
c00138b9:	eb 0d                	jmp    c00138c8 <zStrtok(char*, char const*)+0x6d>
c00138bb:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00138bf:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138c2:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138c8:	5b                   	pop    ebx
c00138c9:	5e                   	pop    esi
c00138ca:	5f                   	pop    edi
c00138cb:	5d                   	pop    ebp
c00138cc:	c3                   	ret    

c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138cd:	57                   	push   edi
c00138ce:	56                   	push   esi
c00138cf:	53                   	push   ebx
c00138d0:	81 ec 08 01 00 00    	sub    esp,0x108
c00138d6:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00138dd:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00138e4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00138e8:	53                   	push   ebx
c00138e9:	e8 52 cd fe ff       	call   c0000640 <strcpy>
c00138ee:	59                   	pop    ecx
c00138ef:	5e                   	pop    esi
c00138f0:	68 57 2a 02 c0       	push   0xc0022a57
c00138f5:	53                   	push   ebx
c00138f6:	bb 01 00 00 00       	mov    ebx,0x1
c00138fb:	e8 5b ff ff ff       	call   c001385b <zStrtok(char*, char const*)>
c0013900:	83 c4 10             	add    esp,0x10
c0013903:	85 c0                	test   eax,eax
c0013905:	74 3b                	je     c0013942 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013907:	52                   	push   edx
c0013908:	50                   	push   eax
c0013909:	6a 01                	push   0x1
c001390b:	57                   	push   edi
c001390c:	e8 b9 fd ff ff       	call   c00136ca <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013911:	59                   	pop    ecx
c0013912:	89 c3                	mov    ebx,eax
c0013914:	5e                   	pop    esi
c0013915:	68 57 2a 02 c0       	push   0xc0022a57
c001391a:	6a 00                	push   0x0
c001391c:	e8 3a ff ff ff       	call   c001385b <zStrtok(char*, char const*)>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	89 c6                	mov    esi,eax
c0013926:	85 c0                	test   eax,eax
c0013928:	74 18                	je     c0013942 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001392a:	52                   	push   edx
c001392b:	52                   	push   edx
c001392c:	53                   	push   ebx
c001392d:	57                   	push   edi
c001392e:	e8 81 f5 ff ff       	call   c0012eb4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013933:	83 c4 10             	add    esp,0x10
c0013936:	89 c3                	mov    ebx,eax
c0013938:	83 f8 ff             	cmp    eax,0xffffffff
c001393b:	74 05                	je     c0013942 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001393d:	50                   	push   eax
c001393e:	56                   	push   esi
c001393f:	53                   	push   ebx
c0013940:	eb c9                	jmp    c001390b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013942:	81 c4 00 01 00 00    	add    esp,0x100
c0013948:	89 d8                	mov    eax,ebx
c001394a:	5b                   	pop    ebx
c001394b:	5e                   	pop    esi
c001394c:	5f                   	pop    edi
c001394d:	c3                   	ret    

c001394e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001394e:	55                   	push   ebp
c001394f:	57                   	push   edi
c0013950:	56                   	push   esi
c0013951:	53                   	push   ebx
c0013952:	83 ec 5c             	sub    esp,0x5c
c0013955:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013959:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001395d:	85 db                	test   ebx,ebx
c001395f:	0f 8e 84 00 00 00    	jle    c00139e9 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013965:	31 ed                	xor    ebp,ebp
c0013967:	57                   	push   edi
c0013968:	6a 32                	push   0x32
c001396a:	6a 00                	push   0x0
c001396c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013970:	57                   	push   edi
c0013971:	e8 7a cb fe ff       	call   c00004f0 <memset>
c0013976:	83 c4 0c             	add    esp,0xc
c0013979:	57                   	push   edi
c001397a:	53                   	push   ebx
c001397b:	56                   	push   esi
c001397c:	e8 30 fb ff ff       	call   c00134b1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013981:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013985:	83 c4 10             	add    esp,0x10
c0013988:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001398c:	7d 13                	jge    c00139a1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001398e:	83 ec 0c             	sub    esp,0xc
c0013991:	45                   	inc    ebp
c0013992:	68 fb 2d 02 c0       	push   0xc0022dfb
c0013997:	e8 c9 6f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001399c:	83 c4 10             	add    esp,0x10
c001399f:	eb e7                	jmp    c0013988 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00139a1:	51                   	push   ecx
c00139a2:	57                   	push   edi
c00139a3:	53                   	push   ebx
c00139a4:	68 f9 26 02 c0       	push   0xc00226f9
c00139a9:	e8 b7 6f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00139b6:	75 1e                	jne    c00139d6 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00139b8:	52                   	push   edx
c00139b9:	52                   	push   edx
c00139ba:	53                   	push   ebx
c00139bb:	56                   	push   esi
c00139bc:	e8 f3 f4 ff ff       	call   c0012eb4 <CmEnterDirectory(Reghive_Tag*, int)>
c00139c1:	83 c4 0c             	add    esp,0xc
c00139c4:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139c8:	8d 51 04             	lea    edx,[ecx+0x4]
c00139cb:	52                   	push   edx
c00139cc:	50                   	push   eax
c00139cd:	56                   	push   esi
c00139ce:	e8 7b ff ff ff       	call   c001394e <CmDisplayTree(Reghive_Tag*, int, int)>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	50                   	push   eax
c00139d7:	50                   	push   eax
c00139d8:	53                   	push   ebx
c00139d9:	56                   	push   esi
c00139da:	e8 14 f5 ff ff       	call   c0012ef3 <CmGetNext(Reghive_Tag*, int)>
c00139df:	83 c4 10             	add    esp,0x10
c00139e2:	89 c3                	mov    ebx,eax
c00139e4:	e9 74 ff ff ff       	jmp    c001395d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00139e9:	83 c4 5c             	add    esp,0x5c
c00139ec:	5b                   	pop    ebx
c00139ed:	5e                   	pop    esi
c00139ee:	5f                   	pop    edi
c00139ef:	5d                   	pop    ebp
c00139f0:	c3                   	ret    

c00139f1 <CmSplitFinalSlashInPlace(char*)>:
c00139f1:	53                   	push   ebx
c00139f2:	83 ec 14             	sub    esp,0x14
c00139f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139f9:	53                   	push   ebx
c00139fa:	e8 71 cb fe ff       	call   c0000570 <strlen>
c00139ff:	83 c4 10             	add    esp,0x10
c0013a02:	48                   	dec    eax
c0013a03:	85 c0                	test   eax,eax
c0013a05:	74 15                	je     c0013a1c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a07:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a0a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a0e:	75 09                	jne    c0013a19 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a10:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a13:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a17:	eb 05                	jmp    c0013a1e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a19:	48                   	dec    eax
c0013a1a:	eb e7                	jmp    c0013a03 <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a1c:	31 c0                	xor    eax,eax
c0013a1e:	83 c4 08             	add    esp,0x8
c0013a21:	5b                   	pop    ebx
c0013a22:	c3                   	ret    

c0013a23 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a23:	55                   	push   ebp
c0013a24:	57                   	push   edi
c0013a25:	56                   	push   esi
c0013a26:	53                   	push   ebx
c0013a27:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a2d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a34:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a36:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a39:	80 fa 40             	cmp    dl,0x40
c0013a3c:	75 1c                	jne    c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a3e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a41:	85 c9                	test   ecx,ecx
c0013a43:	0f 84 09 01 00 00    	je     c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a49:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a4c:	83 f9 3a             	cmp    ecx,0x3a
c0013a4f:	74 04                	je     c0013a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a51:	89 c3                	mov    ebx,eax
c0013a53:	eb e9                	jmp    c0013a3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a58:	89 c3                	mov    ebx,eax
c0013a5a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a5e:	50                   	push   eax
c0013a5f:	6a 40                	push   0x40
c0013a61:	6a 00                	push   0x0
c0013a63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a67:	50                   	push   eax
c0013a68:	e8 83 ca fe ff       	call   c00004f0 <memset>
c0013a6d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a74:	31 c0                	xor    eax,eax
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013a7e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a81:	89 d1                	mov    ecx,edx
c0013a83:	85 d2                	test   edx,edx
c0013a85:	0f 84 c7 00 00 00    	je     c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a8b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a90:	0f 8f bc 00 00 00    	jg     c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a96:	83 fa 0a             	cmp    edx,0xa
c0013a99:	0f 85 a4 00 00 00    	jne    c0013b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013a9f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013aa4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013aa9:	89 c8                	mov    eax,ecx
c0013aab:	a8 df                	test   al,0xdf
c0013aad:	0f 94 c2             	sete   dl
c0013ab0:	83 f9 23             	cmp    ecx,0x23
c0013ab3:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ab8:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013abc:	80 e2 01             	and    dl,0x1
c0013abf:	75 4a                	jne    c0013b0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ac1:	83 e8 09             	sub    eax,0x9
c0013ac4:	3c 01                	cmp    al,0x1
c0013ac6:	76 43                	jbe    c0013b0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ac8:	83 f9 5b             	cmp    ecx,0x5b
c0013acb:	75 42                	jne    c0013b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013acd:	83 fe 40             	cmp    esi,0x40
c0013ad0:	75 39                	jne    c0013b0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ad2:	83 ec 0c             	sub    esp,0xc
c0013ad5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013ad9:	52                   	push   edx
c0013ada:	e8 91 ca fe ff       	call   c0000570 <strlen>
c0013adf:	83 c4 10             	add    esp,0x10
c0013ae2:	83 f8 3f             	cmp    eax,0x3f
c0013ae5:	77 6b                	ja     c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ae7:	50                   	push   eax
c0013ae8:	50                   	push   eax
c0013ae9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013aed:	52                   	push   edx
c0013aee:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013af2:	52                   	push   edx
c0013af3:	e8 48 cb fe ff       	call   c0000640 <strcpy>
c0013af8:	58                   	pop    eax
c0013af9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013afd:	52                   	push   edx
c0013afe:	e8 6d ca fe ff       	call   c0000570 <strlen>
c0013b03:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b08:	83 c4 10             	add    esp,0x10
c0013b0b:	31 d2                	xor    edx,edx
c0013b0d:	eb 3b                	jmp    c0013b4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b0f:	83 fe 40             	cmp    esi,0x40
c0013b12:	74 06                	je     c0013b1a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b14:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b18:	eb 20                	jmp    c0013b3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b1a:	50                   	push   eax
c0013b1b:	50                   	push   eax
c0013b1c:	55                   	push   ebp
c0013b1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b21:	50                   	push   eax
c0013b22:	e8 29 cc fe ff       	call   c0000750 <strcmp>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	85 c0                	test   eax,eax
c0013b2c:	75 dd                	jne    c0013b0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b2e:	eb e4                	jmp    c0013b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b30:	8d 50 01             	lea    edx,[eax+0x1]
c0013b33:	83 f9 3d             	cmp    ecx,0x3d
c0013b36:	74 1e                	je     c0013b56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b38:	89 d0                	mov    eax,edx
c0013b3a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b3d:	85 c9                	test   ecx,ecx
c0013b3f:	75 ef                	jne    c0013b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b41:	eb 0f                	jmp    c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b43:	8d 50 01             	lea    edx,[eax+0x1]
c0013b46:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b4a:	47                   	inc    edi
c0013b4b:	89 d0                	mov    eax,edx
c0013b4d:	e9 2c ff ff ff       	jmp    c0013a7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b52:	31 c0                	xor    eax,eax
c0013b54:	eb 33                	jmp    c0013b89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b5d:	50                   	push   eax
c0013b5e:	50                   	push   eax
c0013b5f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b63:	50                   	push   eax
c0013b64:	53                   	push   ebx
c0013b65:	e8 e6 cb fe ff       	call   c0000750 <strcmp>
c0013b6a:	83 c4 10             	add    esp,0x10
c0013b6d:	85 c0                	test   eax,eax
c0013b6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b73:	75 96                	jne    c0013b0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b75:	51                   	push   ecx
c0013b76:	51                   	push   ecx
c0013b77:	52                   	push   edx
c0013b78:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b7f:	e8 bc ca fe ff       	call   c0000640 <strcpy>
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	b0 01                	mov    al,0x1
c0013b89:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b8f:	5b                   	pop    ebx
c0013b90:	5e                   	pop    esi
c0013b91:	5f                   	pop    edi
c0013b92:	5d                   	pop    ebp
c0013b93:	c3                   	ret    

c0013b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b94:	57                   	push   edi
c0013b95:	56                   	push   esi
c0013b96:	53                   	push   ebx
c0013b97:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b9d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013ba4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013bab:	53                   	push   ebx
c0013bac:	e8 bf c9 fe ff       	call   c0000570 <strlen>
c0013bb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bb4:	89 c7                	mov    edi,eax
c0013bb6:	e8 b5 c9 fe ff       	call   c0000570 <strlen>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bc2:	3d ff 00 00 00       	cmp    eax,0xff
c0013bc7:	0f 87 d3 00 00 00    	ja     c0013ca0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bcd:	57                   	push   edi
c0013bce:	57                   	push   edi
c0013bcf:	56                   	push   esi
c0013bd0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bd4:	56                   	push   esi
c0013bd5:	e8 66 ca fe ff       	call   c0000640 <strcpy>
c0013bda:	58                   	pop    eax
c0013bdb:	5a                   	pop    edx
c0013bdc:	68 57 2a 02 c0       	push   0xc0022a57
c0013be1:	56                   	push   esi
c0013be2:	e8 59 cc fe ff       	call   c0000840 <strcat>
c0013be7:	59                   	pop    ecx
c0013be8:	5f                   	pop    edi
c0013be9:	53                   	push   ebx
c0013bea:	56                   	push   esi
c0013beb:	e8 50 cc fe ff       	call   c0000840 <strcat>
c0013bf0:	58                   	pop    eax
c0013bf1:	5a                   	pop    edx
c0013bf2:	68 03 27 02 c0       	push   0xc0022703
c0013bf7:	56                   	push   esi
c0013bf8:	e8 43 cc fe ff       	call   c0000840 <strcat>
c0013bfd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c04:	e8 cd 3e ff ff       	call   c0007ad6 <malloc>
c0013c09:	83 c4 0c             	add    esp,0xc
c0013c0c:	89 c3                	mov    ebx,eax
c0013c0e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c14:	56                   	push   esi
c0013c15:	50                   	push   eax
c0013c16:	e8 51 7f ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	85 db                	test   ebx,ebx
c0013c20:	74 7e                	je     c0013ca0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c22:	51                   	push   ecx
c0013c23:	51                   	push   ecx
c0013c24:	6a 01                	push   0x1
c0013c26:	53                   	push   ebx
c0013c27:	e8 5e 7f ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	85 c0                	test   eax,eax
c0013c31:	74 08                	je     c0013c3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c33:	83 ec 0c             	sub    esp,0xc
c0013c36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c38:	53                   	push   ebx
c0013c39:	eb 5f                	jmp    c0013c9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c3b:	52                   	push   edx
c0013c3c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c40:	50                   	push   eax
c0013c41:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c45:	50                   	push   eax
c0013c46:	53                   	push   ebx
c0013c47:	e8 40 82 ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0013c4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c50:	83 c4 10             	add    esp,0x10
c0013c53:	89 c1                	mov    ecx,eax
c0013c55:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c59:	74 31                	je     c0013c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c5b:	83 ec 0c             	sub    esp,0xc
c0013c5e:	50                   	push   eax
c0013c5f:	e8 72 3e ff ff       	call   c0007ad6 <malloc>
c0013c64:	89 c6                	mov    esi,eax
c0013c66:	58                   	pop    eax
c0013c67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c6d:	52                   	push   edx
c0013c6e:	56                   	push   esi
c0013c6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c77:	53                   	push   ebx
c0013c78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c7b:	83 c4 20             	add    esp,0x20
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	75 0a                	jne    c0013c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c8a:	74 18                	je     c0013ca4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	53                   	push   ebx
c0013c90:	e8 53 7f ff ff       	call   c000bbe8 <File::close()>
c0013c95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c9d:	83 c4 10             	add    esp,0x10
c0013ca0:	31 c0                	xor    eax,eax
c0013ca2:	eb 3b                	jmp    c0013cdf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	53                   	push   ebx
c0013ca8:	e8 3b 7f ff ff       	call   c000bbe8 <File::close()>
c0013cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013caf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cb5:	83 c4 0c             	add    esp,0xc
c0013cb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cbf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cc6:	56                   	push   esi
c0013cc7:	e8 57 fd ff ff       	call   c0013a23 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013ccc:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ccf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cd3:	e8 0e 3e ff ff       	call   c0007ae6 <free>
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013cdf:	81 c4 20 01 00 00    	add    esp,0x120
c0013ce5:	5b                   	pop    ebx
c0013ce6:	5e                   	pop    esi
c0013ce7:	5f                   	pop    edi
c0013ce8:	c3                   	ret    

c0013ce9 <Reg::getLine(char*, char*, char*)>:
c0013ce9:	57                   	push   edi
c0013cea:	56                   	push   esi
c0013ceb:	53                   	push   ebx
c0013cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cf0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cf4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cf8:	57                   	push   edi
c0013cf9:	56                   	push   esi
c0013cfa:	53                   	push   ebx
c0013cfb:	68 08 27 02 c0       	push   0xc0022708
c0013d00:	e8 8f fe ff ff       	call   c0013b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	84 c0                	test   al,al
c0013d0a:	75 10                	jne    c0013d1c <Reg::getLine(char*, char*, char*)+0x33>
c0013d0c:	57                   	push   edi
c0013d0d:	56                   	push   esi
c0013d0e:	53                   	push   ebx
c0013d0f:	68 2d 27 02 c0       	push   0xc002272d
c0013d14:	e8 7b fe ff ff       	call   c0013b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	5b                   	pop    ebx
c0013d1d:	5e                   	pop    esi
c0013d1e:	5f                   	pop    edi
c0013d1f:	c3                   	ret    

c0013d20 <Reg::readInt(char*, char*, int*)>:
c0013d20:	55                   	push   ebp
c0013d21:	57                   	push   edi
c0013d22:	56                   	push   esi
c0013d23:	53                   	push   ebx
c0013d24:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d2a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d2e:	55                   	push   ebp
c0013d2f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d36:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d3d:	e8 a7 ff ff ff       	call   c0013ce9 <Reg::getLine(char*, char*, char*)>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	84 c0                	test   al,al
c0013d47:	0f 84 b6 00 00 00    	je     c0013e03 <Reg::readInt(char*, char*, int*)+0xe3>
c0013d4d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d52:	83 fa 2b             	cmp    edx,0x2b
c0013d55:	74 0c                	je     c0013d63 <Reg::readInt(char*, char*, int*)+0x43>
c0013d57:	83 fa 2d             	cmp    edx,0x2d
c0013d5a:	75 0e                	jne    c0013d6a <Reg::readInt(char*, char*, int*)+0x4a>
c0013d5c:	ba 01 00 00 00       	mov    edx,0x1
c0013d61:	eb 0b                	jmp    c0013d6e <Reg::readInt(char*, char*, int*)+0x4e>
c0013d63:	ba 01 00 00 00       	mov    edx,0x1
c0013d68:	eb 02                	jmp    c0013d6c <Reg::readInt(char*, char*, int*)+0x4c>
c0013d6a:	31 d2                	xor    edx,edx
c0013d6c:	31 c0                	xor    eax,eax
c0013d6e:	be 0a 00 00 00       	mov    esi,0xa
c0013d73:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d78:	75 21                	jne    c0013d9b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d7a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d7f:	83 f9 78             	cmp    ecx,0x78
c0013d82:	75 0a                	jne    c0013d8e <Reg::readInt(char*, char*, int*)+0x6e>
c0013d84:	83 c2 02             	add    edx,0x2
c0013d87:	be 10 00 00 00       	mov    esi,0x10
c0013d8c:	eb 0d                	jmp    c0013d9b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d8e:	83 f9 62             	cmp    ecx,0x62
c0013d91:	75 08                	jne    c0013d9b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d93:	83 c2 02             	add    edx,0x2
c0013d96:	be 02 00 00 00       	mov    esi,0x2
c0013d9b:	01 d5                	add    ebp,edx
c0013d9d:	31 d2                	xor    edx,edx
c0013d9f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013da3:	83 f9 0d             	cmp    ecx,0xd
c0013da6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013daa:	0f 94 c3             	sete   bl
c0013dad:	85 c9                	test   ecx,ecx
c0013daf:	89 df                	mov    edi,ebx
c0013db1:	0f 94 c3             	sete   bl
c0013db4:	09 df                	or     edi,ebx
c0013db6:	89 fb                	mov    ebx,edi
c0013db8:	83 e7 01             	and    edi,0x1
c0013dbb:	75 35                	jne    c0013df2 <Reg::readInt(char*, char*, int*)+0xd2>
c0013dbd:	0f af d6             	imul   edx,esi
c0013dc0:	83 fe 10             	cmp    esi,0x10
c0013dc3:	75 26                	jne    c0013deb <Reg::readInt(char*, char*, int*)+0xcb>
c0013dc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013dc9:	83 ef 41             	sub    edi,0x41
c0013dcc:	89 fb                	mov    ebx,edi
c0013dce:	80 fb 05             	cmp    bl,0x5
c0013dd1:	77 06                	ja     c0013dd9 <Reg::readInt(char*, char*, int*)+0xb9>
c0013dd3:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013dd7:	eb 16                	jmp    c0013def <Reg::readInt(char*, char*, int*)+0xcf>
c0013dd9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ddd:	83 eb 61             	sub    ebx,0x61
c0013de0:	80 fb 05             	cmp    bl,0x5
c0013de3:	77 06                	ja     c0013deb <Reg::readInt(char*, char*, int*)+0xcb>
c0013de5:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013de9:	eb 04                	jmp    c0013def <Reg::readInt(char*, char*, int*)+0xcf>
c0013deb:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013def:	45                   	inc    ebp
c0013df0:	eb ad                	jmp    c0013d9f <Reg::readInt(char*, char*, int*)+0x7f>
c0013df2:	84 c0                	test   al,al
c0013df4:	74 02                	je     c0013df8 <Reg::readInt(char*, char*, int*)+0xd8>
c0013df6:	f7 da                	neg    edx
c0013df8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013dff:	89 10                	mov    DWORD PTR [eax],edx
c0013e01:	88 d8                	mov    al,bl
c0013e03:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e09:	5b                   	pop    ebx
c0013e0a:	5e                   	pop    esi
c0013e0b:	5f                   	pop    edi
c0013e0c:	5d                   	pop    ebp
c0013e0d:	c3                   	ret    

c0013e0e <Reg::readString(char*, char*, char*, int)>:
c0013e0e:	57                   	push   edi
c0013e0f:	56                   	push   esi
c0013e10:	53                   	push   ebx
c0013e11:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e17:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e1e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e22:	57                   	push   edi
c0013e23:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e2a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e31:	e8 b3 fe ff ff       	call   c0013ce9 <Reg::getLine(char*, char*, char*)>
c0013e36:	83 c4 10             	add    esp,0x10
c0013e39:	89 c6                	mov    esi,eax
c0013e3b:	84 c0                	test   al,al
c0013e3d:	74 44                	je     c0013e83 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e3f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e46:	31 c0                	xor    eax,eax
c0013e48:	4a                   	dec    edx
c0013e49:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e4c:	84 c9                	test   cl,cl
c0013e4e:	74 0f                	je     c0013e5f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e50:	39 c2                	cmp    edx,eax
c0013e52:	7e 0b                	jle    c0013e5f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e54:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e57:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e5c:	40                   	inc    eax
c0013e5d:	eb ea                	jmp    c0013e49 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e5f:	83 ec 0c             	sub    esp,0xc
c0013e62:	53                   	push   ebx
c0013e63:	e8 08 c7 fe ff       	call   c0000570 <strlen>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e70:	75 11                	jne    c0013e83 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	53                   	push   ebx
c0013e76:	e8 f5 c6 fe ff       	call   c0000570 <strlen>
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e83:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e89:	89 f0                	mov    eax,esi
c0013e8b:	5b                   	pop    ebx
c0013e8c:	5e                   	pop    esi
c0013e8d:	5f                   	pop    edi
c0013e8e:	c3                   	ret    

c0013e8f <Reg::readBool(char*, char*, bool*)>:
c0013e8f:	83 ec 20             	sub    esp,0x20
c0013e92:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e96:	50                   	push   eax
c0013e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9f:	e8 7c fe ff ff       	call   c0013d20 <Reg::readInt(char*, char*, int*)>
c0013ea4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ea9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ead:	0f 95 02             	setne  BYTE PTR [edx]
c0013eb0:	83 c4 2c             	add    esp,0x2c
c0013eb3:	c3                   	ret    

c0013eb4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013eb4:	53                   	push   ebx
c0013eb5:	83 ec 1c             	sub    esp,0x1c
c0013eb8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013ebc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ec0:	50                   	push   eax
c0013ec1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec9:	e8 c1 ff ff ff       	call   c0013e8f <Reg::readBool(char*, char*, bool*)>
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	84 c0                	test   al,al
c0013ed3:	74 04                	je     c0013ed9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013ed5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013ed9:	88 d8                	mov    al,bl
c0013edb:	83 c4 18             	add    esp,0x18
c0013ede:	5b                   	pop    ebx
c0013edf:	c3                   	ret    

c0013ee0 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ee0:	53                   	push   ebx
c0013ee1:	83 ec 1c             	sub    esp,0x1c
c0013ee4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ee8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013eec:	50                   	push   eax
c0013eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef5:	e8 26 fe ff ff       	call   c0013d20 <Reg::readInt(char*, char*, int*)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	84 c0                	test   al,al
c0013eff:	74 04                	je     c0013f05 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f05:	89 d8                	mov    eax,ebx
c0013f07:	83 c4 18             	add    esp,0x18
c0013f0a:	5b                   	pop    ebx
c0013f0b:	c3                   	ret    

c0013f0c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f0c:	57                   	push   edi
c0013f0d:	56                   	push   esi
c0013f0e:	56                   	push   esi
c0013f0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f17:	56                   	push   esi
c0013f18:	57                   	push   edi
c0013f19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f21:	e8 e8 fe ff ff       	call   c0013e0e <Reg::readString(char*, char*, char*, int)>
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	84 c0                	test   al,al
c0013f2b:	75 1a                	jne    c0013f47 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f2d:	51                   	push   ecx
c0013f2e:	56                   	push   esi
c0013f2f:	6a 00                	push   0x0
c0013f31:	57                   	push   edi
c0013f32:	e8 b9 c5 fe ff       	call   c00004f0 <memset>
c0013f37:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f3a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f40:	83 c4 10             	add    esp,0x10
c0013f43:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f47:	89 f8                	mov    eax,edi
c0013f49:	5a                   	pop    edx
c0013f4a:	5e                   	pop    esi
c0013f4b:	5f                   	pop    edi
c0013f4c:	c3                   	ret    

c0013f4d <SysEject(regs*)>:
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	83 ca ff             	or     edx,0xffffffff
c0013f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f57:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f5a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f5f:	83 e9 41             	sub    ecx,0x41
c0013f62:	83 f9 19             	cmp    ecx,0x19
c0013f65:	77 18                	ja     c0013f7f <SysEject(regs*)+0x32>
c0013f67:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f6e:	85 c9                	test   ecx,ecx
c0013f70:	74 0d                	je     c0013f7f <SysEject(regs*)+0x32>
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	51                   	push   ecx
c0013f76:	e8 e3 9d ff ff       	call   c000dd5e <LogicalDisk::eject()>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	99                   	cdq    
c0013f7f:	83 c4 0c             	add    esp,0xc
c0013f82:	c3                   	ret    

c0013f83 <SysExit(regs*)>:
c0013f83:	83 ec 18             	sub    esp,0x18
c0013f86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f8a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f8d:	e8 8a 2b 00 00       	call   c0016b1c <terminateTask(int)>
c0013f92:	83 c8 ff             	or     eax,0xffffffff
c0013f95:	83 c4 1c             	add    esp,0x1c
c0013f98:	89 c2                	mov    edx,eax
c0013f9a:	c3                   	ret    

c0013f9b <SysGetCwd(regs*)>:
c0013f9b:	83 ec 10             	sub    esp,0x10
c0013f9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fa2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013fa5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fad:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fb0:	e8 6b 78 ff ff       	call   c000b820 <Fs::getcwd(Process*, char*, int)>
c0013fb5:	83 c4 1c             	add    esp,0x1c
c0013fb8:	99                   	cdq    
c0013fb9:	c3                   	ret    

c0013fba <SysGetPID(regs*)>:
c0013fba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fc4:	99                   	cdq    
c0013fc5:	c3                   	ret    

c0013fc6 <SysGetRAMData(regs*)>:
c0013fc6:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013fcc:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013fd6:	99                   	cdq    
c0013fd7:	f7 f9                	idiv   ecx
c0013fd9:	c1 e0 18             	shl    eax,0x18
c0013fdc:	09 c8                	or     eax,ecx
c0013fde:	99                   	cdq    
c0013fdf:	c3                   	ret    

c0013fe0 <SysGetVGAPtr(regs*)>:
c0013fe0:	55                   	push   ebp
c0013fe1:	57                   	push   edi
c0013fe2:	56                   	push   esi
c0013fe3:	53                   	push   ebx
c0013fe4:	83 ec 18             	sub    esp,0x18
c0013fe7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013feb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fee:	e8 f5 25 00 00       	call   c00165e8 <Thr::processFromPID(int)>
c0013ff3:	83 c4 10             	add    esp,0x10
c0013ff6:	89 c1                	mov    ecx,eax
c0013ff8:	b8 01 00 00 00       	mov    eax,0x1
c0013ffd:	85 c9                	test   ecx,ecx
c0013fff:	74 57                	je     c0014058 <SysGetVGAPtr(regs*)+0x78>
c0014001:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0014007:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001400b:	74 0c                	je     c0014019 <SysGetVGAPtr(regs*)+0x39>
c001400d:	83 ec 0c             	sub    esp,0xc
c0014010:	55                   	push   ebp
c0014011:	e8 63 47 ff ff       	call   c0008779 <setActiveTerminal(VgaText*)>
c0014016:	83 c4 10             	add    esp,0x10
c0014019:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001401c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001401f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014024:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014026:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014029:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001402c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014032:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014035:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014038:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001403e:	50                   	push   eax
c001403f:	50                   	push   eax
c0014040:	68 48 27 02 c0       	push   0xc0022748
c0014045:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014048:	05 a8 0f 00 00       	add    eax,0xfa8
c001404d:	50                   	push   eax
c001404e:	e8 ed c5 fe ff       	call   c0000640 <strcpy>
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	31 c0                	xor    eax,eax
c0014058:	83 c4 0c             	add    esp,0xc
c001405b:	31 d2                	xor    edx,edx
c001405d:	5b                   	pop    ebx
c001405e:	5e                   	pop    esi
c001405f:	5f                   	pop    edi
c0014060:	5d                   	pop    ebp
c0014061:	c3                   	ret    
c0014062:	66 90                	xchg   ax,ax

c0014064 <SysKill(regs*)>:
c0014064:	53                   	push   ebx
c0014065:	83 ec 08             	sub    esp,0x8
c0014068:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001406c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014070:	75 16                	jne    c0014088 <SysKill(regs*)+0x24>
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	68 52 27 02 c0       	push   0xc0022752
c001407a:	e8 18 d6 ff ff       	call   c0011697 <KePanic(char const*)>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	e9 89 00 00 00       	jmp    c0014110 <SysKill(regs*)+0xac>
c0014087:	90                   	nop
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014090:	e8 47 bd 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014095:	8d 76 00             	lea    esi,[esi+0x0]
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	85 c0                	test   eax,eax
c001409d:	74 19                	je     c00140b8 <SysKill(regs*)+0x54>
c001409f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140a5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140a7:	74 33                	je     c00140dc <SysKill(regs*)+0x78>
c00140a9:	52                   	push   edx
c00140aa:	52                   	push   edx
c00140ab:	50                   	push   eax
c00140ac:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140b1:	e8 46 c0 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140b6:	eb e0                	jmp    c0014098 <SysKill(regs*)+0x34>
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140c0:	e8 17 bd 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	85 c0                	test   eax,eax
c00140cd:	74 41                	je     c0014110 <SysKill(regs*)+0xac>
c00140cf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140d5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140d7:	75 27                	jne    c0014100 <SysKill(regs*)+0x9c>
c00140d9:	8d 76 00             	lea    esi,[esi+0x0]
c00140dc:	51                   	push   ecx
c00140dd:	51                   	push   ecx
c00140de:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140e9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140ef:	e8 46 da ff ff       	call   c0011b3a <KeRaiseSignal(SigHandlerBlock*, int)>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	31 c0                	xor    eax,eax
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	eb 1b                	jmp    c0014118 <SysKill(regs*)+0xb4>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	52                   	push   edx
c0014101:	52                   	push   edx
c0014102:	50                   	push   eax
c0014103:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014108:	e8 ef bf 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001410d:	eb b9                	jmp    c00140c8 <SysKill(regs*)+0x64>
c001410f:	90                   	nop
c0014110:	83 c8 ff             	or     eax,0xffffffff
c0014113:	89 c2                	mov    edx,eax
c0014115:	8d 76 00             	lea    esi,[esi+0x0]
c0014118:	83 c4 08             	add    esp,0x8
c001411b:	5b                   	pop    ebx
c001411c:	c3                   	ret    

c001411d <SysLoadDLL(regs*)>:
c001411d:	56                   	push   esi
c001411e:	53                   	push   ebx
c001411f:	31 d2                	xor    edx,edx
c0014121:	51                   	push   ecx
c0014122:	b8 01 00 00 00       	mov    eax,0x1
c0014127:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001412b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001412f:	0f 84 8c 00 00 00    	je     c00141c1 <SysLoadDLL(regs*)+0xa4>
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	68 14 01 00 00       	push   0x114
c001413d:	e8 94 39 ff ff       	call   c0007ad6 <malloc>
c0014142:	83 c4 0c             	add    esp,0xc
c0014145:	89 c3                	mov    ebx,eax
c0014147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001414c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001414f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014152:	53                   	push   ebx
c0014153:	e8 14 7a ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0014158:	83 c4 10             	add    esp,0x10
c001415b:	31 d2                	xor    edx,edx
c001415d:	b8 02 00 00 00       	mov    eax,0x2
c0014162:	85 db                	test   ebx,ebx
c0014164:	74 5b                	je     c00141c1 <SysLoadDLL(regs*)+0xa4>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	53                   	push   ebx
c001416a:	e8 df 7c ff ff       	call   c000be4e <File::exists()>
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	84 c0                	test   al,al
c0014174:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014176:	75 11                	jne    c0014189 <SysLoadDLL(regs*)+0x6c>
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	53                   	push   ebx
c001417c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	b8 03 00 00 00       	mov    eax,0x3
c0014187:	eb 36                	jmp    c00141bf <SysLoadDLL(regs*)+0xa2>
c0014189:	83 ec 0c             	sub    esp,0xc
c001418c:	53                   	push   ebx
c001418d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014190:	58                   	pop    eax
c0014191:	5a                   	pop    edx
c0014192:	6a 00                	push   0x0
c0014194:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014197:	e8 81 15 00 00       	call   c001571d <Thr::loadDLL(char const*, bool)>
c001419c:	83 c4 10             	add    esp,0x10
c001419f:	89 c1                	mov    ecx,eax
c00141a1:	31 d2                	xor    edx,edx
c00141a3:	b8 04 00 00 00       	mov    eax,0x4
c00141a8:	85 c9                	test   ecx,ecx
c00141aa:	74 15                	je     c00141c1 <SysLoadDLL(regs*)+0xa4>
c00141ac:	53                   	push   ebx
c00141ad:	53                   	push   ebx
c00141ae:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141b4:	51                   	push   ecx
c00141b5:	e8 94 17 00 00       	call   c001594e <Thr::executeDLL(unsigned long, void*)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	31 c0                	xor    eax,eax
c00141bf:	31 d2                	xor    edx,edx
c00141c1:	59                   	pop    ecx
c00141c2:	5b                   	pop    ebx
c00141c3:	5e                   	pop    esi
c00141c4:	c3                   	ret    

c00141c5 <SysRead(regs*)>:
c00141c5:	57                   	push   edi
c00141c6:	56                   	push   esi
c00141c7:	53                   	push   ebx
c00141c8:	83 ec 10             	sub    esp,0x10
c00141cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141d2:	83 f8 02             	cmp    eax,0x2
c00141d5:	77 10                	ja     c00141e7 <SysRead(regs*)+0x22>
c00141d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141df:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141e5:	eb 0e                	jmp    c00141f5 <SysRead(regs*)+0x30>
c00141e7:	83 ec 0c             	sub    esp,0xc
c00141ea:	50                   	push   eax
c00141eb:	e8 e3 52 ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c00141f0:	83 c4 10             	add    esp,0x10
c00141f3:	89 c1                	mov    ecx,eax
c00141f5:	83 c8 ff             	or     eax,0xffffffff
c00141f8:	85 c9                	test   ecx,ecx
c00141fa:	89 c2                	mov    edx,eax
c00141fc:	74 28                	je     c0014226 <SysRead(regs*)+0x61>
c00141fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014206:	31 ff                	xor    edi,edi
c0014208:	83 ec 0c             	sub    esp,0xc
c001420b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001420d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014211:	52                   	push   edx
c0014212:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014215:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014218:	57                   	push   edi
c0014219:	56                   	push   esi
c001421a:	51                   	push   ecx
c001421b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001421e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014222:	83 c4 20             	add    esp,0x20
c0014225:	99                   	cdq    
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	5b                   	pop    ebx
c001422a:	5e                   	pop    esi
c001422b:	5f                   	pop    edi
c001422c:	c3                   	ret    

c001422d <SysRegisterSignal(regs*)>:
c001422d:	83 ec 18             	sub    esp,0x18
c0014230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014234:	6a 00                	push   0x0
c0014236:	6a 00                	push   0x0
c0014238:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001423b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001423e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014243:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014246:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001424c:	e8 b3 d8 ff ff       	call   c0011b04 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014251:	83 c4 2c             	add    esp,0x2c
c0014254:	99                   	cdq    
c0014255:	c3                   	ret    

c0014256 <SysRegistryGetTypeFromPath(regs*)>:
c0014256:	57                   	push   edi
c0014257:	56                   	push   esi
c0014258:	53                   	push   ebx
c0014259:	81 ec 38 01 00 00    	sub    esp,0x138
c001425f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014266:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014269:	68 73 27 02 c0       	push   0xc0022773
c001426e:	e8 f2 66 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0014273:	5a                   	pop    edx
c0014274:	59                   	pop    ecx
c0014275:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014278:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001427b:	e8 4d f6 ff ff       	call   c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014280:	5f                   	pop    edi
c0014281:	89 c6                	mov    esi,eax
c0014283:	5a                   	pop    edx
c0014284:	50                   	push   eax
c0014285:	68 93 27 02 c0       	push   0xc0022793
c001428a:	e8 d6 66 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	85 f6                	test   esi,esi
c0014294:	74 28                	je     c00142be <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014296:	50                   	push   eax
c0014297:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001429b:	57                   	push   edi
c001429c:	56                   	push   esi
c001429d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142a0:	e8 0c f2 ff ff       	call   c00134b1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142a5:	83 c4 0c             	add    esp,0xc
c00142a8:	89 c3                	mov    ebx,eax
c00142aa:	57                   	push   edi
c00142ab:	50                   	push   eax
c00142ac:	68 9b 27 02 c0       	push   0xc002279b
c00142b1:	e8 af 66 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00142b6:	89 d8                	mov    eax,ebx
c00142b8:	83 c4 10             	add    esp,0x10
c00142bb:	99                   	cdq    
c00142bc:	eb 05                	jmp    c00142c3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142be:	83 c8 ff             	or     eax,0xffffffff
c00142c1:	89 c2                	mov    edx,eax
c00142c3:	81 c4 30 01 00 00    	add    esp,0x130
c00142c9:	5b                   	pop    ebx
c00142ca:	5e                   	pop    esi
c00142cb:	5f                   	pop    edi
c00142cc:	c3                   	ret    

c00142cd <SysRegistryReadExtent(regs*)>:
c00142cd:	83 ec 1c             	sub    esp,0x1c
c00142d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142d4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142d7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00142da:	85 c0                	test   eax,eax
c00142dc:	79 1f                	jns    c00142fd <SysRegistryReadExtent(regs*)+0x30>
c00142de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00142e3:	52                   	push   edx
c00142e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00142e8:	52                   	push   edx
c00142e9:	50                   	push   eax
c00142ea:	51                   	push   ecx
c00142eb:	e8 b3 f0 ff ff       	call   c00133a3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00142f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	eb 14                	jmp    c0014311 <SysRegistryReadExtent(regs*)+0x44>
c00142fd:	83 ec 04             	sub    esp,0x4
c0014300:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014303:	50                   	push   eax
c0014304:	51                   	push   ecx
c0014305:	e8 33 eb ff ff       	call   c0012e3d <CmGetString(Reghive_Tag*, int, char*)>
c001430a:	83 c4 10             	add    esp,0x10
c001430d:	31 c0                	xor    eax,eax
c001430f:	31 d2                	xor    edx,edx
c0014311:	83 c4 1c             	add    esp,0x1c
c0014314:	c3                   	ret    

c0014315 <SysRegistryPathToExtentLookup(regs*)>:
c0014315:	53                   	push   ebx
c0014316:	83 ec 10             	sub    esp,0x10
c0014319:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001431d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014320:	68 b1 27 02 c0       	push   0xc00227b1
c0014325:	e8 3b 66 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001432a:	58                   	pop    eax
c001432b:	5a                   	pop    edx
c001432c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001432f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014332:	e8 96 f5 ff ff       	call   c00138cd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014337:	83 c4 18             	add    esp,0x18
c001433a:	99                   	cdq    
c001433b:	5b                   	pop    ebx
c001433c:	c3                   	ret    

c001433d <SysRegistryEnterDirectory(regs*)>:
c001433d:	53                   	push   ebx
c001433e:	83 ec 10             	sub    esp,0x10
c0014341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014345:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014348:	68 d4 27 02 c0       	push   0xc00227d4
c001434d:	e8 13 66 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0014352:	58                   	pop    eax
c0014353:	5a                   	pop    edx
c0014354:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014357:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001435a:	e8 55 eb ff ff       	call   c0012eb4 <CmEnterDirectory(Reghive_Tag*, int)>
c001435f:	83 c4 18             	add    esp,0x18
c0014362:	99                   	cdq    
c0014363:	5b                   	pop    ebx
c0014364:	c3                   	ret    

c0014365 <SysRegistryGetNext(regs*)>:
c0014365:	53                   	push   ebx
c0014366:	83 ec 10             	sub    esp,0x10
c0014369:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001436d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014370:	68 f2 27 02 c0       	push   0xc00227f2
c0014375:	e8 eb 65 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001437a:	58                   	pop    eax
c001437b:	5a                   	pop    edx
c001437c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001437f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014382:	e8 6c eb ff ff       	call   c0012ef3 <CmGetNext(Reghive_Tag*, int)>
c0014387:	83 c4 18             	add    esp,0x18
c001438a:	99                   	cdq    
c001438b:	5b                   	pop    ebx
c001438c:	c3                   	ret    

c001438d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001438d:	57                   	push   edi
c001438e:	56                   	push   esi
c001438f:	53                   	push   ebx
c0014390:	81 ec 34 01 00 00    	sub    esp,0x134
c0014396:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001439d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00143a1:	57                   	push   edi
c00143a2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143a5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143a8:	e8 04 f1 ff ff       	call   c00134b1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00143ad:	89 c3                	mov    ebx,eax
c00143af:	58                   	pop    eax
c00143b0:	5a                   	pop    edx
c00143b1:	57                   	push   edi
c00143b2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143b5:	e8 86 c2 fe ff       	call   c0000640 <strcpy>
c00143ba:	89 d8                	mov    eax,ebx
c00143bc:	81 c4 40 01 00 00    	add    esp,0x140
c00143c2:	99                   	cdq    
c00143c3:	5b                   	pop    ebx
c00143c4:	5e                   	pop    esi
c00143c5:	5f                   	pop    edi
c00143c6:	c3                   	ret    

c00143c7 <SysRegistryOpen(regs*)>:
c00143c7:	83 ec 18             	sub    esp,0x18
c00143ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143ce:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143d1:	e8 f7 e8 ff ff       	call   c0012ccd <CmOpen(char const*)>
c00143d6:	83 c4 1c             	add    esp,0x1c
c00143d9:	99                   	cdq    
c00143da:	c3                   	ret    

c00143db <SysRegistryClose(regs*)>:
c00143db:	83 ec 18             	sub    esp,0x18
c00143de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143e5:	e8 01 ea ff ff       	call   c0012deb <CmClose(Reghive_Tag*)>
c00143ea:	31 c0                	xor    eax,eax
c00143ec:	31 d2                	xor    edx,edx
c00143ee:	83 c4 1c             	add    esp,0x1c
c00143f1:	c3                   	ret    

c00143f2 <SysSbrk(regs*)>:
c00143f2:	56                   	push   esi
c00143f3:	53                   	push   ebx
c00143f4:	50                   	push   eax
c00143f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014401:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014404:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001440a:	85 db                	test   ebx,ebx
c001440c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001440f:	74 02                	je     c0014413 <SysSbrk(regs*)+0x21>
c0014411:	79 06                	jns    c0014419 <SysSbrk(regs*)+0x27>
c0014413:	89 f0                	mov    eax,esi
c0014415:	31 d2                	xor    edx,edx
c0014417:	eb 2a                	jmp    c0014443 <SysSbrk(regs*)+0x51>
c0014419:	83 c8 ff             	or     eax,0xffffffff
c001441c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014422:	89 c2                	mov    edx,eax
c0014424:	77 1d                	ja     c0014443 <SysSbrk(regs*)+0x51>
c0014426:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001442c:	50                   	push   eax
c001442d:	c1 ea 0c             	shr    edx,0xc
c0014430:	68 07 0c 00 00       	push   0xc07
c0014435:	52                   	push   edx
c0014436:	51                   	push   ecx
c0014437:	e8 08 5a ff ff       	call   c0009e44 <VAS::allocatePages(int, int)>
c001443c:	89 f0                	mov    eax,esi
c001443e:	31 d2                	xor    edx,edx
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	59                   	pop    ecx
c0014444:	5b                   	pop    ebx
c0014445:	5e                   	pop    esi
c0014446:	c3                   	ret    

c0014447 <SysSetCwd(regs*)>:
c0014447:	83 ec 14             	sub    esp,0x14
c001444a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001444e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014456:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014459:	e8 8f 7a ff ff       	call   c000beed <Fs::setcwd(Process*, char*)>
c001445e:	83 c4 1c             	add    esp,0x1c
c0014461:	99                   	cdq    
c0014462:	c3                   	ret    

c0014463 <SysSetTime(regs*)>:
c0014463:	55                   	push   ebp
c0014464:	31 c9                	xor    ecx,ecx
c0014466:	57                   	push   edi
c0014467:	bd 0c 00 00 00       	mov    ebp,0xc
c001446c:	56                   	push   esi
c001446d:	53                   	push   ebx
c001446e:	31 db                	xor    ebx,ebx
c0014470:	83 ec 10             	sub    esp,0x10
c0014473:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014477:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001447a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001447d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014480:	89 c2                	mov    edx,eax
c0014482:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014488:	83 e2 1f             	and    edx,0x1f
c001448b:	c1 e7 10             	shl    edi,0x10
c001448e:	42                   	inc    edx
c001448f:	c1 e8 05             	shr    eax,0x5
c0014492:	88 d1                	mov    cl,dl
c0014494:	31 d2                	xor    edx,edx
c0014496:	f7 f5                	div    ebp
c0014498:	89 dd                	mov    ebp,ebx
c001449a:	88 d5                	mov    ch,dl
c001449c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00144a2:	0f b7 c1             	movzx  eax,cx
c00144a5:	31 d2                	xor    edx,edx
c00144a7:	09 f8                	or     eax,edi
c00144a9:	bf 3c 00 00 00       	mov    edi,0x3c
c00144ae:	89 c1                	mov    ecx,eax
c00144b0:	89 f0                	mov    eax,esi
c00144b2:	f7 f7                	div    edi
c00144b4:	c1 e2 10             	shl    edx,0x10
c00144b7:	09 d5                	or     ebp,edx
c00144b9:	31 d2                	xor    edx,edx
c00144bb:	89 eb                	mov    ebx,ebp
c00144bd:	f7 f7                	div    edi
c00144bf:	bf 10 0e 00 00       	mov    edi,0xe10
c00144c4:	88 d7                	mov    bh,dl
c00144c6:	89 f0                	mov    eax,esi
c00144c8:	31 d2                	xor    edx,edx
c00144ca:	f7 f7                	div    edi
c00144cc:	bf 18 00 00 00       	mov    edi,0x18
c00144d1:	31 d2                	xor    edx,edx
c00144d3:	f7 f7                	div    edi
c00144d5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00144da:	88 d3                	mov    bl,dl
c00144dc:	53                   	push   ebx
c00144dd:	51                   	push   ecx
c00144de:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00144e4:	e8 11 82 ff ff       	call   c000c6fa <Clock::setTimeInDatetimeLocal(datetime_t)>
c00144e9:	83 c4 1c             	add    esp,0x1c
c00144ec:	83 f0 01             	xor    eax,0x1
c00144ef:	5b                   	pop    ebx
c00144f0:	0f b6 c0             	movzx  eax,al
c00144f3:	5e                   	pop    esi
c00144f4:	31 d2                	xor    edx,edx
c00144f6:	5f                   	pop    edi
c00144f7:	5d                   	pop    ebp
c00144f8:	c3                   	ret    

c00144f9 <SysSymlink(regs*)>:
c00144f9:	56                   	push   esi
c00144fa:	83 c8 ff             	or     eax,0xffffffff
c00144fd:	53                   	push   ebx
c00144fe:	89 c2                	mov    edx,eax
c0014500:	81 ec 34 02 00 00    	sub    esp,0x234
c0014506:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001450d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014511:	74 50                	je     c0014563 <SysSymlink(regs*)+0x6a>
c0014513:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014516:	85 c9                	test   ecx,ecx
c0014518:	74 49                	je     c0014563 <SysSymlink(regs*)+0x6a>
c001451a:	6a 01                	push   0x1
c001451c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014521:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014524:	05 0c 01 00 00       	add    eax,0x10c
c0014529:	50                   	push   eax
c001452a:	51                   	push   ecx
c001452b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001452f:	56                   	push   esi
c0014530:	e8 3f 73 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014535:	6a 01                	push   0x1
c0014537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001453c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001453f:	05 0c 01 00 00       	add    eax,0x10c
c0014544:	50                   	push   eax
c0014545:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014548:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001454f:	53                   	push   ebx
c0014550:	e8 1f 73 ff ff       	call   c000b874 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014555:	83 c4 18             	add    esp,0x18
c0014558:	56                   	push   esi
c0014559:	53                   	push   ebx
c001455a:	e8 24 6f ff ff       	call   c000b483 <KeCreateSymlink(char const*, char const*)>
c001455f:	83 c4 10             	add    esp,0x10
c0014562:	99                   	cdq    
c0014563:	81 c4 34 02 00 00    	add    esp,0x234
c0014569:	5b                   	pop    ebx
c001456a:	5e                   	pop    esi
c001456b:	c3                   	ret    

c001456c <SysTimezone(regs*)>:
c001456c:	53                   	push   ebx
c001456d:	83 ec 08             	sub    esp,0x8
c0014570:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014574:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014578:	75 17                	jne    c0014591 <SysTimezone(regs*)+0x25>
c001457a:	83 ec 0c             	sub    esp,0xc
c001457d:	68 09 28 02 c0       	push   0xc0022809
c0014582:	e8 de 63 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0014587:	83 c8 ff             	or     eax,0xffffffff
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	89 c2                	mov    edx,eax
c001458f:	eb 20                	jmp    c00145b1 <SysTimezone(regs*)+0x45>
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	68 1e 28 02 c0       	push   0xc002281e
c0014599:	e8 c7 63 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001459e:	58                   	pop    eax
c001459f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145a2:	e8 bd 7e ff ff       	call   c000c464 <User::loadClockSettings(int)>
c00145a7:	83 c4 10             	add    esp,0x10
c00145aa:	b8 01 00 00 00       	mov    eax,0x1
c00145af:	31 d2                	xor    edx,edx
c00145b1:	83 c4 08             	add    esp,0x8
c00145b4:	5b                   	pop    ebx
c00145b5:	c3                   	ret    

c00145b6 <SysTruncate(regs*)>:
c00145b6:	55                   	push   ebp
c00145b7:	57                   	push   edi
c00145b8:	31 ff                	xor    edi,edi
c00145ba:	56                   	push   esi
c00145bb:	53                   	push   ebx
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145c6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145c9:	89 ce                	mov    esi,ecx
c00145cb:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145cf:	0f 84 9a 00 00 00    	je     c001466f <SysTruncate(regs*)+0xb9>
c00145d5:	83 ec 0c             	sub    esp,0xc
c00145d8:	68 14 01 00 00       	push   0x114
c00145dd:	e8 f4 34 ff ff       	call   c0007ad6 <malloc>
c00145e2:	83 c4 0c             	add    esp,0xc
c00145e5:	89 c3                	mov    ebx,eax
c00145e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145ef:	55                   	push   ebp
c00145f0:	53                   	push   ebx
c00145f1:	e8 76 75 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	31 d2                	xor    edx,edx
c00145fb:	b8 03 00 00 00       	mov    eax,0x3
c0014600:	85 db                	test   ebx,ebx
c0014602:	0f 84 a2 00 00 00    	je     c00146aa <SysTruncate(regs*)+0xf4>
c0014608:	51                   	push   ecx
c0014609:	51                   	push   ecx
c001460a:	6a 02                	push   0x2
c001460c:	53                   	push   ebx
c001460d:	e8 78 75 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	85 c0                	test   eax,eax
c0014617:	74 13                	je     c001462c <SysTruncate(regs*)+0x76>
c0014619:	83 ec 0c             	sub    esp,0xc
c001461c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001461e:	53                   	push   ebx
c001461f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	b8 04 00 00 00       	mov    eax,0x4
c001462a:	eb 7c                	jmp    c00146a8 <SysTruncate(regs*)+0xf2>
c001462c:	52                   	push   edx
c001462d:	57                   	push   edi
c001462e:	56                   	push   esi
c001462f:	53                   	push   ebx
c0014630:	e8 69 76 ff ff       	call   c000bc9e <File::truncate(unsigned long long)>
c0014635:	83 c4 10             	add    esp,0x10
c0014638:	85 c0                	test   eax,eax
c001463a:	74 1b                	je     c0014657 <SysTruncate(regs*)+0xa1>
c001463c:	83 ec 0c             	sub    esp,0xc
c001463f:	53                   	push   ebx
c0014640:	e8 a3 75 ff ff       	call   c000bbe8 <File::close()>
c0014645:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014647:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001464a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	b8 05 00 00 00       	mov    eax,0x5
c0014655:	eb 51                	jmp    c00146a8 <SysTruncate(regs*)+0xf2>
c0014657:	83 ec 0c             	sub    esp,0xc
c001465a:	53                   	push   ebx
c001465b:	e8 88 75 ff ff       	call   c000bbe8 <File::close()>
c0014660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014665:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	31 c0                	xor    eax,eax
c001466d:	eb 39                	jmp    c00146a8 <SysTruncate(regs*)+0xf2>
c001466f:	31 d2                	xor    edx,edx
c0014671:	b8 01 00 00 00       	mov    eax,0x1
c0014676:	83 fd 02             	cmp    ebp,0x2
c0014679:	7e 2f                	jle    c00146aa <SysTruncate(regs*)+0xf4>
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	51                   	push   ecx
c001467f:	e8 4f 4e ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	89 c1                	mov    ecx,eax
c0014689:	31 d2                	xor    edx,edx
c001468b:	b8 02 00 00 00       	mov    eax,0x2
c0014690:	85 c9                	test   ecx,ecx
c0014692:	74 16                	je     c00146aa <SysTruncate(regs*)+0xf4>
c0014694:	50                   	push   eax
c0014695:	57                   	push   edi
c0014696:	56                   	push   esi
c0014697:	51                   	push   ecx
c0014698:	e8 01 76 ff ff       	call   c000bc9e <File::truncate(unsigned long long)>
c001469d:	83 c4 10             	add    esp,0x10
c00146a0:	85 c0                	test   eax,eax
c00146a2:	0f 95 c0             	setne  al
c00146a5:	0f b6 c0             	movzx  eax,al
c00146a8:	31 d2                	xor    edx,edx
c00146aa:	83 c4 0c             	add    esp,0xc
c00146ad:	5b                   	pop    ebx
c00146ae:	5e                   	pop    esi
c00146af:	5f                   	pop    edi
c00146b0:	5d                   	pop    ebp
c00146b1:	c3                   	ret    

c00146b2 <SysWrite(regs*)>:
c00146b2:	57                   	push   edi
c00146b3:	56                   	push   esi
c00146b4:	53                   	push   ebx
c00146b5:	83 ec 10             	sub    esp,0x10
c00146b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146bf:	83 f8 02             	cmp    eax,0x2
c00146c2:	77 10                	ja     c00146d4 <SysWrite(regs*)+0x22>
c00146c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146cc:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146d2:	eb 0e                	jmp    c00146e2 <SysWrite(regs*)+0x30>
c00146d4:	83 ec 0c             	sub    esp,0xc
c00146d7:	50                   	push   eax
c00146d8:	e8 f6 4d ff ff       	call   c00094d3 <KeGetFileFromDescriptor(int)>
c00146dd:	83 c4 10             	add    esp,0x10
c00146e0:	89 c1                	mov    ecx,eax
c00146e2:	83 c8 ff             	or     eax,0xffffffff
c00146e5:	85 c9                	test   ecx,ecx
c00146e7:	89 c2                	mov    edx,eax
c00146e9:	74 28                	je     c0014713 <SysWrite(regs*)+0x61>
c00146eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146f3:	31 ff                	xor    edi,edi
c00146f5:	83 ec 0c             	sub    esp,0xc
c00146f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146fa:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146fe:	52                   	push   edx
c00146ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014702:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014705:	57                   	push   edi
c0014706:	56                   	push   esi
c0014707:	51                   	push   ecx
c0014708:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001470b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001470f:	83 c4 20             	add    esp,0x20
c0014712:	99                   	cdq    
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	5b                   	pop    ebx
c0014717:	5e                   	pop    esi
c0014718:	5f                   	pop    edi
c0014719:	c3                   	ret    

c001471a <SysWsbe(regs*)>:
c001471a:	57                   	push   edi
c001471b:	b9 0b 00 00 00       	mov    ecx,0xb
c0014720:	56                   	push   esi
c0014721:	be 5d 28 02 c0       	mov    esi,0xc002285d
c0014726:	53                   	push   ebx
c0014727:	83 ec 30             	sub    esp,0x30
c001472a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001472e:	fc                   	cld    
c001472f:	83 ec 0c             	sub    esp,0xc
c0014732:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014734:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001473d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014740:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014746:	8b 06                	mov    eax,DWORD PTR [esi]
c0014748:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001474b:	57                   	push   edi
c001474c:	e8 1f be fe ff       	call   c0000570 <strlen>
c0014751:	5a                   	pop    edx
c0014752:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014756:	52                   	push   edx
c0014757:	31 d2                	xor    edx,edx
c0014759:	57                   	push   edi
c001475a:	52                   	push   edx
c001475b:	50                   	push   eax
c001475c:	56                   	push   esi
c001475d:	ff d3                	call   ebx
c001475f:	83 c4 14             	add    esp,0x14
c0014762:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014766:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014769:	e8 ae 23 00 00       	call   c0016b1c <terminateTask(int)>
c001476e:	83 c4 40             	add    esp,0x40
c0014771:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014776:	5b                   	pop    ebx
c0014777:	31 d2                	xor    edx,edx
c0014779:	5e                   	pop    esi
c001477a:	5f                   	pop    edi
c001477b:	c3                   	ret    

c001477c <SysYield(regs*)>:
c001477c:	83 ec 0c             	sub    esp,0xc
c001477f:	fa                   	cli    
c0014780:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014786:	e8 f1 19 00 00       	call   c001617c <schedule()>
c001478b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014790:	48                   	dec    eax
c0014791:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014796:	75 01                	jne    c0014799 <SysYield(regs*)+0x1d>
c0014798:	fb                   	sti    
c0014799:	31 c0                	xor    eax,eax
c001479b:	31 d2                	xor    edx,edx
c001479d:	83 c4 0c             	add    esp,0xc
c00147a0:	c3                   	ret    

c00147a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00147a1:	55                   	push   ebp
c00147a2:	57                   	push   edi
c00147a3:	56                   	push   esi
c00147a4:	53                   	push   ebx
c00147a5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00147ab:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00147b3:	0f 95 c0             	setne  al
c00147b6:	31 d2                	xor    edx,edx
c00147b8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147c0:	0f 94 c2             	sete   dl
c00147c3:	85 c2                	test   edx,eax
c00147c5:	74 34                	je     c00147fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147c7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00147d2:	74 27                	je     c00147fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147d4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00147db:	05 00 10 00 00       	add    eax,0x1000
c00147e0:	89 c1                	mov    ecx,eax
c00147e2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147e7:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00147ed:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00147f4:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00147fb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001480b:	6a 01                	push   0x1
c001480d:	e8 1b 4e ff ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c0014812:	83 c4 10             	add    esp,0x10
c0014815:	89 c3                	mov    ebx,eax
c0014817:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001481d:	0f 86 25 01 00 00    	jbe    c0014948 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014823:	c1 ee 0c             	shr    esi,0xc
c0014826:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001482d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014831:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014839:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014844:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001484b:	29 ef                	sub    edi,ebp
c001484d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014851:	0f 83 f8 00 00 00    	jae    c001494f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014857:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001485d:	76 05                	jbe    c0014864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001485f:	bf 00 10 00 00       	mov    edi,0x1000
c0014864:	83 ec 0c             	sub    esp,0xc
c0014867:	31 d2                	xor    edx,edx
c0014869:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014870:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014872:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014876:	50                   	push   eax
c0014877:	8d 74 24 30          	lea    esi,[esp+0x30]
c001487b:	56                   	push   esi
c001487c:	52                   	push   edx
c001487d:	57                   	push   edi
c001487e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014885:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014888:	83 c4 20             	add    esp,0x20
c001488b:	85 c0                	test   eax,eax
c001488d:	75 06                	jne    c0014895 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001488f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014893:	74 13                	je     c00148a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014895:	83 ec 0c             	sub    esp,0xc
c0014898:	53                   	push   ebx
c0014899:	e8 ad 50 ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	31 c0                	xor    eax,eax
c00148a3:	e9 7c 01 00 00       	jmp    c0014a24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00148a8:	fa                   	cli    
c00148a9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148af:	e8 2b 35 ff ff       	call   c0007ddf <Phys::allocatePage()>
c00148b4:	6a 07                	push   0x7
c00148b6:	89 c7                	mov    edi,eax
c00148b8:	53                   	push   ebx
c00148b9:	50                   	push   eax
c00148ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c8:	e8 73 54 ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148cd:	83 c4 0c             	add    esp,0xc
c00148d0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148dd:	6a 00                	push   0x0
c00148df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ed:	e8 b4 52 ff ff       	call   c0009ba6 <VAS::mapOtherVASIn(bool, VAS*)>
c00148f2:	58                   	pop    eax
c00148f3:	5a                   	pop    edx
c00148f4:	68 07 0c 00 00       	push   0xc07
c00148f9:	55                   	push   ebp
c00148fa:	57                   	push   edi
c00148fb:	89 df                	mov    edi,ebx
c00148fd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014904:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001490a:	6a 00                	push   0x0
c001490c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014914:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491a:	e8 73 56 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001491f:	b9 00 10 00 00       	mov    ecx,0x1000
c0014924:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014926:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001492b:	83 c4 20             	add    esp,0x20
c001492e:	48                   	dec    eax
c001492f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014934:	85 c0                	test   eax,eax
c0014936:	75 01                	jne    c0014939 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014938:	fb                   	sti    
c0014939:	81 c5 00 10 00 00    	add    ebp,0x1000
c001493f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014943:	e9 f1 fe ff ff       	jmp    c0014839 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014948:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001494f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014956:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001495c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014962:	0f 86 ae 00 00 00    	jbe    c0014a16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014968:	fa                   	cli    
c0014969:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001496f:	c1 ee 0c             	shr    esi,0xc
c0014972:	51                   	push   ecx
c0014973:	31 ff                	xor    edi,edi
c0014975:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001497c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014982:	6a 00                	push   0x0
c0014984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014989:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001498c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014992:	e8 0f 52 ff ff       	call   c0009ba6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	e8 40 34 ff ff       	call   c0007ddf <Phys::allocatePage()>
c001499f:	47                   	inc    edi
c00149a0:	6a 07                	push   0x7
c00149a2:	53                   	push   ebx
c00149a3:	50                   	push   eax
c00149a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149ae:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00149b1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00149b7:	e8 84 53 ff ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00149bc:	58                   	pop    eax
c00149bd:	5a                   	pop    edx
c00149be:	68 07 0c 00 00       	push   0xc07
c00149c3:	55                   	push   ebp
c00149c4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ce:	50                   	push   eax
c00149cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149dc:	6a 00                	push   0x0
c00149de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149e6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149ec:	e8 a1 55 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149f1:	83 c4 1c             	add    esp,0x1c
c00149f4:	68 00 10 00 00       	push   0x1000
c00149f9:	6a 00                	push   0x0
c00149fb:	53                   	push   ebx
c00149fc:	e8 ef ba fe ff       	call   c00004f0 <memset>
c0014a01:	83 c4 10             	add    esp,0x10
c0014a04:	39 fe                	cmp    esi,edi
c0014a06:	77 92                	ja     c001499a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014a08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014a0d:	48                   	dec    eax
c0014a0e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014a13:	75 01                	jne    c0014a16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014a15:	fb                   	sti    
c0014a16:	83 ec 0c             	sub    esp,0xc
c0014a19:	53                   	push   ebx
c0014a1a:	e8 2c 4f ff ff       	call   c000994b <Virt::freeKernelVirtualPages(unsigned long)>
c0014a1f:	83 c4 10             	add    esp,0x10
c0014a22:	b0 01                	mov    al,0x1
c0014a24:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a2a:	5b                   	pop    ebx
c0014a2b:	5e                   	pop    esi
c0014a2c:	5f                   	pop    edi
c0014a2d:	5d                   	pop    ebp
c0014a2e:	c3                   	ret    

c0014a2f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a2f:	55                   	push   ebp
c0014a30:	57                   	push   edi
c0014a31:	56                   	push   esi
c0014a32:	53                   	push   ebx
c0014a33:	83 ec 48             	sub    esp,0x48
c0014a36:	68 14 01 00 00       	push   0x114
c0014a3b:	e8 96 30 ff ff       	call   c0007ad6 <malloc>
c0014a40:	83 c4 0c             	add    esp,0xc
c0014a43:	89 c6                	mov    esi,eax
c0014a45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a49:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a4d:	50                   	push   eax
c0014a4e:	e8 19 71 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0014a53:	58                   	pop    eax
c0014a54:	5a                   	pop    edx
c0014a55:	6a 01                	push   0x1
c0014a57:	56                   	push   esi
c0014a58:	e8 2d 71 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	85 c0                	test   eax,eax
c0014a62:	0f 85 43 01 00 00    	jne    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a68:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a70:	83 ec 0c             	sub    esp,0xc
c0014a73:	6a 34                	push   0x34
c0014a75:	e8 5c 30 ff ff       	call   c0007ad6 <malloc>
c0014a7a:	89 c3                	mov    ebx,eax
c0014a7c:	58                   	pop    eax
c0014a7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a7f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a83:	57                   	push   edi
c0014a84:	53                   	push   ebx
c0014a85:	6a 00                	push   0x0
c0014a87:	6a 34                	push   0x34
c0014a89:	56                   	push   esi
c0014a8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a8d:	83 c4 20             	add    esp,0x20
c0014a90:	85 c0                	test   eax,eax
c0014a92:	0f 85 13 01 00 00    	jne    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a98:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a9e:	0f 85 07 01 00 00    	jne    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aa4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aa7:	85 c0                	test   eax,eax
c0014aa9:	0f 84 fc 00 00 00    	je     c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aaf:	31 d2                	xor    edx,edx
c0014ab1:	55                   	push   ebp
c0014ab2:	52                   	push   edx
c0014ab3:	50                   	push   eax
c0014ab4:	56                   	push   esi
c0014ab5:	e8 8e 71 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	85 c0                	test   eax,eax
c0014abf:	0f 85 e6 00 00 00    	jne    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ac5:	83 ec 0c             	sub    esp,0xc
c0014ac8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014acb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014acf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ad3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ad7:	0f af c2             	imul   eax,edx
c0014ada:	50                   	push   eax
c0014adb:	e8 f6 2f ff ff       	call   c0007ad6 <malloc>
c0014ae0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ae6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ae9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014aed:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014af1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014af5:	0f af c2             	imul   eax,edx
c0014af8:	99                   	cdq    
c0014af9:	52                   	push   edx
c0014afa:	50                   	push   eax
c0014afb:	56                   	push   esi
c0014afc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aff:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b02:	83 c4 20             	add    esp,0x20
c0014b05:	85 c0                	test   eax,eax
c0014b07:	0f 84 9e 00 00 00    	je     c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b0d:	31 d2                	xor    edx,edx
c0014b0f:	51                   	push   ecx
c0014b10:	52                   	push   edx
c0014b11:	50                   	push   eax
c0014b12:	56                   	push   esi
c0014b13:	e8 30 71 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	85 c0                	test   eax,eax
c0014b1d:	0f 85 88 00 00 00    	jne    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b2a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b2e:	31 ed                	xor    ebp,ebp
c0014b30:	0f af c2             	imul   eax,edx
c0014b33:	50                   	push   eax
c0014b34:	e8 9d 2f ff ff       	call   c0007ad6 <malloc>
c0014b39:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b46:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b4a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b4e:	0f af c2             	imul   eax,edx
c0014b51:	99                   	cdq    
c0014b52:	52                   	push   edx
c0014b53:	50                   	push   eax
c0014b54:	56                   	push   esi
c0014b55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b58:	83 c4 20             	add    esp,0x20
c0014b5b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b63:	0f b7 fd             	movzx  edi,bp
c0014b66:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b6a:	73 7d                	jae    c0014be9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b6c:	c1 e7 05             	shl    edi,0x5
c0014b6f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b73:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b76:	75 6b                	jne    c0014be3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b78:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b7f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b86:	52                   	push   edx
c0014b87:	31 d2                	xor    edx,edx
c0014b89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b8c:	52                   	push   edx
c0014b8d:	50                   	push   eax
c0014b8e:	56                   	push   esi
c0014b8f:	e8 b4 70 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	85 c0                	test   eax,eax
c0014b99:	74 17                	je     c0014bb2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014b9b:	83 ec 0c             	sub    esp,0xc
c0014b9e:	68 89 28 02 c0       	push   0xc0022889
c0014ba3:	e8 bd 5d ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0014ba8:	83 c4 10             	add    esp,0x10
c0014bab:	31 c0                	xor    eax,eax
c0014bad:	e9 87 00 00 00       	jmp    c0014c39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014bb2:	83 ec 0c             	sub    esp,0xc
c0014bb5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bb8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014bbb:	50                   	push   eax
c0014bbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bc4:	56                   	push   esi
c0014bc5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bc9:	e8 d3 fb ff ff       	call   c00147a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bd2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014bd6:	83 c4 20             	add    esp,0x20
c0014bd9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014bdd:	73 04                	jae    c0014be3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014be3:	45                   	inc    ebp
c0014be4:	e9 7a ff ff ff       	jmp    c0014b63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014be9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014bed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014bf5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014bfb:	83 ec 0c             	sub    esp,0xc
c0014bfe:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c09:	05 00 10 00 00       	add    eax,0x1000
c0014c0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c15:	e8 cc 2e ff ff       	call   c0007ae6 <free>
c0014c1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c1d:	e8 c4 2e ff ff       	call   c0007ae6 <free>
c0014c22:	58                   	pop    eax
c0014c23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c27:	e8 ba 2e ff ff       	call   c0007ae6 <free>
c0014c2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c2f:	e8 b4 6f ff ff       	call   c000bbe8 <File::close()>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	b0 01                	mov    al,0x1
c0014c39:	83 c4 3c             	add    esp,0x3c
c0014c3c:	5b                   	pop    ebx
c0014c3d:	5e                   	pop    esi
c0014c3e:	5f                   	pop    edi
c0014c3f:	5d                   	pop    ebp
c0014c40:	c3                   	ret    

c0014c41 <Thr::runtimeReferenceHelper()>:
c0014c41:	83 ec 18             	sub    esp,0x18
c0014c44:	68 91 28 02 c0       	push   0xc0022891
c0014c49:	e8 17 5d ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0014c4e:	fa                   	cli    
c0014c4f:	83 c4 10             	add    esp,0x10
c0014c52:	eb fe                	jmp    c0014c52 <Thr::runtimeReferenceHelper()+0x11>

c0014c54 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c54:	57                   	push   edi
c0014c55:	56                   	push   esi
c0014c56:	53                   	push   ebx
c0014c57:	31 db                	xor    ebx,ebx
c0014c59:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c5f:	7e 3c                	jle    c0014c9d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c61:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c68:	31 ff                	xor    edi,edi
c0014c6a:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c71:	7e 27                	jle    c0014c9a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c73:	50                   	push   eax
c0014c74:	50                   	push   eax
c0014c75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c79:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c7b:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c82:	50                   	push   eax
c0014c83:	e8 c8 ba fe ff       	call   c0000750 <strcmp>
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	85 c0                	test   eax,eax
c0014c8d:	75 05                	jne    c0014c94 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c8f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c92:	eb 0b                	jmp    c0014c9f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c94:	83 c6 10             	add    esi,0x10
c0014c97:	47                   	inc    edi
c0014c98:	eb d0                	jmp    c0014c6a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c9a:	43                   	inc    ebx
c0014c9b:	eb bc                	jmp    c0014c59 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c9d:	31 c0                	xor    eax,eax
c0014c9f:	5b                   	pop    ebx
c0014ca0:	5e                   	pop    esi
c0014ca1:	5f                   	pop    edi
c0014ca2:	c3                   	ret    

c0014ca3 <Thr::loadKernelSymbolTable(char const*)>:
c0014ca3:	55                   	push   ebp
c0014ca4:	57                   	push   edi
c0014ca5:	56                   	push   esi
c0014ca6:	53                   	push   ebx
c0014ca7:	83 ec 68             	sub    esp,0x68
c0014caa:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014cb0:	68 14 01 00 00       	push   0x114
c0014cb5:	e8 1c 2e ff ff       	call   c0007ad6 <malloc>
c0014cba:	83 c4 0c             	add    esp,0xc
c0014cbd:	89 c3                	mov    ebx,eax
c0014cbf:	56                   	push   esi
c0014cc0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cc4:	50                   	push   eax
c0014cc5:	e8 a2 6e ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0014cca:	5e                   	pop    esi
c0014ccb:	5f                   	pop    edi
c0014ccc:	6a 01                	push   0x1
c0014cce:	53                   	push   ebx
c0014ccf:	e8 b6 6e ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	85 c0                	test   eax,eax
c0014cd9:	74 0a                	je     c0014ce5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cdb:	83 ec 0c             	sub    esp,0xc
c0014cde:	68 b3 28 02 c0       	push   0xc00228b3
c0014ce3:	eb 34                	jmp    c0014d19 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014ce5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	6a 34                	push   0x34
c0014cf2:	e8 df 2d ff ff       	call   c0007ad6 <malloc>
c0014cf7:	59                   	pop    ecx
c0014cf8:	89 c7                	mov    edi,eax
c0014cfa:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014cfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d00:	56                   	push   esi
c0014d01:	57                   	push   edi
c0014d02:	6a 00                	push   0x0
c0014d04:	6a 34                	push   0x34
c0014d06:	53                   	push   ebx
c0014d07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d0a:	83 c4 20             	add    esp,0x20
c0014d0d:	85 c0                	test   eax,eax
c0014d0f:	74 17                	je     c0014d28 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d11:	83 ec 0c             	sub    esp,0xc
c0014d14:	68 ca 28 02 c0       	push   0xc00228ca
c0014d19:	e8 79 c9 ff ff       	call   c0011697 <KePanic(char const*)>
c0014d1e:	83 c4 10             	add    esp,0x10
c0014d21:	31 c0                	xor    eax,eax
c0014d23:	e9 31 02 00 00       	jmp    c0014f59 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d28:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d2e:	75 e1                	jne    c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d30:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d33:	85 c0                	test   eax,eax
c0014d35:	74 da                	je     c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d37:	52                   	push   edx
c0014d38:	31 d2                	xor    edx,edx
c0014d3a:	52                   	push   edx
c0014d3b:	50                   	push   eax
c0014d3c:	53                   	push   ebx
c0014d3d:	e8 06 6f ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014d42:	83 c4 10             	add    esp,0x10
c0014d45:	85 c0                	test   eax,eax
c0014d47:	75 c8                	jne    c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d49:	83 ec 0c             	sub    esp,0xc
c0014d4c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d54:	31 ed                	xor    ebp,ebp
c0014d56:	0f af c2             	imul   eax,edx
c0014d59:	50                   	push   eax
c0014d5a:	e8 77 2d ff ff       	call   c0007ad6 <malloc>
c0014d5f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d65:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d6c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d70:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d74:	0f af c2             	imul   eax,edx
c0014d77:	99                   	cdq    
c0014d78:	52                   	push   edx
c0014d79:	50                   	push   eax
c0014d7a:	53                   	push   ebx
c0014d7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d7e:	83 c4 20             	add    esp,0x20
c0014d81:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d89:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014da1:	0f b7 f5             	movzx  esi,bp
c0014da4:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014da8:	0f 83 a7 00 00 00    	jae    c0014e55 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014dae:	6b f6 28             	imul   esi,esi,0x28
c0014db1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014db5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014db8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dbc:	50                   	push   eax
c0014dbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014dc1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014dc5:	8b 16                	mov    edx,DWORD PTR [esi]
c0014dc7:	6b c0 28             	imul   eax,eax,0x28
c0014dca:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dce:	89 d0                	mov    eax,edx
c0014dd0:	31 d2                	xor    edx,edx
c0014dd2:	52                   	push   edx
c0014dd3:	50                   	push   eax
c0014dd4:	53                   	push   ebx
c0014dd5:	e8 6e 6e ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014dda:	83 c4 0c             	add    esp,0xc
c0014ddd:	6a 20                	push   0x20
c0014ddf:	6a 00                	push   0x0
c0014de1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014de5:	52                   	push   edx
c0014de6:	e8 05 b7 fe ff       	call   c00004f0 <memset>
c0014deb:	58                   	pop    eax
c0014dec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dee:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014df2:	51                   	push   ecx
c0014df3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014df7:	52                   	push   edx
c0014df8:	6a 00                	push   0x0
c0014dfa:	6a 1f                	push   0x1f
c0014dfc:	53                   	push   ebx
c0014dfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e00:	83 c4 18             	add    esp,0x18
c0014e03:	68 e1 28 02 c0       	push   0xc00228e1
c0014e08:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e0c:	52                   	push   edx
c0014e0d:	e8 3e b9 fe ff       	call   c0000750 <strcmp>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	85 c0                	test   eax,eax
c0014e17:	75 0f                	jne    c0014e28 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e19:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e28:	50                   	push   eax
c0014e29:	50                   	push   eax
c0014e2a:	68 e9 28 02 c0       	push   0xc00228e9
c0014e2f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e33:	50                   	push   eax
c0014e34:	e8 17 b9 fe ff       	call   c0000750 <strcmp>
c0014e39:	83 c4 10             	add    esp,0x10
c0014e3c:	85 c0                	test   eax,eax
c0014e3e:	75 0f                	jne    c0014e4f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e40:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e4f:	45                   	inc    ebp
c0014e50:	e9 4c ff ff ff       	jmp    c0014da1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e5a:	75 10                	jne    c0014e6c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e5c:	83 ec 0c             	sub    esp,0xc
c0014e5f:	68 f1 28 02 c0       	push   0xc00228f1
c0014e64:	e8 2e c8 ff ff       	call   c0011697 <KePanic(char const*)>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e71:	75 10                	jne    c0014e83 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e73:	83 ec 0c             	sub    esp,0xc
c0014e76:	68 f1 28 02 c0       	push   0xc00228f1
c0014e7b:	e8 17 c8 ff ff       	call   c0011697 <KePanic(char const*)>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	31 d2                	xor    edx,edx
c0014e85:	50                   	push   eax
c0014e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e8a:	52                   	push   edx
c0014e8b:	50                   	push   eax
c0014e8c:	53                   	push   ebx
c0014e8d:	e8 b6 6d ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014e92:	5a                   	pop    edx
c0014e93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e97:	e8 3a 2c ff ff       	call   c0007ad6 <malloc>
c0014e9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ea0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ea4:	31 c9                	xor    ecx,ecx
c0014ea6:	5e                   	pop    esi
c0014ea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ea9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ead:	55                   	push   ebp
c0014eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eb2:	51                   	push   ecx
c0014eb3:	52                   	push   edx
c0014eb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014eb8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014ebc:	53                   	push   ebx
c0014ebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ec0:	83 c4 14             	add    esp,0x14
c0014ec3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ec7:	e8 0a 2c ff ff       	call   c0007ad6 <malloc>
c0014ecc:	89 c6                	mov    esi,eax
c0014ece:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ed0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ed3:	56                   	push   esi
c0014ed4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014ed8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014edc:	51                   	push   ecx
c0014edd:	52                   	push   edx
c0014ede:	53                   	push   ebx
c0014edf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ee2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ee6:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014eec:	83 c4 1c             	add    esp,0x1c
c0014eef:	c1 e8 04             	shr    eax,0x4
c0014ef2:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014ef9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014efd:	31 d2                	xor    edx,edx
c0014eff:	52                   	push   edx
c0014f00:	50                   	push   eax
c0014f01:	53                   	push   ebx
c0014f02:	e8 41 6d ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0014f07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f09:	31 d2                	xor    edx,edx
c0014f0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f0e:	56                   	push   esi
c0014f0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f13:	52                   	push   edx
c0014f14:	50                   	push   eax
c0014f15:	53                   	push   ebx
c0014f16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f19:	83 c4 14             	add    esp,0x14
c0014f1c:	53                   	push   ebx
c0014f1d:	e8 c6 6c ff ff       	call   c000bbe8 <File::close()>
c0014f22:	5d                   	pop    ebp
c0014f23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f27:	e8 ba 2b ff ff       	call   c0007ae6 <free>
c0014f2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f2f:	e8 b2 2b ff ff       	call   c0007ae6 <free>
c0014f34:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f40:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f47:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f4e:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f54:	83 c4 10             	add    esp,0x10
c0014f57:	b0 01                	mov    al,0x1
c0014f59:	83 c4 5c             	add    esp,0x5c
c0014f5c:	5b                   	pop    ebx
c0014f5d:	5e                   	pop    esi
c0014f5e:	5f                   	pop    edi
c0014f5f:	5d                   	pop    ebp
c0014f60:	c3                   	ret    

c0014f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f61:	55                   	push   ebp
c0014f62:	57                   	push   edi
c0014f63:	56                   	push   esi
c0014f64:	53                   	push   ebx
c0014f65:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f6b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f72:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014f78:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014f7c:	68 14 01 00 00       	push   0x114
c0014f81:	e8 50 2b ff ff       	call   c0007ad6 <malloc>
c0014f86:	83 c4 0c             	add    esp,0xc
c0014f89:	89 c5                	mov    ebp,eax
c0014f8b:	53                   	push   ebx
c0014f8c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f93:	50                   	push   eax
c0014f94:	e8 d3 6b ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0014f99:	5e                   	pop    esi
c0014f9a:	5f                   	pop    edi
c0014f9b:	6a 01                	push   0x1
c0014f9d:	55                   	push   ebp
c0014f9e:	e8 e7 6b ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	85 c0                	test   eax,eax
c0014fa8:	0f 85 aa 06 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fae:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	6a 34                	push   0x34
c0014fbb:	e8 16 2b ff ff       	call   c0007ad6 <malloc>
c0014fc0:	5b                   	pop    ebx
c0014fc1:	89 c7                	mov    edi,eax
c0014fc3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014fc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fca:	53                   	push   ebx
c0014fcb:	57                   	push   edi
c0014fcc:	6a 00                	push   0x0
c0014fce:	6a 34                	push   0x34
c0014fd0:	55                   	push   ebp
c0014fd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fd4:	83 c4 20             	add    esp,0x20
c0014fd7:	85 c0                	test   eax,eax
c0014fd9:	0f 85 79 06 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fdf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014fe5:	0f 85 6d 06 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014feb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014fee:	85 c0                	test   eax,eax
c0014ff0:	0f 84 62 06 00 00    	je     c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ff6:	31 d2                	xor    edx,edx
c0014ff8:	51                   	push   ecx
c0014ff9:	52                   	push   edx
c0014ffa:	50                   	push   eax
c0014ffb:	55                   	push   ebp
c0014ffc:	e8 47 6c ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0015001:	83 c4 10             	add    esp,0x10
c0015004:	85 c0                	test   eax,eax
c0015006:	0f 85 4c 06 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015012:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015016:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001501a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001501e:	0f af c2             	imul   eax,edx
c0015021:	50                   	push   eax
c0015022:	e8 af 2a ff ff       	call   c0007ad6 <malloc>
c0015027:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015035:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015039:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001503d:	0f af c2             	imul   eax,edx
c0015040:	99                   	cdq    
c0015041:	52                   	push   edx
c0015042:	50                   	push   eax
c0015043:	55                   	push   ebp
c0015044:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015047:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001504a:	83 c4 20             	add    esp,0x20
c001504d:	85 c0                	test   eax,eax
c001504f:	0f 84 03 06 00 00    	je     c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015055:	52                   	push   edx
c0015056:	31 d2                	xor    edx,edx
c0015058:	52                   	push   edx
c0015059:	50                   	push   eax
c001505a:	55                   	push   ebp
c001505b:	e8 e8 6b ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	0f 85 ed 05 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001506b:	83 ec 0c             	sub    esp,0xc
c001506e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015072:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015076:	31 f6                	xor    esi,esi
c0015078:	0f af c2             	imul   eax,edx
c001507b:	50                   	push   eax
c001507c:	e8 55 2a ff ff       	call   c0007ad6 <malloc>
c0015081:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015084:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001508b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001508f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015093:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015097:	0f af c2             	imul   eax,edx
c001509a:	99                   	cdq    
c001509b:	52                   	push   edx
c001509c:	50                   	push   eax
c001509d:	55                   	push   ebp
c001509e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150a1:	83 c4 20             	add    esp,0x20
c00150a4:	0f b7 de             	movzx  ebx,si
c00150a7:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00150ab:	0f 83 87 00 00 00    	jae    c0015138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00150b1:	c1 e3 05             	shl    ebx,0x5
c00150b4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00150b8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00150bb:	75 75                	jne    c0015132 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00150bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00150c0:	31 d2                	xor    edx,edx
c00150c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00150c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150cd:	50                   	push   eax
c00150ce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00150d1:	52                   	push   edx
c00150d2:	50                   	push   eax
c00150d3:	55                   	push   ebp
c00150d4:	e8 6f 6b ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	85 c0                	test   eax,eax
c00150de:	0f 85 74 05 00 00    	jne    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150e4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150eb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150ee:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00150f2:	31 d2                	xor    edx,edx
c00150f4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00150f8:	83 ec 0c             	sub    esp,0xc
c00150fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015106:	50                   	push   eax
c0015107:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001510b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001510f:	52                   	push   edx
c0015110:	50                   	push   eax
c0015111:	55                   	push   ebp
c0015112:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015115:	83 c4 1c             	add    esp,0x1c
c0015118:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001511b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001511e:	50                   	push   eax
c001511f:	6a 00                	push   0x0
c0015121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015125:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015129:	50                   	push   eax
c001512a:	e8 c1 b3 fe ff       	call   c00004f0 <memset>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	46                   	inc    esi
c0015133:	e9 6c ff ff ff       	jmp    c00150a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015138:	53                   	push   ebx
c0015139:	31 db                	xor    ebx,ebx
c001513b:	68 00 01 00 00       	push   0x100
c0015140:	6a 00                	push   0x0
c0015142:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015146:	50                   	push   eax
c0015147:	e8 a4 b3 fe ff       	call   c00004f0 <memset>
c001514c:	83 c4 0c             	add    esp,0xc
c001514f:	68 00 01 00 00       	push   0x100
c0015154:	6a 00                	push   0x0
c0015156:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001515d:	50                   	push   eax
c001515e:	e8 8d b3 fe ff       	call   c00004f0 <memset>
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001516e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015176:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001517e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015186:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001518e:	0f b7 f3             	movzx  esi,bx
c0015191:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015195:	0f 83 2d 01 00 00    	jae    c00152c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001519b:	6b f6 28             	imul   esi,esi,0x28
c001519e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00151a2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00151a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151a9:	52                   	push   edx
c00151aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151ae:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00151b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00151b4:	6b d2 28             	imul   edx,edx,0x28
c00151b7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00151bb:	31 d2                	xor    edx,edx
c00151bd:	52                   	push   edx
c00151be:	50                   	push   eax
c00151bf:	55                   	push   ebp
c00151c0:	e8 83 6a ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c00151c5:	83 c4 0c             	add    esp,0xc
c00151c8:	6a 20                	push   0x20
c00151ca:	6a 00                	push   0x0
c00151cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151d3:	51                   	push   ecx
c00151d4:	e8 17 b3 fe ff       	call   c00004f0 <memset>
c00151d9:	59                   	pop    ecx
c00151da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151e1:	52                   	push   edx
c00151e2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151e9:	51                   	push   ecx
c00151ea:	6a 00                	push   0x0
c00151ec:	6a 1f                	push   0x1f
c00151ee:	55                   	push   ebp
c00151ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151f2:	83 c4 1c             	add    esp,0x1c
c00151f5:	6a 09                	push   0x9
c00151f7:	68 0b 29 02 c0       	push   0xc002290b
c00151fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015203:	51                   	push   ecx
c0015204:	e8 77 b1 fe ff       	call   c0000380 <memcmp>
c0015209:	83 c4 10             	add    esp,0x10
c001520c:	85 c0                	test   eax,eax
c001520e:	75 21                	jne    c0015231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015218:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001521c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015220:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015223:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001522a:	89 d0                	mov    eax,edx
c001522c:	40                   	inc    eax
c001522d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015231:	50                   	push   eax
c0015232:	6a 09                	push   0x9
c0015234:	68 15 29 02 c0       	push   0xc0022915
c0015239:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015240:	50                   	push   eax
c0015241:	e8 3a b1 fe ff       	call   c0000380 <memcmp>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	85 c0                	test   eax,eax
c001524b:	75 21                	jne    c001526e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001524d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015251:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015255:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015259:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001525d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015260:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015267:	89 d0                	mov    eax,edx
c0015269:	40                   	inc    eax
c001526a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001526e:	50                   	push   eax
c001526f:	50                   	push   eax
c0015270:	68 e1 28 02 c0       	push   0xc00228e1
c0015275:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001527c:	50                   	push   eax
c001527d:	e8 ce b4 fe ff       	call   c0000750 <strcmp>
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	85 c0                	test   eax,eax
c0015287:	75 0f                	jne    c0015298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015289:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001528c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015294:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015298:	50                   	push   eax
c0015299:	50                   	push   eax
c001529a:	68 e9 28 02 c0       	push   0xc00228e9
c001529f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152a6:	50                   	push   eax
c00152a7:	e8 a4 b4 fe ff       	call   c0000750 <strcmp>
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	85 c0                	test   eax,eax
c00152b1:	75 0f                	jne    c00152c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00152b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152c2:	43                   	inc    ebx
c00152c3:	e9 c6 fe ff ff       	jmp    c001518e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00152c8:	31 d2                	xor    edx,edx
c00152ca:	50                   	push   eax
c00152cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152cf:	52                   	push   edx
c00152d0:	50                   	push   eax
c00152d1:	55                   	push   ebp
c00152d2:	e8 71 69 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c00152d7:	58                   	pop    eax
c00152d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00152dc:	e8 f5 27 ff ff       	call   c0007ad6 <malloc>
c00152e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00152e8:	31 d2                	xor    edx,edx
c00152ea:	58                   	pop    eax
c00152eb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00152ef:	53                   	push   ebx
c00152f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00152f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152f8:	52                   	push   edx
c00152f9:	50                   	push   eax
c00152fa:	55                   	push   ebp
c00152fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152fe:	83 c4 14             	add    esp,0x14
c0015301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015305:	e8 cc 27 ff ff       	call   c0007ad6 <malloc>
c001530a:	31 d2                	xor    edx,edx
c001530c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015310:	83 c4 0c             	add    esp,0xc
c0015313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015317:	52                   	push   edx
c0015318:	50                   	push   eax
c0015319:	55                   	push   ebp
c001531a:	e8 29 69 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c001531f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015322:	31 d2                	xor    edx,edx
c0015324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001532b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001532f:	52                   	push   edx
c0015330:	50                   	push   eax
c0015331:	55                   	push   ebp
c0015332:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015335:	83 c4 20             	add    esp,0x20
c0015338:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001533d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015345:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015349:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001534d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015351:	0f 84 05 03 00 00    	je     c001565c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015357:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001535e:	31 d2                	xor    edx,edx
c0015360:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015364:	c1 e8 03             	shr    eax,0x3
c0015367:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001536b:	51                   	push   ecx
c001536c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015370:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015374:	52                   	push   edx
c0015375:	50                   	push   eax
c0015376:	55                   	push   ebp
c0015377:	e8 cc 68 ff ff       	call   c000bc48 <File::seek(unsigned long long)>
c001537c:	5b                   	pop    ebx
c001537d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015381:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015388:	e8 49 27 ff ff       	call   c0007ad6 <malloc>
c001538d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015390:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015394:	31 d2                	xor    edx,edx
c0015396:	5e                   	pop    esi
c0015397:	8d 44 24 58          	lea    eax,[esp+0x58]
c001539b:	50                   	push   eax
c001539c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00153ab:	52                   	push   edx
c00153ac:	50                   	push   eax
c00153ad:	55                   	push   ebp
c00153ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153b1:	83 c4 20             	add    esp,0x20
c00153b4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00153bc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00153c0:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00153c4:	0f 8d 76 02 00 00    	jge    c0015640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00153ca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00153ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153d2:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00153d7:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00153da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153e2:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00153e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00153ea:	c1 e8 08             	shr    eax,0x8
c00153ed:	89 c6                	mov    esi,eax
c00153ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00153f3:	c1 e6 04             	shl    esi,0x4
c00153f6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00153fa:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00153fd:	85 db                	test   ebx,ebx
c00153ff:	0f 85 b3 00 00 00    	jne    c00154b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015405:	83 ec 0c             	sub    esp,0xc
c0015408:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001540c:	03 06                	add    eax,DWORD PTR [esi]
c001540e:	50                   	push   eax
c001540f:	e8 40 f8 ff ff       	call   c0014c54 <Thr::getAddressOfKernelSymbol(char const*)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	89 c3                	mov    ebx,eax
c0015419:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001541e:	85 c0                	test   eax,eax
c0015420:	0f 85 92 00 00 00    	jne    c00154b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015426:	83 ec 0c             	sub    esp,0xc
c0015429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001542d:	03 06                	add    eax,DWORD PTR [esi]
c001542f:	50                   	push   eax
c0015430:	e8 4f c4 ff ff       	call   c0011884 <KeResolveCompatibilitySymbol(char*)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	89 c3                	mov    ebx,eax
c001543a:	85 c0                	test   eax,eax
c001543c:	75 7a                	jne    c00154b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001543e:	51                   	push   ecx
c001543f:	51                   	push   ecx
c0015440:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015444:	03 06                	add    eax,DWORD PTR [esi]
c0015446:	50                   	push   eax
c0015447:	68 1f 29 02 c0       	push   0xc002291f
c001544c:	e8 14 55 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0015451:	58                   	pop    eax
c0015452:	5a                   	pop    edx
c0015453:	68 39 29 02 c0       	push   0xc0022939
c0015458:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001545f:	50                   	push   eax
c0015460:	e8 db b1 fe ff       	call   c0000640 <strcpy>
c0015465:	59                   	pop    ecx
c0015466:	58                   	pop    eax
c0015467:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001546b:	03 06                	add    eax,DWORD PTR [esi]
c001546d:	50                   	push   eax
c001546e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015475:	50                   	push   eax
c0015476:	e8 c5 b3 fe ff       	call   c0000840 <strcat>
c001547b:	58                   	pop    eax
c001547c:	5a                   	pop    edx
c001547d:	68 cf 29 02 c0       	push   0xc00229cf
c0015482:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015489:	50                   	push   eax
c001548a:	e8 b1 b3 fe ff       	call   c0000840 <strcat>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015497:	0f 84 5d 01 00 00    	je     c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001549d:	83 ec 0c             	sub    esp,0xc
c00154a0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154a7:	50                   	push   eax
c00154a8:	e8 ea c1 ff ff       	call   c0011697 <KePanic(char const*)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00154b4:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00154b8:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00154bd:	83 f8 01             	cmp    eax,0x1
c00154c0:	0f 85 8f 00 00 00    	jne    c0015555 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00154c6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00154cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00154d1:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00154d5:	01 ce                	add    esi,ecx
c00154d7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154df:	0f 94 c0             	sete   al
c00154e2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00154ea:	0f 94 c2             	sete   dl
c00154ed:	09 c2                	or     edx,eax
c00154ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00154f1:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154f6:	0f b6 d2             	movzx  edx,dl
c00154f9:	74 41                	je     c001553c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00154fb:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00154fe:	85 d2                	test   edx,edx
c0015500:	75 15                	jne    c0015517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015502:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015506:	66 83 f8 0c          	cmp    ax,0xc
c001550a:	76 05                	jbe    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001550c:	b8 0c 00 00 00       	mov    eax,0xc
c0015511:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015515:	76 37                	jbe    c001554e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015517:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001551b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015520:	0f 84 d4 00 00 00    	je     c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	68 50 29 02 c0       	push   0xc0022950
c001552e:	e8 64 c1 ff ff       	call   c0011697 <KePanic(char const*)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001553a:	eb 12                	jmp    c001554e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001553c:	01 c1                	add    ecx,eax
c001553e:	85 d2                	test   edx,edx
c0015540:	75 0c                	jne    c001554e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015542:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015546:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001554a:	77 02                	ja     c001554e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001554c:	01 d9                	add    ecx,ebx
c001554e:	89 0e                	mov    DWORD PTR [esi],ecx
c0015550:	e9 e2 00 00 00       	jmp    c0015637 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015555:	83 f8 02             	cmp    eax,0x2
c0015558:	75 77                	jne    c00155d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001555a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015561:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015565:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015569:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015571:	74 21                	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015573:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001557b:	74 17                	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001557d:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015581:	b8 0a 00 00 00       	mov    eax,0xa
c0015586:	83 fa 0e             	cmp    edx,0xe
c0015589:	77 03                	ja     c001558e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001558b:	8d 42 fc             	lea    eax,[edx-0x4]
c001558e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015592:	76 17                	jbe    c00155ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015594:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015599:	74 5f                	je     c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001559b:	83 ec 0c             	sub    esp,0xc
c001559e:	68 6c 29 02 c0       	push   0xc002296c
c00155a3:	e8 ef c0 ff ff       	call   c0011697 <KePanic(char const*)>
c00155a8:	83 c4 10             	add    esp,0x10
c00155ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00155ad:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00155b2:	74 13                	je     c00155c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00155b4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155b8:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00155bf:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00155c3:	01 d0                	add    eax,edx
c00155c5:	eb 04                	jmp    c00155cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00155c7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00155cb:	01 c3                	add    ebx,eax
c00155cd:	89 1e                	mov    DWORD PTR [esi],ebx
c00155cf:	eb 66                	jmp    c0015637 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155d1:	52                   	push   edx
c00155d2:	52                   	push   edx
c00155d3:	50                   	push   eax
c00155d4:	68 88 29 02 c0       	push   0xc0022988
c00155d9:	e8 87 53 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00155de:	83 c4 10             	add    esp,0x10
c00155e1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155e6:	74 12                	je     c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155e8:	83 ec 0c             	sub    esp,0xc
c00155eb:	68 93 29 02 c0       	push   0xc0022993
c00155f0:	e8 a2 c0 ff ff       	call   c0011697 <KePanic(char const*)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	eb 3d                	jmp    c0015637 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	55                   	push   ebp
c00155fe:	e8 e5 65 ff ff       	call   c000bbe8 <File::close()>
c0015603:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015606:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015609:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001560c:	59                   	pop    ecx
c001560d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015611:	e8 d0 24 ff ff       	call   c0007ae6 <free>
c0015616:	5b                   	pop    ebx
c0015617:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001561b:	e8 c6 24 ff ff       	call   c0007ae6 <free>
c0015620:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015623:	e8 be 24 ff ff       	call   c0007ae6 <free>
c0015628:	5e                   	pop    esi
c0015629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001562d:	e8 b4 24 ff ff       	call   c0007ae6 <free>
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	eb 21                	jmp    c0015658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015637:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001563b:	e9 7c fd ff ff       	jmp    c00153bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015647:	e8 9a 24 ff ff       	call   c0007ae6 <free>
c001564c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	e9 f1 fc ff ff       	jmp    c0015349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015658:	31 c0                	xor    eax,eax
c001565a:	eb 33                	jmp    c001568f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	55                   	push   ebp
c0015660:	e8 83 65 ff ff       	call   c000bbe8 <File::close()>
c0015665:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015668:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001566b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001566e:	58                   	pop    eax
c001566f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015673:	e8 6e 24 ff ff       	call   c0007ae6 <free>
c0015678:	89 3c 24             	mov    DWORD PTR [esp],edi
c001567b:	e8 66 24 ff ff       	call   c0007ae6 <free>
c0015680:	5a                   	pop    edx
c0015681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015685:	e8 5c 24 ff ff       	call   c0007ae6 <free>
c001568a:	83 c4 10             	add    esp,0x10
c001568d:	b0 01                	mov    al,0x1
c001568f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015695:	5b                   	pop    ebx
c0015696:	5e                   	pop    esi
c0015697:	5f                   	pop    edi
c0015698:	5d                   	pop    ebp
c0015699:	c3                   	ret    

c001569a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001569a:	56                   	push   esi
c001569b:	31 d2                	xor    edx,edx
c001569d:	53                   	push   ebx
c001569e:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156a8:	39 d3                	cmp    ebx,edx
c00156aa:	7e 1b                	jle    c00156c7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00156ac:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00156b3:	39 c8                	cmp    eax,ecx
c00156b5:	77 0d                	ja     c00156c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156b7:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156be:	01 c6                	add    esi,eax
c00156c0:	39 ce                	cmp    esi,ecx
c00156c2:	77 05                	ja     c00156c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156c4:	42                   	inc    edx
c00156c5:	eb e1                	jmp    c00156a8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156c7:	31 c0                	xor    eax,eax
c00156c9:	5b                   	pop    ebx
c00156ca:	5e                   	pop    esi
c00156cb:	c3                   	ret    

c00156cc <Thr::getDriverNameFromAddress(unsigned long)>:
c00156cc:	53                   	push   ebx
c00156cd:	31 c0                	xor    eax,eax
c00156cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156d3:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156d9:	39 c3                	cmp    ebx,eax
c00156db:	7e 22                	jle    c00156ff <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156dd:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00156e4:	39 ca                	cmp    edx,ecx
c00156e6:	77 14                	ja     c00156fc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156e8:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156ef:	39 ca                	cmp    edx,ecx
c00156f1:	76 09                	jbe    c00156fc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156f3:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156fa:	eb 05                	jmp    c0015701 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156fc:	40                   	inc    eax
c00156fd:	eb da                	jmp    c00156d9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156ff:	31 c0                	xor    eax,eax
c0015701:	5b                   	pop    ebx
c0015702:	c3                   	ret    

c0015703 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015703:	53                   	push   ebx
c0015704:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015708:	53                   	push   ebx
c0015709:	e8 8c ff ff ff       	call   c001569a <Thr::getDriverBaseFromAddress(unsigned long)>
c001570e:	5a                   	pop    edx
c001570f:	31 d2                	xor    edx,edx
c0015711:	85 c0                	test   eax,eax
c0015713:	74 04                	je     c0015719 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015715:	89 da                	mov    edx,ebx
c0015717:	29 c2                	sub    edx,eax
c0015719:	89 d0                	mov    eax,edx
c001571b:	5b                   	pop    ebx
c001571c:	c3                   	ret    

c001571d <Thr::loadDLL(char const*, bool)>:
c001571d:	55                   	push   ebp
c001571e:	57                   	push   edi
c001571f:	56                   	push   esi
c0015720:	53                   	push   ebx
c0015721:	81 ec 34 01 00 00    	sub    esp,0x134
c0015727:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001572e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015735:	56                   	push   esi
c0015736:	68 ab 29 02 c0       	push   0xc00229ab
c001573b:	e8 25 52 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0015740:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015747:	e8 8a 23 ff ff       	call   c0007ad6 <malloc>
c001574c:	83 c4 0c             	add    esp,0xc
c001574f:	89 c3                	mov    ebx,eax
c0015751:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015757:	56                   	push   esi
c0015758:	50                   	push   eax
c0015759:	e8 0e 64 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	85 db                	test   ebx,ebx
c0015763:	75 3c                	jne    c00157a1 <Thr::loadDLL(char const*, bool)+0x84>
c0015765:	89 f8                	mov    eax,edi
c0015767:	84 c0                	test   al,al
c0015769:	0f 84 d2 01 00 00    	je     c0015941 <Thr::loadDLL(char const*, bool)+0x224>
c001576f:	55                   	push   ebp
c0015770:	55                   	push   ebp
c0015771:	68 bc 29 02 c0       	push   0xc00229bc
c0015776:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001577a:	55                   	push   ebp
c001577b:	e8 c0 ae fe ff       	call   c0000640 <strcpy>
c0015780:	58                   	pop    eax
c0015781:	5a                   	pop    edx
c0015782:	56                   	push   esi
c0015783:	55                   	push   ebp
c0015784:	e8 b7 b0 fe ff       	call   c0000840 <strcat>
c0015789:	59                   	pop    ecx
c001578a:	58                   	pop    eax
c001578b:	68 cf 29 02 c0       	push   0xc00229cf
c0015790:	55                   	push   ebp
c0015791:	e8 aa b0 fe ff       	call   c0000840 <strcat>
c0015796:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015799:	e8 f9 be ff ff       	call   c0011697 <KePanic(char const*)>
c001579e:	83 c4 10             	add    esp,0x10
c00157a1:	51                   	push   ecx
c00157a2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00157a6:	50                   	push   eax
c00157a7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00157ab:	50                   	push   eax
c00157ac:	53                   	push   ebx
c00157ad:	e8 da 66 ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	85 db                	test   ebx,ebx
c00157b7:	74 0c                	je     c00157c5 <Thr::loadDLL(char const*, bool)+0xa8>
c00157b9:	83 ec 0c             	sub    esp,0xc
c00157bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157be:	53                   	push   ebx
c00157bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157c2:	83 c4 10             	add    esp,0x10
c00157c5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157ca:	75 0a                	jne    c00157d6 <Thr::loadDLL(char const*, bool)+0xb9>
c00157cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157d0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157d4:	75 3c                	jne    c0015812 <Thr::loadDLL(char const*, bool)+0xf5>
c00157d6:	89 f8                	mov    eax,edi
c00157d8:	84 c0                	test   al,al
c00157da:	0f 84 49 01 00 00    	je     c0015929 <Thr::loadDLL(char const*, bool)+0x20c>
c00157e0:	51                   	push   ecx
c00157e1:	51                   	push   ecx
c00157e2:	68 bc 29 02 c0       	push   0xc00229bc
c00157e7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157eb:	53                   	push   ebx
c00157ec:	e8 4f ae fe ff       	call   c0000640 <strcpy>
c00157f1:	5d                   	pop    ebp
c00157f2:	58                   	pop    eax
c00157f3:	56                   	push   esi
c00157f4:	53                   	push   ebx
c00157f5:	e8 46 b0 fe ff       	call   c0000840 <strcat>
c00157fa:	58                   	pop    eax
c00157fb:	5a                   	pop    edx
c00157fc:	68 cf 29 02 c0       	push   0xc00229cf
c0015801:	53                   	push   ebx
c0015802:	e8 39 b0 fe ff       	call   c0000840 <strcat>
c0015807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001580a:	e8 88 be ff ff       	call   c0011697 <KePanic(char const*)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	52                   	push   edx
c0015813:	6a 03                	push   0x3
c0015815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001581d:	05 ff 0f 00 00       	add    eax,0xfff
c0015822:	83 d2 00             	adc    edx,0x0
c0015825:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015829:	50                   	push   eax
c001582a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015830:	e8 0f 46 ff ff       	call   c0009e44 <VAS::allocatePages(int, int)>
c0015835:	59                   	pop    ecx
c0015836:	89 c3                	mov    ebx,eax
c0015838:	5d                   	pop    ebp
c0015839:	50                   	push   eax
c001583a:	68 9e 0e 02 c0       	push   0xc0020e9e
c001583f:	e8 21 51 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0015844:	89 34 24             	mov    DWORD PTR [esp],esi
c0015847:	e8 24 ad fe ff       	call   c0000570 <strlen>
c001584c:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015852:	40                   	inc    eax
c0015853:	89 04 24             	mov    DWORD PTR [esp],eax
c0015856:	e8 7b 22 ff ff       	call   c0007ad6 <malloc>
c001585b:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015862:	58                   	pop    eax
c0015863:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015868:	5a                   	pop    edx
c0015869:	56                   	push   esi
c001586a:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015871:	e8 ca ad fe ff       	call   c0000640 <strcpy>
c0015876:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001587b:	8d 50 01             	lea    edx,[eax+0x1]
c001587e:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015885:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001588b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001588f:	83 c4 0c             	add    esp,0xc
c0015892:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015899:	6a 01                	push   0x1
c001589b:	53                   	push   ebx
c001589c:	56                   	push   esi
c001589d:	e8 bf f6 ff ff       	call   c0014f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	0f b6 c0             	movzx  eax,al
c00158a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158ac:	85 c0                	test   eax,eax
c00158ae:	0f 85 89 00 00 00    	jne    c001593d <Thr::loadDLL(char const*, bool)+0x220>
c00158b4:	89 f8                	mov    eax,edi
c00158b6:	84 c0                	test   al,al
c00158b8:	74 73                	je     c001592d <Thr::loadDLL(char const*, bool)+0x210>
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	68 d1 29 02 c0       	push   0xc00229d1
c00158c2:	e8 d0 bd ff ff       	call   c0011697 <KePanic(char const*)>
c00158c7:	83 c4 10             	add    esp,0x10
c00158ca:	eb 61                	jmp    c001592d <Thr::loadDLL(char const*, bool)+0x210>
c00158cc:	50                   	push   eax
c00158cd:	50                   	push   eax
c00158ce:	89 e8                	mov    eax,ebp
c00158d0:	c1 e0 0c             	shl    eax,0xc
c00158d3:	01 d8                	add    eax,ebx
c00158d5:	50                   	push   eax
c00158d6:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158dc:	e8 4b 40 ff ff       	call   c000992c <VAS::getPageTableEntry(unsigned long)>
c00158e1:	83 c4 10             	add    esp,0x10
c00158e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e6:	a8 60                	test   al,0x60
c00158e8:	75 11                	jne    c00158fb <Thr::loadDLL(char const*, bool)+0x1de>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158f2:	50                   	push   eax
c00158f3:	e8 7e 24 ff ff       	call   c0007d76 <Phys::freePage(unsigned long)>
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	45                   	inc    ebp
c00158fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015900:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015904:	05 ff 0f 00 00       	add    eax,0xfff
c0015909:	bf 00 00 00 00       	mov    edi,0x0
c001590e:	83 d2 00             	adc    edx,0x0
c0015911:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015915:	c1 ea 0c             	shr    edx,0xc
c0015918:	39 c5                	cmp    ebp,eax
c001591a:	89 d1                	mov    ecx,edx
c001591c:	89 f8                	mov    eax,edi
c001591e:	19 c8                	sbb    eax,ecx
c0015920:	72 aa                	jb     c00158cc <Thr::loadDLL(char const*, bool)+0x1af>
c0015922:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015927:	75 18                	jne    c0015941 <Thr::loadDLL(char const*, bool)+0x224>
c0015929:	31 db                	xor    ebx,ebx
c001592b:	eb 14                	jmp    c0015941 <Thr::loadDLL(char const*, bool)+0x224>
c001592d:	83 ec 0c             	sub    esp,0xc
c0015930:	68 f0 29 02 c0       	push   0xc00229f0
c0015935:	e8 5d bd ff ff       	call   c0011697 <KePanic(char const*)>
c001593a:	83 c4 10             	add    esp,0x10
c001593d:	31 ed                	xor    ebp,ebp
c001593f:	eb bb                	jmp    c00158fc <Thr::loadDLL(char const*, bool)+0x1df>
c0015941:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015947:	89 d8                	mov    eax,ebx
c0015949:	5b                   	pop    ebx
c001594a:	5e                   	pop    esi
c001594b:	5f                   	pop    edi
c001594c:	5d                   	pop    ebp
c001594d:	c3                   	ret    

c001594e <Thr::executeDLL(unsigned long, void*)>:
c001594e:	56                   	push   esi
c001594f:	53                   	push   ebx
c0015950:	52                   	push   edx
c0015951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015959:	85 db                	test   ebx,ebx
c001595b:	75 10                	jne    c001596d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	68 0c 2a 02 c0       	push   0xc0022a0c
c0015965:	e8 2d bd ff ff       	call   c0011697 <KePanic(char const*)>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	50                   	push   eax
c001596e:	50                   	push   eax
c001596f:	53                   	push   ebx
c0015970:	68 36 2a 02 c0       	push   0xc0022a36
c0015975:	e8 eb 4f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001597a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001597e:	89 d8                	mov    eax,ebx
c0015980:	83 c4 14             	add    esp,0x14
c0015983:	5b                   	pop    ebx
c0015984:	5e                   	pop    esi
c0015985:	ff e0                	jmp    eax
c0015987:	90                   	nop

c0015988 <userModeEntryPoint(void*)>:
c0015988:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001598d:	83 e8 01             	sub    eax,0x1
c0015990:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015995:	75 01                	jne    c0015998 <userModeEntryPoint(void*)+0x10>
c0015997:	fb                   	sti    
c0015998:	fb                   	sti    
c0015999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001599e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159a1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00159a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159ab:	e9 8f a8 fe ff       	jmp    c000023f <goToUsermode>

c00159b0 <changeTSS>:
c00159b0:	83 ec 14             	sub    esp,0x14
c00159b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159b8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159bb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159c0:	c1 e2 15             	shl    edx,0x15
c00159c3:	29 d0                	sub    eax,edx
c00159c5:	50                   	push   eax
c00159c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159d1:	05 7c 11 00 00       	add    eax,0x117c
c00159d6:	50                   	push   eax
c00159d7:	e8 98 35 ff ff       	call   c0008f74 <TSS::setESP(unsigned long)>
c00159dc:	83 c4 1c             	add    esp,0x1c
c00159df:	c3                   	ret    

c00159e0 <switchToThread(ThreadControlBlock*)>:
c00159e0:	57                   	push   edi
c00159e1:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159e7:	56                   	push   esi
c00159e8:	85 c9                	test   ecx,ecx
c00159ea:	53                   	push   ebx
c00159eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159ef:	0f 85 8b 00 00 00    	jne    c0015a80 <switchToThread(ThreadControlBlock*)+0xa0>
c00159f5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159f9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159ff:	74 7b                	je     c0015a7c <switchToThread(ThreadControlBlock*)+0x9c>
c0015a01:	b8 00 04 00 00       	mov    eax,0x400
c0015a06:	29 d0                	sub    eax,edx
c0015a08:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a0b:	d1 f8                	sar    eax,1
c0015a0d:	01 d0                	add    eax,edx
c0015a0f:	90                   	nop
c0015a10:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a13:	e8 1e 28 00 00       	call   c0018236 <HalQueryPerformanceCounter()>
c0015a18:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a1d:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a23:	89 c6                	mov    esi,eax
c0015a25:	89 d7                	mov    edi,edx
c0015a27:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a2d:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a32:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a38:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a3e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a4a:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a50:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a53:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a56:	01 c6                	add    esi,eax
c0015a58:	11 d7                	adc    edi,edx
c0015a5a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a5d:	83 ec 0c             	sub    esp,0xc
c0015a60:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a63:	53                   	push   ebx
c0015a64:	e8 0e a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a69:	0f 20 c0             	mov    eax,cr0
c0015a6c:	83 c8 08             	or     eax,0x8
c0015a6f:	0f 22 c0             	mov    cr0,eax
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	5b                   	pop    ebx
c0015a76:	5e                   	pop    esi
c0015a77:	5f                   	pop    edi
c0015a78:	c3                   	ret    
c0015a79:	8d 76 00             	lea    esi,[esi+0x0]
c0015a7c:	31 c0                	xor    eax,eax
c0015a7e:	eb 90                	jmp    c0015a10 <switchToThread(ThreadControlBlock*)+0x30>
c0015a80:	5b                   	pop    ebx
c0015a81:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a8b:	5e                   	pop    esi
c0015a8c:	5f                   	pop    edi
c0015a8d:	c3                   	ret    
c0015a8e:	66 90                	xchg   ax,ax

c0015a90 <Process::addArgs(char**)>:
c0015a90:	57                   	push   edi
c0015a91:	56                   	push   esi
c0015a92:	53                   	push   ebx
c0015a93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a97:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a9b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015aa5:	85 ff                	test   edi,edi
c0015aa7:	74 4f                	je     c0015af8 <Process::addArgs(char**)+0x68>
c0015aa9:	8b 07                	mov    eax,DWORD PTR [edi]
c0015aab:	85 c0                	test   eax,eax
c0015aad:	74 49                	je     c0015af8 <Process::addArgs(char**)+0x68>
c0015aaf:	31 db                	xor    ebx,ebx
c0015ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ab4:	83 ec 0c             	sub    esp,0xc
c0015ab7:	50                   	push   eax
c0015ab8:	e8 b3 aa fe ff       	call   c0000570 <strlen>
c0015abd:	83 c0 01             	add    eax,0x1
c0015ac0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ac3:	e8 0e 20 ff ff       	call   c0007ad6 <malloc>
c0015ac8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015acf:	5a                   	pop    edx
c0015ad0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015ad3:	59                   	pop    ecx
c0015ad4:	83 c3 01             	add    ebx,0x1
c0015ad7:	52                   	push   edx
c0015ad8:	50                   	push   eax
c0015ad9:	e8 62 ab fe ff       	call   c0000640 <strcpy>
c0015ade:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	83 c1 01             	add    ecx,0x1
c0015aea:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015af0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015af3:	85 c0                	test   eax,eax
c0015af5:	75 bd                	jne    c0015ab4 <Process::addArgs(char**)+0x24>
c0015af7:	90                   	nop
c0015af8:	5b                   	pop    ebx
c0015af9:	5e                   	pop    esi
c0015afa:	5f                   	pop    edi
c0015afb:	c3                   	ret    

c0015afc <Process::Process(char const*, Process*, char**)>:
c0015afc:	56                   	push   esi
c0015afd:	53                   	push   ebx
c0015afe:	83 ec 14             	sub    esp,0x14
c0015b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b05:	05 0c 02 00 00       	add    eax,0x20c
c0015b0a:	bb 07 00 00 00       	mov    ebx,0x7
c0015b0f:	89 c6                	mov    esi,eax
c0015b11:	8d 76 00             	lea    esi,[esi+0x0]
c0015b14:	85 db                	test   ebx,ebx
c0015b16:	78 14                	js     c0015b2c <Process::Process(char const*, Process*, char**)+0x30>
c0015b18:	83 ec 0c             	sub    esp,0xc
c0015b1b:	56                   	push   esi
c0015b1c:	e8 e7 a5 00 00       	call   c0020108 <ThreadControlBlock::ThreadControlBlock()>
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	83 c6 5f             	add    esi,0x5f
c0015b27:	83 eb 01             	sub    ebx,0x1
c0015b2a:	eb e8                	jmp    c0015b14 <Process::Process(char const*, Process*, char**)+0x18>
c0015b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b30:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b49:	e8 3e b9 ff ff       	call   c001148c <KeNewProcessEnv(Process*)>
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	89 c2                	mov    edx,eax
c0015b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b57:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b61:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b6a:	a1 60 40 02 c0       	mov    eax,ds:0xc0024060
c0015b6f:	8d 50 01             	lea    edx,[eax+0x1]
c0015b72:	89 15 60 40 02 c0    	mov    DWORD PTR ds:0xc0024060,edx
c0015b78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b7c:	89 02                	mov    DWORD PTR [edx],eax
c0015b7e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b86:	83 ec 0c             	sub    esp,0xc
c0015b89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b8d:	e8 44 1f ff ff       	call   c0007ad6 <malloc>
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	89 c3                	mov    ebx,eax
c0015b97:	83 ec 08             	sub    esp,0x8
c0015b9a:	6a 00                	push   0x0
c0015b9c:	53                   	push   ebx
c0015b9d:	e8 e6 44 ff ff       	call   c000a088 <VAS::VAS(bool)>
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bc5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015bcb:	e8 e2 be ff ff       	call   c0011ab2 <KeInitSignals()>
c0015bd0:	89 c2                	mov    edx,eax
c0015bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015be6:	85 c0                	test   eax,eax
c0015be8:	74 42                	je     c0015c2c <Process::Process(char const*, Process*, char**)+0x130>
c0015bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bf4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c0e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c18:	05 0c 01 00 00       	add    eax,0x10c
c0015c1d:	83 ec 08             	sub    esp,0x8
c0015c20:	52                   	push   edx
c0015c21:	50                   	push   eax
c0015c22:	e8 19 aa fe ff       	call   c0000640 <strcpy>
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	eb 64                	jmp    c0015c90 <Process::Process(char const*, Process*, char**)+0x194>
c0015c2c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c3b:	e8 96 1e ff ff       	call   c0007ad6 <malloc>
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	89 c3                	mov    ebx,eax
c0015c45:	83 ec 08             	sub    esp,0x8
c0015c48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4c:	53                   	push   ebx
c0015c4d:	e8 34 30 ff ff       	call   c0008c86 <VgaText::VgaText(char const*)>
c0015c52:	83 c4 10             	add    esp,0x10
c0015c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c59:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c69:	83 ec 0c             	sub    esp,0xc
c0015c6c:	50                   	push   eax
c0015c6d:	e8 b2 28 ff ff       	call   c0008524 <addToTerminalCycle(VgaText*)>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c79:	05 0c 01 00 00       	add    eax,0x10c
c0015c7e:	83 ec 08             	sub    esp,0x8
c0015c81:	68 55 2a 02 c0       	push   0xc0022a55
c0015c86:	50                   	push   eax
c0015c87:	e8 b4 a9 fe ff       	call   c0000640 <strcpy>
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	90                   	nop
c0015c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c94:	83 c0 0c             	add    eax,0xc
c0015c97:	83 ec 08             	sub    esp,0x8
c0015c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c9e:	50                   	push   eax
c0015c9f:	e8 9c a9 fe ff       	call   c0000640 <strcpy>
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	83 ec 08             	sub    esp,0x8
c0015caa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015cae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb2:	e8 d9 fd ff ff       	call   c0015a90 <Process::addArgs(char**)>
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	83 ec 08             	sub    esp,0x8
c0015cbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cc5:	e8 65 ed ff ff       	call   c0014a2f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cca:	83 c4 10             	add    esp,0x10
c0015ccd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015cd5:	83 f0 01             	xor    eax,0x1
c0015cd8:	88 c2                	mov    dl,al
c0015cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cde:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015ce4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015ce9:	83 ec 04             	sub    esp,0x4
c0015cec:	50                   	push   eax
c0015ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cf1:	68 ac 2a 02 c0       	push   0xc0022aac
c0015cf6:	e8 6a 4c ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0015cfb:	83 c4 10             	add    esp,0x10
c0015cfe:	90                   	nop
c0015cff:	83 c4 14             	add    esp,0x14
c0015d02:	5b                   	pop    ebx
c0015d03:	5e                   	pop    esi
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop
c0015d06:	66 90                	xchg   ax,ax

c0015d08 <Process::Process(bool, char const*, Process*, char**)>:
c0015d08:	56                   	push   esi
c0015d09:	53                   	push   ebx
c0015d0a:	83 ec 24             	sub    esp,0x24
c0015d0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d11:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d19:	05 0c 02 00 00       	add    eax,0x20c
c0015d1e:	bb 07 00 00 00       	mov    ebx,0x7
c0015d23:	89 c6                	mov    esi,eax
c0015d25:	8d 76 00             	lea    esi,[esi+0x0]
c0015d28:	85 db                	test   ebx,ebx
c0015d2a:	78 14                	js     c0015d40 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d2c:	83 ec 0c             	sub    esp,0xc
c0015d2f:	56                   	push   esi
c0015d30:	e8 d3 a3 00 00       	call   c0020108 <ThreadControlBlock::ThreadControlBlock()>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	83 c6 5f             	add    esi,0x5f
c0015d3b:	83 eb 01             	sub    ebx,0x1
c0015d3e:	eb e8                	jmp    c0015d28 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d44:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d4f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d56:	83 ec 0c             	sub    esp,0xc
c0015d59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d5d:	e8 2a b7 ff ff       	call   c001148c <KeNewProcessEnv(Process*)>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	89 c2                	mov    edx,eax
c0015d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d75:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d7e:	a1 60 40 02 c0       	mov    eax,ds:0xc0024060
c0015d83:	8d 50 01             	lea    edx,[eax+0x1]
c0015d86:	89 15 60 40 02 c0    	mov    DWORD PTR ds:0xc0024060,edx
c0015d8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d90:	89 02                	mov    DWORD PTR [edx],eax
c0015d92:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015da1:	e8 30 1d ff ff       	call   c0007ad6 <malloc>
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	89 c3                	mov    ebx,eax
c0015dab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	50                   	push   eax
c0015db4:	53                   	push   ebx
c0015db5:	e8 ce 42 ff ff       	call   c000a088 <VAS::VAS(bool)>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ddd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015de3:	e8 ca bc ff ff       	call   c0011ab2 <KeInitSignals()>
c0015de8:	89 c2                	mov    edx,eax
c0015dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015df4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dfe:	85 c0                	test   eax,eax
c0015e00:	74 42                	je     c0015e44 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e06:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e0c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e16:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e26:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e30:	05 0c 01 00 00       	add    eax,0x10c
c0015e35:	83 ec 08             	sub    esp,0x8
c0015e38:	52                   	push   edx
c0015e39:	50                   	push   eax
c0015e3a:	e8 01 a8 fe ff       	call   c0000640 <strcpy>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	eb 64                	jmp    c0015ea8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e44:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e4c:	83 ec 0c             	sub    esp,0xc
c0015e4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e53:	e8 7e 1c ff ff       	call   c0007ad6 <malloc>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	89 c3                	mov    ebx,eax
c0015e5d:	83 ec 08             	sub    esp,0x8
c0015e60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e64:	53                   	push   ebx
c0015e65:	e8 1c 2e ff ff       	call   c0008c86 <VgaText::VgaText(char const*)>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e71:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e81:	83 ec 0c             	sub    esp,0xc
c0015e84:	50                   	push   eax
c0015e85:	e8 9a 26 ff ff       	call   c0008524 <addToTerminalCycle(VgaText*)>
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e91:	05 0c 01 00 00       	add    eax,0x10c
c0015e96:	83 ec 08             	sub    esp,0x8
c0015e99:	68 55 2a 02 c0       	push   0xc0022a55
c0015e9e:	50                   	push   eax
c0015e9f:	e8 9c a7 fe ff       	call   c0000640 <strcpy>
c0015ea4:	83 c4 10             	add    esp,0x10
c0015ea7:	90                   	nop
c0015ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eac:	83 c0 0c             	add    eax,0xc
c0015eaf:	83 ec 08             	sub    esp,0x8
c0015eb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015eb6:	50                   	push   eax
c0015eb7:	e8 84 a7 fe ff       	call   c0000640 <strcpy>
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	83 ec 08             	sub    esp,0x8
c0015ec2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ec6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015eca:	e8 c1 fb ff ff       	call   c0015a90 <Process::addArgs(char**)>
c0015ecf:	83 c4 10             	add    esp,0x10
c0015ed2:	90                   	nop
c0015ed3:	83 c4 24             	add    esp,0x24
c0015ed6:	5b                   	pop    ebx
c0015ed7:	5e                   	pop    esi
c0015ed8:	c3                   	ret    
c0015ed9:	8d 76 00             	lea    esi,[esi+0x0]

c0015edc <taskStartupFunction>:
c0015edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ee4:	c3                   	ret    
c0015ee5:	90                   	nop
c0015ee6:	66 90                	xchg   ax,ax

c0015ee8 <Semaphore::Semaphore(int)>:
c0015ee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ef0:	89 10                	mov    DWORD PTR [eax],edx
c0015ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015efd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f13:	90                   	nop
c0015f14:	c3                   	ret    
c0015f15:	90                   	nop
c0015f16:	66 90                	xchg   ax,ax

c0015f18 <Mutex::Mutex()>:
c0015f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f1c:	6a 01                	push   0x1
c0015f1e:	50                   	push   eax
c0015f1f:	e8 c4 ff ff ff       	call   c0015ee8 <Semaphore::Semaphore(int)>
c0015f24:	83 c4 08             	add    esp,0x8
c0015f27:	90                   	nop
c0015f28:	c3                   	ret    
c0015f29:	90                   	nop
c0015f2a:	66 90                	xchg   ax,ax

c0015f2c <Process::createThread(void (*)(void*), void*, int)>:
c0015f2c:	57                   	push   edi
c0015f2d:	31 c9                	xor    ecx,ecx
c0015f2f:	56                   	push   esi
c0015f30:	53                   	push   ebx
c0015f31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f35:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f3c:	89 f2                	mov    edx,esi
c0015f3e:	66 90                	xchg   ax,ax
c0015f40:	0f b7 c2             	movzx  eax,dx
c0015f43:	80 e2 01             	and    dl,0x1
c0015f46:	74 14                	je     c0015f5c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f48:	d1 f8                	sar    eax,1
c0015f4a:	83 c1 01             	add    ecx,0x1
c0015f4d:	89 c2                	mov    edx,eax
c0015f4f:	83 f9 10             	cmp    ecx,0x10
c0015f52:	75 ec                	jne    c0015f40 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f54:	31 db                	xor    ebx,ebx
c0015f56:	89 d8                	mov    eax,ebx
c0015f58:	5b                   	pop    ebx
c0015f59:	5e                   	pop    esi
c0015f5a:	5f                   	pop    edi
c0015f5b:	c3                   	ret    
c0015f5c:	b8 01 00 00 00       	mov    eax,0x1
c0015f61:	d3 e0                	shl    eax,cl
c0015f63:	09 c6                	or     esi,eax
c0015f65:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f68:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f6f:	01 c0                	add    eax,eax
c0015f71:	01 c8                	add    eax,ecx
c0015f73:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f76:	01 d8                	add    eax,ebx
c0015f78:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f7f:	75 0b                	jne    c0015f8c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f81:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f8b:	90                   	nop
c0015f8c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f92:	83 ec 0c             	sub    esp,0xc
c0015f95:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f98:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f9b:	01 c0                	add    eax,eax
c0015f9d:	01 c8                	add    eax,ecx
c0015f9f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015fa2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015fa5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015fab:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015fb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fb5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015fbb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015fc1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015fc7:	89 ca                	mov    edx,ecx
c0015fc9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015fd0:	f7 da                	neg    edx
c0015fd2:	c1 e2 15             	shl    edx,0x15
c0015fd5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015fdb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015fe1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fe5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fef:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ff5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ff9:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fff:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016009:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016013:	68 00 01 00 00       	push   0x100
c0016018:	e8 b9 1a ff ff       	call   c0007ad6 <malloc>
c001601d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016020:	58                   	pop    eax
c0016021:	5a                   	pop    edx
c0016022:	53                   	push   ebx
c0016023:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016028:	e8 73 9e 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001602d:	83 c4 10             	add    esp,0x10
c0016030:	89 d8                	mov    eax,ebx
c0016032:	5b                   	pop    ebx
c0016033:	5e                   	pop    esi
c0016034:	5f                   	pop    edi
c0016035:	c3                   	ret    
c0016036:	66 90                	xchg   ax,ax

c0016038 <Process::createUserThread()>:
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	68 80 00 00 00       	push   0x80
c0016040:	6a 00                	push   0x0
c0016042:	68 88 59 01 c0       	push   0xc0015988
c0016047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001604b:	50                   	push   eax
c001604c:	e8 db fe ff ff       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c0016051:	83 c4 1c             	add    esp,0x1c
c0016054:	c3                   	ret    
c0016055:	8d 76 00             	lea    esi,[esi+0x0]

c0016058 <setupMultitasking(void (*)())>:
c0016058:	56                   	push   esi
c0016059:	53                   	push   ebx
c001605a:	83 ec 04             	sub    esp,0x4
c001605d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016061:	eb 11                	jmp    c0016074 <setupMultitasking(void (*)())+0x1c>
c0016063:	90                   	nop
c0016064:	83 ec 0c             	sub    esp,0xc
c0016067:	68 e4 c6 02 c0       	push   0xc002c6e4
c001606c:	e8 73 9d 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016071:	83 c4 10             	add    esp,0x10
c0016074:	83 ec 0c             	sub    esp,0xc
c0016077:	68 e4 c6 02 c0       	push   0xc002c6e4
c001607c:	e8 3f 9d 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016081:	83 c4 10             	add    esp,0x10
c0016084:	84 c0                	test   al,al
c0016086:	74 dc                	je     c0016064 <setupMultitasking(void (*)())+0xc>
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	68 24 07 00 00       	push   0x724
c0016090:	e8 41 1a ff ff       	call   c0007ad6 <malloc>
c0016095:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001609c:	89 c3                	mov    ebx,eax
c001609e:	6a 00                	push   0x0
c00160a0:	68 59 2a 02 c0       	push   0xc0022a59
c00160a5:	6a 01                	push   0x1
c00160a7:	50                   	push   eax
c00160a8:	e8 5b fc ff ff       	call   c0015d08 <Process::Process(bool, char const*, Process*, char**)>
c00160ad:	83 c4 14             	add    esp,0x14
c00160b0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00160b6:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160bc:	50                   	push   eax
c00160bd:	e8 b7 26 ff ff       	call   c0008779 <setActiveTerminal(VgaText*)>
c00160c2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160c9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160d3:	83 c8 01             	or     eax,0x1
c00160d6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00160dd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160e6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160f0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160f6:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160fc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016106:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016110:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001611a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016120:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001612a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016130:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001613a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016141:	e8 90 19 ff ff       	call   c0007ad6 <malloc>
c0016146:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001614c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016152:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016158:	5a                   	pop    edx
c0016159:	59                   	pop    ecx
c001615a:	68 55 2a 02 c0       	push   0xc0022a55
c001615f:	50                   	push   eax
c0016160:	e8 db a4 fe ff       	call   c0000640 <strcpy>
c0016165:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001616c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016170:	83 c4 14             	add    esp,0x14
c0016173:	5b                   	pop    ebx
c0016174:	5e                   	pop    esi
c0016175:	e9 ef a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001617a:	66 90                	xchg   ax,ax

c001617c <schedule()>:
c001617c:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016182:	85 d2                	test   edx,edx
c0016184:	74 0e                	je     c0016194 <schedule()+0x18>
c0016186:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016190:	c3                   	ret    
c0016191:	8d 76 00             	lea    esi,[esi+0x0]
c0016194:	53                   	push   ebx
c0016195:	83 ec 14             	sub    esp,0x14
c0016198:	68 e4 c6 02 c0       	push   0xc002c6e4
c001619d:	e8 1e 9c 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	84 c0                	test   al,al
c00161a7:	75 3f                	jne    c00161e8 <schedule()+0x6c>
c00161a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00161b1:	83 fa 01             	cmp    edx,0x1
c00161b4:	74 3a                	je     c00161f0 <schedule()+0x74>
c00161b6:	66 90                	xchg   ax,ax
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161c0:	e8 17 9c 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161c5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161cc:	89 c3                	mov    ebx,eax
c00161ce:	e8 11 9c 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161d3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00161da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161dd:	e8 fe f7 ff ff       	call   c00159e0 <switchToThread(ThreadControlBlock*)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	8d 76 00             	lea    esi,[esi+0x0]
c00161e8:	83 c4 08             	add    esp,0x8
c00161eb:	5b                   	pop    ebx
c00161ec:	c3                   	ret    
c00161ed:	8d 76 00             	lea    esi,[esi+0x0]
c00161f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161f7:	83 ec 08             	sub    esp,0x8
c00161fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ff:	50                   	push   eax
c0016200:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016205:	e8 96 9c 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	eb a9                	jmp    c00161b8 <schedule()+0x3c>
c001620f:	90                   	nop

c0016210 <Semaphore::tryAcquire()>:
c0016210:	53                   	push   ebx
c0016211:	83 ec 08             	sub    esp,0x8
c0016214:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016218:	fa                   	cli    
c0016219:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001621e:	8d 50 01             	lea    edx,[eax+0x1]
c0016221:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016227:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001622d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016230:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016236:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016239:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001623b:	7c 33                	jl     c0016270 <Semaphore::tryAcquire()+0x60>
c001623d:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016243:	85 d2                	test   edx,edx
c0016245:	75 0d                	jne    c0016254 <Semaphore::tryAcquire()+0x44>
c0016247:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c001624d:	85 d2                	test   edx,edx
c001624f:	75 6f                	jne    c00162c0 <Semaphore::tryAcquire()+0xb0>
c0016251:	8d 76 00             	lea    esi,[esi+0x0]
c0016254:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016259:	85 c0                	test   eax,eax
c001625b:	74 0b                	je     c0016268 <Semaphore::tryAcquire()+0x58>
c001625d:	8d 76 00             	lea    esi,[esi+0x0]
c0016260:	31 c0                	xor    eax,eax
c0016262:	83 c4 08             	add    esp,0x8
c0016265:	5b                   	pop    ebx
c0016266:	c3                   	ret    
c0016267:	90                   	nop
c0016268:	fb                   	sti    
c0016269:	83 c4 08             	add    esp,0x8
c001626c:	5b                   	pop    ebx
c001626d:	c3                   	ret    
c001626e:	66 90                	xchg   ax,ax
c0016270:	83 c3 01             	add    ebx,0x1
c0016273:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016279:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001627c:	85 d2                	test   edx,edx
c001627e:	75 24                	jne    c00162a4 <Semaphore::tryAcquire()+0x94>
c0016280:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016286:	85 c9                	test   ecx,ecx
c0016288:	74 1a                	je     c00162a4 <Semaphore::tryAcquire()+0x94>
c001628a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016294:	e8 e3 fe ff ff       	call   c001617c <schedule()>
c0016299:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001629e:	83 e8 01             	sub    eax,0x1
c00162a1:	8d 76 00             	lea    esi,[esi+0x0]
c00162a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162a9:	85 c0                	test   eax,eax
c00162ab:	75 0b                	jne    c00162b8 <Semaphore::tryAcquire()+0xa8>
c00162ad:	fb                   	sti    
c00162ae:	b0 01                	mov    al,0x1
c00162b0:	83 c4 08             	add    esp,0x8
c00162b3:	5b                   	pop    ebx
c00162b4:	c3                   	ret    
c00162b5:	8d 76 00             	lea    esi,[esi+0x0]
c00162b8:	b0 01                	mov    al,0x1
c00162ba:	83 c4 08             	add    esp,0x8
c00162bd:	5b                   	pop    ebx
c00162be:	c3                   	ret    
c00162bf:	90                   	nop
c00162c0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162ca:	e8 ad fe ff ff       	call   c001617c <schedule()>
c00162cf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162d4:	83 e8 01             	sub    eax,0x1
c00162d7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162dc:	85 c0                	test   eax,eax
c00162de:	75 80                	jne    c0016260 <Semaphore::tryAcquire()+0x50>
c00162e0:	eb 86                	jmp    c0016268 <Semaphore::tryAcquire()+0x58>
c00162e2:	66 90                	xchg   ax,ax

c00162e4 <Semaphore::assertLocked(char const*)>:
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162eb:	fa                   	cli    
c00162ec:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00162f2:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162f7:	83 c1 01             	add    ecx,0x1
c00162fa:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016300:	8d 48 01             	lea    ecx,[eax+0x1]
c0016303:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016309:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001630b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001630e:	7c 28                	jl     c0016338 <Semaphore::assertLocked(char const*)+0x54>
c0016310:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016315:	85 c0                	test   eax,eax
c0016317:	75 0b                	jne    c0016324 <Semaphore::assertLocked(char const*)+0x40>
c0016319:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001631e:	85 c0                	test   eax,eax
c0016320:	75 32                	jne    c0016354 <Semaphore::assertLocked(char const*)+0x70>
c0016322:	66 90                	xchg   ax,ax
c0016324:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016329:	83 e8 01             	sub    eax,0x1
c001632c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016331:	75 01                	jne    c0016334 <Semaphore::assertLocked(char const*)+0x50>
c0016333:	fb                   	sti    
c0016334:	83 c4 0c             	add    esp,0xc
c0016337:	c3                   	ret    
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001633f:	52                   	push   edx
c0016340:	e8 52 b3 ff ff       	call   c0011697 <KePanic(char const*)>
c0016345:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001634a:	83 c4 10             	add    esp,0x10
c001634d:	83 e8 01             	sub    eax,0x1
c0016350:	eb be                	jmp    c0016310 <Semaphore::assertLocked(char const*)+0x2c>
c0016352:	66 90                	xchg   ax,ax
c0016354:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001635e:	e8 19 fe ff ff       	call   c001617c <schedule()>
c0016363:	eb bf                	jmp    c0016324 <Semaphore::assertLocked(char const*)+0x40>
c0016365:	8d 76 00             	lea    esi,[esi+0x0]

c0016368 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016370:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016374:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016377:	e8 00 fe ff ff       	call   c001617c <schedule()>
c001637c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016381:	83 e8 01             	sub    eax,0x1
c0016384:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016389:	75 01                	jne    c001638c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001638b:	fb                   	sti    
c001638c:	83 c4 0c             	add    esp,0xc
c001638f:	c3                   	ret    

c0016390 <blockTask(TaskState)>:
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	fa                   	cli    
c0016394:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016399:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001639d:	83 c0 01             	add    eax,0x1
c00163a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163ad:	e8 ca fd ff ff       	call   c001617c <schedule()>
c00163b2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163b7:	83 e8 01             	sub    eax,0x1
c00163ba:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163bf:	75 03                	jne    c00163c4 <blockTask(TaskState)+0x34>
c00163c1:	fb                   	sti    
c00163c2:	66 90                	xchg   ax,ax
c00163c4:	83 c4 0c             	add    esp,0xc
c00163c7:	c3                   	ret    

c00163c8 <waitTask(int, int*, int)>:
c00163c8:	83 ec 18             	sub    esp,0x18
c00163cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163d4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00163d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00163e3:	6a 07                	push   0x7
c00163e5:	e8 a6 ff ff ff       	call   c0016390 <blockTask(TaskState)>
c00163ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ef:	83 c4 10             	add    esp,0x10
c00163f2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163f5:	85 d2                	test   edx,edx
c00163f7:	74 0b                	je     c0016404 <waitTask(int, int*, int)+0x3c>
c00163f9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163fc:	89 02                	mov    DWORD PTR [edx],eax
c00163fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016403:	90                   	nop
c0016404:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016407:	83 c4 0c             	add    esp,0xc
c001640a:	c3                   	ret    
c001640b:	90                   	nop

c001640c <milliTenthSleepUntil(unsigned int)>:
c001640c:	83 ec 0c             	sub    esp,0xc
c001640f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016413:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016419:	76 05                	jbe    c0016420 <milliTenthSleepUntil(unsigned int)+0x14>
c001641b:	90                   	nop
c001641c:	83 c4 0c             	add    esp,0xc
c001641f:	c3                   	ret    
c0016420:	fa                   	cli    
c0016421:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016427:	83 ec 08             	sub    esp,0x8
c001642a:	83 c2 01             	add    edx,0x1
c001642d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016433:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016439:	83 c1 01             	add    ecx,0x1
c001643c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016442:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016448:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001644b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016450:	50                   	push   eax
c0016451:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016456:	e8 45 9a 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001645b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016462:	e8 29 ff ff ff       	call   c0016390 <blockTask(TaskState)>
c0016467:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001646c:	83 c4 10             	add    esp,0x10
c001646f:	83 e8 01             	sub    eax,0x1
c0016472:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016477:	85 c0                	test   eax,eax
c0016479:	75 09                	jne    c0016484 <milliTenthSleepUntil(unsigned int)+0x78>
c001647b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016480:	85 c0                	test   eax,eax
c0016482:	75 14                	jne    c0016498 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016484:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016489:	83 e8 01             	sub    eax,0x1
c001648c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016491:	75 89                	jne    c001641c <milliTenthSleepUntil(unsigned int)+0x10>
c0016493:	fb                   	sti    
c0016494:	83 c4 0c             	add    esp,0xc
c0016497:	c3                   	ret    
c0016498:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164a2:	e8 d5 fc ff ff       	call   c001617c <schedule()>
c00164a7:	eb db                	jmp    c0016484 <milliTenthSleepUntil(unsigned int)+0x78>
c00164a9:	8d 76 00             	lea    esi,[esi+0x0]

c00164ac <milliTenthSleep(unsigned int)>:
c00164ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164b0:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00164b5:	01 c2                	add    edx,eax
c00164b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00164bb:	e9 4c ff ff ff       	jmp    c001640c <milliTenthSleepUntil(unsigned int)>

c00164c0 <sleep(unsigned int)>:
c00164c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164c4:	8d 04 80             	lea    eax,[eax+eax*4]
c00164c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00164ca:	8d 04 80             	lea    eax,[eax+eax*4]
c00164cd:	8d 04 80             	lea    eax,[eax+eax*4]
c00164d0:	c1 e0 04             	shl    eax,0x4
c00164d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164d7:	eb d3                	jmp    c00164ac <milliTenthSleep(unsigned int)>
c00164d9:	90                   	nop
c00164da:	66 90                	xchg   ax,ax

c00164dc <Semaphore::acquire()>:
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164e3:	fa                   	cli    
c00164e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164e9:	83 c0 01             	add    eax,0x1
c00164ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164f1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164f6:	8d 48 01             	lea    ecx,[eax+0x1]
c00164f9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164ff:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016502:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016504:	7d 2e                	jge    c0016534 <Semaphore::acquire()+0x58>
c0016506:	83 c1 01             	add    ecx,0x1
c0016509:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001650c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016511:	85 c0                	test   eax,eax
c0016513:	75 0b                	jne    c0016520 <Semaphore::acquire()+0x44>
c0016515:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001651a:	85 c0                	test   eax,eax
c001651c:	75 66                	jne    c0016584 <Semaphore::acquire()+0xa8>
c001651e:	66 90                	xchg   ax,ax
c0016520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016525:	83 e8 01             	sub    eax,0x1
c0016528:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001652d:	75 01                	jne    c0016530 <Semaphore::acquire()+0x54>
c001652f:	fb                   	sti    
c0016530:	83 c4 0c             	add    esp,0xc
c0016533:	c3                   	ret    
c0016534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016539:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016540:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016543:	85 c9                	test   ecx,ecx
c0016545:	74 51                	je     c0016598 <Semaphore::acquire()+0xbc>
c0016547:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001654a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016550:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016553:	90                   	nop
c0016554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001655f:	68 d8 2a 02 c0       	push   0xc0022ad8
c0016564:	e8 fc 43 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0016569:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016570:	e8 1b fe ff ff       	call   c0016390 <blockTask(TaskState)>
c0016575:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001657a:	83 c4 10             	add    esp,0x10
c001657d:	83 e8 01             	sub    eax,0x1
c0016580:	eb 8a                	jmp    c001650c <Semaphore::acquire()+0x30>
c0016582:	66 90                	xchg   ax,ax
c0016584:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001658e:	e8 e9 fb ff ff       	call   c001617c <schedule()>
c0016593:	eb 8b                	jmp    c0016520 <Semaphore::acquire()+0x44>
c0016595:	8d 76 00             	lea    esi,[esi+0x0]
c0016598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001659d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165a0:	eb b2                	jmp    c0016554 <Semaphore::acquire()+0x78>
c00165a2:	66 90                	xchg   ax,ax

c00165a4 <taskReturned>:
c00165a4:	83 ec 18             	sub    esp,0x18
c00165a7:	68 f8 2a 02 c0       	push   0xc0022af8
c00165ac:	e8 e6 b0 ff ff       	call   c0011697 <KePanic(char const*)>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	6a 02                	push   0x2
c00165b9:	e8 d2 fd ff ff       	call   c0016390 <blockTask(TaskState)>
c00165be:	fa                   	cli    
c00165bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165c4:	83 c0 01             	add    eax,0x1
c00165c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165cc:	e8 ab fb ff ff       	call   c001617c <schedule()>
c00165d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	83 e8 01             	sub    eax,0x1
c00165dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165e1:	85 c0                	test   eax,eax
c00165e3:	75 cf                	jne    c00165b4 <taskReturned+0x10>
c00165e5:	fb                   	sti    
c00165e6:	eb cc                	jmp    c00165b4 <taskReturned+0x10>

c00165e8 <Thr::processFromPID(int)>:
c00165e8:	57                   	push   edi
c00165e9:	56                   	push   esi
c00165ea:	53                   	push   ebx
c00165eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165ef:	fa                   	cli    
c00165f0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00165f6:	83 ec 0c             	sub    esp,0xc
c00165f9:	83 c1 01             	add    ecx,0x1
c00165fc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016601:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016607:	e8 d0 97 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001660c:	83 c4 10             	add    esp,0x10
c001660f:	89 c7                	mov    edi,eax
c0016611:	eb 15                	jmp    c0016628 <Thr::processFromPID(int)+0x40>
c0016613:	90                   	nop
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	68 e4 c6 02 c0       	push   0xc002c6e4
c001661c:	e8 bb 97 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	39 f8                	cmp    eax,edi
c0016626:	74 50                	je     c0016678 <Thr::processFromPID(int)+0x90>
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016630:	e8 a7 97 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016635:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001663c:	89 c3                	mov    ebx,eax
c001663e:	e8 a1 97 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016643:	58                   	pop    eax
c0016644:	5a                   	pop    edx
c0016645:	53                   	push   ebx
c0016646:	68 e4 c6 02 c0       	push   0xc002c6e4
c001664b:	e8 50 98 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016650:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	39 30                	cmp    DWORD PTR [eax],esi
c0016658:	75 ba                	jne    c0016614 <Thr::processFromPID(int)+0x2c>
c001665a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001665f:	83 e8 01             	sub    eax,0x1
c0016662:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016667:	74 0b                	je     c0016674 <Thr::processFromPID(int)+0x8c>
c0016669:	8d 76 00             	lea    esi,[esi+0x0]
c001666c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001666f:	5b                   	pop    ebx
c0016670:	5e                   	pop    esi
c0016671:	5f                   	pop    edi
c0016672:	c3                   	ret    
c0016673:	90                   	nop
c0016674:	fb                   	sti    
c0016675:	eb f5                	jmp    c001666c <Thr::processFromPID(int)+0x84>
c0016677:	90                   	nop
c0016678:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001667d:	83 e8 01             	sub    eax,0x1
c0016680:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016685:	75 05                	jne    c001668c <Thr::processFromPID(int)+0xa4>
c0016687:	fb                   	sti    
c0016688:	5b                   	pop    ebx
c0016689:	5e                   	pop    esi
c001668a:	5f                   	pop    edi
c001668b:	c3                   	ret    
c001668c:	5b                   	pop    ebx
c001668d:	31 c0                	xor    eax,eax
c001668f:	5e                   	pop    esi
c0016690:	5f                   	pop    edi
c0016691:	c3                   	ret    
c0016692:	66 90                	xchg   ax,ax

c0016694 <unblockTask(ThreadControlBlock*)>:
c0016694:	53                   	push   ebx
c0016695:	83 ec 08             	sub    esp,0x8
c0016698:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001669c:	fa                   	cli    
c001669d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166a2:	83 c0 01             	add    eax,0x1
c00166a5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166aa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166ad:	85 c0                	test   eax,eax
c00166af:	74 67                	je     c0016718 <unblockTask(ThreadControlBlock*)+0x84>
c00166b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166b4:	83 f8 01             	cmp    eax,0x1
c00166b7:	74 37                	je     c00166f0 <unblockTask(ThreadControlBlock*)+0x5c>
c00166b9:	83 ec 0c             	sub    esp,0xc
c00166bc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166c1:	e8 16 97 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	85 c0                	test   eax,eax
c00166cb:	75 1b                	jne    c00166e8 <unblockTask(ThreadControlBlock*)+0x54>
c00166cd:	eb 5d                	jmp    c001672c <unblockTask(ThreadControlBlock*)+0x98>
c00166cf:	90                   	nop
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	50                   	push   eax
c00166d4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166d9:	e8 1e 9a 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	85 c0                	test   eax,eax
c00166e3:	74 47                	je     c001672c <unblockTask(ThreadControlBlock*)+0x98>
c00166e5:	8d 76 00             	lea    esi,[esi+0x0]
c00166e8:	39 c3                	cmp    ebx,eax
c00166ea:	75 e4                	jne    c00166d0 <unblockTask(ThreadControlBlock*)+0x3c>
c00166ec:	eb 12                	jmp    c0016700 <unblockTask(ThreadControlBlock*)+0x6c>
c00166ee:	66 90                	xchg   ax,ax
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	68 77 2a 02 c0       	push   0xc0022a77
c00166f8:	e8 68 42 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016705:	83 e8 01             	sub    eax,0x1
c0016708:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001670d:	75 01                	jne    c0016710 <unblockTask(ThreadControlBlock*)+0x7c>
c001670f:	fb                   	sti    
c0016710:	83 c4 08             	add    esp,0x8
c0016713:	5b                   	pop    ebx
c0016714:	c3                   	ret    
c0016715:	8d 76 00             	lea    esi,[esi+0x0]
c0016718:	83 ec 0c             	sub    esp,0xc
c001671b:	68 60 2a 02 c0       	push   0xc0022a60
c0016720:	e8 40 42 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0016725:	83 c4 10             	add    esp,0x10
c0016728:	eb d6                	jmp    c0016700 <unblockTask(ThreadControlBlock*)+0x6c>
c001672a:	66 90                	xchg   ax,ax
c001672c:	83 ec 08             	sub    esp,0x8
c001672f:	53                   	push   ebx
c0016730:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016735:	e8 66 97 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	eb c1                	jmp    c0016700 <unblockTask(ThreadControlBlock*)+0x6c>
c001673f:	90                   	nop

c0016740 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016740:	55                   	push   ebp
c0016741:	57                   	push   edi
c0016742:	56                   	push   esi
c0016743:	53                   	push   ebx
c0016744:	83 ec 1c             	sub    esp,0x1c
c0016747:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001674b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001674e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016754:	85 ed                	test   ebp,ebp
c0016756:	7e 28                	jle    c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016758:	31 f6                	xor    esi,esi
c001675a:	66 90                	xchg   ax,ax
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016766:	83 c6 01             	add    esi,0x1
c0016769:	57                   	push   edi
c001676a:	e8 77 13 ff ff       	call   c0007ae6 <free>
c001676f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001677b:	7f df                	jg     c001675c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001677d:	8d 76 00             	lea    esi,[esi+0x0]
c0016780:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001678a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001678f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016792:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016795:	d3 c0                	rol    eax,cl
c0016797:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001679e:	21 c8                	and    eax,ecx
c00167a0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00167a7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167aa:	89 f7                	mov    edi,esi
c00167ac:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00167b4:	0f 85 72 01 00 00    	jne    c001692c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167ba:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00167c0:	85 ed                	test   ebp,ebp
c00167c2:	74 1c                	je     c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	55                   	push   ebp
c00167c8:	e8 db ab ff ff       	call   c00113a8 <EnvVarContainer::~EnvVarContainer()>
c00167cd:	59                   	pop    ecx
c00167ce:	5e                   	pop    esi
c00167cf:	6a 0c                	push   0xc
c00167d1:	55                   	push   ebp
c00167d2:	e8 61 40 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00167d7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167da:	83 c4 10             	add    esp,0x10
c00167dd:	89 f7                	mov    edi,esi
c00167df:	90                   	nop
c00167e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167e6:	85 c0                	test   eax,eax
c00167e8:	0f 84 b2 00 00 00    	je     c00168a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167ee:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00167f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00167f5:	31 c9                	xor    ecx,ecx
c00167f7:	eb 17                	jmp    c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00167f9:	8d 76 00             	lea    esi,[esi+0x0]
c00167fc:	83 c1 01             	add    ecx,0x1
c00167ff:	83 f9 10             	cmp    ecx,0x10
c0016802:	0f 84 98 00 00 00    	je     c00168a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016808:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001680e:	66 90                	xchg   ax,ax
c0016810:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016817:	d3 fa                	sar    edx,cl
c0016819:	80 e2 01             	and    dl,0x1
c001681c:	74 de                	je     c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001681e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016821:	01 d2                	add    edx,edx
c0016823:	01 ca                	add    edx,ecx
c0016825:	8d 14 92             	lea    edx,[edx+edx*4]
c0016828:	01 d0                	add    eax,edx
c001682a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016830:	83 fd 07             	cmp    ebp,0x7
c0016833:	75 c7                	jne    c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016835:	05 40 02 00 00       	add    eax,0x240
c001683a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001683d:	83 fd ff             	cmp    ebp,0xffffffff
c0016840:	0f 8c ee 00 00 00    	jl     c0016934 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016846:	0f 84 ac 01 00 00    	je     c00169f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001684c:	85 ed                	test   ebp,ebp
c001684e:	0f 84 90 01 00 00    	je     c00169e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016854:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016856:	75 a4                	jne    c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016858:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001685e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016862:	01 d0                	add    eax,edx
c0016864:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016868:	83 ec 0c             	sub    esp,0xc
c001686b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016871:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016874:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001687a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016881:	50                   	push   eax
c0016882:	e8 0d fe ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001688d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016891:	89 f7                	mov    edi,esi
c0016893:	83 c1 01             	add    ecx,0x1
c0016896:	83 f9 10             	cmp    ecx,0x10
c0016899:	0f 85 69 ff ff ff    	jne    c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001689f:	90                   	nop
c00168a0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00168a6:	85 c0                	test   eax,eax
c00168a8:	74 62                	je     c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168aa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00168b0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00168b6:	74 54                	je     c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168c0:	e8 17 95 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168cc:	89 c7                	mov    edi,eax
c00168ce:	e8 ed 94 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	84 c0                	test   al,al
c00168d8:	0f 84 ce 00 00 00    	je     c00169ac <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00168de:	66 90                	xchg   ax,ax
c00168e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168e3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00168e9:	85 d2                	test   edx,edx
c00168eb:	74 0f                	je     c00168fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00168ed:	83 ec 0c             	sub    esp,0xc
c00168f0:	8b 02                	mov    eax,DWORD PTR [edx]
c00168f2:	52                   	push   edx
c00168f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168f6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016906:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016909:	8d 76 00             	lea    esi,[esi+0x0]
c001690c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016912:	85 db                	test   ebx,ebx
c0016914:	74 16                	je     c001692c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	53                   	push   ebx
c001691a:	e8 b3 32 ff ff       	call   c0009bd2 <VAS::~VAS()>
c001691f:	58                   	pop    eax
c0016920:	5a                   	pop    edx
c0016921:	6a 14                	push   0x14
c0016923:	53                   	push   ebx
c0016924:	e8 0f 3f ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	83 c4 1c             	add    esp,0x1c
c001692f:	5b                   	pop    ebx
c0016930:	5e                   	pop    esi
c0016931:	5f                   	pop    edi
c0016932:	5d                   	pop    ebp
c0016933:	c3                   	ret    
c0016934:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	68 2c 2b 02 c0       	push   0xc0022b2c
c0016940:	e8 52 ad ff ff       	call   c0011697 <KePanic(char const*)>
c0016945:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016948:	83 c4 10             	add    esp,0x10
c001694b:	89 f7                	mov    edi,esi
c001694d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016951:	e9 a6 fe ff ff       	jmp    c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016956:	66 90                	xchg   ax,ax
c0016958:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001695e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016964:	75 1e                	jne    c0016984 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016966:	83 ec 0c             	sub    esp,0xc
c0016969:	68 94 2b 02 c0       	push   0xc0022b94
c001696e:	e8 f2 3f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0016973:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001697a:	e8 11 fa ff ff       	call   c0016390 <blockTask(TaskState)>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	66 90                	xchg   ax,ax
c0016984:	83 ec 08             	sub    esp,0x8
c0016987:	56                   	push   esi
c0016988:	68 e4 c6 02 c0       	push   0xc002c6e4
c001698d:	e8 0e 95 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016992:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016999:	e8 3e 94 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	39 f8                	cmp    eax,edi
c00169a3:	0f 84 37 ff ff ff    	je     c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00169a9:	8d 76 00             	lea    esi,[esi+0x0]
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169b4:	e8 23 94 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169b9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169c0:	89 c6                	mov    esi,eax
c00169c2:	e8 1d 94 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169c7:	83 c4 10             	add    esp,0x10
c00169ca:	39 f3                	cmp    ebx,esi
c00169cc:	74 b6                	je     c0016984 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169ce:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169d4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00169da:	75 a8                	jne    c0016984 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169dc:	e9 77 ff ff ff       	jmp    c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00169e1:	8d 76 00             	lea    esi,[esi+0x0]
c00169e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169e8:	83 ec 0c             	sub    esp,0xc
c00169eb:	68 60 2b 02 c0       	push   0xc0022b60
c00169f0:	e9 4b ff ff ff       	jmp    c0016940 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00169f5:	8d 76 00             	lea    esi,[esi+0x0]
c00169f8:	8b 36                	mov    esi,DWORD PTR [esi]
c00169fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169fe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016a01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a04:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016a0a:	01 d7                	add    edi,edx
c0016a0c:	89 f8                	mov    eax,edi
c0016a0e:	e9 51 fe ff ff       	jmp    c0016864 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016a13:	90                   	nop

c0016a14 <cleanerTaskFunction(void*)>:
c0016a14:	53                   	push   ebx
c0016a15:	83 ec 08             	sub    esp,0x8
c0016a18:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a1d:	83 e8 01             	sub    eax,0x1
c0016a20:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a25:	75 01                	jne    c0016a28 <cleanerTaskFunction(void*)+0x14>
c0016a27:	fb                   	sti    
c0016a28:	fa                   	cli    
c0016a29:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a2e:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a35:	8d 50 01             	lea    edx,[eax+0x1]
c0016a38:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a3e:	0f 84 c4 00 00 00    	je     c0016b08 <cleanerTaskFunction(void*)+0xf4>
c0016a44:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a49:	85 c0                	test   eax,eax
c0016a4b:	75 03                	jne    c0016a50 <cleanerTaskFunction(void*)+0x3c>
c0016a4d:	fb                   	sti    
c0016a4e:	66 90                	xchg   ax,ax
c0016a50:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a57:	fa                   	cli    
c0016a58:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a5e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a64:	83 c2 01             	add    edx,0x1
c0016a67:	83 c1 01             	add    ecx,0x1
c0016a6a:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a70:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a76:	fa                   	cli    
c0016a77:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a7d:	83 c3 01             	add    ebx,0x1
c0016a80:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a86:	eb 28                	jmp    c0016ab0 <cleanerTaskFunction(void*)+0x9c>
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a90:	e8 47 93 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a95:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a9c:	89 c3                	mov    ebx,eax
c0016a9e:	e8 41 93 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aa6:	e8 95 fc ff ff       	call   c0016740 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	66 90                	xchg   ax,ax
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ab8:	e8 03 93 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	84 c0                	test   al,al
c0016ac2:	74 c4                	je     c0016a88 <cleanerTaskFunction(void*)+0x74>
c0016ac4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ac9:	83 e8 01             	sub    eax,0x1
c0016acc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ad1:	75 01                	jne    c0016ad4 <cleanerTaskFunction(void*)+0xc0>
c0016ad3:	fb                   	sti    
c0016ad4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ad9:	83 e8 01             	sub    eax,0x1
c0016adc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ae1:	0f 85 31 ff ff ff    	jne    c0016a18 <cleanerTaskFunction(void*)+0x4>
c0016ae7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016aec:	85 c0                	test   eax,eax
c0016aee:	0f 84 24 ff ff ff    	je     c0016a18 <cleanerTaskFunction(void*)+0x4>
c0016af4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016afe:	e8 79 f6 ff ff       	call   c001617c <schedule()>
c0016b03:	e9 10 ff ff ff       	jmp    c0016a18 <cleanerTaskFunction(void*)+0x4>
c0016b08:	83 ec 0c             	sub    esp,0xc
c0016b0b:	6a 02                	push   0x2
c0016b0d:	e8 56 f8 ff ff       	call   c0016368 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	e9 36 ff ff ff       	jmp    c0016a50 <cleanerTaskFunction(void*)+0x3c>
c0016b1a:	66 90                	xchg   ax,ax

c0016b1c <terminateTask(int)>:
c0016b1c:	83 ec 14             	sub    esp,0x14
c0016b1f:	fa                   	cli    
c0016b20:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b26:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b2c:	83 c2 01             	add    edx,0x1
c0016b2f:	83 c1 01             	add    ecx,0x1
c0016b32:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b38:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b3e:	fa                   	cli    
c0016b3f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b48:	83 c0 01             	add    eax,0x1
c0016b4b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b55:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b5d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b60:	50                   	push   eax
c0016b61:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b66:	e8 35 93 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b70:	83 c4 10             	add    esp,0x10
c0016b73:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b7a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b7f:	85 c0                	test   eax,eax
c0016b81:	74 65                	je     c0016be8 <terminateTask(int)+0xcc>
c0016b83:	83 ec 0c             	sub    esp,0xc
c0016b86:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b8d:	50                   	push   eax
c0016b8e:	e8 01 fb ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	66 90                	xchg   ax,ax
c0016b98:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b9d:	83 e8 01             	sub    eax,0x1
c0016ba0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ba5:	75 01                	jne    c0016ba8 <terminateTask(int)+0x8c>
c0016ba7:	fb                   	sti    
c0016ba8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bad:	83 e8 01             	sub    eax,0x1
c0016bb0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016bb5:	75 09                	jne    c0016bc0 <terminateTask(int)+0xa4>
c0016bb7:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016bbe:	75 3c                	jne    c0016bfc <terminateTask(int)+0xe0>
c0016bc0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bc5:	83 e8 01             	sub    eax,0x1
c0016bc8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bcd:	75 01                	jne    c0016bd0 <terminateTask(int)+0xb4>
c0016bcf:	fb                   	sti    
c0016bd0:	fa                   	cli    
c0016bd1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bd6:	83 c0 01             	add    eax,0x1
c0016bd9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bde:	66 90                	xchg   ax,ax
c0016be0:	e8 97 f5 ff ff       	call   c001617c <schedule()>
c0016be5:	eb d9                	jmp    c0016bc0 <terminateTask(int)+0xa4>
c0016be7:	90                   	nop
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	68 8e 2a 02 c0       	push   0xc0022a8e
c0016bf0:	e8 70 3d ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	eb 9e                	jmp    c0016b98 <terminateTask(int)+0x7c>
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c06:	eb d8                	jmp    c0016be0 <terminateTask(int)+0xc4>

c0016c08 <Thr::terminateFromIRQ(int)>:
c0016c08:	83 ec 18             	sub    esp,0x18
c0016c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c0f:	50                   	push   eax
c0016c10:	e8 07 ff ff ff       	call   c0016b1c <terminateTask(int)>
c0016c15:	90                   	nop
c0016c16:	66 90                	xchg   ax,ax

c0016c18 <Semaphore::release()>:
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c1f:	fa                   	cli    
c0016c20:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c25:	83 c0 01             	add    eax,0x1
c0016c28:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c2d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c32:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c35:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c3b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c3e:	85 c9                	test   ecx,ecx
c0016c40:	74 42                	je     c0016c84 <Semaphore::release()+0x6c>
c0016c42:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c45:	83 ec 0c             	sub    esp,0xc
c0016c48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c4b:	51                   	push   ecx
c0016c4c:	e8 43 fa ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c0016c51:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	83 e8 01             	sub    eax,0x1
c0016c5c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c61:	85 c0                	test   eax,eax
c0016c63:	75 0b                	jne    c0016c70 <Semaphore::release()+0x58>
c0016c65:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c6a:	85 c0                	test   eax,eax
c0016c6c:	75 22                	jne    c0016c90 <Semaphore::release()+0x78>
c0016c6e:	66 90                	xchg   ax,ax
c0016c70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c75:	83 e8 01             	sub    eax,0x1
c0016c78:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c7d:	75 01                	jne    c0016c80 <Semaphore::release()+0x68>
c0016c7f:	fb                   	sti    
c0016c80:	83 c4 0c             	add    esp,0xc
c0016c83:	c3                   	ret    
c0016c84:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c87:	83 e9 01             	sub    ecx,0x1
c0016c8a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c8d:	eb cd                	jmp    c0016c5c <Semaphore::release()+0x44>
c0016c8f:	90                   	nop
c0016c90:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c9a:	e8 dd f4 ff ff       	call   c001617c <schedule()>
c0016c9f:	eb cf                	jmp    c0016c70 <Semaphore::release()+0x58>
c0016ca1:	8d 76 00             	lea    esi,[esi+0x0]

c0016ca4 <__static_initialization_and_destruction_0(int, int)>:
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016cac:	0f 85 8e 00 00 00    	jne    c0016d40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016cb2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016cba:	0f 85 80 00 00 00    	jne    c0016d40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cc8:	e8 87 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	83 ec 04             	sub    esp,0x4
c0016cd3:	68 64 37 02 c0       	push   0xc0023764
c0016cd8:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cdd:	68 04 01 02 c0       	push   0xc0020104
c0016ce2:	e8 01 3b ff ff       	call   c000a7e8 <__cxa_atexit>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cf2:	e8 5d 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	83 ec 04             	sub    esp,0x4
c0016cfd:	68 64 37 02 c0       	push   0xc0023764
c0016d02:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d07:	68 04 01 02 c0       	push   0xc0020104
c0016d0c:	e8 d7 3a ff ff       	call   c000a7e8 <__cxa_atexit>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d1c:	e8 33 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d21:	83 c4 10             	add    esp,0x10
c0016d24:	83 ec 04             	sub    esp,0x4
c0016d27:	68 64 37 02 c0       	push   0xc0023764
c0016d2c:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d31:	68 04 01 02 c0       	push   0xc0020104
c0016d36:	e8 ad 3a ff ff       	call   c000a7e8 <__cxa_atexit>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	66 90                	xchg   ax,ax
c0016d40:	90                   	nop
c0016d41:	83 c4 0c             	add    esp,0xc
c0016d44:	c3                   	ret    
c0016d45:	8d 76 00             	lea    esi,[esi+0x0]

c0016d48 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	83 ec 08             	sub    esp,0x8
c0016d4e:	68 ff ff 00 00       	push   0xffff
c0016d53:	6a 01                	push   0x1
c0016d55:	e8 4a ff ff ff       	call   c0016ca4 <__static_initialization_and_destruction_0(int, int)>
c0016d5a:	83 c4 10             	add    esp,0x10
c0016d5d:	83 c4 0c             	add    esp,0xc
c0016d60:	c3                   	ret    

c0016d61 <Vm::inbv(unsigned short)>:
c0016d61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d65:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d6a:	75 06                	jne    c0016d72 <Vm::inbv(unsigned short)+0x11>
c0016d6c:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d71:	c3                   	ret    
c0016d72:	ec                   	in     al,dx
c0016d73:	c3                   	ret    

c0016d74 <Vm::outbv(unsigned short, unsigned char)>:
c0016d74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d7c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d81:	75 25                	jne    c0016da8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d83:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d89:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d8c:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d92:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d98:	83 fa 20             	cmp    edx,0x20
c0016d9b:	75 0c                	jne    c0016da9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d9d:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016da7:	c3                   	ret    
c0016da8:	ee                   	out    dx,al
c0016da9:	c3                   	ret    

c0016daa <Vm::realToLinear(unsigned short, unsigned short)>:
c0016daa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016daf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016db4:	c1 e0 04             	shl    eax,0x4
c0016db7:	01 d0                	add    eax,edx
c0016db9:	c3                   	ret    

c0016dba <Vm::getSegment(unsigned int)>:
c0016dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dbe:	c1 e8 10             	shr    eax,0x10
c0016dc1:	c3                   	ret    

c0016dc2 <Vm::getOffset(unsigned int)>:
c0016dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc6:	c3                   	ret    

c0016dc7 <Vm::mainloop2()>:
c0016dc7:	83 ec 18             	sub    esp,0x18
c0016dca:	fa                   	cli    
c0016dcb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dd1:	6a 02                	push   0x2
c0016dd3:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016dda:	e8 89 f5 ff ff       	call   c0016368 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016de8:	52                   	push   edx
c0016de9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016ded:	52                   	push   edx
c0016dee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016df2:	52                   	push   edx
c0016df3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016df7:	50                   	push   eax
c0016df8:	e8 12 94 fe ff       	call   c000020f <goToVM86>
c0016dfd:	83 c4 2c             	add    esp,0x2c
c0016e00:	c3                   	ret    

c0016e01 <Vm::mainVm8086Loop(void*)>:
c0016e01:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e06:	48                   	dec    eax
c0016e07:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e0c:	75 01                	jne    c0016e0f <Vm::mainVm8086Loop(void*)+0xe>
c0016e0e:	fb                   	sti    
c0016e0f:	eb b6                	jmp    c0016dc7 <Vm::mainloop2()>

c0016e11 <Vm::mainloop3(unsigned long)>:
c0016e11:	83 ec 18             	sub    esp,0x18
c0016e14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e18:	fa                   	cli    
c0016e19:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e1f:	6a 02                	push   0x2
c0016e21:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e28:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e2d:	e8 36 f5 ff ff       	call   c0016368 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e32:	83 c4 1c             	add    esp,0x1c
c0016e35:	eb 90                	jmp    c0016dc7 <Vm::mainloop2()>

c0016e37 <Vm::initialise8086()>:
c0016e37:	83 ec 0c             	sub    esp,0xc
c0016e3a:	68 80 00 00 00       	push   0x80
c0016e3f:	6a 00                	push   0x0
c0016e41:	68 01 6e 01 c0       	push   0xc0016e01
c0016e46:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e4c:	e8 db f0 ff ff       	call   c0015f2c <Process::createThread(void (*)(void*), void*, int)>
c0016e51:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e58:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e5d:	68 00 01 00 00       	push   0x100
c0016e62:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e67:	6a 00                	push   0x0
c0016e69:	6a 00                	push   0x0
c0016e6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e71:	e8 c4 30 ff ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e76:	83 c4 2c             	add    esp,0x2c
c0016e79:	c3                   	ret    

c0016e7a <Vm::finish8086()>:
c0016e7a:	53                   	push   ebx
c0016e7b:	83 ec 08             	sub    esp,0x8
c0016e7e:	fa                   	cli    
c0016e7f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e85:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e8c:	75 15                	jne    c0016ea3 <Vm::finish8086()+0x29>
c0016e8e:	e8 e9 f2 ff ff       	call   c001617c <schedule()>
c0016e93:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e98:	48                   	dec    eax
c0016e99:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e9e:	75 de                	jne    c0016e7e <Vm::finish8086()+0x4>
c0016ea0:	fb                   	sti    
c0016ea1:	eb db                	jmp    c0016e7e <Vm::finish8086()+0x4>
c0016ea3:	83 ec 0c             	sub    esp,0xc
c0016ea6:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016eac:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eb2:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016eb9:	e8 d6 f7 ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c0016ebe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	8d 50 ff             	lea    edx,[eax-0x1]
c0016ec9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ecf:	85 d2                	test   edx,edx
c0016ed1:	75 01                	jne    c0016ed4 <Vm::finish8086()+0x5a>
c0016ed3:	fb                   	sti    
c0016ed4:	89 d8                	mov    eax,ebx
c0016ed6:	83 c4 08             	add    esp,0x8
c0016ed9:	5b                   	pop    ebx
c0016eda:	c3                   	ret    

c0016edb <Vm::getOutput8086(unsigned char*)>:
c0016edb:	57                   	push   edi
c0016edc:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016ee2:	56                   	push   esi
c0016ee3:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016ee8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016eec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016eee:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016ef3:	5e                   	pop    esi
c0016ef4:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016efe:	5f                   	pop    edi
c0016eff:	c3                   	ret    

c0016f00 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f00:	55                   	push   ebp
c0016f01:	57                   	push   edi
c0016f02:	56                   	push   esi
c0016f03:	53                   	push   ebx
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016f0b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016f0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016f17:	fa                   	cli    
c0016f18:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f1e:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f25:	75 15                	jne    c0016f3c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f27:	e8 50 f2 ff ff       	call   c001617c <schedule()>
c0016f2c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f31:	48                   	dec    eax
c0016f32:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f37:	75 de                	jne    c0016f17 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f39:	fb                   	sti    
c0016f3a:	eb db                	jmp    c0016f17 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f3c:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f41:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f4b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f4f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f53:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f57:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f5b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f5f:	0f b7 ff             	movzx  edi,di
c0016f62:	0f b7 f6             	movzx  esi,si
c0016f65:	50                   	push   eax
c0016f66:	6a 20                	push   0x20
c0016f68:	6a 00                	push   0x0
c0016f6a:	68 40 c7 02 c0       	push   0xc002c740
c0016f6f:	e8 7c 95 fe ff       	call   c00004f0 <memset>
c0016f74:	5a                   	pop    edx
c0016f75:	59                   	pop    ecx
c0016f76:	57                   	push   edi
c0016f77:	56                   	push   esi
c0016f78:	e8 2d fe ff ff       	call   c0016daa <Vm::realToLinear(unsigned short, unsigned short)>
c0016f7d:	83 c4 10             	add    esp,0x10
c0016f80:	89 c7                	mov    edi,eax
c0016f82:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f8c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f91:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f98:	48                   	dec    eax
c0016f99:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f9e:	75 01                	jne    c0016fa1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016fa0:	fb                   	sti    
c0016fa1:	83 ec 0c             	sub    esp,0xc
c0016fa4:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016faa:	e8 e5 f6 ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c0016faf:	83 c4 1c             	add    esp,0x1c
c0016fb2:	b0 01                	mov    al,0x1
c0016fb4:	5b                   	pop    ebx
c0016fb5:	5e                   	pop    esi
c0016fb6:	5f                   	pop    edi
c0016fb7:	5d                   	pop    ebp
c0016fb8:	c3                   	ret    

c0016fb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016fb9:	55                   	push   ebp
c0016fba:	57                   	push   edi
c0016fbb:	56                   	push   esi
c0016fbc:	53                   	push   ebx
c0016fbd:	83 ec 34             	sub    esp,0x34
c0016fc0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016fc4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016fc8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016fcc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016fd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fd8:	68 bc 2b 02 c0       	push   0xc0022bbc
c0016fdd:	e8 83 39 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0016fe2:	83 c4 10             	add    esp,0x10
c0016fe5:	fa                   	cli    
c0016fe6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016fec:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016ff2:	84 db                	test   bl,bl
c0016ff4:	75 15                	jne    c001700b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016ff6:	e8 81 f1 ff ff       	call   c001617c <schedule()>
c0016ffb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017000:	48                   	dec    eax
c0017001:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017006:	75 dd                	jne    c0016fe5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017008:	fb                   	sti    
c0017009:	eb da                	jmp    c0016fe5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001700b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001700f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017014:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c001701e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017022:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0017026:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001702a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001702e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017032:	50                   	push   eax
c0017033:	6a 20                	push   0x20
c0017035:	6a 00                	push   0x0
c0017037:	68 40 c7 02 c0       	push   0xc002c740
c001703c:	e8 af 94 fe ff       	call   c00004f0 <memset>
c0017041:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017048:	e8 89 0a ff ff       	call   c0007ad6 <malloc>
c001704d:	83 c4 0c             	add    esp,0xc
c0017050:	89 c5                	mov    ebp,eax
c0017052:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0017058:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001705c:	50                   	push   eax
c001705d:	e8 0a 4b ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c0017062:	83 c4 10             	add    esp,0x10
c0017065:	85 ed                	test   ebp,ebp
c0017067:	75 0a                	jne    c0017073 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017069:	83 ec 0c             	sub    esp,0xc
c001706c:	68 de 2b 02 c0       	push   0xc0022bde
c0017071:	eb 2b                	jmp    c001709e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0017073:	50                   	push   eax
c0017074:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017078:	50                   	push   eax
c0017079:	8d 44 24 20          	lea    eax,[esp+0x20]
c001707d:	50                   	push   eax
c001707e:	55                   	push   ebp
c001707f:	e8 08 4e ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0017084:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017088:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001708c:	83 c4 10             	add    esp,0x10
c001708f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017094:	74 27                	je     c00170bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	68 f2 2b 02 c0       	push   0xc0022bf2
c001709e:	e8 f4 a5 ff ff       	call   c0011697 <KePanic(char const*)>
c00170a3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170a8:	83 c4 10             	add    esp,0x10
c00170ab:	48                   	dec    eax
c00170ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170b1:	85 c0                	test   eax,eax
c00170b3:	75 01                	jne    c00170b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170b5:	fb                   	sti    
c00170b6:	31 db                	xor    ebx,ebx
c00170b8:	e9 90 00 00 00       	jmp    c001714d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170bd:	51                   	push   ecx
c00170be:	51                   	push   ecx
c00170bf:	6a 01                	push   0x1
c00170c1:	55                   	push   ebp
c00170c2:	e8 c3 4a ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	85 c0                	test   eax,eax
c00170cc:	74 26                	je     c00170f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170ce:	83 ec 0c             	sub    esp,0xc
c00170d1:	68 0b 2c 02 c0       	push   0xc0022c0b
c00170d6:	e8 bc a5 ff ff       	call   c0011697 <KePanic(char const*)>
c00170db:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170e0:	83 c4 10             	add    esp,0x10
c00170e3:	48                   	dec    eax
c00170e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170e9:	85 c0                	test   eax,eax
c00170eb:	75 c9                	jne    c00170b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170ed:	fb                   	sti    
c00170ee:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170f2:	eb 59                	jmp    c001714d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170f4:	0f b7 ff             	movzx  edi,di
c00170f7:	50                   	push   eax
c00170f8:	0f b7 f6             	movzx  esi,si
c00170fb:	50                   	push   eax
c00170fc:	57                   	push   edi
c00170fd:	56                   	push   esi
c00170fe:	e8 a7 fc ff ff       	call   c0016daa <Vm::realToLinear(unsigned short, unsigned short)>
c0017103:	5a                   	pop    edx
c0017104:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017107:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001710b:	51                   	push   ecx
c001710c:	50                   	push   eax
c001710d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017111:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017115:	55                   	push   ebp
c0017116:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017119:	83 c4 14             	add    esp,0x14
c001711c:	55                   	push   ebp
c001711d:	e8 c6 4a ff ff       	call   c000bbe8 <File::close()>
c0017122:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	48                   	dec    eax
c001712b:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017132:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017137:	85 c0                	test   eax,eax
c0017139:	75 01                	jne    c001713c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001713b:	fb                   	sti    
c001713c:	83 ec 0c             	sub    esp,0xc
c001713f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017145:	e8 4a f5 ff ff       	call   c0016694 <unblockTask(ThreadControlBlock*)>
c001714a:	83 c4 10             	add    esp,0x10
c001714d:	83 c4 2c             	add    esp,0x2c
c0017150:	88 d8                	mov    al,bl
c0017152:	5b                   	pop    ebx
c0017153:	5e                   	pop    esi
c0017154:	5f                   	pop    edi
c0017155:	5d                   	pop    ebp
c0017156:	c3                   	ret    

c0017157 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017157:	57                   	push   edi
c0017158:	56                   	push   esi
c0017159:	53                   	push   ebx
c001715a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001715e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017162:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017166:	83 e8 06             	sub    eax,0x6
c0017169:	0f b7 c0             	movzx  eax,ax
c001716c:	50                   	push   eax
c001716d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017172:	50                   	push   eax
c0017173:	e8 32 fc ff ff       	call   c0016daa <Vm::realToLinear(unsigned short, unsigned short)>
c0017178:	5a                   	pop    edx
c0017179:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c001717c:	59                   	pop    ecx
c001717d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017180:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017183:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017189:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001718c:	8d 56 02             	lea    edx,[esi+0x2]
c001718f:	66 89 10             	mov    WORD PTR [eax],dx
c0017192:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017196:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001719a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001719d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00171a1:	0f b6 f1             	movzx  esi,cl
c00171a4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171ae:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00171b2:	0f b6 d5             	movzx  edx,ch
c00171b5:	74 0a                	je     c00171c1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00171b7:	c1 e2 08             	shl    edx,0x8
c00171ba:	09 f2                	or     edx,esi
c00171bc:	80 ce 02             	or     dh,0x2
c00171bf:	eb 08                	jmp    c00171c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00171c1:	c1 e2 08             	shl    edx,0x8
c00171c4:	09 f2                	or     edx,esi
c00171c6:	80 e6 fd             	and    dh,0xfd
c00171c9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171d2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171d6:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171de:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171e1:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171e9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171ec:	5b                   	pop    ebx
c00171ed:	5e                   	pop    esi
c00171ee:	5f                   	pop    edi
c00171ef:	c3                   	ret    

c00171f0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171fa:	c1 e0 04             	shl    eax,0x4
c00171fd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017200:	c3                   	ret    

c0017201 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017201:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017206:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001720b:	c1 e0 04             	shl    eax,0x4
c001720e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017212:	c3                   	ret    

c0017213 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017213:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017218:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001721d:	c1 e0 04             	shl    eax,0x4
c0017220:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017223:	c3                   	ret    

c0017224 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017224:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017229:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001722e:	c1 e0 04             	shl    eax,0x4
c0017231:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017235:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017238:	c3                   	ret    

c0017239 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017239:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001723e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017243:	c1 e0 04             	shl    eax,0x4
c0017246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001724a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001724e:	c3                   	ret    

c001724f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001724f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017254:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017259:	c1 e0 04             	shl    eax,0x4
c001725c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017260:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017263:	c3                   	ret    

c0017264 <Vm::faultHandler(regs*)>:
c0017264:	55                   	push   ebp
c0017265:	57                   	push   edi
c0017266:	56                   	push   esi
c0017267:	53                   	push   ebx
c0017268:	83 ec 2c             	sub    esp,0x2c
c001726b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001726f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017272:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017276:	0f b7 f8             	movzx  edi,ax
c0017279:	52                   	push   edx
c001727a:	0f b7 c0             	movzx  eax,ax
c001727d:	50                   	push   eax
c001727e:	e8 27 fb ff ff       	call   c0016daa <Vm::realToLinear(unsigned short, unsigned short)>
c0017283:	5a                   	pop    edx
c0017284:	59                   	pop    ecx
c0017285:	89 c1                	mov    ecx,eax
c0017287:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001728a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001728e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017293:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017297:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001729a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001729e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00172a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172af:	e8 f6 fa ff ff       	call   c0016daa <Vm::realToLinear(unsigned short, unsigned short)>
c00172b4:	5e                   	pop    esi
c00172b5:	be 06 00 00 00       	mov    esi,0x6
c00172ba:	5d                   	pop    ebp
c00172bb:	31 ed                	xor    ebp,ebp
c00172bd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172c2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172c5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172cb:	0f 84 74 02 00 00    	je     c0017545 <Vm::faultHandler(regs*)+0x2e1>
c00172d1:	0f 87 94 00 00 00    	ja     c001736b <Vm::faultHandler(regs*)+0x107>
c00172d7:	83 fa 66             	cmp    edx,0x66
c00172da:	0f 84 e2 01 00 00    	je     c00174c2 <Vm::faultHandler(regs*)+0x25e>
c00172e0:	77 47                	ja     c0017329 <Vm::faultHandler(regs*)+0xc5>
c00172e2:	83 fa 36             	cmp    edx,0x36
c00172e5:	0f 84 ca 01 00 00    	je     c00174b5 <Vm::faultHandler(regs*)+0x251>
c00172eb:	77 1a                	ja     c0017307 <Vm::faultHandler(regs*)+0xa3>
c00172ed:	83 fa 26             	cmp    edx,0x26
c00172f0:	0f 84 98 01 00 00    	je     c001748e <Vm::faultHandler(regs*)+0x22a>
c00172f6:	83 fa 2e             	cmp    edx,0x2e
c00172f9:	0f 85 21 06 00 00    	jne    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c00172ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017302:	31 f6                	xor    esi,esi
c0017304:	41                   	inc    ecx
c0017305:	eb bb                	jmp    c00172c2 <Vm::faultHandler(regs*)+0x5e>
c0017307:	83 fa 64             	cmp    edx,0x64
c001730a:	0f 84 8b 01 00 00    	je     c001749b <Vm::faultHandler(regs*)+0x237>
c0017310:	0f 87 92 01 00 00    	ja     c00174a8 <Vm::faultHandler(regs*)+0x244>
c0017316:	83 fa 3e             	cmp    edx,0x3e
c0017319:	0f 85 01 06 00 00    	jne    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c001731f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017322:	be 01 00 00 00       	mov    esi,0x1
c0017327:	eb db                	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c0017329:	83 fa 6d             	cmp    edx,0x6d
c001732c:	0f 84 34 03 00 00    	je     c0017666 <Vm::faultHandler(regs*)+0x402>
c0017332:	77 17                	ja     c001734b <Vm::faultHandler(regs*)+0xe7>
c0017334:	83 fa 67             	cmp    edx,0x67
c0017337:	0f 84 92 01 00 00    	je     c00174cf <Vm::faultHandler(regs*)+0x26b>
c001733d:	83 fa 6c             	cmp    edx,0x6c
c0017340:	0f 84 b1 02 00 00    	je     c00175f7 <Vm::faultHandler(regs*)+0x393>
c0017346:	e9 d5 05 00 00       	jmp    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c001734b:	83 fa 6f             	cmp    edx,0x6f
c001734e:	0f 84 3d 04 00 00    	je     c0017791 <Vm::faultHandler(regs*)+0x52d>
c0017354:	0f 82 9f 03 00 00    	jb     c00176f9 <Vm::faultHandler(regs*)+0x495>
c001735a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017360:	0f 84 76 01 00 00    	je     c00174dc <Vm::faultHandler(regs*)+0x278>
c0017366:	e9 b5 05 00 00       	jmp    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c001736b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017371:	0f 84 51 05 00 00    	je     c00178c8 <Vm::faultHandler(regs*)+0x664>
c0017377:	0f 87 a9 00 00 00    	ja     c0017426 <Vm::faultHandler(regs*)+0x1c2>
c001737d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017383:	0f 84 d0 04 00 00    	je     c0017859 <Vm::faultHandler(regs*)+0x5f5>
c0017389:	77 78                	ja     c0017403 <Vm::faultHandler(regs*)+0x19f>
c001738b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017391:	0f 84 0e 02 00 00    	je     c00175a5 <Vm::faultHandler(regs*)+0x341>
c0017397:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001739d:	0f 85 7d 05 00 00    	jne    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c00173a3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00173a7:	89 d1                	mov    ecx,edx
c00173a9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00173ac:	c1 e1 08             	shl    ecx,0x8
c00173af:	09 ca                	or     edx,ecx
c00173b1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00173b4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00173b8:	89 d1                	mov    ecx,edx
c00173ba:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173be:	c1 e1 08             	shl    ecx,0x8
c00173c1:	09 ca                	or     edx,ecx
c00173c3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173c6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173ca:	89 d1                	mov    ecx,edx
c00173cc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173d0:	c1 e1 08             	shl    ecx,0x8
c00173d3:	09 ca                	or     edx,ecx
c00173d5:	81 ca 00 02 02 00    	or     edx,0x20200
c00173db:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173de:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173e8:	d1 e8                	shr    eax,1
c00173ea:	83 e0 01             	and    eax,0x1
c00173ed:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173f0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173f3:	83 c0 06             	add    eax,0x6
c00173f6:	25 ff ff 00 00       	and    eax,0xffff
c00173fb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173fe:	e9 19 05 00 00       	jmp    c001791c <Vm::faultHandler(regs*)+0x6b8>
c0017403:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017409:	0f 84 8f 04 00 00    	je     c001789e <Vm::faultHandler(regs*)+0x63a>
c001740f:	0f 82 60 04 00 00    	jb     c0017875 <Vm::faultHandler(regs*)+0x611>
c0017415:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001741b:	0f 84 94 04 00 00    	je     c00178b5 <Vm::faultHandler(regs*)+0x651>
c0017421:	e9 fa 04 00 00       	jmp    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c0017426:	81 fa ef 00 00 00    	cmp    edx,0xef
c001742c:	0f 84 d7 04 00 00    	je     c0017909 <Vm::faultHandler(regs*)+0x6a5>
c0017432:	77 2e                	ja     c0017462 <Vm::faultHandler(regs*)+0x1fe>
c0017434:	81 fa ed 00 00 00    	cmp    edx,0xed
c001743a:	0f 84 a4 04 00 00    	je     c00178e4 <Vm::faultHandler(regs*)+0x680>
c0017440:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017446:	0f 85 d4 04 00 00    	jne    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c001744c:	50                   	push   eax
c001744d:	50                   	push   eax
c001744e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017452:	50                   	push   eax
c0017453:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017457:	50                   	push   eax
c0017458:	e8 17 f9 ff ff       	call   c0016d74 <Vm::outbv(unsigned short, unsigned char)>
c001745d:	e9 9f 04 00 00       	jmp    c0017901 <Vm::faultHandler(regs*)+0x69d>
c0017462:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017468:	0f 84 6d 01 00 00    	je     c00175db <Vm::faultHandler(regs*)+0x377>
c001746e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017474:	0f 84 6f 01 00 00    	je     c00175e9 <Vm::faultHandler(regs*)+0x385>
c001747a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017480:	0f 85 9a 04 00 00    	jne    c0017920 <Vm::faultHandler(regs*)+0x6bc>
c0017486:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017489:	e9 76 fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c001748e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017491:	be 02 00 00 00       	mov    esi,0x2
c0017496:	e9 69 fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c001749b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001749e:	be 03 00 00 00       	mov    esi,0x3
c00174a3:	e9 5c fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c00174a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174ab:	be 04 00 00 00       	mov    esi,0x4
c00174b0:	e9 4f fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c00174b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b8:	be 05 00 00 00       	mov    esi,0x5
c00174bd:	e9 42 fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c00174c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174c5:	bd 01 00 00 00       	mov    ebp,0x1
c00174ca:	e9 35 fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c00174cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174d2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174d7:	e9 28 fe ff ff       	jmp    c0017304 <Vm::faultHandler(regs*)+0xa0>
c00174dc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174e3:	83 e5 01             	and    ebp,0x1
c00174e6:	74 30                	je     c0017518 <Vm::faultHandler(regs*)+0x2b4>
c00174e8:	83 e9 04             	sub    ecx,0x4
c00174eb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174f1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174f7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174fa:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017503:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017507:	0f 84 0c 04 00 00    	je     c0017919 <Vm::faultHandler(regs*)+0x6b5>
c001750d:	80 ce 02             	or     dh,0x2
c0017510:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017513:	e9 01 04 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017518:	83 e9 02             	sub    ecx,0x2
c001751b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017521:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017524:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017528:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001752e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017532:	74 05                	je     c0017539 <Vm::faultHandler(regs*)+0x2d5>
c0017534:	80 ce 02             	or     dh,0x2
c0017537:	eb 03                	jmp    c001753c <Vm::faultHandler(regs*)+0x2d8>
c0017539:	80 e6 fd             	and    dh,0xfd
c001753c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017540:	e9 d4 03 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017545:	83 e5 01             	and    ebp,0x1
c0017548:	74 2a                	je     c0017574 <Vm::faultHandler(regs*)+0x310>
c001754a:	8b 10                	mov    edx,DWORD PTR [eax]
c001754c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017552:	81 ca 00 02 02 00    	or     edx,0x20200
c0017558:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001755b:	8b 00                	mov    eax,DWORD PTR [eax]
c001755d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017563:	c1 e8 09             	shr    eax,0x9
c0017566:	83 e0 01             	and    eax,0x1
c0017569:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001756c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001756f:	83 c0 04             	add    eax,0x4
c0017572:	eb 24                	jmp    c0017598 <Vm::faultHandler(regs*)+0x334>
c0017574:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017577:	81 ca 00 02 02 00    	or     edx,0x20200
c001757d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017580:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017583:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017589:	c1 e8 09             	shr    eax,0x9
c001758c:	83 e0 01             	and    eax,0x1
c001758f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017592:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017595:	83 c0 02             	add    eax,0x2
c0017598:	25 ff ff 00 00       	and    eax,0xffff
c001759d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00175a0:	e9 74 03 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c00175a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175a9:	3d ee 00 00 00       	cmp    eax,0xee
c00175ae:	75 10                	jne    c00175c0 <Vm::faultHandler(regs*)+0x35c>
c00175b0:	83 ec 0c             	sub    esp,0xc
c00175b3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00175b6:	e8 56 f8 ff ff       	call   c0016e11 <Vm::mainloop3(unsigned long)>
c00175bb:	e9 44 03 00 00       	jmp    c0017904 <Vm::faultHandler(regs*)+0x6a0>
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175cb:	51                   	push   ecx
c00175cc:	50                   	push   eax
c00175cd:	53                   	push   ebx
c00175ce:	e8 84 fb ff ff       	call   c0017157 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175d3:	83 c4 20             	add    esp,0x20
c00175d6:	e9 41 03 00 00       	jmp    c001791c <Vm::faultHandler(regs*)+0x6b8>
c00175db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175e4:	e9 30 03 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c00175e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175ee:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175f2:	e9 22 03 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c00175f7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175fa:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175ff:	74 2b                	je     c001762c <Vm::faultHandler(regs*)+0x3c8>
c0017601:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017608:	76 22                	jbe    c001762c <Vm::faultHandler(regs*)+0x3c8>
c001760a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001760e:	50                   	push   eax
c001760f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017613:	50                   	push   eax
c0017614:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017618:	50                   	push   eax
c0017619:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001761d:	50                   	push   eax
c001761e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017622:	50                   	push   eax
c0017623:	6a 6c                	push   0x6c
c0017625:	6a 6c                	push   0x6c
c0017627:	e9 bd 01 00 00       	jmp    c00177e9 <Vm::faultHandler(regs*)+0x585>
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017633:	0f b7 f6             	movzx  esi,si
c0017636:	50                   	push   eax
c0017637:	e8 25 f7 ff ff       	call   c0016d61 <Vm::inbv(unsigned short)>
c001763c:	83 c4 0c             	add    esp,0xc
c001763f:	0f b6 c0             	movzx  eax,al
c0017642:	50                   	push   eax
c0017643:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017647:	50                   	push   eax
c0017648:	56                   	push   esi
c0017649:	e8 d6 fb ff ff       	call   c0017224 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001764e:	83 c4 10             	add    esp,0x10
c0017651:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017654:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017658:	74 03                	je     c001765d <Vm::faultHandler(regs*)+0x3f9>
c001765a:	48                   	dec    eax
c001765b:	eb 01                	jmp    c001765e <Vm::faultHandler(regs*)+0x3fa>
c001765d:	40                   	inc    eax
c001765e:	0f b7 c0             	movzx  eax,ax
c0017661:	e9 8b 00 00 00       	jmp    c00176f1 <Vm::faultHandler(regs*)+0x48d>
c0017666:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017669:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001766c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017671:	74 29                	je     c001769c <Vm::faultHandler(regs*)+0x438>
c0017673:	3d ff ff 00 00       	cmp    eax,0xffff
c0017678:	76 22                	jbe    c001769c <Vm::faultHandler(regs*)+0x438>
c001767a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001767e:	50                   	push   eax
c001767f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017683:	50                   	push   eax
c0017684:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017688:	50                   	push   eax
c0017689:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001768d:	50                   	push   eax
c001768e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017692:	50                   	push   eax
c0017693:	6a 6d                	push   0x6d
c0017695:	6a 6d                	push   0x6d
c0017697:	e9 4d 01 00 00       	jmp    c00177e9 <Vm::faultHandler(regs*)+0x585>
c001769c:	0f b7 c8             	movzx  ecx,ax
c001769f:	0f b7 f6             	movzx  esi,si
c00176a2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00176a5:	83 e5 01             	and    ebp,0x1
c00176a8:	74 20                	je     c00176ca <Vm::faultHandler(regs*)+0x466>
c00176aa:	ed                   	in     eax,dx
c00176ab:	55                   	push   ebp
c00176ac:	50                   	push   eax
c00176ad:	51                   	push   ecx
c00176ae:	56                   	push   esi
c00176af:	e8 9b fb ff ff       	call   c001724f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00176b4:	83 c4 10             	add    esp,0x10
c00176b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176ba:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176be:	74 05                	je     c00176c5 <Vm::faultHandler(regs*)+0x461>
c00176c0:	83 e8 04             	sub    eax,0x4
c00176c3:	eb 27                	jmp    c00176ec <Vm::faultHandler(regs*)+0x488>
c00176c5:	83 c0 04             	add    eax,0x4
c00176c8:	eb 22                	jmp    c00176ec <Vm::faultHandler(regs*)+0x488>
c00176ca:	66 ed                	in     ax,dx
c00176cc:	0f b7 c0             	movzx  eax,ax
c00176cf:	57                   	push   edi
c00176d0:	50                   	push   eax
c00176d1:	51                   	push   ecx
c00176d2:	56                   	push   esi
c00176d3:	e8 61 fb ff ff       	call   c0017239 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176d8:	83 c4 10             	add    esp,0x10
c00176db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176de:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176e2:	74 05                	je     c00176e9 <Vm::faultHandler(regs*)+0x485>
c00176e4:	83 e8 02             	sub    eax,0x2
c00176e7:	eb 03                	jmp    c00176ec <Vm::faultHandler(regs*)+0x488>
c00176e9:	83 c0 02             	add    eax,0x2
c00176ec:	25 ff ff 00 00       	and    eax,0xffff
c00176f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176f4:	e9 20 02 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c00176f9:	8d 46 ff             	lea    eax,[esi-0x1]
c00176fc:	0f b6 f0             	movzx  esi,al
c00176ff:	83 fe 05             	cmp    esi,0x5
c0017702:	77 23                	ja     c0017727 <Vm::faultHandler(regs*)+0x4c3>
c0017704:	ff 24 b5 80 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd380]
c001770b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017710:	eb 15                	jmp    c0017727 <Vm::faultHandler(regs*)+0x4c3>
c0017712:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017716:	eb 0f                	jmp    c0017727 <Vm::faultHandler(regs*)+0x4c3>
c0017718:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001771c:	eb 09                	jmp    c0017727 <Vm::faultHandler(regs*)+0x4c3>
c001771e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017722:	eb 03                	jmp    c0017727 <Vm::faultHandler(regs*)+0x4c3>
c0017724:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017727:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001772a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001772f:	74 29                	je     c001775a <Vm::faultHandler(regs*)+0x4f6>
c0017731:	3d ff ff 00 00       	cmp    eax,0xffff
c0017736:	76 22                	jbe    c001775a <Vm::faultHandler(regs*)+0x4f6>
c0017738:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001773c:	50                   	push   eax
c001773d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017741:	50                   	push   eax
c0017742:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017746:	50                   	push   eax
c0017747:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001774b:	50                   	push   eax
c001774c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017750:	50                   	push   eax
c0017751:	6a 6e                	push   0x6e
c0017753:	6a 6e                	push   0x6e
c0017755:	e9 8f 00 00 00       	jmp    c00177e9 <Vm::faultHandler(regs*)+0x585>
c001775a:	0f b7 c0             	movzx  eax,ax
c001775d:	52                   	push   edx
c001775e:	52                   	push   edx
c001775f:	50                   	push   eax
c0017760:	57                   	push   edi
c0017761:	e8 8a fa ff ff       	call   c00171f0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017766:	59                   	pop    ecx
c0017767:	0f b6 c0             	movzx  eax,al
c001776a:	5e                   	pop    esi
c001776b:	50                   	push   eax
c001776c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017770:	50                   	push   eax
c0017771:	e8 fe f5 ff ff       	call   c0016d74 <Vm::outbv(unsigned short, unsigned char)>
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001777c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017780:	74 03                	je     c0017785 <Vm::faultHandler(regs*)+0x521>
c0017782:	48                   	dec    eax
c0017783:	eb 01                	jmp    c0017786 <Vm::faultHandler(regs*)+0x522>
c0017785:	40                   	inc    eax
c0017786:	0f b7 c0             	movzx  eax,ax
c0017789:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001778c:	e9 88 01 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017791:	8d 46 ff             	lea    eax,[esi-0x1]
c0017794:	0f b6 f0             	movzx  esi,al
c0017797:	83 fe 05             	cmp    esi,0x5
c001779a:	77 1e                	ja     c00177ba <Vm::faultHandler(regs*)+0x556>
c001779c:	ff 24 b5 98 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd368]
c00177a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177a7:	eb 11                	jmp    c00177ba <Vm::faultHandler(regs*)+0x556>
c00177a9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00177ac:	eb 0c                	jmp    c00177ba <Vm::faultHandler(regs*)+0x556>
c00177ae:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00177b1:	eb 07                	jmp    c00177ba <Vm::faultHandler(regs*)+0x556>
c00177b3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00177b6:	eb 02                	jmp    c00177ba <Vm::faultHandler(regs*)+0x556>
c00177b8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00177ba:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177bd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177c2:	74 37                	je     c00177fb <Vm::faultHandler(regs*)+0x597>
c00177c4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177ca:	76 2f                	jbe    c00177fb <Vm::faultHandler(regs*)+0x597>
c00177cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177d0:	50                   	push   eax
c00177d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177d5:	50                   	push   eax
c00177d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177da:	50                   	push   eax
c00177db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177df:	50                   	push   eax
c00177e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177e4:	50                   	push   eax
c00177e5:	6a 6f                	push   0x6f
c00177e7:	6a 6f                	push   0x6f
c00177e9:	68 24 2c 02 c0       	push   0xc0022c24
c00177ee:	e8 72 31 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00177f3:	83 c4 20             	add    esp,0x20
c00177f6:	e9 83 01 00 00       	jmp    c001797e <Vm::faultHandler(regs*)+0x71a>
c00177fb:	0f b7 d7             	movzx  edx,di
c00177fe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017801:	0f b7 c6             	movzx  eax,si
c0017804:	81 e1 00 04 00 00    	and    ecx,0x400
c001780a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001780d:	83 e5 01             	and    ebp,0x1
c0017810:	74 1d                	je     c001782f <Vm::faultHandler(regs*)+0x5cb>
c0017812:	55                   	push   ebp
c0017813:	55                   	push   ebp
c0017814:	50                   	push   eax
c0017815:	52                   	push   edx
c0017816:	e8 f8 f9 ff ff       	call   c0017213 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	89 fa                	mov    edx,edi
c0017820:	ef                   	out    dx,eax
c0017821:	85 c9                	test   ecx,ecx
c0017823:	74 05                	je     c001782a <Vm::faultHandler(regs*)+0x5c6>
c0017825:	83 ee 04             	sub    esi,0x4
c0017828:	eb 21                	jmp    c001784b <Vm::faultHandler(regs*)+0x5e7>
c001782a:	83 c6 04             	add    esi,0x4
c001782d:	eb 1c                	jmp    c001784b <Vm::faultHandler(regs*)+0x5e7>
c001782f:	55                   	push   ebp
c0017830:	55                   	push   ebp
c0017831:	50                   	push   eax
c0017832:	52                   	push   edx
c0017833:	e8 c9 f9 ff ff       	call   c0017201 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	89 fa                	mov    edx,edi
c001783d:	66 ef                	out    dx,ax
c001783f:	85 c9                	test   ecx,ecx
c0017841:	74 05                	je     c0017848 <Vm::faultHandler(regs*)+0x5e4>
c0017843:	83 ee 02             	sub    esi,0x2
c0017846:	eb 03                	jmp    c001784b <Vm::faultHandler(regs*)+0x5e7>
c0017848:	83 c6 02             	add    esi,0x2
c001784b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017851:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017854:	e9 c0 00 00 00       	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017859:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017860:	83 ec 0c             	sub    esp,0xc
c0017863:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017867:	50                   	push   eax
c0017868:	e8 f4 f4 ff ff       	call   c0016d61 <Vm::inbv(unsigned short)>
c001786d:	0f b6 c0             	movzx  eax,al
c0017870:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017873:	eb 3a                	jmp    c00178af <Vm::faultHandler(regs*)+0x64b>
c0017875:	83 e5 01             	and    ebp,0x1
c0017878:	74 07                	je     c0017881 <Vm::faultHandler(regs*)+0x61d>
c001787a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001787e:	ed                   	in     eax,dx
c001787f:	eb 14                	jmp    c0017895 <Vm::faultHandler(regs*)+0x631>
c0017881:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017884:	66 31 f6             	xor    si,si
c0017887:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001788a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001788e:	66 ed                	in     ax,dx
c0017890:	0f b7 c0             	movzx  eax,ax
c0017893:	09 f0                	or     eax,esi
c0017895:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017898:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001789c:	eb 7e                	jmp    c001791c <Vm::faultHandler(regs*)+0x6b8>
c001789e:	52                   	push   edx
c001789f:	52                   	push   edx
c00178a0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00178a4:	50                   	push   eax
c00178a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178a9:	50                   	push   eax
c00178aa:	e8 c5 f4 ff ff       	call   c0016d74 <Vm::outbv(unsigned short, unsigned char)>
c00178af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178b3:	eb 4f                	jmp    c0017904 <Vm::faultHandler(regs*)+0x6a0>
c00178b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178b8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178bc:	83 e5 01             	and    ebp,0x1
c00178bf:	74 03                	je     c00178c4 <Vm::faultHandler(regs*)+0x660>
c00178c1:	ef                   	out    dx,eax
c00178c2:	eb d4                	jmp    c0017898 <Vm::faultHandler(regs*)+0x634>
c00178c4:	66 ef                	out    dx,ax
c00178c6:	eb d0                	jmp    c0017898 <Vm::faultHandler(regs*)+0x634>
c00178c8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178cf:	83 ec 0c             	sub    esp,0xc
c00178d2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178d6:	50                   	push   eax
c00178d7:	e8 85 f4 ff ff       	call   c0016d61 <Vm::inbv(unsigned short)>
c00178dc:	0f b6 c0             	movzx  eax,al
c00178df:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178e2:	eb 1d                	jmp    c0017901 <Vm::faultHandler(regs*)+0x69d>
c00178e4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178e7:	83 e5 01             	and    ebp,0x1
c00178ea:	74 03                	je     c00178ef <Vm::faultHandler(regs*)+0x68b>
c00178ec:	ed                   	in     eax,dx
c00178ed:	eb 0d                	jmp    c00178fc <Vm::faultHandler(regs*)+0x698>
c00178ef:	66 ed                	in     ax,dx
c00178f1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00178f4:	0f b7 c0             	movzx  eax,ax
c00178f7:	66 31 d2             	xor    dx,dx
c00178fa:	09 d0                	or     eax,edx
c00178fc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178ff:	eb 18                	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017901:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	eb 13                	jmp    c001791c <Vm::faultHandler(regs*)+0x6b8>
c0017909:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001790c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001790f:	83 e5 01             	and    ebp,0x1
c0017912:	74 03                	je     c0017917 <Vm::faultHandler(regs*)+0x6b3>
c0017914:	ef                   	out    dx,eax
c0017915:	eb 02                	jmp    c0017919 <Vm::faultHandler(regs*)+0x6b5>
c0017917:	66 ef                	out    dx,ax
c0017919:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001791c:	b0 01                	mov    al,0x1
c001791e:	eb 60                	jmp    c0017980 <Vm::faultHandler(regs*)+0x71c>
c0017920:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017924:	50                   	push   eax
c0017925:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017929:	50                   	push   eax
c001792a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001792e:	50                   	push   eax
c001792f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017933:	50                   	push   eax
c0017934:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017938:	50                   	push   eax
c0017939:	52                   	push   edx
c001793a:	52                   	push   edx
c001793b:	68 51 2c 02 c0       	push   0xc0022c51
c0017940:	e8 20 30 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017945:	83 c4 20             	add    esp,0x20
c0017948:	83 ec 0c             	sub    esp,0xc
c001794b:	6a 60                	push   0x60
c001794d:	e8 0f f4 ff ff       	call   c0016d61 <Vm::inbv(unsigned short)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	0f b6 d0             	movzx  edx,al
c0017958:	83 fa 1c             	cmp    edx,0x1c
c001795b:	74 05                	je     c0017962 <Vm::faultHandler(regs*)+0x6fe>
c001795d:	83 fa 5a             	cmp    edx,0x5a
c0017960:	75 e6                	jne    c0017948 <Vm::faultHandler(regs*)+0x6e4>
c0017962:	0f b6 c0             	movzx  eax,al
c0017965:	83 f8 1c             	cmp    eax,0x1c
c0017968:	74 05                	je     c001796f <Vm::faultHandler(regs*)+0x70b>
c001796a:	83 f8 5a             	cmp    eax,0x5a
c001796d:	75 0f                	jne    c001797e <Vm::faultHandler(regs*)+0x71a>
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	6a 60                	push   0x60
c0017974:	e8 e8 f3 ff ff       	call   c0016d61 <Vm::inbv(unsigned short)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	eb e4                	jmp    c0017962 <Vm::faultHandler(regs*)+0x6fe>
c001797e:	31 c0                	xor    eax,eax
c0017980:	83 c4 2c             	add    esp,0x2c
c0017983:	5b                   	pop    ebx
c0017984:	5e                   	pop    esi
c0017985:	5f                   	pop    edi
c0017986:	5d                   	pop    ebp
c0017987:	c3                   	ret    

c0017988 <noCopro(unsigned long)>:
c0017988:	c3                   	ret    

c0017989 <nmiHandler(regs*, void*)>:
c0017989:	83 ec 0c             	sub    esp,0xc
c001798c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017991:	83 ec 0c             	sub    esp,0xc
c0017994:	50                   	push   eax
c0017995:	e8 3e f9 fe ff       	call   c00072d8 <Computer::handleNMI()>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	90                   	nop
c001799e:	83 c4 0c             	add    esp,0xc
c00179a1:	c3                   	ret    

c00179a2 <doubleFault(regs*, void*)>:
c00179a2:	55                   	push   ebp
c00179a3:	89 e5                	mov    ebp,esp
c00179a5:	83 ec 08             	sub    esp,0x8
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	68 b0 2c 02 c0       	push   0xc0022cb0
c00179b0:	e8 e2 9c ff ff       	call   c0011697 <KePanic(char const*)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	90                   	nop
c00179b9:	c9                   	leave  
c00179ba:	c3                   	ret    

c00179bb <displayDebugInfo(regs*)>:
c00179bb:	83 ec 1c             	sub    esp,0x1c
c00179be:	0f 20 c0             	mov    eax,cr0
c00179c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179c5:	0f 20 d0             	mov    eax,cr2
c00179c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179cc:	0f 20 d8             	mov    eax,cr3
c00179cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179d3:	0f 20 e0             	mov    eax,cr4
c00179d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00179d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179dd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00179e0:	83 ec 08             	sub    esp,0x8
c00179e3:	50                   	push   eax
c00179e4:	68 cc 2c 02 c0       	push   0xc0022ccc
c00179e9:	e8 77 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c00179ee:	83 c4 10             	add    esp,0x10
c00179f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179f8:	83 ec 08             	sub    esp,0x8
c00179fb:	50                   	push   eax
c00179fc:	68 bd 2c 02 c0       	push   0xc0022cbd
c0017a01:	e8 5f 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a10:	83 ec 08             	sub    esp,0x8
c0017a13:	50                   	push   eax
c0017a14:	68 c8 2c 02 c0       	push   0xc0022cc8
c0017a19:	e8 47 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a28:	83 ec 08             	sub    esp,0x8
c0017a2b:	50                   	push   eax
c0017a2c:	68 d7 2c 02 c0       	push   0xc0022cd7
c0017a31:	e8 2f 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	50                   	push   eax
c0017a44:	68 e2 2c 02 c0       	push   0xc0022ce2
c0017a49:	e8 17 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	83 ec 08             	sub    esp,0x8
c0017a54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a58:	68 ed 2c 02 c0       	push   0xc0022ced
c0017a5d:	e8 03 2f ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	83 ec 08             	sub    esp,0x8
c0017a68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a6c:	68 f8 2c 02 c0       	push   0xc0022cf8
c0017a71:	e8 ef 2e ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a76:	83 c4 10             	add    esp,0x10
c0017a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a80:	c1 e0 05             	shl    eax,0x5
c0017a83:	8d 90 80 40 02 c0    	lea    edx,[eax-0x3ffdbf80]
c0017a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a90:	83 ec 04             	sub    esp,0x4
c0017a93:	52                   	push   edx
c0017a94:	50                   	push   eax
c0017a95:	68 03 2d 02 c0       	push   0xc0022d03
c0017a9a:	e8 c6 2e ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aad:	83 ec 0c             	sub    esp,0xc
c0017ab0:	50                   	push   eax
c0017ab1:	e8 c3 0c ff ff       	call   c0008779 <setActiveTerminal(VgaText*)>
c0017ab6:	83 c4 10             	add    esp,0x10
c0017ab9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017abe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac4:	83 ec 08             	sub    esp,0x8
c0017ac7:	68 12 2d 02 c0       	push   0xc0022d12
c0017acc:	50                   	push   eax
c0017acd:	e8 f4 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ada:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ae4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017ae7:	83 ec 08             	sub    esp,0x8
c0017aea:	52                   	push   edx
c0017aeb:	50                   	push   eax
c0017aec:	e8 8f 0f ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aff:	83 ec 08             	sub    esp,0x8
c0017b02:	68 20 2d 02 c0       	push   0xc0022d20
c0017b07:	50                   	push   eax
c0017b08:	e8 b9 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017b0d:	83 c4 10             	add    esp,0x10
c0017b10:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b15:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b20:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b22:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b25:	83 c2 0c             	add    edx,0xc
c0017b28:	83 ec 08             	sub    esp,0x8
c0017b2b:	52                   	push   edx
c0017b2c:	50                   	push   eax
c0017b2d:	e8 94 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b40:	83 ec 08             	sub    esp,0x8
c0017b43:	68 29 2d 02 c0       	push   0xc0022d29
c0017b48:	50                   	push   eax
c0017b49:	e8 78 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b60:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b63:	83 ec 08             	sub    esp,0x8
c0017b66:	52                   	push   edx
c0017b67:	50                   	push   eax
c0017b68:	e8 13 0f ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	68 31 2d 02 c0       	push   0xc0022d31
c0017b83:	50                   	push   eax
c0017b84:	e8 3d 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b9b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b9e:	83 ec 08             	sub    esp,0x8
c0017ba1:	52                   	push   edx
c0017ba2:	50                   	push   eax
c0017ba3:	e8 d8 0e ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb6:	83 ec 08             	sub    esp,0x8
c0017bb9:	68 39 2d 02 c0       	push   0xc0022d39
c0017bbe:	50                   	push   eax
c0017bbf:	e8 02 0f ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017bc4:	83 c4 10             	add    esp,0x10
c0017bc7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bcc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bd6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017bd9:	83 ec 08             	sub    esp,0x8
c0017bdc:	52                   	push   edx
c0017bdd:	50                   	push   eax
c0017bde:	e8 9d 0e ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017beb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf1:	83 ec 08             	sub    esp,0x8
c0017bf4:	68 41 2d 02 c0       	push   0xc0022d41
c0017bf9:	50                   	push   eax
c0017bfa:	e8 c7 0e ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c11:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c14:	83 ec 08             	sub    esp,0x8
c0017c17:	52                   	push   edx
c0017c18:	50                   	push   eax
c0017c19:	e8 62 0e ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c2c:	83 ec 08             	sub    esp,0x8
c0017c2f:	68 49 2d 02 c0       	push   0xc0022d49
c0017c34:	50                   	push   eax
c0017c35:	e8 8c 0e ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017c3a:	83 c4 10             	add    esp,0x10
c0017c3d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c4c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c4f:	83 ec 08             	sub    esp,0x8
c0017c52:	52                   	push   edx
c0017c53:	50                   	push   eax
c0017c54:	e8 27 0e ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017c59:	83 c4 10             	add    esp,0x10
c0017c5c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c67:	83 ec 08             	sub    esp,0x8
c0017c6a:	68 51 2d 02 c0       	push   0xc0022d51
c0017c6f:	50                   	push   eax
c0017c70:	e8 51 0e ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c87:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c8a:	83 ec 08             	sub    esp,0x8
c0017c8d:	52                   	push   edx
c0017c8e:	50                   	push   eax
c0017c8f:	e8 ec 0d ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017c94:	83 c4 10             	add    esp,0x10
c0017c97:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca2:	83 ec 08             	sub    esp,0x8
c0017ca5:	68 59 2d 02 c0       	push   0xc0022d59
c0017caa:	50                   	push   eax
c0017cab:	e8 16 0e ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cbe:	83 ec 08             	sub    esp,0x8
c0017cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cc5:	50                   	push   eax
c0017cc6:	e8 b5 0d ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017ccb:	83 c4 10             	add    esp,0x10
c0017cce:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cd9:	83 ec 08             	sub    esp,0x8
c0017cdc:	68 62 2d 02 c0       	push   0xc0022d62
c0017ce1:	50                   	push   eax
c0017ce2:	e8 df 0d ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cf5:	83 ec 08             	sub    esp,0x8
c0017cf8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cfc:	50                   	push   eax
c0017cfd:	e8 7e 0d ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d10:	83 ec 08             	sub    esp,0x8
c0017d13:	68 6a 2d 02 c0       	push   0xc0022d6a
c0017d18:	50                   	push   eax
c0017d19:	e8 a8 0d ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d2c:	83 ec 08             	sub    esp,0x8
c0017d2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d33:	50                   	push   eax
c0017d34:	e8 47 0d ff ff       	call   c0008a80 <VgaText::putx(unsigned int)>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	fa                   	cli    
c0017d3d:	f4                   	hlt    
c0017d3e:	eb fe                	jmp    c0017d3e <displayDebugInfo(regs*)+0x383>

c0017d40 <HalSystemIdle()>:
c0017d40:	56                   	push   esi
c0017d41:	53                   	push   ebx
c0017d42:	83 ec 14             	sub    esp,0x14
c0017d45:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d50:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d56:	83 e0 04             	and    eax,0x4
c0017d59:	0f b6 c0             	movzx  eax,al
c0017d5c:	85 c0                	test   eax,eax
c0017d5e:	0f 95 c0             	setne  al
c0017d61:	0f b6 c0             	movzx  eax,al
c0017d64:	85 c0                	test   eax,eax
c0017d66:	74 4c                	je     c0017db4 <HalSystemIdle()+0x74>
c0017d68:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d6d:	83 ec 08             	sub    esp,0x8
c0017d70:	68 e1 00 00 00       	push   0xe1
c0017d75:	50                   	push   eax
c0017d76:	e8 67 f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d86:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d8f:	83 e2 02             	and    edx,0x2
c0017d92:	89 d3                	mov    ebx,edx
c0017d94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d98:	83 e2 00             	and    edx,0x0
c0017d9b:	89 d6                	mov    esi,edx
c0017d9d:	56                   	push   esi
c0017d9e:	53                   	push   ebx
c0017d9f:	68 e1 00 00 00       	push   0xe1
c0017da4:	50                   	push   eax
c0017da5:	e8 64 f3 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	e8 e2 83 fe ff       	call   c0000194 <doTPAUSE>
c0017db2:	eb 01                	jmp    c0017db5 <HalSystemIdle()+0x75>
c0017db4:	f4                   	hlt    
c0017db5:	90                   	nop
c0017db6:	83 c4 14             	add    esp,0x14
c0017db9:	5b                   	pop    ebx
c0017dba:	5e                   	pop    esi
c0017dbb:	c3                   	ret    

c0017dbc <displayProgramFault(char const*)>:
c0017dbc:	83 ec 0c             	sub    esp,0xc
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dc6:	e8 9a 2b ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017dcb:	83 c4 10             	add    esp,0x10
c0017dce:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dde:	85 c0                	test   eax,eax
c0017de0:	74 21                	je     c0017e03 <displayProgramFault(char const*)+0x47>
c0017de2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017de9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017df2:	6a 04                	push   0x4
c0017df4:	6a 0f                	push   0xf
c0017df6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dfa:	50                   	push   eax
c0017dfb:	e8 38 0d ff ff       	call   c0008b38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	90                   	nop
c0017e04:	83 c4 0c             	add    esp,0xc
c0017e07:	c3                   	ret    

c0017e08 <gpFault(regs*, void*)>:
c0017e08:	83 ec 1c             	sub    esp,0x1c
c0017e0b:	c7 05 74 c7 02 c0 64 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017264
c0017e15:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e1a:	85 c0                	test   eax,eax
c0017e1c:	74 1e                	je     c0017e3c <gpFault(regs*, void*)+0x34>
c0017e1e:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2a:	ff d0                	call   eax
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e33:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e38:	85 c0                	test   eax,eax
c0017e3a:	75 2e                	jne    c0017e6a <gpFault(regs*, void*)+0x62>
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	68 72 2d 02 c0       	push   0xc0022d72
c0017e44:	e8 73 ff ff ff       	call   c0017dbc <displayProgramFault(char const*)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e53:	e8 63 fb ff ff       	call   c00179bb <displayDebugInfo(regs*)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	6a 00                	push   0x0
c0017e60:	e8 a3 ed ff ff       	call   c0016c08 <Thr::terminateFromIRQ(int)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	eb 01                	jmp    c0017e6b <gpFault(regs*, void*)+0x63>
c0017e6a:	90                   	nop
c0017e6b:	83 c4 1c             	add    esp,0x1c
c0017e6e:	c3                   	ret    

c0017e6f <pgFault(regs*, void*)>:
c0017e6f:	83 ec 1c             	sub    esp,0x1c
c0017e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e76:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e79:	0f 20 d0             	mov    eax,cr2
c0017e7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e84:	83 ec 04             	sub    esp,0x4
c0017e87:	52                   	push   edx
c0017e88:	50                   	push   eax
c0017e89:	68 50 2e 02 c0       	push   0xc0022e50
c0017e8e:	e8 d2 2a ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ea0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017ea6:	0f 20 d2             	mov    edx,cr2
c0017ea9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ead:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017eb1:	83 ec 08             	sub    esp,0x8
c0017eb4:	52                   	push   edx
c0017eb5:	50                   	push   eax
c0017eb6:	e8 f5 24 ff ff       	call   c000a3b0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	0f b6 c0             	movzx  eax,al
c0017ec1:	85 c0                	test   eax,eax
c0017ec3:	75 2e                	jne    c0017ef3 <pgFault(regs*, void*)+0x84>
c0017ec5:	83 ec 0c             	sub    esp,0xc
c0017ec8:	68 8b 2d 02 c0       	push   0xc0022d8b
c0017ecd:	e8 ea fe ff ff       	call   c0017dbc <displayProgramFault(char const*)>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	83 ec 0c             	sub    esp,0xc
c0017ed8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017edc:	e8 da fa ff ff       	call   c00179bb <displayDebugInfo(regs*)>
c0017ee1:	83 c4 10             	add    esp,0x10
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	6a 00                	push   0x0
c0017ee9:	e8 1a ed ff ff       	call   c0016c08 <Thr::terminateFromIRQ(int)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	eb 01                	jmp    c0017ef4 <pgFault(regs*, void*)+0x85>
c0017ef3:	90                   	nop
c0017ef4:	83 c4 1c             	add    esp,0x1c
c0017ef7:	c3                   	ret    

c0017ef8 <otherISRHandler(regs*, void*)>:
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	83 ec 0c             	sub    esp,0xc
c0017efe:	68 78 2e 02 c0       	push   0xc0022e78
c0017f03:	e8 b4 fe ff ff       	call   c0017dbc <displayProgramFault(char const*)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f12:	e8 a4 fa ff ff       	call   c00179bb <displayDebugInfo(regs*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	6a 00                	push   0x0
c0017f1f:	e8 e4 ec ff ff       	call   c0016c08 <Thr::terminateFromIRQ(int)>
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	90                   	nop
c0017f28:	83 c4 0c             	add    esp,0xc
c0017f2b:	c3                   	ret    

c0017f2c <opcodeFault(regs*, void*)>:
c0017f2c:	55                   	push   ebp
c0017f2d:	89 e5                	mov    ebp,esp
c0017f2f:	83 ec 08             	sub    esp,0x8
c0017f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f38:	83 ec 08             	sub    esp,0x8
c0017f3b:	50                   	push   eax
c0017f3c:	68 96 2d 02 c0       	push   0xc0022d96
c0017f41:	e8 1f 2a ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f54:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f5a:	0f b6 c0             	movzx  eax,al
c0017f5d:	85 c0                	test   eax,eax
c0017f5f:	74 21                	je     c0017f82 <opcodeFault(regs*, void*)+0x56>
c0017f61:	83 ec 0c             	sub    esp,0xc
c0017f64:	68 a0 2e 02 c0       	push   0xc0022ea0
c0017f69:	e8 f7 29 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f77:	8d 50 19             	lea    edx,[eax+0x19]
c0017f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f80:	eb 2b                	jmp    c0017fad <opcodeFault(regs*, void*)+0x81>
c0017f82:	83 ec 0c             	sub    esp,0xc
c0017f85:	68 a4 2d 02 c0       	push   0xc0022da4
c0017f8a:	e8 2d fe ff ff       	call   c0017dbc <displayProgramFault(char const*)>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	83 ec 0c             	sub    esp,0xc
c0017f95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f98:	e8 1e fa ff ff       	call   c00179bb <displayDebugInfo(regs*)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	83 ec 0c             	sub    esp,0xc
c0017fa3:	6a 00                	push   0x0
c0017fa5:	e8 5e ec ff ff       	call   c0016c08 <Thr::terminateFromIRQ(int)>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	c9                   	leave  
c0017fae:	c3                   	ret    

c0017faf <i386SaveCoprocessor(void*)>:
c0017faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fb3:	83 c0 3f             	add    eax,0x3f
c0017fb6:	83 e0 c0             	and    eax,0xffffffc0
c0017fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fbd:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017fc3 <i386LoadCoprocessor(void*)>:
c0017fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fc7:	83 c0 3f             	add    eax,0x3f
c0017fca:	83 e0 c0             	and    eax,0xffffffc0
c0017fcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fd1:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017fd7 <x87EmulHandler(regs*, void*)>:
c0017fd7:	53                   	push   ebx
c0017fd8:	83 ec 08             	sub    esp,0x8
c0017fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017fe4:	74 10                	je     c0017ff6 <x87EmulHandler(regs*, void*)+0x1f>
c0017fe6:	83 ec 0c             	sub    esp,0xc
c0017fe9:	68 b1 2d 02 c0       	push   0xc0022db1
c0017fee:	e8 a4 96 ff ff       	call   c0011697 <KePanic(char const*)>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	0f 20 c0             	mov    eax,cr0
c0017ff9:	a8 08                	test   al,0x8
c0017ffb:	74 59                	je     c0018056 <x87EmulHandler(regs*, void*)+0x7f>
c0017ffd:	0f 06                	clts   
c0017fff:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018004:	85 c0                	test   eax,eax
c0018006:	74 0e                	je     c0018016 <x87EmulHandler(regs*, void*)+0x3f>
c0018008:	83 ec 0c             	sub    esp,0xc
c001800b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001800e:	e8 9c ff ff ff       	call   c0017faf <i386SaveCoprocessor(void*)>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001801c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018020:	75 12                	jne    c0018034 <x87EmulHandler(regs*, void*)+0x5d>
c0018022:	83 ec 0c             	sub    esp,0xc
c0018025:	68 40 02 00 00       	push   0x240
c001802a:	e8 a7 fa fe ff       	call   c0007ad6 <malloc>
c001802f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018032:	eb 10                	jmp    c0018044 <x87EmulHandler(regs*, void*)+0x6d>
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001803c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001803f:	e8 7f ff ff ff       	call   c0017fc3 <i386LoadCoprocessor(void*)>
c0018044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018049:	83 c4 10             	add    esp,0x10
c001804c:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0018051:	83 c4 08             	add    esp,0x8
c0018054:	5b                   	pop    ebx
c0018055:	c3                   	ret    
c0018056:	83 ec 0c             	sub    esp,0xc
c0018059:	68 c5 2d 02 c0       	push   0xc0022dc5
c001805e:	e8 02 29 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0018063:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001806b:	83 c4 18             	add    esp,0x18
c001806e:	5b                   	pop    ebx
c001806f:	e9 94 eb ff ff       	jmp    c0016c08 <Thr::terminateFromIRQ(int)>

c0018074 <HalInitialiseCoprocessor()>:
c0018074:	83 ec 10             	sub    esp,0x10
c0018077:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018081:	6a 00                	push   0x0
c0018083:	68 d7 7f 01 c0       	push   0xc0017fd7
c0018088:	6a 07                	push   0x7
c001808a:	e8 8b 4e ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001808f:	e8 4c 70 00 00       	call   c001f0e0 <avxDetect>
c0018094:	83 c4 10             	add    esp,0x10
c0018097:	85 c0                	test   eax,eax
c0018099:	74 1c                	je     c00180b7 <HalInitialiseCoprocessor()+0x43>
c001809b:	c7 05 70 c7 02 c0 0a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f10a
c00180a5:	c7 05 6c c7 02 c0 1b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f11b
c00180af:	83 c4 0c             	add    esp,0xc
c00180b2:	e9 75 70 00 00       	jmp    c001f12c <avxInit>
c00180b7:	e8 b4 73 00 00       	call   c001f470 <absolutelyNoChanceInHell>
c00180bc:	85 c0                	test   eax,eax
c00180be:	74 1c                	je     c00180dc <HalInitialiseCoprocessor()+0x68>
c00180c0:	c7 05 70 c7 02 c0 88 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f488
c00180ca:	c7 05 6c c7 02 c0 90 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f490
c00180d4:	83 c4 0c             	add    esp,0xc
c00180d7:	e9 bc 73 00 00       	jmp    c001f498 <sseInit>
c00180dc:	e8 d5 73 00 00       	call   c001f4b6 <x87Detect>
c00180e1:	85 c0                	test   eax,eax
c00180e3:	74 1c                	je     c0018101 <HalInitialiseCoprocessor()+0x8d>
c00180e5:	c7 05 70 c7 02 c0 d1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4d1
c00180ef:	c7 05 6c c7 02 c0 d8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4d8
c00180f9:	83 c4 0c             	add    esp,0xc
c00180fc:	e9 de 73 00 00       	jmp    c001f4df <x87Init>
c0018101:	c7 05 70 c7 02 c0 88 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017988
c001810b:	c7 05 6c c7 02 c0 88 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017988
c0018115:	0f 20 c0             	mov    eax,cr0
c0018118:	83 c8 04             	or     eax,0x4
c001811b:	0f 22 c0             	mov    cr0,eax
c001811e:	83 c4 0c             	add    esp,0xc
c0018121:	c3                   	ret    

c0018122 <HalPanic(char const*)>:
c0018122:	53                   	push   ebx
c0018123:	83 ec 10             	sub    esp,0x10
c0018126:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001812a:	fa                   	cli    
c001812b:	53                   	push   ebx
c001812c:	68 db 2d 02 c0       	push   0xc0022ddb
c0018131:	e8 2f 28 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c0018136:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	85 c0                	test   eax,eax
c0018140:	74 09                	je     c001814b <HalPanic(char const*)+0x29>
c0018142:	83 ec 0c             	sub    esp,0xc
c0018145:	53                   	push   ebx
c0018146:	ff d0                	call   eax
c0018148:	83 c4 10             	add    esp,0x10
c001814b:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018150:	85 c0                	test   eax,eax
c0018152:	0f 84 dc 00 00 00    	je     c0018234 <HalPanic(char const*)+0x112>
c0018158:	52                   	push   edx
c0018159:	6a 01                	push   0x1
c001815b:	6a 0f                	push   0xf
c001815d:	50                   	push   eax
c001815e:	e8 71 04 ff ff       	call   c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018163:	59                   	pop    ecx
c0018164:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001816a:	e8 55 06 ff ff       	call   c00087c4 <VgaText::clearScreen()>
c001816f:	58                   	pop    eax
c0018170:	5a                   	pop    edx
c0018171:	68 50 0f 02 c0       	push   0xc0020f50
c0018176:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001817c:	e8 8b 04 ff ff       	call   c000860c <VgaText::setTitle(char*)>
c0018181:	83 c4 0c             	add    esp,0xc
c0018184:	6a 01                	push   0x1
c0018186:	6a 0f                	push   0xf
c0018188:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001818e:	e8 41 04 ff ff       	call   c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018193:	59                   	pop    ecx
c0018194:	58                   	pop    eax
c0018195:	68 f4 2d 02 c0       	push   0xc0022df4
c001819a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a0:	e8 21 09 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c00181a5:	83 c4 0c             	add    esp,0xc
c00181a8:	6a 0f                	push   0xf
c00181aa:	6a 01                	push   0x1
c00181ac:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b2:	e8 1d 04 ff ff       	call   c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181b7:	58                   	pop    eax
c00181b8:	5a                   	pop    edx
c00181b9:	68 fd 2d 02 c0       	push   0xc0022dfd
c00181be:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181c4:	e8 fd 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c00181c9:	83 c4 0c             	add    esp,0xc
c00181cc:	6a 01                	push   0x1
c00181ce:	6a 0f                	push   0xf
c00181d0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181d6:	e8 f9 03 ff ff       	call   c00085d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181db:	59                   	pop    ecx
c00181dc:	58                   	pop    eax
c00181dd:	68 41 2e 02 c0       	push   0xc0022e41
c00181e2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181e8:	e8 d9 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c00181ed:	58                   	pop    eax
c00181ee:	5a                   	pop    edx
c00181ef:	68 0a 2e 02 c0       	push   0xc0022e0a
c00181f4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181fa:	e8 c7 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c00181ff:	59                   	pop    ecx
c0018200:	58                   	pop    eax
c0018201:	68 44 2e 02 c0       	push   0xc0022e44
c0018206:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001820c:	e8 b5 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0018211:	58                   	pop    eax
c0018212:	5a                   	pop    edx
c0018213:	53                   	push   ebx
c0018214:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001821a:	e8 a7 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001821f:	59                   	pop    ecx
c0018220:	5b                   	pop    ebx
c0018221:	68 41 2e 02 c0       	push   0xc0022e41
c0018226:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001822c:	e8 95 08 ff ff       	call   c0008ac6 <VgaText::puts(char const*)>
c0018231:	83 c4 10             	add    esp,0x10
c0018234:	eb fe                	jmp    c0018234 <HalPanic(char const*)+0x112>

c0018236 <HalQueryPerformanceCounter()>:
c0018236:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001823b:	31 d2                	xor    edx,edx
c001823d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018243:	31 c0                	xor    eax,eax
c0018245:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001824c:	74 02                	je     c0018250 <HalQueryPerformanceCounter()+0x1a>
c001824e:	0f 31                	rdtsc  
c0018250:	c3                   	ret    

c0018251 <HalInitialise()>:
c0018251:	53                   	push   ebx
c0018252:	83 ec 08             	sub    esp,0x8
c0018255:	e8 f0 4e ff ff       	call   c000d14a <setupINTS()>
c001825a:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018261:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018266:	75 0f                	jne    c0018277 <HalInitialise()+0x26>
c0018268:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001826e:	83 e2 fe             	and    edx,0xfffffffe
c0018271:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018277:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001827d:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018284:	83 e2 fe             	and    edx,0xfffffffe
c0018287:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001828d:	e8 9e 02 00 00       	call   c0018530 <picOpen()>
c0018292:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018299:	74 0a                	je     c00182a5 <HalInitialise()+0x54>
c001829b:	e8 e0 01 00 00       	call   c0018480 <picDisable()>
c00182a0:	e8 ad 67 00 00       	call   c001ea52 <apicOpen()>
c00182a5:	bb 0f 00 00 00       	mov    ebx,0xf
c00182aa:	50                   	push   eax
c00182ab:	6a 00                	push   0x0
c00182ad:	68 f8 7e 01 c0       	push   0xc0017ef8
c00182b2:	6a 00                	push   0x0
c00182b4:	e8 61 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b9:	83 c4 0c             	add    esp,0xc
c00182bc:	6a 00                	push   0x0
c00182be:	68 f8 7e 01 c0       	push   0xc0017ef8
c00182c3:	6a 01                	push   0x1
c00182c5:	e8 50 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ca:	83 c4 0c             	add    esp,0xc
c00182cd:	6a 00                	push   0x0
c00182cf:	68 89 79 01 c0       	push   0xc0017989
c00182d4:	6a 02                	push   0x2
c00182d6:	e8 3f 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182db:	83 c4 0c             	add    esp,0xc
c00182de:	6a 00                	push   0x0
c00182e0:	68 f8 7e 01 c0       	push   0xc0017ef8
c00182e5:	6a 03                	push   0x3
c00182e7:	e8 2e 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ec:	83 c4 0c             	add    esp,0xc
c00182ef:	6a 00                	push   0x0
c00182f1:	68 f8 7e 01 c0       	push   0xc0017ef8
c00182f6:	6a 04                	push   0x4
c00182f8:	e8 1d 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fd:	83 c4 0c             	add    esp,0xc
c0018300:	6a 00                	push   0x0
c0018302:	68 f8 7e 01 c0       	push   0xc0017ef8
c0018307:	6a 05                	push   0x5
c0018309:	e8 0c 4c ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001830e:	83 c4 0c             	add    esp,0xc
c0018311:	6a 00                	push   0x0
c0018313:	68 2c 7f 01 c0       	push   0xc0017f2c
c0018318:	6a 06                	push   0x6
c001831a:	e8 fb 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001831f:	83 c4 0c             	add    esp,0xc
c0018322:	6a 00                	push   0x0
c0018324:	68 a2 79 01 c0       	push   0xc00179a2
c0018329:	6a 08                	push   0x8
c001832b:	e8 ea 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018330:	83 c4 0c             	add    esp,0xc
c0018333:	6a 00                	push   0x0
c0018335:	68 f8 7e 01 c0       	push   0xc0017ef8
c001833a:	6a 09                	push   0x9
c001833c:	e8 d9 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018341:	83 c4 0c             	add    esp,0xc
c0018344:	6a 00                	push   0x0
c0018346:	68 f8 7e 01 c0       	push   0xc0017ef8
c001834b:	6a 0a                	push   0xa
c001834d:	e8 c8 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018352:	83 c4 0c             	add    esp,0xc
c0018355:	6a 00                	push   0x0
c0018357:	68 f8 7e 01 c0       	push   0xc0017ef8
c001835c:	6a 0b                	push   0xb
c001835e:	e8 b7 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018363:	83 c4 0c             	add    esp,0xc
c0018366:	6a 00                	push   0x0
c0018368:	68 08 7e 01 c0       	push   0xc0017e08
c001836d:	6a 0d                	push   0xd
c001836f:	e8 a6 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018374:	83 c4 0c             	add    esp,0xc
c0018377:	6a 00                	push   0x0
c0018379:	68 6f 7e 01 c0       	push   0xc0017e6f
c001837e:	6a 0e                	push   0xe
c0018380:	e8 95 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018385:	83 c4 10             	add    esp,0x10
c0018388:	50                   	push   eax
c0018389:	6a 00                	push   0x0
c001838b:	68 f8 7e 01 c0       	push   0xc0017ef8
c0018390:	53                   	push   ebx
c0018391:	43                   	inc    ebx
c0018392:	e8 83 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	83 fb 1e             	cmp    ebx,0x1e
c001839d:	75 e9                	jne    c0018388 <HalInitialise()+0x137>
c001839f:	50                   	push   eax
c00183a0:	6a 00                	push   0x0
c00183a2:	68 30 2b 01 c0       	push   0xc0012b30
c00183a7:	6a 60                	push   0x60
c00183a9:	e8 6c 4b ff ff       	call   c000cf1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183ae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183b3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00183bd:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00183c4:	e8 0d f7 fe ff       	call   c0007ad6 <malloc>
c00183c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00183cc:	89 c3                	mov    ebx,eax
c00183ce:	e8 3b 09 00 00       	call   c0018d0e <RTC::RTC()>
c00183d3:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00183dd:	5a                   	pop    edx
c00183de:	59                   	pop    ecx
c00183df:	53                   	push   ebx
c00183e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183e6:	e8 fb 45 ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c00183eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183ed:	6a 00                	push   0x0
c00183ef:	6a 00                	push   0x0
c00183f1:	6a 00                	push   0x0
c00183f3:	53                   	push   ebx
c00183f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183f7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183fc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018402:	83 c4 28             	add    esp,0x28
c0018405:	5b                   	pop    ebx
c0018406:	c3                   	ret    

c0018407 <HalMakeBeep(int)>:
c0018407:	53                   	push   ebx
c0018408:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001840c:	85 db                	test   ebx,ebx
c001840e:	75 07                	jne    c0018417 <HalMakeBeep(int)+0x10>
c0018410:	e4 61                	in     al,0x61
c0018412:	83 e0 fc             	and    eax,0xfffffffc
c0018415:	eb 26                	jmp    c001843d <HalMakeBeep(int)+0x36>
c0018417:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001841c:	99                   	cdq    
c001841d:	f7 fb                	idiv   ebx
c001841f:	89 c1                	mov    ecx,eax
c0018421:	b0 b6                	mov    al,0xb6
c0018423:	e6 43                	out    0x43,al
c0018425:	88 c8                	mov    al,cl
c0018427:	e6 42                	out    0x42,al
c0018429:	89 c8                	mov    eax,ecx
c001842b:	c1 e8 08             	shr    eax,0x8
c001842e:	e6 42                	out    0x42,al
c0018430:	e4 61                	in     al,0x61
c0018432:	89 c2                	mov    edx,eax
c0018434:	83 ca 03             	or     edx,0x3
c0018437:	38 d0                	cmp    al,dl
c0018439:	74 04                	je     c001843f <HalMakeBeep(int)+0x38>
c001843b:	88 d0                	mov    al,dl
c001843d:	e6 61                	out    0x61,al
c001843f:	5b                   	pop    ebx
c0018440:	c3                   	ret    

c0018441 <HalGetRand()>:
c0018441:	31 c0                	xor    eax,eax
c0018443:	c3                   	ret    

c0018444 <HalEndOfInterrupt(int)>:
c0018444:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001844b:	74 23                	je     c0018470 <HalEndOfInterrupt(int)+0x2c>
c001844d:	83 ec 14             	sub    esp,0x14
c0018450:	6a 1b                	push   0x1b
c0018452:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018458:	e8 85 ec fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001845d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018462:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001846c:	83 c4 1c             	add    esp,0x1c
c001846f:	c3                   	ret    
c0018470:	e9 3f 02 00 00       	jmp    c00186b4 <picEOI(int)>

c0018475 <HalRestart()>:
c0018475:	c3                   	ret    

c0018476 <HalShutdown()>:
c0018476:	c3                   	ret    

c0018477 <HalSleep()>:
c0018477:	c3                   	ret    

c0018478 <picIoWait()>:
c0018478:	eb 00                	jmp    c001847a <picIoWait()+0x2>
c001847a:	eb 00                	jmp    c001847c <picIoWait()+0x4>
c001847c:	90                   	nop
c001847d:	c3                   	ret    
c001847e:	66 90                	xchg   ax,ax

c0018480 <picDisable()>:
c0018480:	83 ec 10             	sub    esp,0x10
c0018483:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001848a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001848f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018493:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018498:	ee                   	out    dx,al
c0018499:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00184a0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00184a5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184a9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00184ae:	ee                   	out    dx,al
c00184af:	90                   	nop
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	c3                   	ret    

c00184b4 <picGetIRQReg(int)>:
c00184b4:	83 ec 10             	sub    esp,0x10
c00184b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184bb:	0f b6 c0             	movzx  eax,al
c00184be:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184c5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184c9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184cd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184d2:	ee                   	out    dx,al
c00184d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184d7:	0f b6 c0             	movzx  eax,al
c00184da:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00184e1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00184e5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00184e9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00184ee:	ee                   	out    dx,al
c00184ef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184f6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184fb:	89 c2                	mov    edx,eax
c00184fd:	ec                   	in     al,dx
c00184fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018502:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018506:	0f b6 c0             	movzx  eax,al
c0018509:	c1 e0 08             	shl    eax,0x8
c001850c:	89 c1                	mov    ecx,eax
c001850e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018515:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001851a:	89 c2                	mov    edx,eax
c001851c:	ec                   	in     al,dx
c001851d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018521:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018525:	0f b6 c0             	movzx  eax,al
c0018528:	09 c8                	or     eax,ecx
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	c3                   	ret    
c001852e:	66 90                	xchg   ax,ax

c0018530 <picOpen()>:
c0018530:	83 ec 50             	sub    esp,0x50
c0018533:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001853a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001853f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018543:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018547:	ee                   	out    dx,al
c0018548:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001854f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018554:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018558:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001855c:	ee                   	out    dx,al
c001855d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018565:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001856d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018574:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018578:	89 c2                	mov    edx,eax
c001857a:	ec                   	in     al,dx
c001857b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001857f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018583:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018587:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001858e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018592:	89 c2                	mov    edx,eax
c0018594:	ec                   	in     al,dx
c0018595:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018599:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001859d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00185a1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00185a8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00185ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00185b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185b5:	ee                   	out    dx,al
c00185b6:	e8 bd fe ff ff       	call   c0018478 <picIoWait()>
c00185bb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00185c2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185cf:	ee                   	out    dx,al
c00185d0:	e8 a3 fe ff ff       	call   c0018478 <picIoWait()>
c00185d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185d9:	0f b6 c0             	movzx  eax,al
c00185dc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00185e3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00185e7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00185eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185ef:	ee                   	out    dx,al
c00185f0:	e8 83 fe ff ff       	call   c0018478 <picIoWait()>
c00185f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185f9:	0f b6 c0             	movzx  eax,al
c00185fc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018603:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018607:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001860b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001860f:	ee                   	out    dx,al
c0018610:	e8 63 fe ff ff       	call   c0018478 <picIoWait()>
c0018615:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001861c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018621:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018625:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018629:	ee                   	out    dx,al
c001862a:	e8 49 fe ff ff       	call   c0018478 <picIoWait()>
c001862f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018636:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001863b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001863f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018643:	ee                   	out    dx,al
c0018644:	e8 2f fe ff ff       	call   c0018478 <picIoWait()>
c0018649:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018650:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018655:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018659:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001865d:	ee                   	out    dx,al
c001865e:	e8 15 fe ff ff       	call   c0018478 <picIoWait()>
c0018663:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001866a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001866f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018677:	ee                   	out    dx,al
c0018678:	e8 fb fd ff ff       	call   c0018478 <picIoWait()>
c001867d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018682:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018689:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001868d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018691:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018695:	ee                   	out    dx,al
c0018696:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001869b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00186a2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00186a6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00186aa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00186ae:	ee                   	out    dx,al
c00186af:	90                   	nop
c00186b0:	83 c4 50             	add    esp,0x50
c00186b3:	c3                   	ret    

c00186b4 <picEOI(int)>:
c00186b4:	83 ec 10             	sub    esp,0x10
c00186b7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186bc:	75 1e                	jne    c00186dc <picEOI(int)+0x28>
c00186be:	6a 0b                	push   0xb
c00186c0:	e8 ef fd ff ff       	call   c00184b4 <picGetIRQReg(int)>
c00186c5:	83 c4 04             	add    esp,0x4
c00186c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186cd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186d2:	25 80 00 00 00       	and    eax,0x80
c00186d7:	74 73                	je     c001874c <picEOI(int)+0x98>
c00186d9:	8d 76 00             	lea    esi,[esi+0x0]
c00186dc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00186e1:	75 31                	jne    c0018714 <picEOI(int)+0x60>
c00186e3:	6a 0b                	push   0xb
c00186e5:	e8 ca fd ff ff       	call   c00184b4 <picGetIRQReg(int)>
c00186ea:	83 c4 04             	add    esp,0x4
c00186ed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00186f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186f6:	98                   	cwde   
c00186f7:	85 c0                	test   eax,eax
c00186f9:	78 19                	js     c0018714 <picEOI(int)+0x60>
c00186fb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018702:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018707:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001870b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018710:	ee                   	out    dx,al
c0018711:	eb 3d                	jmp    c0018750 <picEOI(int)+0x9c>
c0018713:	90                   	nop
c0018714:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018719:	7e 19                	jle    c0018734 <picEOI(int)+0x80>
c001871b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018722:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018727:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001872b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018730:	ee                   	out    dx,al
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001873b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018740:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018744:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018749:	ee                   	out    dx,al
c001874a:	eb 04                	jmp    c0018750 <picEOI(int)+0x9c>
c001874c:	90                   	nop
c001874d:	8d 76 00             	lea    esi,[esi+0x0]
c0018750:	83 c4 10             	add    esp,0x10
c0018753:	c3                   	ret    

c0018754 <RTC::open(int, int, void*)>:
c0018754:	31 c0                	xor    eax,eax
c0018756:	c3                   	ret    
c0018757:	90                   	nop

c0018758 <RTC::close(int, int, void*)>:
c0018758:	31 c0                	xor    eax,eax
c001875a:	c3                   	ret    
c001875b:	90                   	nop

c001875c <RTC::timeInSecondsUTC()>:
c001875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018760:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018766:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001876c:	c3                   	ret    
c001876d:	90                   	nop

c001876e <RTC::timeInDatetimeUTC()>:
c001876e:	53                   	push   ebx
c001876f:	83 ec 14             	sub    esp,0x14
c0018772:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877a:	8b 10                	mov    edx,DWORD PTR [eax]
c001877c:	50                   	push   eax
c001877d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018780:	83 c4 0c             	add    esp,0xc
c0018783:	52                   	push   edx
c0018784:	50                   	push   eax
c0018785:	53                   	push   ebx
c0018786:	e8 cf 3f ff ff       	call   c000c75a <secondsToDatetime(unsigned long long)>
c001878b:	89 d8                	mov    eax,ebx
c001878d:	83 c4 14             	add    esp,0x14
c0018790:	5b                   	pop    ebx
c0018791:	c2 04 00             	ret    0x4

c0018794 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018794:	56                   	push   esi
c0018795:	53                   	push   ebx
c0018796:	83 ec 14             	sub    esp,0x14
c0018799:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001879d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001879f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00187a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187a6:	52                   	push   edx
c00187a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187af:	50                   	push   eax
c00187b0:	e8 a5 3f ff ff       	call   c000c75a <secondsToDatetime(unsigned long long)>
c00187b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187c1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00187c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187c9:	89 f0                	mov    eax,esi
c00187cb:	83 c4 20             	add    esp,0x20
c00187ce:	5b                   	pop    ebx
c00187cf:	5e                   	pop    esi
c00187d0:	ff e0                	jmp    eax

c00187d2 <RTC::~RTC()>:
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c00187da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187de:	89 10                	mov    DWORD PTR [eax],edx
c00187e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187e4:	83 ec 0c             	sub    esp,0xc
c00187e7:	50                   	push   eax
c00187e8:	e8 ff 3c ff ff       	call   c000c4ec <Clock::~Clock()>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	90                   	nop
c00187f1:	83 c4 0c             	add    esp,0xc
c00187f4:	c3                   	ret    
c00187f5:	90                   	nop

c00187f6 <RTC::~RTC()>:
c00187f6:	83 ec 0c             	sub    esp,0xc
c00187f9:	83 ec 0c             	sub    esp,0xc
c00187fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018800:	e8 cd ff ff ff       	call   c00187d2 <RTC::~RTC()>
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	83 ec 08             	sub    esp,0x8
c001880b:	68 60 01 00 00       	push   0x160
c0018810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018814:	e8 1f 20 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	83 c4 0c             	add    esp,0xc
c001881f:	c3                   	ret    

c0018820 <RTC::get_update_in_progress_flag()>:
c0018820:	83 ec 14             	sub    esp,0x14
c0018823:	6a 0a                	push   0xa
c0018825:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001882b:	e8 6a e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018830:	83 c4 1c             	add    esp,0x1c
c0018833:	0f b6 c0             	movzx  eax,al
c0018836:	c1 e8 07             	shr    eax,0x7
c0018839:	c3                   	ret    

c001883a <RTC::completeRTCRefresh()>:
c001883a:	55                   	push   ebp
c001883b:	57                   	push   edi
c001883c:	56                   	push   esi
c001883d:	53                   	push   ebx
c001883e:	83 ec 3c             	sub    esp,0x3c
c0018841:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018847:	83 ec 0c             	sub    esp,0xc
c001884a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001884e:	e8 cd ff ff ff       	call   c0018820 <RTC::get_update_in_progress_flag()>
c0018853:	83 c4 10             	add    esp,0x10
c0018856:	84 c0                	test   al,al
c0018858:	74 0e                	je     c0018868 <RTC::completeRTCRefresh()+0x2e>
c001885a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018860:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018866:	73 df                	jae    c0018847 <RTC::completeRTCRefresh()+0xd>
c0018868:	51                   	push   ecx
c0018869:	51                   	push   ecx
c001886a:	6a 00                	push   0x0
c001886c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018872:	e8 23 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018877:	5b                   	pop    ebx
c0018878:	89 c7                	mov    edi,eax
c001887a:	5e                   	pop    esi
c001887b:	6a 02                	push   0x2
c001887d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018883:	e8 12 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018888:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001888c:	5d                   	pop    ebp
c001888d:	58                   	pop    eax
c001888e:	6a 04                	push   0x4
c0018890:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018896:	e8 ff e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001889b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001889f:	58                   	pop    eax
c00188a0:	5a                   	pop    edx
c00188a1:	6a 07                	push   0x7
c00188a3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a9:	e8 ec e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188ae:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00188b2:	59                   	pop    ecx
c00188b3:	5b                   	pop    ebx
c00188b4:	6a 08                	push   0x8
c00188b6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188bc:	e8 d9 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188c1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188c5:	5e                   	pop    esi
c00188c6:	5d                   	pop    ebp
c00188c7:	6a 09                	push   0x9
c00188c9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188cf:	e8 c6 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188d4:	0f b6 c0             	movzx  eax,al
c00188d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188eb:	e8 30 ff ff ff       	call   c0018820 <RTC::get_update_in_progress_flag()>
c00188f0:	83 c4 10             	add    esp,0x10
c00188f3:	84 c0                	test   al,al
c00188f5:	74 0e                	je     c0018905 <RTC::completeRTCRefresh()+0xcb>
c00188f7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188fd:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018903:	73 df                	jae    c00188e4 <RTC::completeRTCRefresh()+0xaa>
c0018905:	51                   	push   ecx
c0018906:	51                   	push   ecx
c0018907:	6a 00                	push   0x0
c0018909:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001890f:	e8 86 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018914:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018918:	5b                   	pop    ebx
c0018919:	5e                   	pop    esi
c001891a:	6a 02                	push   0x2
c001891c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018922:	e8 73 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018927:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001892b:	5d                   	pop    ebp
c001892c:	58                   	pop    eax
c001892d:	6a 04                	push   0x4
c001892f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018935:	e8 60 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001893a:	88 c3                	mov    bl,al
c001893c:	58                   	pop    eax
c001893d:	5a                   	pop    edx
c001893e:	6a 07                	push   0x7
c0018940:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018946:	e8 4f e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001894b:	59                   	pop    ecx
c001894c:	89 c6                	mov    esi,eax
c001894e:	5d                   	pop    ebp
c001894f:	6a 08                	push   0x8
c0018951:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018957:	e8 3e e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001895c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018960:	58                   	pop    eax
c0018961:	5a                   	pop    edx
c0018962:	6a 09                	push   0x9
c0018964:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001896a:	e8 2b e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001896f:	89 f9                	mov    ecx,edi
c0018971:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018975:	0f b6 e8             	movzx  ebp,al
c0018978:	83 c4 10             	add    esp,0x10
c001897b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001897f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018984:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018989:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001898d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018991:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018995:	0f 94 c0             	sete   al
c0018998:	0f b6 fb             	movzx  edi,bl
c001899b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001899f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00189a4:	0f 94 c2             	sete   dl
c00189a7:	21 d0                	and    eax,edx
c00189a9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00189ad:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00189b1:	0f 94 c2             	sete   dl
c00189b4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00189b8:	21 c2                	and    edx,eax
c00189ba:	89 f0                	mov    eax,esi
c00189bc:	0f b6 c0             	movzx  eax,al
c00189bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189c3:	89 f0                	mov    eax,esi
c00189c5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189c9:	0f 94 c0             	sete   al
c00189cc:	21 d0                	and    eax,edx
c00189ce:	31 d2                	xor    edx,edx
c00189d0:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189d4:	0f 94 c2             	sete   dl
c00189d7:	85 c2                	test   edx,eax
c00189d9:	75 27                	jne    c0018a02 <RTC::completeRTCRefresh()+0x1c8>
c00189db:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00189df:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00189e3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00189e7:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00189eb:	89 f0                	mov    eax,esi
c00189ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00189f1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00189f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189f9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00189fd:	e9 dc fe ff ff       	jmp    c00188de <RTC::completeRTCRefresh()+0xa4>
c0018a02:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018a06:	75 d3                	jne    c00189db <RTC::completeRTCRefresh()+0x1a1>
c0018a08:	52                   	push   edx
c0018a09:	52                   	push   edx
c0018a0a:	6a 0b                	push   0xb
c0018a0c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a12:	e8 83 e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	a8 04                	test   al,0x4
c0018a1c:	75 7a                	jne    c0018a98 <RTC::completeRTCRefresh()+0x25e>
c0018a1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a26:	83 e1 0f             	and    ecx,0xf
c0018a29:	c1 ea 04             	shr    edx,0x4
c0018a2c:	c1 ef 04             	shr    edi,0x4
c0018a2f:	6b d2 0a             	imul   edx,edx,0xa
c0018a32:	83 e6 0f             	and    esi,0xf
c0018a35:	01 d1                	add    ecx,edx
c0018a37:	c1 ed 04             	shr    ebp,0x4
c0018a3a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a46:	c1 ea 04             	shr    edx,0x4
c0018a49:	83 e1 0f             	and    ecx,0xf
c0018a4c:	6b d2 0a             	imul   edx,edx,0xa
c0018a4f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a52:	01 d1                	add    ecx,edx
c0018a54:	89 fa                	mov    edx,edi
c0018a56:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a5a:	83 e2 07             	and    edx,0x7
c0018a5d:	89 d9                	mov    ecx,ebx
c0018a5f:	6b d2 0a             	imul   edx,edx,0xa
c0018a62:	83 e1 0f             	and    ecx,0xf
c0018a65:	83 e3 80             	and    ebx,0xffffff80
c0018a68:	01 d1                	add    ecx,edx
c0018a6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a6e:	09 cb                	or     ebx,ecx
c0018a70:	c1 ea 04             	shr    edx,0x4
c0018a73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a77:	6b d2 0a             	imul   edx,edx,0xa
c0018a7a:	83 e1 0f             	and    ecx,0xf
c0018a7d:	01 d6                	add    esi,edx
c0018a7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a83:	c1 ea 04             	shr    edx,0x4
c0018a86:	6b d2 0a             	imul   edx,edx,0xa
c0018a89:	01 d1                	add    ecx,edx
c0018a8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a8f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a93:	83 e2 0f             	and    edx,0xf
c0018a96:	01 d5                	add    ebp,edx
c0018a98:	a8 02                	test   al,0x2
c0018a9a:	75 15                	jne    c0018ab1 <RTC::completeRTCRefresh()+0x277>
c0018a9c:	f6 c3 80             	test   bl,0x80
c0018a9f:	74 10                	je     c0018ab1 <RTC::completeRTCRefresh()+0x277>
c0018aa1:	83 e3 7f             	and    ebx,0x7f
c0018aa4:	b9 18 00 00 00       	mov    ecx,0x18
c0018aa9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018aac:	99                   	cdq    
c0018aad:	f7 f9                	idiv   ecx
c0018aaf:	88 d3                	mov    bl,dl
c0018ab1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018ab7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018abd:	77 06                	ja     c0018ac5 <RTC::completeRTCRefresh()+0x28b>
c0018abf:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018ac5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aca:	31 c9                	xor    ecx,ecx
c0018acc:	c1 e0 10             	shl    eax,0x10
c0018acf:	89 cd                	mov    ebp,ecx
c0018ad1:	c1 e7 10             	shl    edi,0x10
c0018ad4:	31 d2                	xor    edx,edx
c0018ad6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018adc:	09 c5                	or     ebp,eax
c0018ade:	89 f0                	mov    eax,esi
c0018ae0:	89 e9                	mov    ecx,ebp
c0018ae2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ae6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018aea:	88 c2                	mov    dl,al
c0018aec:	88 d9                	mov    cl,bl
c0018aee:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018af2:	0f b7 c2             	movzx  eax,dx
c0018af5:	09 f8                	or     eax,edi
c0018af7:	89 c2                	mov    edx,eax
c0018af9:	50                   	push   eax
c0018afa:	50                   	push   eax
c0018afb:	51                   	push   ecx
c0018afc:	52                   	push   edx
c0018afd:	e8 d9 3a ff ff       	call   c000c5db <datetimeToSeconds(datetime_t)>
c0018b02:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018b06:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018b0c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b12:	83 c4 4c             	add    esp,0x4c
c0018b15:	5b                   	pop    ebx
c0018b16:	5e                   	pop    esi
c0018b17:	5f                   	pop    edi
c0018b18:	5d                   	pop    ebp
c0018b19:	c3                   	ret    

c0018b1a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b1a:	55                   	push   ebp
c0018b1b:	57                   	push   edi
c0018b1c:	56                   	push   esi
c0018b1d:	53                   	push   ebx
c0018b1e:	83 ec 30             	sub    esp,0x30
c0018b21:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b25:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b29:	6a 00                	push   0x0
c0018b2b:	6a 00                	push   0x0
c0018b2d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b33:	e8 7c e7 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b38:	83 c4 0c             	add    esp,0xc
c0018b3b:	6a 00                	push   0x0
c0018b3d:	6a 02                	push   0x2
c0018b3f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b45:	e8 6a e7 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b4a:	31 d2                	xor    edx,edx
c0018b4c:	89 f9                	mov    ecx,edi
c0018b4e:	89 f8                	mov    eax,edi
c0018b50:	c1 e9 10             	shr    ecx,0x10
c0018b53:	0f b6 c4             	movzx  eax,ah
c0018b56:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b5a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b62:	b9 64 00 00 00       	mov    ecx,0x64
c0018b67:	89 f0                	mov    eax,esi
c0018b69:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b6d:	89 f0                	mov    eax,esi
c0018b6f:	0f b6 c4             	movzx  eax,ah
c0018b72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b76:	89 f0                	mov    eax,esi
c0018b78:	c1 e8 10             	shr    eax,0x10
c0018b7b:	f7 f1                	div    ecx
c0018b7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b81:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b85:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b89:	59                   	pop    ecx
c0018b8a:	5b                   	pop    ebx
c0018b8b:	89 fb                	mov    ebx,edi
c0018b8d:	6a 0b                	push   0xb
c0018b8f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b95:	e8 00 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	89 c5                	mov    ebp,eax
c0018b9f:	a8 04                	test   al,0x4
c0018ba1:	75 6e                	jne    c0018c11 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ba7:	31 d2                	xor    edx,edx
c0018ba9:	0f b6 c1             	movzx  eax,cl
c0018bac:	b9 0a 00 00 00       	mov    ecx,0xa
c0018bb1:	f7 f1                	div    ecx
c0018bb3:	c1 e0 04             	shl    eax,0x4
c0018bb6:	09 d0                	or     eax,edx
c0018bb8:	31 d2                	xor    edx,edx
c0018bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bbe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018bc3:	f7 f1                	div    ecx
c0018bc5:	c1 e0 04             	shl    eax,0x4
c0018bc8:	09 d0                	or     eax,edx
c0018bca:	31 d2                	xor    edx,edx
c0018bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bd0:	0f b6 c3             	movzx  eax,bl
c0018bd3:	f7 f1                	div    ecx
c0018bd5:	c1 e0 04             	shl    eax,0x4
c0018bd8:	09 d0                	or     eax,edx
c0018bda:	31 d2                	xor    edx,edx
c0018bdc:	89 c3                	mov    ebx,eax
c0018bde:	89 f0                	mov    eax,esi
c0018be0:	0f b6 c0             	movzx  eax,al
c0018be3:	f7 f1                	div    ecx
c0018be5:	c1 e0 04             	shl    eax,0x4
c0018be8:	09 d0                	or     eax,edx
c0018bea:	31 d2                	xor    edx,edx
c0018bec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018bf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bf5:	f7 f1                	div    ecx
c0018bf7:	c1 e0 04             	shl    eax,0x4
c0018bfa:	09 d0                	or     eax,edx
c0018bfc:	31 d2                	xor    edx,edx
c0018bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c06:	f7 f1                	div    ecx
c0018c08:	c1 e0 04             	shl    eax,0x4
c0018c0b:	09 d0                	or     eax,edx
c0018c0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c11:	83 e5 02             	and    ebp,0x2
c0018c14:	75 1e                	jne    c0018c34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c16:	0f b6 c3             	movzx  eax,bl
c0018c19:	83 f8 0b             	cmp    eax,0xb
c0018c1c:	76 10                	jbe    c0018c2e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c1e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c21:	88 d3                	mov    bl,dl
c0018c23:	84 d2                	test   dl,dl
c0018c25:	75 02                	jne    c0018c29 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c27:	b3 0c                	mov    bl,0xc
c0018c29:	83 cb 80             	or     ebx,0xffffff80
c0018c2c:	eb 06                	jmp    c0018c34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c2e:	85 c0                	test   eax,eax
c0018c30:	75 02                	jne    c0018c34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c32:	b3 0c                	mov    bl,0xc
c0018c34:	0f b6 db             	movzx  ebx,bl
c0018c37:	50                   	push   eax
c0018c38:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c3d:	52                   	push   edx
c0018c3e:	6a 00                	push   0x0
c0018c40:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c46:	e8 69 e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c4b:	83 c4 0c             	add    esp,0xc
c0018c4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c53:	50                   	push   eax
c0018c54:	6a 02                	push   0x2
c0018c56:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c5c:	e8 53 e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c61:	83 c4 0c             	add    esp,0xc
c0018c64:	53                   	push   ebx
c0018c65:	6a 04                	push   0x4
c0018c67:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c6d:	e8 42 e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c72:	83 c4 0c             	add    esp,0xc
c0018c75:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c7a:	52                   	push   edx
c0018c7b:	6a 07                	push   0x7
c0018c7d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c83:	e8 2c e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c88:	83 c4 0c             	add    esp,0xc
c0018c8b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c90:	50                   	push   eax
c0018c91:	6a 08                	push   0x8
c0018c93:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c99:	e8 16 e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c9e:	83 c4 0c             	add    esp,0xc
c0018ca1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018ca6:	55                   	push   ebp
c0018ca7:	6a 09                	push   0x9
c0018ca9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018caf:	e8 00 e6 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cb4:	5a                   	pop    edx
c0018cb5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018cb9:	e8 7c fb ff ff       	call   c001883a <RTC::completeRTCRefresh()>
c0018cbe:	83 c4 3c             	add    esp,0x3c
c0018cc1:	b0 01                	mov    al,0x1
c0018cc3:	5b                   	pop    ebx
c0018cc4:	5e                   	pop    esi
c0018cc5:	5f                   	pop    edi
c0018cc6:	5d                   	pop    ebp
c0018cc7:	c3                   	ret    

c0018cc8 <rtcIRQHandler(regs*, void*)>:
c0018cc8:	53                   	push   ebx
c0018cc9:	83 ec 10             	sub    esp,0x10
c0018ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018cd0:	6a 0c                	push   0xc
c0018cd2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cd8:	e8 bd e4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	a8 80                	test   al,0x80
c0018ce2:	74 24                	je     c0018d08 <rtcIRQHandler(regs*, void*)+0x40>
c0018ce4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018ceb:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018cf2:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018cf9:	75 0d                	jne    c0018d08 <rtcIRQHandler(regs*, void*)+0x40>
c0018cfb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018cff:	83 c4 08             	add    esp,0x8
c0018d02:	5b                   	pop    ebx
c0018d03:	e9 32 fb ff ff       	jmp    c001883a <RTC::completeRTCRefresh()>
c0018d08:	83 c4 08             	add    esp,0x8
c0018d0b:	5b                   	pop    ebx
c0018d0c:	c3                   	ret    
c0018d0d:	90                   	nop

c0018d0e <RTC::RTC()>:
c0018d0e:	83 ec 1c             	sub    esp,0x1c
c0018d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d15:	83 ec 08             	sub    esp,0x8
c0018d18:	68 c3 2e 02 c0       	push   0xc0022ec3
c0018d1d:	50                   	push   eax
c0018d1e:	e8 93 37 ff ff       	call   c000c4b6 <Clock::Clock(char const*)>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c0018d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d2f:	89 10                	mov    DWORD PTR [eax],edx
c0018d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d35:	83 ec 0c             	sub    esp,0xc
c0018d38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d3c:	6a 01                	push   0x1
c0018d3e:	68 c8 8c 01 c0       	push   0xc0018cc8
c0018d43:	6a 08                	push   0x8
c0018d45:	50                   	push   eax
c0018d46:	e8 47 3c ff ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d4b:	83 c4 20             	add    esp,0x20
c0018d4e:	89 c2                	mov    edx,eax
c0018d50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d54:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d5a:	fa                   	cli    
c0018d5b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d60:	83 c0 01             	add    eax,0x1
c0018d63:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d68:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d6d:	83 ec 08             	sub    esp,0x8
c0018d70:	6a 0b                	push   0xb
c0018d72:	50                   	push   eax
c0018d73:	e8 22 e4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d7f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d84:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d88:	83 ca 10             	or     edx,0x10
c0018d8b:	0f b6 d2             	movzx  edx,dl
c0018d8e:	83 ec 04             	sub    esp,0x4
c0018d91:	52                   	push   edx
c0018d92:	6a 0b                	push   0xb
c0018d94:	50                   	push   eax
c0018d95:	e8 1a e5 fe ff       	call   c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d9a:	83 c4 10             	add    esp,0x10
c0018d9d:	83 ec 0c             	sub    esp,0xc
c0018da0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018da4:	e8 91 fa ff ff       	call   c001883a <RTC::completeRTCRefresh()>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018db1:	83 e8 01             	sub    eax,0x1
c0018db4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018db9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018dbe:	85 c0                	test   eax,eax
c0018dc0:	75 01                	jne    c0018dc3 <RTC::RTC()+0xb5>
c0018dc2:	fb                   	sti    
c0018dc3:	90                   	nop
c0018dc4:	83 c4 1c             	add    esp,0x1c
c0018dc7:	c3                   	ret    

c0018dc8 <HalConsoleScroll(int, int)>:
c0018dc8:	83 ec 10             	sub    esp,0x10
c0018dcb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018dd3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018ddb:	90                   	nop
c0018ddc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018de1:	0f 8f e1 00 00 00    	jg     c0018ec8 <HalConsoleScroll(int, int)+0x100>
c0018de7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018def:	90                   	nop
c0018df0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018df8:	0f 8f be 00 00 00    	jg     c0018ebc <HalConsoleScroll(int, int)+0xf4>
c0018dfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e02:	89 d0                	mov    eax,edx
c0018e04:	c1 e0 02             	shl    eax,0x2
c0018e07:	01 d0                	add    eax,edx
c0018e09:	c1 e0 05             	shl    eax,0x5
c0018e0c:	89 c2                	mov    edx,eax
c0018e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e12:	01 d0                	add    eax,edx
c0018e14:	89 c2                	mov    edx,eax
c0018e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e21:	89 d0                	mov    eax,edx
c0018e23:	c1 e0 02             	shl    eax,0x2
c0018e26:	01 d0                	add    eax,edx
c0018e28:	c1 e0 05             	shl    eax,0x5
c0018e2b:	89 c2                	mov    edx,eax
c0018e2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e31:	01 d0                	add    eax,edx
c0018e33:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e3d:	01 c2                	add    edx,eax
c0018e3f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018e41:	88 02                	mov    BYTE PTR [edx],al
c0018e43:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e48:	75 66                	jne    c0018eb0 <HalConsoleScroll(int, int)+0xe8>
c0018e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e4e:	83 e0 01             	and    eax,0x1
c0018e51:	74 39                	je     c0018e8c <HalConsoleScroll(int, int)+0xc4>
c0018e53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e57:	83 e0 0f             	and    eax,0xf
c0018e5a:	88 c2                	mov    dl,al
c0018e5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e60:	c1 e0 04             	shl    eax,0x4
c0018e63:	09 d0                	or     eax,edx
c0018e65:	88 c1                	mov    cl,al
c0018e67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e6b:	89 d0                	mov    eax,edx
c0018e6d:	c1 e0 02             	shl    eax,0x2
c0018e70:	01 d0                	add    eax,edx
c0018e72:	c1 e0 05             	shl    eax,0x5
c0018e75:	89 c2                	mov    edx,eax
c0018e77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e7b:	01 d0                	add    eax,edx
c0018e7d:	89 c2                	mov    edx,eax
c0018e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e83:	01 d0                	add    eax,edx
c0018e85:	88 ca                	mov    dl,cl
c0018e87:	88 10                	mov    BYTE PTR [eax],dl
c0018e89:	eb 25                	jmp    c0018eb0 <HalConsoleScroll(int, int)+0xe8>
c0018e8b:	90                   	nop
c0018e8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e90:	89 d0                	mov    eax,edx
c0018e92:	c1 e0 02             	shl    eax,0x2
c0018e95:	01 d0                	add    eax,edx
c0018e97:	c1 e0 05             	shl    eax,0x5
c0018e9a:	89 c2                	mov    edx,eax
c0018e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea0:	01 d0                	add    eax,edx
c0018ea2:	89 c2                	mov    edx,eax
c0018ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ea8:	01 d0                	add    eax,edx
c0018eaa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018ead:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018eb5:	e9 36 ff ff ff       	jmp    c0018df0 <HalConsoleScroll(int, int)+0x28>
c0018eba:	66 90                	xchg   ax,ax
c0018ebc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ec1:	e9 16 ff ff ff       	jmp    c0018ddc <HalConsoleScroll(int, int)+0x14>
c0018ec6:	66 90                	xchg   ax,ax
c0018ec8:	90                   	nop
c0018ec9:	83 c4 10             	add    esp,0x10
c0018ecc:	c3                   	ret    
c0018ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0018ed0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ed0:	83 ec 14             	sub    esp,0x14
c0018ed3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ed7:	88 04 24             	mov    BYTE PTR [esp],al
c0018eda:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018edd:	0f b6 c0             	movzx  eax,al
c0018ee0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ee4:	89 d1                	mov    ecx,edx
c0018ee6:	83 e1 0f             	and    ecx,0xf
c0018ee9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018eed:	c1 e2 04             	shl    edx,0x4
c0018ef0:	0f b6 d2             	movzx  edx,dl
c0018ef3:	09 ca                	or     edx,ecx
c0018ef5:	c1 e2 08             	shl    edx,0x8
c0018ef8:	09 d0                	or     eax,edx
c0018efa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018eff:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018f07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f0b:	89 d0                	mov    eax,edx
c0018f0d:	c1 e0 02             	shl    eax,0x2
c0018f10:	01 d0                	add    eax,edx
c0018f12:	c1 e0 04             	shl    eax,0x4
c0018f15:	89 c2                	mov    edx,eax
c0018f17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f1b:	01 d0                	add    eax,edx
c0018f1d:	01 c0                	add    eax,eax
c0018f1f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f27:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f2c:	66 89 02             	mov    WORD PTR [edx],ax
c0018f2f:	90                   	nop
c0018f30:	83 c4 14             	add    esp,0x14
c0018f33:	c3                   	ret    

c0018f34 <HalConsoleCursorUpdate(int, int)>:
c0018f34:	83 ec 20             	sub    esp,0x20
c0018f37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f3b:	89 c2                	mov    edx,eax
c0018f3d:	c1 e2 02             	shl    edx,0x2
c0018f40:	01 d0                	add    eax,edx
c0018f42:	c1 e0 04             	shl    eax,0x4
c0018f45:	89 c2                	mov    edx,eax
c0018f47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f4b:	01 d0                	add    eax,edx
c0018f4d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f52:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f59:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f5e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f66:	ee                   	out    dx,al
c0018f67:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f6c:	0f b6 c0             	movzx  eax,al
c0018f6f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f76:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f7a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f82:	ee                   	out    dx,al
c0018f83:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f8a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f8f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f97:	ee                   	out    dx,al
c0018f98:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f9d:	c1 e8 08             	shr    eax,0x8
c0018fa0:	0f b6 c0             	movzx  eax,al
c0018fa3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018faa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018fae:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018fb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fb6:	ee                   	out    dx,al
c0018fb7:	90                   	nop
c0018fb8:	83 c4 20             	add    esp,0x20
c0018fbb:	c3                   	ret    

c0018fbc <FAT::getName()>:
c0018fbc:	b8 14 2f 02 c0       	mov    eax,0xc0022f14
c0018fc1:	c3                   	ret    
c0018fc2:	66 90                	xchg   ax,ax

c0018fc4 <FAT::tell(void*, unsigned long long*)>:
c0018fc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fc9:	75 09                	jne    c0018fd4 <FAT::tell(void*, unsigned long long*)+0x10>
c0018fcb:	b8 04 00 00 00       	mov    eax,0x4
c0018fd0:	c3                   	ret    
c0018fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fd9:	75 09                	jne    c0018fe4 <FAT::tell(void*, unsigned long long*)+0x20>
c0018fdb:	b8 04 00 00 00       	mov    eax,0x4
c0018fe0:	c3                   	ret    
c0018fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fe8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018feb:	ba 00 00 00 00       	mov    edx,0x0
c0018ff0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ff4:	89 01                	mov    DWORD PTR [ecx],eax
c0018ff6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ff9:	b8 00 00 00 00       	mov    eax,0x0
c0018ffe:	c3                   	ret    
c0018fff:	90                   	nop

c0019000 <FAT::stat(void*, unsigned long long*)>:
c0019000:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019005:	75 09                	jne    c0019010 <FAT::stat(void*, unsigned long long*)+0x10>
c0019007:	b8 04 00 00 00       	mov    eax,0x4
c001900c:	c3                   	ret    
c001900d:	8d 76 00             	lea    esi,[esi+0x0]
c0019010:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019015:	75 09                	jne    c0019020 <FAT::stat(void*, unsigned long long*)+0x20>
c0019017:	b8 04 00 00 00       	mov    eax,0x4
c001901c:	c3                   	ret    
c001901d:	8d 76 00             	lea    esi,[esi+0x0]
c0019020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019024:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019027:	ba 00 00 00 00       	mov    edx,0x0
c001902c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019030:	89 01                	mov    DWORD PTR [ecx],eax
c0019032:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019035:	b8 00 00 00 00       	mov    eax,0x0
c001903a:	c3                   	ret    
c001903b:	90                   	nop

c001903c <FAT::~FAT()>:
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c0019044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019048:	89 10                	mov    DWORD PTR [eax],edx
c001904a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904e:	83 ec 0c             	sub    esp,0xc
c0019051:	50                   	push   eax
c0019052:	e8 97 27 ff ff       	call   c000b7ee <Filesystem::~Filesystem()>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	90                   	nop
c001905b:	83 c4 0c             	add    esp,0xc
c001905e:	c3                   	ret    
c001905f:	90                   	nop

c0019060 <FAT::~FAT()>:
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	83 ec 0c             	sub    esp,0xc
c0019066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001906a:	e8 cd ff ff ff       	call   c001903c <FAT::~FAT()>
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	83 ec 08             	sub    esp,0x8
c0019075:	6a 08                	push   0x8
c0019077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001907b:	e8 b8 17 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	83 c4 0c             	add    esp,0xc
c0019086:	c3                   	ret    
c0019087:	90                   	nop

c0019088 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019088:	83 ec 1c             	sub    esp,0x1c
c001908b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019092:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019097:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001909b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190a2:	83 f8 ff             	cmp    eax,0xffffffff
c00190a5:	75 35                	jne    c00190dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00190a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190ab:	88 c2                	mov    dl,al
c00190ad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190b2:	01 d0                	add    eax,edx
c00190b4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190b8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190c2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190c9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190d2:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190d9:	eb 19                	jmp    c00190f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00190db:	90                   	nop
c00190dc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190e0:	88 c2                	mov    dl,al
c00190e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190e6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190ed:	01 d0                	add    eax,edx
c00190ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190f3:	90                   	nop
c00190f4:	83 ec 04             	sub    esp,0x4
c00190f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190ff:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019103:	50                   	push   eax
c0019104:	e8 c6 be fe ff       	call   c0004fcf <f_getlabel>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019110:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019115:	75 09                	jne    c0019120 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019117:	b8 00 00 00 00       	mov    eax,0x0
c001911c:	eb 0a                	jmp    c0019128 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001911e:	66 90                	xchg   ax,ax
c0019120:	b8 01 00 00 00       	mov    eax,0x1
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	83 c4 1c             	add    esp,0x1c
c001912b:	c3                   	ret    

c001912c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001912c:	57                   	push   edi
c001912d:	83 ec 58             	sub    esp,0x58
c0019130:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019138:	8d 54 24 10          	lea    edx,[esp+0x10]
c001913c:	b8 00 00 00 00       	mov    eax,0x0
c0019141:	b9 0f 00 00 00       	mov    ecx,0xf
c0019146:	fc                   	cld    
c0019147:	89 d7                	mov    edi,edx
c0019149:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001914b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001914f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019156:	83 f8 ff             	cmp    eax,0xffffffff
c0019159:	75 35                	jne    c0019190 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001915b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001915f:	88 c2                	mov    dl,al
c0019161:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019166:	01 d0                	add    eax,edx
c0019168:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001916c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019172:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019176:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001917d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019182:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019186:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001918d:	eb 19                	jmp    c00191a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001918f:	90                   	nop
c0019190:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019194:	88 c2                	mov    dl,al
c0019196:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001919a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191a1:	01 d0                	add    eax,edx
c00191a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191a7:	90                   	nop
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00191af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191b3:	50                   	push   eax
c00191b4:	e8 87 76 fe ff       	call   c0000840 <strcat>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	83 ec 0c             	sub    esp,0xc
c00191bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191c3:	50                   	push   eax
c00191c4:	e8 57 bf fe ff       	call   c0005120 <f_setlabel>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00191d5:	75 09                	jne    c00191e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00191d7:	b8 00 00 00 00       	mov    eax,0x0
c00191dc:	eb 0a                	jmp    c00191e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00191de:	66 90                	xchg   ax,ax
c00191e0:	b8 01 00 00 00       	mov    eax,0x1
c00191e5:	8d 76 00             	lea    esi,[esi+0x0]
c00191e8:	83 c4 58             	add    esp,0x58
c00191eb:	5f                   	pop    edi
c00191ec:	c3                   	ret    
c00191ed:	90                   	nop
c00191ee:	66 90                	xchg   ax,ax

c00191f0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191f0:	83 ec 2c             	sub    esp,0x2c
c00191f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191fb:	83 ec 08             	sub    esp,0x8
c00191fe:	68 38 2f 02 c0       	push   0xc0022f38
c0019203:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019207:	e8 44 75 fe ff       	call   c0000750 <strcmp>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	85 c0                	test   eax,eax
c0019211:	0f 94 c0             	sete   al
c0019214:	0f b6 c0             	movzx  eax,al
c0019217:	85 c0                	test   eax,eax
c0019219:	74 0d                	je     c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001921b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019223:	e9 c0 00 00 00       	jmp    c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019228:	83 ec 08             	sub    esp,0x8
c001922b:	68 2a 2f 02 c0       	push   0xc0022f2a
c0019230:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019234:	e8 17 75 fe ff       	call   c0000750 <strcmp>
c0019239:	83 c4 10             	add    esp,0x10
c001923c:	85 c0                	test   eax,eax
c001923e:	0f 94 c0             	sete   al
c0019241:	0f b6 c0             	movzx  eax,al
c0019244:	85 c0                	test   eax,eax
c0019246:	74 10                	je     c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019248:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019250:	e9 93 00 00 00       	jmp    c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	83 ec 08             	sub    esp,0x8
c001925b:	68 30 2f 02 c0       	push   0xc0022f30
c0019260:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019264:	e8 e7 74 fe ff       	call   c0000750 <strcmp>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	85 c0                	test   eax,eax
c001926e:	0f 94 c0             	sete   al
c0019271:	0f b6 c0             	movzx  eax,al
c0019274:	85 c0                	test   eax,eax
c0019276:	74 0c                	je     c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019278:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019280:	eb 66                	jmp    c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019282:	66 90                	xchg   ax,ax
c0019284:	83 ec 08             	sub    esp,0x8
c0019287:	68 dc 05 02 c0       	push   0xc00205dc
c001928c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019290:	e8 bb 74 fe ff       	call   c0000750 <strcmp>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	85 c0                	test   eax,eax
c001929a:	0f 94 c0             	sete   al
c001929d:	0f b6 c0             	movzx  eax,al
c00192a0:	85 c0                	test   eax,eax
c00192a2:	74 0c                	je     c00192b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00192a4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00192ac:	eb 3a                	jmp    c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192ae:	66 90                	xchg   ax,ax
c00192b0:	83 ec 08             	sub    esp,0x8
c00192b3:	68 36 2f 02 c0       	push   0xc0022f36
c00192b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192bc:	e8 8f 74 fe ff       	call   c0000750 <strcmp>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	85 c0                	test   eax,eax
c00192c6:	0f 94 c0             	sete   al
c00192c9:	0f b6 c0             	movzx  eax,al
c00192cc:	85 c0                	test   eax,eax
c00192ce:	74 0c                	je     c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192d0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00192d8:	eb 0e                	jmp    c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	b8 08 00 00 00       	mov    eax,0x8
c00192e1:	e9 ea 00 00 00       	jmp    c00193d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192e6:	66 90                	xchg   ax,ax
c00192e8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192ef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192f8:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192ff:	83 f8 ff             	cmp    eax,0xffffffff
c0019302:	75 34                	jne    c0019338 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019304:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019308:	88 c2                	mov    dl,al
c001930a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001930f:	01 d0                	add    eax,edx
c0019311:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019315:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001931b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001931f:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019326:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001932b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001932f:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019336:	eb 18                	jmp    c0019350 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019338:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001933c:	88 c2                	mov    dl,al
c001933e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019342:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019349:	01 d0                	add    eax,edx
c001934b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001934f:	90                   	nop
c0019350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019354:	88 04 24             	mov    BYTE PTR [esp],al
c0019357:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001935b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001935f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019367:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001936c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019374:	83 ec 0c             	sub    esp,0xc
c0019377:	68 00 20 00 00       	push   0x2000
c001937c:	e8 55 e7 fe ff       	call   c0007ad6 <malloc>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019388:	68 00 20 00 00       	push   0x2000
c001938d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019391:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019395:	50                   	push   eax
c0019396:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001939a:	50                   	push   eax
c001939b:	e8 7d c0 fe ff       	call   c000541d <f_mkfs>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193ac:	75 0a                	jne    c00193b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00193ae:	b8 00 00 00 00       	mov    eax,0x0
c00193b3:	eb 1b                	jmp    c00193d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193b5:	8d 76 00             	lea    esi,[esi+0x0]
c00193b8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193bd:	75 09                	jne    c00193c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193bf:	b8 09 00 00 00       	mov    eax,0x9
c00193c4:	eb 0a                	jmp    c00193d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193c6:	66 90                	xchg   ax,ax
c00193c8:	b8 01 00 00 00       	mov    eax,0x1
c00193cd:	8d 76 00             	lea    esi,[esi+0x0]
c00193d0:	83 c4 2c             	add    esp,0x2c
c00193d3:	c3                   	ret    

c00193d4 <FAT::tryMount(LogicalDisk*, int)>:
c00193d4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00193da:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193df:	83 f8 14             	cmp    eax,0x14
c00193e2:	75 18                	jne    c00193fc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	68 3c 2f 02 c0       	push   0xc0022f3c
c00193ec:	e8 a6 82 ff ff       	call   c0011697 <KePanic(char const*)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	b0 00                	mov    al,0x0
c00193f6:	e9 ed 01 00 00       	jmp    c00195e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193fb:	90                   	nop
c00193fc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019403:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019409:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001940f:	3d 00 02 00 00       	cmp    eax,0x200
c0019414:	74 0a                	je     c0019420 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019416:	b0 00                	mov    al,0x0
c0019418:	e9 cb 01 00 00       	jmp    c00195e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019428:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001942f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019436:	83 f8 ff             	cmp    eax,0xffffffff
c0019439:	74 09                	je     c0019444 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001943b:	b0 01                	mov    al,0x1
c001943d:	e9 a6 01 00 00       	jmp    c00195e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019442:	66 90                	xchg   ax,ax
c0019444:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001944e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019456:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001945d:	88 c2                	mov    dl,al
c001945f:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019464:	01 d0                	add    eax,edx
c0019466:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001946d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019473:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001947a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019481:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019486:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001948d:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	68 34 02 00 00       	push   0x234
c001949c:	e8 35 e6 fe ff       	call   c0007ad6 <malloc>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00194ab:	83 ec 04             	sub    esp,0x4
c00194ae:	6a 00                	push   0x0
c00194b0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194b7:	50                   	push   eax
c00194b8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194bf:	e8 34 a7 fe ff       	call   c0003bf8 <f_mount>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194ce:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00194d6:	74 1c                	je     c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194e2:	e8 0f e6 fe ff       	call   c0007af6 <rfree>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	b0 00                	mov    al,0x0
c00194ec:	e9 f7 00 00 00       	jmp    c00195e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	83 ec 04             	sub    esp,0x4
c00194f7:	68 00 01 00 00       	push   0x100
c00194fc:	6a 00                	push   0x0
c00194fe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019505:	50                   	push   eax
c0019506:	e8 e5 6f fe ff       	call   c00004f0 <memset>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	83 ec 08             	sub    esp,0x8
c0019511:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019518:	50                   	push   eax
c0019519:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019520:	50                   	push   eax
c0019521:	e8 1a 73 fe ff       	call   c0000840 <strcat>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	83 ec 08             	sub    esp,0x8
c001952c:	68 4a 2f 02 c0       	push   0xc0022f4a
c0019531:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019538:	50                   	push   eax
c0019539:	e8 02 73 fe ff       	call   c0000840 <strcat>
c001953e:	83 c4 10             	add    esp,0x10
c0019541:	83 ec 04             	sub    esp,0x4
c0019544:	6a 01                	push   0x1
c0019546:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001954d:	50                   	push   eax
c001954e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019552:	50                   	push   eax
c0019553:	e8 02 a7 fe ff       	call   c0003c5a <f_open>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019562:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019569:	85 c0                	test   eax,eax
c001956b:	74 0b                	je     c0019578 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001956d:	78 31                	js     c00195a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001956f:	83 e8 04             	sub    eax,0x4
c0019572:	83 f8 01             	cmp    eax,0x1
c0019575:	77 29                	ja     c00195a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019577:	90                   	nop
c0019578:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019587:	50                   	push   eax
c0019588:	e8 9c ae fe ff       	call   c0004429 <f_close>
c001958d:	83 c4 10             	add    esp,0x10
c0019590:	90                   	nop
c0019591:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019599:	85 c0                	test   eax,eax
c001959b:	74 43                	je     c00195e0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001959d:	eb 31                	jmp    c00195d0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001959f:	90                   	nop
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00195aa:	e8 47 e5 fe ff       	call   c0007af6 <rfree>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	83 ec 04             	sub    esp,0x4
c00195b5:	6a 00                	push   0x0
c00195b7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195be:	50                   	push   eax
c00195bf:	6a 00                	push   0x0
c00195c1:	e8 32 a6 fe ff       	call   c0003bf8 <f_mount>
c00195c6:	83 c4 10             	add    esp,0x10
c00195c9:	b0 00                	mov    al,0x0
c00195cb:	eb 1b                	jmp    c00195e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195cd:	8d 76 00             	lea    esi,[esi+0x0]
c00195d0:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00195d5:	83 c0 01             	add    eax,0x1
c00195d8:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195dd:	8d 76 00             	lea    esi,[esi+0x0]
c00195e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195e7:	90                   	nop
c00195e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195ee:	c3                   	ret    
c00195ef:	90                   	nop

c00195f0 <FAT::allocateSwapfile(char const*, int)>:
c00195f0:	55                   	push   ebp
c00195f1:	57                   	push   edi
c00195f2:	56                   	push   esi
c00195f3:	53                   	push   ebx
c00195f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019605:	83 ec 0c             	sub    esp,0xc
c0019608:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001960f:	e8 c2 e4 fe ff       	call   c0007ad6 <malloc>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	89 c7                	mov    edi,eax
c0019619:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001961e:	83 ec 04             	sub    esp,0x4
c0019621:	50                   	push   eax
c0019622:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019629:	57                   	push   edi
c001962a:	e8 3d 25 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019639:	83 ec 04             	sub    esp,0x4
c001963c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019640:	50                   	push   eax
c0019641:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019645:	50                   	push   eax
c0019646:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001964d:	e8 3a 28 ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c0019652:	83 c4 10             	add    esp,0x10
c0019655:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001965c:	c1 e0 14             	shl    eax,0x14
c001965f:	89 c7                	mov    edi,eax
c0019661:	89 c5                	mov    ebp,eax
c0019663:	c1 fd 1f             	sar    ebp,0x1f
c0019666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001966a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001966e:	89 f9                	mov    ecx,edi
c0019670:	31 c1                	xor    ecx,eax
c0019672:	89 cb                	mov    ebx,ecx
c0019674:	89 e9                	mov    ecx,ebp
c0019676:	31 d1                	xor    ecx,edx
c0019678:	89 ce                	mov    esi,ecx
c001967a:	89 f0                	mov    eax,esi
c001967c:	09 d8                	or     eax,ebx
c001967e:	0f 84 9c 00 00 00    	je     c0019720 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019684:	83 ec 0c             	sub    esp,0xc
c0019687:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001968e:	e8 c5 26 ff ff       	call   c000bd58 <File::unlink()>
c0019693:	83 c4 10             	add    esp,0x10
c0019696:	83 ec 08             	sub    esp,0x8
c0019699:	6a 12                	push   0x12
c001969b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196a2:	e8 e3 24 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196c5:	c1 e0 14             	shl    eax,0x14
c00196c8:	83 ec 04             	sub    esp,0x4
c00196cb:	6a 01                	push   0x1
c00196cd:	50                   	push   eax
c00196ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00196d5:	e8 d6 bb fe ff       	call   c00052b0 <f_expand>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00196e6:	83 c0 10             	add    eax,0x10
c00196e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196f2:	52                   	push   edx
c00196f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196f7:	52                   	push   edx
c00196f8:	6a 00                	push   0x0
c00196fa:	68 00 04 00 00       	push   0x400
c00196ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019706:	ff d0                	call   eax
c0019708:	83 c4 20             	add    esp,0x20
c001970b:	83 ec 0c             	sub    esp,0xc
c001970e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019715:	e8 ce 24 ff ff       	call   c000bbe8 <File::close()>
c001971a:	83 c4 10             	add    esp,0x10
c001971d:	8d 76 00             	lea    esi,[esi+0x0]
c0019720:	83 ec 08             	sub    esp,0x8
c0019723:	6a 01                	push   0x1
c0019725:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001972c:	e8 59 24 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001973b:	8b 00                	mov    eax,DWORD PTR [eax]
c001973d:	83 c0 0c             	add    eax,0xc
c0019740:	8b 00                	mov    eax,DWORD PTR [eax]
c0019742:	83 ec 0c             	sub    esp,0xc
c0019745:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019749:	52                   	push   edx
c001974a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001974e:	52                   	push   edx
c001974f:	6a 00                	push   0x0
c0019751:	6a 04                	push   0x4
c0019753:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001975a:	ff d0                	call   eax
c001975c:	83 c4 20             	add    esp,0x20
c001975f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019766:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001976c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019773:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001977a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001977d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001978e:	e8 55 24 ff ff       	call   c000bbe8 <File::close()>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001979d:	ba 00 00 00 00       	mov    edx,0x0
c00197a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00197a8:	5b                   	pop    ebx
c00197a9:	5e                   	pop    esi
c00197aa:	5f                   	pop    edi
c00197ab:	5d                   	pop    ebp
c00197ac:	c3                   	ret    
c00197ad:	90                   	nop
c00197ae:	66 90                	xchg   ax,ax

c00197b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197b0:	57                   	push   edi
c00197b1:	56                   	push   esi
c00197b2:	53                   	push   ebx
c00197b3:	81 ec 50 02 00 00    	sub    esp,0x250
c00197b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197c1:	74 0d                	je     c00197d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197cb:	75 0f                	jne    c00197dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]
c00197d0:	b8 04 00 00 00       	mov    eax,0x4
c00197d5:	e9 3a 01 00 00       	jmp    c0019914 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197da:	66 90                	xchg   ax,ax
c00197dc:	83 ec 08             	sub    esp,0x8
c00197df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197e6:	50                   	push   eax
c00197e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197ee:	e8 03 af fe ff       	call   c00046f6 <f_readdir>
c00197f3:	83 c4 10             	add    esp,0x10
c00197f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019804:	83 ec 0c             	sub    esp,0xc
c0019807:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001980e:	83 c0 16             	add    eax,0x16
c0019811:	50                   	push   eax
c0019812:	e8 59 6d fe ff       	call   c0000570 <strlen>
c0019817:	83 c4 10             	add    esp,0x10
c001981a:	ba 00 00 00 00       	mov    edx,0x0
c001981f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019823:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019827:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001982e:	0f b6 c0             	movzx  eax,al
c0019831:	83 e0 10             	and    eax,0x10
c0019834:	74 0a                	je     c0019840 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019836:	b8 02 00 00 00       	mov    eax,0x2
c001983b:	eb 0b                	jmp    c0019848 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	b8 01 00 00 00       	mov    eax,0x1
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001984c:	83 ec 08             	sub    esp,0x8
c001984f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019856:	83 c0 16             	add    eax,0x16
c0019859:	50                   	push   eax
c001985a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001985e:	83 c0 10             	add    eax,0x10
c0019861:	50                   	push   eax
c0019862:	e8 d9 6d fe ff       	call   c0000640 <strcpy>
c0019867:	83 c4 10             	add    esp,0x10
c001986a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019871:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019878:	8d 44 24 08          	lea    eax,[esp+0x8]
c001987c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019883:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001988a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019891:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019898:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001989f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00198a6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00198ad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00198b4:	89 c6                	mov    esi,eax
c00198b6:	89 d7                	mov    edi,edx
c00198b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198ba:	89 c8                	mov    eax,ecx
c00198bc:	89 fa                	mov    edx,edi
c00198be:	89 f3                	mov    ebx,esi
c00198c0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198c7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198ce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00198d5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198e2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198e9:	0f be c0             	movsx  eax,al
c00198ec:	85 c0                	test   eax,eax
c00198ee:	75 08                	jne    c00198f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198f0:	b8 07 00 00 00       	mov    eax,0x7
c00198f5:	eb 1d                	jmp    c0019914 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198f7:	90                   	nop
c00198f8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198ff:	85 c0                	test   eax,eax
c0019901:	75 09                	jne    c001990c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019903:	b8 00 00 00 00       	mov    eax,0x0
c0019908:	eb 0a                	jmp    c0019914 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001990a:	66 90                	xchg   ax,ax
c001990c:	b8 01 00 00 00       	mov    eax,0x1
c0019911:	8d 76 00             	lea    esi,[esi+0x0]
c0019914:	81 c4 50 02 00 00    	add    esp,0x250
c001991a:	5b                   	pop    ebx
c001991b:	5e                   	pop    esi
c001991c:	5f                   	pop    edi
c001991d:	c3                   	ret    
c001991e:	66 90                	xchg   ax,ax

c0019920 <FAT::read(void*, unsigned long, void*, int*)>:
c0019920:	83 ec 1c             	sub    esp,0x1c
c0019923:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019928:	74 0a                	je     c0019934 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001992a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001992f:	75 0b                	jne    c001993c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	b8 04 00 00 00       	mov    eax,0x4
c0019939:	eb 41                	jmp    c001997c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001993b:	90                   	nop
c001993c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019940:	50                   	push   eax
c0019941:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019945:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019949:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001994d:	e8 cb a5 fe ff       	call   c0003f1d <f_read>
c0019952:	83 c4 10             	add    esp,0x10
c0019955:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001995d:	89 c2                	mov    edx,eax
c001995f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019963:	89 10                	mov    DWORD PTR [eax],edx
c0019965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019969:	85 c0                	test   eax,eax
c001996b:	75 07                	jne    c0019974 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001996d:	b8 00 00 00 00       	mov    eax,0x0
c0019972:	eb 08                	jmp    c001997c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019974:	b8 01 00 00 00       	mov    eax,0x1
c0019979:	8d 76 00             	lea    esi,[esi+0x0]
c001997c:	83 c4 1c             	add    esp,0x1c
c001997f:	c3                   	ret    

c0019980 <FAT::write(void*, unsigned long, void*, int*)>:
c0019980:	83 ec 1c             	sub    esp,0x1c
c0019983:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019988:	74 0a                	je     c0019994 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001998a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001998f:	75 0b                	jne    c001999c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019991:	8d 76 00             	lea    esi,[esi+0x0]
c0019994:	b8 04 00 00 00       	mov    eax,0x4
c0019999:	eb 41                	jmp    c00199dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001999b:	90                   	nop
c001999c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199a0:	50                   	push   eax
c00199a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ad:	e8 6a a7 fe ff       	call   c000411c <f_write>
c00199b2:	83 c4 10             	add    esp,0x10
c00199b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199bd:	89 c2                	mov    edx,eax
c00199bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199c3:	89 10                	mov    DWORD PTR [eax],edx
c00199c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199c9:	85 c0                	test   eax,eax
c00199cb:	75 07                	jne    c00199d4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199cd:	b8 00 00 00 00       	mov    eax,0x0
c00199d2:	eb 08                	jmp    c00199dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199d4:	b8 01 00 00 00       	mov    eax,0x1
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	83 c4 1c             	add    esp,0x1c
c00199df:	c3                   	ret    

c00199e0 <FAT::close(void*)>:
c00199e0:	83 ec 1c             	sub    esp,0x1c
c00199e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199e8:	75 0a                	jne    c00199f4 <FAT::close(void*)+0x14>
c00199ea:	b8 04 00 00 00       	mov    eax,0x4
c00199ef:	eb 3f                	jmp    c0019a30 <FAT::close(void*)+0x50>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199fb:	e8 29 aa fe ff       	call   c0004429 <f_close>
c0019a00:	83 c4 10             	add    esp,0x10
c0019a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a07:	83 ec 0c             	sub    esp,0xc
c0019a0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a0e:	e8 d3 e0 fe ff       	call   c0007ae6 <free>
c0019a13:	83 c4 10             	add    esp,0x10
c0019a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a1a:	85 c0                	test   eax,eax
c0019a1c:	75 0a                	jne    c0019a28 <FAT::close(void*)+0x48>
c0019a1e:	b8 00 00 00 00       	mov    eax,0x0
c0019a23:	eb 0b                	jmp    c0019a30 <FAT::close(void*)+0x50>
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	b8 01 00 00 00       	mov    eax,0x1
c0019a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a30:	83 c4 1c             	add    esp,0x1c
c0019a33:	c3                   	ret    

c0019a34 <FAT::closeDir(void*)>:
c0019a34:	83 ec 1c             	sub    esp,0x1c
c0019a37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a3c:	75 0a                	jne    c0019a48 <FAT::closeDir(void*)+0x14>
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	eb 3f                	jmp    c0019a84 <FAT::closeDir(void*)+0x50>
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	83 ec 0c             	sub    esp,0xc
c0019a4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a4f:	e8 80 ac fe ff       	call   c00046d4 <f_closedir>
c0019a54:	83 c4 10             	add    esp,0x10
c0019a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a5b:	83 ec 0c             	sub    esp,0xc
c0019a5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a62:	e8 7f e0 fe ff       	call   c0007ae6 <free>
c0019a67:	83 c4 10             	add    esp,0x10
c0019a6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a6e:	85 c0                	test   eax,eax
c0019a70:	75 0a                	jne    c0019a7c <FAT::closeDir(void*)+0x48>
c0019a72:	b8 00 00 00 00       	mov    eax,0x0
c0019a77:	eb 0b                	jmp    c0019a84 <FAT::closeDir(void*)+0x50>
c0019a79:	8d 76 00             	lea    esi,[esi+0x0]
c0019a7c:	b8 01 00 00 00       	mov    eax,0x1
c0019a81:	8d 76 00             	lea    esi,[esi+0x0]
c0019a84:	83 c4 1c             	add    esp,0x1c
c0019a87:	c3                   	ret    

c0019a88 <FAT::truncate(void*, unsigned long long)>:
c0019a88:	83 ec 2c             	sub    esp,0x2c
c0019a8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019aa0:	75 0a                	jne    c0019aac <FAT::truncate(void*, unsigned long long)+0x24>
c0019aa2:	b8 04 00 00 00       	mov    eax,0x4
c0019aa7:	eb 47                	jmp    c0019af0 <FAT::truncate(void*, unsigned long long)+0x68>
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ab0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ab7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019abf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ac3:	83 ec 08             	sub    esp,0x8
c0019ac6:	50                   	push   eax
c0019ac7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019acb:	e8 88 a9 fe ff       	call   c0004458 <f_lseek>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ad7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019adb:	85 c0                	test   eax,eax
c0019add:	75 09                	jne    c0019ae8 <FAT::truncate(void*, unsigned long long)+0x60>
c0019adf:	b8 00 00 00 00       	mov    eax,0x0
c0019ae4:	eb 0a                	jmp    c0019af0 <FAT::truncate(void*, unsigned long long)+0x68>
c0019ae6:	66 90                	xchg   ax,ax
c0019ae8:	b8 01 00 00 00       	mov    eax,0x1
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	83 c4 2c             	add    esp,0x2c
c0019af3:	c3                   	ret    

c0019af4 <FAT::seek(void*, unsigned long long)>:
c0019af4:	83 ec 2c             	sub    esp,0x2c
c0019af7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019aff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b07:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b0c:	75 0a                	jne    c0019b18 <FAT::seek(void*, unsigned long long)+0x24>
c0019b0e:	b8 04 00 00 00       	mov    eax,0x4
c0019b13:	eb 33                	jmp    c0019b48 <FAT::seek(void*, unsigned long long)+0x54>
c0019b15:	8d 76 00             	lea    esi,[esi+0x0]
c0019b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b1c:	83 ec 08             	sub    esp,0x8
c0019b1f:	50                   	push   eax
c0019b20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b24:	e8 2f a9 fe ff       	call   c0004458 <f_lseek>
c0019b29:	83 c4 10             	add    esp,0x10
c0019b2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b34:	85 c0                	test   eax,eax
c0019b36:	75 08                	jne    c0019b40 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b38:	b8 00 00 00 00       	mov    eax,0x0
c0019b3d:	eb 09                	jmp    c0019b48 <FAT::seek(void*, unsigned long long)+0x54>
c0019b3f:	90                   	nop
c0019b40:	b8 01 00 00 00       	mov    eax,0x1
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]
c0019b48:	83 c4 2c             	add    esp,0x2c
c0019b4b:	c3                   	ret    

c0019b4c <fatWrapperReadDisk>:
c0019b4c:	53                   	push   ebx
c0019b4d:	83 ec 18             	sub    esp,0x18
c0019b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b5d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b6c:	ba 00 00 00 00       	mov    edx,0x0
c0019b71:	83 ec 0c             	sub    esp,0xc
c0019b74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b78:	53                   	push   ebx
c0019b79:	52                   	push   edx
c0019b7a:	50                   	push   eax
c0019b7b:	51                   	push   ecx
c0019b7c:	e8 47 42 ff ff       	call   c000ddc8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b81:	83 c4 20             	add    esp,0x20
c0019b84:	83 c4 18             	add    esp,0x18
c0019b87:	5b                   	pop    ebx
c0019b88:	c3                   	ret    
c0019b89:	8d 76 00             	lea    esi,[esi+0x0]

c0019b8c <fatWrapperWriteDisk>:
c0019b8c:	53                   	push   ebx
c0019b8d:	83 ec 18             	sub    esp,0x18
c0019b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b9d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ba4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ba8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bac:	ba 00 00 00 00       	mov    edx,0x0
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bb8:	53                   	push   ebx
c0019bb9:	52                   	push   edx
c0019bba:	50                   	push   eax
c0019bbb:	51                   	push   ecx
c0019bbc:	e8 73 42 ff ff       	call   c000de34 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bc1:	83 c4 20             	add    esp,0x20
c0019bc4:	83 c4 18             	add    esp,0x18
c0019bc7:	5b                   	pop    ebx
c0019bc8:	c3                   	ret    
c0019bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0019bcc <fatWrapperIoctl>:
c0019bcc:	53                   	push   ebx
c0019bcd:	83 ec 28             	sub    esp,0x28
c0019bd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019bd8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bdc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be5:	83 f8 02             	cmp    eax,0x2
c0019be8:	75 32                	jne    c0019c1c <fatWrapperIoctl+0x50>
c0019bea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bf2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bf7:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bfe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c0e:	66 89 02             	mov    WORD PTR [edx],ax
c0019c11:	b8 00 00 00 00       	mov    eax,0x0
c0019c16:	e9 c5 00 00 00       	jmp    c0019ce0 <fatWrapperIoctl+0x114>
c0019c1b:	90                   	nop
c0019c1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c21:	83 f8 01             	cmp    eax,0x1
c0019c24:	75 6a                	jne    c0019c90 <fatWrapperIoctl+0xc4>
c0019c26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c33:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c40:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c46:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c4c:	89 c8                	mov    eax,ecx
c0019c4e:	89 da                	mov    edx,ebx
c0019c50:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c54:	c1 e0 0a             	shl    eax,0xa
c0019c57:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c5c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c63:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c69:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c6f:	89 cb                	mov    ebx,ecx
c0019c71:	c1 fb 1f             	sar    ebx,0x1f
c0019c74:	53                   	push   ebx
c0019c75:	51                   	push   ecx
c0019c76:	52                   	push   edx
c0019c77:	50                   	push   eax
c0019c78:	e8 73 5b 00 00       	call   c001f7f0 <__udivdi3>
c0019c7d:	83 c4 10             	add    esp,0x10
c0019c80:	89 c2                	mov    edx,eax
c0019c82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c86:	89 10                	mov    DWORD PTR [eax],edx
c0019c88:	b8 00 00 00 00       	mov    eax,0x0
c0019c8d:	eb 51                	jmp    c0019ce0 <fatWrapperIoctl+0x114>
c0019c8f:	90                   	nop
c0019c90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c95:	85 c0                	test   eax,eax
c0019c97:	75 07                	jne    c0019ca0 <fatWrapperIoctl+0xd4>
c0019c99:	b8 00 00 00 00       	mov    eax,0x0
c0019c9e:	eb 40                	jmp    c0019ce0 <fatWrapperIoctl+0x114>
c0019ca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ca5:	83 f8 03             	cmp    eax,0x3
c0019ca8:	75 1a                	jne    c0019cc4 <fatWrapperIoctl+0xf8>
c0019caa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cb6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019cbc:	b8 00 00 00 00       	mov    eax,0x0
c0019cc1:	eb 1d                	jmp    c0019ce0 <fatWrapperIoctl+0x114>
c0019cc3:	90                   	nop
c0019cc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc9:	83 f8 04             	cmp    eax,0x4
c0019ccc:	75 0a                	jne    c0019cd8 <fatWrapperIoctl+0x10c>
c0019cce:	b8 00 00 00 00       	mov    eax,0x0
c0019cd3:	eb 0b                	jmp    c0019ce0 <fatWrapperIoctl+0x114>
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	b8 04 00 00 00       	mov    eax,0x4
c0019cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce0:	83 c4 28             	add    esp,0x28
c0019ce3:	5b                   	pop    ebx
c0019ce4:	c3                   	ret    
c0019ce5:	90                   	nop
c0019ce6:	66 90                	xchg   ax,ax

c0019ce8 <FAT::FAT()>:
c0019ce8:	83 ec 1c             	sub    esp,0x1c
c0019ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cef:	83 ec 0c             	sub    esp,0xc
c0019cf2:	50                   	push   eax
c0019cf3:	e8 d2 1a ff ff       	call   c000b7ca <Filesystem::Filesystem()>
c0019cf8:	83 c4 10             	add    esp,0x10
c0019cfb:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c0019d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d04:	89 10                	mov    DWORD PTR [eax],edx
c0019d06:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d18:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d1d:	7f 19                	jg     c0019d38 <FAT::FAT()+0x50>
c0019d1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d23:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d2e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d33:	eb e3                	jmp    c0019d18 <FAT::FAT()+0x30>
c0019d35:	8d 76 00             	lea    esi,[esi+0x0]
c0019d38:	90                   	nop
c0019d39:	83 c4 1c             	add    esp,0x1c
c0019d3c:	c3                   	ret    
c0019d3d:	90                   	nop
c0019d3e:	66 90                	xchg   ax,ax

c0019d40 <FAT::fixFilepath(char*)>:
c0019d40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d44:	8a 00                	mov    al,BYTE PTR [eax]
c0019d46:	0f be c0             	movsx  eax,al
c0019d49:	83 f8 40             	cmp    eax,0x40
c0019d4c:	7e 2e                	jle    c0019d7c <FAT::fixFilepath(char*)+0x3c>
c0019d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d52:	8a 00                	mov    al,BYTE PTR [eax]
c0019d54:	83 e8 41             	sub    eax,0x41
c0019d57:	88 c2                	mov    dl,al
c0019d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5d:	88 10                	mov    BYTE PTR [eax],dl
c0019d5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d63:	8a 00                	mov    al,BYTE PTR [eax]
c0019d65:	0f be c0             	movsx  eax,al
c0019d68:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d6f:	83 c0 30             	add    eax,0x30
c0019d72:	88 c2                	mov    dl,al
c0019d74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d78:	88 10                	mov    BYTE PTR [eax],dl
c0019d7a:	66 90                	xchg   ax,ax
c0019d7c:	90                   	nop
c0019d7d:	c3                   	ret    
c0019d7e:	66 90                	xchg   ax,ax

c0019d80 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d8e:	74 0c                	je     c0019d9c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d98:	75 0e                	jne    c0019da8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d9a:	66 90                	xchg   ax,ax
c0019d9c:	b8 04 00 00 00       	mov    eax,0x4
c0019da1:	e9 46 01 00 00       	jmp    c0019eec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019db2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019db6:	50                   	push   eax
c0019db7:	e8 84 68 fe ff       	call   c0000640 <strcpy>
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	83 ec 08             	sub    esp,0x8
c0019dc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dc6:	50                   	push   eax
c0019dc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dce:	e8 6d ff ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c0019dd3:	83 c4 10             	add    esp,0x10
c0019dd6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dde:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019de5:	83 e0 01             	and    eax,0x1
c0019de8:	74 12                	je     c0019dfc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019dea:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019df1:	83 c8 01             	or     eax,0x1
c0019df4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dfb:	90                   	nop
c0019dfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e03:	83 e0 04             	and    eax,0x4
c0019e06:	74 24                	je     c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e08:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e0f:	83 c8 30             	or     eax,0x30
c0019e12:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e19:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e20:	83 c8 02             	or     eax,0x2
c0019e23:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e2a:	66 90                	xchg   ax,ax
c0019e2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e33:	83 e0 02             	and    eax,0x2
c0019e36:	74 14                	je     c0019e4c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e3f:	83 c8 02             	or     eax,0x2
c0019e42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e49:	8d 76 00             	lea    esi,[esi+0x0]
c0019e4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e53:	83 e0 08             	and    eax,0x8
c0019e56:	74 14                	je     c0019e6c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e58:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e5f:	83 c8 04             	or     eax,0x4
c0019e62:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e69:	8d 76 00             	lea    esi,[esi+0x0]
c0019e6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e73:	83 e0 10             	and    eax,0x10
c0019e76:	74 14                	je     c0019e8c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e78:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e7f:	83 c8 08             	or     eax,0x8
c0019e82:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e89:	8d 76 00             	lea    esi,[esi+0x0]
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	68 28 02 00 00       	push   0x228
c0019e94:	e8 3d dc fe ff       	call   c0007ad6 <malloc>
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	89 c2                	mov    edx,eax
c0019e9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ea5:	89 10                	mov    DWORD PTR [eax],edx
c0019ea7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019eaf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eb8:	83 ec 04             	sub    esp,0x4
c0019ebb:	52                   	push   edx
c0019ebc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ec0:	52                   	push   edx
c0019ec1:	50                   	push   eax
c0019ec2:	e8 93 9d fe ff       	call   c0003c5a <f_open>
c0019ec7:	83 c4 10             	add    esp,0x10
c0019eca:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ed1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ed9:	74 09                	je     c0019ee4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019edb:	b8 01 00 00 00       	mov    eax,0x1
c0019ee0:	eb 0a                	jmp    c0019eec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	b8 00 00 00 00       	mov    eax,0x0
c0019ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eec:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ef2:	c3                   	ret    
c0019ef3:	90                   	nop

c0019ef4 <FAT::openDir(char const*, void**)>:
c0019ef4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019efa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f02:	74 0c                	je     c0019f10 <FAT::openDir(char const*, void**)+0x1c>
c0019f04:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f0c:	75 0e                	jne    c0019f1c <FAT::openDir(char const*, void**)+0x28>
c0019f0e:	66 90                	xchg   ax,ax
c0019f10:	b8 04 00 00 00       	mov    eax,0x4
c0019f15:	e9 82 00 00 00       	jmp    c0019f9c <FAT::openDir(char const*, void**)+0xa8>
c0019f1a:	66 90                	xchg   ax,ax
c0019f1c:	83 ec 08             	sub    esp,0x8
c0019f1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f2a:	50                   	push   eax
c0019f2b:	e8 10 67 fe ff       	call   c0000640 <strcpy>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	83 ec 08             	sub    esp,0x8
c0019f36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f3a:	50                   	push   eax
c0019f3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f42:	e8 f9 fd ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	83 ec 0c             	sub    esp,0xc
c0019f4d:	6a 30                	push   0x30
c0019f4f:	e8 82 db fe ff       	call   c0007ad6 <malloc>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	89 c2                	mov    edx,eax
c0019f59:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f60:	89 10                	mov    DWORD PTR [eax],edx
c0019f62:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f6b:	83 ec 08             	sub    esp,0x8
c0019f6e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f72:	52                   	push   edx
c0019f73:	50                   	push   eax
c0019f74:	e8 90 a6 fe ff       	call   c0004609 <f_opendir>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f83:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f8b:	74 07                	je     c0019f94 <FAT::openDir(char const*, void**)+0xa0>
c0019f8d:	b8 01 00 00 00       	mov    eax,0x1
c0019f92:	eb 08                	jmp    c0019f9c <FAT::openDir(char const*, void**)+0xa8>
c0019f94:	b8 00 00 00 00       	mov    eax,0x0
c0019f99:	8d 76 00             	lea    esi,[esi+0x0]
c0019f9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fa2:	c3                   	ret    
c0019fa3:	90                   	nop

c0019fa4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019fa4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019faa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019fb2:	75 0c                	jne    c0019fc0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019fb4:	b8 04 00 00 00       	mov    eax,0x4
c0019fb9:	e9 d6 00 00 00       	jmp    c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fbe:	66 90                	xchg   ax,ax
c0019fc0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019fc8:	75 0a                	jne    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019fca:	b8 04 00 00 00       	mov    eax,0x4
c0019fcf:	e9 c0 00 00 00       	jmp    c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fd4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fdc:	75 0a                	jne    c0019fe8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fde:	b8 04 00 00 00       	mov    eax,0x4
c0019fe3:	e9 ac 00 00 00       	jmp    c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fe8:	83 ec 08             	sub    esp,0x8
c0019feb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ff2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ff9:	50                   	push   eax
c0019ffa:	e8 41 66 fe ff       	call   c0000640 <strcpy>
c0019fff:	83 c4 10             	add    esp,0x10
c001a002:	83 ec 08             	sub    esp,0x8
c001a005:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a00c:	50                   	push   eax
c001a00d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a014:	e8 27 fd ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	83 ec 08             	sub    esp,0x8
c001a01f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a023:	50                   	push   eax
c001a024:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a02b:	50                   	push   eax
c001a02c:	e8 57 a7 fe ff       	call   c0004788 <f_stat>
c001a031:	83 c4 10             	add    esp,0x10
c001a034:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a03b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a042:	85 c0                	test   eax,eax
c001a044:	74 0a                	je     c001a050 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a046:	83 f8 04             	cmp    eax,0x4
c001a049:	74 39                	je     c001a084 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a04b:	eb 3f                	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a04d:	8d 76 00             	lea    esi,[esi+0x0]
c001a050:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a054:	0f b6 c0             	movzx  eax,al
c001a057:	83 e0 10             	and    eax,0x10
c001a05a:	0f 95 c2             	setne  dl
c001a05d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a064:	88 10                	mov    BYTE PTR [eax],dl
c001a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a06a:	ba 00 00 00 00       	mov    edx,0x0
c001a06f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a076:	89 01                	mov    DWORD PTR [ecx],eax
c001a078:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a07b:	b8 00 00 00 00       	mov    eax,0x0
c001a080:	eb 12                	jmp    c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a082:	66 90                	xchg   ax,ax
c001a084:	b8 02 00 00 00       	mov    eax,0x2
c001a089:	eb 09                	jmp    c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a08b:	90                   	nop
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	8d 76 00             	lea    esi,[esi+0x0]
c001a094:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <FAT::unlink(char const*)>:
c001a09c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0aa:	75 08                	jne    c001a0b4 <FAT::unlink(char const*)+0x18>
c001a0ac:	b8 04 00 00 00       	mov    eax,0x4
c001a0b1:	eb 61                	jmp    c001a114 <FAT::unlink(char const*)+0x78>
c001a0b3:	90                   	nop
c001a0b4:	83 ec 08             	sub    esp,0x8
c001a0b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0be:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0c2:	50                   	push   eax
c001a0c3:	e8 78 65 fe ff       	call   c0000640 <strcpy>
c001a0c8:	83 c4 10             	add    esp,0x10
c001a0cb:	83 ec 08             	sub    esp,0x8
c001a0ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0d2:	50                   	push   eax
c001a0d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0da:	e8 61 fc ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a0df:	83 c4 10             	add    esp,0x10
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0e9:	50                   	push   eax
c001a0ea:	e8 0b a9 fe ff       	call   c00049fa <f_unlink>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a100:	85 c0                	test   eax,eax
c001a102:	75 08                	jne    c001a10c <FAT::unlink(char const*)+0x70>
c001a104:	b8 00 00 00 00       	mov    eax,0x0
c001a109:	eb 09                	jmp    c001a114 <FAT::unlink(char const*)+0x78>
c001a10b:	90                   	nop
c001a10c:	b8 01 00 00 00       	mov    eax,0x1
c001a111:	8d 76 00             	lea    esi,[esi+0x0]
c001a114:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a11a:	c3                   	ret    
c001a11b:	90                   	nop

c001a11c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a11c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a122:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a129:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a130:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a134:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a138:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a140:	75 0a                	jne    c001a14c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a142:	b8 04 00 00 00       	mov    eax,0x4
c001a147:	e9 7c 01 00 00       	jmp    c001a2c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a14c:	83 ec 08             	sub    esp,0x8
c001a14f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a156:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a15a:	50                   	push   eax
c001a15b:	e8 e0 64 fe ff       	call   c0000640 <strcpy>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	83 ec 08             	sub    esp,0x8
c001a166:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a16a:	50                   	push   eax
c001a16b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a172:	e8 c9 fb ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a182:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a18a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a18f:	83 e0 01             	and    eax,0x1
c001a192:	74 14                	je     c001a1a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a194:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a19b:	83 c8 01             	or     eax,0x1
c001a19e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1ad:	83 e0 02             	and    eax,0x2
c001a1b0:	74 12                	je     c001a1c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a1b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1b9:	83 c8 20             	or     eax,0x20
c001a1bc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1c3:	90                   	nop
c001a1c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1c9:	83 e0 04             	and    eax,0x4
c001a1cc:	74 12                	je     c001a1e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a1ce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1d5:	83 c8 04             	or     eax,0x4
c001a1d8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1df:	90                   	nop
c001a1e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1e5:	83 e0 08             	and    eax,0x8
c001a1e8:	74 12                	je     c001a1fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a1ea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1f1:	83 c8 02             	or     eax,0x2
c001a1f4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1fb:	90                   	nop
c001a1fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a201:	83 e0 01             	and    eax,0x1
c001a204:	74 12                	je     c001a218 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a206:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a20d:	83 c8 01             	or     eax,0x1
c001a210:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a217:	90                   	nop
c001a218:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a21d:	83 e0 02             	and    eax,0x2
c001a220:	74 12                	je     c001a234 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a222:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a229:	83 c8 20             	or     eax,0x20
c001a22c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a233:	90                   	nop
c001a234:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a239:	83 e0 04             	and    eax,0x4
c001a23c:	74 12                	je     c001a250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a23e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a245:	83 c8 04             	or     eax,0x4
c001a248:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a24f:	90                   	nop
c001a250:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a255:	83 e0 08             	and    eax,0x8
c001a258:	74 12                	je     c001a26c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a25a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a261:	83 c8 02             	or     eax,0x2
c001a264:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a26b:	90                   	nop
c001a26c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a273:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a27a:	09 d0                	or     eax,edx
c001a27c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a283:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a28b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a293:	83 ec 04             	sub    esp,0x4
c001a296:	52                   	push   edx
c001a297:	50                   	push   eax
c001a298:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a29c:	50                   	push   eax
c001a29d:	e8 cd ab fe ff       	call   c0004e6f <f_chmod>
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2ac:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2b3:	85 c0                	test   eax,eax
c001a2b5:	75 09                	jne    c001a2c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a2b7:	b8 00 00 00 00       	mov    eax,0x0
c001a2bc:	eb 0a                	jmp    c001a2c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a2be:	66 90                	xchg   ax,ax
c001a2c0:	b8 01 00 00 00       	mov    eax,0x1
c001a2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2ce:	c3                   	ret    
c001a2cf:	90                   	nop

c001a2d0 <FAT::rename(char const*, char const*)>:
c001a2d0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2d6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2de:	74 0c                	je     c001a2ec <FAT::rename(char const*, char const*)+0x1c>
c001a2e0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2e8:	75 0e                	jne    c001a2f8 <FAT::rename(char const*, char const*)+0x28>
c001a2ea:	66 90                	xchg   ax,ax
c001a2ec:	b8 04 00 00 00       	mov    eax,0x4
c001a2f1:	e9 9e 00 00 00       	jmp    c001a394 <FAT::rename(char const*, char const*)+0xc4>
c001a2f6:	66 90                	xchg   ax,ax
c001a2f8:	83 ec 08             	sub    esp,0x8
c001a2fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a302:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a309:	50                   	push   eax
c001a30a:	e8 31 63 fe ff       	call   c0000640 <strcpy>
c001a30f:	83 c4 10             	add    esp,0x10
c001a312:	83 ec 08             	sub    esp,0x8
c001a315:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a31c:	50                   	push   eax
c001a31d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a324:	e8 17 fa ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	83 ec 08             	sub    esp,0x8
c001a32f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a336:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a33a:	50                   	push   eax
c001a33b:	e8 00 63 fe ff       	call   c0000640 <strcpy>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	83 ec 08             	sub    esp,0x8
c001a346:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a34a:	50                   	push   eax
c001a34b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a352:	e8 e9 f9 ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a357:	83 c4 10             	add    esp,0x10
c001a35a:	83 ec 08             	sub    esp,0x8
c001a35d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a361:	50                   	push   eax
c001a362:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a369:	50                   	push   eax
c001a36a:	e8 48 a9 fe ff       	call   c0004cb7 <f_rename>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a379:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a380:	85 c0                	test   eax,eax
c001a382:	75 08                	jne    c001a38c <FAT::rename(char const*, char const*)+0xbc>
c001a384:	b8 00 00 00 00       	mov    eax,0x0
c001a389:	eb 09                	jmp    c001a394 <FAT::rename(char const*, char const*)+0xc4>
c001a38b:	90                   	nop
c001a38c:	b8 01 00 00 00       	mov    eax,0x1
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a39a:	c3                   	ret    
c001a39b:	90                   	nop

c001a39c <FAT::mkdir(char const*)>:
c001a39c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3aa:	75 08                	jne    c001a3b4 <FAT::mkdir(char const*)+0x18>
c001a3ac:	b8 04 00 00 00       	mov    eax,0x4
c001a3b1:	eb 61                	jmp    c001a414 <FAT::mkdir(char const*)+0x78>
c001a3b3:	90                   	nop
c001a3b4:	83 ec 08             	sub    esp,0x8
c001a3b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3be:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3c2:	50                   	push   eax
c001a3c3:	e8 78 62 fe ff       	call   c0000640 <strcpy>
c001a3c8:	83 c4 10             	add    esp,0x10
c001a3cb:	83 ec 08             	sub    esp,0x8
c001a3ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3d2:	50                   	push   eax
c001a3d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3da:	e8 61 f9 ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	83 ec 0c             	sub    esp,0xc
c001a3e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3e9:	50                   	push   eax
c001a3ea:	e8 2d a7 fe ff       	call   c0004b1c <f_mkdir>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a400:	85 c0                	test   eax,eax
c001a402:	75 08                	jne    c001a40c <FAT::mkdir(char const*)+0x70>
c001a404:	b8 00 00 00 00       	mov    eax,0x0
c001a409:	eb 09                	jmp    c001a414 <FAT::mkdir(char const*)+0x78>
c001a40b:	90                   	nop
c001a40c:	b8 01 00 00 00       	mov    eax,0x1
c001a411:	8d 76 00             	lea    esi,[esi+0x0]
c001a414:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a41a:	c3                   	ret    
c001a41b:	90                   	nop

c001a41c <FAT::exists(char const*)>:
c001a41c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a422:	83 ec 08             	sub    esp,0x8
c001a425:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a42c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a430:	50                   	push   eax
c001a431:	e8 0a 62 fe ff       	call   c0000640 <strcpy>
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	83 ec 08             	sub    esp,0x8
c001a43c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a440:	50                   	push   eax
c001a441:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a448:	e8 f3 f8 ff ff       	call   c0019d40 <FAT::fixFilepath(char*)>
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	83 ec 08             	sub    esp,0x8
c001a453:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a45a:	50                   	push   eax
c001a45b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a45f:	50                   	push   eax
c001a460:	e8 23 a3 fe ff       	call   c0004788 <f_stat>
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a46f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a476:	85 c0                	test   eax,eax
c001a478:	75 06                	jne    c001a480 <FAT::exists(char const*)+0x64>
c001a47a:	b0 01                	mov    al,0x1
c001a47c:	eb 06                	jmp    c001a484 <FAT::exists(char const*)+0x68>
c001a47e:	66 90                	xchg   ax,ax
c001a480:	b0 00                	mov    al,0x0
c001a482:	66 90                	xchg   ax,ax
c001a484:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a48a:	c3                   	ret    
c001a48b:	90                   	nop

c001a48c <isoReadDiscSectorHelper>:
c001a48c:	83 ec 2c             	sub    esp,0x2c
c001a48f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a493:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a497:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a49c:	83 e8 41             	sub    eax,0x41
c001a49f:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a4a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4aa:	ba 00 00 00 00       	mov    edx,0x0
c001a4af:	83 ec 0c             	sub    esp,0xc
c001a4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4ba:	52                   	push   edx
c001a4bb:	50                   	push   eax
c001a4bc:	51                   	push   ecx
c001a4bd:	e8 06 39 ff ff       	call   c000ddc8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4c2:	83 c4 20             	add    esp,0x20
c001a4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4ce:	74 0c                	je     c001a4dc <isoReadDiscSectorHelper+0x50>
c001a4d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4d4:	c1 e0 0b             	shl    eax,0xb
c001a4d7:	eb 0b                	jmp    c001a4e4 <isoReadDiscSectorHelper+0x58>
c001a4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4dc:	b8 00 00 00 00       	mov    eax,0x0
c001a4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e4:	83 c4 2c             	add    esp,0x2c
c001a4e7:	c3                   	ret    

c001a4e8 <iso_kprintf>:
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	83 ec 08             	sub    esp,0x8
c001a4ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f2:	68 0e 2d 02 c0       	push   0xc0022d0e
c001a4f7:	e8 69 04 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a4fc:	83 c4 10             	add    esp,0x10
c001a4ff:	90                   	nop
c001a500:	83 c4 0c             	add    esp,0xc
c001a503:	c3                   	ret    

c001a504 <iso_kprintfd>:
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	83 ec 08             	sub    esp,0x8
c001a50a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a50e:	68 e6 13 02 c0       	push   0xc00213e6
c001a513:	e8 4d 04 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	90                   	nop
c001a51c:	83 c4 0c             	add    esp,0xc
c001a51f:	c3                   	ret    

c001a520 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a520:	b8 08 00 00 00       	mov    eax,0x8
c001a525:	c3                   	ret    

c001a526 <ISO9660::truncate(void*, unsigned long long)>:
c001a526:	b8 01 00 00 00       	mov    eax,0x1
c001a52b:	c3                   	ret    

c001a52c <ISO9660::getName()>:
c001a52c:	b8 c4 2f 02 c0       	mov    eax,0xc0022fc4
c001a531:	c3                   	ret    

c001a532 <ISO9660::closeDir(void*)>:
c001a532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a536:	8b 00                	mov    eax,DWORD PTR [eax]
c001a538:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a53b:	90                   	nop

c001a53c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a53c:	b8 01 00 00 00       	mov    eax,0x1
c001a541:	c3                   	ret    

c001a542 <ISO9660::unlink(char const*)>:
c001a542:	b8 01 00 00 00       	mov    eax,0x1
c001a547:	c3                   	ret    

c001a548 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a548:	b8 03 00 00 00       	mov    eax,0x3
c001a54d:	c3                   	ret    

c001a54e <ISO9660::rename(char const*, char const*)>:
c001a54e:	b8 01 00 00 00       	mov    eax,0x1
c001a553:	c3                   	ret    

c001a554 <ISO9660::mkdir(char const*)>:
c001a554:	b8 01 00 00 00       	mov    eax,0x1
c001a559:	c3                   	ret    

c001a55a <ISO9660::~ISO9660()>:
c001a55a:	83 ec 0c             	sub    esp,0xc
c001a55d:	ba 04 31 02 c0       	mov    edx,0xc0023104
c001a562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a566:	89 10                	mov    DWORD PTR [eax],edx
c001a568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56c:	83 ec 0c             	sub    esp,0xc
c001a56f:	50                   	push   eax
c001a570:	e8 79 12 ff ff       	call   c000b7ee <Filesystem::~Filesystem()>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	90                   	nop
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <ISO9660::~ISO9660()>:
c001a57e:	83 ec 0c             	sub    esp,0xc
c001a581:	83 ec 0c             	sub    esp,0xc
c001a584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a588:	e8 cd ff ff ff       	call   c001a55a <ISO9660::~ISO9660()>
c001a58d:	83 c4 10             	add    esp,0x10
c001a590:	83 ec 08             	sub    esp,0x8
c001a593:	6a 08                	push   0x8
c001a595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a599:	e8 9a 02 ff ff       	call   c000a838 <operator delete(void*, unsigned long)>
c001a59e:	83 c4 10             	add    esp,0x10
c001a5a1:	83 c4 0c             	add    esp,0xc
c001a5a4:	c3                   	ret    
c001a5a5:	90                   	nop

c001a5a6 <ISO9660::exists(char const*)>:
c001a5a6:	83 ec 18             	sub    esp,0x18
c001a5a9:	68 df 2f 02 c0       	push   0xc0022fdf
c001a5ae:	e8 e4 70 ff ff       	call   c0011697 <KePanic(char const*)>
c001a5b3:	31 c0                	xor    eax,eax
c001a5b5:	83 c4 1c             	add    esp,0x1c
c001a5b8:	c3                   	ret    
c001a5b9:	90                   	nop

c001a5ba <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a5ba:	56                   	push   esi
c001a5bb:	53                   	push   ebx
c001a5bc:	53                   	push   ebx
c001a5bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5c5:	85 db                	test   ebx,ebx
c001a5c7:	0f 84 ca 00 00 00    	je     c001a697 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5cd:	85 f6                	test   esi,esi
c001a5cf:	0f 84 c2 00 00 00    	je     c001a697 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5d5:	b8 03 00 00 00       	mov    eax,0x3
c001a5da:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5df:	0f 85 b7 00 00 00    	jne    c001a69c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5e5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5e7:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5ee:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5f4:	74 1b                	je     c001a611 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5f6:	85 c0                	test   eax,eax
c001a5f8:	74 10                	je     c001a60a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	68 fd 2f 02 c0       	push   0xc0022ffd
c001a602:	e8 90 70 ff ff       	call   c0011697 <KePanic(char const*)>
c001a607:	83 c4 10             	add    esp,0x10
c001a60a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a60c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a611:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a614:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a61b:	85 c0                	test   eax,eax
c001a61d:	74 09                	je     c001a628 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a61f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a626:	74 48                	je     c001a670 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	68 0d 30 02 c0       	push   0xc002300d
c001a630:	e8 30 03 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a635:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a638:	83 c4 10             	add    esp,0x10
c001a63b:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a642:	85 c0                	test   eax,eax
c001a644:	74 17                	je     c001a65d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a646:	83 ec 0c             	sub    esp,0xc
c001a649:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a650:	68 2d 30 02 c0       	push   0xc002302d
c001a655:	e8 0b 03 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	83 ec 0c             	sub    esp,0xc
c001a660:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a667:	50                   	push   eax
c001a668:	e8 d9 c3 fe ff       	call   c0006a46 <init_percd>
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	83 c3 03             	add    ebx,0x3
c001a673:	51                   	push   ecx
c001a674:	51                   	push   ecx
c001a675:	6a 00                	push   0x0
c001a677:	53                   	push   ebx
c001a678:	e8 90 be fe ff       	call   c000650d <iso_open>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	89 c2                	mov    edx,eax
c001a682:	b8 01 00 00 00       	mov    eax,0x1
c001a687:	83 fa ff             	cmp    edx,0xffffffff
c001a68a:	74 10                	je     c001a69c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a68c:	83 c2 32             	add    edx,0x32
c001a68f:	31 c0                	xor    eax,eax
c001a691:	01 d2                	add    edx,edx
c001a693:	89 16                	mov    DWORD PTR [esi],edx
c001a695:	eb 05                	jmp    c001a69c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a697:	b8 04 00 00 00       	mov    eax,0x4
c001a69c:	5a                   	pop    edx
c001a69d:	5b                   	pop    ebx
c001a69e:	5e                   	pop    esi
c001a69f:	c3                   	ret    

c001a6a0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a6a0:	53                   	push   ebx
c001a6a1:	83 ec 08             	sub    esp,0x8
c001a6a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6ac:	85 c0                	test   eax,eax
c001a6ae:	74 2d                	je     c001a6dd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6b0:	85 db                	test   ebx,ebx
c001a6b2:	74 29                	je     c001a6dd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6b4:	b9 02 00 00 00       	mov    ecx,0x2
c001a6b9:	52                   	push   edx
c001a6ba:	99                   	cdq    
c001a6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6bf:	f7 f9                	idiv   ecx
c001a6c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6c5:	83 e8 32             	sub    eax,0x32
c001a6c8:	50                   	push   eax
c001a6c9:	e8 e7 be fe ff       	call   c00065b5 <iso_read>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	89 03                	mov    DWORD PTR [ebx],eax
c001a6d3:	09 d0                	or     eax,edx
c001a6d5:	0f 94 c0             	sete   al
c001a6d8:	0f b6 c0             	movzx  eax,al
c001a6db:	eb 05                	jmp    c001a6e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6dd:	b8 04 00 00 00       	mov    eax,0x4
c001a6e2:	83 c4 08             	add    esp,0x8
c001a6e5:	5b                   	pop    ebx
c001a6e6:	c3                   	ret    
c001a6e7:	90                   	nop

c001a6e8 <ISO9660::seek(void*, unsigned long long)>:
c001a6e8:	57                   	push   edi
c001a6e9:	56                   	push   esi
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	51                   	push   ecx
c001a6f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6fc:	85 d2                	test   edx,edx
c001a6fe:	74 26                	je     c001a726 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a700:	6a 00                	push   0x0
c001a702:	b9 02 00 00 00       	mov    ecx,0x2
c001a707:	57                   	push   edi
c001a708:	89 d0                	mov    eax,edx
c001a70a:	56                   	push   esi
c001a70b:	99                   	cdq    
c001a70c:	f7 f9                	idiv   ecx
c001a70e:	83 e8 32             	sub    eax,0x32
c001a711:	50                   	push   eax
c001a712:	e8 b4 bf fe ff       	call   c00066cb <iso_seek>
c001a717:	83 c4 10             	add    esp,0x10
c001a71a:	31 f0                	xor    eax,esi
c001a71c:	31 fa                	xor    edx,edi
c001a71e:	09 d0                	or     eax,edx
c001a720:	0f 95 c0             	setne  al
c001a723:	0f b6 c0             	movzx  eax,al
c001a726:	5a                   	pop    edx
c001a727:	5e                   	pop    esi
c001a728:	5f                   	pop    edi
c001a729:	c3                   	ret    

c001a72a <ISO9660::tell(void*, unsigned long long*)>:
c001a72a:	53                   	push   ebx
c001a72b:	83 ec 08             	sub    esp,0x8
c001a72e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a732:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a736:	85 c0                	test   eax,eax
c001a738:	74 24                	je     c001a75e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a73a:	85 db                	test   ebx,ebx
c001a73c:	74 20                	je     c001a75e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	b9 02 00 00 00       	mov    ecx,0x2
c001a746:	99                   	cdq    
c001a747:	f7 f9                	idiv   ecx
c001a749:	83 e8 32             	sub    eax,0x32
c001a74c:	50                   	push   eax
c001a74d:	e8 fd bf fe ff       	call   c000674f <iso_tell>
c001a752:	83 c4 10             	add    esp,0x10
c001a755:	89 03                	mov    DWORD PTR [ebx],eax
c001a757:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a75a:	31 c0                	xor    eax,eax
c001a75c:	eb 05                	jmp    c001a763 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a75e:	b8 04 00 00 00       	mov    eax,0x4
c001a763:	83 c4 08             	add    esp,0x8
c001a766:	5b                   	pop    ebx
c001a767:	c3                   	ret    

c001a768 <ISO9660::stat(void*, unsigned long long*)>:
c001a768:	53                   	push   ebx
c001a769:	83 ec 14             	sub    esp,0x14
c001a76c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a770:	68 51 30 02 c0       	push   0xc0023051
c001a775:	e8 eb 01 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a77a:	83 c4 10             	add    esp,0x10
c001a77d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a782:	74 2c                	je     c001a7b0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a784:	85 db                	test   ebx,ebx
c001a786:	74 28                	je     c001a7b0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	b9 02 00 00 00       	mov    ecx,0x2
c001a790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a794:	99                   	cdq    
c001a795:	f7 f9                	idiv   ecx
c001a797:	83 e8 32             	sub    eax,0x32
c001a79a:	50                   	push   eax
c001a79b:	e8 e0 bf fe ff       	call   c0006780 <iso_total>
c001a7a0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7a7:	89 03                	mov    DWORD PTR [ebx],eax
c001a7a9:	83 c4 10             	add    esp,0x10
c001a7ac:	31 c0                	xor    eax,eax
c001a7ae:	eb 05                	jmp    c001a7b5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a7b0:	b8 04 00 00 00       	mov    eax,0x4
c001a7b5:	83 c4 08             	add    esp,0x8
c001a7b8:	5b                   	pop    ebx
c001a7b9:	c3                   	ret    

c001a7ba <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7ba:	55                   	push   ebp
c001a7bb:	57                   	push   edi
c001a7bc:	56                   	push   esi
c001a7bd:	53                   	push   ebx
c001a7be:	83 ec 18             	sub    esp,0x18
c001a7c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7cd:	68 59 30 02 c0       	push   0xc0023059
c001a7d2:	e8 8e 01 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	85 ff                	test   edi,edi
c001a7dc:	0f 94 c0             	sete   al
c001a7df:	85 f6                	test   esi,esi
c001a7e1:	0f 94 c2             	sete   dl
c001a7e4:	09 d0                	or     eax,edx
c001a7e6:	a8 01                	test   al,0x1
c001a7e8:	0f 85 dd 00 00 00    	jne    c001a8cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7ee:	85 db                	test   ebx,ebx
c001a7f0:	0f 84 d5 00 00 00    	je     c001a8cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7f9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7ff:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a806:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a80d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a80f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a815:	74 1b                	je     c001a832 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a817:	85 c0                	test   eax,eax
c001a819:	74 10                	je     c001a82b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	68 fd 2f 02 c0       	push   0xc0022ffd
c001a823:	e8 6f 6e ff ff       	call   c0011697 <KePanic(char const*)>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a82d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a832:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a835:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a83c:	85 c0                	test   eax,eax
c001a83e:	74 09                	je     c001a849 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a840:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a847:	74 51                	je     c001a89a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a849:	83 ec 0c             	sub    esp,0xc
c001a84c:	68 61 30 02 c0       	push   0xc0023061
c001a851:	e8 0f 01 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a856:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a864:	74 21                	je     c001a887 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a866:	83 ec 0c             	sub    esp,0xc
c001a869:	68 81 30 02 c0       	push   0xc0023081
c001a86e:	e8 f2 00 ff ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001a873:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a880:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a887:	83 ec 0c             	sub    esp,0xc
c001a88a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a891:	50                   	push   eax
c001a892:	e8 af c1 fe ff       	call   c0006a46 <init_percd>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	83 c3 03             	add    ebx,0x3
c001a89d:	52                   	push   edx
c001a89e:	52                   	push   edx
c001a89f:	6a 00                	push   0x0
c001a8a1:	53                   	push   ebx
c001a8a2:	e8 66 bc fe ff       	call   c000650d <iso_open>
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	89 c5                	mov    ebp,eax
c001a8ac:	83 f8 ff             	cmp    eax,0xffffffff
c001a8af:	75 21                	jne    c001a8d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a8b1:	50                   	push   eax
c001a8b2:	50                   	push   eax
c001a8b3:	6a 01                	push   0x1
c001a8b5:	53                   	push   ebx
c001a8b6:	e8 52 bc fe ff       	call   c000650d <iso_open>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	ba 02 00 00 00       	mov    edx,0x2
c001a8c3:	40                   	inc    eax
c001a8c4:	74 2b                	je     c001a8f1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8c6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8c9:	eb 24                	jmp    c001a8ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8cb:	ba 04 00 00 00       	mov    edx,0x4
c001a8d0:	eb 1f                	jmp    c001a8f1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8d2:	83 ec 0c             	sub    esp,0xc
c001a8d5:	50                   	push   eax
c001a8d6:	e8 a5 be fe ff       	call   c0006780 <iso_total>
c001a8db:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8e2:	89 07                	mov    DWORD PTR [edi],eax
c001a8e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8e7:	e8 ab bc fe ff       	call   c0006597 <iso_close>
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	31 d2                	xor    edx,edx
c001a8f1:	83 c4 0c             	add    esp,0xc
c001a8f4:	89 d0                	mov    eax,edx
c001a8f6:	5b                   	pop    ebx
c001a8f7:	5e                   	pop    esi
c001a8f8:	5f                   	pop    edi
c001a8f9:	5d                   	pop    ebp
c001a8fa:	c3                   	ret    
c001a8fb:	90                   	nop

c001a8fc <ISO9660::close(void*)>:
c001a8fc:	83 ec 0c             	sub    esp,0xc
c001a8ff:	b8 04 00 00 00       	mov    eax,0x4
c001a904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a908:	85 d2                	test   edx,edx
c001a90a:	74 1b                	je     c001a927 <ISO9660::close(void*)+0x2b>
c001a90c:	83 ec 0c             	sub    esp,0xc
c001a90f:	b9 02 00 00 00       	mov    ecx,0x2
c001a914:	89 d0                	mov    eax,edx
c001a916:	99                   	cdq    
c001a917:	f7 f9                	idiv   ecx
c001a919:	83 e8 32             	sub    eax,0x32
c001a91c:	50                   	push   eax
c001a91d:	e8 75 bc fe ff       	call   c0006597 <iso_close>
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	31 c0                	xor    eax,eax
c001a927:	83 c4 0c             	add    esp,0xc
c001a92a:	c3                   	ret    
c001a92b:	90                   	nop

c001a92c <ISO9660::openDir(char const*, void**)>:
c001a92c:	56                   	push   esi
c001a92d:	53                   	push   ebx
c001a92e:	50                   	push   eax
c001a92f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a933:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a937:	85 db                	test   ebx,ebx
c001a939:	0f 84 bd 00 00 00    	je     c001a9fc <ISO9660::openDir(char const*, void**)+0xd0>
c001a93f:	85 f6                	test   esi,esi
c001a941:	0f 84 b5 00 00 00    	je     c001a9fc <ISO9660::openDir(char const*, void**)+0xd0>
c001a947:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a949:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a950:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a956:	74 1b                	je     c001a973 <ISO9660::openDir(char const*, void**)+0x47>
c001a958:	85 c0                	test   eax,eax
c001a95a:	74 10                	je     c001a96c <ISO9660::openDir(char const*, void**)+0x40>
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	68 fd 2f 02 c0       	push   0xc0022ffd
c001a964:	e8 2e 6d ff ff       	call   c0011697 <KePanic(char const*)>
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a96e:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a973:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a976:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a97d:	85 c0                	test   eax,eax
c001a97f:	74 10                	je     c001a991 <ISO9660::openDir(char const*, void**)+0x65>
c001a981:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a988:	74 1a                	je     c001a9a4 <ISO9660::openDir(char const*, void**)+0x78>
c001a98a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a991:	83 ec 0c             	sub    esp,0xc
c001a994:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a99b:	50                   	push   eax
c001a99c:	e8 a5 c0 fe ff       	call   c0006a46 <init_percd>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	83 c3 03             	add    ebx,0x3
c001a9a7:	50                   	push   eax
c001a9a8:	50                   	push   eax
c001a9a9:	6a 01                	push   0x1
c001a9ab:	53                   	push   ebx
c001a9ac:	e8 5c bb fe ff       	call   c000650d <iso_open>
c001a9b1:	83 c4 10             	add    esp,0x10
c001a9b4:	89 c3                	mov    ebx,eax
c001a9b6:	83 f8 ff             	cmp    eax,0xffffffff
c001a9b9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9be:	75 1c                	jne    c001a9dc <ISO9660::openDir(char const*, void**)+0xb0>
c001a9c0:	53                   	push   ebx
c001a9c1:	53                   	push   ebx
c001a9c2:	68 a5 30 02 c0       	push   0xc00230a5
c001a9c7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9cd:	e8 f4 e0 fe ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	b8 01 00 00 00       	mov    eax,0x1
c001a9da:	eb 25                	jmp    c001aa01 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9dc:	01 db                	add    ebx,ebx
c001a9de:	51                   	push   ecx
c001a9df:	83 c3 65             	add    ebx,0x65
c001a9e2:	51                   	push   ecx
c001a9e3:	68 b8 30 02 c0       	push   0xc00230b8
c001a9e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9ee:	e8 d3 e0 fe ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001a9f3:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	31 c0                	xor    eax,eax
c001a9fa:	eb 05                	jmp    c001aa01 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9fc:	b8 04 00 00 00       	mov    eax,0x4
c001aa01:	5a                   	pop    edx
c001aa02:	5b                   	pop    ebx
c001aa03:	5e                   	pop    esi
c001aa04:	c3                   	ret    
c001aa05:	90                   	nop

c001aa06 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa06:	55                   	push   ebp
c001aa07:	57                   	push   edi
c001aa08:	56                   	push   esi
c001aa09:	53                   	push   ebx
c001aa0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa10:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa17:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa1e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aa26:	0f 84 e7 00 00 00    	je     c001ab13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa2c:	85 db                	test   ebx,ebx
c001aa2e:	0f 84 df 00 00 00    	je     c001ab13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa34:	83 ec 0c             	sub    esp,0xc
c001aa37:	68 cb 30 02 c0       	push   0xc00230cb
c001aa3c:	e8 24 ff fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001aa41:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa48:	b9 02 00 00 00       	mov    ecx,0x2
c001aa4d:	99                   	cdq    
c001aa4e:	f7 f9                	idiv   ecx
c001aa50:	83 e8 32             	sub    eax,0x32
c001aa53:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa56:	e8 77 bd fe ff       	call   c00067d2 <iso_readdir>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	89 c6                	mov    esi,eax
c001aa60:	85 c0                	test   eax,eax
c001aa62:	75 37                	jne    c001aa9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa64:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa69:	56                   	push   esi
c001aa6a:	56                   	push   esi
c001aa6b:	68 d6 30 02 c0       	push   0xc00230d6
c001aa70:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa76:	e8 4b e0 fe ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001aa7b:	83 c4 0c             	add    esp,0xc
c001aa7e:	68 10 01 00 00       	push   0x110
c001aa83:	6a 00                	push   0x0
c001aa85:	57                   	push   edi
c001aa86:	e8 65 5a fe ff       	call   c00004f0 <memset>
c001aa8b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	b8 01 00 00 00       	mov    eax,0x1
c001aa99:	eb 7d                	jmp    c001ab18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa9b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aaa1:	8d 68 08             	lea    ebp,[eax+0x8]
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	55                   	push   ebp
c001aaa8:	e8 c3 5a fe ff       	call   c0000570 <strlen>
c001aaad:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aab5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aab9:	83 c4 10             	add    esp,0x10
c001aabc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aac0:	75 0a                	jne    c001aacc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aac2:	b8 02 00 00 00       	mov    eax,0x2
c001aac7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aaca:	74 05                	je     c001aad1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aacc:	b8 01 00 00 00       	mov    eax,0x1
c001aad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aad5:	50                   	push   eax
c001aad6:	50                   	push   eax
c001aad7:	55                   	push   ebp
c001aad8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aadc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aae0:	50                   	push   eax
c001aae1:	e8 5a 5b fe ff       	call   c0000640 <strcpy>
c001aae6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aaed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaef:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aaf5:	5a                   	pop    edx
c001aaf6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aafb:	59                   	pop    ecx
c001aafc:	68 e9 30 02 c0       	push   0xc00230e9
c001ab01:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab07:	e8 ba df fe ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	31 c0                	xor    eax,eax
c001ab11:	eb 05                	jmp    c001ab18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab13:	b8 04 00 00 00       	mov    eax,0x4
c001ab18:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab1e:	5b                   	pop    ebx
c001ab1f:	5e                   	pop    esi
c001ab20:	5f                   	pop    edi
c001ab21:	5d                   	pop    ebp
c001ab22:	c3                   	ret    

c001ab23 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab23:	57                   	push   edi
c001ab24:	56                   	push   esi
c001ab25:	53                   	push   ebx
c001ab26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab32:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab38:	0f be cb             	movsx  ecx,bl
c001ab3b:	75 0b                	jne    c001ab48 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab3d:	0f be 05 20 43 02 c0 	movsx  eax,BYTE PTR ds:0xc0024320
c001ab44:	39 c8                	cmp    eax,ecx
c001ab46:	74 47                	je     c001ab8f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	31 d2                	xor    edx,edx
c001ab4d:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab52:	6a 01                	push   0x1
c001ab54:	52                   	push   edx
c001ab55:	56                   	push   esi
c001ab56:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab5d:	e8 66 32 ff ff       	call   c000ddc8 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab62:	83 c4 20             	add    esp,0x20
c001ab65:	85 c0                	test   eax,eax
c001ab67:	75 0e                	jne    c001ab77 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab69:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab6f:	88 1d 20 43 02 c0    	mov    BYTE PTR ds:0xc0024320,bl
c001ab75:	eb 18                	jmp    c001ab8f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab77:	50                   	push   eax
c001ab78:	68 00 08 00 00       	push   0x800
c001ab7d:	6a 00                	push   0x0
c001ab7f:	57                   	push   edi
c001ab80:	e8 6b 59 fe ff       	call   c00004f0 <memset>
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	b8 01 00 00 00       	mov    eax,0x1
c001ab8d:	eb 0e                	jmp    c001ab9d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab8f:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab94:	b9 00 08 00 00       	mov    ecx,0x800
c001ab99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab9b:	31 c0                	xor    eax,eax
c001ab9d:	5b                   	pop    ebx
c001ab9e:	5e                   	pop    esi
c001ab9f:	5f                   	pop    edi
c001aba0:	c3                   	ret    
c001aba1:	90                   	nop

c001aba2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aba2:	53                   	push   ebx
c001aba3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aba9:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001abb3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001abba:	8d 58 41             	lea    ebx,[eax+0x41]
c001abbd:	0f be db             	movsx  ebx,bl
c001abc0:	53                   	push   ebx
c001abc1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abc5:	50                   	push   eax
c001abc6:	6a 10                	push   0x10
c001abc8:	e8 56 ff ff ff       	call   c001ab23 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abcd:	83 c4 10             	add    esp,0x10
c001abd0:	31 d2                	xor    edx,edx
c001abd2:	85 c0                	test   eax,eax
c001abd4:	75 33                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abd6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abdb:	75 2c                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abdd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abe2:	75 25                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abe4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abe9:	75 1e                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abeb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abf0:	75 17                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abf2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abf7:	75 10                	jne    c001ac09 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abf9:	83 ec 0c             	sub    esp,0xc
c001abfc:	53                   	push   ebx
c001abfd:	e8 44 be fe ff       	call   c0006a46 <init_percd>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	40                   	inc    eax
c001ac06:	0f 95 c2             	setne  dl
c001ac09:	88 d0                	mov    al,dl
c001ac0b:	81 c4 08 08 00 00    	add    esp,0x808
c001ac11:	5b                   	pop    ebx
c001ac12:	c3                   	ret    
c001ac13:	90                   	nop

c001ac14 <ISO9660::ISO9660()>:
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	50                   	push   eax
c001ac1f:	e8 a6 0b ff ff       	call   c000b7ca <Filesystem::Filesystem()>
c001ac24:	83 c4 10             	add    esp,0x10
c001ac27:	ba 04 31 02 c0       	mov    edx,0xc0023104
c001ac2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac30:	89 10                	mov    DWORD PTR [eax],edx
c001ac32:	e8 21 bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac37:	90                   	nop
c001ac38:	83 c4 0c             	add    esp,0xc
c001ac3b:	c3                   	ret    

c001ac3c <SoundCard::beginPlayback()>:
c001ac3c:	c7 44 24 04 68 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023168
c001ac44:	e9 4e 6a ff ff       	jmp    c0011697 <KePanic(char const*)>
c001ac49:	90                   	nop

c001ac4a <SoundCard::stopPlayback()>:
c001ac4a:	c7 44 24 04 68 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023168
c001ac52:	e9 40 6a ff ff       	jmp    c0011697 <KePanic(char const*)>
c001ac57:	90                   	nop

c001ac58 <SoundCard::SoundCard(char const*)>:
c001ac58:	83 ec 1c             	sub    esp,0x1c
c001ac5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac5f:	83 ec 08             	sub    esp,0x8
c001ac62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac66:	50                   	push   eax
c001ac67:	e8 12 1f ff ff       	call   c000cb7e <Device::Device(char const*)>
c001ac6c:	83 c4 10             	add    esp,0x10
c001ac6f:	ba b4 31 02 c0       	mov    edx,0xc00231b4
c001ac74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac78:	89 10                	mov    DWORD PTR [eax],edx
c001ac7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac7e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac89:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac97:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001aca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001acaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001acbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acc5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acca:	7f 1a                	jg     c001ace6 <SoundCard::SoundCard(char const*)+0x8e>
c001accc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acd4:	83 c2 54             	add    edx,0x54
c001acd7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001acdf:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ace4:	eb df                	jmp    c001acc5 <SoundCard::SoundCard(char const*)+0x6d>
c001ace6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acea:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acf1:	90                   	nop
c001acf2:	83 c4 1c             	add    esp,0x1c
c001acf5:	c3                   	ret    

c001acf6 <SoundCard::~SoundCard()>:
c001acf6:	83 ec 0c             	sub    esp,0xc
c001acf9:	ba b4 31 02 c0       	mov    edx,0xc00231b4
c001acfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad02:	89 10                	mov    DWORD PTR [eax],edx
c001ad04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad08:	83 ec 0c             	sub    esp,0xc
c001ad0b:	50                   	push   eax
c001ad0c:	e8 d7 1b ff ff       	call   c000c8e8 <Device::~Device()>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	90                   	nop
c001ad15:	83 c4 0c             	add    esp,0xc
c001ad18:	c3                   	ret    
c001ad19:	90                   	nop

c001ad1a <SoundCard::~SoundCard()>:
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	83 ec 0c             	sub    esp,0xc
c001ad20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad24:	e8 cd ff ff ff       	call   c001acf6 <SoundCard::~SoundCard()>
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	83 ec 08             	sub    esp,0x8
c001ad2f:	68 e8 01 00 00       	push   0x1e8
c001ad34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad38:	e8 fb fa fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c001ad3d:	83 c4 10             	add    esp,0x10
c001ad40:	83 c4 0c             	add    esp,0xc
c001ad43:	c3                   	ret    

c001ad44 <SoundCard::configureRates(int, int, int)>:
c001ad44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad48:	31 c0                	xor    eax,eax
c001ad4a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad51:	75 20                	jne    c001ad73 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad57:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad61:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad71:	b0 01                	mov    al,0x1
c001ad73:	c3                   	ret    

c001ad74 <SoundCard::getSamples16(int, short*)>:
c001ad74:	55                   	push   ebp
c001ad75:	57                   	push   edi
c001ad76:	31 ff                	xor    edi,edi
c001ad78:	56                   	push   esi
c001ad79:	53                   	push   ebx
c001ad7a:	31 db                	xor    ebx,ebx
c001ad7c:	83 ec 10             	sub    esp,0x10
c001ad7f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad83:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad87:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad8a:	50                   	push   eax
c001ad8b:	6a 00                	push   0x0
c001ad8d:	55                   	push   ebp
c001ad8e:	e8 5d 57 fe ff       	call   c00004f0 <memset>
c001ad93:	83 c4 10             	add    esp,0x10
c001ad96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad9a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ada1:	85 c0                	test   eax,eax
c001ada3:	74 1b                	je     c001adc0 <SoundCard::getSamples16(int, short*)+0x4c>
c001ada5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ada9:	75 15                	jne    c001adc0 <SoundCard::getSamples16(int, short*)+0x4c>
c001adab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001adaf:	55                   	push   ebp
c001adb0:	56                   	push   esi
c001adb1:	50                   	push   eax
c001adb2:	e8 f1 02 00 00       	call   c001b0a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	39 c7                	cmp    edi,eax
c001adbc:	7d 02                	jge    c001adc0 <SoundCard::getSamples16(int, short*)+0x4c>
c001adbe:	89 c7                	mov    edi,eax
c001adc0:	43                   	inc    ebx
c001adc1:	83 fb 20             	cmp    ebx,0x20
c001adc4:	75 d0                	jne    c001ad96 <SoundCard::getSamples16(int, short*)+0x22>
c001adc6:	83 c4 0c             	add    esp,0xc
c001adc9:	89 f8                	mov    eax,edi
c001adcb:	5b                   	pop    ebx
c001adcc:	5e                   	pop    esi
c001adcd:	5f                   	pop    edi
c001adce:	5d                   	pop    ebp
c001adcf:	c3                   	ret    

c001add0 <SoundCard::getSamples32(int, int*)>:
c001add0:	55                   	push   ebp
c001add1:	57                   	push   edi
c001add2:	31 ff                	xor    edi,edi
c001add4:	56                   	push   esi
c001add5:	31 f6                	xor    esi,esi
c001add7:	53                   	push   ebx
c001add8:	83 ec 10             	sub    esp,0x10
c001addb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001addf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ade3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ade7:	c1 e0 02             	shl    eax,0x2
c001adea:	50                   	push   eax
c001adeb:	6a 00                	push   0x0
c001aded:	55                   	push   ebp
c001adee:	e8 fd 56 fe ff       	call   c00004f0 <memset>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001adfd:	85 c0                	test   eax,eax
c001adff:	74 1b                	je     c001ae1c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae01:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae05:	75 15                	jne    c001ae1c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae07:	53                   	push   ebx
c001ae08:	55                   	push   ebp
c001ae09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae0d:	50                   	push   eax
c001ae0e:	e8 61 03 00 00       	call   c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	39 c6                	cmp    esi,eax
c001ae18:	7d 02                	jge    c001ae1c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae1a:	89 c6                	mov    esi,eax
c001ae1c:	47                   	inc    edi
c001ae1d:	83 ff 20             	cmp    edi,0x20
c001ae20:	75 d4                	jne    c001adf6 <SoundCard::getSamples32(int, int*)+0x26>
c001ae22:	85 f6                	test   esi,esi
c001ae24:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae2b:	75 0f                	jne    c001ae3c <SoundCard::getSamples32(int, int*)+0x6c>
c001ae2d:	85 c0                	test   eax,eax
c001ae2f:	74 1b                	je     c001ae4c <SoundCard::getSamples32(int, int*)+0x7c>
c001ae31:	83 ec 0c             	sub    esp,0xc
c001ae34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae36:	53                   	push   ebx
c001ae37:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae3a:	eb 0d                	jmp    c001ae49 <SoundCard::getSamples32(int, int*)+0x79>
c001ae3c:	85 c0                	test   eax,eax
c001ae3e:	75 0c                	jne    c001ae4c <SoundCard::getSamples32(int, int*)+0x7c>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae45:	53                   	push   ebx
c001ae46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae49:	83 c4 10             	add    esp,0x10
c001ae4c:	83 c4 0c             	add    esp,0xc
c001ae4f:	89 f0                	mov    eax,esi
c001ae51:	5b                   	pop    ebx
c001ae52:	5e                   	pop    esi
c001ae53:	5f                   	pop    edi
c001ae54:	5d                   	pop    ebp
c001ae55:	c3                   	ret    

c001ae56 <SoundCard::addChannel(SoundPort*)>:
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	31 c0                	xor    eax,eax
c001ae5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae5f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae67:	74 1b                	je     c001ae84 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae69:	40                   	inc    eax
c001ae6a:	83 f8 20             	cmp    eax,0x20
c001ae6d:	75 f0                	jne    c001ae5f <SoundCard::addChannel(SoundPort*)+0x9>
c001ae6f:	83 ec 0c             	sub    esp,0xc
c001ae72:	68 8d 31 02 c0       	push   0xc002318d
c001ae77:	e8 1b 68 ff ff       	call   c0011697 <KePanic(char const*)>
c001ae7c:	83 c4 10             	add    esp,0x10
c001ae7f:	83 c8 ff             	or     eax,0xffffffff
c001ae82:	eb 0b                	jmp    c001ae8f <SoundCard::addChannel(SoundPort*)+0x39>
c001ae84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae88:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae8f:	83 c4 0c             	add    esp,0xc
c001ae92:	c3                   	ret    
c001ae93:	90                   	nop

c001ae94 <SoundCard::removeChannel(int)>:
c001ae94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae9c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aea7:	c3                   	ret    

c001aea8 <SoundPort::SoundPort(int, int, int, int)>:
c001aea8:	83 ec 0c             	sub    esp,0xc
c001aeab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeaf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeba:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aec6:	89 10                	mov    DWORD PTR [eax],edx
c001aec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aed0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aedb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aede:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aee3:	75 13                	jne    c001aef8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeeb:	05 a0 0f 00 00       	add    eax,0xfa0
c001aef0:	01 c0                	add    eax,eax
c001aef2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aef6:	66 90                	xchg   ax,ax
c001aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af15:	c1 e0 02             	shl    eax,0x2
c001af18:	83 ec 0c             	sub    esp,0xc
c001af1b:	50                   	push   eax
c001af1c:	e8 b5 cb fe ff       	call   c0007ad6 <malloc>
c001af21:	83 c4 10             	add    esp,0x10
c001af24:	89 c2                	mov    edx,eax
c001af26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af2d:	90                   	nop
c001af2e:	83 c4 0c             	add    esp,0xc
c001af31:	c3                   	ret    
c001af32:	66 90                	xchg   ax,ax

c001af34 <SoundPort::~SoundPort()>:
c001af34:	83 ec 0c             	sub    esp,0xc
c001af37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af3e:	85 c0                	test   eax,eax
c001af40:	74 1e                	je     c001af60 <SoundPort::~SoundPort()+0x2c>
c001af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af49:	83 ec 0c             	sub    esp,0xc
c001af4c:	50                   	push   eax
c001af4d:	e8 94 cb fe ff       	call   c0007ae6 <free>
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af59:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af60:	90                   	nop
c001af61:	83 c4 0c             	add    esp,0xc
c001af64:	c3                   	ret    
c001af65:	90                   	nop
c001af66:	66 90                	xchg   ax,ax

c001af68 <SoundPort::unpause()>:
c001af68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af6c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af70:	c3                   	ret    
c001af71:	90                   	nop
c001af72:	66 90                	xchg   ax,ax

c001af74 <SoundPort::pause()>:
c001af74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af78:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af7c:	c3                   	ret    
c001af7d:	90                   	nop
c001af7e:	66 90                	xchg   ax,ax

c001af80 <SoundPort::getBufferUsed()>:
c001af80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af87:	c3                   	ret    

c001af88 <SoundPort::getBufferSize()>:
c001af88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af8c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af8f:	c3                   	ret    

c001af90 <SoundPort::buffer16(short*, int)>:
c001af90:	55                   	push   ebp
c001af91:	57                   	push   edi
c001af92:	56                   	push   esi
c001af93:	53                   	push   ebx
c001af94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af98:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af9c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af9f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001afa2:	74 68                	je     c001b00c <SoundPort::buffer16(short*, int)+0x7c>
c001afa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afa8:	85 c9                	test   ecx,ecx
c001afaa:	7e 60                	jle    c001b00c <SoundPort::buffer16(short*, int)+0x7c>
c001afac:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001afb0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afb3:	c1 e1 0f             	shl    ecx,0xf
c001afb6:	8d 70 01             	lea    esi,[eax+0x1]
c001afb9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afbc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afbf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afc2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afc5:	74 4d                	je     c001b014 <SoundPort::buffer16(short*, int)+0x84>
c001afc7:	31 f6                	xor    esi,esi
c001afc9:	eb 21                	jmp    c001afec <SoundPort::buffer16(short*, int)+0x5c>
c001afcb:	90                   	nop
c001afcc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001afd1:	8d 79 01             	lea    edi,[ecx+0x1]
c001afd4:	c1 e3 0f             	shl    ebx,0xf
c001afd7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afda:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afdd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afe0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afe3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afe6:	74 1c                	je     c001b004 <SoundPort::buffer16(short*, int)+0x74>
c001afe8:	89 c6                	mov    esi,eax
c001afea:	66 90                	xchg   ax,ax
c001afec:	8d 46 01             	lea    eax,[esi+0x1]
c001afef:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aff3:	75 d7                	jne    c001afcc <SoundPort::buffer16(short*, int)+0x3c>
c001aff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	5b                   	pop    ebx
c001affd:	5e                   	pop    esi
c001affe:	5f                   	pop    edi
c001afff:	5d                   	pop    ebp
c001b000:	c3                   	ret    
c001b001:	8d 76 00             	lea    esi,[esi+0x0]
c001b004:	5b                   	pop    ebx
c001b005:	8d 46 02             	lea    eax,[esi+0x2]
c001b008:	5e                   	pop    esi
c001b009:	5f                   	pop    edi
c001b00a:	5d                   	pop    ebp
c001b00b:	c3                   	ret    
c001b00c:	5b                   	pop    ebx
c001b00d:	31 c0                	xor    eax,eax
c001b00f:	5e                   	pop    esi
c001b010:	5f                   	pop    edi
c001b011:	5d                   	pop    ebp
c001b012:	c3                   	ret    
c001b013:	90                   	nop
c001b014:	b8 01 00 00 00       	mov    eax,0x1
c001b019:	eb e1                	jmp    c001affc <SoundPort::buffer16(short*, int)+0x6c>
c001b01b:	90                   	nop

c001b01c <SoundPort::buffer32(int*, int)>:
c001b01c:	55                   	push   ebp
c001b01d:	57                   	push   edi
c001b01e:	56                   	push   esi
c001b01f:	53                   	push   ebx
c001b020:	83 ec 04             	sub    esp,0x4
c001b023:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b02e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b032:	89 04 24             	mov    DWORD PTR [esp],eax
c001b035:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b038:	74 5a                	je     c001b094 <SoundPort::buffer32(int*, int)+0x78>
c001b03a:	85 c0                	test   eax,eax
c001b03c:	7e 56                	jle    c001b094 <SoundPort::buffer32(int*, int)+0x78>
c001b03e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b041:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b044:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b047:	8b 37                	mov    esi,DWORD PTR [edi]
c001b049:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b04c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b04f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b052:	74 4c                	je     c001b0a0 <SoundPort::buffer32(int*, int)+0x84>
c001b054:	31 f6                	xor    esi,esi
c001b056:	eb 1c                	jmp    c001b074 <SoundPort::buffer32(int*, int)+0x58>
c001b058:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b05b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b05e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b061:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b064:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b068:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b06b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b06e:	74 18                	je     c001b088 <SoundPort::buffer32(int*, int)+0x6c>
c001b070:	89 de                	mov    esi,ebx
c001b072:	66 90                	xchg   ax,ax
c001b074:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b077:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b07a:	75 dc                	jne    c001b058 <SoundPort::buffer32(int*, int)+0x3c>
c001b07c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b07f:	90                   	nop
c001b080:	83 c4 04             	add    esp,0x4
c001b083:	5b                   	pop    ebx
c001b084:	5e                   	pop    esi
c001b085:	5f                   	pop    edi
c001b086:	5d                   	pop    ebp
c001b087:	c3                   	ret    
c001b088:	83 c4 04             	add    esp,0x4
c001b08b:	8d 46 02             	lea    eax,[esi+0x2]
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	5f                   	pop    edi
c001b091:	5d                   	pop    ebp
c001b092:	c3                   	ret    
c001b093:	90                   	nop
c001b094:	83 c4 04             	add    esp,0x4
c001b097:	31 c0                	xor    eax,eax
c001b099:	5b                   	pop    ebx
c001b09a:	5e                   	pop    esi
c001b09b:	5f                   	pop    edi
c001b09c:	5d                   	pop    ebp
c001b09d:	c3                   	ret    
c001b09e:	66 90                	xchg   ax,ax
c001b0a0:	b8 01 00 00 00       	mov    eax,0x1
c001b0a5:	eb d9                	jmp    c001b080 <SoundPort::buffer32(int*, int)+0x64>
c001b0a7:	90                   	nop

c001b0a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b0a8:	57                   	push   edi
c001b0a9:	56                   	push   esi
c001b0aa:	53                   	push   ebx
c001b0ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0b3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b0b9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0bb:	74 13                	je     c001b0d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b0bd:	83 ec 0c             	sub    esp,0xc
c001b0c0:	68 e0 31 02 c0       	push   0xc00231e0
c001b0c5:	e8 cd 65 ff ff       	call   c0011697 <KePanic(char const*)>
c001b0ca:	83 c4 10             	add    esp,0x10
c001b0cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0d0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b0d6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0d9:	74 11                	je     c001b0ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	68 1f 32 02 c0       	push   0xc002321f
c001b0e3:	e8 af 65 ff ff       	call   c0011697 <KePanic(char const*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	90                   	nop
c001b0ec:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b0f2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0f5:	74 11                	je     c001b108 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	68 1f 32 02 c0       	push   0xc002321f
c001b0ff:	e8 93 65 ff ff       	call   c0011697 <KePanic(char const*)>
c001b104:	83 c4 10             	add    esp,0x10
c001b107:	90                   	nop
c001b108:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b10b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b10f:	7e 07                	jle    c001b118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b111:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b115:	8d 76 00             	lea    esi,[esi+0x0]
c001b118:	85 f6                	test   esi,esi
c001b11a:	7e 2c                	jle    c001b148 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b11c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b120:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b123:	31 c9                	xor    ecx,ecx
c001b125:	01 d7                	add    edi,edx
c001b127:	90                   	nop
c001b128:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b12b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b12e:	85 c0                	test   eax,eax
c001b130:	79 06                	jns    c001b138 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b132:	05 ff 7f 00 00       	add    eax,0x7fff
c001b137:	90                   	nop
c001b138:	c1 f8 0f             	sar    eax,0xf
c001b13b:	83 c1 04             	add    ecx,0x4
c001b13e:	66 01 02             	add    WORD PTR [edx],ax
c001b141:	83 c2 02             	add    edx,0x2
c001b144:	39 d7                	cmp    edi,edx
c001b146:	75 e0                	jne    c001b128 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b14b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b14e:	83 ec 04             	sub    esp,0x4
c001b151:	29 f0                	sub    eax,esi
c001b153:	c1 e0 02             	shl    eax,0x2
c001b156:	50                   	push   eax
c001b157:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b15a:	50                   	push   eax
c001b15b:	52                   	push   edx
c001b15c:	e8 6f 52 fe ff       	call   c00003d0 <memmove>
c001b161:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	29 f0                	sub    eax,esi
c001b169:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b16c:	89 f0                	mov    eax,esi
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	5f                   	pop    edi
c001b171:	c3                   	ret    
c001b172:	66 90                	xchg   ax,ax

c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b174:	57                   	push   edi
c001b175:	56                   	push   esi
c001b176:	53                   	push   ebx
c001b177:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b17b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b17f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b183:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b189:	39 06                	cmp    DWORD PTR [esi],eax
c001b18b:	74 13                	je     c001b1a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b18d:	83 ec 0c             	sub    esp,0xc
c001b190:	68 00 32 02 c0       	push   0xc0023200
c001b195:	e8 fd 64 ff ff       	call   c0011697 <KePanic(char const*)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b1a6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b1a9:	74 11                	je     c001b1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b1ab:	83 ec 0c             	sub    esp,0xc
c001b1ae:	68 3b 32 02 c0       	push   0xc002323b
c001b1b3:	e8 df 64 ff ff       	call   c0011697 <KePanic(char const*)>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	90                   	nop
c001b1bc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b1c2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b1c5:	74 11                	je     c001b1d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b1c7:	83 ec 0c             	sub    esp,0xc
c001b1ca:	68 3b 32 02 c0       	push   0xc002323b
c001b1cf:	e8 c3 64 ff ff       	call   c0011697 <KePanic(char const*)>
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	90                   	nop
c001b1d8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b1db:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b1df:	7e 07                	jle    c001b1e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b1e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e8:	85 ff                	test   edi,edi
c001b1ea:	7e 1c                	jle    c001b208 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b1ec:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1f3:	31 c0                	xor    eax,eax
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1fb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1fe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b201:	83 c0 04             	add    eax,0x4
c001b204:	39 c1                	cmp    ecx,eax
c001b206:	75 f0                	jne    c001b1f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b208:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b20b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b20e:	83 ec 04             	sub    esp,0x4
c001b211:	29 f8                	sub    eax,edi
c001b213:	c1 e0 02             	shl    eax,0x2
c001b216:	50                   	push   eax
c001b217:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b21a:	50                   	push   eax
c001b21b:	52                   	push   edx
c001b21c:	e8 af 51 fe ff       	call   c00003d0 <memmove>
c001b221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	29 f8                	sub    eax,edi
c001b229:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b22c:	89 f8                	mov    eax,edi
c001b22e:	5b                   	pop    ebx
c001b22f:	5e                   	pop    esi
c001b230:	5f                   	pop    edi
c001b231:	c3                   	ret    

c001b232 <PCI::open(int, int, void*)>:
c001b232:	83 ec 18             	sub    esp,0x18
c001b235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b239:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b23d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b243:	8b 10                	mov    edx,DWORD PTR [eax]
c001b245:	50                   	push   eax
c001b246:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b249:	31 c0                	xor    eax,eax
c001b24b:	83 c4 1c             	add    esp,0x1c
c001b24e:	c3                   	ret    
c001b24f:	90                   	nop

c001b250 <PCI::close(int, int, void*)>:
c001b250:	31 c0                	xor    eax,eax
c001b252:	c3                   	ret    
c001b253:	90                   	nop

c001b254 <PCI::PCI()>:
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25b:	83 ec 08             	sub    esp,0x8
c001b25e:	68 57 32 02 c0       	push   0xc0023257
c001b263:	50                   	push   eax
c001b264:	e8 df 10 ff ff       	call   c000c348 <Bus::Bus(char const*)>
c001b269:	83 c4 10             	add    esp,0x10
c001b26c:	ba 00 33 02 c0       	mov    edx,0xc0023300
c001b271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b275:	89 10                	mov    DWORD PTR [eax],edx
c001b277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b27b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b289:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b292:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b298:	0f b6 d0             	movzx  edx,al
c001b29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b29f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2b0:	0f b6 d0             	movzx  edx,al
c001b2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2c6:	8d 50 01             	lea    edx,[eax+0x1]
c001b2c9:	88 d1                	mov    cl,dl
c001b2cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2cf:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2d5:	0f b6 d0             	movzx  edx,al
c001b2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2dc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2e0:	83 c9 c0             	or     ecx,0xffffffc0
c001b2e3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2e7:	90                   	nop
c001b2e8:	83 c4 0c             	add    esp,0xc
c001b2eb:	c3                   	ret    

c001b2ec <PCI::readBAR8(unsigned int, int)>:
c001b2ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2f4:	f6 c2 01             	test   dl,0x1
c001b2f7:	74 07                	je     c001b300 <PCI::readBAR8(unsigned int, int)+0x14>
c001b2f9:	83 e2 fc             	and    edx,0xfffffffc
c001b2fc:	01 c2                	add    edx,eax
c001b2fe:	ec                   	in     al,dx
c001b2ff:	c3                   	ret    
c001b300:	83 e2 f0             	and    edx,0xfffffff0
c001b303:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b306:	c3                   	ret    
c001b307:	90                   	nop

c001b308 <PCI::readBAR16(unsigned int, int)>:
c001b308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b310:	f6 c2 01             	test   dl,0x1
c001b313:	74 08                	je     c001b31d <PCI::readBAR16(unsigned int, int)+0x15>
c001b315:	83 e2 fc             	and    edx,0xfffffffc
c001b318:	01 c2                	add    edx,eax
c001b31a:	66 ed                	in     ax,dx
c001b31c:	c3                   	ret    
c001b31d:	83 e2 f0             	and    edx,0xfffffff0
c001b320:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <PCI::readBAR32(unsigned int, int)>:
c001b326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b32e:	f6 c2 01             	test   dl,0x1
c001b331:	74 07                	je     c001b33a <PCI::readBAR32(unsigned int, int)+0x14>
c001b333:	83 e2 fc             	and    edx,0xfffffffc
c001b336:	01 c2                	add    edx,eax
c001b338:	ed                   	in     eax,dx
c001b339:	c3                   	ret    
c001b33a:	83 e2 f0             	and    edx,0xfffffff0
c001b33d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b340:	c3                   	ret    
c001b341:	90                   	nop

c001b342 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b342:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b34e:	f6 c2 01             	test   dl,0x1
c001b351:	74 07                	je     c001b35a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b353:	83 e2 fc             	and    edx,0xfffffffc
c001b356:	01 ca                	add    edx,ecx
c001b358:	ee                   	out    dx,al
c001b359:	c3                   	ret    
c001b35a:	83 e2 f0             	and    edx,0xfffffff0
c001b35d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b360:	c3                   	ret    
c001b361:	90                   	nop

c001b362 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b36a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b36e:	f6 c2 01             	test   dl,0x1
c001b371:	74 08                	je     c001b37b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b373:	83 e2 fc             	and    edx,0xfffffffc
c001b376:	01 ca                	add    edx,ecx
c001b378:	66 ef                	out    dx,ax
c001b37a:	c3                   	ret    
c001b37b:	83 e2 f0             	and    edx,0xfffffff0
c001b37e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b382:	c3                   	ret    
c001b383:	90                   	nop

c001b384 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b38c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b390:	f6 c2 01             	test   dl,0x1
c001b393:	74 07                	je     c001b39c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b395:	83 e2 fc             	and    edx,0xfffffffc
c001b398:	01 ca                	add    edx,ecx
c001b39a:	ef                   	out    dx,eax
c001b39b:	c3                   	ret    
c001b39c:	83 e2 f0             	and    edx,0xfffffff0
c001b39f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b3a2:	c3                   	ret    
c001b3a3:	90                   	nop

c001b3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3a4:	55                   	push   ebp
c001b3a5:	57                   	push   edi
c001b3a6:	56                   	push   esi
c001b3a7:	53                   	push   ebx
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b3b0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b3b4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b3b8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3bc:	83 fe 07             	cmp    esi,0x7
c001b3bf:	76 10                	jbe    c001b3d1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	68 5f 32 02 c0       	push   0xc002325f
c001b3c9:	e8 c9 62 ff ff       	call   c0011697 <KePanic(char const*)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	0f b6 db             	movzx  ebx,bl
c001b3d4:	83 fb 0f             	cmp    ebx,0xf
c001b3d7:	76 10                	jbe    c001b3e9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3d9:	83 ec 0c             	sub    esp,0xc
c001b3dc:	68 8f 32 02 c0       	push   0xc002328f
c001b3e1:	e8 b1 62 ff ff       	call   c0011697 <KePanic(char const*)>
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3f1:	83 c8 f0             	or     eax,0xfffffff0
c001b3f4:	ee                   	out    dx,al
c001b3f5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3fa:	89 e8                	mov    eax,ebp
c001b3fc:	ee                   	out    dx,al
c001b3fd:	83 c4 0c             	add    esp,0xc
c001b400:	89 d8                	mov    eax,ebx
c001b402:	89 f9                	mov    ecx,edi
c001b404:	c1 e0 08             	shl    eax,0x8
c001b407:	0f b6 d9             	movzx  ebx,cl
c001b40a:	83 e3 fc             	and    ebx,0xfffffffc
c001b40d:	09 d8                	or     eax,ebx
c001b40f:	5b                   	pop    ebx
c001b410:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b415:	5e                   	pop    esi
c001b416:	5f                   	pop    edi
c001b417:	5d                   	pop    ebp
c001b418:	c3                   	ret    
c001b419:	90                   	nop

c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b41a:	57                   	push   edi
c001b41b:	56                   	push   esi
c001b41c:	53                   	push   ebx
c001b41d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b421:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b425:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b42b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b42f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b433:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b437:	83 ff 01             	cmp    edi,0x1
c001b43a:	75 3f                	jne    c001b47b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b43c:	89 de                	mov    esi,ebx
c001b43e:	0f b6 c0             	movzx  eax,al
c001b441:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b447:	c1 e0 10             	shl    eax,0x10
c001b44a:	0f b6 c9             	movzx  ecx,cl
c001b44d:	09 f0                	or     eax,esi
c001b44f:	c1 e1 08             	shl    ecx,0x8
c001b452:	0f b6 d2             	movzx  edx,dl
c001b455:	09 c8                	or     eax,ecx
c001b457:	c1 e2 0b             	shl    edx,0xb
c001b45a:	09 d0                	or     eax,edx
c001b45c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b461:	0d 00 00 00 80       	or     eax,0x80000000
c001b466:	ef                   	out    dx,eax
c001b467:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b46c:	ed                   	in     eax,dx
c001b46d:	83 e3 02             	and    ebx,0x2
c001b470:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b477:	d3 e8                	shr    eax,cl
c001b479:	eb 44                	jmp    c001b4bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b47b:	83 ff 02             	cmp    edi,0x2
c001b47e:	75 2d                	jne    c001b4ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b480:	83 ec 0c             	sub    esp,0xc
c001b483:	0f b6 c9             	movzx  ecx,cl
c001b486:	0f b6 d2             	movzx  edx,dl
c001b489:	0f b6 fb             	movzx  edi,bl
c001b48c:	0f b6 c0             	movzx  eax,al
c001b48f:	57                   	push   edi
c001b490:	51                   	push   ecx
c001b491:	52                   	push   edx
c001b492:	50                   	push   eax
c001b493:	56                   	push   esi
c001b494:	e8 0b ff ff ff       	call   c001b3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b499:	89 c2                	mov    edx,eax
c001b49b:	ed                   	in     eax,dx
c001b49c:	83 e3 02             	and    ebx,0x2
c001b49f:	83 c4 20             	add    esp,0x20
c001b4a2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4a9:	d3 e8                	shr    eax,cl
c001b4ab:	eb 12                	jmp    c001b4bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4ad:	83 ec 0c             	sub    esp,0xc
c001b4b0:	68 bf 32 02 c0       	push   0xc00232bf
c001b4b5:	e8 dd 61 ff ff       	call   c0011697 <KePanic(char const*)>
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	31 c0                	xor    eax,eax
c001b4bf:	5b                   	pop    ebx
c001b4c0:	5e                   	pop    esi
c001b4c1:	5f                   	pop    edi
c001b4c2:	c3                   	ret    
c001b4c3:	90                   	nop

c001b4c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4c4:	83 ec 18             	sub    esp,0x18
c001b4c7:	6a 00                	push   0x0
c001b4c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ce:	50                   	push   eax
c001b4cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d4:	50                   	push   eax
c001b4d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4da:	50                   	push   eax
c001b4db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4df:	e8 36 ff ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e4:	83 c4 2c             	add    esp,0x2c
c001b4e7:	c3                   	ret    

c001b4e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4e8:	83 ec 18             	sub    esp,0x18
c001b4eb:	6a 0e                	push   0xe
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fe:	50                   	push   eax
c001b4ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b503:	e8 12 ff ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b508:	83 c4 2c             	add    esp,0x2c
c001b50b:	0f b6 c0             	movzx  eax,al
c001b50e:	c3                   	ret    
c001b50f:	90                   	nop

c001b510 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b510:	55                   	push   ebp
c001b511:	57                   	push   edi
c001b512:	56                   	push   esi
c001b513:	53                   	push   ebx
c001b514:	83 ec 18             	sub    esp,0x18
c001b517:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b51c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b521:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b526:	6a 0a                	push   0xa
c001b528:	56                   	push   esi
c001b529:	55                   	push   ebp
c001b52a:	57                   	push   edi
c001b52b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b52f:	e8 e6 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b534:	83 c4 14             	add    esp,0x14
c001b537:	89 c3                	mov    ebx,eax
c001b539:	6a 0a                	push   0xa
c001b53b:	0f b6 db             	movzx  ebx,bl
c001b53e:	56                   	push   esi
c001b53f:	55                   	push   ebp
c001b540:	57                   	push   edi
c001b541:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b545:	e8 d0 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b54a:	83 c4 2c             	add    esp,0x2c
c001b54d:	25 00 ff 00 00       	and    eax,0xff00
c001b552:	09 d8                	or     eax,ebx
c001b554:	5b                   	pop    ebx
c001b555:	5e                   	pop    esi
c001b556:	5f                   	pop    edi
c001b557:	5d                   	pop    ebp
c001b558:	c3                   	ret    
c001b559:	90                   	nop

c001b55a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b55a:	83 ec 18             	sub    esp,0x18
c001b55d:	6a 08                	push   0x8
c001b55f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b564:	50                   	push   eax
c001b565:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56a:	50                   	push   eax
c001b56b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b570:	50                   	push   eax
c001b571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b575:	e8 a0 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b57a:	83 c4 2c             	add    esp,0x2c
c001b57d:	0f b6 c4             	movzx  eax,ah
c001b580:	c3                   	ret    
c001b581:	90                   	nop

c001b582 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b582:	83 ec 18             	sub    esp,0x18
c001b585:	6a 08                	push   0x8
c001b587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b58c:	50                   	push   eax
c001b58d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b592:	50                   	push   eax
c001b593:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b598:	50                   	push   eax
c001b599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b59d:	e8 78 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a2:	83 c4 2c             	add    esp,0x2c
c001b5a5:	c3                   	ret    

c001b5a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5a6:	83 ec 18             	sub    esp,0x18
c001b5a9:	6a 3c                	push   0x3c
c001b5ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b0:	50                   	push   eax
c001b5b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b6:	50                   	push   eax
c001b5b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5bc:	50                   	push   eax
c001b5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5c1:	e8 54 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c6:	83 c4 2c             	add    esp,0x2c
c001b5c9:	c3                   	ret    

c001b5ca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5ca:	83 ec 18             	sub    esp,0x18
c001b5cd:	6a 18                	push   0x18
c001b5cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5d4:	50                   	push   eax
c001b5d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5da:	50                   	push   eax
c001b5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e0:	50                   	push   eax
c001b5e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5e5:	e8 30 fe ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ea:	83 c4 2c             	add    esp,0x2c
c001b5ed:	0f b6 c4             	movzx  eax,ah
c001b5f0:	c3                   	ret    
c001b5f1:	90                   	nop

c001b5f2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5f2:	55                   	push   ebp
c001b5f3:	57                   	push   edi
c001b5f4:	56                   	push   esi
c001b5f5:	53                   	push   ebx
c001b5f6:	83 ec 28             	sub    esp,0x28
c001b5f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5fd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b602:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b607:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b60c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b613:	8d 43 12             	lea    eax,[ebx+0x12]
c001b616:	83 c3 10             	add    ebx,0x10
c001b619:	0f b6 c0             	movzx  eax,al
c001b61c:	0f b6 db             	movzx  ebx,bl
c001b61f:	50                   	push   eax
c001b620:	51                   	push   ecx
c001b621:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b625:	57                   	push   edi
c001b626:	55                   	push   ebp
c001b627:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b62b:	e8 ea fd ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b630:	83 c4 14             	add    esp,0x14
c001b633:	89 c6                	mov    esi,eax
c001b635:	53                   	push   ebx
c001b636:	c1 e6 10             	shl    esi,0x10
c001b639:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b63d:	51                   	push   ecx
c001b63e:	57                   	push   edi
c001b63f:	55                   	push   ebp
c001b640:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b644:	e8 d1 fd ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b649:	83 c4 3c             	add    esp,0x3c
c001b64c:	0f b7 c0             	movzx  eax,ax
c001b64f:	5b                   	pop    ebx
c001b650:	09 f0                	or     eax,esi
c001b652:	5e                   	pop    esi
c001b653:	5f                   	pop    edi
c001b654:	5d                   	pop    ebp
c001b655:	c3                   	ret    

c001b656 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b656:	55                   	push   ebp
c001b657:	57                   	push   edi
c001b658:	56                   	push   esi
c001b659:	53                   	push   ebx
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b661:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b665:	89 f5                	mov    ebp,esi
c001b667:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b66d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b675:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b679:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b67d:	83 f9 01             	cmp    ecx,0x1
c001b680:	75 5d                	jne    c001b6df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b682:	0f b6 c8             	movzx  ecx,al
c001b685:	0f b6 d2             	movzx  edx,dl
c001b688:	c1 e1 10             	shl    ecx,0x10
c001b68b:	c1 e2 0b             	shl    edx,0xb
c001b68e:	89 f0                	mov    eax,esi
c001b690:	25 fc 00 00 00       	and    eax,0xfc
c001b695:	09 c1                	or     ecx,eax
c001b697:	89 e8                	mov    eax,ebp
c001b699:	0f b6 c0             	movzx  eax,al
c001b69c:	c1 e0 08             	shl    eax,0x8
c001b69f:	09 c1                	or     ecx,eax
c001b6a1:	09 d1                	or     ecx,edx
c001b6a3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6a8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6ae:	89 c8                	mov    eax,ecx
c001b6b0:	ef                   	out    dx,eax
c001b6b1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6b6:	ed                   	in     eax,dx
c001b6b7:	0f b7 db             	movzx  ebx,bx
c001b6ba:	83 e6 02             	and    esi,0x2
c001b6bd:	74 0a                	je     c001b6c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b6bf:	0f b7 d0             	movzx  edx,ax
c001b6c2:	c1 e3 10             	shl    ebx,0x10
c001b6c5:	09 d3                	or     ebx,edx
c001b6c7:	eb 05                	jmp    c001b6ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b6c9:	66 31 c0             	xor    ax,ax
c001b6cc:	09 c3                	or     ebx,eax
c001b6ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d3:	89 c8                	mov    eax,ecx
c001b6d5:	ef                   	out    dx,eax
c001b6d6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6db:	89 d8                	mov    eax,ebx
c001b6dd:	eb 41                	jmp    c001b720 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6df:	83 f9 02             	cmp    ecx,0x2
c001b6e2:	75 45                	jne    c001b729 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	0f b6 d2             	movzx  edx,dl
c001b6ea:	89 f1                	mov    ecx,esi
c001b6ec:	0f b6 c0             	movzx  eax,al
c001b6ef:	0f b6 f1             	movzx  esi,cl
c001b6f2:	89 e9                	mov    ecx,ebp
c001b6f4:	56                   	push   esi
c001b6f5:	0f b6 c9             	movzx  ecx,cl
c001b6f8:	51                   	push   ecx
c001b6f9:	52                   	push   edx
c001b6fa:	50                   	push   eax
c001b6fb:	57                   	push   edi
c001b6fc:	e8 a3 fc ff ff       	call   c001b3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b701:	89 c2                	mov    edx,eax
c001b703:	ed                   	in     eax,dx
c001b704:	83 c4 20             	add    esp,0x20
c001b707:	0f b7 db             	movzx  ebx,bx
c001b70a:	f6 c2 02             	test   dl,0x2
c001b70d:	74 0c                	je     c001b71b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b70f:	0f b7 c8             	movzx  ecx,ax
c001b712:	89 d8                	mov    eax,ebx
c001b714:	c1 e0 10             	shl    eax,0x10
c001b717:	09 c8                	or     eax,ecx
c001b719:	eb 05                	jmp    c001b720 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b71b:	66 31 c0             	xor    ax,ax
c001b71e:	09 d8                	or     eax,ebx
c001b720:	ef                   	out    dx,eax
c001b721:	83 c4 0c             	add    esp,0xc
c001b724:	5b                   	pop    ebx
c001b725:	5e                   	pop    esi
c001b726:	5f                   	pop    edi
c001b727:	5d                   	pop    ebp
c001b728:	c3                   	ret    
c001b729:	c7 44 24 20 bf 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc00232bf
c001b731:	83 c4 0c             	add    esp,0xc
c001b734:	5b                   	pop    ebx
c001b735:	5e                   	pop    esi
c001b736:	5f                   	pop    edi
c001b737:	5d                   	pop    ebp
c001b738:	e9 5a 5f ff ff       	jmp    c0011697 <KePanic(char const*)>
c001b73d:	90                   	nop

c001b73e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b73e:	55                   	push   ebp
c001b73f:	57                   	push   edi
c001b740:	56                   	push   esi
c001b741:	53                   	push   ebx
c001b742:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b748:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b74f:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b756:	0f 85 bd 00 00 00    	jne    c001b819 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b75c:	83 ec 0c             	sub    esp,0xc
c001b75f:	68 14 01 00 00       	push   0x114
c001b764:	e8 6d c3 fe ff       	call   c0007ad6 <malloc>
c001b769:	83 c4 0c             	add    esp,0xc
c001b76c:	89 c3                	mov    ebx,eax
c001b76e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b774:	68 c5 32 02 c0       	push   0xc00232c5
c001b779:	50                   	push   eax
c001b77a:	e8 ed 03 ff ff       	call   c000bb6c <File::File(char const*, Process*)>
c001b77f:	83 c4 10             	add    esp,0x10
c001b782:	85 db                	test   ebx,ebx
c001b784:	0f 84 67 02 00 00    	je     c001b9f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b78a:	56                   	push   esi
c001b78b:	56                   	push   esi
c001b78c:	6a 01                	push   0x1
c001b78e:	53                   	push   ebx
c001b78f:	e8 f6 03 ff ff       	call   c000bb8a <File::open(FileOpenMode)>
c001b794:	83 c4 10             	add    esp,0x10
c001b797:	85 c0                	test   eax,eax
c001b799:	0f 85 52 02 00 00    	jne    c001b9f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b79f:	52                   	push   edx
c001b7a0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b7a4:	50                   	push   eax
c001b7a5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b7a9:	50                   	push   eax
c001b7aa:	53                   	push   ebx
c001b7ab:	e8 dc 06 ff ff       	call   c000be8c <File::stat(unsigned long long*, bool*)>
c001b7b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7b4:	40                   	inc    eax
c001b7b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7b8:	e8 19 c3 fe ff       	call   c0007ad6 <malloc>
c001b7bd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7c1:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7c6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7ca:	59                   	pop    ecx
c001b7cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7cd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7d1:	51                   	push   ecx
c001b7d2:	50                   	push   eax
c001b7d3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7db:	53                   	push   ebx
c001b7dc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7df:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7e3:	83 c4 20             	add    esp,0x20
c001b7e6:	89 c8                	mov    eax,ecx
c001b7e8:	99                   	cdq    
c001b7e9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7ed:	0f 85 fe 01 00 00    	jne    c001b9f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7f3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7f7:	0f 85 f4 01 00 00    	jne    c001b9f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7fd:	83 ec 0c             	sub    esp,0xc
c001b800:	53                   	push   ebx
c001b801:	e8 e2 03 ff ff       	call   c000bbe8 <File::close()>
c001b806:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b80a:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b811:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b81e:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b824:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b828:	31 f6                	xor    esi,esi
c001b82a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b832:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b839:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b83e:	31 c9                	xor    ecx,ecx
c001b840:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b848:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b84d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b855:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b859:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b861:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b865:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b869:	0f 8e 82 01 00 00    	jle    c001b9f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b86f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b872:	d4 40                	aam    0x40
c001b874:	d5 39                	aad    0x39
c001b876:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b87a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b87e:	d4 40                	aam    0x40
c001b880:	d5 39                	aad    0x39
c001b882:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b886:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b88a:	d4 40                	aam    0x40
c001b88c:	d5 39                	aad    0x39
c001b88e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b892:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b896:	d4 40                	aam    0x40
c001b898:	d5 39                	aad    0x39
c001b89a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b89e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b8a2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b8a6:	3c 56                	cmp    al,0x56
c001b8a8:	74 43                	je     c001b8ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b8aa:	d4 40                	aam    0x40
c001b8ac:	d5 39                	aad    0x39
c001b8ae:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b8b1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b8b5:	0f b6 c9             	movzx  ecx,cl
c001b8b8:	c1 e1 04             	shl    ecx,0x4
c001b8bb:	d4 40                	aam    0x40
c001b8bd:	d5 39                	aad    0x39
c001b8bf:	83 e8 30             	sub    eax,0x30
c001b8c2:	0f b6 c0             	movzx  eax,al
c001b8c5:	09 c1                	or     ecx,eax
c001b8c7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b8cb:	c1 e1 04             	shl    ecx,0x4
c001b8ce:	d4 40                	aam    0x40
c001b8d0:	d5 39                	aad    0x39
c001b8d2:	83 e8 30             	sub    eax,0x30
c001b8d5:	0f b6 c0             	movzx  eax,al
c001b8d8:	09 c1                	or     ecx,eax
c001b8da:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b8de:	c1 e1 04             	shl    ecx,0x4
c001b8e1:	d4 40                	aam    0x40
c001b8e3:	d5 39                	aad    0x39
c001b8e5:	83 e8 30             	sub    eax,0x30
c001b8e8:	0f b6 c0             	movzx  eax,al
c001b8eb:	09 c1                	or     ecx,eax
c001b8ed:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b8f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b8f5:	3c 58                	cmp    al,0x58
c001b8f7:	74 47                	je     c001b940 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b8f9:	d4 40                	aam    0x40
c001b8fb:	d5 39                	aad    0x39
c001b8fd:	8d 50 d0             	lea    edx,[eax-0x30]
c001b900:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b904:	0f b6 d2             	movzx  edx,dl
c001b907:	c1 e2 04             	shl    edx,0x4
c001b90a:	d4 40                	aam    0x40
c001b90c:	d5 39                	aad    0x39
c001b90e:	83 e8 30             	sub    eax,0x30
c001b911:	0f b6 c0             	movzx  eax,al
c001b914:	09 c2                	or     edx,eax
c001b916:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b91a:	c1 e2 04             	shl    edx,0x4
c001b91d:	d4 40                	aam    0x40
c001b91f:	d5 39                	aad    0x39
c001b921:	83 e8 30             	sub    eax,0x30
c001b924:	0f b6 c0             	movzx  eax,al
c001b927:	09 c2                	or     edx,eax
c001b929:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b92d:	c1 e2 04             	shl    edx,0x4
c001b930:	d4 40                	aam    0x40
c001b932:	d5 39                	aad    0x39
c001b934:	83 e8 30             	sub    eax,0x30
c001b937:	0f b6 c0             	movzx  eax,al
c001b93a:	09 c2                	or     edx,eax
c001b93c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b940:	83 c6 10             	add    esi,0x10
c001b943:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b947:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b94b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b94f:	83 fa 0a             	cmp    edx,0xa
c001b952:	74 0b                	je     c001b95f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b954:	47                   	inc    edi
c001b955:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b959:	75 19                	jne    c001b974 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b95b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b95f:	31 c0                	xor    eax,eax
c001b961:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b966:	0f 94 c0             	sete   al
c001b969:	01 c6                	add    esi,eax
c001b96b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b970:	75 0b                	jne    c001b97d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b972:	eb 14                	jmp    c001b988 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b974:	46                   	inc    esi
c001b975:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b978:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b97b:	eb ca                	jmp    c001b947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b97d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b982:	0f 85 dd fe ff ff    	jne    c001b865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b988:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b98d:	74 10                	je     c001b99f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b98f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b994:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b999:	0f 85 c6 fe ff ff    	jne    c001b865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b99f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9a7:	83 e8 30             	sub    eax,0x30
c001b9aa:	83 ef 30             	sub    edi,0x30
c001b9ad:	c1 e0 04             	shl    eax,0x4
c001b9b0:	09 f8                	or     eax,edi
c001b9b2:	0f b6 c0             	movzx  eax,al
c001b9b5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b9b9:	0f 85 a6 fe ff ff    	jne    c001b865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b9c7:	83 e8 30             	sub    eax,0x30
c001b9ca:	83 ef 30             	sub    edi,0x30
c001b9cd:	c1 e0 04             	shl    eax,0x4
c001b9d0:	09 f8                	or     eax,edi
c001b9d2:	0f b6 c0             	movzx  eax,al
c001b9d5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9d9:	0f 85 86 fe ff ff    	jne    c001b865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9df:	50                   	push   eax
c001b9e0:	50                   	push   eax
c001b9e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9e5:	50                   	push   eax
c001b9e6:	55                   	push   ebp
c001b9e7:	e8 54 4c fe ff       	call   c0000640 <strcpy>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	eb 06                	jmp    c001b9f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b9f1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b9f5:	31 ed                	xor    ebp,ebp
c001b9f7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9fd:	89 e8                	mov    eax,ebp
c001b9ff:	5b                   	pop    ebx
c001ba00:	5e                   	pop    esi
c001ba01:	5f                   	pop    edi
c001ba02:	5d                   	pop    ebp
c001ba03:	c3                   	ret    

c001ba04 <PCI::checkBus(unsigned char)>:
c001ba04:	56                   	push   esi
c001ba05:	53                   	push   ebx
c001ba06:	31 db                	xor    ebx,ebx
c001ba08:	51                   	push   ecx
c001ba09:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba0e:	52                   	push   edx
c001ba0f:	53                   	push   ebx
c001ba10:	43                   	inc    ebx
c001ba11:	56                   	push   esi
c001ba12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba16:	e8 03 03 00 00       	call   c001bd1e <PCI::checkDevice(unsigned char, unsigned char)>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	83 fb 20             	cmp    ebx,0x20
c001ba21:	75 eb                	jne    c001ba0e <PCI::checkBus(unsigned char)+0xa>
c001ba23:	58                   	pop    eax
c001ba24:	5b                   	pop    ebx
c001ba25:	5e                   	pop    esi
c001ba26:	c3                   	ret    
c001ba27:	90                   	nop

c001ba28 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba28:	55                   	push   ebp
c001ba29:	57                   	push   edi
c001ba2a:	56                   	push   esi
c001ba2b:	53                   	push   ebx
c001ba2c:	83 ec 1c             	sub    esp,0x1c
c001ba2f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba34:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba38:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba3d:	0f 84 57 01 00 00    	je     c001bb9a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba43:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba48:	66 3d 06 04          	cmp    ax,0x406
c001ba4c:	75 2c                	jne    c001ba7a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba4e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba53:	50                   	push   eax
c001ba54:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba59:	50                   	push   eax
c001ba5a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba5f:	50                   	push   eax
c001ba60:	53                   	push   ebx
c001ba61:	e8 64 fb ff ff       	call   c001b5ca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba66:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba6a:	0f b6 c0             	movzx  eax,al
c001ba6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba71:	83 c4 2c             	add    esp,0x2c
c001ba74:	5b                   	pop    ebx
c001ba75:	5e                   	pop    esi
c001ba76:	5f                   	pop    edi
c001ba77:	5d                   	pop    ebp
c001ba78:	eb 8a                	jmp    c001ba04 <PCI::checkBus(unsigned char)>
c001ba7a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba7e:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba84:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ba8c:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ba91:	85 d2                	test   edx,edx
c001ba93:	74 36                	je     c001bacb <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ba95:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba98:	85 c9                	test   ecx,ecx
c001ba9a:	74 2b                	je     c001bac7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba9c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001baa2:	31 ee                	xor    esi,ebp
c001baa4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001baaa:	75 1b                	jne    c001bac7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001baac:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001bab0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001bab6:	75 0f                	jne    c001bac7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bab8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001babf:	39 f9                	cmp    ecx,edi
c001bac1:	0f 84 d3 00 00 00    	je     c001bb9a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001bac7:	8b 12                	mov    edx,DWORD PTR [edx]
c001bac9:	eb c6                	jmp    c001ba91 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bacb:	3d 01 06 00 00       	cmp    eax,0x601
c001bad0:	75 19                	jne    c001baeb <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bad2:	83 ec 0c             	sub    esp,0xc
c001bad5:	68 64 01 00 00       	push   0x164
c001bada:	e8 f7 bf fe ff       	call   c0007ad6 <malloc>
c001badf:	89 c5                	mov    ebp,eax
c001bae1:	89 04 24             	mov    DWORD PTR [esp],eax
c001bae4:	e8 a1 0e 00 00       	call   c001c98a <SATABus::SATABus()>
c001bae9:	eb 1e                	jmp    c001bb09 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001baeb:	3d 01 01 00 00       	cmp    eax,0x101
c001baf0:	75 62                	jne    c001bb54 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	68 70 02 00 00       	push   0x270
c001bafa:	e8 d7 bf fe ff       	call   c0007ad6 <malloc>
c001baff:	89 c5                	mov    ebp,eax
c001bb01:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb04:	e8 e5 02 00 00       	call   c001bdee <IDE::IDE()>
c001bb09:	5f                   	pop    edi
c001bb0a:	58                   	pop    eax
c001bb0b:	55                   	push   ebp
c001bb0c:	53                   	push   ebx
c001bb0d:	e8 d4 0e ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c001bb12:	83 ec 1c             	sub    esp,0x1c
c001bb15:	b9 09 00 00 00       	mov    ecx,0x9
c001bb1a:	fc                   	cld    
c001bb1b:	89 e7                	mov    edi,esp
c001bb1d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb23:	55                   	push   ebp
c001bb24:	e8 03 0e ff ff       	call   c000c92c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb29:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb2c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb30:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb38:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb40:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb48:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb4b:	83 c4 4c             	add    esp,0x4c
c001bb4e:	5b                   	pop    ebx
c001bb4f:	5e                   	pop    esi
c001bb50:	5f                   	pop    edi
c001bb51:	5d                   	pop    ebp
c001bb52:	ff e0                	jmp    eax
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	68 58 01 00 00       	push   0x158
c001bb5c:	e8 75 bf fe ff       	call   c0007ad6 <malloc>
c001bb61:	89 c5                	mov    ebp,eax
c001bb63:	58                   	pop    eax
c001bb64:	5a                   	pop    edx
c001bb65:	68 de 32 02 c0       	push   0xc00232de
c001bb6a:	55                   	push   ebp
c001bb6b:	e8 14 11 ff ff       	call   c000cc84 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb70:	59                   	pop    ecx
c001bb71:	5e                   	pop    esi
c001bb72:	55                   	push   ebp
c001bb73:	53                   	push   ebx
c001bb74:	e8 6d 0e ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	b9 09 00 00 00       	mov    ecx,0x9
c001bb81:	fc                   	cld    
c001bb82:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb86:	89 fe                	mov    esi,edi
c001bb88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb8a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bb8e:	83 c4 1c             	add    esp,0x1c
c001bb91:	5b                   	pop    ebx
c001bb92:	5e                   	pop    esi
c001bb93:	5f                   	pop    edi
c001bb94:	5d                   	pop    ebp
c001bb95:	e9 92 0d ff ff       	jmp    c000c92c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb9a:	83 c4 1c             	add    esp,0x1c
c001bb9d:	5b                   	pop    ebx
c001bb9e:	5e                   	pop    esi
c001bb9f:	5f                   	pop    edi
c001bba0:	5d                   	pop    ebp
c001bba1:	c3                   	ret    

c001bba2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bba2:	55                   	push   ebp
c001bba3:	57                   	push   edi
c001bba4:	56                   	push   esi
c001bba5:	53                   	push   ebx
c001bba6:	83 ec 68             	sub    esp,0x68
c001bba9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bbad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bbb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbb8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bbbf:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bbc4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbc8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbcf:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bbd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbd8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbdd:	6a 0c                	push   0xc
c001bbdf:	57                   	push   edi
c001bbe0:	53                   	push   ebx
c001bbe1:	56                   	push   esi
c001bbe2:	55                   	push   ebp
c001bbe3:	e8 32 f8 ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbe8:	83 c4 20             	add    esp,0x20
c001bbeb:	57                   	push   edi
c001bbec:	53                   	push   ebx
c001bbed:	56                   	push   esi
c001bbee:	55                   	push   ebp
c001bbef:	e8 1c f9 ff ff       	call   c001b510 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bbf4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbf9:	57                   	push   edi
c001bbfa:	53                   	push   ebx
c001bbfb:	56                   	push   esi
c001bbfc:	55                   	push   ebp
c001bbfd:	e8 a4 f9 ff ff       	call   c001b5a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc02:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc06:	83 c4 14             	add    esp,0x14
c001bc09:	6a 3c                	push   0x3c
c001bc0b:	57                   	push   edi
c001bc0c:	53                   	push   ebx
c001bc0d:	56                   	push   esi
c001bc0e:	55                   	push   ebp
c001bc0f:	e8 06 f8 ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc14:	0f b6 c4             	movzx  eax,ah
c001bc17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc1b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc1f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc23:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc28:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc2e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc34:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc38:	83 c4 20             	add    esp,0x20
c001bc3b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc40:	74 30                	je     c001bc72 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc42:	31 c0                	xor    eax,eax
c001bc44:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc48:	7e 28                	jle    c001bc72 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc4a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc52:	39 cb                	cmp    ebx,ecx
c001bc54:	75 19                	jne    c001bc6f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc56:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc5e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc62:	75 0b                	jne    c001bc6f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc64:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc6b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc6f:	40                   	inc    eax
c001bc70:	eb d2                	jmp    c001bc44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc72:	31 d2                	xor    edx,edx
c001bc74:	83 ec 0c             	sub    esp,0xc
c001bc77:	57                   	push   edi
c001bc78:	53                   	push   ebx
c001bc79:	56                   	push   esi
c001bc7a:	52                   	push   edx
c001bc7b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc7f:	55                   	push   ebp
c001bc80:	e8 6d f9 ff ff       	call   c001b5f2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc89:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc8d:	42                   	inc    edx
c001bc8e:	83 c4 20             	add    esp,0x20
c001bc91:	83 fa 06             	cmp    edx,0x6
c001bc94:	75 de                	jne    c001bc74 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc9e:	c1 e2 08             	shl    edx,0x8
c001bca1:	83 ec 0c             	sub    esp,0xc
c001bca4:	0f b6 c4             	movzx  eax,ah
c001bca7:	09 d0                	or     eax,edx
c001bca9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bcae:	6a 02                	push   0x2
c001bcb0:	57                   	push   edi
c001bcb1:	53                   	push   ebx
c001bcb2:	56                   	push   esi
c001bcb3:	55                   	push   ebp
c001bcb4:	e8 61 f7 ff ff       	call   c001b41a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bcbe:	83 c4 20             	add    esp,0x20
c001bcc1:	57                   	push   edi
c001bcc2:	53                   	push   ebx
c001bcc3:	56                   	push   esi
c001bcc4:	55                   	push   ebp
c001bcc5:	e8 90 f8 ff ff       	call   c001b55a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcca:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcce:	57                   	push   edi
c001bccf:	53                   	push   ebx
c001bcd0:	56                   	push   esi
c001bcd1:	55                   	push   ebp
c001bcd2:	e8 ed f7 ff ff       	call   c001b4c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcd7:	b9 09 00 00 00       	mov    ecx,0x9
c001bcdc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bce1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bce5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bce9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bced:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bcf1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bcf5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bcf9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bcfd:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	fc                   	cld    
c001bd05:	89 e7                	mov    edi,esp
c001bd07:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd0b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd0d:	55                   	push   ebp
c001bd0e:	e8 15 fd ff ff       	call   c001ba28 <PCI::foundDevice(PCIDeviceInfo)>
c001bd13:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd19:	5b                   	pop    ebx
c001bd1a:	5e                   	pop    esi
c001bd1b:	5f                   	pop    edi
c001bd1c:	5d                   	pop    ebp
c001bd1d:	c3                   	ret    

c001bd1e <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd1e:	55                   	push   ebp
c001bd1f:	57                   	push   edi
c001bd20:	56                   	push   esi
c001bd21:	53                   	push   ebx
c001bd22:	83 ec 0c             	sub    esp,0xc
c001bd25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd29:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd2e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd33:	6a 00                	push   0x0
c001bd35:	56                   	push   esi
c001bd36:	57                   	push   edi
c001bd37:	55                   	push   ebp
c001bd38:	e8 87 f7 ff ff       	call   c001b4c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd3d:	6a 00                	push   0x0
c001bd3f:	56                   	push   esi
c001bd40:	57                   	push   edi
c001bd41:	55                   	push   ebp
c001bd42:	e8 5b fe ff ff       	call   c001bba2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd47:	83 c4 20             	add    esp,0x20
c001bd4a:	6a 00                	push   0x0
c001bd4c:	56                   	push   esi
c001bd4d:	57                   	push   edi
c001bd4e:	55                   	push   ebp
c001bd4f:	e8 94 f7 ff ff       	call   c001b4e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	a8 80                	test   al,0x80
c001bd59:	74 2d                	je     c001bd88 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd5b:	bb 01 00 00 00       	mov    ebx,0x1
c001bd60:	53                   	push   ebx
c001bd61:	56                   	push   esi
c001bd62:	57                   	push   edi
c001bd63:	55                   	push   ebp
c001bd64:	e8 5b f7 ff ff       	call   c001b4c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	0f b7 c0             	movzx  eax,ax
c001bd6f:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd74:	74 0c                	je     c001bd82 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd76:	53                   	push   ebx
c001bd77:	56                   	push   esi
c001bd78:	57                   	push   edi
c001bd79:	55                   	push   ebp
c001bd7a:	e8 23 fe ff ff       	call   c001bba2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	43                   	inc    ebx
c001bd83:	83 fb 08             	cmp    ebx,0x8
c001bd86:	75 d8                	jne    c001bd60 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd88:	83 c4 0c             	add    esp,0xc
c001bd8b:	5b                   	pop    ebx
c001bd8c:	5e                   	pop    esi
c001bd8d:	5f                   	pop    edi
c001bd8e:	5d                   	pop    ebp
c001bd8f:	c3                   	ret    

c001bd90 <PCI::detect()>:
c001bd90:	56                   	push   esi
c001bd91:	53                   	push   ebx
c001bd92:	53                   	push   ebx
c001bd93:	31 db                	xor    ebx,ebx
c001bd95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd99:	6a 00                	push   0x0
c001bd9b:	6a 00                	push   0x0
c001bd9d:	6a 00                	push   0x0
c001bd9f:	56                   	push   esi
c001bda0:	e8 43 f7 ff ff       	call   c001b4e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bda5:	83 c4 10             	add    esp,0x10
c001bda8:	a8 80                	test   al,0x80
c001bdaa:	75 21                	jne    c001bdcd <PCI::detect()+0x3d>
c001bdac:	51                   	push   ecx
c001bdad:	51                   	push   ecx
c001bdae:	6a 00                	push   0x0
c001bdb0:	56                   	push   esi
c001bdb1:	e8 4e fc ff ff       	call   c001ba04 <PCI::checkBus(unsigned char)>
c001bdb6:	83 c4 10             	add    esp,0x10
c001bdb9:	eb 2a                	jmp    c001bde5 <PCI::detect()+0x55>
c001bdbb:	52                   	push   edx
c001bdbc:	52                   	push   edx
c001bdbd:	53                   	push   ebx
c001bdbe:	43                   	inc    ebx
c001bdbf:	56                   	push   esi
c001bdc0:	e8 3f fc ff ff       	call   c001ba04 <PCI::checkBus(unsigned char)>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	83 fb 08             	cmp    ebx,0x8
c001bdcb:	74 18                	je     c001bde5 <PCI::detect()+0x55>
c001bdcd:	53                   	push   ebx
c001bdce:	6a 00                	push   0x0
c001bdd0:	6a 00                	push   0x0
c001bdd2:	56                   	push   esi
c001bdd3:	e8 ec f6 ff ff       	call   c001b4c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	0f b7 c0             	movzx  eax,ax
c001bdde:	3d ff ff 00 00       	cmp    eax,0xffff
c001bde3:	74 d6                	je     c001bdbb <PCI::detect()+0x2b>
c001bde5:	58                   	pop    eax
c001bde6:	5b                   	pop    ebx
c001bde7:	5e                   	pop    esi
c001bde8:	c3                   	ret    
c001bde9:	90                   	nop

c001bdea <IDE::close(int, int, void*)>:
c001bdea:	83 c8 ff             	or     eax,0xffffffff
c001bded:	c3                   	ret    

c001bdee <IDE::IDE()>:
c001bdee:	83 ec 0c             	sub    esp,0xc
c001bdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf5:	83 ec 08             	sub    esp,0x8
c001bdf8:	68 24 33 02 c0       	push   0xc0023324
c001bdfd:	50                   	push   eax
c001bdfe:	e8 25 0f ff ff       	call   c000cd28 <HardDiskController::HardDiskController(char const*)>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	ba b4 33 02 c0       	mov    edx,0xc00233b4
c001be0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be0f:	89 10                	mov    DWORD PTR [eax],edx
c001be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be15:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be1c:	90                   	nop
c001be1d:	83 c4 0c             	add    esp,0xc
c001be20:	c3                   	ret    
c001be21:	90                   	nop

c001be22 <IDE::prepareInterrupt(unsigned char)>:
c001be22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be27:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be2b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be33:	c3                   	ret    

c001be34 <selectDrive(unsigned char, unsigned char)>:
c001be34:	c3                   	ret    
c001be35:	90                   	nop

c001be36 <IDE::getBase(unsigned char)>:
c001be36:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be47:	c3                   	ret    

c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be48:	55                   	push   ebp
c001be49:	57                   	push   edi
c001be4a:	56                   	push   esi
c001be4b:	53                   	push   ebx
c001be4c:	83 ec 1c             	sub    esp,0x1c
c001be4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be57:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be62:	80 f9 03             	cmp    cl,0x3
c001be65:	77 4f                	ja     c001beb6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be6b:	0f b6 fa             	movzx  edi,dl
c001be6e:	0f b6 db             	movzx  ebx,bl
c001be71:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be74:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be79:	80 ca 80             	or     dl,0x80
c001be7c:	52                   	push   edx
c001be7d:	6a 0c                	push   0xc
c001be7f:	57                   	push   edi
c001be80:	56                   	push   esi
c001be81:	e8 c2 ff ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be86:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be8f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be93:	ee                   	out    dx,al
c001be94:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be99:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001be9d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bea1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bea5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bead:	83 c4 2c             	add    esp,0x2c
c001beb0:	5b                   	pop    ebx
c001beb1:	5e                   	pop    esi
c001beb2:	5f                   	pop    edi
c001beb3:	5d                   	pop    ebp
c001beb4:	eb 92                	jmp    c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beb6:	0f b6 cb             	movzx  ecx,bl
c001beb9:	83 f9 07             	cmp    ecx,0x7
c001bebc:	77 12                	ja     c001bed0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bebe:	0f b6 d2             	movzx  edx,dl
c001bec1:	0f b6 db             	movzx  ebx,bl
c001bec4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001becc:	01 da                	add    edx,ebx
c001bece:	eb 2f                	jmp    c001beff <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bed0:	83 f9 0d             	cmp    ecx,0xd
c001bed3:	77 13                	ja     c001bee8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bed5:	0f b6 d2             	movzx  edx,dl
c001bed8:	0f b6 db             	movzx  ebx,bl
c001bedb:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bee2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bee6:	eb 17                	jmp    c001beff <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bee8:	83 f9 15             	cmp    ecx,0x15
c001beeb:	77 13                	ja     c001bf00 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001beed:	0f b6 d2             	movzx  edx,dl
c001bef0:	0f b6 db             	movzx  ebx,bl
c001bef3:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001befb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001beff:	ee                   	out    dx,al
c001bf00:	83 c4 1c             	add    esp,0x1c
c001bf03:	5b                   	pop    ebx
c001bf04:	5e                   	pop    esi
c001bf05:	5f                   	pop    edi
c001bf06:	5d                   	pop    ebp
c001bf07:	c3                   	ret    

c001bf08 <IDE::read(unsigned char, unsigned char)>:
c001bf08:	55                   	push   ebp
c001bf09:	57                   	push   edi
c001bf0a:	56                   	push   esi
c001bf0b:	53                   	push   ebx
c001bf0c:	83 ec 1c             	sub    esp,0x1c
c001bf0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf17:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bf1a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf1e:	3c 03                	cmp    al,0x3
c001bf20:	77 40                	ja     c001bf62 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf22:	0f b6 f9             	movzx  edi,cl
c001bf25:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bf28:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf2d:	0c 80                	or     al,0x80
c001bf2f:	50                   	push   eax
c001bf30:	6a 0c                	push   0xc
c001bf32:	57                   	push   edi
c001bf33:	56                   	push   esi
c001bf34:	e8 0f ff ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf39:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf3e:	0f b6 d3             	movzx  edx,bl
c001bf41:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf45:	ec                   	in     al,dx
c001bf46:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf4a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bf4f:	52                   	push   edx
c001bf50:	6a 0c                	push   0xc
c001bf52:	57                   	push   edi
c001bf53:	56                   	push   esi
c001bf54:	e8 ef fe ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf59:	83 c4 20             	add    esp,0x20
c001bf5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf60:	eb 4c                	jmp    c001bfae <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf62:	0f b6 d3             	movzx  edx,bl
c001bf65:	83 fa 07             	cmp    edx,0x7
c001bf68:	77 12                	ja     c001bf7c <IDE::read(unsigned char, unsigned char)+0x74>
c001bf6a:	0f b6 c9             	movzx  ecx,cl
c001bf6d:	0f b6 d3             	movzx  edx,bl
c001bf70:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bf78:	01 c2                	add    edx,eax
c001bf7a:	eb 31                	jmp    c001bfad <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf7c:	83 fa 0d             	cmp    edx,0xd
c001bf7f:	77 13                	ja     c001bf94 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bf81:	0f b6 c9             	movzx  ecx,cl
c001bf84:	0f b6 d3             	movzx  edx,bl
c001bf87:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bf8e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf92:	eb 19                	jmp    c001bfad <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf94:	31 c0                	xor    eax,eax
c001bf96:	83 fa 15             	cmp    edx,0x15
c001bf99:	77 13                	ja     c001bfae <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf9b:	0f b6 c9             	movzx  ecx,cl
c001bf9e:	0f b6 d3             	movzx  edx,bl
c001bfa1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bfa9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfad:	ec                   	in     al,dx
c001bfae:	83 c4 1c             	add    esp,0x1c
c001bfb1:	5b                   	pop    ebx
c001bfb2:	5e                   	pop    esi
c001bfb3:	5f                   	pop    edi
c001bfb4:	5d                   	pop    ebp
c001bfb5:	c3                   	ret    

c001bfb6 <IDE::waitInterrupt(unsigned char)>:
c001bfb6:	55                   	push   ebp
c001bfb7:	57                   	push   edi
c001bfb8:	56                   	push   esi
c001bfb9:	53                   	push   ebx
c001bfba:	31 db                	xor    ebx,ebx
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfc3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bfc8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfd0:	89 e8                	mov    eax,ebp
c001bfd2:	84 c0                	test   al,al
c001bfd4:	75 30                	jne    c001c006 <IDE::waitInterrupt(unsigned char)+0x50>
c001bfd6:	50                   	push   eax
c001bfd7:	6a 0c                	push   0xc
c001bfd9:	56                   	push   esi
c001bfda:	57                   	push   edi
c001bfdb:	e8 28 ff ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	a8 01                	test   al,0x1
c001bfe5:	75 27                	jne    c001c00e <IDE::waitInterrupt(unsigned char)+0x58>
c001bfe7:	f6 c3 04             	test   bl,0x4
c001bfea:	75 12                	jne    c001bffe <IDE::waitInterrupt(unsigned char)+0x48>
c001bfec:	83 fb 32             	cmp    ebx,0x32
c001bfef:	7e 0d                	jle    c001bffe <IDE::waitInterrupt(unsigned char)+0x48>
c001bff1:	83 ec 0c             	sub    esp,0xc
c001bff4:	6a 64                	push   0x64
c001bff6:	e8 b1 a4 ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001bffb:	83 c4 10             	add    esp,0x10
c001bffe:	83 fb 3c             	cmp    ebx,0x3c
c001c001:	74 0b                	je     c001c00e <IDE::waitInterrupt(unsigned char)+0x58>
c001c003:	43                   	inc    ebx
c001c004:	eb c2                	jmp    c001bfc8 <IDE::waitInterrupt(unsigned char)+0x12>
c001c006:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c00e:	83 c4 0c             	add    esp,0xc
c001c011:	89 e8                	mov    eax,ebp
c001c013:	5b                   	pop    ebx
c001c014:	5e                   	pop    esi
c001c015:	5f                   	pop    edi
c001c016:	5d                   	pop    ebp
c001c017:	c3                   	ret    

c001c018 <ideChannel0IRQHandler(regs*, void*)>:
c001c018:	83 ec 10             	sub    esp,0x10
c001c01b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c01f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c026:	6a 07                	push   0x7
c001c028:	6a 00                	push   0x0
c001c02a:	50                   	push   eax
c001c02b:	e8 d8 fe ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c030:	83 c4 1c             	add    esp,0x1c
c001c033:	c3                   	ret    

c001c034 <ideChannel1IRQHandler(regs*, void*)>:
c001c034:	83 ec 10             	sub    esp,0x10
c001c037:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c03b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c042:	6a 07                	push   0x7
c001c044:	6a 01                	push   0x1
c001c046:	50                   	push   eax
c001c047:	e8 bc fe ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c04c:	83 c4 1c             	add    esp,0x1c
c001c04f:	c3                   	ret    

c001c050 <IDE::enableIRQs(unsigned char, bool)>:
c001c050:	57                   	push   edi
c001c051:	b8 02 00 00 00       	mov    eax,0x2
c001c056:	56                   	push   esi
c001c057:	53                   	push   ebx
c001c058:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c05c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c060:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c065:	74 02                	je     c001c069 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c067:	31 c0                	xor    eax,eax
c001c069:	0f b6 db             	movzx  ebx,bl
c001c06c:	bf 04 00 00 00       	mov    edi,0x4
c001c071:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c078:	50                   	push   eax
c001c079:	6a 0c                	push   0xc
c001c07b:	53                   	push   ebx
c001c07c:	56                   	push   esi
c001c07d:	e8 c6 fd ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c082:	83 c4 10             	add    esp,0x10
c001c085:	50                   	push   eax
c001c086:	6a 0c                	push   0xc
c001c088:	53                   	push   ebx
c001c089:	56                   	push   esi
c001c08a:	e8 79 fe ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	4f                   	dec    edi
c001c093:	75 f0                	jne    c001c085 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c095:	5b                   	pop    ebx
c001c096:	5e                   	pop    esi
c001c097:	5f                   	pop    edi
c001c098:	c3                   	ret    
c001c099:	90                   	nop

c001c09a <IDE::open(int, int, void*)>:
c001c09a:	55                   	push   ebp
c001c09b:	57                   	push   edi
c001c09c:	56                   	push   esi
c001c09d:	53                   	push   ebx
c001c09e:	83 ec 1c             	sub    esp,0x1c
c001c0a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0a5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c0ae:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0b7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0be:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0c5:	0f 85 de 02 00 00    	jne    c001c3a9 <IDE::open(int, int, void*)+0x30f>
c001c0cb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0d1:	88 04 24             	mov    BYTE PTR [esp],al
c001c0d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c0d7:	83 e0 7f             	and    eax,0x7f
c001c0da:	83 f8 05             	cmp    eax,0x5
c001c0dd:	74 05                	je     c001c0e4 <IDE::open(int, int, void*)+0x4a>
c001c0df:	83 f8 0f             	cmp    eax,0xf
c001c0e2:	75 32                	jne    c001c116 <IDE::open(int, int, void*)+0x7c>
c001c0e4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0ea:	83 e0 fc             	and    eax,0xfffffffc
c001c0ed:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0f4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0fa:	83 e0 fc             	and    eax,0xfffffffc
c001c0fd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c104:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c10a:	83 e0 fc             	and    eax,0xfffffffc
c001c10d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c114:	eb 14                	jmp    c001c12a <IDE::open(int, int, void*)+0x90>
c001c116:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c120:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c12a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c131:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c138:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c13c:	89 c6                	mov    esi,eax
c001c13e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c143:	c1 e6 10             	shl    esi,0x10
c001c146:	89 e8                	mov    eax,ebp
c001c148:	89 fa                	mov    edx,edi
c001c14a:	c1 e0 0b             	shl    eax,0xb
c001c14d:	09 f0                	or     eax,esi
c001c14f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c156:	c1 e6 08             	shl    esi,0x8
c001c159:	09 c6                	or     esi,eax
c001c15b:	89 f0                	mov    eax,esi
c001c15d:	0d 08 00 00 80       	or     eax,0x80000008
c001c162:	ef                   	out    dx,eax
c001c163:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c168:	89 ca                	mov    edx,ecx
c001c16a:	ed                   	in     eax,dx
c001c16b:	c1 e8 10             	shr    eax,0x10
c001c16e:	3d ff ff 00 00       	cmp    eax,0xffff
c001c173:	0f 84 f9 00 00 00    	je     c001c272 <IDE::open(int, int, void*)+0x1d8>
c001c179:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c17f:	89 fa                	mov    edx,edi
c001c181:	89 f0                	mov    eax,esi
c001c183:	ef                   	out    dx,eax
c001c184:	b0 fe                	mov    al,0xfe
c001c186:	89 ca                	mov    edx,ecx
c001c188:	ee                   	out    dx,al
c001c189:	89 f0                	mov    eax,esi
c001c18b:	89 fa                	mov    edx,edi
c001c18d:	ef                   	out    dx,eax
c001c18e:	89 ca                	mov    edx,ecx
c001c190:	ed                   	in     eax,dx
c001c191:	3c fe                	cmp    al,0xfe
c001c193:	0f 85 a9 00 00 00    	jne    c001c242 <IDE::open(int, int, void*)+0x1a8>
c001c199:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c19f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c1a6:	74 33                	je     c001c1db <IDE::open(int, int, void*)+0x141>
c001c1a8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c1ae:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c1b2:	40                   	inc    eax
c001c1b3:	83 ec 0c             	sub    esp,0xc
c001c1b6:	0f b6 c0             	movzx  eax,al
c001c1b9:	50                   	push   eax
c001c1ba:	55                   	push   ebp
c001c1bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1bf:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1c5:	51                   	push   ecx
c001c1c6:	e8 e5 37 ff ff       	call   c000f9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1cb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1d0:	83 c4 1c             	add    esp,0x1c
c001c1d3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1d9:	eb 0a                	jmp    c001c1e5 <IDE::open(int, int, void*)+0x14b>
c001c1db:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1e5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1ec:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1f3:	c1 e1 10             	shl    ecx,0x10
c001c1f6:	c1 e0 08             	shl    eax,0x8
c001c1f9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c1fe:	09 c1                	or     ecx,eax
c001c200:	89 fa                	mov    edx,edi
c001c202:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c209:	c1 e0 0b             	shl    eax,0xb
c001c20c:	09 c1                	or     ecx,eax
c001c20e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c214:	89 c8                	mov    eax,ecx
c001c216:	ef                   	out    dx,eax
c001c217:	be fc 0c 00 00       	mov    esi,0xcfc
c001c21c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c222:	89 f2                	mov    edx,esi
c001c224:	ee                   	out    dx,al
c001c225:	89 c8                	mov    eax,ecx
c001c227:	89 fa                	mov    edx,edi
c001c229:	ef                   	out    dx,eax
c001c22a:	89 f2                	mov    edx,esi
c001c22c:	ed                   	in     eax,dx
c001c22d:	0f b6 c0             	movzx  eax,al
c001c230:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c236:	74 4a                	je     c001c282 <IDE::open(int, int, void*)+0x1e8>
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	68 3c 33 02 c0       	push   0xc002333c
c001c240:	eb 38                	jmp    c001c27a <IDE::open(int, int, void*)+0x1e0>
c001c242:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c24b:	75 1b                	jne    c001c268 <IDE::open(int, int, void*)+0x1ce>
c001c24d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c251:	3d 80 00 00 00       	cmp    eax,0x80
c001c256:	74 07                	je     c001c25f <IDE::open(int, int, void*)+0x1c5>
c001c258:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c25d:	75 09                	jne    c001c268 <IDE::open(int, int, void*)+0x1ce>
c001c25f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c266:	eb 1a                	jmp    c001c282 <IDE::open(int, int, void*)+0x1e8>
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	68 44 33 02 c0       	push   0xc0023344
c001c270:	eb 08                	jmp    c001c27a <IDE::open(int, int, void*)+0x1e0>
c001c272:	83 ec 0c             	sub    esp,0xc
c001c275:	68 75 33 02 c0       	push   0xc0023375
c001c27a:	e8 18 54 ff ff       	call   c0011697 <KePanic(char const*)>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c289:	74 1a                	je     c001c2a5 <IDE::open(int, int, void*)+0x20b>
c001c28b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c291:	83 e0 fc             	and    eax,0xfffffffc
c001c294:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c29b:	83 c0 08             	add    eax,0x8
c001c29e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c2a5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c2ab:	89 c2                	mov    edx,eax
c001c2ad:	83 e2 0f             	and    edx,0xf
c001c2b0:	83 fa 08             	cmp    edx,0x8
c001c2b3:	75 0a                	jne    c001c2bf <IDE::open(int, int, void*)+0x225>
c001c2b5:	83 e8 02             	sub    eax,0x2
c001c2b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2bf:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2c5:	89 c2                	mov    edx,eax
c001c2c7:	83 e2 0f             	and    edx,0xf
c001c2ca:	83 fa 08             	cmp    edx,0x8
c001c2cd:	75 0a                	jne    c001c2d9 <IDE::open(int, int, void*)+0x23f>
c001c2cf:	83 e8 02             	sub    eax,0x2
c001c2d2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2d9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2e0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2e7:	89 d0                	mov    eax,edx
c001c2e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2ec:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2ef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2f3:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2f7:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2fb:	83 e1 3f             	and    ecx,0x3f
c001c2fe:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c302:	89 f9                	mov    ecx,edi
c001c304:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c30b:	0f b6 c9             	movzx  ecx,cl
c001c30e:	8d 78 02             	lea    edi,[eax+0x2]
c001c311:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c314:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c318:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c31c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c320:	83 e2 3f             	and    edx,0x3f
c001c323:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c327:	89 f9                	mov    ecx,edi
c001c329:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c32f:	0f b6 d1             	movzx  edx,cl
c001c332:	8d 78 03             	lea    edi,[eax+0x3]
c001c335:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c338:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c33c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c340:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c344:	83 e1 3f             	and    ecx,0x3f
c001c347:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c34b:	89 f9                	mov    ecx,edi
c001c34d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c353:	0f b6 c9             	movzx  ecx,cl
c001c356:	8d 78 04             	lea    edi,[eax+0x4]
c001c359:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c35c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c360:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c364:	89 fa                	mov    edx,edi
c001c366:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c36c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c370:	83 e2 3f             	and    edx,0x3f
c001c373:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c377:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c37e:	66 85 f6             	test   si,si
c001c381:	74 65                	je     c001c3e8 <IDE::open(int, int, void*)+0x34e>
c001c383:	89 f9                	mov    ecx,edi
c001c385:	83 c0 05             	add    eax,0x5
c001c388:	0f b6 d1             	movzx  edx,cl
c001c38b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c38e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c392:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c396:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c39c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c3a0:	83 e0 3f             	and    eax,0x3f
c001c3a3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c3a7:	eb 3f                	jmp    c001c3e8 <IDE::open(int, int, void*)+0x34e>
c001c3a9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c3af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3b6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3bd:	05 06 02 00 00       	add    eax,0x206
c001c3c2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3c9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3d0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3d7:	05 06 02 00 00       	add    eax,0x206
c001c3dc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3e3:	e9 bd fe ff ff       	jmp    c001c2a5 <IDE::open(int, int, void*)+0x20b>
c001c3e8:	50                   	push   eax
c001c3e9:	50                   	push   eax
c001c3ea:	6a 00                	push   0x0
c001c3ec:	53                   	push   ebx
c001c3ed:	e8 30 fa ff ff       	call   c001be22 <IDE::prepareInterrupt(unsigned char)>
c001c3f2:	5a                   	pop    edx
c001c3f3:	59                   	pop    ecx
c001c3f4:	6a 01                	push   0x1
c001c3f6:	53                   	push   ebx
c001c3f7:	e8 26 fa ff ff       	call   c001be22 <IDE::prepareInterrupt(unsigned char)>
c001c3fc:	83 c4 0c             	add    esp,0xc
c001c3ff:	6a 00                	push   0x0
c001c401:	6a 00                	push   0x0
c001c403:	53                   	push   ebx
c001c404:	e8 47 fc ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001c409:	83 c4 0c             	add    esp,0xc
c001c40c:	6a 00                	push   0x0
c001c40e:	6a 01                	push   0x1
c001c410:	53                   	push   ebx
c001c411:	e8 3a fc ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001c416:	83 c4 10             	add    esp,0x10
c001c419:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c420:	74 34                	je     c001c456 <IDE::open(int, int, void*)+0x3bc>
c001c422:	83 ec 0c             	sub    esp,0xc
c001c425:	53                   	push   ebx
c001c426:	6a 01                	push   0x1
c001c428:	68 18 c0 01 c0       	push   0xc001c018
c001c42d:	6a 0e                	push   0xe
c001c42f:	53                   	push   ebx
c001c430:	e8 5d 05 ff ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c435:	83 c4 14             	add    esp,0x14
c001c438:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c43e:	53                   	push   ebx
c001c43f:	6a 01                	push   0x1
c001c441:	68 34 c0 01 c0       	push   0xc001c034
c001c446:	6a 0f                	push   0xf
c001c448:	53                   	push   ebx
c001c449:	e8 44 05 ff ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c44e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c454:	eb 38                	jmp    c001c48e <IDE::open(int, int, void*)+0x3f4>
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c463:	53                   	push   ebx
c001c464:	6a 00                	push   0x0
c001c466:	68 18 c0 01 c0       	push   0xc001c018
c001c46b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c471:	53                   	push   ebx
c001c472:	e8 1b 05 ff ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c477:	83 c4 14             	add    esp,0x14
c001c47a:	53                   	push   ebx
c001c47b:	6a 00                	push   0x0
c001c47d:	68 34 c0 01 c0       	push   0xc001c034
c001c482:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c488:	53                   	push   ebx
c001c489:	e8 04 05 ff ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c48e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c490:	83 c4 20             	add    esp,0x20
c001c493:	83 ec 0c             	sub    esp,0xc
c001c496:	53                   	push   ebx
c001c497:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c49a:	83 c4 0c             	add    esp,0xc
c001c49d:	6a 07                	push   0x7
c001c49f:	6a 00                	push   0x0
c001c4a1:	53                   	push   ebx
c001c4a2:	e8 61 fa ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c4a7:	83 c4 0c             	add    esp,0xc
c001c4aa:	6a 07                	push   0x7
c001c4ac:	6a 01                	push   0x1
c001c4ae:	53                   	push   ebx
c001c4af:	e8 54 fa ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c4b4:	83 c4 0c             	add    esp,0xc
c001c4b7:	6a 01                	push   0x1
c001c4b9:	6a 00                	push   0x0
c001c4bb:	53                   	push   ebx
c001c4bc:	e8 8f fb ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001c4c1:	83 c4 0c             	add    esp,0xc
c001c4c4:	6a 01                	push   0x1
c001c4c6:	6a 01                	push   0x1
c001c4c8:	53                   	push   ebx
c001c4c9:	e8 82 fb ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001c4ce:	83 c4 2c             	add    esp,0x2c
c001c4d1:	31 c0                	xor    eax,eax
c001c4d3:	5b                   	pop    ebx
c001c4d4:	5e                   	pop    esi
c001c4d5:	5f                   	pop    edi
c001c4d6:	5d                   	pop    ebp
c001c4d7:	c3                   	ret    

c001c4d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4d8:	55                   	push   ebp
c001c4d9:	57                   	push   edi
c001c4da:	56                   	push   esi
c001c4db:	53                   	push   ebx
c001c4dc:	83 ec 1c             	sub    esp,0x1c
c001c4df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4e7:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4ee:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4f2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4f6:	3c 03                	cmp    al,0x3
c001c4f8:	77 5a                	ja     c001c554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4fe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c502:	0f b6 db             	movzx  ebx,bl
c001c505:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c508:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c50d:	0c 80                	or     al,0x80
c001c50f:	50                   	push   eax
c001c510:	6a 0c                	push   0xc
c001c512:	53                   	push   ebx
c001c513:	56                   	push   esi
c001c514:	e8 2f f9 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c519:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c51e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c522:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c526:	0f b6 d2             	movzx  edx,dl
c001c529:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c52d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c52f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c534:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c538:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c53c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c540:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c548:	83 c4 2c             	add    esp,0x2c
c001c54b:	5b                   	pop    ebx
c001c54c:	5e                   	pop    esi
c001c54d:	5f                   	pop    edi
c001c54e:	5d                   	pop    ebp
c001c54f:	e9 f4 f8 ff ff       	jmp    c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c554:	0f b6 c2             	movzx  eax,dl
c001c557:	83 f8 07             	cmp    eax,0x7
c001c55a:	77 12                	ja     c001c56e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c55c:	0f b6 c2             	movzx  eax,dl
c001c55f:	0f b6 db             	movzx  ebx,bl
c001c562:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c56a:	01 c2                	add    edx,eax
c001c56c:	eb 2f                	jmp    c001c59d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c56e:	83 f8 0d             	cmp    eax,0xd
c001c571:	77 13                	ja     c001c586 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c573:	0f b6 db             	movzx  ebx,bl
c001c576:	0f b6 d2             	movzx  edx,dl
c001c579:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c580:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c584:	eb 17                	jmp    c001c59d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c586:	83 f8 15             	cmp    eax,0x15
c001c589:	77 14                	ja     c001c59f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c58b:	0f b6 db             	movzx  ebx,bl
c001c58e:	0f b6 d2             	movzx  edx,dl
c001c591:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c599:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c59d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c59f:	83 c4 1c             	add    esp,0x1c
c001c5a2:	5b                   	pop    ebx
c001c5a3:	5e                   	pop    esi
c001c5a4:	5f                   	pop    edi
c001c5a5:	5d                   	pop    ebp
c001c5a6:	c3                   	ret    
c001c5a7:	90                   	nop

c001c5a8 <IDE::detect()>:
c001c5a8:	55                   	push   ebp
c001c5a9:	57                   	push   edi
c001c5aa:	56                   	push   esi
c001c5ab:	53                   	push   ebx
c001c5ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5b2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c5b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5c0:	0f 85 a4 02 00 00    	jne    c001c86a <IDE::detect()+0x2c2>
c001c5c6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5cd:	31 f6                	xor    esi,esi
c001c5cf:	31 ed                	xor    ebp,ebp
c001c5d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5d9:	89 e8                	mov    eax,ebp
c001c5db:	c1 e0 06             	shl    eax,0x6
c001c5de:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f2:	c1 e0 04             	shl    eax,0x4
c001c5f5:	83 c8 a0             	or     eax,0xffffffa0
c001c5f8:	0f b6 c0             	movzx  eax,al
c001c5fb:	50                   	push   eax
c001c5fc:	6a 06                	push   0x6
c001c5fe:	56                   	push   esi
c001c5ff:	53                   	push   ebx
c001c600:	e8 43 f8 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c605:	83 c4 0c             	add    esp,0xc
c001c608:	6a 0c                	push   0xc
c001c60a:	56                   	push   esi
c001c60b:	53                   	push   ebx
c001c60c:	e8 f7 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	6a 0c                	push   0xc
c001c616:	56                   	push   esi
c001c617:	53                   	push   ebx
c001c618:	e8 eb f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c61d:	83 c4 0c             	add    esp,0xc
c001c620:	6a 0c                	push   0xc
c001c622:	56                   	push   esi
c001c623:	53                   	push   ebx
c001c624:	e8 df f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c629:	83 c4 0c             	add    esp,0xc
c001c62c:	6a 0c                	push   0xc
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	e8 d3 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c635:	68 ec 00 00 00       	push   0xec
c001c63a:	6a 07                	push   0x7
c001c63c:	56                   	push   esi
c001c63d:	53                   	push   ebx
c001c63e:	e8 05 f8 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c643:	83 c4 1c             	add    esp,0x1c
c001c646:	6a 0c                	push   0xc
c001c648:	56                   	push   esi
c001c649:	53                   	push   ebx
c001c64a:	e8 b9 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c64f:	83 c4 0c             	add    esp,0xc
c001c652:	6a 0c                	push   0xc
c001c654:	56                   	push   esi
c001c655:	53                   	push   ebx
c001c656:	e8 ad f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c65b:	83 c4 0c             	add    esp,0xc
c001c65e:	6a 0c                	push   0xc
c001c660:	56                   	push   esi
c001c661:	53                   	push   ebx
c001c662:	e8 a1 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c667:	83 c4 0c             	add    esp,0xc
c001c66a:	6a 0c                	push   0xc
c001c66c:	56                   	push   esi
c001c66d:	53                   	push   ebx
c001c66e:	e8 95 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c673:	83 c4 0c             	add    esp,0xc
c001c676:	6a 0c                	push   0xc
c001c678:	56                   	push   esi
c001c679:	53                   	push   ebx
c001c67a:	e8 89 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c67f:	83 c4 10             	add    esp,0x10
c001c682:	84 c0                	test   al,al
c001c684:	0f 84 60 01 00 00    	je     c001c7ea <IDE::detect()+0x242>
c001c68a:	31 ff                	xor    edi,edi
c001c68c:	50                   	push   eax
c001c68d:	6a 0c                	push   0xc
c001c68f:	56                   	push   esi
c001c690:	53                   	push   ebx
c001c691:	e8 72 f8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c696:	83 c4 10             	add    esp,0x10
c001c699:	a8 01                	test   al,0x1
c001c69b:	0f 85 6a 01 00 00    	jne    c001c80b <IDE::detect()+0x263>
c001c6a1:	a8 80                	test   al,0x80
c001c6a3:	75 04                	jne    c001c6a9 <IDE::detect()+0x101>
c001c6a5:	a8 08                	test   al,0x8
c001c6a7:	75 23                	jne    c001c6cc <IDE::detect()+0x124>
c001c6a9:	47                   	inc    edi
c001c6aa:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c6b0:	7e da                	jle    c001c68c <IDE::detect()+0xe4>
c001c6b2:	83 ec 0c             	sub    esp,0xc
c001c6b5:	6a 32                	push   0x32
c001c6b7:	e8 f0 9d ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001c6bc:	83 c4 10             	add    esp,0x10
c001c6bf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c6c5:	75 c5                	jne    c001c68c <IDE::detect()+0xe4>
c001c6c7:	e9 3f 01 00 00       	jmp    c001c80b <IDE::detect()+0x263>
c001c6cc:	31 c9                	xor    ecx,ecx
c001c6ce:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6d2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c6d6:	83 ec 0c             	sub    esp,0xc
c001c6d9:	68 80 00 00 00       	push   0x80
c001c6de:	57                   	push   edi
c001c6df:	6a 00                	push   0x0
c001c6e1:	56                   	push   esi
c001c6e2:	53                   	push   ebx
c001c6e3:	e8 f0 fd ff ff       	call   c001c4d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6e8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6ed:	89 e8                	mov    eax,ebp
c001c6ef:	89 d1                	mov    ecx,edx
c001c6f1:	c1 e0 06             	shl    eax,0x6
c001c6f4:	01 d8                	add    eax,ebx
c001c6f6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6fd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c704:	89 f2                	mov    edx,esi
c001c706:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c70c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c710:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c716:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c71a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c721:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c729:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c730:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c738:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c73e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c745:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c74b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c74f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c753:	83 c4 20             	add    esp,0x20
c001c756:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c759:	83 c0 02             	add    eax,0x2
c001c75c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c762:	83 c7 02             	add    edi,0x2
c001c765:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c768:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c76e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c772:	75 e2                	jne    c001c756 <IDE::detect()+0x1ae>
c001c774:	89 e8                	mov    eax,ebp
c001c776:	c1 e0 06             	shl    eax,0x6
c001c779:	01 d8                	add    eax,ebx
c001c77b:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c782:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c789:	c1 ea 09             	shr    edx,0x9
c001c78c:	83 e2 01             	and    edx,0x1
c001c78f:	80 e1 01             	and    cl,0x1
c001c792:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c798:	75 22                	jne    c001c7bc <IDE::detect()+0x214>
c001c79a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c7a1:	74 46                	je     c001c7e9 <IDE::detect()+0x241>
c001c7a3:	83 ec 0c             	sub    esp,0xc
c001c7a6:	68 7c 01 00 00       	push   0x17c
c001c7ab:	e8 26 b3 fe ff       	call   c0007ad6 <malloc>
c001c7b0:	89 c7                	mov    edi,eax
c001c7b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7b5:	e8 1a 05 00 00       	call   c001ccd4 <ATA::ATA()>
c001c7ba:	eb 17                	jmp    c001c7d3 <IDE::detect()+0x22b>
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	68 84 01 00 00       	push   0x184
c001c7c4:	e8 0d b3 fe ff       	call   c0007ad6 <malloc>
c001c7c9:	89 c7                	mov    edi,eax
c001c7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7ce:	e8 45 0e 00 00       	call   c001d618 <ATAPI::ATAPI()>
c001c7d3:	5a                   	pop    edx
c001c7d4:	59                   	pop    ecx
c001c7d5:	57                   	push   edi
c001c7d6:	53                   	push   ebx
c001c7d7:	e8 0a 02 ff ff       	call   c000c9e6 <Device::addChild(Device*)>
c001c7dc:	8b 07                	mov    eax,DWORD PTR [edi]
c001c7de:	53                   	push   ebx
c001c7df:	55                   	push   ebp
c001c7e0:	6a 00                	push   0x0
c001c7e2:	57                   	push   edi
c001c7e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7e6:	83 c4 20             	add    esp,0x20
c001c7e9:	45                   	inc    ebp
c001c7ea:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7ef:	74 0d                	je     c001c7fe <IDE::detect()+0x256>
c001c7f1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7f9:	e9 db fd ff ff       	jmp    c001c5d9 <IDE::detect()+0x31>
c001c7fe:	4e                   	dec    esi
c001c7ff:	74 69                	je     c001c86a <IDE::detect()+0x2c2>
c001c801:	be 01 00 00 00       	mov    esi,0x1
c001c806:	e9 c6 fd ff ff       	jmp    c001c5d1 <IDE::detect()+0x29>
c001c80b:	50                   	push   eax
c001c80c:	6a 04                	push   0x4
c001c80e:	56                   	push   esi
c001c80f:	53                   	push   ebx
c001c810:	e8 f3 f6 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c815:	83 c4 0c             	add    esp,0xc
c001c818:	89 c7                	mov    edi,eax
c001c81a:	6a 05                	push   0x5
c001c81c:	56                   	push   esi
c001c81d:	53                   	push   ebx
c001c81e:	e8 e5 f6 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	89 f9                	mov    ecx,edi
c001c828:	0f b6 c0             	movzx  eax,al
c001c82b:	0f b6 f9             	movzx  edi,cl
c001c82e:	83 ff 14             	cmp    edi,0x14
c001c831:	75 07                	jne    c001c83a <IDE::detect()+0x292>
c001c833:	3d eb 00 00 00       	cmp    eax,0xeb
c001c838:	eb 0a                	jmp    c001c844 <IDE::detect()+0x29c>
c001c83a:	3d 96 00 00 00       	cmp    eax,0x96
c001c83f:	75 a9                	jne    c001c7ea <IDE::detect()+0x242>
c001c841:	83 ff 69             	cmp    edi,0x69
c001c844:	75 a4                	jne    c001c7ea <IDE::detect()+0x242>
c001c846:	68 a1 00 00 00       	push   0xa1
c001c84b:	6a 07                	push   0x7
c001c84d:	56                   	push   esi
c001c84e:	53                   	push   ebx
c001c84f:	e8 f4 f5 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c854:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c85b:	e8 4c 9c ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001c860:	83 c4 10             	add    esp,0x10
c001c863:	b1 01                	mov    cl,0x1
c001c865:	e9 64 fe ff ff       	jmp    c001c6ce <IDE::detect()+0x126>
c001c86a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c870:	5b                   	pop    ebx
c001c871:	5e                   	pop    esi
c001c872:	5f                   	pop    edi
c001c873:	5d                   	pop    ebp
c001c874:	c3                   	ret    
c001c875:	90                   	nop

c001c876 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c876:	55                   	push   ebp
c001c877:	57                   	push   edi
c001c878:	56                   	push   esi
c001c879:	53                   	push   ebx
c001c87a:	83 ec 1c             	sub    esp,0x1c
c001c87d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c881:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c889:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c88d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c891:	88 c3                	mov    bl,al
c001c893:	25 ff 00 00 00       	and    eax,0xff
c001c898:	0f 84 88 00 00 00    	je     c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c89e:	83 ec 0c             	sub    esp,0xc
c001c8a1:	89 c7                	mov    edi,eax
c001c8a3:	68 9f 33 02 c0       	push   0xc002339f
c001c8a8:	e8 b8 e0 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	83 ff 01             	cmp    edi,0x1
c001c8b3:	74 6b                	je     c001c920 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c8b5:	83 ff 02             	cmp    edi,0x2
c001c8b8:	75 58                	jne    c001c912 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c8ba:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8bf:	01 ff                	add    edi,edi
c001c8c1:	50                   	push   eax
c001c8c2:	09 fe                	or     esi,edi
c001c8c4:	6a 01                	push   0x1
c001c8c6:	89 f0                	mov    eax,esi
c001c8c8:	0f b6 f0             	movzx  esi,al
c001c8cb:	c1 e6 06             	shl    esi,0x6
c001c8ce:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8d6:	50                   	push   eax
c001c8d7:	55                   	push   ebp
c001c8d8:	e8 2b f6 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	a8 01                	test   al,0x1
c001c8e2:	74 02                	je     c001c8e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8e4:	b3 07                	mov    bl,0x7
c001c8e6:	a8 02                	test   al,0x2
c001c8e8:	74 02                	je     c001c8ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8ea:	b3 03                	mov    bl,0x3
c001c8ec:	a8 04                	test   al,0x4
c001c8ee:	74 02                	je     c001c8f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8f0:	b3 14                	mov    bl,0x14
c001c8f2:	a8 08                	test   al,0x8
c001c8f4:	74 02                	je     c001c8f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8f6:	b3 03                	mov    bl,0x3
c001c8f8:	a8 10                	test   al,0x10
c001c8fa:	74 02                	je     c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8fc:	b3 15                	mov    bl,0x15
c001c8fe:	a8 20                	test   al,0x20
c001c900:	74 02                	je     c001c904 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c902:	b3 03                	mov    bl,0x3
c001c904:	a8 40                	test   al,0x40
c001c906:	74 02                	je     c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c908:	b3 16                	mov    bl,0x16
c001c90a:	a8 80                	test   al,0x80
c001c90c:	74 18                	je     c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c90e:	b3 0d                	mov    bl,0xd
c001c910:	eb 14                	jmp    c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c912:	83 ff 03             	cmp    edi,0x3
c001c915:	74 0d                	je     c001c924 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c917:	83 ff 04             	cmp    edi,0x4
c001c91a:	75 0a                	jne    c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c91c:	b3 08                	mov    bl,0x8
c001c91e:	eb 06                	jmp    c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c920:	b3 13                	mov    bl,0x13
c001c922:	eb 02                	jmp    c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c924:	b3 17                	mov    bl,0x17
c001c926:	83 c4 1c             	add    esp,0x1c
c001c929:	88 d8                	mov    al,bl
c001c92b:	5b                   	pop    ebx
c001c92c:	5e                   	pop    esi
c001c92d:	5f                   	pop    edi
c001c92e:	5d                   	pop    ebp
c001c92f:	c3                   	ret    

c001c930 <IDE::polling(unsigned char, unsigned int)>:
c001c930:	57                   	push   edi
c001c931:	56                   	push   esi
c001c932:	53                   	push   ebx
c001c933:	bb 04 00 00 00       	mov    ebx,0x4
c001c938:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c93c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c941:	52                   	push   edx
c001c942:	6a 0c                	push   0xc
c001c944:	56                   	push   esi
c001c945:	57                   	push   edi
c001c946:	e8 bd f5 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	4b                   	dec    ebx
c001c94f:	75 f0                	jne    c001c941 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c951:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c956:	50                   	push   eax
c001c957:	6a 0c                	push   0xc
c001c959:	56                   	push   esi
c001c95a:	57                   	push   edi
c001c95b:	e8 a8 f5 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	a8 01                	test   al,0x1
c001c965:	75 17                	jne    c001c97e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c967:	a8 20                	test   al,0x20
c001c969:	75 0f                	jne    c001c97a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c96b:	4b                   	dec    ebx
c001c96c:	74 10                	je     c001c97e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c96e:	a8 80                	test   al,0x80
c001c970:	75 e4                	jne    c001c956 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c972:	a8 08                	test   al,0x8
c001c974:	74 e0                	je     c001c956 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c976:	31 c0                	xor    eax,eax
c001c978:	eb 06                	jmp    c001c980 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c97a:	b0 01                	mov    al,0x1
c001c97c:	eb 02                	jmp    c001c980 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c97e:	b0 02                	mov    al,0x2
c001c980:	5b                   	pop    ebx
c001c981:	5e                   	pop    esi
c001c982:	5f                   	pop    edi
c001c983:	c3                   	ret    

c001c984 <SATABus::close(int, int, void*)>:
c001c984:	31 c0                	xor    eax,eax
c001c986:	c3                   	ret    
c001c987:	90                   	nop

c001c988 <SATABus::detect()>:
c001c988:	c3                   	ret    
c001c989:	90                   	nop

c001c98a <SATABus::SATABus()>:
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c991:	83 ec 08             	sub    esp,0x8
c001c994:	68 d8 33 02 c0       	push   0xc00233d8
c001c999:	50                   	push   eax
c001c99a:	e8 89 03 ff ff       	call   c000cd28 <HardDiskController::HardDiskController(char const*)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	ba 04 34 02 c0       	mov    edx,0xc0023404
c001c9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ab:	89 10                	mov    DWORD PTR [eax],edx
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	6a 50                	push   0x50
c001c9b2:	e8 f7 b4 fe ff       	call   c0007eae <Phys::allocateContiguousPages(int)>
c001c9b7:	83 c4 10             	add    esp,0x10
c001c9ba:	89 c2                	mov    edx,eax
c001c9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9c6:	83 ec 0c             	sub    esp,0xc
c001c9c9:	6a 50                	push   0x50
c001c9cb:	e8 5d cc fe ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c001c9d0:	83 c4 10             	add    esp,0x10
c001c9d3:	89 c2                	mov    edx,eax
c001c9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9df:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9e8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9f2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	6a 03                	push   0x3
c001c9fd:	6a 50                	push   0x50
c001c9ff:	51                   	push   ecx
c001ca00:	52                   	push   edx
c001ca01:	50                   	push   eax
c001ca02:	e8 33 d5 fe ff       	call   c0009f3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca07:	83 c4 20             	add    esp,0x20
c001ca0a:	90                   	nop
c001ca0b:	83 c4 0c             	add    esp,0xc
c001ca0e:	c3                   	ret    
c001ca0f:	90                   	nop

c001ca10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca14:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca1a:	09 c2                	or     edx,eax
c001ca1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca26:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca28:	31 c0                	xor    eax,eax
c001ca2a:	c1 e9 08             	shr    ecx,0x8
c001ca2d:	83 e1 0f             	and    ecx,0xf
c001ca30:	39 c8                	cmp    eax,ecx
c001ca32:	74 0a                	je     c001ca3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca34:	f6 c2 01             	test   dl,0x1
c001ca37:	74 08                	je     c001ca41 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca39:	d1 ea                	shr    edx,1
c001ca3b:	40                   	inc    eax
c001ca3c:	eb f2                	jmp    c001ca30 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca3e:	83 c8 ff             	or     eax,0xffffffff
c001ca41:	c3                   	ret    

c001ca42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca46:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca49:	89 c2                	mov    edx,eax
c001ca4b:	c1 ea 08             	shr    edx,0x8
c001ca4e:	83 e2 0f             	and    edx,0xf
c001ca51:	4a                   	dec    edx
c001ca52:	75 32                	jne    c001ca86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca54:	83 e0 0f             	and    eax,0xf
c001ca57:	83 f8 03             	cmp    eax,0x3
c001ca5a:	75 2a                	jne    c001ca86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca5c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca5f:	b8 02 00 00 00       	mov    eax,0x2
c001ca64:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca6a:	74 1c                	je     c001ca88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca6c:	b8 04 00 00 00       	mov    eax,0x4
c001ca71:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca77:	74 0f                	je     c001ca88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca79:	31 c0                	xor    eax,eax
c001ca7b:	83 fa 03             	cmp    edx,0x3
c001ca7e:	0f 94 c0             	sete   al
c001ca81:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca85:	c3                   	ret    
c001ca86:	31 c0                	xor    eax,eax
c001ca88:	c3                   	ret    
c001ca89:	90                   	nop

c001ca8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca91:	0f ba e2 0f          	bt     edx,0xf
c001ca95:	72 f7                	jb     c001ca8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca9a:	83 ca 10             	or     edx,0x10
c001ca9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caa0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa3:	83 ca 01             	or     edx,0x1
c001caa6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caa9:	c3                   	ret    

c001caaa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001caaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cab1:	83 e2 fe             	and    edx,0xfffffffe
c001cab4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cab7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caba:	83 e2 ef             	and    edx,0xffffffef
c001cabd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cac0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cac3:	0f ba e2 0e          	bt     edx,0xe
c001cac7:	72 f7                	jb     c001cac0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cac9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cacc:	0f ba e2 0f          	bt     edx,0xf
c001cad0:	72 ee                	jb     c001cac0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cad2:	c3                   	ret    
c001cad3:	90                   	nop

c001cad4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cad4:	55                   	push   ebp
c001cad5:	57                   	push   edi
c001cad6:	56                   	push   esi
c001cad7:	53                   	push   ebx
c001cad8:	83 ec 1c             	sub    esp,0x1c
c001cadb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cadf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cae3:	53                   	push   ebx
c001cae4:	56                   	push   esi
c001cae5:	e8 c0 ff ff ff       	call   c001caaa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001caea:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001caee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001caf4:	83 ec 0c             	sub    esp,0xc
c001caf7:	c1 e5 0a             	shl    ebp,0xa
c001cafa:	01 e8                	add    eax,ebp
c001cafc:	89 03                	mov    DWORD PTR [ebx],eax
c001cafe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb00:	68 00 04 00 00       	push   0x400
c001cb05:	6a 00                	push   0x0
c001cb07:	50                   	push   eax
c001cb08:	e8 e3 39 fe ff       	call   c00004f0 <memset>
c001cb0d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cb13:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cb17:	01 e8                	add    eax,ebp
c001cb19:	83 c4 1c             	add    esp,0x1c
c001cb1c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb1e:	c1 e2 08             	shl    edx,0x8
c001cb21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb28:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb2e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb34:	01 f8                	add    eax,edi
c001cb36:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb3c:	68 00 01 00 00       	push   0x100
c001cb41:	6a 00                	push   0x0
c001cb43:	50                   	push   eax
c001cb44:	e8 a7 39 fe ff       	call   c00004f0 <memset>
c001cb49:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cb4f:	01 fa                	add    edx,edi
c001cb51:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb55:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cb58:	c1 e7 0d             	shl    edi,0xd
c001cb5b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb62:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb68:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb72:	31 ff                	xor    edi,edi
c001cb74:	83 c4 10             	add    esp,0x10
c001cb77:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb81:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cb87:	83 c5 20             	add    ebp,0x20
c001cb8a:	01 f8                	add    eax,edi
c001cb8c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb8f:	52                   	push   edx
c001cb90:	68 00 01 00 00       	push   0x100
c001cb95:	6a 00                	push   0x0
c001cb97:	50                   	push   eax
c001cb98:	e8 53 39 fe ff       	call   c00004f0 <memset>
c001cb9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cbaa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cbb1:	01 f8                	add    eax,edi
c001cbb3:	81 c7 00 01 00 00    	add    edi,0x100
c001cbb9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbbc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cbc2:	75 b3                	jne    c001cb77 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cbc4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbcb:	50                   	push   eax
c001cbcc:	50                   	push   eax
c001cbcd:	53                   	push   ebx
c001cbce:	56                   	push   esi
c001cbcf:	e8 b6 fe ff ff       	call   c001ca8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbd4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbdb:	83 c4 2c             	add    esp,0x2c
c001cbde:	5b                   	pop    ebx
c001cbdf:	5e                   	pop    esi
c001cbe0:	5f                   	pop    edi
c001cbe1:	5d                   	pop    ebp
c001cbe2:	c3                   	ret    
c001cbe3:	90                   	nop

c001cbe4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbe4:	55                   	push   ebp
c001cbe5:	57                   	push   edi
c001cbe6:	56                   	push   esi
c001cbe7:	53                   	push   ebx
c001cbe8:	31 db                	xor    ebx,ebx
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbf1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cbf5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbf8:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbfe:	74 7a                	je     c001cc7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc00:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc04:	89 d8                	mov    eax,ebx
c001cc06:	c1 e0 07             	shl    eax,0x7
c001cc09:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc10:	55                   	push   ebp
c001cc11:	56                   	push   esi
c001cc12:	e8 2b fe ff ff       	call   c001ca42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc17:	5a                   	pop    edx
c001cc18:	83 f8 01             	cmp    eax,0x1
c001cc1b:	59                   	pop    ecx
c001cc1c:	75 21                	jne    c001cc3f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc1e:	50                   	push   eax
c001cc1f:	53                   	push   ebx
c001cc20:	55                   	push   ebp
c001cc21:	56                   	push   esi
c001cc22:	e8 ad fe ff ff       	call   c001cad4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc27:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc2e:	e8 a3 ae fe ff       	call   c0007ad6 <malloc>
c001cc33:	89 c5                	mov    ebp,eax
c001cc35:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc38:	e8 99 10 00 00       	call   c001dcd6 <SATA::SATA()>
c001cc3d:	eb 24                	jmp    c001cc63 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc3f:	83 f8 04             	cmp    eax,0x4
c001cc42:	75 36                	jne    c001cc7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc44:	51                   	push   ecx
c001cc45:	53                   	push   ebx
c001cc46:	55                   	push   ebp
c001cc47:	56                   	push   esi
c001cc48:	e8 87 fe ff ff       	call   c001cad4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc4d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc54:	e8 7d ae fe ff       	call   c0007ad6 <malloc>
c001cc59:	89 c5                	mov    ebp,eax
c001cc5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc5e:	e8 d5 17 00 00       	call   c001e438 <SATAPI::SATAPI()>
c001cc63:	58                   	pop    eax
c001cc64:	5a                   	pop    edx
c001cc65:	55                   	push   ebp
c001cc66:	56                   	push   esi
c001cc67:	e8 7a fd fe ff       	call   c000c9e6 <Device::addChild(Device*)>
c001cc6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc6f:	56                   	push   esi
c001cc70:	6a 00                	push   0x0
c001cc72:	53                   	push   ebx
c001cc73:	55                   	push   ebp
c001cc74:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc77:	83 c4 20             	add    esp,0x20
c001cc7a:	d1 ef                	shr    edi,1
c001cc7c:	43                   	inc    ebx
c001cc7d:	83 fb 20             	cmp    ebx,0x20
c001cc80:	0f 85 72 ff ff ff    	jne    c001cbf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc86:	83 c4 0c             	add    esp,0xc
c001cc89:	5b                   	pop    ebx
c001cc8a:	5e                   	pop    esi
c001cc8b:	5f                   	pop    edi
c001cc8c:	5d                   	pop    ebp
c001cc8d:	c3                   	ret    

c001cc8e <SATABus::open(int, int, void*)>:
c001cc8e:	83 ec 14             	sub    esp,0x14
c001cc91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc95:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc9b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cca1:	52                   	push   edx
c001cca2:	50                   	push   eax
c001cca3:	e8 3c ff ff ff       	call   c001cbe4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cca8:	31 c0                	xor    eax,eax
c001ccaa:	83 c4 1c             	add    esp,0x1c
c001ccad:	c3                   	ret    

c001ccae <ATA::close(int, int, void*)>:
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ccbb:	85 c0                	test   eax,eax
c001ccbd:	74 0c                	je     c001cccb <ATA::close(int, int, void*)+0x1d>
c001ccbf:	83 ec 0c             	sub    esp,0xc
c001ccc2:	8b 10                	mov    edx,DWORD PTR [eax]
c001ccc4:	50                   	push   eax
c001ccc5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	31 c0                	xor    eax,eax
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	c3                   	ret    
c001ccd1:	90                   	nop

c001ccd2 <ATA::powerSaving(PowerSavingLevel)>:
c001ccd2:	c3                   	ret    
c001ccd3:	90                   	nop

c001ccd4 <ATA::ATA()>:
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccdb:	83 ec 04             	sub    esp,0x4
c001ccde:	68 00 02 00 00       	push   0x200
c001cce3:	68 d1 34 02 c0       	push   0xc00234d1
c001cce8:	50                   	push   eax
c001cce9:	e8 c4 00 ff ff       	call   c000cdb2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	ba 44 34 02 c0       	mov    edx,0xc0023444
c001ccf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfa:	89 10                	mov    DWORD PTR [eax],edx
c001ccfc:	90                   	nop
c001ccfd:	83 c4 0c             	add    esp,0xc
c001cd00:	c3                   	ret    
c001cd01:	90                   	nop

c001cd02 <ATA::flush(bool)>:
c001cd02:	53                   	push   ebx
c001cd03:	83 ec 08             	sub    esp,0x8
c001cd06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd0f:	83 f8 01             	cmp    eax,0x1
c001cd12:	19 c0                	sbb    eax,eax
c001cd14:	83 e0 fd             	and    eax,0xfffffffd
c001cd17:	05 ea 00 00 00       	add    eax,0xea
c001cd1c:	50                   	push   eax
c001cd1d:	6a 07                	push   0x7
c001cd1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd26:	50                   	push   eax
c001cd27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd2d:	e8 16 f1 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd32:	83 c4 0c             	add    esp,0xc
c001cd35:	6a 00                	push   0x0
c001cd37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd3e:	50                   	push   eax
c001cd3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd45:	e8 e6 fb ff ff       	call   c001c930 <IDE::polling(unsigned char, unsigned int)>
c001cd4a:	83 c4 18             	add    esp,0x18
c001cd4d:	5b                   	pop    ebx
c001cd4e:	c3                   	ret    
c001cd4f:	90                   	nop

c001cd50 <ATA::readyForCommand()>:
c001cd50:	56                   	push   esi
c001cd51:	53                   	push   ebx
c001cd52:	53                   	push   ebx
c001cd53:	31 db                	xor    ebx,ebx
c001cd55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd59:	51                   	push   ecx
c001cd5a:	6a 0c                	push   0xc
c001cd5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd63:	50                   	push   eax
c001cd64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd6a:	e8 99 f1 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	a8 88                	test   al,0x88
c001cd74:	74 1f                	je     c001cd95 <ATA::readyForCommand()+0x45>
c001cd76:	43                   	inc    ebx
c001cd77:	83 fb 63             	cmp    ebx,0x63
c001cd7a:	7e dd                	jle    c001cd59 <ATA::readyForCommand()+0x9>
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	6a 0a                	push   0xa
c001cd81:	e8 26 97 ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001cd86:	83 c4 10             	add    esp,0x10
c001cd89:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd8f:	75 c8                	jne    c001cd59 <ATA::readyForCommand()+0x9>
c001cd91:	31 c0                	xor    eax,eax
c001cd93:	eb 02                	jmp    c001cd97 <ATA::readyForCommand()+0x47>
c001cd95:	b0 01                	mov    al,0x1
c001cd97:	5a                   	pop    edx
c001cd98:	5b                   	pop    ebx
c001cd99:	5e                   	pop    esi
c001cd9a:	c3                   	ret    
c001cd9b:	90                   	nop

c001cd9c <ATA::access(unsigned long long, int, void*, bool)>:
c001cd9c:	55                   	push   ebp
c001cd9d:	57                   	push   edi
c001cd9e:	56                   	push   esi
c001cd9f:	53                   	push   ebx
c001cda0:	83 ec 2c             	sub    esp,0x2c
c001cda3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cda7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cdab:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cdaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdb3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cdb7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cdbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cdbf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cdc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdc9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdcf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdd3:	c1 e0 06             	shl    eax,0x6
c001cdd6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdde:	74 5d                	je     c001ce3d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cde0:	89 fa                	mov    edx,edi
c001cde2:	89 f0                	mov    eax,esi
c001cde4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cde8:	c1 ea 1c             	shr    edx,0x1c
c001cdeb:	89 d1                	mov    ecx,edx
c001cded:	09 c1                	or     ecx,eax
c001cdef:	74 25                	je     c001ce16 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cdf1:	31 ed                	xor    ebp,ebp
c001cdf3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cdfa:	89 fa                	mov    edx,edi
c001cdfc:	89 f0                	mov    eax,esi
c001cdfe:	0f ad d0             	shrd   eax,edx,cl
c001ce01:	d3 ea                	shr    edx,cl
c001ce03:	f6 c1 20             	test   cl,0x20
c001ce06:	74 02                	je     c001ce0a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce08:	89 d0                	mov    eax,edx
c001ce0a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce0e:	45                   	inc    ebp
c001ce0f:	83 fd 06             	cmp    ebp,0x6
c001ce12:	75 df                	jne    c001cdf3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce14:	eb 76                	jmp    c001ce8c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ce16:	89 f0                	mov    eax,esi
c001ce18:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce1d:	89 fa                	mov    edx,edi
c001ce1f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce26:	0f ac d0 10          	shrd   eax,edx,0x10
c001ce2a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce2f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce33:	c1 ee 18             	shr    esi,0x18
c001ce36:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce3b:	eb 56                	jmp    c001ce93 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce3d:	6a 00                	push   0x0
c001ce3f:	6a 3f                	push   0x3f
c001ce41:	57                   	push   edi
c001ce42:	56                   	push   esi
c001ce43:	e8 a8 2a 00 00       	call   c001f8f0 <__umoddi3>
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	40                   	inc    eax
c001ce4c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce50:	6a 00                	push   0x0
c001ce52:	68 f0 03 00 00       	push   0x3f0
c001ce57:	57                   	push   edi
c001ce58:	56                   	push   esi
c001ce59:	e8 92 29 00 00       	call   c001f7f0 <__udivdi3>
c001ce5e:	83 c4 10             	add    esp,0x10
c001ce61:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce66:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce6d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce72:	6a 00                	push   0x0
c001ce74:	6a 3f                	push   0x3f
c001ce76:	57                   	push   edi
c001ce77:	56                   	push   esi
c001ce78:	e8 73 29 00 00       	call   c001f7f0 <__udivdi3>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	83 e0 0f             	and    eax,0xf
c001ce83:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ce88:	89 c6                	mov    esi,eax
c001ce8a:	eb 07                	jmp    c001ce93 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce8c:	31 f6                	xor    esi,esi
c001ce8e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ce93:	bf 01 00 00 00       	mov    edi,0x1
c001ce98:	50                   	push   eax
c001ce99:	6a 00                	push   0x0
c001ce9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea2:	50                   	push   eax
c001cea3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cea7:	e8 a4 f1 ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001ceac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceaf:	e8 9c fe ff ff       	call   c001cd50 <ATA::readyForCommand()>
c001ceb4:	83 c4 10             	add    esp,0x10
c001ceb7:	84 c0                	test   al,al
c001ceb9:	0f 84 69 02 00 00    	je     c001d128 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cebf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cecb:	c1 e0 04             	shl    eax,0x4
c001cece:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ced5:	09 c6                	or     esi,eax
c001ced7:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cedc:	75 05                	jne    c001cee3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cede:	83 ce a0             	or     esi,0xffffffa0
c001cee1:	eb 03                	jmp    c001cee6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cee3:	83 ce e0             	or     esi,0xffffffe0
c001cee6:	89 f0                	mov    eax,esi
c001cee8:	0f b6 f0             	movzx  esi,al
c001ceeb:	56                   	push   esi
c001ceec:	6a 06                	push   0x6
c001ceee:	51                   	push   ecx
c001ceef:	52                   	push   edx
c001cef0:	e8 53 ef ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cef5:	83 c4 10             	add    esp,0x10
c001cef8:	6a 00                	push   0x0
c001cefa:	6a 01                	push   0x1
c001cefc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf03:	50                   	push   eax
c001cf04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf0a:	e8 39 ef ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0f:	83 c4 10             	add    esp,0x10
c001cf12:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cf17:	83 f8 02             	cmp    eax,0x2
c001cf1a:	75 6e                	jne    c001cf8a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf1c:	6a 00                	push   0x0
c001cf1e:	6a 08                	push   0x8
c001cf20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf27:	50                   	push   eax
c001cf28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf2e:	e8 15 ef ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf33:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf38:	50                   	push   eax
c001cf39:	6a 09                	push   0x9
c001cf3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf42:	50                   	push   eax
c001cf43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf49:	e8 fa ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4e:	83 c4 20             	add    esp,0x20
c001cf51:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf56:	50                   	push   eax
c001cf57:	6a 0a                	push   0xa
c001cf59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf60:	50                   	push   eax
c001cf61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf67:	e8 dc ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf71:	50                   	push   eax
c001cf72:	6a 0b                	push   0xb
c001cf74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf7b:	50                   	push   eax
c001cf7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf82:	e8 c1 ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf87:	83 c4 20             	add    esp,0x20
c001cf8a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf8f:	50                   	push   eax
c001cf90:	6a 02                	push   0x2
c001cf92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf99:	50                   	push   eax
c001cf9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa0:	e8 a3 ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfa5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cfaa:	50                   	push   eax
c001cfab:	6a 03                	push   0x3
c001cfad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfb4:	50                   	push   eax
c001cfb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfbb:	e8 88 ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc0:	83 c4 20             	add    esp,0x20
c001cfc3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cfc8:	50                   	push   eax
c001cfc9:	6a 04                	push   0x4
c001cfcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfd2:	50                   	push   eax
c001cfd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfd9:	e8 6a ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfde:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cfe3:	50                   	push   eax
c001cfe4:	6a 05                	push   0x5
c001cfe6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfed:	50                   	push   eax
c001cfee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff4:	e8 4f ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff9:	83 c4 20             	add    esp,0x20
c001cffc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d001:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d006:	74 11                	je     c001d019 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001d008:	b8 30 00 00 00       	mov    eax,0x30
c001d00d:	83 fa 02             	cmp    edx,0x2
c001d010:	75 16                	jne    c001d028 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d012:	b8 34 00 00 00       	mov    eax,0x34
c001d017:	eb 0f                	jmp    c001d028 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d019:	b8 20 00 00 00       	mov    eax,0x20
c001d01e:	83 fa 02             	cmp    edx,0x2
c001d021:	75 05                	jne    c001d028 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d023:	b8 24 00 00 00       	mov    eax,0x24
c001d028:	50                   	push   eax
c001d029:	6a 07                	push   0x7
c001d02b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d032:	50                   	push   eax
c001d033:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d039:	e8 0a ee ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d03e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d042:	83 c4 10             	add    esp,0x10
c001d045:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d04a:	85 f6                	test   esi,esi
c001d04c:	0f 84 b3 00 00 00    	je     c001d105 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d052:	50                   	push   eax
c001d053:	6a 01                	push   0x1
c001d055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d05c:	50                   	push   eax
c001d05d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d063:	e8 c8 f8 ff ff       	call   c001c930 <IDE::polling(unsigned char, unsigned int)>
c001d068:	83 c4 10             	add    esp,0x10
c001d06b:	0f b6 f8             	movzx  edi,al
c001d06e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d074:	85 ff                	test   edi,edi
c001d076:	74 1d                	je     c001d095 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d078:	57                   	push   edi
c001d079:	0f b6 d2             	movzx  edx,dl
c001d07c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d083:	50                   	push   eax
c001d084:	52                   	push   edx
c001d085:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d08b:	e8 e6 f7 ff ff       	call   c001c876 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d090:	e9 90 00 00 00       	jmp    c001d125 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d095:	85 ed                	test   ebp,ebp
c001d097:	74 3b                	je     c001d0d4 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d099:	31 c9                	xor    ecx,ecx
c001d09b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d09f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d0a3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d0a7:	50                   	push   eax
c001d0a8:	50                   	push   eax
c001d0a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0b0:	50                   	push   eax
c001d0b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0b7:	e8 7a ed ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d0bc:	89 c2                	mov    edx,eax
c001d0be:	89 f8                	mov    eax,edi
c001d0c0:	66 ef                	out    dx,ax
c001d0c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d0c6:	83 c4 10             	add    esp,0x10
c001d0c9:	41                   	inc    ecx
c001d0ca:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d0d0:	75 c9                	jne    c001d09b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d0d2:	eb 23                	jmp    c001d0f7 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d0d4:	0f b6 d2             	movzx  edx,dl
c001d0d7:	51                   	push   ecx
c001d0d8:	51                   	push   ecx
c001d0d9:	52                   	push   edx
c001d0da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0e0:	e8 51 ed ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d0e5:	b9 00 01 00 00       	mov    ecx,0x100
c001d0ea:	89 c2                	mov    edx,eax
c001d0ec:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0f0:	fc                   	cld    
c001d0f1:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0ff:	4e                   	dec    esi
c001d100:	e9 45 ff ff ff       	jmp    c001d04a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d105:	31 ff                	xor    edi,edi
c001d107:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d10c:	74 1a                	je     c001d128 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d10e:	50                   	push   eax
c001d10f:	50                   	push   eax
c001d110:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d115:	83 f8 02             	cmp    eax,0x2
c001d118:	0f 94 c0             	sete   al
c001d11b:	0f b6 c0             	movzx  eax,al
c001d11e:	50                   	push   eax
c001d11f:	53                   	push   ebx
c001d120:	e8 dd fb ff ff       	call   c001cd02 <ATA::flush(bool)>
c001d125:	83 c4 10             	add    esp,0x10
c001d128:	83 c4 2c             	add    esp,0x2c
c001d12b:	89 f8                	mov    eax,edi
c001d12d:	5b                   	pop    ebx
c001d12e:	5e                   	pop    esi
c001d12f:	5f                   	pop    edi
c001d130:	5d                   	pop    ebp
c001d131:	c3                   	ret    

c001d132 <ATA::detectCHS()>:
c001d132:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d136:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d13c:	c1 e0 06             	shl    eax,0x6
c001d13f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d145:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d14f:	c7 44 24 04 28 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023428
c001d157:	e9 3b 45 ff ff       	jmp    c0011697 <KePanic(char const*)>

c001d15c <ATA::open(int, int, void*)>:
c001d15c:	53                   	push   ebx
c001d15d:	83 ec 08             	sub    esp,0x8
c001d160:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d164:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d168:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d16c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d172:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d178:	c1 e0 06             	shl    eax,0x6
c001d17b:	01 d0                	add    eax,edx
c001d17d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d184:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d18a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d191:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d19b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1a8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1af:	75 0c                	jne    c001d1bd <ATA::open(int, int, void*)+0x61>
c001d1b1:	83 ec 0c             	sub    esp,0xc
c001d1b4:	53                   	push   ebx
c001d1b5:	e8 78 ff ff ff       	call   c001d132 <ATA::detectCHS()>
c001d1ba:	83 c4 10             	add    esp,0x10
c001d1bd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1c3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1c9:	c1 e0 06             	shl    eax,0x6
c001d1cc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1dd:	d1 e8                	shr    eax,1
c001d1df:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1e5:	6a 04                	push   0x4
c001d1e7:	6a 0c                	push   0xc
c001d1e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1f0:	50                   	push   eax
c001d1f1:	52                   	push   edx
c001d1f2:	e8 51 ec ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1f7:	90                   	nop
c001d1f8:	90                   	nop
c001d1f9:	6a 00                	push   0x0
c001d1fb:	6a 0c                	push   0xc
c001d1fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d204:	50                   	push   eax
c001d205:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d20b:	e8 38 ec ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d210:	83 c4 14             	add    esp,0x14
c001d213:	53                   	push   ebx
c001d214:	e8 01 fc fe ff       	call   c000ce1a <PhysicalDisk::startCache()>
c001d219:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d21c:	e8 3d 0e ff ff       	call   c000e05e <createPartitionsForDisk(PhysicalDisk*)>
c001d221:	31 c0                	xor    eax,eax
c001d223:	83 c4 18             	add    esp,0x18
c001d226:	5b                   	pop    ebx
c001d227:	c3                   	ret    

c001d228 <combineCharAndColour(char, unsigned char)>:
c001d228:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d22d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d233:	c1 e0 08             	shl    eax,0x8
c001d236:	09 d0                	or     eax,edx
c001d238:	c3                   	ret    

c001d239 <combineColours(unsigned char, unsigned char)>:
c001d239:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d23e:	c1 e0 04             	shl    eax,0x4
c001d241:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d245:	c3                   	ret    

c001d246 <ATA::read(unsigned long long, int, void*)>:
c001d246:	55                   	push   ebp
c001d247:	57                   	push   edi
c001d248:	56                   	push   esi
c001d249:	be 04 00 00 00       	mov    esi,0x4
c001d24e:	53                   	push   ebx
c001d24f:	83 ec 0c             	sub    esp,0xc
c001d252:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d256:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d25a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d25d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d261:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d265:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d26b:	0f 87 a1 01 00 00    	ja     c001d412 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d271:	be 06 00 00 00       	mov    esi,0x6
c001d276:	85 c9                	test   ecx,ecx
c001d278:	0f 84 94 01 00 00    	je     c001d412 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d27e:	55                   	push   ebp
c001d27f:	55                   	push   ebp
c001d280:	6a 00                	push   0x0
c001d282:	51                   	push   ecx
c001d283:	53                   	push   ebx
c001d284:	52                   	push   edx
c001d285:	50                   	push   eax
c001d286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d28a:	e8 0d fb ff ff       	call   c001cd9c <ATA::access(unsigned long long, int, void*, bool)>
c001d28f:	83 c4 20             	add    esp,0x20
c001d292:	89 c6                	mov    esi,eax
c001d294:	85 c0                	test   eax,eax
c001d296:	0f 85 71 01 00 00    	jne    c001d40d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d29c:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2a2:	89 da                	mov    edx,ebx
c001d2a4:	50                   	push   eax
c001d2a5:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2aa:	50                   	push   eax
c001d2ab:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2b1:	6a 0f                	push   0xf
c001d2b3:	6a 00                	push   0x0
c001d2b5:	e8 7f ff ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001d2ba:	59                   	pop    ecx
c001d2bb:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2c0:	5b                   	pop    ebx
c001d2c1:	0f b6 d8             	movzx  ebx,al
c001d2c4:	89 d0                	mov    eax,edx
c001d2c6:	53                   	push   ebx
c001d2c7:	99                   	cdq    
c001d2c8:	f7 fd                	idiv   ebp
c001d2ca:	99                   	cdq    
c001d2cb:	f7 f9                	idiv   ecx
c001d2cd:	83 c2 30             	add    edx,0x30
c001d2d0:	0f b6 d2             	movzx  edx,dl
c001d2d3:	52                   	push   edx
c001d2d4:	e8 4f ff ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d2d9:	5f                   	pop    edi
c001d2da:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2df:	5a                   	pop    edx
c001d2e0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2e6:	53                   	push   ebx
c001d2e7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2ec:	99                   	cdq    
c001d2ed:	f7 ff                	idiv   edi
c001d2ef:	99                   	cdq    
c001d2f0:	f7 f9                	idiv   ecx
c001d2f2:	8d 42 30             	lea    eax,[edx+0x30]
c001d2f5:	0f b6 c0             	movzx  eax,al
c001d2f8:	50                   	push   eax
c001d2f9:	e8 2a ff ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d2fe:	5f                   	pop    edi
c001d2ff:	bf 64 00 00 00       	mov    edi,0x64
c001d304:	5a                   	pop    edx
c001d305:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d30b:	53                   	push   ebx
c001d30c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d311:	99                   	cdq    
c001d312:	f7 ff                	idiv   edi
c001d314:	99                   	cdq    
c001d315:	f7 f9                	idiv   ecx
c001d317:	8d 42 30             	lea    eax,[edx+0x30]
c001d31a:	0f b6 c0             	movzx  eax,al
c001d31d:	50                   	push   eax
c001d31e:	e8 05 ff ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d323:	5a                   	pop    edx
c001d324:	5a                   	pop    edx
c001d325:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d32b:	53                   	push   ebx
c001d32c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d331:	99                   	cdq    
c001d332:	f7 f9                	idiv   ecx
c001d334:	99                   	cdq    
c001d335:	f7 f9                	idiv   ecx
c001d337:	8d 42 30             	lea    eax,[edx+0x30]
c001d33a:	0f b6 c0             	movzx  eax,al
c001d33d:	50                   	push   eax
c001d33e:	e8 e5 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d343:	5a                   	pop    edx
c001d344:	5a                   	pop    edx
c001d345:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d34b:	53                   	push   ebx
c001d34c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d351:	99                   	cdq    
c001d352:	f7 f9                	idiv   ecx
c001d354:	83 c2 30             	add    edx,0x30
c001d357:	0f b6 d2             	movzx  edx,dl
c001d35a:	52                   	push   edx
c001d35b:	e8 c8 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d360:	5a                   	pop    edx
c001d361:	5a                   	pop    edx
c001d362:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d368:	53                   	push   ebx
c001d369:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d36e:	99                   	cdq    
c001d36f:	f7 fd                	idiv   ebp
c001d371:	99                   	cdq    
c001d372:	f7 f9                	idiv   ecx
c001d374:	8d 42 30             	lea    eax,[edx+0x30]
c001d377:	0f b6 c0             	movzx  eax,al
c001d37a:	50                   	push   eax
c001d37b:	e8 a8 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d380:	5d                   	pop    ebp
c001d381:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d386:	5a                   	pop    edx
c001d387:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d38d:	53                   	push   ebx
c001d38e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d393:	99                   	cdq    
c001d394:	f7 fd                	idiv   ebp
c001d396:	99                   	cdq    
c001d397:	f7 f9                	idiv   ecx
c001d399:	8d 42 30             	lea    eax,[edx+0x30]
c001d39c:	0f b6 c0             	movzx  eax,al
c001d39f:	50                   	push   eax
c001d3a0:	e8 83 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d3a5:	5d                   	pop    ebp
c001d3a6:	5a                   	pop    edx
c001d3a7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3ad:	53                   	push   ebx
c001d3ae:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3b3:	99                   	cdq    
c001d3b4:	f7 ff                	idiv   edi
c001d3b6:	99                   	cdq    
c001d3b7:	f7 f9                	idiv   ecx
c001d3b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3bc:	0f b6 c0             	movzx  eax,al
c001d3bf:	50                   	push   eax
c001d3c0:	e8 63 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d3c5:	5f                   	pop    edi
c001d3c6:	5d                   	pop    ebp
c001d3c7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3cd:	53                   	push   ebx
c001d3ce:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3d3:	99                   	cdq    
c001d3d4:	f7 f9                	idiv   ecx
c001d3d6:	99                   	cdq    
c001d3d7:	f7 f9                	idiv   ecx
c001d3d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3dc:	0f b6 c0             	movzx  eax,al
c001d3df:	50                   	push   eax
c001d3e0:	e8 43 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d3e5:	5a                   	pop    edx
c001d3e6:	5f                   	pop    edi
c001d3e7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3ed:	53                   	push   ebx
c001d3ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3f3:	99                   	cdq    
c001d3f4:	f7 f9                	idiv   ecx
c001d3f6:	83 c2 30             	add    edx,0x30
c001d3f9:	0f b6 d2             	movzx  edx,dl
c001d3fc:	52                   	push   edx
c001d3fd:	e8 26 fe ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d402:	83 c4 10             	add    esp,0x10
c001d405:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d40b:	eb 05                	jmp    c001d412 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d40d:	be 01 00 00 00       	mov    esi,0x1
c001d412:	83 c4 0c             	add    esp,0xc
c001d415:	89 f0                	mov    eax,esi
c001d417:	5b                   	pop    ebx
c001d418:	5e                   	pop    esi
c001d419:	5f                   	pop    edi
c001d41a:	5d                   	pop    ebp
c001d41b:	c3                   	ret    

c001d41c <ATA::write(unsigned long long, int, void*)>:
c001d41c:	55                   	push   ebp
c001d41d:	57                   	push   edi
c001d41e:	56                   	push   esi
c001d41f:	be 04 00 00 00       	mov    esi,0x4
c001d424:	53                   	push   ebx
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d42c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d430:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d433:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d437:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d43b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d441:	0f 87 9c 01 00 00    	ja     c001d5e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d447:	be 06 00 00 00       	mov    esi,0x6
c001d44c:	85 c9                	test   ecx,ecx
c001d44e:	0f 84 8f 01 00 00    	je     c001d5e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d454:	55                   	push   ebp
c001d455:	55                   	push   ebp
c001d456:	6a 01                	push   0x1
c001d458:	51                   	push   ecx
c001d459:	53                   	push   ebx
c001d45a:	52                   	push   edx
c001d45b:	50                   	push   eax
c001d45c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d460:	e8 37 f9 ff ff       	call   c001cd9c <ATA::access(unsigned long long, int, void*, bool)>
c001d465:	83 c4 20             	add    esp,0x20
c001d468:	89 c6                	mov    esi,eax
c001d46a:	85 c0                	test   eax,eax
c001d46c:	0f 85 6c 01 00 00    	jne    c001d5de <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d472:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d478:	bd 10 27 00 00       	mov    ebp,0x2710
c001d47d:	50                   	push   eax
c001d47e:	50                   	push   eax
c001d47f:	6a 0f                	push   0xf
c001d481:	6a 00                	push   0x0
c001d483:	e8 b1 fd ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001d488:	5a                   	pop    edx
c001d489:	0f b6 d8             	movzx  ebx,al
c001d48c:	59                   	pop    ecx
c001d48d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d492:	53                   	push   ebx
c001d493:	b9 0a 00 00 00       	mov    ecx,0xa
c001d498:	99                   	cdq    
c001d499:	f7 fd                	idiv   ebp
c001d49b:	99                   	cdq    
c001d49c:	f7 f9                	idiv   ecx
c001d49e:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a1:	0f b6 c0             	movzx  eax,al
c001d4a4:	50                   	push   eax
c001d4a5:	e8 7e fd ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d4aa:	5f                   	pop    edi
c001d4ab:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4b0:	5a                   	pop    edx
c001d4b1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4b7:	53                   	push   ebx
c001d4b8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4bd:	99                   	cdq    
c001d4be:	f7 ff                	idiv   edi
c001d4c0:	99                   	cdq    
c001d4c1:	f7 f9                	idiv   ecx
c001d4c3:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c6:	0f b6 c0             	movzx  eax,al
c001d4c9:	50                   	push   eax
c001d4ca:	e8 59 fd ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d4cf:	5f                   	pop    edi
c001d4d0:	bf 64 00 00 00       	mov    edi,0x64
c001d4d5:	5a                   	pop    edx
c001d4d6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4dc:	53                   	push   ebx
c001d4dd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4e2:	99                   	cdq    
c001d4e3:	f7 ff                	idiv   edi
c001d4e5:	99                   	cdq    
c001d4e6:	f7 f9                	idiv   ecx
c001d4e8:	8d 42 30             	lea    eax,[edx+0x30]
c001d4eb:	0f b6 c0             	movzx  eax,al
c001d4ee:	50                   	push   eax
c001d4ef:	e8 34 fd ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d4f4:	5a                   	pop    edx
c001d4f5:	5a                   	pop    edx
c001d4f6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4fc:	53                   	push   ebx
c001d4fd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d502:	99                   	cdq    
c001d503:	f7 f9                	idiv   ecx
c001d505:	99                   	cdq    
c001d506:	f7 f9                	idiv   ecx
c001d508:	8d 42 30             	lea    eax,[edx+0x30]
c001d50b:	0f b6 c0             	movzx  eax,al
c001d50e:	50                   	push   eax
c001d50f:	e8 14 fd ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d514:	5a                   	pop    edx
c001d515:	5a                   	pop    edx
c001d516:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d51c:	53                   	push   ebx
c001d51d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d522:	99                   	cdq    
c001d523:	f7 f9                	idiv   ecx
c001d525:	8d 42 30             	lea    eax,[edx+0x30]
c001d528:	0f b6 c0             	movzx  eax,al
c001d52b:	50                   	push   eax
c001d52c:	e8 f7 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d531:	5a                   	pop    edx
c001d532:	5a                   	pop    edx
c001d533:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d539:	53                   	push   ebx
c001d53a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d53f:	99                   	cdq    
c001d540:	f7 fd                	idiv   ebp
c001d542:	99                   	cdq    
c001d543:	f7 f9                	idiv   ecx
c001d545:	8d 42 30             	lea    eax,[edx+0x30]
c001d548:	0f b6 c0             	movzx  eax,al
c001d54b:	50                   	push   eax
c001d54c:	e8 d7 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d551:	5d                   	pop    ebp
c001d552:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d557:	5a                   	pop    edx
c001d558:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d55e:	53                   	push   ebx
c001d55f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d564:	99                   	cdq    
c001d565:	f7 fd                	idiv   ebp
c001d567:	99                   	cdq    
c001d568:	f7 f9                	idiv   ecx
c001d56a:	8d 42 30             	lea    eax,[edx+0x30]
c001d56d:	0f b6 c0             	movzx  eax,al
c001d570:	50                   	push   eax
c001d571:	e8 b2 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d576:	5d                   	pop    ebp
c001d577:	5a                   	pop    edx
c001d578:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d57e:	53                   	push   ebx
c001d57f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d584:	99                   	cdq    
c001d585:	f7 ff                	idiv   edi
c001d587:	99                   	cdq    
c001d588:	f7 f9                	idiv   ecx
c001d58a:	8d 42 30             	lea    eax,[edx+0x30]
c001d58d:	0f b6 c0             	movzx  eax,al
c001d590:	50                   	push   eax
c001d591:	e8 92 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d596:	5f                   	pop    edi
c001d597:	5d                   	pop    ebp
c001d598:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d59e:	53                   	push   ebx
c001d59f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5a4:	99                   	cdq    
c001d5a5:	f7 f9                	idiv   ecx
c001d5a7:	99                   	cdq    
c001d5a8:	f7 f9                	idiv   ecx
c001d5aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d5ad:	0f b6 c0             	movzx  eax,al
c001d5b0:	50                   	push   eax
c001d5b1:	e8 72 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d5b6:	5a                   	pop    edx
c001d5b7:	5f                   	pop    edi
c001d5b8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5be:	53                   	push   ebx
c001d5bf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5c4:	99                   	cdq    
c001d5c5:	f7 f9                	idiv   ecx
c001d5c7:	83 c2 30             	add    edx,0x30
c001d5ca:	0f b6 d2             	movzx  edx,dl
c001d5cd:	52                   	push   edx
c001d5ce:	e8 55 fc ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5dc:	eb 05                	jmp    c001d5e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5de:	be 01 00 00 00       	mov    esi,0x1
c001d5e3:	83 c4 0c             	add    esp,0xc
c001d5e6:	89 f0                	mov    eax,esi
c001d5e8:	5b                   	pop    ebx
c001d5e9:	5e                   	pop    esi
c001d5ea:	5f                   	pop    edi
c001d5eb:	5d                   	pop    ebp
c001d5ec:	c3                   	ret    
c001d5ed:	90                   	nop

c001d5ee <ATAPI::write(unsigned long long, int, void*)>:
c001d5ee:	b8 03 00 00 00       	mov    eax,0x3
c001d5f3:	c3                   	ret    

c001d5f4 <ATAPI::close(int, int, void*)>:
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d601:	85 c0                	test   eax,eax
c001d603:	74 0c                	je     c001d611 <ATAPI::close(int, int, void*)+0x1d>
c001d605:	83 ec 0c             	sub    esp,0xc
c001d608:	8b 10                	mov    edx,DWORD PTR [eax]
c001d60a:	50                   	push   eax
c001d60b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d60e:	83 c4 10             	add    esp,0x10
c001d611:	31 c0                	xor    eax,eax
c001d613:	83 c4 0c             	add    esp,0xc
c001d616:	c3                   	ret    
c001d617:	90                   	nop

c001d618 <ATAPI::ATAPI()>:
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	83 ec 04             	sub    esp,0x4
c001d622:	68 00 08 00 00       	push   0x800
c001d627:	68 71 35 02 c0       	push   0xc0023571
c001d62c:	50                   	push   eax
c001d62d:	e8 80 f7 fe ff       	call   c000cdb2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	89 10                	mov    DWORD PTR [eax],edx
c001d640:	90                   	nop
c001d641:	83 c4 0c             	add    esp,0xc
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <ATAPI::readyForCommand()>:
c001d646:	56                   	push   esi
c001d647:	53                   	push   ebx
c001d648:	53                   	push   ebx
c001d649:	31 db                	xor    ebx,ebx
c001d64b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d64f:	51                   	push   ecx
c001d650:	6a 0c                	push   0xc
c001d652:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d659:	50                   	push   eax
c001d65a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d660:	e8 a3 e8 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	a8 88                	test   al,0x88
c001d66a:	74 25                	je     c001d691 <ATAPI::readyForCommand()+0x4b>
c001d66c:	43                   	inc    ebx
c001d66d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d673:	7e da                	jle    c001d64f <ATAPI::readyForCommand()+0x9>
c001d675:	83 ec 0c             	sub    esp,0xc
c001d678:	68 5e 01 00 00       	push   0x15e
c001d67d:	e8 2a 8e ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d68b:	75 c2                	jne    c001d64f <ATAPI::readyForCommand()+0x9>
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	eb 02                	jmp    c001d693 <ATAPI::readyForCommand()+0x4d>
c001d691:	b0 01                	mov    al,0x1
c001d693:	5a                   	pop    edx
c001d694:	5b                   	pop    ebx
c001d695:	5e                   	pop    esi
c001d696:	c3                   	ret    
c001d697:	90                   	nop

c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d698:	55                   	push   ebp
c001d699:	57                   	push   edi
c001d69a:	56                   	push   esi
c001d69b:	53                   	push   ebx
c001d69c:	83 ec 20             	sub    esp,0x20
c001d69f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6a3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6a7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6ab:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d6af:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6b3:	6a 01                	push   0x1
c001d6b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6bc:	50                   	push   eax
c001d6bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c3:	e8 88 e9 ff ff       	call   c001c050 <IDE::enableIRQs(unsigned char, bool)>
c001d6c8:	5e                   	pop    esi
c001d6c9:	58                   	pop    eax
c001d6ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6d1:	50                   	push   eax
c001d6d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d8:	e8 45 e7 ff ff       	call   c001be22 <IDE::prepareInterrupt(unsigned char)>
c001d6dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6e0:	e8 61 ff ff ff       	call   c001d646 <ATAPI::readyForCommand()>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	84 c0                	test   al,al
c001d6ea:	75 0a                	jne    c001d6f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d6ec:	bb 01 00 00 00       	mov    ebx,0x1
c001d6f1:	e9 60 02 00 00       	jmp    c001d956 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6f6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6fc:	c1 e0 04             	shl    eax,0x4
c001d6ff:	0f b6 c0             	movzx  eax,al
c001d702:	50                   	push   eax
c001d703:	6a 06                	push   0x6
c001d705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d70c:	50                   	push   eax
c001d70d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d713:	e8 30 e7 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d718:	6a 00                	push   0x0
c001d71a:	6a 01                	push   0x1
c001d71c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d723:	50                   	push   eax
c001d724:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72a:	e8 19 e7 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72f:	83 c4 20             	add    esp,0x20
c001d732:	0f b6 c3             	movzx  eax,bl
c001d735:	0f b6 df             	movzx  ebx,bh
c001d738:	50                   	push   eax
c001d739:	6a 04                	push   0x4
c001d73b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d742:	50                   	push   eax
c001d743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d749:	e8 fa e6 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d74e:	53                   	push   ebx
c001d74f:	6a 05                	push   0x5
c001d751:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d758:	50                   	push   eax
c001d759:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d75f:	e8 e4 e6 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d764:	83 c4 20             	add    esp,0x20
c001d767:	68 a0 00 00 00       	push   0xa0
c001d76c:	6a 07                	push   0x7
c001d76e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d775:	50                   	push   eax
c001d776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d77c:	e8 c7 e6 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d781:	83 c4 0c             	add    esp,0xc
c001d784:	6a 01                	push   0x1
c001d786:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d78d:	50                   	push   eax
c001d78e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d794:	e8 97 f1 ff ff       	call   c001c930 <IDE::polling(unsigned char, unsigned int)>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	0f b6 d8             	movzx  ebx,al
c001d79f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7a5:	85 db                	test   ebx,ebx
c001d7a7:	74 20                	je     c001d7c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d7a9:	53                   	push   ebx
c001d7aa:	0f b6 c0             	movzx  eax,al
c001d7ad:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7b4:	52                   	push   edx
c001d7b5:	50                   	push   eax
c001d7b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7bc:	e8 b5 f0 ff ff       	call   c001c876 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	e9 8d 01 00 00       	jmp    c001d956 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d7c9:	0f b6 c0             	movzx  eax,al
c001d7cc:	53                   	push   ebx
c001d7cd:	53                   	push   ebx
c001d7ce:	50                   	push   eax
c001d7cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d5:	e8 5c e6 ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d7da:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7de:	b9 06 00 00 00       	mov    ecx,0x6
c001d7e3:	89 c2                	mov    edx,eax
c001d7e5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7e8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7ec:	83 c4 10             	add    esp,0x10
c001d7ef:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d7f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7f8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7fe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d805:	85 db                	test   ebx,ebx
c001d807:	0f 84 ec 00 00 00    	je     c001d8f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d80d:	51                   	push   ecx
c001d80e:	51                   	push   ecx
c001d80f:	52                   	push   edx
c001d810:	50                   	push   eax
c001d811:	e8 a0 e7 ff ff       	call   c001bfb6 <IDE::waitInterrupt(unsigned char)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	84 c0                	test   al,al
c001d81b:	0f 84 cb fe ff ff    	je     c001d6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d821:	56                   	push   esi
c001d822:	56                   	push   esi
c001d823:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d82a:	50                   	push   eax
c001d82b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d831:	e8 ec e5 ff ff       	call   c001be22 <IDE::prepareInterrupt(unsigned char)>
c001d836:	83 c4 0c             	add    esp,0xc
c001d839:	6a 04                	push   0x4
c001d83b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d842:	50                   	push   eax
c001d843:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d849:	e8 ba e6 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001d84e:	83 c4 0c             	add    esp,0xc
c001d851:	89 c6                	mov    esi,eax
c001d853:	6a 05                	push   0x5
c001d855:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d85c:	50                   	push   eax
c001d85d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d863:	e8 a0 e6 ff ff       	call   c001bf08 <IDE::read(unsigned char, unsigned char)>
c001d868:	89 f1                	mov    ecx,esi
c001d86a:	0f b6 c0             	movzx  eax,al
c001d86d:	0f b6 f1             	movzx  esi,cl
c001d870:	c1 e0 08             	shl    eax,0x8
c001d873:	09 c6                	or     esi,eax
c001d875:	d1 fe                	sar    esi,1
c001d877:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d87b:	83 c4 10             	add    esp,0x10
c001d87e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d883:	74 41                	je     c001d8c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d885:	31 c9                	xor    ecx,ecx
c001d887:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d88d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d894:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d898:	75 0a                	jne    c001d8a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d89a:	01 c9                	add    ecx,ecx
c001d89c:	01 cd                	add    ebp,ecx
c001d89e:	4b                   	dec    ebx
c001d89f:	e9 54 ff ff ff       	jmp    c001d7f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d8a4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d8a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8ad:	51                   	push   ecx
c001d8ae:	51                   	push   ecx
c001d8af:	52                   	push   edx
c001d8b0:	50                   	push   eax
c001d8b1:	e8 80 e5 ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d8b6:	89 c2                	mov    edx,eax
c001d8b8:	89 f0                	mov    eax,esi
c001d8ba:	66 ef                	out    dx,ax
c001d8bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	41                   	inc    ecx
c001d8c4:	eb c1                	jmp    c001d887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d8c6:	31 f6                	xor    esi,esi
c001d8c8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8ce:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8d5:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d8d9:	75 06                	jne    c001d8e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d8db:	01 f6                	add    esi,esi
c001d8dd:	01 f5                	add    ebp,esi
c001d8df:	eb bd                	jmp    c001d89e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d8e1:	51                   	push   ecx
c001d8e2:	51                   	push   ecx
c001d8e3:	52                   	push   edx
c001d8e4:	50                   	push   eax
c001d8e5:	e8 4c e5 ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d8ea:	89 c2                	mov    edx,eax
c001d8ec:	66 ed                	in     ax,dx
c001d8ee:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d8f3:	83 c4 10             	add    esp,0x10
c001d8f6:	46                   	inc    esi
c001d8f7:	eb cf                	jmp    c001d8c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d8f9:	51                   	push   ecx
c001d8fa:	51                   	push   ecx
c001d8fb:	52                   	push   edx
c001d8fc:	50                   	push   eax
c001d8fd:	e8 b4 e6 ff ff       	call   c001bfb6 <IDE::waitInterrupt(unsigned char)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	84 c0                	test   al,al
c001d907:	0f 84 df fd ff ff    	je     c001d6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d90d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d912:	52                   	push   edx
c001d913:	52                   	push   edx
c001d914:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d91b:	50                   	push   eax
c001d91c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d922:	e8 fb e4 ff ff       	call   c001be22 <IDE::prepareInterrupt(unsigned char)>
c001d927:	83 c4 10             	add    esp,0x10
c001d92a:	50                   	push   eax
c001d92b:	50                   	push   eax
c001d92c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d933:	50                   	push   eax
c001d934:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d93a:	e8 f7 e4 ff ff       	call   c001be36 <IDE::getBase(unsigned char)>
c001d93f:	8d 50 07             	lea    edx,[eax+0x7]
c001d942:	ec                   	in     al,dx
c001d943:	83 c4 10             	add    esp,0x10
c001d946:	a8 88                	test   al,0x88
c001d948:	74 0a                	je     c001d954 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d94a:	4b                   	dec    ebx
c001d94b:	75 dd                	jne    c001d92a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d94d:	bb 02 00 00 00       	mov    ebx,0x2
c001d952:	eb 02                	jmp    c001d956 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d954:	31 db                	xor    ebx,ebx
c001d956:	83 c4 1c             	add    esp,0x1c
c001d959:	89 d8                	mov    eax,ebx
c001d95b:	5b                   	pop    ebx
c001d95c:	5e                   	pop    esi
c001d95d:	5f                   	pop    edi
c001d95e:	5d                   	pop    ebp
c001d95f:	c3                   	ret    

c001d960 <ATAPI::diskRemoved()>:
c001d960:	53                   	push   ebx
c001d961:	83 ec 14             	sub    esp,0x14
c001d964:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d968:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d96f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d975:	e8 d4 03 ff ff       	call   c000dd4e <LogicalDisk::unmount()>
c001d97a:	58                   	pop    eax
c001d97b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d981:	e8 aa 0d ff ff       	call   c000e730 <VCache::writeWriteBuffer()>
c001d986:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d98c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d990:	83 c4 18             	add    esp,0x18
c001d993:	5b                   	pop    ebx
c001d994:	e9 87 0d ff ff       	jmp    c000e720 <VCache::invalidateReadBuffer()>
c001d999:	90                   	nop

c001d99a <ATAPI::eject()>:
c001d99a:	57                   	push   edi
c001d99b:	b9 03 00 00 00       	mov    ecx,0x3
c001d9a0:	53                   	push   ebx
c001d9a1:	83 ec 14             	sub    esp,0x14
c001d9a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9ac:	fc                   	cld    
c001d9ad:	31 c0                	xor    eax,eax
c001d9af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9b1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9b6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9bb:	50                   	push   eax
c001d9bc:	50                   	push   eax
c001d9bd:	6a 00                	push   0x0
c001d9bf:	6a 00                	push   0x0
c001d9c1:	6a 00                	push   0x0
c001d9c3:	6a 02                	push   0x2
c001d9c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9c9:	50                   	push   eax
c001d9ca:	53                   	push   ebx
c001d9cb:	e8 c8 fc ff ff       	call   c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9d0:	83 c4 14             	add    esp,0x14
c001d9d3:	53                   	push   ebx
c001d9d4:	e8 87 ff ff ff       	call   c001d960 <ATAPI::diskRemoved()>
c001d9d9:	83 c4 24             	add    esp,0x24
c001d9dc:	31 c0                	xor    eax,eax
c001d9de:	5b                   	pop    ebx
c001d9df:	5f                   	pop    edi
c001d9e0:	c3                   	ret    
c001d9e1:	90                   	nop

c001d9e2 <ATAPI::diskInserted()>:
c001d9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9e6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9ed:	c3                   	ret    

c001d9ee <ATAPI::detectMedia()>:
c001d9ee:	56                   	push   esi
c001d9ef:	53                   	push   ebx
c001d9f0:	83 ec 28             	sub    esp,0x28
c001d9f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9f7:	6a 0c                	push   0xc
c001d9f9:	6a 00                	push   0x0
c001d9fb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9ff:	56                   	push   esi
c001da00:	e8 eb 2a fe ff       	call   c00004f0 <memset>
c001da05:	58                   	pop    eax
c001da06:	5a                   	pop    edx
c001da07:	6a 00                	push   0x0
c001da09:	6a 00                	push   0x0
c001da0b:	6a 00                	push   0x0
c001da0d:	6a 00                	push   0x0
c001da0f:	56                   	push   esi
c001da10:	53                   	push   ebx
c001da11:	e8 82 fc ff ff       	call   c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da16:	83 c4 1c             	add    esp,0x1c
c001da19:	6a 0c                	push   0xc
c001da1b:	6a 00                	push   0x0
c001da1d:	56                   	push   esi
c001da1e:	e8 cd 2a fe ff       	call   c00004f0 <memset>
c001da23:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da28:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da2d:	59                   	pop    ecx
c001da2e:	58                   	pop    eax
c001da2f:	6a 01                	push   0x1
c001da31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da35:	50                   	push   eax
c001da36:	6a 00                	push   0x0
c001da38:	6a 12                	push   0x12
c001da3a:	56                   	push   esi
c001da3b:	53                   	push   ebx
c001da3c:	e8 57 fc ff ff       	call   c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da41:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da45:	83 c4 20             	add    esp,0x20
c001da48:	83 e0 7f             	and    eax,0x7f
c001da4b:	83 f8 70             	cmp    eax,0x70
c001da4e:	74 15                	je     c001da65 <ATAPI::detectMedia()+0x77>
c001da50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da57:	75 0c                	jne    c001da65 <ATAPI::detectMedia()+0x77>
c001da59:	83 ec 0c             	sub    esp,0xc
c001da5c:	53                   	push   ebx
c001da5d:	e8 80 ff ff ff       	call   c001d9e2 <ATAPI::diskInserted()>
c001da62:	83 c4 10             	add    esp,0x10
c001da65:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da69:	83 e0 0f             	and    eax,0xf
c001da6c:	83 f8 02             	cmp    eax,0x2
c001da6f:	75 1b                	jne    c001da8c <ATAPI::detectMedia()+0x9e>
c001da71:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da76:	75 2d                	jne    c001daa5 <ATAPI::detectMedia()+0xb7>
c001da78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da7f:	74 24                	je     c001daa5 <ATAPI::detectMedia()+0xb7>
c001da81:	83 ec 0c             	sub    esp,0xc
c001da84:	53                   	push   ebx
c001da85:	e8 d6 fe ff ff       	call   c001d960 <ATAPI::diskRemoved()>
c001da8a:	eb 16                	jmp    c001daa2 <ATAPI::detectMedia()+0xb4>
c001da8c:	85 c0                	test   eax,eax
c001da8e:	75 15                	jne    c001daa5 <ATAPI::detectMedia()+0xb7>
c001da90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da97:	75 0c                	jne    c001daa5 <ATAPI::detectMedia()+0xb7>
c001da99:	83 ec 0c             	sub    esp,0xc
c001da9c:	53                   	push   ebx
c001da9d:	e8 40 ff ff ff       	call   c001d9e2 <ATAPI::diskInserted()>
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	83 c4 24             	add    esp,0x24
c001daa8:	5b                   	pop    ebx
c001daa9:	5e                   	pop    esi
c001daaa:	c3                   	ret    
c001daab:	90                   	nop

c001daac <ATAPI::open(int, int, void*)>:
c001daac:	56                   	push   esi
c001daad:	53                   	push   ebx
c001daae:	50                   	push   eax
c001daaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dab7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dabb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dac1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dac7:	c1 e0 06             	shl    eax,0x6
c001daca:	01 d0                	add    eax,edx
c001dacc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dad3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dad9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dae0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001daea:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001daf0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001daf7:	6a 04                	push   0x4
c001daf9:	6a 0c                	push   0xc
c001dafb:	51                   	push   ecx
c001dafc:	52                   	push   edx
c001dafd:	e8 46 e3 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db02:	90                   	nop
c001db03:	90                   	nop
c001db04:	6a 00                	push   0x0
c001db06:	6a 0c                	push   0xc
c001db08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db0f:	50                   	push   eax
c001db10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db16:	e8 2d e3 ff ff       	call   c001be48 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1b:	83 c4 14             	add    esp,0x14
c001db1e:	68 78 01 00 00       	push   0x178
c001db23:	e8 ae 9f fe ff       	call   c0007ad6 <malloc>
c001db28:	83 c4 0c             	add    esp,0xc
c001db2b:	89 c6                	mov    esi,eax
c001db2d:	6a 00                	push   0x0
c001db2f:	68 ff ff ff 7f       	push   0x7fffffff
c001db34:	6a 00                	push   0x0
c001db36:	6a 00                	push   0x0
c001db38:	53                   	push   ebx
c001db39:	68 23 36 02 c0       	push   0xc0023623
c001db3e:	50                   	push   eax
c001db3f:	e8 48 00 ff ff       	call   c000db8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db44:	83 c4 14             	add    esp,0x14
c001db47:	56                   	push   esi
c001db48:	e8 ff 00 ff ff       	call   c000dc4c <LogicalDisk::assignDriveLetter()>
c001db4d:	5a                   	pop    edx
c001db4e:	0f be c0             	movsx  eax,al
c001db51:	59                   	pop    ecx
c001db52:	50                   	push   eax
c001db53:	68 74 34 02 c0       	push   0xc0023474
c001db58:	e8 08 ce fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001db5d:	58                   	pop    eax
c001db5e:	5a                   	pop    edx
c001db5f:	56                   	push   esi
c001db60:	53                   	push   ebx
c001db61:	e8 80 ee fe ff       	call   c000c9e6 <Device::addChild(Device*)>
c001db66:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db6f:	e8 a6 f2 fe ff       	call   c000ce1a <PhysicalDisk::startCache()>
c001db74:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db7e:	e8 6b fe ff ff       	call   c001d9ee <ATAPI::detectMedia()>
c001db83:	83 c4 14             	add    esp,0x14
c001db86:	31 c0                	xor    eax,eax
c001db88:	5b                   	pop    ebx
c001db89:	5e                   	pop    esi
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <ATAPI::read(unsigned long long, int, void*)>:
c001db8c:	55                   	push   ebp
c001db8d:	57                   	push   edi
c001db8e:	56                   	push   esi
c001db8f:	53                   	push   ebx
c001db90:	83 ec 1c             	sub    esp,0x1c
c001db93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db9b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db9f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dba6:	74 3c                	je     c001dbe4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dba8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbac:	b9 03 00 00 00       	mov    ecx,0x3
c001dbb1:	fc                   	cld    
c001dbb2:	31 c0                	xor    eax,eax
c001dbb4:	0f ce                	bswap  esi
c001dbb6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbb8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbbd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbc1:	89 e8                	mov    eax,ebp
c001dbc3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbc7:	50                   	push   eax
c001dbc8:	50                   	push   eax
c001dbc9:	55                   	push   ebp
c001dbca:	c1 e5 0b             	shl    ebp,0xb
c001dbcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbd1:	6a 00                	push   0x0
c001dbd3:	55                   	push   ebp
c001dbd4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbd8:	50                   	push   eax
c001dbd9:	53                   	push   ebx
c001dbda:	e8 b9 fa ff ff       	call   c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbdf:	83 c4 20             	add    esp,0x20
c001dbe2:	eb 1a                	jmp    c001dbfe <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	53                   	push   ebx
c001dbe8:	e8 01 fe ff ff       	call   c001d9ee <ATAPI::detectMedia()>
c001dbed:	83 c4 10             	add    esp,0x10
c001dbf0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbf7:	75 af                	jne    c001dba8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbf9:	b8 02 00 00 00       	mov    eax,0x2
c001dbfe:	83 c4 1c             	add    esp,0x1c
c001dc01:	5b                   	pop    ebx
c001dc02:	5e                   	pop    esi
c001dc03:	5f                   	pop    edi
c001dc04:	5d                   	pop    ebp
c001dc05:	c3                   	ret    

c001dc06 <SATA::close(int, int, void*)>:
c001dc06:	83 ec 0c             	sub    esp,0xc
c001dc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc13:	85 c0                	test   eax,eax
c001dc15:	74 0c                	je     c001dc23 <SATA::close(int, int, void*)+0x1d>
c001dc17:	83 ec 0c             	sub    esp,0xc
c001dc1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc1c:	50                   	push   eax
c001dc1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	31 c0                	xor    eax,eax
c001dc25:	83 c4 0c             	add    esp,0xc
c001dc28:	c3                   	ret    
c001dc29:	90                   	nop

c001dc2a <SATA::powerSaving(PowerSavingLevel)>:
c001dc2a:	c3                   	ret    
c001dc2b:	90                   	nop

c001dc2c <SATA::open(int, int, void*)>:
c001dc2c:	56                   	push   esi
c001dc2d:	53                   	push   ebx
c001dc2e:	50                   	push   eax
c001dc2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc37:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc41:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc47:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc5f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc65:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc6c:	e8 6e a1 fe ff       	call   c0007ddf <Phys::allocatePage()>
c001dc71:	89 c6                	mov    esi,eax
c001dc73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc79:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc7f:	e8 5b a1 fe ff       	call   c0007ddf <Phys::allocatePage()>
c001dc84:	39 c6                	cmp    esi,eax
c001dc86:	74 10                	je     c001dc98 <SATA::open(int, int, void*)+0x6c>
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	68 bc 34 02 c0       	push   0xc00234bc
c001dc90:	e8 02 3a ff ff       	call   c0011697 <KePanic(char const*)>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	6a 02                	push   0x2
c001dc9d:	e8 8b b9 fe ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c001dca2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dca8:	6a 03                	push   0x3
c001dcaa:	50                   	push   eax
c001dcab:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dcb1:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dcb7:	e8 84 c0 fe ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dcbc:	83 c4 14             	add    esp,0x14
c001dcbf:	53                   	push   ebx
c001dcc0:	e8 55 f1 fe ff       	call   c000ce1a <PhysicalDisk::startCache()>
c001dcc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcc8:	e8 91 03 ff ff       	call   c000e05e <createPartitionsForDisk(PhysicalDisk*)>
c001dccd:	83 c4 14             	add    esp,0x14
c001dcd0:	31 c0                	xor    eax,eax
c001dcd2:	5b                   	pop    ebx
c001dcd3:	5e                   	pop    esi
c001dcd4:	c3                   	ret    
c001dcd5:	90                   	nop

c001dcd6 <SATA::SATA()>:
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdd:	83 ec 04             	sub    esp,0x4
c001dce0:	68 00 02 00 00       	push   0x200
c001dce5:	68 d0 34 02 c0       	push   0xc00234d0
c001dcea:	50                   	push   eax
c001dceb:	e8 c2 f0 fe ff       	call   c000cdb2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	ba 40 35 02 c0       	mov    edx,0xc0023540
c001dcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfc:	89 10                	mov    DWORD PTR [eax],edx
c001dcfe:	90                   	nop
c001dcff:	83 c4 0c             	add    esp,0xc
c001dd02:	c3                   	ret    
c001dd03:	90                   	nop

c001dd04 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd04:	55                   	push   ebp
c001dd05:	57                   	push   edi
c001dd06:	56                   	push   esi
c001dd07:	53                   	push   ebx
c001dd08:	83 ec 2c             	sub    esp,0x2c
c001dd0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd0f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd17:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd1b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd1f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd28:	7e 10                	jle    c001dd3a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd2a:	83 ec 0c             	sub    esp,0xc
c001dd2d:	68 e0 34 02 c0       	push   0xc00234e0
c001dd32:	e8 60 39 ff ff       	call   c0011697 <KePanic(char const*)>
c001dd37:	83 c4 10             	add    esp,0x10
c001dd3a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd40:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd50:	89 d0                	mov    eax,edx
c001dd52:	c1 e0 07             	shl    eax,0x7
c001dd55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd59:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd63:	51                   	push   ecx
c001dd64:	8d 42 02             	lea    eax,[edx+0x2]
c001dd67:	51                   	push   ecx
c001dd68:	c1 e0 07             	shl    eax,0x7
c001dd6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd6f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd73:	50                   	push   eax
c001dd74:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd7a:	e8 91 ec ff ff       	call   c001ca10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd7f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd8f:	0f 84 57 01 00 00    	je     c001deec <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd99:	c1 e0 09             	shl    eax,0x9
c001dd9c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dda1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dda5:	74 0e                	je     c001ddb5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dda7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ddad:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ddb1:	89 c1                	mov    ecx,eax
c001ddb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddb5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddbf:	8d 42 02             	lea    eax,[edx+0x2]
c001ddc2:	c1 e0 07             	shl    eax,0x7
c001ddc5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddcb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddd1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dddb:	c1 e1 05             	shl    ecx,0x5
c001ddde:	01 c8                	add    eax,ecx
c001dde0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dde4:	83 e1 01             	and    ecx,0x1
c001dde7:	89 ce                	mov    esi,ecx
c001dde9:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddeb:	c1 e6 06             	shl    esi,0x6
c001ddee:	83 e1 bf             	and    ecx,0xffffffbf
c001ddf1:	09 f1                	or     ecx,esi
c001ddf3:	88 08                	mov    BYTE PTR [eax],cl
c001ddf5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddf7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ddfd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de03:	89 08                	mov    DWORD PTR [eax],ecx
c001de05:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de0b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de11:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de17:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de1a:	50                   	push   eax
c001de1b:	68 90 00 00 00       	push   0x90
c001de20:	6a 00                	push   0x0
c001de22:	56                   	push   esi
c001de23:	e8 c8 26 fe ff       	call   c00004f0 <memset>
c001de28:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de2e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de38:	83 c4 10             	add    esp,0x10
c001de3b:	48                   	dec    eax
c001de3c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de41:	89 c1                	mov    ecx,eax
c001de43:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de49:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de4e:	09 c8                	or     eax,ecx
c001de50:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de56:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de5c:	83 c8 80             	or     eax,0xffffff80
c001de5f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de65:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de6c:	25 00 7f 00 00       	and    eax,0x7f00
c001de71:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de76:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de7b:	66 89 06             	mov    WORD PTR [esi],ax
c001de7e:	b0 35                	mov    al,0x35
c001de80:	75 02                	jne    c001de84 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001de82:	b0 25                	mov    al,0x25
c001de84:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de87:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de8b:	89 e8                	mov    eax,ebp
c001de8d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de91:	c1 e8 10             	shr    eax,0x10
c001de94:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de97:	89 e8                	mov    eax,ebp
c001de99:	c1 e8 18             	shr    eax,0x18
c001de9c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de9f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dea3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deaa:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dead:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001deb1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001deb5:	89 d6                	mov    esi,edx
c001deb7:	31 c0                	xor    eax,eax
c001deb9:	c1 e6 07             	shl    esi,0x7
c001debc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001dec0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dec6:	80 e1 88             	and    cl,0x88
c001dec9:	74 0a                	je     c001ded5 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001decb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ded0:	74 0a                	je     c001dedc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ded2:	40                   	inc    eax
c001ded3:	eb eb                	jmp    c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ded5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deda:	75 17                	jne    c001def3 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dedc:	83 ec 0c             	sub    esp,0xc
c001dedf:	68 19 35 02 c0       	push   0xc0023519
c001dee4:	e8 7c ca fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	b8 01 00 00 00       	mov    eax,0x1
c001def1:	eb 5d                	jmp    c001df50 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001def3:	b8 01 00 00 00       	mov    eax,0x1
c001def8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001defc:	c1 e2 07             	shl    edx,0x7
c001deff:	d3 e0                	shl    eax,cl
c001df01:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001df05:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df0b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df11:	85 c8                	test   eax,ecx
c001df13:	74 16                	je     c001df2b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001df15:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df1b:	0f ba e1 1e          	bt     ecx,0x1e
c001df1f:	73 ea                	jae    c001df0b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df21:	83 ec 0c             	sub    esp,0xc
c001df24:	68 27 35 02 c0       	push   0xc0023527
c001df29:	eb b9                	jmp    c001dee4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df2b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df31:	0f ba e0 1e          	bt     eax,0x1e
c001df35:	72 b5                	jb     c001deec <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df37:	31 c0                	xor    eax,eax
c001df39:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df3e:	75 10                	jne    c001df50 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df40:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df46:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df50:	83 c4 2c             	add    esp,0x2c
c001df53:	5b                   	pop    ebx
c001df54:	5e                   	pop    esi
c001df55:	5f                   	pop    edi
c001df56:	5d                   	pop    ebp
c001df57:	c3                   	ret    

c001df58 <SATA::read(unsigned long long, int, void*)>:
c001df58:	55                   	push   ebp
c001df59:	57                   	push   edi
c001df5a:	56                   	push   esi
c001df5b:	be 04 00 00 00       	mov    esi,0x4
c001df60:	53                   	push   ebx
c001df61:	83 ec 0c             	sub    esp,0xc
c001df64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df6c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df73:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df77:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df7d:	0f 87 1a 02 00 00    	ja     c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001df83:	be 06 00 00 00       	mov    esi,0x6
c001df88:	85 c9                	test   ecx,ecx
c001df8a:	0f 84 0d 02 00 00    	je     c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001df90:	56                   	push   esi
c001df91:	56                   	push   esi
c001df92:	6a 00                	push   0x0
c001df94:	51                   	push   ecx
c001df95:	53                   	push   ebx
c001df96:	52                   	push   edx
c001df97:	50                   	push   eax
c001df98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df9c:	e8 63 fd ff ff       	call   c001dd04 <SATA::access(unsigned long long, int, void*, bool)>
c001dfa1:	83 c4 20             	add    esp,0x20
c001dfa4:	89 c6                	mov    esi,eax
c001dfa6:	85 c0                	test   eax,eax
c001dfa8:	0f 85 ea 01 00 00    	jne    c001e198 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfae:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dfb4:	bb 0a 00 00 00       	mov    ebx,0xa
c001dfb9:	50                   	push   eax
c001dfba:	50                   	push   eax
c001dfbb:	6a 0f                	push   0xf
c001dfbd:	6a 00                	push   0x0
c001dfbf:	e8 75 f2 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001dfc4:	5a                   	pop    edx
c001dfc5:	0f b6 c0             	movzx  eax,al
c001dfc8:	59                   	pop    ecx
c001dfc9:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfce:	50                   	push   eax
c001dfcf:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd4:	99                   	cdq    
c001dfd5:	f7 f9                	idiv   ecx
c001dfd7:	99                   	cdq    
c001dfd8:	f7 fb                	idiv   ebx
c001dfda:	8d 42 30             	lea    eax,[edx+0x30]
c001dfdd:	0f b6 c0             	movzx  eax,al
c001dfe0:	50                   	push   eax
c001dfe1:	e8 42 f2 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001dfe6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfec:	5f                   	pop    edi
c001dfed:	5d                   	pop    ebp
c001dfee:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dff3:	6a 0f                	push   0xf
c001dff5:	6a 00                	push   0x0
c001dff7:	e8 3d f2 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001dffc:	5a                   	pop    edx
c001dffd:	0f b6 c0             	movzx  eax,al
c001e000:	59                   	pop    ecx
c001e001:	50                   	push   eax
c001e002:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e007:	99                   	cdq    
c001e008:	f7 fd                	idiv   ebp
c001e00a:	99                   	cdq    
c001e00b:	f7 fb                	idiv   ebx
c001e00d:	8d 42 30             	lea    eax,[edx+0x30]
c001e010:	0f b6 c0             	movzx  eax,al
c001e013:	50                   	push   eax
c001e014:	e8 0f f2 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e019:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e01f:	5f                   	pop    edi
c001e020:	bf 64 00 00 00       	mov    edi,0x64
c001e025:	58                   	pop    eax
c001e026:	6a 0f                	push   0xf
c001e028:	6a 00                	push   0x0
c001e02a:	e8 0a f2 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e02f:	5a                   	pop    edx
c001e030:	0f b6 c0             	movzx  eax,al
c001e033:	59                   	pop    ecx
c001e034:	50                   	push   eax
c001e035:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e03a:	99                   	cdq    
c001e03b:	f7 ff                	idiv   edi
c001e03d:	99                   	cdq    
c001e03e:	f7 fb                	idiv   ebx
c001e040:	8d 42 30             	lea    eax,[edx+0x30]
c001e043:	0f b6 c0             	movzx  eax,al
c001e046:	50                   	push   eax
c001e047:	e8 dc f1 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e04c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e052:	58                   	pop    eax
c001e053:	5a                   	pop    edx
c001e054:	6a 0f                	push   0xf
c001e056:	6a 00                	push   0x0
c001e058:	e8 dc f1 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e05d:	59                   	pop    ecx
c001e05e:	0f b6 c0             	movzx  eax,al
c001e061:	5a                   	pop    edx
c001e062:	50                   	push   eax
c001e063:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e068:	99                   	cdq    
c001e069:	f7 fb                	idiv   ebx
c001e06b:	99                   	cdq    
c001e06c:	f7 fb                	idiv   ebx
c001e06e:	8d 42 30             	lea    eax,[edx+0x30]
c001e071:	0f b6 c0             	movzx  eax,al
c001e074:	50                   	push   eax
c001e075:	e8 ae f1 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e07a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e080:	59                   	pop    ecx
c001e081:	58                   	pop    eax
c001e082:	6a 0f                	push   0xf
c001e084:	6a 00                	push   0x0
c001e086:	e8 ae f1 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e08b:	5a                   	pop    edx
c001e08c:	0f b6 c0             	movzx  eax,al
c001e08f:	59                   	pop    ecx
c001e090:	50                   	push   eax
c001e091:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e096:	99                   	cdq    
c001e097:	f7 fb                	idiv   ebx
c001e099:	8d 42 30             	lea    eax,[edx+0x30]
c001e09c:	0f b6 c0             	movzx  eax,al
c001e09f:	50                   	push   eax
c001e0a0:	e8 83 f1 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e0a5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0ab:	58                   	pop    eax
c001e0ac:	5a                   	pop    edx
c001e0ad:	6a 0f                	push   0xf
c001e0af:	6a 00                	push   0x0
c001e0b1:	e8 83 f1 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e0b6:	59                   	pop    ecx
c001e0b7:	0f b6 c0             	movzx  eax,al
c001e0ba:	5a                   	pop    edx
c001e0bb:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0c0:	50                   	push   eax
c001e0c1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0c6:	99                   	cdq    
c001e0c7:	f7 f9                	idiv   ecx
c001e0c9:	99                   	cdq    
c001e0ca:	f7 fb                	idiv   ebx
c001e0cc:	8d 42 30             	lea    eax,[edx+0x30]
c001e0cf:	0f b6 c0             	movzx  eax,al
c001e0d2:	50                   	push   eax
c001e0d3:	e8 50 f1 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e0d8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0de:	59                   	pop    ecx
c001e0df:	58                   	pop    eax
c001e0e0:	6a 0f                	push   0xf
c001e0e2:	6a 00                	push   0x0
c001e0e4:	e8 50 f1 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e0e9:	5a                   	pop    edx
c001e0ea:	0f b6 c0             	movzx  eax,al
c001e0ed:	59                   	pop    ecx
c001e0ee:	50                   	push   eax
c001e0ef:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0f4:	99                   	cdq    
c001e0f5:	f7 fd                	idiv   ebp
c001e0f7:	99                   	cdq    
c001e0f8:	f7 fb                	idiv   ebx
c001e0fa:	8d 42 30             	lea    eax,[edx+0x30]
c001e0fd:	0f b6 c0             	movzx  eax,al
c001e100:	50                   	push   eax
c001e101:	e8 22 f1 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e106:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e10c:	5d                   	pop    ebp
c001e10d:	58                   	pop    eax
c001e10e:	6a 0f                	push   0xf
c001e110:	6a 00                	push   0x0
c001e112:	e8 22 f1 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e117:	5a                   	pop    edx
c001e118:	0f b6 c0             	movzx  eax,al
c001e11b:	59                   	pop    ecx
c001e11c:	50                   	push   eax
c001e11d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e122:	99                   	cdq    
c001e123:	f7 ff                	idiv   edi
c001e125:	99                   	cdq    
c001e126:	f7 fb                	idiv   ebx
c001e128:	8d 42 30             	lea    eax,[edx+0x30]
c001e12b:	0f b6 c0             	movzx  eax,al
c001e12e:	50                   	push   eax
c001e12f:	e8 f4 f0 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e134:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e13a:	5f                   	pop    edi
c001e13b:	5d                   	pop    ebp
c001e13c:	6a 0f                	push   0xf
c001e13e:	6a 00                	push   0x0
c001e140:	e8 f4 f0 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e145:	5a                   	pop    edx
c001e146:	0f b6 c0             	movzx  eax,al
c001e149:	59                   	pop    ecx
c001e14a:	50                   	push   eax
c001e14b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e150:	99                   	cdq    
c001e151:	f7 fb                	idiv   ebx
c001e153:	99                   	cdq    
c001e154:	f7 fb                	idiv   ebx
c001e156:	8d 42 30             	lea    eax,[edx+0x30]
c001e159:	0f b6 c0             	movzx  eax,al
c001e15c:	50                   	push   eax
c001e15d:	e8 c6 f0 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e162:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e168:	5f                   	pop    edi
c001e169:	5d                   	pop    ebp
c001e16a:	6a 0f                	push   0xf
c001e16c:	6a 00                	push   0x0
c001e16e:	e8 c6 f0 ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e173:	5a                   	pop    edx
c001e174:	0f b6 c0             	movzx  eax,al
c001e177:	59                   	pop    ecx
c001e178:	50                   	push   eax
c001e179:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e17e:	99                   	cdq    
c001e17f:	f7 fb                	idiv   ebx
c001e181:	83 c2 30             	add    edx,0x30
c001e184:	0f b6 d2             	movzx  edx,dl
c001e187:	52                   	push   edx
c001e188:	e8 9b f0 ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e196:	eb 05                	jmp    c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001e198:	be 01 00 00 00       	mov    esi,0x1
c001e19d:	83 c4 0c             	add    esp,0xc
c001e1a0:	89 f0                	mov    eax,esi
c001e1a2:	5b                   	pop    ebx
c001e1a3:	5e                   	pop    esi
c001e1a4:	5f                   	pop    edi
c001e1a5:	5d                   	pop    ebp
c001e1a6:	c3                   	ret    
c001e1a7:	90                   	nop

c001e1a8 <SATA::write(unsigned long long, int, void*)>:
c001e1a8:	55                   	push   ebp
c001e1a9:	b8 04 00 00 00       	mov    eax,0x4
c001e1ae:	57                   	push   edi
c001e1af:	56                   	push   esi
c001e1b0:	53                   	push   ebx
c001e1b1:	83 ec 1c             	sub    esp,0x1c
c001e1b4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e1b8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1bc:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e1bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1c3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e1c7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1cd:	0f 87 32 02 00 00    	ja     c001e405 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1d3:	b8 06 00 00 00       	mov    eax,0x6
c001e1d8:	85 ff                	test   edi,edi
c001e1da:	0f 84 25 02 00 00    	je     c001e405 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1e0:	89 ee                	mov    esi,ebp
c001e1e2:	c1 e6 09             	shl    esi,0x9
c001e1e5:	01 fe                	add    esi,edi
c001e1e7:	89 c8                	mov    eax,ecx
c001e1e9:	89 da                	mov    edx,ebx
c001e1eb:	83 c0 01             	add    eax,0x1
c001e1ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e1f2:	83 d2 00             	adc    edx,0x0
c001e1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1f9:	50                   	push   eax
c001e1fa:	50                   	push   eax
c001e1fb:	6a 01                	push   0x1
c001e1fd:	57                   	push   edi
c001e1fe:	81 c7 00 02 00 00    	add    edi,0x200
c001e204:	6a 01                	push   0x1
c001e206:	53                   	push   ebx
c001e207:	51                   	push   ecx
c001e208:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e20c:	e8 f3 fa ff ff       	call   c001dd04 <SATA::access(unsigned long long, int, void*, bool)>
c001e211:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e215:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e219:	83 c4 20             	add    esp,0x20
c001e21c:	39 f7                	cmp    edi,esi
c001e21e:	75 c7                	jne    c001e1e7 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e220:	bb 0a 00 00 00       	mov    ebx,0xa
c001e225:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e22b:	bd 10 27 00 00       	mov    ebp,0x2710
c001e230:	50                   	push   eax
c001e231:	50                   	push   eax
c001e232:	6a 0f                	push   0xf
c001e234:	6a 00                	push   0x0
c001e236:	e8 fe ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e23b:	5a                   	pop    edx
c001e23c:	0f b6 c0             	movzx  eax,al
c001e23f:	59                   	pop    ecx
c001e240:	50                   	push   eax
c001e241:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e246:	99                   	cdq    
c001e247:	f7 fd                	idiv   ebp
c001e249:	99                   	cdq    
c001e24a:	f7 fb                	idiv   ebx
c001e24c:	8d 42 30             	lea    eax,[edx+0x30]
c001e24f:	0f b6 c0             	movzx  eax,al
c001e252:	50                   	push   eax
c001e253:	e8 d0 ef ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e258:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e25e:	5e                   	pop    esi
c001e25f:	5f                   	pop    edi
c001e260:	bf e8 03 00 00       	mov    edi,0x3e8
c001e265:	6a 0f                	push   0xf
c001e267:	6a 00                	push   0x0
c001e269:	e8 cb ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e26e:	5a                   	pop    edx
c001e26f:	0f b6 c0             	movzx  eax,al
c001e272:	59                   	pop    ecx
c001e273:	50                   	push   eax
c001e274:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e279:	99                   	cdq    
c001e27a:	f7 ff                	idiv   edi
c001e27c:	99                   	cdq    
c001e27d:	f7 fb                	idiv   ebx
c001e27f:	8d 42 30             	lea    eax,[edx+0x30]
c001e282:	0f b6 c0             	movzx  eax,al
c001e285:	50                   	push   eax
c001e286:	e8 9d ef ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e28b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e291:	5e                   	pop    esi
c001e292:	be 64 00 00 00       	mov    esi,0x64
c001e297:	58                   	pop    eax
c001e298:	6a 0f                	push   0xf
c001e29a:	6a 00                	push   0x0
c001e29c:	e8 98 ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e2a1:	5a                   	pop    edx
c001e2a2:	0f b6 c0             	movzx  eax,al
c001e2a5:	59                   	pop    ecx
c001e2a6:	50                   	push   eax
c001e2a7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ac:	99                   	cdq    
c001e2ad:	f7 fe                	idiv   esi
c001e2af:	99                   	cdq    
c001e2b0:	f7 fb                	idiv   ebx
c001e2b2:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b5:	0f b6 c0             	movzx  eax,al
c001e2b8:	50                   	push   eax
c001e2b9:	e8 6a ef ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e2be:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2c4:	58                   	pop    eax
c001e2c5:	5a                   	pop    edx
c001e2c6:	6a 0f                	push   0xf
c001e2c8:	6a 00                	push   0x0
c001e2ca:	e8 6a ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e2cf:	59                   	pop    ecx
c001e2d0:	0f b6 c0             	movzx  eax,al
c001e2d3:	5a                   	pop    edx
c001e2d4:	50                   	push   eax
c001e2d5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2da:	99                   	cdq    
c001e2db:	f7 fb                	idiv   ebx
c001e2dd:	99                   	cdq    
c001e2de:	f7 fb                	idiv   ebx
c001e2e0:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e3:	0f b6 c0             	movzx  eax,al
c001e2e6:	50                   	push   eax
c001e2e7:	e8 3c ef ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e2ec:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2f2:	59                   	pop    ecx
c001e2f3:	58                   	pop    eax
c001e2f4:	6a 0f                	push   0xf
c001e2f6:	6a 00                	push   0x0
c001e2f8:	e8 3c ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e2fd:	5a                   	pop    edx
c001e2fe:	0f b6 c0             	movzx  eax,al
c001e301:	59                   	pop    ecx
c001e302:	50                   	push   eax
c001e303:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e308:	99                   	cdq    
c001e309:	f7 fb                	idiv   ebx
c001e30b:	83 c2 30             	add    edx,0x30
c001e30e:	0f b6 d2             	movzx  edx,dl
c001e311:	52                   	push   edx
c001e312:	e8 11 ef ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e317:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e31d:	58                   	pop    eax
c001e31e:	5a                   	pop    edx
c001e31f:	6a 0f                	push   0xf
c001e321:	6a 00                	push   0x0
c001e323:	e8 11 ef ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e328:	59                   	pop    ecx
c001e329:	0f b6 c0             	movzx  eax,al
c001e32c:	5a                   	pop    edx
c001e32d:	50                   	push   eax
c001e32e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e333:	99                   	cdq    
c001e334:	f7 fd                	idiv   ebp
c001e336:	99                   	cdq    
c001e337:	f7 fb                	idiv   ebx
c001e339:	8d 42 30             	lea    eax,[edx+0x30]
c001e33c:	0f b6 c0             	movzx  eax,al
c001e33f:	50                   	push   eax
c001e340:	e8 e3 ee ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e345:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e34b:	59                   	pop    ecx
c001e34c:	5d                   	pop    ebp
c001e34d:	6a 0f                	push   0xf
c001e34f:	6a 00                	push   0x0
c001e351:	e8 e3 ee ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e356:	5a                   	pop    edx
c001e357:	0f b6 c0             	movzx  eax,al
c001e35a:	59                   	pop    ecx
c001e35b:	50                   	push   eax
c001e35c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e361:	99                   	cdq    
c001e362:	f7 ff                	idiv   edi
c001e364:	99                   	cdq    
c001e365:	f7 fb                	idiv   ebx
c001e367:	8d 42 30             	lea    eax,[edx+0x30]
c001e36a:	0f b6 c0             	movzx  eax,al
c001e36d:	50                   	push   eax
c001e36e:	e8 b5 ee ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e373:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e379:	5f                   	pop    edi
c001e37a:	5d                   	pop    ebp
c001e37b:	6a 0f                	push   0xf
c001e37d:	6a 00                	push   0x0
c001e37f:	e8 b5 ee ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e384:	5a                   	pop    edx
c001e385:	0f b6 c0             	movzx  eax,al
c001e388:	59                   	pop    ecx
c001e389:	50                   	push   eax
c001e38a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e38f:	99                   	cdq    
c001e390:	f7 fe                	idiv   esi
c001e392:	99                   	cdq    
c001e393:	f7 fb                	idiv   ebx
c001e395:	8d 42 30             	lea    eax,[edx+0x30]
c001e398:	0f b6 c0             	movzx  eax,al
c001e39b:	50                   	push   eax
c001e39c:	e8 87 ee ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e3a1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3a7:	5e                   	pop    esi
c001e3a8:	5f                   	pop    edi
c001e3a9:	6a 0f                	push   0xf
c001e3ab:	6a 00                	push   0x0
c001e3ad:	e8 87 ee ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e3b2:	5d                   	pop    ebp
c001e3b3:	0f b6 c0             	movzx  eax,al
c001e3b6:	5a                   	pop    edx
c001e3b7:	50                   	push   eax
c001e3b8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bd:	99                   	cdq    
c001e3be:	f7 fb                	idiv   ebx
c001e3c0:	99                   	cdq    
c001e3c1:	f7 fb                	idiv   ebx
c001e3c3:	8d 42 30             	lea    eax,[edx+0x30]
c001e3c6:	0f b6 c0             	movzx  eax,al
c001e3c9:	50                   	push   eax
c001e3ca:	e8 59 ee ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e3cf:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3d5:	59                   	pop    ecx
c001e3d6:	5e                   	pop    esi
c001e3d7:	6a 0f                	push   0xf
c001e3d9:	6a 00                	push   0x0
c001e3db:	e8 59 ee ff ff       	call   c001d239 <combineColours(unsigned char, unsigned char)>
c001e3e0:	5f                   	pop    edi
c001e3e1:	0f b6 c0             	movzx  eax,al
c001e3e4:	5d                   	pop    ebp
c001e3e5:	50                   	push   eax
c001e3e6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3eb:	99                   	cdq    
c001e3ec:	f7 fb                	idiv   ebx
c001e3ee:	83 c2 30             	add    edx,0x30
c001e3f1:	0f b6 d2             	movzx  edx,dl
c001e3f4:	52                   	push   edx
c001e3f5:	e8 2e ee ff ff       	call   c001d228 <combineCharAndColour(char, unsigned char)>
c001e3fa:	83 c4 10             	add    esp,0x10
c001e3fd:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e403:	31 c0                	xor    eax,eax
c001e405:	83 c4 1c             	add    esp,0x1c
c001e408:	5b                   	pop    ebx
c001e409:	5e                   	pop    esi
c001e40a:	5f                   	pop    edi
c001e40b:	5d                   	pop    ebp
c001e40c:	c3                   	ret    
c001e40d:	90                   	nop

c001e40e <SATAPI::write(unsigned long long, int, void*)>:
c001e40e:	b8 03 00 00 00       	mov    eax,0x3
c001e413:	c3                   	ret    

c001e414 <SATAPI::close(int, int, void*)>:
c001e414:	83 ec 0c             	sub    esp,0xc
c001e417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e421:	85 c0                	test   eax,eax
c001e423:	74 0c                	je     c001e431 <SATAPI::close(int, int, void*)+0x1d>
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	8b 10                	mov    edx,DWORD PTR [eax]
c001e42a:	50                   	push   eax
c001e42b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	31 c0                	xor    eax,eax
c001e433:	83 c4 0c             	add    esp,0xc
c001e436:	c3                   	ret    
c001e437:	90                   	nop

c001e438 <SATAPI::SATAPI()>:
c001e438:	83 ec 0c             	sub    esp,0xc
c001e43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e43f:	83 ec 04             	sub    esp,0x4
c001e442:	68 00 08 00 00       	push   0x800
c001e447:	68 70 35 02 c0       	push   0xc0023570
c001e44c:	50                   	push   eax
c001e44d:	e8 60 e9 fe ff       	call   c000cdb2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	ba 64 36 02 c0       	mov    edx,0xc0023664
c001e45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45e:	89 10                	mov    DWORD PTR [eax],edx
c001e460:	90                   	nop
c001e461:	83 c4 0c             	add    esp,0xc
c001e464:	c3                   	ret    
c001e465:	90                   	nop

c001e466 <SATAPI::diskRemoved()>:
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <SATAPI::diskInserted()>:
c001e468:	83 ec 18             	sub    esp,0x18
c001e46b:	68 7c 35 02 c0       	push   0xc002357c
c001e470:	e8 f0 c4 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001e475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e479:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e480:	83 c4 1c             	add    esp,0x1c
c001e483:	c3                   	ret    

c001e484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e484:	55                   	push   ebp
c001e485:	57                   	push   edi
c001e486:	56                   	push   esi
c001e487:	53                   	push   ebx
c001e488:	83 ec 34             	sub    esp,0x34
c001e48b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e48f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e493:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e497:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e49b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e49f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4af:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4b9:	83 c0 02             	add    eax,0x2
c001e4bc:	c1 e0 07             	shl    eax,0x7
c001e4bf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4cb:	c1 e0 07             	shl    eax,0x7
c001e4ce:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4d6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4e4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4ea:	e8 21 e5 ff ff       	call   c001ca10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4f3:	83 c4 10             	add    esp,0x10
c001e4f6:	b8 01 00 00 00       	mov    eax,0x1
c001e4fb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e500:	0f 84 53 02 00 00    	je     c001e759 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e506:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e510:	8b 00                	mov    eax,DWORD PTR [eax]
c001e512:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e518:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e51e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e522:	c1 e1 05             	shl    ecx,0x5
c001e525:	01 c8                	add    eax,ecx
c001e527:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e529:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e52f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e535:	89 08                	mov    DWORD PTR [eax],ecx
c001e537:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e53d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e543:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e549:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e54c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e54f:	50                   	push   eax
c001e550:	68 90 00 00 00       	push   0x90
c001e555:	6a 00                	push   0x0
c001e557:	53                   	push   ebx
c001e558:	e8 93 1f fe ff       	call   c00004f0 <memset>
c001e55d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e562:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e566:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e568:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e56e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e572:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e578:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e57c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e580:	48                   	dec    eax
c001e581:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e586:	89 c1                	mov    ecx,eax
c001e588:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e58e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e593:	09 c8                	or     eax,ecx
c001e595:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e59b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5a1:	83 c8 80             	or     eax,0xffffff80
c001e5a4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5aa:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5ad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e5b1:	25 00 7f 00 00       	and    eax,0x7f00
c001e5b6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e5ba:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5bf:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5c2:	89 d0                	mov    eax,edx
c001e5c4:	c1 ea 18             	shr    edx,0x18
c001e5c7:	c1 e8 10             	shr    eax,0x10
c001e5ca:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e5cd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5d0:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5d4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5db:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5e2:	83 c4 10             	add    esp,0x10
c001e5e5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5ed:	31 c0                	xor    eax,eax
c001e5ef:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e5f5:	80 e1 88             	and    cl,0x88
c001e5f8:	74 0a                	je     c001e604 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e5fa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5ff:	74 0a                	je     c001e60b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e601:	40                   	inc    eax
c001e602:	eb eb                	jmp    c001e5ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e604:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e609:	75 43                	jne    c001e64e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e60b:	83 ec 0c             	sub    esp,0xc
c001e60e:	68 94 35 02 c0       	push   0xc0023594
c001e613:	e8 4d c3 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001e618:	58                   	pop    eax
c001e619:	5a                   	pop    edx
c001e61a:	68 a9 35 02 c0       	push   0xc00235a9
c001e61f:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e625:	e8 9c a4 fe ff       	call   c0008ac6 <VgaText::puts(char const*)>
c001e62a:	59                   	pop    ecx
c001e62b:	5b                   	pop    ebx
c001e62c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e630:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e636:	e8 6f e4 ff ff       	call   c001caaa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e63b:	5e                   	pop    esi
c001e63c:	5f                   	pop    edi
c001e63d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e641:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e647:	e8 3e e4 ff ff       	call   c001ca8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e64c:	eb 48                	jmp    c001e696 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e64e:	be 01 00 00 00       	mov    esi,0x1
c001e653:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e657:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e65b:	d3 e6                	shl    esi,cl
c001e65d:	c1 e7 07             	shl    edi,0x7
c001e660:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e666:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e66b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e66f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e675:	85 c6                	test   esi,eax
c001e677:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e67d:	0f 84 a3 00 00 00    	je     c001e726 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e683:	0f ba e0 1e          	bt     eax,0x1e
c001e687:	73 1a                	jae    c001e6a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e689:	83 ec 0c             	sub    esp,0xc
c001e68c:	68 bb 35 02 c0       	push   0xc00235bb
c001e691:	e8 cf c2 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001e696:	83 c4 10             	add    esp,0x10
c001e699:	b8 01 00 00 00       	mov    eax,0x1
c001e69e:	e9 b6 00 00 00       	jmp    c001e759 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e6a3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e6a9:	83 f8 0d             	cmp    eax,0xd
c001e6ac:	77 0a                	ja     c001e6b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e6ae:	83 ec 0c             	sub    esp,0xc
c001e6b1:	68 c8 00 00 00       	push   0xc8
c001e6b6:	eb 28                	jmp    c001e6e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6b8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e6be:	83 f8 0d             	cmp    eax,0xd
c001e6c1:	77 0a                	ja     c001e6cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e6c3:	83 ec 0c             	sub    esp,0xc
c001e6c6:	68 58 02 00 00       	push   0x258
c001e6cb:	eb 13                	jmp    c001e6e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6cd:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e6d3:	83 f8 06             	cmp    eax,0x6
c001e6d6:	77 10                	ja     c001e6e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 dc 05 00 00       	push   0x5dc
c001e6e0:	e8 c7 7d ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6ec:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6ef:	75 06                	jne    c001e6f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e6f1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6f5:	74 15                	je     c001e70c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6f7:	83 fb 06             	cmp    ebx,0x6
c001e6fa:	77 10                	ja     c001e70c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6fc:	83 ec 0c             	sub    esp,0xc
c001e6ff:	68 c4 09 00 00       	push   0x9c4
c001e704:	e8 a3 7d ff ff       	call   c00164ac <milliTenthSleep(unsigned int)>
c001e709:	83 c4 10             	add    esp,0x10
c001e70c:	43                   	inc    ebx
c001e70d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e713:	0f 85 56 ff ff ff    	jne    c001e66f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e719:	83 ec 0c             	sub    esp,0xc
c001e71c:	68 ce 35 02 c0       	push   0xc00235ce
c001e721:	e9 6b ff ff ff       	jmp    c001e691 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e726:	0f ba e0 1e          	bt     eax,0x1e
c001e72a:	73 0d                	jae    c001e739 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e72c:	83 ec 0c             	sub    esp,0xc
c001e72f:	68 e2 35 02 c0       	push   0xc00235e2
c001e734:	e9 58 ff ff ff       	jmp    c001e691 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e739:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e73e:	74 17                	je     c001e757 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e740:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e745:	74 10                	je     c001e757 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e747:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e74d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e751:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e755:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e757:	31 c0                	xor    eax,eax
c001e759:	83 c4 2c             	add    esp,0x2c
c001e75c:	5b                   	pop    ebx
c001e75d:	5e                   	pop    esi
c001e75e:	5f                   	pop    edi
c001e75f:	5d                   	pop    ebp
c001e760:	c3                   	ret    
c001e761:	90                   	nop

c001e762 <SATAPI::eject()>:
c001e762:	57                   	push   edi
c001e763:	b9 03 00 00 00       	mov    ecx,0x3
c001e768:	83 ec 18             	sub    esp,0x18
c001e76b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e76f:	fc                   	cld    
c001e770:	31 c0                	xor    eax,eax
c001e772:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e774:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e779:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e77e:	50                   	push   eax
c001e77f:	6a 00                	push   0x0
c001e781:	6a 00                	push   0x0
c001e783:	6a 00                	push   0x0
c001e785:	6a 00                	push   0x0
c001e787:	6a 02                	push   0x2
c001e789:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e78d:	50                   	push   eax
c001e78e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e792:	e8 ed fc ff ff       	call   c001e484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e797:	31 c0                	xor    eax,eax
c001e799:	83 c4 38             	add    esp,0x38
c001e79c:	5f                   	pop    edi
c001e79d:	c3                   	ret    

c001e79e <SATAPI::detectMedia()>:
c001e79e:	53                   	push   ebx
c001e79f:	83 ec 14             	sub    esp,0x14
c001e7a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7a6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7ac:	e8 7f ff fe ff       	call   c000e730 <VCache::writeWriteBuffer()>
c001e7b1:	59                   	pop    ecx
c001e7b2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7b8:	e8 63 ff fe ff       	call   c000e720 <VCache::invalidateReadBuffer()>
c001e7bd:	c7 04 24 f7 35 02 c0 	mov    DWORD PTR [esp],0xc00235f7
c001e7c4:	e8 9c c1 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001e7c9:	83 c4 10             	add    esp,0x10
c001e7cc:	31 c0                	xor    eax,eax
c001e7ce:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7d5:	85 d2                	test   edx,edx
c001e7d7:	74 0f                	je     c001e7e8 <SATAPI::detectMedia()+0x4a>
c001e7d9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7df:	75 07                	jne    c001e7e8 <SATAPI::detectMedia()+0x4a>
c001e7e1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7e8:	40                   	inc    eax
c001e7e9:	83 f8 1a             	cmp    eax,0x1a
c001e7ec:	75 e0                	jne    c001e7ce <SATAPI::detectMedia()+0x30>
c001e7ee:	83 c4 08             	add    esp,0x8
c001e7f1:	5b                   	pop    ebx
c001e7f2:	c3                   	ret    
c001e7f3:	90                   	nop

c001e7f4 <SATAPI::open(int, int, void*)>:
c001e7f4:	56                   	push   esi
c001e7f5:	53                   	push   ebx
c001e7f6:	51                   	push   ecx
c001e7f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7ff:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e809:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e80f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e81d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e827:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e82d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e834:	e8 a6 95 fe ff       	call   c0007ddf <Phys::allocatePage()>
c001e839:	89 c6                	mov    esi,eax
c001e83b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e841:	81 c6 00 10 00 00    	add    esi,0x1000
c001e847:	e8 93 95 fe ff       	call   c0007ddf <Phys::allocatePage()>
c001e84c:	39 c6                	cmp    esi,eax
c001e84e:	74 10                	je     c001e860 <SATAPI::open(int, int, void*)+0x6c>
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	68 0c 36 02 c0       	push   0xc002360c
c001e858:	e8 3a 2e ff ff       	call   c0011697 <KePanic(char const*)>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	6a 02                	push   0x2
c001e865:	e8 c3 ad fe ff       	call   c000962d <Virt::allocateKernelVirtualPages(int)>
c001e86a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e870:	6a 03                	push   0x3
c001e872:	50                   	push   eax
c001e873:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e879:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e87f:	e8 bc b4 fe ff       	call   c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e884:	83 c4 14             	add    esp,0x14
c001e887:	68 78 01 00 00       	push   0x178
c001e88c:	e8 45 92 fe ff       	call   c0007ad6 <malloc>
c001e891:	83 c4 0c             	add    esp,0xc
c001e894:	89 c6                	mov    esi,eax
c001e896:	6a 00                	push   0x0
c001e898:	68 ff ff ff 7f       	push   0x7fffffff
c001e89d:	6a 00                	push   0x0
c001e89f:	6a 00                	push   0x0
c001e8a1:	53                   	push   ebx
c001e8a2:	68 22 36 02 c0       	push   0xc0023622
c001e8a7:	50                   	push   eax
c001e8a8:	e8 df f2 fe ff       	call   c000db8c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8ad:	83 c4 14             	add    esp,0x14
c001e8b0:	56                   	push   esi
c001e8b1:	e8 96 f3 fe ff       	call   c000dc4c <LogicalDisk::assignDriveLetter()>
c001e8b6:	5a                   	pop    edx
c001e8b7:	0f be c0             	movsx  eax,al
c001e8ba:	59                   	pop    ecx
c001e8bb:	50                   	push   eax
c001e8bc:	68 74 34 02 c0       	push   0xc0023474
c001e8c1:	e8 9f c0 fe ff       	call   c000a965 <Dbg::kprintf(char const*, ...)>
c001e8c6:	58                   	pop    eax
c001e8c7:	5a                   	pop    edx
c001e8c8:	56                   	push   esi
c001e8c9:	53                   	push   ebx
c001e8ca:	e8 17 e1 fe ff       	call   c000c9e6 <Device::addChild(Device*)>
c001e8cf:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8d8:	e8 3d e5 fe ff       	call   c000ce1a <PhysicalDisk::startCache()>
c001e8dd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e7:	e8 b2 fe ff ff       	call   c001e79e <SATAPI::detectMedia()>
c001e8ec:	83 c4 14             	add    esp,0x14
c001e8ef:	31 c0                	xor    eax,eax
c001e8f1:	5b                   	pop    ebx
c001e8f2:	5e                   	pop    esi
c001e8f3:	c3                   	ret    

c001e8f4 <SATAPI::read(unsigned long long, int, void*)>:
c001e8f4:	57                   	push   edi
c001e8f5:	56                   	push   esi
c001e8f6:	53                   	push   ebx
c001e8f7:	83 ec 30             	sub    esp,0x30
c001e8fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e8fe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e902:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e906:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e90e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e912:	83 fe 04             	cmp    esi,0x4
c001e915:	7e 10                	jle    c001e927 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 30 36 02 c0       	push   0xc0023630
c001e91f:	e8 73 2d ff ff       	call   c0011697 <KePanic(char const*)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e92d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e933:	51                   	push   ecx
c001e934:	50                   	push   eax
c001e935:	83 c0 02             	add    eax,0x2
c001e938:	c1 e0 07             	shl    eax,0x7
c001e93b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e941:	50                   	push   eax
c001e942:	52                   	push   edx
c001e943:	e8 8c e1 ff ff       	call   c001cad4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e948:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e94c:	b9 03 00 00 00       	mov    ecx,0x3
c001e951:	fc                   	cld    
c001e952:	31 c0                	xor    eax,eax
c001e954:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e956:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e95b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e960:	83 c4 0c             	add    esp,0xc
c001e963:	6a 00                	push   0x0
c001e965:	6a 00                	push   0x0
c001e967:	6a 00                	push   0x0
c001e969:	6a 00                	push   0x0
c001e96b:	6a 02                	push   0x2
c001e96d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e971:	50                   	push   eax
c001e972:	53                   	push   ebx
c001e973:	e8 0c fb ff ff       	call   c001e484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e978:	83 c4 20             	add    esp,0x20
c001e97b:	85 c0                	test   eax,eax
c001e97d:	75 44                	jne    c001e9c3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e97f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e983:	b9 03 00 00 00       	mov    ecx,0x3
c001e988:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e98e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e993:	0f c8                	bswap  eax
c001e995:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e999:	89 f0                	mov    eax,esi
c001e99b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e99f:	50                   	push   eax
c001e9a0:	56                   	push   esi
c001e9a1:	c1 e6 0b             	shl    esi,0xb
c001e9a4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e9a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9b0:	56                   	push   esi
c001e9b1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9b5:	50                   	push   eax
c001e9b6:	53                   	push   ebx
c001e9b7:	e8 c8 fa ff ff       	call   c001e484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9bc:	83 c4 20             	add    esp,0x20
c001e9bf:	85 c0                	test   eax,eax
c001e9c1:	74 14                	je     c001e9d7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	53                   	push   ebx
c001e9cb:	e8 ce fd ff ff       	call   c001e79e <SATAPI::detectMedia()>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9d7:	83 c4 30             	add    esp,0x30
c001e9da:	5b                   	pop    ebx
c001e9db:	5e                   	pop    esi
c001e9dc:	5f                   	pop    edi
c001e9dd:	c3                   	ret    

c001e9de <IOAPIC::close(int, int, void*)>:
c001e9de:	b8 00 00 00 00       	mov    eax,0x0
c001e9e3:	c3                   	ret    

c001e9e4 <apicGetBase()>:
c001e9e4:	55                   	push   ebp
c001e9e5:	89 e5                	mov    ebp,esp
c001e9e7:	83 ec 18             	sub    esp,0x18
c001e9ea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9f5:	83 e0 08             	and    eax,0x8
c001e9f8:	0f b6 c0             	movzx  eax,al
c001e9fb:	85 c0                	test   eax,eax
c001e9fd:	75 07                	jne    c001ea06 <apicGetBase()+0x22>
c001e9ff:	b8 00 00 00 00       	mov    eax,0x0
c001ea04:	eb 21                	jmp    c001ea27 <apicGetBase()+0x43>
c001ea06:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea0b:	83 ec 08             	sub    esp,0x8
c001ea0e:	6a 1b                	push   0x1b
c001ea10:	50                   	push   eax
c001ea11:	e8 cc 86 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea1c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea22:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea27:	c9                   	leave  
c001ea28:	c3                   	ret    
c001ea29:	90                   	nop

c001ea2a <IOAPIC::IOAPIC()>:
c001ea2a:	83 ec 0c             	sub    esp,0xc
c001ea2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea31:	83 ec 08             	sub    esp,0x8
c001ea34:	68 94 36 02 c0       	push   0xc0023694
c001ea39:	50                   	push   eax
c001ea3a:	e8 3f e1 fe ff       	call   c000cb7e <Device::Device(char const*)>
c001ea3f:	83 c4 10             	add    esp,0x10
c001ea42:	ba a4 36 02 c0       	mov    edx,0xc00236a4
c001ea47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4b:	89 10                	mov    DWORD PTR [eax],edx
c001ea4d:	90                   	nop
c001ea4e:	83 c4 0c             	add    esp,0xc
c001ea51:	c3                   	ret    

c001ea52 <apicOpen()>:
c001ea52:	55                   	push   ebp
c001ea53:	89 e5                	mov    ebp,esp
c001ea55:	53                   	push   ebx
c001ea56:	83 ec 34             	sub    esp,0x34
c001ea59:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea5e:	83 f0 01             	xor    eax,0x1
c001ea61:	0f b6 c0             	movzx  eax,al
c001ea64:	85 c0                	test   eax,eax
c001ea66:	0f 84 a3 00 00 00    	je     c001eb0f <apicOpen()+0xbd>
c001ea6c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea70:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea75:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea79:	0f b6 c0             	movzx  eax,al
c001ea7c:	39 c2                	cmp    edx,eax
c001ea7e:	0f 83 84 00 00 00    	jae    c001eb08 <apicOpen()+0xb6>
c001ea84:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea91:	e8 40 90 fe ff       	call   c0007ad6 <malloc>
c001ea96:	83 c4 10             	add    esp,0x10
c001ea99:	89 c3                	mov    ebx,eax
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	53                   	push   ebx
c001ea9f:	e8 86 ff ff ff       	call   c001ea2a <IOAPIC::IOAPIC()>
c001eaa4:	83 c4 10             	add    esp,0x10
c001eaa7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eaaa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eaae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eab1:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eab8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eabd:	83 c0 01             	add    eax,0x1
c001eac0:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eac5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eaca:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ead0:	83 ec 08             	sub    esp,0x8
c001ead3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ead6:	50                   	push   eax
c001ead7:	e8 0a df fe ff       	call   c000c9e6 <Device::addChild(Device*)>
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eae2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae4:	83 c0 08             	add    eax,0x8
c001eae7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaed:	6a 00                	push   0x0
c001eaef:	6a 00                	push   0x0
c001eaf1:	52                   	push   edx
c001eaf2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaf5:	ff d0                	call   eax
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eafd:	83 c0 01             	add    eax,0x1
c001eb00:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb03:	e9 68 ff ff ff       	jmp    c001ea70 <apicOpen()+0x1e>
c001eb08:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb0f:	e8 d0 fe ff ff       	call   c001e9e4 <apicGetBase()>
c001eb14:	05 f0 00 00 00       	add    eax,0xf0
c001eb19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb24:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb2b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb35:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb38:	89 10                	mov    DWORD PTR [eax],edx
c001eb3a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb41:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb46:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb49:	7d 7c                	jge    c001ebc7 <apicOpen()+0x175>
c001eb4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb4e:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb55:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb5b:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb62:	c1 e8 08             	shr    eax,0x8
c001eb65:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb6c:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb73:	c1 e8 18             	shr    eax,0x18
c001eb76:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb79:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb7d:	3d ff 00 00 00       	cmp    eax,0xff
c001eb82:	75 3a                	jne    c001ebbe <apicOpen()+0x16c>
c001eb84:	e8 5b fe ff ff       	call   c001e9e4 <apicGetBase()>
c001eb89:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb8d:	83 fa 01             	cmp    edx,0x1
c001eb90:	75 07                	jne    c001eb99 <apicOpen()+0x147>
c001eb92:	ba 60 03 00 00       	mov    edx,0x360
c001eb97:	eb 05                	jmp    c001eb9e <apicOpen()+0x14c>
c001eb99:	ba 50 03 00 00       	mov    edx,0x350
c001eb9e:	01 d0                	add    eax,edx
c001eba0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eba3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eba6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebab:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebb2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebb6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebb9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebbc:	89 10                	mov    DWORD PTR [eax],edx
c001ebbe:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebc2:	e9 7a ff ff ff       	jmp    c001eb41 <apicOpen()+0xef>
c001ebc7:	90                   	nop
c001ebc8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebcb:	c9                   	leave  
c001ebcc:	c3                   	ret    
c001ebcd:	90                   	nop

c001ebce <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebce:	55                   	push   ebp
c001ebcf:	89 e5                	mov    ebp,esp
c001ebd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebda:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebdd:	72 1d                	jb     c001ebfc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebeb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebf1:	01 d0                	add    eax,edx
c001ebf3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebf6:	73 04                	jae    c001ebfc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebf8:	b0 01                	mov    al,0x1
c001ebfa:	eb 02                	jmp    c001ebfe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebfc:	b0 00                	mov    al,0x0
c001ebfe:	5d                   	pop    ebp
c001ebff:	c3                   	ret    

c001ec00 <IOAPIC::read(int)>:
c001ec00:	55                   	push   ebp
c001ec01:	89 e5                	mov    ebp,esp
c001ec03:	83 ec 10             	sub    esp,0x10
c001ec06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec0f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec15:	0f b6 d0             	movzx  edx,al
c001ec18:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec1b:	89 10                	mov    DWORD PTR [eax],edx
c001ec1d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec20:	83 c0 10             	add    eax,0x10
c001ec23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec25:	c9                   	leave  
c001ec26:	c3                   	ret    
c001ec27:	90                   	nop

c001ec28 <IOAPIC::open(int, int, void*)>:
c001ec28:	55                   	push   ebp
c001ec29:	89 e5                	mov    ebp,esp
c001ec2b:	57                   	push   edi
c001ec2c:	56                   	push   esi
c001ec2d:	53                   	push   ebx
c001ec2e:	83 ec 04             	sub    esp,0x4
c001ec31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec40:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec46:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec50:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec59:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec5f:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec69:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec72:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec81:	0f b6 f0             	movzx  esi,al
c001ec84:	89 d0                	mov    eax,edx
c001ec86:	ba 00 00 00 00       	mov    edx,0x0
c001ec8b:	89 c7                	mov    edi,eax
c001ec8d:	83 e7 ff             	and    edi,0xffffffff
c001ec90:	89 f9                	mov    ecx,edi
c001ec92:	0f b6 da             	movzx  ebx,dl
c001ec95:	89 c8                	mov    eax,ecx
c001ec97:	89 da                	mov    edx,ebx
c001ec99:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec9c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec9f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eca3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eca7:	83 e0 00             	and    eax,0x0
c001ecaa:	09 d0                	or     eax,edx
c001ecac:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ecb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecb9:	8d 50 01             	lea    edx,[eax+0x1]
c001ecbc:	88 d1                	mov    cl,dl
c001ecbe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ecc1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecc7:	0f b6 d0             	movzx  edx,al
c001ecca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eccd:	83 c2 08             	add    edx,0x8
c001ecd0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ecd4:	0f b6 c9             	movzx  ecx,cl
c001ecd7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ecdd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ece1:	6a 01                	push   0x1
c001ece3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ece6:	e8 15 ff ff ff       	call   c001ec00 <IOAPIC::read(int)>
c001eceb:	83 c4 08             	add    esp,0x8
c001ecee:	c1 f8 10             	sar    eax,0x10
c001ecf1:	0f b6 c0             	movzx  eax,al
c001ecf4:	8d 50 01             	lea    edx,[eax+0x1]
c001ecf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecfa:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed00:	b8 00 00 00 00       	mov    eax,0x0
c001ed05:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed08:	5b                   	pop    ebx
c001ed09:	5e                   	pop    esi
c001ed0a:	5f                   	pop    edi
c001ed0b:	5d                   	pop    ebp
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <IOAPIC::write(int, int)>:
c001ed0e:	55                   	push   ebp
c001ed0f:	89 e5                	mov    ebp,esp
c001ed11:	83 ec 10             	sub    esp,0x10
c001ed14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed1d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed23:	0f b6 d0             	movzx  edx,al
c001ed26:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed29:	89 10                	mov    DWORD PTR [eax],edx
c001ed2b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed2e:	8d 50 10             	lea    edx,[eax+0x10]
c001ed31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed34:	89 02                	mov    DWORD PTR [edx],eax
c001ed36:	90                   	nop
c001ed37:	c9                   	leave  
c001ed38:	c3                   	ret    
c001ed39:	90                   	nop

c001ed3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed3a:	55                   	push   ebp
c001ed3b:	89 e5                	mov    ebp,esp
c001ed3d:	53                   	push   ebx
c001ed3e:	83 ec 2c             	sub    esp,0x2c
c001ed41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed44:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed47:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed4a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed4d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed50:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed53:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed56:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed59:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed5c:	88 d8                	mov    al,bl
c001ed5e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed61:	88 c8                	mov    al,cl
c001ed63:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed66:	88 d0                	mov    al,dl
c001ed68:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed6b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed6f:	83 c0 08             	add    eax,0x8
c001ed72:	01 c0                	add    eax,eax
c001ed74:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed7b:	83 c0 08             	add    eax,0x8
c001ed7e:	01 c0                	add    eax,eax
c001ed80:	83 c0 01             	add    eax,0x1
c001ed83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed86:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed89:	50                   	push   eax
c001ed8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed8d:	e8 6e fe ff ff       	call   c001ec00 <IOAPIC::read(int)>
c001ed92:	83 c4 08             	add    esp,0x8
c001ed95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed98:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed9f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eda2:	c1 e0 18             	shl    eax,0x18
c001eda5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001eda8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001edab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edae:	52                   	push   edx
c001edaf:	50                   	push   eax
c001edb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edb3:	e8 56 ff ff ff       	call   c001ed0e <IOAPIC::write(int, int)>
c001edb8:	83 c4 0c             	add    esp,0xc
c001edbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edbe:	50                   	push   eax
c001edbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edc2:	e8 39 fe ff ff       	call   c001ec00 <IOAPIC::read(int)>
c001edc7:	83 c4 08             	add    esp,0x8
c001edca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edcd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001edd4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001eddb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ede2:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ede6:	85 c0                	test   eax,eax
c001ede8:	74 09                	je     c001edf3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edea:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edf1:	eb 07                	jmp    c001edfa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edf3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edfa:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001edfe:	85 c0                	test   eax,eax
c001ee00:	74 09                	je     c001ee0b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee02:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee09:	eb 07                	jmp    c001ee12 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee0b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee12:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee19:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee1d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee20:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee26:	52                   	push   edx
c001ee27:	50                   	push   eax
c001ee28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee2b:	e8 de fe ff ff       	call   c001ed0e <IOAPIC::write(int, int)>
c001ee30:	83 c4 0c             	add    esp,0xc
c001ee33:	90                   	nop
c001ee34:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee37:	c9                   	leave  
c001ee38:	c3                   	ret    
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	90                   	nop

c001ee3c <APICTimer::close(int, int, void*)>:
c001ee3c:	b8 00 00 00 00       	mov    eax,0x0
c001ee41:	c3                   	ret    
c001ee42:	66 90                	xchg   ax,ax

c001ee44 <apicTimerHandler(regs*, void*)>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee4d:	b8 10 27 00 00       	mov    eax,0x2710
c001ee52:	ba 00 00 00 00       	mov    edx,0x0
c001ee57:	f7 f1                	div    ecx
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	50                   	push   eax
c001ee5d:	e8 e6 f5 fe ff       	call   c000e448 <timerHandler(unsigned int)>
c001ee62:	83 c4 10             	add    esp,0x10
c001ee65:	90                   	nop
c001ee66:	83 c4 0c             	add    esp,0xc
c001ee69:	c3                   	ret    
c001ee6a:	66 90                	xchg   ax,ax

c001ee6c <APICTimer::open(int, int, void*)>:
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee75:	83 c0 24             	add    eax,0x24
c001ee78:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7a:	83 ec 08             	sub    esp,0x8
c001ee7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee85:	ff d0                	call   eax
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eea0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eea6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeaa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	51                   	push   ecx
c001eeb4:	6a 01                	push   0x1
c001eeb6:	68 44 ee 01 c0       	push   0xc001ee44
c001eebb:	52                   	push   edx
c001eebc:	50                   	push   eax
c001eebd:	e8 d0 da fe ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eec2:	83 c4 20             	add    esp,0x20
c001eec5:	89 c2                	mov    edx,eax
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eed1:	b8 00 00 00 00       	mov    eax,0x0
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    
c001eeda:	66 90                	xchg   ax,ax

c001eedc <APICTimer::write(int)>:
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	83 ec 0c             	sub    esp,0xc
c001eee2:	68 c8 36 02 c0       	push   0xc00236c8
c001eee7:	e8 ab 27 ff ff       	call   c0011697 <KePanic(char const*)>
c001eeec:	83 c4 10             	add    esp,0x10
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eefd:	90                   	nop
c001eefe:	83 c4 0c             	add    esp,0xc
c001ef01:	c3                   	ret    
c001ef02:	66 90                	xchg   ax,ax

c001ef04 <APICTimer::APICTimer()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	83 ec 08             	sub    esp,0x8
c001ef0e:	68 d8 36 02 c0       	push   0xc00236d8
c001ef13:	50                   	push   eax
c001ef14:	e8 63 f4 fe ff       	call   c000e37c <Timer::Timer(char const*)>
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	ba ec 36 02 c0       	mov    edx,0xc00236ec
c001ef21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef25:	89 10                	mov    DWORD PTR [eax],edx
c001ef27:	90                   	nop
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	c3                   	ret    

c001ef2c <PIT::write(int)>:
c001ef2c:	83 ec 10             	sub    esp,0x10
c001ef2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef41:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef46:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef4b:	89 c2                	mov    edx,eax
c001ef4d:	c1 fa 1f             	sar    edx,0x1f
c001ef50:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef58:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef5f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef64:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef68:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef6d:	ee                   	out    dx,al
c001ef6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef72:	0f b6 c0             	movzx  eax,al
c001ef75:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef7c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef80:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef84:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef89:	ee                   	out    dx,al
c001ef8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef8e:	c1 f8 08             	sar    eax,0x8
c001ef91:	0f b6 c0             	movzx  eax,al
c001ef94:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef9b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efa3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efa8:	ee                   	out    dx,al
c001efa9:	90                   	nop
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	c3                   	ret    
c001efae:	66 90                	xchg   ax,ax

c001efb0 <pitHandler(regs*, void*)>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001efb9:	b8 10 27 00 00       	mov    eax,0x2710
c001efbe:	89 c2                	mov    edx,eax
c001efc0:	c1 fa 1f             	sar    edx,0x1f
c001efc3:	f7 f9                	idiv   ecx
c001efc5:	83 ec 0c             	sub    esp,0xc
c001efc8:	50                   	push   eax
c001efc9:	e8 7a f4 fe ff       	call   c000e448 <timerHandler(unsigned int)>
c001efce:	83 c4 10             	add    esp,0x10
c001efd1:	90                   	nop
c001efd2:	83 c4 0c             	add    esp,0xc
c001efd5:	c3                   	ret    
c001efd6:	66 90                	xchg   ax,ax

c001efd8 <PIT::open(int, int, void*)>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdf:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe1:	83 c0 24             	add    eax,0x24
c001efe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe6:	83 ec 08             	sub    esp,0x8
c001efe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff1:	ff d0                	call   eax
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	6a 00                	push   0x0
c001efff:	6a 01                	push   0x1
c001f001:	68 b0 ef 01 c0       	push   0xc001efb0
c001f006:	6a 00                	push   0x0
c001f008:	50                   	push   eax
c001f009:	e8 84 d9 fe ff       	call   c000c992 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f00e:	83 c4 20             	add    esp,0x20
c001f011:	89 c2                	mov    edx,eax
c001f013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f017:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f01d:	b8 00 00 00 00       	mov    eax,0x0
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	c3                   	ret    
c001f026:	66 90                	xchg   ax,ax

c001f028 <PIT::close(int, int, void*)>:
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03d:	6a 01                	push   0x1
c001f03f:	68 b0 ef 01 c0       	push   0xc001efb0
c001f044:	6a 00                	push   0x0
c001f046:	50                   	push   eax
c001f047:	e8 7c d9 fe ff       	call   c000c9c8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	b8 00 00 00 00       	mov    eax,0x0
c001f054:	83 c4 0c             	add    esp,0xc
c001f057:	c3                   	ret    

c001f058 <PIT::PIT()>:
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05f:	83 ec 08             	sub    esp,0x8
c001f062:	68 14 37 02 c0       	push   0xc0023714
c001f067:	50                   	push   eax
c001f068:	e8 0f f3 fe ff       	call   c000e37c <Timer::Timer(char const*)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c001f075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f079:	89 10                	mov    DWORD PTR [eax],edx
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f085:	0f b6 d0             	movzx  edx,al
c001f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f097:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f09d:	0f b6 d0             	movzx  edx,al
c001f0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0b3:	8d 50 01             	lea    edx,[eax+0x1]
c001f0b6:	88 d1                	mov    cl,dl
c001f0b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0bc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0c2:	0f b6 d0             	movzx  edx,al
c001f0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0cd:	83 e1 3f             	and    ecx,0x3f
c001f0d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0d4:	90                   	nop
c001f0d5:	83 c4 0c             	add    esp,0xc
c001f0d8:	c3                   	ret    
c001f0d9:	66 90                	xchg   ax,ax
c001f0db:	66 90                	xchg   ax,ax
c001f0dd:	66 90                	xchg   ax,ax
c001f0df:	90                   	nop

c001f0e0 <avxDetect>:
c001f0e0:	b8 01 00 00 00       	mov    eax,0x1
c001f0e5:	0f a2                	cpuid  
c001f0e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0ed:	74 15                	je     c001f104 <avxDetect.noAVX>
c001f0ef:	b8 01 00 00 00       	mov    eax,0x1
c001f0f4:	0f a2                	cpuid  
c001f0f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0fc:	74 06                	je     c001f104 <avxDetect.noAVX>
c001f0fe:	b8 01 00 00 00       	mov    eax,0x1
c001f103:	c3                   	ret    

c001f104 <avxDetect.noAVX>:
c001f104:	b8 00 00 00 00       	mov    eax,0x0
c001f109:	c3                   	ret    

c001f10a <avxSave>:
c001f10a:	53                   	push   ebx
c001f10b:	52                   	push   edx
c001f10c:	31 c0                	xor    eax,eax
c001f10e:	48                   	dec    eax
c001f10f:	89 c2                	mov    edx,eax
c001f111:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f115:	0f ae 23             	xsave  [ebx]
c001f118:	5a                   	pop    edx
c001f119:	5b                   	pop    ebx
c001f11a:	c3                   	ret    

c001f11b <avxLoad>:
c001f11b:	53                   	push   ebx
c001f11c:	52                   	push   edx
c001f11d:	31 c0                	xor    eax,eax
c001f11f:	48                   	dec    eax
c001f120:	89 c2                	mov    edx,eax
c001f122:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f126:	0f ae 2b             	xrstor [ebx]
c001f129:	5a                   	pop    edx
c001f12a:	5b                   	pop    ebx
c001f12b:	c3                   	ret    

c001f12c <avxInit>:
c001f12c:	e8 67 03 00 00       	call   c001f498 <sseInit>
c001f131:	50                   	push   eax
c001f132:	51                   	push   ecx
c001f133:	0f 20 e0             	mov    eax,cr4
c001f136:	0d 00 00 04 00       	or     eax,0x40000
c001f13b:	0f 22 e0             	mov    cr4,eax
c001f13e:	31 c9                	xor    ecx,ecx
c001f140:	0f 01 d0             	xgetbv 
c001f143:	0d 07 00 00 00       	or     eax,0x7
c001f148:	0f 01 d1             	xsetbv 
c001f14b:	59                   	pop    ecx
c001f14c:	58                   	pop    eax
c001f14d:	c3                   	ret    

c001f14e <avxClose>:
c001f14e:	c3                   	ret    

c001f14f <wouldSheSayYes>:
c001f14f:	c3                   	ret    
c001f150:	49                   	dec    ecx
c001f151:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f155:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f159:	75 20                	jne    c001f17b <isr0+0xb>
c001f15b:	4e                   	dec    esi
c001f15c:	79 61                	jns    c001f1bf <isr7+0x3>
c001f15e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f163:	66 90                	xchg   ax,ax
c001f165:	66 90                	xchg   ax,ax
c001f167:	66 90                	xchg   ax,ax
c001f169:	66 90                	xchg   ax,ax
c001f16b:	66 90                	xchg   ax,ax
c001f16d:	66 90                	xchg   ax,ax
c001f16f:	90                   	nop

c001f170 <isr0>:
c001f170:	fa                   	cli    
c001f171:	68 00 00 00 00       	push   0x0
c001f176:	68 00 00 00 00       	push   0x0
c001f17b:	e9 56 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f180 <isr1>:
c001f180:	fa                   	cli    
c001f181:	6a 00                	push   0x0
c001f183:	6a 01                	push   0x1
c001f185:	e9 4c 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f18a <isr2>:
c001f18a:	fa                   	cli    
c001f18b:	6a 00                	push   0x0
c001f18d:	6a 02                	push   0x2
c001f18f:	e9 42 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f194 <isr3>:
c001f194:	fa                   	cli    
c001f195:	6a 00                	push   0x0
c001f197:	6a 03                	push   0x3
c001f199:	e9 38 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f19e <isr4>:
c001f19e:	fa                   	cli    
c001f19f:	6a 00                	push   0x0
c001f1a1:	6a 04                	push   0x4
c001f1a3:	e9 2e 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1a8 <isr5>:
c001f1a8:	fa                   	cli    
c001f1a9:	6a 00                	push   0x0
c001f1ab:	6a 05                	push   0x5
c001f1ad:	e9 24 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1b2 <isr6>:
c001f1b2:	fa                   	cli    
c001f1b3:	6a 00                	push   0x0
c001f1b5:	6a 06                	push   0x6
c001f1b7:	e9 1a 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1bc <isr7>:
c001f1bc:	fa                   	cli    
c001f1bd:	6a 00                	push   0x0
c001f1bf:	6a 07                	push   0x7
c001f1c1:	e9 10 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1c6 <isr8>:
c001f1c6:	fa                   	cli    
c001f1c7:	6a 08                	push   0x8
c001f1c9:	e9 08 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1ce <isr9>:
c001f1ce:	fa                   	cli    
c001f1cf:	6a 00                	push   0x0
c001f1d1:	6a 09                	push   0x9
c001f1d3:	e9 fe 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1d8 <isr10>:
c001f1d8:	fa                   	cli    
c001f1d9:	6a 0a                	push   0xa
c001f1db:	e9 f6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1e0 <isr11>:
c001f1e0:	fa                   	cli    
c001f1e1:	6a 0b                	push   0xb
c001f1e3:	e9 ee 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1e8 <isr12>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 0c                	push   0xc
c001f1eb:	e9 e6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1f0 <isr13>:
c001f1f0:	fa                   	cli    
c001f1f1:	6a 0d                	push   0xd
c001f1f3:	53                   	push   ebx
c001f1f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1f8:	81 fb c6 f3 01 c0    	cmp    ebx,0xc001f3c6
c001f1fe:	5b                   	pop    ebx
c001f1ff:	0f 84 c3 01 00 00    	je     c001f3c8 <finishSignal2>
c001f205:	e9 cc 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f20a <isr14>:
c001f20a:	fa                   	cli    
c001f20b:	6a 0e                	push   0xe
c001f20d:	e9 c4 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f212 <isr15>:
c001f212:	fa                   	cli    
c001f213:	6a 00                	push   0x0
c001f215:	6a 0f                	push   0xf
c001f217:	e9 ba 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f21c <isr16>:
c001f21c:	fa                   	cli    
c001f21d:	6a 00                	push   0x0
c001f21f:	6a 10                	push   0x10
c001f221:	e9 b0 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f226 <isr17>:
c001f226:	fa                   	cli    
c001f227:	6a 00                	push   0x0
c001f229:	6a 11                	push   0x11
c001f22b:	e9 a6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f230 <isr18>:
c001f230:	fa                   	cli    
c001f231:	6a 00                	push   0x0
c001f233:	6a 12                	push   0x12
c001f235:	e9 9c 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f23a <irq3>:
c001f23a:	fa                   	cli    
c001f23b:	6a 00                	push   0x0
c001f23d:	6a 23                	push   0x23
c001f23f:	e9 92 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f244 <irq4>:
c001f244:	fa                   	cli    
c001f245:	6a 00                	push   0x0
c001f247:	6a 24                	push   0x24
c001f249:	e9 88 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f24e <irq5>:
c001f24e:	fa                   	cli    
c001f24f:	6a 00                	push   0x0
c001f251:	6a 25                	push   0x25
c001f253:	e9 7e 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f258 <irq6>:
c001f258:	fa                   	cli    
c001f259:	6a 00                	push   0x0
c001f25b:	6a 26                	push   0x26
c001f25d:	e9 74 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f262 <irq7>:
c001f262:	fa                   	cli    
c001f263:	6a 00                	push   0x0
c001f265:	6a 27                	push   0x27
c001f267:	e9 6a 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f26c <irq8>:
c001f26c:	fa                   	cli    
c001f26d:	6a 00                	push   0x0
c001f26f:	6a 28                	push   0x28
c001f271:	e9 60 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f276 <irq9>:
c001f276:	fa                   	cli    
c001f277:	6a 00                	push   0x0
c001f279:	6a 29                	push   0x29
c001f27b:	e9 56 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f280 <irq10>:
c001f280:	fa                   	cli    
c001f281:	6a 00                	push   0x0
c001f283:	6a 2a                	push   0x2a
c001f285:	e9 4c 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f28a <irq11>:
c001f28a:	fa                   	cli    
c001f28b:	6a 00                	push   0x0
c001f28d:	6a 2b                	push   0x2b
c001f28f:	e9 42 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f294 <irq12>:
c001f294:	fa                   	cli    
c001f295:	6a 00                	push   0x0
c001f297:	6a 2c                	push   0x2c
c001f299:	e9 38 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f29e <irq13>:
c001f29e:	fa                   	cli    
c001f29f:	6a 00                	push   0x0
c001f2a1:	6a 2d                	push   0x2d
c001f2a3:	e9 2e 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2a8 <irq14>:
c001f2a8:	fa                   	cli    
c001f2a9:	6a 00                	push   0x0
c001f2ab:	6a 2e                	push   0x2e
c001f2ad:	e9 24 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2b2 <irq15>:
c001f2b2:	fa                   	cli    
c001f2b3:	6a 00                	push   0x0
c001f2b5:	6a 2f                	push   0x2f
c001f2b7:	e9 1a 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2bc <irq1>:
c001f2bc:	fa                   	cli    
c001f2bd:	6a 00                	push   0x0
c001f2bf:	6a 21                	push   0x21
c001f2c1:	eb 13                	jmp    c001f2d6 <int_common_stub>

c001f2c3 <irq2>:
c001f2c3:	fa                   	cli    
c001f2c4:	6a 00                	push   0x0
c001f2c6:	6a 22                	push   0x22
c001f2c8:	eb 0c                	jmp    c001f2d6 <int_common_stub>

c001f2ca <isr96>:
c001f2ca:	6a 00                	push   0x0
c001f2cc:	6a 60                	push   0x60
c001f2ce:	fb                   	sti    
c001f2cf:	eb 37                	jmp    c001f308 <syscall_common_stub>

c001f2d1 <irq0>:
c001f2d1:	fa                   	cli    
c001f2d2:	6a 00                	push   0x0
c001f2d4:	6a 20                	push   0x20

c001f2d6 <int_common_stub>:
c001f2d6:	60                   	pusha  
c001f2d7:	1e                   	push   ds
c001f2d8:	06                   	push   es
c001f2d9:	0f a0                	push   fs
c001f2db:	0f a8                	push   gs
c001f2dd:	66 b8 10 00          	mov    ax,0x10
c001f2e1:	66 8e d8             	mov    ds,ax
c001f2e4:	66 8e c0             	mov    es,ax
c001f2e7:	66 8e e0             	mov    fs,ax
c001f2ea:	66 8e e8             	mov    gs,ax
c001f2ed:	54                   	push   esp
c001f2ee:	fc                   	cld    
c001f2ef:	e8 9c db fe ff       	call   c000ce90 <int_handler>
c001f2f4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2fa:	0f a9                	pop    gs
c001f2fc:	0f a1                	pop    fs
c001f2fe:	07                   	pop    es
c001f2ff:	1f                   	pop    ds
c001f300:	61                   	popa   
c001f301:	81 c4 08 00 00 00    	add    esp,0x8
c001f307:	cf                   	iret   

c001f308 <syscall_common_stub>:
c001f308:	60                   	pusha  
c001f309:	1e                   	push   ds
c001f30a:	06                   	push   es
c001f30b:	0f a0                	push   fs
c001f30d:	0f a8                	push   gs
c001f30f:	66 b8 10 00          	mov    ax,0x10
c001f313:	66 8e d8             	mov    ds,ax
c001f316:	66 8e c0             	mov    es,ax
c001f319:	66 8e e0             	mov    fs,ax
c001f31c:	66 8e e8             	mov    gs,ax
c001f31f:	54                   	push   esp
c001f320:	fc                   	cld    
c001f321:	e8 6a db fe ff       	call   c000ce90 <int_handler>
c001f326:	81 c4 04 00 00 00    	add    esp,0x4
c001f32c:	0f a9                	pop    gs
c001f32e:	0f a1                	pop    fs
c001f330:	07                   	pop    es
c001f331:	1f                   	pop    ds
c001f332:	e8 77 29 ff ff       	call   c0011cae <KiCheckSignalZ>
c001f337:	3d 00 00 00 00       	cmp    eax,0x0
c001f33c:	0f 84 c0 00 00 00    	je     c001f402 <skipSignals>
c001f342:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f347:	61                   	popa   
c001f348:	53                   	push   ebx
c001f349:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f34f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f352:	5b                   	pop    ebx
c001f353:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f358:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f35b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f35e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f361:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f364:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f367:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f36a:	81 c4 08 00 00 00    	add    esp,0x8
c001f370:	5e                   	pop    esi
c001f371:	5b                   	pop    ebx
c001f372:	59                   	pop    ecx
c001f373:	5a                   	pop    edx
c001f374:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f377:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f37a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f37d:	52                   	push   edx
c001f37e:	51                   	push   ecx
c001f37f:	53                   	push   ebx
c001f380:	56                   	push   esi
c001f381:	81 ec 08 00 00 00    	sub    esp,0x8
c001f387:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f38a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f38d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f390:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f396:	60                   	pusha  
c001f397:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f39d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3a0:	89 e3                	mov    ebx,esp
c001f3a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3a5:	52                   	push   edx
c001f3a6:	68 c6 f3 01 c0       	push   0xc001f3c6
c001f3ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3ae:	89 dc                	mov    esp,ebx
c001f3b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3b3:	68 23 00 00 00       	push   0x23
c001f3b8:	51                   	push   ecx
c001f3b9:	68 02 02 00 00       	push   0x202
c001f3be:	68 1b 00 00 00       	push   0x1b
c001f3c3:	ff 36                	push   DWORD PTR [esi]
c001f3c5:	cf                   	iret   

c001f3c6 <finishSignal>:
c001f3c6:	cd 0f                	int    0xf

c001f3c8 <finishSignal2>:
c001f3c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3ce:	e8 58 29 ff ff       	call   c0011d2b <KiFinishSignalZ>
c001f3d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3d9:	68 23 00 00 00       	push   0x23
c001f3de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3e4:	68 1b 00 00 00       	push   0x1b
c001f3e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f401:	cf                   	iret   

c001f402 <skipSignals>:
c001f402:	61                   	popa   
c001f403:	81 c4 08 00 00 00    	add    esp,0x8
c001f409:	cf                   	iret   
c001f40a:	90                   	nop
c001f40b:	90                   	nop

c001f40c <irq16>:
c001f40c:	fa                   	cli    
c001f40d:	6a 00                	push   0x0
c001f40f:	6a 30                	push   0x30
c001f411:	e9 c0 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f416 <irq17>:
c001f416:	fa                   	cli    
c001f417:	6a 00                	push   0x0
c001f419:	6a 31                	push   0x31
c001f41b:	e9 b6 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f420 <irq18>:
c001f420:	fa                   	cli    
c001f421:	6a 00                	push   0x0
c001f423:	6a 32                	push   0x32
c001f425:	e9 ac fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f42a <irq19>:
c001f42a:	fa                   	cli    
c001f42b:	6a 00                	push   0x0
c001f42d:	6a 33                	push   0x33
c001f42f:	e9 a2 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f434 <irq20>:
c001f434:	fa                   	cli    
c001f435:	6a 00                	push   0x0
c001f437:	6a 34                	push   0x34
c001f439:	e9 98 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f43e <irq21>:
c001f43e:	fa                   	cli    
c001f43f:	6a 00                	push   0x0
c001f441:	6a 35                	push   0x35
c001f443:	e9 8e fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f448 <irq22>:
c001f448:	fa                   	cli    
c001f449:	6a 00                	push   0x0
c001f44b:	6a 36                	push   0x36
c001f44d:	e9 84 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f452 <irq23>:
c001f452:	fa                   	cli    
c001f453:	6a 00                	push   0x0
c001f455:	6a 37                	push   0x37
c001f457:	e9 7a fe ff ff       	jmp    c001f2d6 <int_common_stub>
c001f45c:	66 90                	xchg   ax,ax
c001f45e:	66 90                	xchg   ax,ax

c001f460 <i386GetRDRAND>:
c001f460:	b9 64 00 00 00       	mov    ecx,0x64

c001f465 <retry>:
c001f465:	0f c7 f0             	rdrand eax
c001f468:	72 05                	jb     c001f46f <retry.done>
c001f46a:	e2 f9                	loop   c001f465 <retry>

c001f46c <retry.fail>:
c001f46c:	31 c0                	xor    eax,eax
c001f46e:	c3                   	ret    

c001f46f <retry.done>:
c001f46f:	c3                   	ret    

c001f470 <absolutelyNoChanceInHell>:
c001f470:	b8 01 00 00 00       	mov    eax,0x1
c001f475:	0f a2                	cpuid  
c001f477:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f47d:	74 06                	je     c001f485 <sseDetect.noSSE>
c001f47f:	b8 01 00 00 00       	mov    eax,0x1
c001f484:	c3                   	ret    

c001f485 <sseDetect.noSSE>:
c001f485:	31 c0                	xor    eax,eax
c001f487:	c3                   	ret    

c001f488 <sseSave>:
c001f488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48c:	0f ae 00             	fxsave [eax]
c001f48f:	c3                   	ret    

c001f490 <sseLoad>:
c001f490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f494:	0f ae 08             	fxrstor [eax]
c001f497:	c3                   	ret    

c001f498 <sseInit>:
c001f498:	e8 42 00 00 00       	call   c001f4df <x87Init>
c001f49d:	0f 20 e0             	mov    eax,cr4
c001f4a0:	66 0d 00 06          	or     ax,0x600
c001f4a4:	0f 22 e0             	mov    cr4,eax
c001f4a7:	c3                   	ret    

c001f4a8 <sseClose>:
c001f4a8:	c3                   	ret    
c001f4a9:	66 90                	xchg   ax,ax
c001f4ab:	66 90                	xchg   ax,ax
c001f4ad:	66 90                	xchg   ax,ax
c001f4af:	90                   	nop

c001f4b0 <value_37F>:
c001f4b0:	7f 03                	jg     c001f4b5 <value_37A+0x1>

c001f4b2 <value_37E>:
c001f4b2:	7e 03                	jle    c001f4b7 <x87Detect+0x1>

c001f4b4 <value_37A>:
c001f4b4:	7a 03                	jp     c001f4b9 <x87Detect+0x3>

c001f4b6 <x87Detect>:
c001f4b6:	b8 01 00 00 00       	mov    eax,0x1
c001f4bb:	0f a2                	cpuid  
c001f4bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4c3:	74 06                	je     c001f4cb <x87Detect.nox87>
c001f4c5:	b8 01 00 00 00       	mov    eax,0x1
c001f4ca:	c3                   	ret    

c001f4cb <x87Detect.nox87>:
c001f4cb:	b8 00 00 00 00       	mov    eax,0x0
c001f4d0:	c3                   	ret    

c001f4d1 <x87Save>:
c001f4d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d5:	dd 30                	fnsave [eax]
c001f4d7:	c3                   	ret    

c001f4d8 <x87Load>:
c001f4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4dc:	dd 20                	frstor [eax]
c001f4de:	c3                   	ret    

c001f4df <x87Init>:
c001f4df:	0f 20 c0             	mov    eax,cr0
c001f4e2:	66 25 fb ff          	and    ax,0xfffb
c001f4e6:	66 0d 22 00          	or     ax,0x22
c001f4ea:	0f 22 c0             	mov    cr0,eax
c001f4ed:	db e3                	fninit 
c001f4ef:	0f 06                	clts   
c001f4f1:	d9 2d b4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4b4
c001f4f7:	c3                   	ret    

c001f4f8 <x87Close>:
c001f4f8:	c3                   	ret    
c001f4f9:	66 90                	xchg   ax,ax
c001f4fb:	90                   	nop

c001f4fc <__do_global_ctors_aux>:
c001f4fc:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c001f501:	83 f8 ff             	cmp    eax,0xffffffff
c001f504:	74 1a                	je     c001f520 <__do_global_ctors_aux+0x24>
c001f506:	55                   	push   ebp
c001f507:	89 e5                	mov    ebp,esp
c001f509:	53                   	push   ebx
c001f50a:	52                   	push   edx
c001f50b:	bb b0 04 02 c0       	mov    ebx,0xc00204b0
c001f510:	ff d0                	call   eax
c001f512:	83 eb 04             	sub    ebx,0x4
c001f515:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f517:	83 f8 ff             	cmp    eax,0xffffffff
c001f51a:	75 f4                	jne    c001f510 <__do_global_ctors_aux+0x14>
c001f51c:	58                   	pop    eax
c001f51d:	5b                   	pop    ebx
c001f51e:	5d                   	pop    ebp
c001f51f:	c3                   	ret    
c001f520:	c3                   	ret    
c001f521:	66 90                	xchg   ax,ax
c001f523:	90                   	nop

c001f524 <__divdi3>:
c001f524:	55                   	push   ebp
c001f525:	57                   	push   edi
c001f526:	56                   	push   esi
c001f527:	53                   	push   ebx
c001f528:	83 ec 1c             	sub    esp,0x1c
c001f52b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f52f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f536:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f53a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f53e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f542:	85 db                	test   ebx,ebx
c001f544:	0f 88 8e 00 00 00    	js     c001f5d8 <__divdi3+0xb4>
c001f54a:	89 dd                	mov    ebp,ebx
c001f54c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f554:	89 d3                	mov    ebx,edx
c001f556:	85 d2                	test   edx,edx
c001f558:	79 0d                	jns    c001f567 <__divdi3+0x43>
c001f55a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f55e:	f7 d8                	neg    eax
c001f560:	83 d2 00             	adc    edx,0x0
c001f563:	f7 da                	neg    edx
c001f565:	89 d3                	mov    ebx,edx
c001f567:	89 c7                	mov    edi,eax
c001f569:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f56c:	85 db                	test   ebx,ebx
c001f56e:	75 48                	jne    c001f5b8 <__divdi3+0x94>
c001f570:	39 ef                	cmp    edi,ebp
c001f572:	76 24                	jbe    c001f598 <__divdi3+0x74>
c001f574:	89 ea                	mov    edx,ebp
c001f576:	f7 f7                	div    edi
c001f578:	89 c1                	mov    ecx,eax
c001f57a:	31 f6                	xor    esi,esi
c001f57c:	89 c8                	mov    eax,ecx
c001f57e:	89 f2                	mov    edx,esi
c001f580:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f584:	85 c9                	test   ecx,ecx
c001f586:	74 07                	je     c001f58f <__divdi3+0x6b>
c001f588:	f7 d8                	neg    eax
c001f58a:	83 d2 00             	adc    edx,0x0
c001f58d:	f7 da                	neg    edx
c001f58f:	83 c4 1c             	add    esp,0x1c
c001f592:	5b                   	pop    ebx
c001f593:	5e                   	pop    esi
c001f594:	5f                   	pop    edi
c001f595:	5d                   	pop    ebp
c001f596:	c3                   	ret    
c001f597:	90                   	nop
c001f598:	85 ff                	test   edi,edi
c001f59a:	75 0b                	jne    c001f5a7 <__divdi3+0x83>
c001f59c:	b8 01 00 00 00       	mov    eax,0x1
c001f5a1:	31 d2                	xor    edx,edx
c001f5a3:	f7 f3                	div    ebx
c001f5a5:	89 c7                	mov    edi,eax
c001f5a7:	31 d2                	xor    edx,edx
c001f5a9:	89 e8                	mov    eax,ebp
c001f5ab:	f7 f7                	div    edi
c001f5ad:	89 c6                	mov    esi,eax
c001f5af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5b2:	f7 f7                	div    edi
c001f5b4:	89 c1                	mov    ecx,eax
c001f5b6:	eb c4                	jmp    c001f57c <__divdi3+0x58>
c001f5b8:	39 eb                	cmp    ebx,ebp
c001f5ba:	77 3c                	ja     c001f5f8 <__divdi3+0xd4>
c001f5bc:	0f bd f3             	bsr    esi,ebx
c001f5bf:	83 f6 1f             	xor    esi,0x1f
c001f5c2:	75 40                	jne    c001f604 <__divdi3+0xe0>
c001f5c4:	39 eb                	cmp    ebx,ebp
c001f5c6:	72 09                	jb     c001f5d1 <__divdi3+0xad>
c001f5c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5cb:	0f 87 97 00 00 00    	ja     c001f668 <__divdi3+0x144>
c001f5d1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5d6:	eb a4                	jmp    c001f57c <__divdi3+0x58>
c001f5d8:	f7 d9                	neg    ecx
c001f5da:	83 d3 00             	adc    ebx,0x0
c001f5dd:	f7 db                	neg    ebx
c001f5df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5e6:	89 dd                	mov    ebp,ebx
c001f5e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5f0:	e9 5f ff ff ff       	jmp    c001f554 <__divdi3+0x30>
c001f5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5f8:	31 f6                	xor    esi,esi
c001f5fa:	31 c9                	xor    ecx,ecx
c001f5fc:	e9 7b ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f601:	8d 76 00             	lea    esi,[esi+0x0]
c001f604:	b8 20 00 00 00       	mov    eax,0x20
c001f609:	29 f0                	sub    eax,esi
c001f60b:	89 f1                	mov    ecx,esi
c001f60d:	d3 e3                	shl    ebx,cl
c001f60f:	89 fa                	mov    edx,edi
c001f611:	88 c1                	mov    cl,al
c001f613:	d3 ea                	shr    edx,cl
c001f615:	09 da                	or     edx,ebx
c001f617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f61b:	89 f1                	mov    ecx,esi
c001f61d:	d3 e7                	shl    edi,cl
c001f61f:	89 eb                	mov    ebx,ebp
c001f621:	88 c1                	mov    cl,al
c001f623:	d3 eb                	shr    ebx,cl
c001f625:	89 f1                	mov    ecx,esi
c001f627:	d3 e5                	shl    ebp,cl
c001f629:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f62c:	88 c1                	mov    cl,al
c001f62e:	d3 ea                	shr    edx,cl
c001f630:	09 d5                	or     ebp,edx
c001f632:	89 e8                	mov    eax,ebp
c001f634:	89 da                	mov    edx,ebx
c001f636:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f63a:	89 d3                	mov    ebx,edx
c001f63c:	89 c5                	mov    ebp,eax
c001f63e:	f7 e7                	mul    edi
c001f640:	39 d3                	cmp    ebx,edx
c001f642:	72 18                	jb     c001f65c <__divdi3+0x138>
c001f644:	74 0a                	je     c001f650 <__divdi3+0x12c>
c001f646:	89 e9                	mov    ecx,ebp
c001f648:	31 f6                	xor    esi,esi
c001f64a:	e9 2d ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f64f:	90                   	nop
c001f650:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f653:	89 f1                	mov    ecx,esi
c001f655:	d3 e7                	shl    edi,cl
c001f657:	39 c7                	cmp    edi,eax
c001f659:	73 eb                	jae    c001f646 <__divdi3+0x122>
c001f65b:	90                   	nop
c001f65c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f65f:	31 f6                	xor    esi,esi
c001f661:	e9 16 ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f666:	66 90                	xchg   ax,ax
c001f668:	31 c9                	xor    ecx,ecx
c001f66a:	e9 0d ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f66f:	90                   	nop

c001f670 <__moddi3>:
c001f670:	55                   	push   ebp
c001f671:	57                   	push   edi
c001f672:	56                   	push   esi
c001f673:	53                   	push   ebx
c001f674:	83 ec 2c             	sub    esp,0x2c
c001f677:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f67b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f67f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f683:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f687:	85 db                	test   ebx,ebx
c001f689:	0f 88 85 00 00 00    	js     c001f714 <__moddi3+0xa4>
c001f68f:	89 de                	mov    esi,ebx
c001f691:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f699:	89 d7                	mov    edi,edx
c001f69b:	85 d2                	test   edx,edx
c001f69d:	79 09                	jns    c001f6a8 <__moddi3+0x38>
c001f69f:	f7 d8                	neg    eax
c001f6a1:	83 d2 00             	adc    edx,0x0
c001f6a4:	f7 da                	neg    edx
c001f6a6:	89 d7                	mov    edi,edx
c001f6a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6ac:	89 cd                	mov    ebp,ecx
c001f6ae:	85 ff                	test   edi,edi
c001f6b0:	75 52                	jne    c001f704 <__moddi3+0x94>
c001f6b2:	89 c3                	mov    ebx,eax
c001f6b4:	39 f0                	cmp    eax,esi
c001f6b6:	76 24                	jbe    c001f6dc <__moddi3+0x6c>
c001f6b8:	89 c8                	mov    eax,ecx
c001f6ba:	89 f2                	mov    edx,esi
c001f6bc:	f7 f3                	div    ebx
c001f6be:	89 d6                	mov    esi,edx
c001f6c0:	89 f0                	mov    eax,esi
c001f6c2:	31 d2                	xor    edx,edx
c001f6c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6c8:	85 c9                	test   ecx,ecx
c001f6ca:	74 07                	je     c001f6d3 <__moddi3+0x63>
c001f6cc:	f7 d8                	neg    eax
c001f6ce:	83 d2 00             	adc    edx,0x0
c001f6d1:	f7 da                	neg    edx
c001f6d3:	83 c4 2c             	add    esp,0x2c
c001f6d6:	5b                   	pop    ebx
c001f6d7:	5e                   	pop    esi
c001f6d8:	5f                   	pop    edi
c001f6d9:	5d                   	pop    ebp
c001f6da:	c3                   	ret    
c001f6db:	90                   	nop
c001f6dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6e0:	85 db                	test   ebx,ebx
c001f6e2:	75 0d                	jne    c001f6f1 <__moddi3+0x81>
c001f6e4:	b8 01 00 00 00       	mov    eax,0x1
c001f6e9:	31 d2                	xor    edx,edx
c001f6eb:	f7 f7                	div    edi
c001f6ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6f1:	89 f0                	mov    eax,esi
c001f6f3:	31 d2                	xor    edx,edx
c001f6f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6f9:	f7 f7                	div    edi
c001f6fb:	89 e8                	mov    eax,ebp
c001f6fd:	f7 f7                	div    edi
c001f6ff:	89 d6                	mov    esi,edx
c001f701:	eb bd                	jmp    c001f6c0 <__moddi3+0x50>
c001f703:	90                   	nop
c001f704:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f708:	39 f7                	cmp    edi,esi
c001f70a:	76 20                	jbe    c001f72c <__moddi3+0xbc>
c001f70c:	89 c8                	mov    eax,ecx
c001f70e:	89 f2                	mov    edx,esi
c001f710:	eb b2                	jmp    c001f6c4 <__moddi3+0x54>
c001f712:	66 90                	xchg   ax,ax
c001f714:	f7 d9                	neg    ecx
c001f716:	83 d3 00             	adc    ebx,0x0
c001f719:	f7 db                	neg    ebx
c001f71b:	89 de                	mov    esi,ebx
c001f71d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f725:	e9 6f ff ff ff       	jmp    c001f699 <__moddi3+0x29>
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	0f bd c7             	bsr    eax,edi
c001f72f:	83 f0 1f             	xor    eax,0x1f
c001f732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f736:	75 24                	jne    c001f75c <__moddi3+0xec>
c001f738:	39 f7                	cmp    edi,esi
c001f73a:	72 06                	jb     c001f742 <__moddi3+0xd2>
c001f73c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f740:	77 0c                	ja     c001f74e <__moddi3+0xde>
c001f742:	89 e9                	mov    ecx,ebp
c001f744:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f748:	19 fe                	sbb    esi,edi
c001f74a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f74e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f752:	89 f2                	mov    edx,esi
c001f754:	e9 6b ff ff ff       	jmp    c001f6c4 <__moddi3+0x54>
c001f759:	8d 76 00             	lea    esi,[esi+0x0]
c001f75c:	b8 20 00 00 00       	mov    eax,0x20
c001f761:	89 c2                	mov    edx,eax
c001f763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f767:	29 da                	sub    edx,ebx
c001f769:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f76d:	88 d9                	mov    cl,bl
c001f76f:	d3 e7                	shl    edi,cl
c001f771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f775:	88 d1                	mov    cl,dl
c001f777:	d3 e8                	shr    eax,cl
c001f779:	09 c7                	or     edi,eax
c001f77b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f77f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f783:	89 d8                	mov    eax,ebx
c001f785:	88 d9                	mov    cl,bl
c001f787:	d3 e7                	shl    edi,cl
c001f789:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f78d:	89 f3                	mov    ebx,esi
c001f78f:	88 d1                	mov    cl,dl
c001f791:	d3 eb                	shr    ebx,cl
c001f793:	89 c7                	mov    edi,eax
c001f795:	88 c1                	mov    cl,al
c001f797:	d3 e6                	shl    esi,cl
c001f799:	89 e8                	mov    eax,ebp
c001f79b:	88 d1                	mov    cl,dl
c001f79d:	d3 e8                	shr    eax,cl
c001f79f:	09 f0                	or     eax,esi
c001f7a1:	89 f9                	mov    ecx,edi
c001f7a3:	d3 e5                	shl    ebp,cl
c001f7a5:	89 da                	mov    edx,ebx
c001f7a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7ab:	89 d3                	mov    ebx,edx
c001f7ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7b1:	89 c6                	mov    esi,eax
c001f7b3:	89 d1                	mov    ecx,edx
c001f7b5:	39 d3                	cmp    ebx,edx
c001f7b7:	72 27                	jb     c001f7e0 <__moddi3+0x170>
c001f7b9:	74 21                	je     c001f7dc <__moddi3+0x16c>
c001f7bb:	29 f5                	sub    ebp,esi
c001f7bd:	19 cb                	sbb    ebx,ecx
c001f7bf:	89 de                	mov    esi,ebx
c001f7c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7c5:	d3 e6                	shl    esi,cl
c001f7c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7cb:	89 f9                	mov    ecx,edi
c001f7cd:	d3 ed                	shr    ebp,cl
c001f7cf:	09 ee                	or     esi,ebp
c001f7d1:	89 f0                	mov    eax,esi
c001f7d3:	d3 eb                	shr    ebx,cl
c001f7d5:	89 da                	mov    edx,ebx
c001f7d7:	e9 e8 fe ff ff       	jmp    c001f6c4 <__moddi3+0x54>
c001f7dc:	39 c5                	cmp    ebp,eax
c001f7de:	73 db                	jae    c001f7bb <__moddi3+0x14b>
c001f7e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7e8:	89 d1                	mov    ecx,edx
c001f7ea:	89 c6                	mov    esi,eax
c001f7ec:	eb cd                	jmp    c001f7bb <__moddi3+0x14b>
c001f7ee:	66 90                	xchg   ax,ax

c001f7f0 <__udivdi3>:
c001f7f0:	55                   	push   ebp
c001f7f1:	57                   	push   edi
c001f7f2:	56                   	push   esi
c001f7f3:	53                   	push   ebx
c001f7f4:	83 ec 1c             	sub    esp,0x1c
c001f7f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f807:	85 d2                	test   edx,edx
c001f809:	75 41                	jne    c001f84c <__udivdi3+0x5c>
c001f80b:	39 f7                	cmp    edi,esi
c001f80d:	76 15                	jbe    c001f824 <__udivdi3+0x34>
c001f80f:	89 e8                	mov    eax,ebp
c001f811:	89 f2                	mov    edx,esi
c001f813:	f7 f7                	div    edi
c001f815:	31 db                	xor    ebx,ebx
c001f817:	89 da                	mov    edx,ebx
c001f819:	83 c4 1c             	add    esp,0x1c
c001f81c:	5b                   	pop    ebx
c001f81d:	5e                   	pop    esi
c001f81e:	5f                   	pop    edi
c001f81f:	5d                   	pop    ebp
c001f820:	c3                   	ret    
c001f821:	8d 76 00             	lea    esi,[esi+0x0]
c001f824:	89 f9                	mov    ecx,edi
c001f826:	85 ff                	test   edi,edi
c001f828:	75 0b                	jne    c001f835 <__udivdi3+0x45>
c001f82a:	b8 01 00 00 00       	mov    eax,0x1
c001f82f:	31 d2                	xor    edx,edx
c001f831:	f7 f7                	div    edi
c001f833:	89 c1                	mov    ecx,eax
c001f835:	31 d2                	xor    edx,edx
c001f837:	89 f0                	mov    eax,esi
c001f839:	f7 f1                	div    ecx
c001f83b:	89 c3                	mov    ebx,eax
c001f83d:	89 e8                	mov    eax,ebp
c001f83f:	f7 f1                	div    ecx
c001f841:	89 da                	mov    edx,ebx
c001f843:	83 c4 1c             	add    esp,0x1c
c001f846:	5b                   	pop    ebx
c001f847:	5e                   	pop    esi
c001f848:	5f                   	pop    edi
c001f849:	5d                   	pop    ebp
c001f84a:	c3                   	ret    
c001f84b:	90                   	nop
c001f84c:	39 f2                	cmp    edx,esi
c001f84e:	77 1c                	ja     c001f86c <__udivdi3+0x7c>
c001f850:	0f bd da             	bsr    ebx,edx
c001f853:	83 f3 1f             	xor    ebx,0x1f
c001f856:	75 24                	jne    c001f87c <__udivdi3+0x8c>
c001f858:	39 f2                	cmp    edx,esi
c001f85a:	72 08                	jb     c001f864 <__udivdi3+0x74>
c001f85c:	39 ef                	cmp    edi,ebp
c001f85e:	0f 87 84 00 00 00    	ja     c001f8e8 <__udivdi3+0xf8>
c001f864:	b8 01 00 00 00       	mov    eax,0x1
c001f869:	eb ac                	jmp    c001f817 <__udivdi3+0x27>
c001f86b:	90                   	nop
c001f86c:	31 db                	xor    ebx,ebx
c001f86e:	31 c0                	xor    eax,eax
c001f870:	89 da                	mov    edx,ebx
c001f872:	83 c4 1c             	add    esp,0x1c
c001f875:	5b                   	pop    ebx
c001f876:	5e                   	pop    esi
c001f877:	5f                   	pop    edi
c001f878:	5d                   	pop    ebp
c001f879:	c3                   	ret    
c001f87a:	66 90                	xchg   ax,ax
c001f87c:	b8 20 00 00 00       	mov    eax,0x20
c001f881:	29 d8                	sub    eax,ebx
c001f883:	88 d9                	mov    cl,bl
c001f885:	d3 e2                	shl    edx,cl
c001f887:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f88b:	89 fa                	mov    edx,edi
c001f88d:	88 c1                	mov    cl,al
c001f88f:	d3 ea                	shr    edx,cl
c001f891:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f895:	09 d1                	or     ecx,edx
c001f897:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f89b:	88 d9                	mov    cl,bl
c001f89d:	d3 e7                	shl    edi,cl
c001f89f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8a3:	89 f7                	mov    edi,esi
c001f8a5:	88 c1                	mov    cl,al
c001f8a7:	d3 ef                	shr    edi,cl
c001f8a9:	88 d9                	mov    cl,bl
c001f8ab:	d3 e6                	shl    esi,cl
c001f8ad:	89 ea                	mov    edx,ebp
c001f8af:	88 c1                	mov    cl,al
c001f8b1:	d3 ea                	shr    edx,cl
c001f8b3:	09 d6                	or     esi,edx
c001f8b5:	89 f0                	mov    eax,esi
c001f8b7:	89 fa                	mov    edx,edi
c001f8b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8bd:	89 d7                	mov    edi,edx
c001f8bf:	89 c6                	mov    esi,eax
c001f8c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8c5:	39 d7                	cmp    edi,edx
c001f8c7:	72 13                	jb     c001f8dc <__udivdi3+0xec>
c001f8c9:	74 09                	je     c001f8d4 <__udivdi3+0xe4>
c001f8cb:	89 f0                	mov    eax,esi
c001f8cd:	31 db                	xor    ebx,ebx
c001f8cf:	e9 43 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8d4:	88 d9                	mov    cl,bl
c001f8d6:	d3 e5                	shl    ebp,cl
c001f8d8:	39 c5                	cmp    ebp,eax
c001f8da:	73 ef                	jae    c001f8cb <__udivdi3+0xdb>
c001f8dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8df:	31 db                	xor    ebx,ebx
c001f8e1:	e9 31 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8e6:	66 90                	xchg   ax,ax
c001f8e8:	31 c0                	xor    eax,eax
c001f8ea:	e9 28 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8ef:	90                   	nop

c001f8f0 <__umoddi3>:
c001f8f0:	55                   	push   ebp
c001f8f1:	57                   	push   edi
c001f8f2:	56                   	push   esi
c001f8f3:	53                   	push   ebx
c001f8f4:	83 ec 1c             	sub    esp,0x1c
c001f8f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f903:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f907:	89 da                	mov    edx,ebx
c001f909:	85 c0                	test   eax,eax
c001f90b:	75 37                	jne    c001f944 <__umoddi3+0x54>
c001f90d:	39 df                	cmp    edi,ebx
c001f90f:	76 13                	jbe    c001f924 <__umoddi3+0x34>
c001f911:	89 f0                	mov    eax,esi
c001f913:	f7 f7                	div    edi
c001f915:	89 d0                	mov    eax,edx
c001f917:	31 d2                	xor    edx,edx
c001f919:	83 c4 1c             	add    esp,0x1c
c001f91c:	5b                   	pop    ebx
c001f91d:	5e                   	pop    esi
c001f91e:	5f                   	pop    edi
c001f91f:	5d                   	pop    ebp
c001f920:	c3                   	ret    
c001f921:	8d 76 00             	lea    esi,[esi+0x0]
c001f924:	89 fd                	mov    ebp,edi
c001f926:	85 ff                	test   edi,edi
c001f928:	75 0b                	jne    c001f935 <__umoddi3+0x45>
c001f92a:	b8 01 00 00 00       	mov    eax,0x1
c001f92f:	31 d2                	xor    edx,edx
c001f931:	f7 f7                	div    edi
c001f933:	89 c5                	mov    ebp,eax
c001f935:	89 d8                	mov    eax,ebx
c001f937:	31 d2                	xor    edx,edx
c001f939:	f7 f5                	div    ebp
c001f93b:	89 f0                	mov    eax,esi
c001f93d:	f7 f5                	div    ebp
c001f93f:	89 d0                	mov    eax,edx
c001f941:	eb d4                	jmp    c001f917 <__umoddi3+0x27>
c001f943:	90                   	nop
c001f944:	89 f1                	mov    ecx,esi
c001f946:	39 d8                	cmp    eax,ebx
c001f948:	76 0a                	jbe    c001f954 <__umoddi3+0x64>
c001f94a:	89 f0                	mov    eax,esi
c001f94c:	83 c4 1c             	add    esp,0x1c
c001f94f:	5b                   	pop    ebx
c001f950:	5e                   	pop    esi
c001f951:	5f                   	pop    edi
c001f952:	5d                   	pop    ebp
c001f953:	c3                   	ret    
c001f954:	0f bd e8             	bsr    ebp,eax
c001f957:	83 f5 1f             	xor    ebp,0x1f
c001f95a:	75 1c                	jne    c001f978 <__umoddi3+0x88>
c001f95c:	39 d8                	cmp    eax,ebx
c001f95e:	72 04                	jb     c001f964 <__umoddi3+0x74>
c001f960:	39 f7                	cmp    edi,esi
c001f962:	77 08                	ja     c001f96c <__umoddi3+0x7c>
c001f964:	89 da                	mov    edx,ebx
c001f966:	29 fe                	sub    esi,edi
c001f968:	19 c2                	sbb    edx,eax
c001f96a:	89 f1                	mov    ecx,esi
c001f96c:	89 c8                	mov    eax,ecx
c001f96e:	83 c4 1c             	add    esp,0x1c
c001f971:	5b                   	pop    ebx
c001f972:	5e                   	pop    esi
c001f973:	5f                   	pop    edi
c001f974:	5d                   	pop    ebp
c001f975:	c3                   	ret    
c001f976:	66 90                	xchg   ax,ax
c001f978:	ba 20 00 00 00       	mov    edx,0x20
c001f97d:	29 ea                	sub    edx,ebp
c001f97f:	89 e9                	mov    ecx,ebp
c001f981:	d3 e0                	shl    eax,cl
c001f983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f987:	89 f8                	mov    eax,edi
c001f989:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f98d:	88 d1                	mov    cl,dl
c001f98f:	d3 e8                	shr    eax,cl
c001f991:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f995:	09 c1                	or     ecx,eax
c001f997:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f99b:	89 e9                	mov    ecx,ebp
c001f99d:	d3 e7                	shl    edi,cl
c001f99f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9a3:	89 d8                	mov    eax,ebx
c001f9a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9a9:	88 d1                	mov    cl,dl
c001f9ab:	d3 e8                	shr    eax,cl
c001f9ad:	89 c7                	mov    edi,eax
c001f9af:	89 e9                	mov    ecx,ebp
c001f9b1:	d3 e3                	shl    ebx,cl
c001f9b3:	89 f0                	mov    eax,esi
c001f9b5:	88 d1                	mov    cl,dl
c001f9b7:	d3 e8                	shr    eax,cl
c001f9b9:	09 d8                	or     eax,ebx
c001f9bb:	89 e9                	mov    ecx,ebp
c001f9bd:	d3 e6                	shl    esi,cl
c001f9bf:	89 f3                	mov    ebx,esi
c001f9c1:	89 fa                	mov    edx,edi
c001f9c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9c7:	89 d1                	mov    ecx,edx
c001f9c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9cd:	89 c6                	mov    esi,eax
c001f9cf:	89 d7                	mov    edi,edx
c001f9d1:	39 d1                	cmp    ecx,edx
c001f9d3:	72 27                	jb     c001f9fc <__umoddi3+0x10c>
c001f9d5:	74 21                	je     c001f9f8 <__umoddi3+0x108>
c001f9d7:	89 ca                	mov    edx,ecx
c001f9d9:	29 f3                	sub    ebx,esi
c001f9db:	19 fa                	sbb    edx,edi
c001f9dd:	89 d0                	mov    eax,edx
c001f9df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9e3:	d3 e0                	shl    eax,cl
c001f9e5:	89 e9                	mov    ecx,ebp
c001f9e7:	d3 eb                	shr    ebx,cl
c001f9e9:	09 d8                	or     eax,ebx
c001f9eb:	d3 ea                	shr    edx,cl
c001f9ed:	83 c4 1c             	add    esp,0x1c
c001f9f0:	5b                   	pop    ebx
c001f9f1:	5e                   	pop    esi
c001f9f2:	5f                   	pop    edi
c001f9f3:	5d                   	pop    ebp
c001f9f4:	c3                   	ret    
c001f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9f8:	39 c3                	cmp    ebx,eax
c001f9fa:	73 db                	jae    c001f9d7 <__umoddi3+0xe7>
c001f9fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa00:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa04:	89 d7                	mov    edi,edx
c001fa06:	89 c6                	mov    esi,eax
c001fa08:	eb cd                	jmp    c001f9d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa0a <_init>:
c001fa0a:	55                   	push   ebp
c001fa0b:	89 e5                	mov    ebp,esp
c001fa0d:	e8 e2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa12:	e8 e5 fa ff ff       	call   c001f4fc <__do_global_ctors_aux>
c001fa17:	5d                   	pop    ebp
c001fa18:	c3                   	ret    

Disassembly of section .fini:

c001fa19 <_fini>:
c001fa19:	55                   	push   ebp
c001fa1a:	89 e5                	mov    ebp,esp
c001fa1c:	e8 63 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa21:	5d                   	pop    ebp
c001fa22:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa24 <Computer::~Computer()>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	ba 60 0d 02 c0       	mov    edx,0xc0020d60
c001fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa30:	89 10                	mov    DWORD PTR [eax],edx
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	83 ec 0c             	sub    esp,0xc
c001fa39:	50                   	push   eax
c001fa3a:	e8 a9 ce fe ff       	call   c000c8e8 <Device::~Device()>
c001fa3f:	83 c4 10             	add    esp,0x10
c001fa42:	90                   	nop
c001fa43:	83 c4 0c             	add    esp,0xc
c001fa46:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa48 <Computer::~Computer()>:
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa52:	e8 cd ff ff ff       	call   c001fa24 <Computer::~Computer()>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	83 ec 08             	sub    esp,0x8
c001fa5d:	68 70 01 00 00       	push   0x170
c001fa62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa66:	e8 cd ad fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	83 c4 0c             	add    esp,0xc
c001fa71:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa72 <idleCommon()>:
c001fa72:	83 ec 0c             	sub    esp,0xc
c001fa75:	fa                   	cli    
c001fa76:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa7c:	e8 fb 66 ff ff       	call   c001617c <schedule()>
c001fa81:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa86:	48                   	dec    eax
c001fa87:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa8c:	75 01                	jne    c001fa8f <idleCommon()+0x1d>
c001fa8e:	fb                   	sti    
c001fa8f:	83 c4 0c             	add    esp,0xc
c001fa92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa94 <LinkedList<UnixFile>::~LinkedList()>:
c001fa94:	90                   	nop
c001fa95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa96 <LinkedList<UnixFile>::LinkedList()>:
c001fa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001facb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fad6:	90                   	nop
c001fad7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fae0:	75 10                	jne    c001faf2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	68 74 0f 02 c0       	push   0xc0020f74
c001faea:	e8 a8 1b ff ff       	call   c0011697 <KePanic(char const*)>
c001faef:	83 c4 10             	add    esp,0x10
c001faf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf8:	85 c0                	test   eax,eax
c001fafa:	74 34                	je     c001fb30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb03:	85 c0                	test   eax,eax
c001fb05:	74 29                	je     c001fb30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb2e:	eb 65                	jmp    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb36:	85 c0                	test   eax,eax
c001fb38:	75 4b                	jne    c001fb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb41:	85 c0                	test   eax,eax
c001fb43:	75 40                	jne    c001fb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb4d:	89 10                	mov    DWORD PTR [eax],edx
c001fb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6f:	85 c0                	test   eax,eax
c001fb71:	74 22                	je     c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb73:	83 ec 0c             	sub    esp,0xc
c001fb76:	68 96 0f 02 c0       	push   0xc0020f96
c001fb7b:	e8 17 1b ff ff       	call   c0011697 <KePanic(char const*)>
c001fb80:	83 c4 10             	add    esp,0x10
c001fb83:	eb 10                	jmp    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb85:	83 ec 0c             	sub    esp,0xc
c001fb88:	68 a0 0f 02 c0       	push   0xc0020fa0
c001fb8d:	e8 05 1b ff ff       	call   c0011697 <KePanic(char const*)>
c001fb92:	83 c4 10             	add    esp,0x10
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fba6:	90                   	nop
c001fba7:	83 c4 0c             	add    esp,0xc
c001fbaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbac <LinkedList<UnixFile>::getFirstElement()>:
c001fbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbb4 <LinkedList<UnixFile>::removeFirst()>:
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	75 12                	jne    c001fbd3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 ac 0f 02 c0       	push   0xc0020fac
c001fbc9:	e8 c9 1a ff ff       	call   c0011697 <KePanic(char const*)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	eb 7e                	jmp    c001fc51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbdd:	85 c0                	test   eax,eax
c001fbdf:	74 10                	je     c001fbf1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbe1:	83 ec 0c             	sub    esp,0xc
c001fbe4:	68 f7 0f 02 c0       	push   0xc0020ff7
c001fbe9:	e8 a9 1a ff ff       	call   c0011697 <KePanic(char const*)>
c001fbee:	83 c4 10             	add    esp,0x10
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfa:	85 c0                	test   eax,eax
c001fbfc:	75 33                	jne    c001fc31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc1a:	83 f8 01             	cmp    eax,0x1
c001fc1d:	74 21                	je     c001fc40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	68 d0 0f 02 c0       	push   0xc0020fd0
c001fc27:	e8 6b 1a ff ff       	call   c0011697 <KePanic(char const*)>
c001fc2c:	83 c4 10             	add    esp,0x10
c001fc2f:	eb 0f                	jmp    c001fc40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	89 10                	mov    DWORD PTR [eax],edx
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc47:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc51:	83 c4 0c             	add    esp,0xc
c001fc54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc5e <DriverlessDevice::~DriverlessDevice()>:
c001fc5e:	ba 1c 1c 02 c0       	mov    edx,0xc0021c1c
c001fc63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc67:	89 10                	mov    DWORD PTR [eax],edx
c001fc69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6d:	50                   	push   eax
c001fc6e:	e8 75 cc fe ff       	call   c000c8e8 <Device::~Device()>
c001fc73:	83 c4 04             	add    esp,0x4
c001fc76:	90                   	nop
c001fc77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc78 <DriverlessDevice::~DriverlessDevice()>:
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 d7 ff ff ff       	call   c001fc5e <DriverlessDevice::~DriverlessDevice()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 ec 08             	sub    esp,0x8
c001fc8d:	68 58 01 00 00       	push   0x158
c001fc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc96:	e8 9d ab fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fca2 <LinkedList<Device>::addElement(Device*)>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcaa:	75 10                	jne    c001fcbc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	68 74 0f 02 c0       	push   0xc0020f74
c001fcb4:	e8 de 19 ff ff       	call   c0011697 <KePanic(char const*)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc2:	85 c0                	test   eax,eax
c001fcc4:	74 3a                	je     c001fd00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fccd:	85 c0                	test   eax,eax
c001fccf:	74 2f                	je     c001fd00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcdc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcfe:	eb 68                	jmp    c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	85 c0                	test   eax,eax
c001fd08:	75 4e                	jne    c001fd58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 43                	jne    c001fd58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1d:	89 10                	mov    DWORD PTR [eax],edx
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd42:	85 c0                	test   eax,eax
c001fd44:	74 22                	je     c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd46:	83 ec 0c             	sub    esp,0xc
c001fd49:	68 96 0f 02 c0       	push   0xc0020f96
c001fd4e:	e8 44 19 ff ff       	call   c0011697 <KePanic(char const*)>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	eb 10                	jmp    c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	68 a0 0f 02 c0       	push   0xc0020fa0
c001fd60:	e8 32 19 ff ff       	call   c0011697 <KePanic(char const*)>
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd6f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd79:	90                   	nop
c001fd7a:	83 c4 0c             	add    esp,0xc
c001fd7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd7e <LinkedList<Device>::LinkedList()>:
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdbe:	90                   	nop
c001fdbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc6:	85 c0                	test   eax,eax
c001fdc8:	75 0e                	jne    c001fdd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdd1:	85 c0                	test   eax,eax
c001fdd3:	75 03                	jne    c001fdd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdd5:	b0 01                	mov    al,0x1
c001fdd7:	c3                   	ret    
c001fdd8:	b0 00                	mov    al,0x0
c001fdda:	90                   	nop
c001fddb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fded:	85 c0                	test   eax,eax
c001fdef:	75 17                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	68 ac 0f 02 c0       	push   0xc0020fac
c001fdf9:	e8 99 18 ff ff       	call   c0011697 <KePanic(char const*)>
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	e9 96 00 00 00       	jmp    c001fe9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe06:	66 90                	xchg   ax,ax
c001fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe12:	85 c0                	test   eax,eax
c001fe14:	0f 95 c0             	setne  al
c001fe17:	0f b6 c0             	movzx  eax,al
c001fe1a:	85 c0                	test   eax,eax
c001fe1c:	74 12                	je     c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	68 f7 0f 02 c0       	push   0xc0020ff7
c001fe26:	e8 6c 18 ff ff       	call   c0011697 <KePanic(char const*)>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	66 90                	xchg   ax,ax
c001fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe39:	85 c0                	test   eax,eax
c001fe3b:	0f 94 c0             	sete   al
c001fe3e:	0f b6 c0             	movzx  eax,al
c001fe41:	85 c0                	test   eax,eax
c001fe43:	74 33                	je     c001fe78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe61:	83 f8 01             	cmp    eax,0x1
c001fe64:	74 22                	je     c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	68 d0 0f 02 c0       	push   0xc0020fd0
c001fe6e:	e8 24 18 ff ff       	call   c0011697 <KePanic(char const*)>
c001fe73:	83 c4 10             	add    esp,0x10
c001fe76:	eb 10                	jmp    c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe85:	89 10                	mov    DWORD PTR [eax],edx
c001fe87:	90                   	nop
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe8f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe99:	8d 76 00             	lea    esi,[esi+0x0]
c001fe9c:	83 c4 0c             	add    esp,0xc
c001fe9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fea8:	75 12                	jne    c001febc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	68 74 0f 02 c0       	push   0xc0020f74
c001feb2:	e8 e0 17 ff ff       	call   c0011697 <KePanic(char const*)>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	66 90                	xchg   ax,ax
c001febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec2:	85 c0                	test   eax,eax
c001fec4:	74 36                	je     c001fefc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fecd:	85 c0                	test   eax,eax
c001fecf:	74 2b                	je     c001fefc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fedc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fef1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fef8:	eb 6a                	jmp    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fefa:	66 90                	xchg   ax,ax
c001fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	85 c0                	test   eax,eax
c001ff04:	75 4e                	jne    c001ff54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0d:	85 c0                	test   eax,eax
c001ff0f:	75 43                	jne    c001ff54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff19:	89 10                	mov    DWORD PTR [eax],edx
c001ff1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff3b:	85 c0                	test   eax,eax
c001ff3d:	74 25                	je     c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	68 96 0f 02 c0       	push   0xc0020f96
c001ff47:	e8 4b 17 ff ff       	call   c0011697 <KePanic(char const*)>
c001ff4c:	83 c4 10             	add    esp,0x10
c001ff4f:	eb 13                	jmp    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff51:	8d 76 00             	lea    esi,[esi+0x0]
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	68 a0 0f 02 c0       	push   0xc0020fa0
c001ff5c:	e8 36 17 ff ff       	call   c0011697 <KePanic(char const*)>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff75:	90                   	nop
c001ff76:	83 c4 0c             	add    esp,0xc
c001ff79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff7c <ACPI::~ACPI()>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	ba 78 22 02 c0       	mov    edx,0xc0022278
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	89 10                	mov    DWORD PTR [eax],edx
c001ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	50                   	push   eax
c001ff92:	e8 51 c9 fe ff       	call   c000c8e8 <Device::~Device()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	90                   	nop
c001ff9b:	83 c4 0c             	add    esp,0xc
c001ff9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffa0 <ACPI::~ACPI()>:
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffaa:	e8 cd ff ff ff       	call   c001ff7c <ACPI::~ACPI()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	83 ec 08             	sub    esp,0x8
c001ffb5:	68 64 12 00 00       	push   0x1264
c001ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbe:	e8 75 a8 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	83 c4 0c             	add    esp,0xc
c001ffc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ffcc <LinkedList<Device>::~LinkedList()>:
c001ffcc:	90                   	nop
c001ffcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffd0 <LinkedList<Device>::isEmpty()>:
c001ffd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffd6:	85 c0                	test   eax,eax
c001ffd8:	75 0e                	jne    c001ffe8 <LinkedList<Device>::isEmpty()+0x18>
c001ffda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffe1:	85 c0                	test   eax,eax
c001ffe3:	75 03                	jne    c001ffe8 <LinkedList<Device>::isEmpty()+0x18>
c001ffe5:	b0 01                	mov    al,0x1
c001ffe7:	c3                   	ret    
c001ffe8:	b0 00                	mov    al,0x0
c001ffea:	90                   	nop
c001ffeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffec <LinkedList<Device>::getFirstElement()>:
c001ffec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fff4 <LinkedList<Device>::removeFirst()>:
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fffd:	85 c0                	test   eax,eax
c001ffff:	75 17                	jne    c0020018 <LinkedList<Device>::removeFirst()+0x24>
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	68 ac 0f 02 c0       	push   0xc0020fac
c0020009:	e8 89 16 ff ff       	call   c0011697 <KePanic(char const*)>
c002000e:	83 c4 10             	add    esp,0x10
c0020011:	e9 92 00 00 00       	jmp    c00200a8 <LinkedList<Device>::removeFirst()+0xb4>
c0020016:	66 90                	xchg   ax,ax
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002001f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020025:	85 c0                	test   eax,eax
c0020027:	74 13                	je     c002003c <LinkedList<Device>::removeFirst()+0x48>
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	68 f7 0f 02 c0       	push   0xc0020ff7
c0020031:	e8 61 16 ff ff       	call   c0011697 <KePanic(char const*)>
c0020036:	83 c4 10             	add    esp,0x10
c0020039:	8d 76 00             	lea    esi,[esi+0x0]
c002003c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020040:	8b 00                	mov    eax,DWORD PTR [eax]
c0020042:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020048:	85 c0                	test   eax,eax
c002004a:	75 34                	jne    c0020080 <LinkedList<Device>::removeFirst()+0x8c>
c002004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020065:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020068:	83 f8 01             	cmp    eax,0x1
c002006b:	74 27                	je     c0020094 <LinkedList<Device>::removeFirst()+0xa0>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	68 d0 0f 02 c0       	push   0xc0020fd0
c0020075:	e8 1d 16 ff ff       	call   c0011697 <KePanic(char const*)>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	eb 15                	jmp    c0020094 <LinkedList<Device>::removeFirst()+0xa0>
c002007f:	90                   	nop
c0020080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020084:	8b 00                	mov    eax,DWORD PTR [eax]
c0020086:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	89 10                	mov    DWORD PTR [eax],edx
c0020092:	66 90                	xchg   ax,ax
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002009b:	8d 50 ff             	lea    edx,[eax-0x1]
c002009e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200a5:	8d 76 00             	lea    esi,[esi+0x0]
c00200a8:	83 c4 0c             	add    esp,0xc
c00200ab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200ac <CPU::~CPU()>:
c00200ac:	83 ec 0c             	sub    esp,0xc
c00200af:	ba 20 24 02 c0       	mov    edx,0xc0022420
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	89 10                	mov    DWORD PTR [eax],edx
c00200ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	50                   	push   eax
c00200c2:	e8 21 c8 fe ff       	call   c000c8e8 <Device::~Device()>
c00200c7:	83 c4 10             	add    esp,0x10
c00200ca:	90                   	nop
c00200cb:	83 c4 0c             	add    esp,0xc
c00200ce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200d0 <CPU::~CPU()>:
c00200d0:	83 ec 0c             	sub    esp,0xc
c00200d3:	83 ec 0c             	sub    esp,0xc
c00200d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200da:	e8 cd ff ff ff       	call   c00200ac <CPU::~CPU()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 ec 08             	sub    esp,0x8
c00200e5:	68 94 11 00 00       	push   0x1194
c00200ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ee:	e8 45 a7 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00200f3:	83 c4 10             	add    esp,0x10
c00200f6:	83 c4 0c             	add    esp,0xc
c00200f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020100:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020103:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020104 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020104:	90                   	nop
c0020105:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020108 <ThreadControlBlock::ThreadControlBlock()>:
c0020108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020117:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020122:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020138:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002013f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020143:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002014f:	90                   	nop
c0020150:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020178:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002017e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020182:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020189:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020194:	90                   	nop
c0020195:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020196 <PCI::~PCI()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	ba 00 33 02 c0       	mov    edx,0xc0023300
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	89 10                	mov    DWORD PTR [eax],edx
c00201a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	50                   	push   eax
c00201ac:	e8 cf c1 fe ff       	call   c000c380 <Bus::~Bus()>
c00201b1:	83 c4 10             	add    esp,0x10
c00201b4:	90                   	nop
c00201b5:	83 c4 0c             	add    esp,0xc
c00201b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201ba <PCI::~PCI()>:
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c4:	e8 cd ff ff ff       	call   c0020196 <PCI::~PCI()>
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	83 ec 08             	sub    esp,0x8
c00201cf:	68 5c 01 00 00       	push   0x15c
c00201d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d8:	e8 5b a6 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	83 c4 0c             	add    esp,0xc
c00201e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201e4 <IDE::~IDE()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	ba b4 33 02 c0       	mov    edx,0xc00233b4
c00201ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f0:	89 10                	mov    DWORD PTR [eax],edx
c00201f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	50                   	push   eax
c00201fa:	e8 61 cb fe ff       	call   c000cd60 <HardDiskController::~HardDiskController()>
c00201ff:	83 c4 10             	add    esp,0x10
c0020202:	90                   	nop
c0020203:	83 c4 0c             	add    esp,0xc
c0020206:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020208 <IDE::~IDE()>:
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020212:	e8 cd ff ff ff       	call   c00201e4 <IDE::~IDE()>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	83 ec 08             	sub    esp,0x8
c002021d:	68 70 02 00 00       	push   0x270
c0020222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020226:	e8 0d a6 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	83 c4 0c             	add    esp,0xc
c0020231:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020232 <SATABus::~SATABus()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	ba 04 34 02 c0       	mov    edx,0xc0023404
c002023a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023e:	89 10                	mov    DWORD PTR [eax],edx
c0020240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	50                   	push   eax
c0020248:	e8 13 cb fe ff       	call   c000cd60 <HardDiskController::~HardDiskController()>
c002024d:	83 c4 10             	add    esp,0x10
c0020250:	90                   	nop
c0020251:	83 c4 0c             	add    esp,0xc
c0020254:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020256 <SATABus::~SATABus()>:
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020260:	e8 cd ff ff ff       	call   c0020232 <SATABus::~SATABus()>
c0020265:	83 c4 10             	add    esp,0x10
c0020268:	83 ec 08             	sub    esp,0x8
c002026b:	68 64 01 00 00       	push   0x164
c0020270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020274:	e8 bf a5 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	83 c4 0c             	add    esp,0xc
c002027f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020280 <ATA::~ATA()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	ba 44 34 02 c0       	mov    edx,0xc0023444
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	89 10                	mov    DWORD PTR [eax],edx
c002028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	50                   	push   eax
c0020296:	e8 a7 cb fe ff       	call   c000ce42 <PhysicalDisk::~PhysicalDisk()>
c002029b:	83 c4 10             	add    esp,0x10
c002029e:	90                   	nop
c002029f:	83 c4 0c             	add    esp,0xc
c00202a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202a4 <ATA::~ATA()>:
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ae:	e8 cd ff ff ff       	call   c0020280 <ATA::~ATA()>
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	83 ec 08             	sub    esp,0x8
c00202b9:	68 7c 01 00 00       	push   0x17c
c00202be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c2:	e8 71 a5 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	83 c4 0c             	add    esp,0xc
c00202cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202ce <ATAPI::~ATAPI()>:
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c00202d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202da:	89 10                	mov    DWORD PTR [eax],edx
c00202dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	50                   	push   eax
c00202e4:	e8 59 cb fe ff       	call   c000ce42 <PhysicalDisk::~PhysicalDisk()>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	90                   	nop
c00202ed:	83 c4 0c             	add    esp,0xc
c00202f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202f2 <ATAPI::~ATAPI()>:
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fc:	e8 cd ff ff ff       	call   c00202ce <ATAPI::~ATAPI()>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	83 ec 08             	sub    esp,0x8
c0020307:	68 84 01 00 00       	push   0x184
c002030c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020310:	e8 23 a5 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	83 c4 0c             	add    esp,0xc
c002031b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002031c <SATA::~SATA()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	ba 40 35 02 c0       	mov    edx,0xc0023540
c0020324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020328:	89 10                	mov    DWORD PTR [eax],edx
c002032a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	50                   	push   eax
c0020332:	e8 0b cb fe ff       	call   c000ce42 <PhysicalDisk::~PhysicalDisk()>
c0020337:	83 c4 10             	add    esp,0x10
c002033a:	90                   	nop
c002033b:	83 c4 0c             	add    esp,0xc
c002033e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020340 <SATA::~SATA()>:
c0020340:	83 ec 0c             	sub    esp,0xc
c0020343:	83 ec 0c             	sub    esp,0xc
c0020346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002034a:	e8 cd ff ff ff       	call   c002031c <SATA::~SATA()>
c002034f:	83 c4 10             	add    esp,0x10
c0020352:	83 ec 08             	sub    esp,0x8
c0020355:	68 7c 01 00 00       	push   0x17c
c002035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035e:	e8 d5 a4 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	83 c4 0c             	add    esp,0xc
c0020369:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002036a <SATAPI::~SATAPI()>:
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	ba 64 36 02 c0       	mov    edx,0xc0023664
c0020372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020376:	89 10                	mov    DWORD PTR [eax],edx
c0020378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	50                   	push   eax
c0020380:	e8 bd ca fe ff       	call   c000ce42 <PhysicalDisk::~PhysicalDisk()>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	90                   	nop
c0020389:	83 c4 0c             	add    esp,0xc
c002038c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002038e <SATAPI::~SATAPI()>:
c002038e:	83 ec 0c             	sub    esp,0xc
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020398:	e8 cd ff ff ff       	call   c002036a <SATAPI::~SATAPI()>
c002039d:	83 c4 10             	add    esp,0x10
c00203a0:	83 ec 08             	sub    esp,0x8
c00203a3:	68 84 01 00 00       	push   0x184
c00203a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ac:	e8 87 a4 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	83 c4 0c             	add    esp,0xc
c00203b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203b8 <IOAPIC::~IOAPIC()>:
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	ba a4 36 02 c0       	mov    edx,0xc00236a4
c00203c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c4:	89 10                	mov    DWORD PTR [eax],edx
c00203c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	50                   	push   eax
c00203ce:	e8 15 c5 fe ff       	call   c000c8e8 <Device::~Device()>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	90                   	nop
c00203d7:	83 c4 0c             	add    esp,0xc
c00203da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203dc <IOAPIC::~IOAPIC()>:
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	83 ec 0c             	sub    esp,0xc
c00203e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e6:	e8 cd ff ff ff       	call   c00203b8 <IOAPIC::~IOAPIC()>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	83 ec 08             	sub    esp,0x8
c00203f1:	68 68 01 00 00       	push   0x168
c00203f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fa:	e8 39 a4 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c00203ff:	83 c4 10             	add    esp,0x10
c0020402:	83 c4 0c             	add    esp,0xc
c0020405:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020408 <APICTimer::~APICTimer()>:
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	ba ec 36 02 c0       	mov    edx,0xc00236ec
c0020410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020414:	89 10                	mov    DWORD PTR [eax],edx
c0020416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	50                   	push   eax
c002041e:	e8 91 df fe ff       	call   c000e3b4 <Timer::~Timer()>
c0020423:	83 c4 10             	add    esp,0x10
c0020426:	90                   	nop
c0020427:	83 c4 0c             	add    esp,0xc
c002042a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002042c <APICTimer::~APICTimer()>:
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020436:	e8 cd ff ff ff       	call   c0020408 <APICTimer::~APICTimer()>
c002043b:	83 c4 10             	add    esp,0x10
c002043e:	83 ec 08             	sub    esp,0x8
c0020441:	68 60 01 00 00       	push   0x160
c0020446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044a:	e8 e9 a3 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	83 c4 0c             	add    esp,0xc
c0020455:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020458 <PIT::~PIT()>:
c0020458:	83 ec 0c             	sub    esp,0xc
c002045b:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	89 10                	mov    DWORD PTR [eax],edx
c0020466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	50                   	push   eax
c002046e:	e8 41 df fe ff       	call   c000e3b4 <Timer::~Timer()>
c0020473:	83 c4 10             	add    esp,0x10
c0020476:	90                   	nop
c0020477:	83 c4 0c             	add    esp,0xc
c002047a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002047c <PIT::~PIT()>:
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	83 ec 0c             	sub    esp,0xc
c0020482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020486:	e8 cd ff ff ff       	call   c0020458 <PIT::~PIT()>
c002048b:	83 c4 10             	add    esp,0x10
c002048e:	83 ec 08             	sub    esp,0x8
c0020491:	68 5c 01 00 00       	push   0x15c
c0020496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002049a:	e8 99 a3 fe ff       	call   c000a838 <operator delete(void*, unsigned long)>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	83 c4 0c             	add    esp,0xc
c00204a5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 51 25 02 c0       	mov    esi,0xc0022551
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 6d 25 02 c0       	mov    esi,0xc002256d
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
